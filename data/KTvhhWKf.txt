using System.Collections;
using System.Collections.Generic;
using Items.Enumerators;

namespace Items
{
    public class Inventory : IEnumerable<Bag>
    {
        private readonly List<Bag> _bags;

        public Inventory(int maxBagsCount = 1, params Bag[] startBags)
        {
            _bags = new List<Bag>(maxBagsCount);

            InitBags(startBags);
        }

        public IEnumerator<Bag> GetEnumerator()
        {
            return new InventoryEnumerator(_bags.ToArray());
        }
        
        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public InventoryChangeResult Add(Item item, int count = 1)
        {
            var id = item.ItemData.id;
            var bag = FindSuitableBag(id);

            if (bag == null) return new InventoryChangeResult(ItemChangeResult.NotPresented);

            var itemSlot = ConvertToItemSlot(item, count);
            return bag.Add(itemSlot);
        }

        public InventoryChangeResult Remove(Item item, int count = 1)
        {
            var id = item.ItemData.id;
            var bag = FindSuitableBag(id);

            if (bag == null) return new InventoryChangeResult(ItemChangeResult.NotPresented);

            var itemSlot = ConvertToItemSlot(item, count);
            return bag.Remove(itemSlot);
        }

        private void InitBags(Bag[] bags)
        {
            _bags.AddRange(bags);
        }

        private ItemSlot ConvertToItemSlot(Item item, int count)
        {
            var id = item.ItemData.id;
            var capacity = item.ItemData.stackCount;

            return new ItemSlot(id, count, capacity);
        }

        private Bag FindSuitableBag(ItemID id)
        {
            foreach (var bag in _bags)
            {
                if (bag.IsItemPresents(id))
                    return bag;
            }

            return null;
        }
    }
}
