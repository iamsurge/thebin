海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥地下交通站@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"displayName\":\"4K极客影院🐯\",\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"let newstip = list.length;\\nif (newstip) {\\n    setLastChapterRule('js:' + $.toString((newstip) => {\\n        setResult('更新至: 第' + newstip + \\\"集\\\");\\n    }, newstip));\\n}\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"备份\",\"path\":\"bzff\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\nvar lazy = `@lazyRule=.js:var jsurl = unescape(JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]).url);if(jsurl.match(/youku|mgtv|ixigua|qq.com|qiyi|migu|bili|sohu|pptv|letv|le/)){var input=jsurl;eval(\\\"var config =\\\" + fetch(\\\"hiker://files/cache/MyParseSet.json\\\"));eval(fetch(config.cj));aytmParse(jsurl)}else if(jsurl.match(/LT/)){eval(\\\"var config =\\\" + fetch(\\\"hiker://files/rules/DuanNian/MyParse.json\\\"));eval(request(config.settings.cj));ParseS.maoss(\\\"https://www.haokanys.top/?url=\\\" + jsurl, false, \\\"A42EAC0C2B408472\\\")}else{jsurl}`;\\n//线路名列表的定位\\nvar arts = parseDomForArray(html, 'body&&#playNumTab&&.Tab');\\n\\n//线路名列表名称的定位\\nvar tabs = [];\\nfor (var i in arts) {\\n    tabs.push(parseDomForHtml(arts[i], 'a&&Text'))\\n}\\n\\n//播放列表的列表的定位\\nvar conts = parseDomForArray(html, 'body&&.playNumList');\\nvar lists = [];\\nfor (var i in conts) {\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\n}\\n\\nvar 导演 = parseDomForHtml(html, '').replace(/\\\\//g,' ');\\n\\nvar 主演 = parseDomForHtml(html, '.Star&&Text').replace(/\\\\//g,' ');\\n\\nvar 更新 = parseDomForHtml(html, '.info-item&&Text');\\n\\nvar 状态 = parseDomForHtml(html, '.infor-item&&Text');\\n\\nvar 图片 = parseDom(html, 'img,1&&src');\\n\\nvar 简介 = parseDomForHtml(html, '.ju-blurb&&Text').replace(/详细 >/,'');\\n\\n\\n\\nvar Color = \\\"#f13b66a\\\";\\nvar Color1 = \\\"#098AC1\\\";\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"' + Color + '\\\">' + title + '</front></strong>';\\n}\\nlet line_model = 8;\\nlet line_type_model = 'blank_block';\\nd.push({\\n    title: 导演 + '\\\\n' + 主演,\\n    desc: 更新 + '\\\\n' + 状态,\\n    pic_url: 图片,\\n    url: \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noHistory#\\\",   \\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nd.push({\\n    title: '‘‘’’<small><font color=\\\"#ff148e8e\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\"red\\\">详情</font></small></small>',\\n    url: 'hiker://empty#' + '\\\\n' + 简介 + `@rule=js:var res = {}; var d = [];d.push({title:'影片简介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\n    col_type: 'text_1'\\n});\\nfor (let i = 0; i < line_model; i++) {\\n    d.push({\\n        col_type: line_type_model\\n    })\\n}\\nfunction setTabs(tabs, vari) {\\n    for (var i in tabs) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? getHead(tabs[i]) : tabs[i],\\n            url: url,\\n            col_type: 'scroll_button'\\n        })\\n    }\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\nfunction setLists(lists, index) {\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\nif (getVar('shsort') == '1') {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#0aa344\\\">↑</font></small>' + '<small><font color=\\\"#ff4c00\\\">↓</font></small>';\\n} else {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#ff4c00\\\">↑</font></small>' + '<small><font color=\\\"#0aa344\\\">↓</font></small>';\\n}\\nfunction setLists(lists, index) {\\n    d.push({\\n        title: '‘‘’’<span style=\\\"color:' + Color1 + '\\\"><small>选集列表</small>' + '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span style=\\\"float:right\\\">' + '<small>' + sx + '</small>',\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功';'#noHistory#hiker://empty'`,\\n        col_type: 'text_center_1'\\n    })\\n    var list = lists[index];\\n\\n    if (getVar('shsort') == '1') {\\n        try {\\n            for (var j = list.length - 1; j >= 0; j--) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url:parseDom(list[j], 'a&&href') + lazy,\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2'\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n    } else {\\n        try {\\n            for (var j = 0; j < list.length; j++) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url:parseDom(list[j], 'a&&href') + lazy,\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2'\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n\\n    }\\n}\\n\\n//搜索，以下基本不需要修改。\\nvar title = parseDomForHtml(html, 'h1&&Text');\\nvar Color = \\\"#f13b66a\\\";\\nvar Color1 = \\\"#098AC1\\\";\\n\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"' + Color + '\\\">' + title + '</front></strong>';\\n}\\nd.push({\\n    title: '老黑',\\n    url: 'hiker://search?s=' + title + '&rule=黑黑影视🌚',\\n    pic_url: \\\"https://android-artworks.25pp.com/fs08/2021/09/18/11/110_c6a1f70c163d781483c9b2651cf92db9_con_130x130.png\\\",\\n    col_type: 'icon_small_4'\\n})\\nd.push({\\n    title: 'APP',\\n    url: 'hiker://search?s=' + title + '&rule=app影视.dp',\\n    pic_url: \\\"https://android-artworks.25pp.com/fs08/2021/03/23/8/110_0b65fb0f0a90060a0996c4e7414937f2_con_130x130.png\\\",\\n    col_type: 'icon_small_4'\\n})\\nd.push({\\n    title: '搜索',\\n    url: 'hiker://search?s=' + title + '&group=①免嗅',\\n    pic_url: \\\"https://android-artworks.25pp.com/fs08/2021/09/23/6/110_c6bf3e6cd4fa4ee1cddec2b2ac2fed1c_con_130x130.png\\\",\\n    col_type: 'icon_small_4'\\n})\\nd.push({\\n    title: '豆瓣',\\n    url: 'hiker://search?s=' + title + '&rule=青豆',\\n    pic_url: \\\"https://gitee.com/Joker_tx/hiker/raw/master/img/青豆.png\\\",\\n    col_type: 'icon_small_4'\\n})\\n\\nsetTabs(tabs, MY_URL);\\nsetLists(lists, getVar(MY_URL, '0'));\\nd.push({\\n    title: '<br>',\\n    col_type: 'rich_text'\\n});\\nd.push({\\n    col_type: 'big_blank_block'\\n});\\nd.push({\\n    col_type: 'big_blank_block'\\n});\\nd.push({\\n    title: '““””<small><font color=#871f78>以上数据来源于网络，如您喜欢，请支持官方</font></small>',\\n    desc: '““””<small><font color=#f20c00>此规则仅限学习交流使用，请于导入后24小时内删除，任何组织或个人不得以任何方式方法传播此规则的整体或部分！</font></small>',\\n    url: MY_URL,\\n    col_type: 'text_center_1'\\n});\\nd.push({\\n    title: '<br>',\\n    col_type: 'rich_text'\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"二级页面信息module-tab-items-box&&span\",\"path\":\"xnxi\",\"rule\":\"//二级页面基本信息\\nvar arts = parseDomForArray(html, 'body&&.module-tab-items-box&&span');\\nvar tabs = [];\\nfor (var i in arts) {\\n    tabs.push(parseDomForHtml(arts[i], 'Text').replace(' ',''))\\n}\\nvar conts = parseDomForArray(html, 'body&&.module-play-list');\\nvar lists = [];\\nfor (var i in conts) {\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\n}\\nvar title = parseDomForHtml(html, 'h1&&Text');\\nvar 导演 = parseDomForHtml(html, '.module-info-item,1&&Text').replace(/\\\\//g,' ');\\nvar 主演 = parseDomForHtml(html, '.module-info-item,2&&Text').replace(/\\\\//g,' ');\\nvar 更新 = parseDomForHtml(html, '.module-info-item,4&&Text');\\nvar 状态 = parseDomForHtml(html, '.module-info-item,3&&Text');\\nvar 图片 = parseDom(html, '.lazyload&&data-original');\\nvar 简介 = parseDomForHtml(html, 'p&&Text').replace(/简介：/,'').replace('详情','').replace('展开全部','');\\nsetLastChapterRule('.module-play-list&&a,-1&&Text')\"}],\"saved\":false,\"title\":\"轻合集.逐风者\",\"version\":0,\"url\":\"https://www.i8k.cc/detail/129896.html#immersiveTheme#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_1\",\"find_rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\nlazy = $('').lazyRule(() => {\\n    return $.require('hiker://page/dmLazy.js?rule=dm盒子').dmLazy();\\n})\\n\\neval(JSON.parse(request('hiker://page/xnxi')).rule)\\nvar Color = \\\"#f13b66a\\\";\\nvar Color1 = \\\"#098AC1\\\";\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"' + Color + '\\\">' + title + '</front></strong>';\\n}\\nlet line_model = 8;\\nlet line_type_model = 'blank_block';\\nd.push({\\n    title: 导演 + '\\\\n' + 主演,\\n    desc: 更新 + '\\\\n' + 状态,\\n    pic_url: 图片,\\n    url: \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noHistory#\\\",   \\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nd.push({\\n    title: '‘‘’’<small><font color=\\\"#ff148e8e\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\"red\\\">详情</font></small></small>',\\n    url: 'hiker://empty#' + '\\\\n' + 简介 + `@rule=js:var res = {}; var d = [];d.push({title:'影片简介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\n    col_type: 'text_1'\\n});\\nfor (let i = 0; i < line_model; i++) {\\n    d.push({\\n        col_type: line_type_model\\n    })\\n}\\nfunction setTabs(tabs, vari) {\\n    for (var i in tabs) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? getHead(tabs[i]) : tabs[i],\\n            url: url,\\n            col_type: 'scroll_button'\\n        })\\n    }\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\nfunction setLists(lists, index) {\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\nif (getVar('shsort') == '1') {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#0aa344\\\">↑</font></small>' + '<small><font color=\\\"#ff4c00\\\">↓</font></small>';\\n} else {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#ff4c00\\\">↑</font></small>' + '<small><font color=\\\"#0aa344\\\">↓</font></small>';\\n}\\nfunction setLists(lists, index) {\\n    d.push({\\n        title: '‘‘’’<span style=\\\"color:' + Color1 + '\\\"><small>选集列表</small>' + '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span style=\\\"float:right\\\">' + '<small>' + sx + '</small>',\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功';'#noHistory#hiker://empty'`,\\n        col_type: 'text_center_1'\\n    })\\n    var list = lists[index];\\n\\n    if (getVar('shsort') == '1') {\\n        try {\\n            for (var j = list.length - 1; j >= 0; j--) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url:parseDom(list[j], 'a&&href') + lazy,\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2'\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n    } else {\\n        try {\\n            for (var j = 0; j < list.length; j++) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url:parseDom(list[j], 'a&&href') + lazy,\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2'\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n\\n    }\\n}\\n\\n//搜索，以下基本不需要修改。\\nvar Color = \\\"#f13b66a\\\";\\nvar Color1 = \\\"#098AC1\\\";\\n\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"' + Color + '\\\">' + title + '</front></strong>';\\n}\\nd.push({\\n    title: '香情',\\n    url: 'hiker://search?s=' + title + '&rule=香情影视',\\n    pic_url: \\\"https://android-artworks.25pp.com/fs08/2021/09/18/11/110_c6a1f70c163d781483c9b2651cf92db9_con_130x130.png\\\",\\n    col_type: 'icon_small_4'\\n})\\nd.push({\\n    title: '聚影√',\\n    url: 'hiker://search?s=' + title + '&rule=聚影√',\\n    pic_url: \\\"https://android-artworks.25pp.com/fs08/2021/03/23/8/110_0b65fb0f0a90060a0996c4e7414937f2_con_130x130.png\\\",\\n    col_type: 'icon_small_4'\\n})\\nd.push({\\n    title: '搜索',\\n    url: 'hiker://search?s=' + title + '&group=①免嗅',\\n    pic_url: \\\"https://android-artworks.25pp.com/fs08/2021/09/23/6/110_c6bf3e6cd4fa4ee1cddec2b2ac2fed1c_con_130x130.png\\\",\\n    col_type: 'icon_small_4'\\n})\\nd.push({\\n    title: '豆瓣',\\n    url: 'hiker://search?s=' + title + '&rule=青豆',\\n    pic_url: \\\"https://img3.doubanio.com/f/frodo/144e6fb7d96701944e7dbb1a9bad51bdb1debe29/pics/app/logo.png\\\",\\n    col_type: 'icon_small_4'\\n})\\n\\nsetTabs(tabs, MY_URL);\\nsetLists(lists, getVar(MY_URL, '0'));\\nd.push({\\n    title: '<br>',\\n    col_type: 'rich_text'\\n});\\nd.push({\\n    col_type: 'big_blank_block'\\n});\\nd.push({\\n    col_type: 'big_blank_block'\\n});\\nd.push({\\n    title: '““””<small><font color=#871f78>以上数据来源于网络，如您喜欢，请支持官方</font></small>',\\n    desc: '““””<small><font color=#f20c00>此规则仅限学习交流使用，请于导入后24小时内删除，任何组织或个人不得以任何方式方法传播此规则的整体或部分！</font></small>',\\n    url: MY_URL,\\n    col_type: 'text_center_1'\\n});\\nd.push({\\n    title: '<br>',\\n    col_type: 'rich_text'\\n});\\nsetResult(d);\",\"group\":\"轻合集.逐风者\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"备份\\\",\\\"path\\\":\\\"bzff\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\nvar lazy = `@lazyRule=.js:var jsurl = unescape(JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1]).url);if(jsurl.match(/youku|mgtv|ixigua|qq.com|qiyi|migu|bili|sohu|pptv|letv|le/)){var input=jsurl;eval(\\\\\\\"var config =\\\\\\\" + fetch(\\\\\\\"hiker://files/cache/MyParseSet.json\\\\\\\"));eval(fetch(config.cj));aytmParse(jsurl)}else if(jsurl.match(/LT/)){eval(\\\\\\\"var config =\\\\\\\" + fetch(\\\\\\\"hiker://files/rules/DuanNian/MyParse.json\\\\\\\"));eval(request(config.settings.cj));ParseS.maoss(\\\\\\\"https://www.haokanys.top/?url=\\\\\\\" + jsurl, false, \\\\\\\"A42EAC0C2B408472\\\\\\\")}else{jsurl}`;\\\\n//线路名列表的定位\\\\nvar arts = parseDomForArray(html, 'body&&#playNumTab&&.Tab');\\\\n\\\\n//线路名列表名称的定位\\\\nvar tabs = [];\\\\nfor (var i in arts) {\\\\n    tabs.push(parseDomForHtml(arts[i], 'a&&Text'))\\\\n}\\\\n\\\\n//播放列表的列表的定位\\\\nvar conts = parseDomForArray(html, 'body&&.playNumList');\\\\nvar lists = [];\\\\nfor (var i in conts) {\\\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\\\n}\\\\n\\\\nvar 导演 = parseDomForHtml(html, '').replace(/\\\\\\\\//g,' ');\\\\n\\\\nvar 主演 = parseDomForHtml(html, '.Star&&Text').replace(/\\\\\\\\//g,' ');\\\\n\\\\nvar 更新 = parseDomForHtml(html, '.info-item&&Text');\\\\n\\\\nvar 状态 = parseDomForHtml(html, '.infor-item&&Text');\\\\n\\\\nvar 图片 = parseDom(html, 'img,1&&src');\\\\n\\\\nvar 简介 = parseDomForHtml(html, '.ju-blurb&&Text').replace(/详细 >/,'');\\\\n\\\\n\\\\n\\\\nvar Color = \\\\\\\"#f13b66a\\\\\\\";\\\\nvar Color1 = \\\\\\\"#098AC1\\\\\\\";\\\\nfunction getHead(title) {\\\\n    return '‘‘’’<strong><font color=\\\\\\\"' + Color + '\\\\\\\">' + title + '</front></strong>';\\\\n}\\\\nlet line_model = 8;\\\\nlet line_type_model = 'blank_block';\\\\nd.push({\\\\n    title: 导演 + '\\\\\\\\n' + 主演,\\\\n    desc: 更新 + '\\\\\\\\n' + 状态,\\\\n    pic_url: 图片,\\\\n    url: \\\\\\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置#noHistory#\\\\\\\",   \\\\n    col_type: 'movie_1_vertical_pic_blur'\\\\n});\\\\nd.push({\\\\n    title: '‘‘’’<small><font color=\\\\\\\"#ff148e8e\\\\\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\\\\\"red\\\\\\\">详情</font></small></small>',\\\\n    url: 'hiker://empty#' + '\\\\\\\\n' + 简介 + `@rule=js:var res = {}; var d = [];d.push({title:'影片简介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\\\n    col_type: 'text_1'\\\\n});\\\\nfor (let i = 0; i < line_model; i++) {\\\\n    d.push({\\\\n        col_type: line_type_model\\\\n    })\\\\n}\\\\nfunction setTabs(tabs, vari) {\\\\n    for (var i in tabs) {\\\\n        var url = \\\\\\\"#noLoading#@lazyRule=.js:putVar('\\\\\\\" + vari + \\\\\\\"', '\\\\\\\" + i + \\\\\\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\\\\\";\\\\n        d.push({\\\\n            title: getVar(vari, '0') == i ? getHead(tabs[i]) : tabs[i],\\\\n            url: url,\\\\n            col_type: 'scroll_button'\\\\n        })\\\\n    }\\\\n    d.push({\\\\n        col_type: 'line_blank'\\\\n    })\\\\n}\\\\nfunction setLists(lists, index) {\\\\n    d.push({\\\\n        col_type: 'line_blank'\\\\n    })\\\\n}\\\\nif (getVar('shsort') == '1') {\\\\n    var sx = '‘‘’’<font color=\\\\\\\"#0aa344\\\\\\\">排序</font></small>' + '<small><font color=\\\\\\\"#0aa344\\\\\\\">↑</font></small>' + '<small><font color=\\\\\\\"#ff4c00\\\\\\\">↓</font></small>';\\\\n} else {\\\\n    var sx = '‘‘’’<font color=\\\\\\\"#0aa344\\\\\\\">排序</font></small>' + '<small><font color=\\\\\\\"#ff4c00\\\\\\\">↑</font></small>' + '<small><font color=\\\\\\\"#0aa344\\\\\\\">↓</font></small>';\\\\n}\\\\nfunction setLists(lists, index) {\\\\n    d.push({\\\\n        title: '‘‘’’<span style=\\\\\\\"color:' + Color1 + '\\\\\\\"><small>选集列表</small>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t<span style=\\\\\\\"float:right\\\\\\\">' + '<small>' + sx + '</small>',\\\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功';'#noHistory#hiker://empty'`,\\\\n        col_type: 'text_center_1'\\\\n    })\\\\n    var list = lists[index];\\\\n\\\\n    if (getVar('shsort') == '1') {\\\\n        try {\\\\n            for (var j = list.length - 1; j >= 0; j--) {\\\\n                d.push({\\\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\\\n                    url:parseDom(list[j], 'a&&href') + lazy,\\\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2'\\\\n                });\\\\n            }\\\\n        } catch (e) {\\\\n            d.push({\\\\n                title: '没有选集哟，不信点图片去看看👀',\\\\n                col_type: 'text_center_1'\\\\n            });\\\\n        }\\\\n    } else {\\\\n        try {\\\\n            for (var j = 0; j < list.length; j++) {\\\\n                d.push({\\\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\\\n                    url:parseDom(list[j], 'a&&href') + lazy,\\\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2'\\\\n                });\\\\n            }\\\\n        } catch (e) {\\\\n            d.push({\\\\n                title: '没有选集哟，不信点图片去看看👀',\\\\n                col_type: 'text_center_1'\\\\n            });\\\\n        }\\\\n\\\\n    }\\\\n}\\\\n\\\\n//搜索，以下基本不需要修改。\\\\nvar title = parseDomForHtml(html, 'h1&&Text');\\\\nvar Color = \\\\\\\"#f13b66a\\\\\\\";\\\\nvar Color1 = \\\\\\\"#098AC1\\\\\\\";\\\\n\\\\nfunction getHead(title) {\\\\n    return '‘‘’’<strong><font color=\\\\\\\"' + Color + '\\\\\\\">' + title + '</front></strong>';\\\\n}\\\\nd.push({\\\\n    title: '老黑',\\\\n    url: 'hiker://search?s=' + title + '&rule=黑黑影视🌚',\\\\n    pic_url: \\\\\\\"https://android-artworks.25pp.com/fs08/2021/09/18/11/110_c6a1f70c163d781483c9b2651cf92db9_con_130x130.png\\\\\\\",\\\\n    col_type: 'icon_small_4'\\\\n})\\\\nd.push({\\\\n    title: 'APP',\\\\n    url: 'hiker://search?s=' + title + '&rule=app影视.dp',\\\\n    pic_url: \\\\\\\"https://android-artworks.25pp.com/fs08/2021/03/23/8/110_0b65fb0f0a90060a0996c4e7414937f2_con_130x130.png\\\\\\\",\\\\n    col_type: 'icon_small_4'\\\\n})\\\\nd.push({\\\\n    title: '搜索',\\\\n    url: 'hiker://search?s=' + title + '&group=①免嗅',\\\\n    pic_url: \\\\\\\"https://android-artworks.25pp.com/fs08/2021/09/23/6/110_c6bf3e6cd4fa4ee1cddec2b2ac2fed1c_con_130x130.png\\\\\\\",\\\\n    col_type: 'icon_small_4'\\\\n})\\\\nd.push({\\\\n    title: '豆瓣',\\\\n    url: 'hiker://search?s=' + title + '&rule=青豆',\\\\n    pic_url: \\\\\\\"https://gitee.com/Joker_tx/hiker/raw/master/img/青豆.png\\\\\\\",\\\\n    col_type: 'icon_small_4'\\\\n})\\\\n\\\\nsetTabs(tabs, MY_URL);\\\\nsetLists(lists, getVar(MY_URL, '0'));\\\\nd.push({\\\\n    title: '<br>',\\\\n    col_type: 'rich_text'\\\\n});\\\\nd.push({\\\\n    col_type: 'big_blank_block'\\\\n});\\\\nd.push({\\\\n    col_type: 'big_blank_block'\\\\n});\\\\nd.push({\\\\n    title: '““””<small><font color=#871f78>以上数据来源于网络，如您喜欢，请支持官方</font></small>',\\\\n    desc: '““””<small><font color=#f20c00>此规则仅限学习交流使用，请于导入后24小时内删除，任何组织或个人不得以任何方式方法传播此规则的整体或部分！</font></small>',\\\\n    url: MY_URL,\\\\n    col_type: 'text_center_1'\\\\n});\\\\nd.push({\\\\n    title: '<br>',\\\\n    col_type: 'rich_text'\\\\n});\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级页面信息module-tab-items-box&&span\\\",\\\"path\\\":\\\"xnxi\\\",\\\"rule\\\":\\\"//二级页面基本信息\\\\nvar arts = parseDomForArray(html, 'body&&.module-tab-items-box&&span');\\\\nvar tabs = [];\\\\nfor (var i in arts) {\\\\n    tabs.push(parseDomForHtml(arts[i], 'Text').replace(' ',''))\\\\n}\\\\nvar conts = parseDomForArray(html, 'body&&.module-play-list');\\\\nvar lists = [];\\\\nfor (var i in conts) {\\\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\\\n}\\\\nvar title = parseDomForHtml(html, 'h1&&Text');\\\\nvar 导演 = parseDomForHtml(html, '.module-info-item,1&&Text').replace(/\\\\\\\\//g,' ');\\\\nvar 主演 = parseDomForHtml(html, '.module-info-item,2&&Text').replace(/\\\\\\\\//g,' ');\\\\nvar 更新 = parseDomForHtml(html, '.module-info-item,4&&Text');\\\\nvar 状态 = parseDomForHtml(html, '.module-info-item,3&&Text');\\\\nvar 图片 = parseDom(html, '.lazyload&&data-original');\\\\nvar 简介 = parseDomForHtml(html, 'p&&Text').replace(/简介：/,'').replace('详情','').replace('展开全部','');\\\\nsetLastChapterRule('.module-play-list&&a,-1&&Text')\\\"}]\"}","picUrl":"http://inews.gtimg.com/newsapp_ls/0/13622479129/0","title":"地下交通站"}