typedef long long LL;
const int maxn = 100000 + 100;
int n;
LL ans;
vector<int> G[maxn];

class Solution {
public:
    int dfs(int pos, int fa, int depth, int seats) {
        int len = G[pos].size();
        LL sum = 0;
        for (int i = 0; i < len; ++i) {
            int p = G[pos][i];
            if (p == fa) {
                continue;
            }
            LL tmp = dfs(p, pos, depth + 1, seats);
            sum += tmp;
            ans += (tmp + seats - 1) / seats;
        }
        ++sum;
        return sum;
    }
    
    long long minimumFuelCost(vector<vector<int>>& roads, int seats) {
        n = roads.size() + 1;
        for (int i = 0; i < n; ++i) {
            G[i].clear();
        }
        for (int i = 0; i < n - 1; ++i) {
            G[roads[i][0]].push_back(roads[i][1]);
            G[roads[i][1]].push_back(roads[i][0]);
        }
        ans = 0;
        dfs(0, 0, 0, seats);
        return ans;
    }
};