#include <stdio.h>
#include <limits.h>
int r=0;
typedef struct zeton{
    char arrName;
    int pos;
    int value;
}ZETON;

ZETON minimax(int arrS[], int arrW[], int arrE[], int arrN[], int xN, int xS, int xW, int xE, char playerOnTurn, int iN, int iS, int iW, int iE) {
    ZETON zeton;
    ZETON eval;
    int maxEval, minEval;

    if (playerOnTurn == 'A') {

        /*int*/ maxEval = INT_MIN;
        if (xN > iN) {
            eval.value = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', iN+1, iS, iW, iE);
            if (maxEval < eval.value) {
                maxEval = arrN[iN+1];
                zeton.pos = iN;
                zeton.arrName = 'N';
                zeton.value = arrN[iN+1];
            }
            iN++;
        }
        if (xS > iS) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', iN, iS+1, iW, iE);
            if (maxEval < eval) {
                maxEval = arrS[iS+1];
                zeton.pos = iS;
                zeton.arrName = 'S';
                zeton.value = arrS[iS+1];
            }
            iS++;
        }
        if (xW > iW) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', iN, iS, iW+1, iE);
            if (maxEval < eval) {
                maxEval = arrW[iW+1];
                zeton.pos = iW;
                zeton.arrName = 'W';
                zeton.value = arrW[iW+1];
            }
            iW++;
        }
        if (xE > iE) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE , 'B', iN, iS, iW, iE+1);
            if (maxEval < eval) {
                maxEval = arrE[iE+1];
                zeton.pos = iE;
                zeton.arrName = 'E';
                zeton.value = arrE[iE+1];
            }
            ;
        }
        r++;
        if(maxEval!=INT_MIN)
        printf("maxEval A: %d %d\n", maxEval, r);
        if (xN == iN && xE == iE && xS == iS && xW == iW) {
            return INT_MAX;
        }
        return maxEval;
    } else {
        /*int*/ minEval = INT_MAX;
        if (xN > iN) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN+1, iS, iW, iE);
            if (minEval > eval) {
                minEval = arrN[iN+1];
                zeton.pos = iN;
                zeton.arrName = 'N';
                zeton.value = arrN[iN+1];
            }
            iN++;
        }
        if (xS > iS) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS+1, iW, iE);
            if (minEval > eval) {
                minEval = arrS[iS+1];
                zeton.pos = iS;
                zeton.arrName = 'S';
                zeton.value = arrS[iS+1];
            }
            iS++;
        }
        if (xW > iW) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS, iW+1, iE);
            if (minEval > eval) {
                minEval = arrW[iW+1];
                zeton.pos = iW;
                zeton.arrName = 'W';
                zeton.value = arrW[iW+1];
            }
            iW++;
        }
        if (xE > iE) {
            int eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS, iW, iE+1);
            if (minEval > eval) {
                minEval = arrE[iE+1];
                zeton.pos = iE;
                zeton.arrName = 'E';
                zeton.value = arrE[iE+1];
            }
            iE++;
        }
        r++;
        if(minEval!=INT_MAX)
        printf("minEval B: %d\n", minEval);
        if (iN == xN && iE == xE && iS == xS && iW == xW) {
            return INT_MIN;
        }
        return maxEval;
    }
    return ;
}

int main() {
    int xN=2, xW=1, xS=3, xE=2, zeton;
    int arrN[32]={1, 2};
    int arrS[32]={5};
    int arrW[32]={1,1,1};
    int arrE[32]={1,7};
    char smer, zatvorka1, zatvorka2;
    int iN=0, iS=0, iW=0, iE=0;

    int b = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS, iW, iE);
    printf("vysledok: %d\n", b);


    /*for (int i = 0; i < 4; ++i) {
        printf("new cycle\n");
        scanf("%c: %c", &smer, &zatvorka1);
        do {(scanf("%d %c",&zeton, &zatvorka2));
            switch (smer) {
            case 'N':

                if(zatvorka2==','){
                    if (xN>32){ printf("Nespravny vstup 1.\n");}
                    arrN[xN]=zeton;
                    xN++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr n:%d\n", arrN[xN]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 2.\n");}
                break;
            case 'S':

                if(zatvorka2==','){
                    if (xS>32){ printf("Nespravny vstup 3.\n");}
                    arrS[xS]=zeton;
                    xS++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr s:%d\n", arrS[xS]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 4.\n");}
                    break;
            case 'E':

                if(zatvorka2==','){
                    if (xE>32){ printf("Nespravny vstup 5.\n");}
                    arrE[xE]=zeton;
                    xE++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr e:%d\n", arrE[xE]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 6.\n");}
                break;
            case 'W':
                if(zatvorka2==','){
                    if (xW>32){ printf("Nespravny vstup 7.\n");}
                    arrW[xW]=zeton;
                    xW++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr w:%d\n", arrW[xW]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 8.\n");}
                    break;
            default:
                printf("Nespravny vstup 9.\n");return 0;
            }
        }
        while (zatvorka2!='}');}
    //if(flagS==0 || flagE==0 || flagN==0 || flagW==0){printf("Nespravny vstup.\n");return 0;}
    for (int i = 0; i < xS; ++i) {
        printf("array S:%d\n", arrS[i]);
    }
    for (int i = 0; i < xN; ++i) {
        printf("array N:%d\n", arrN[i]);
    }
    for (int i = 0; i < xW; ++i) {
        printf("array W:%d\n", arrW[i]);
    }
    for (int i = 0; i < xE; ++i) {
        printf("array E:%d\n", arrE[i]);
    }
*/
    return 0;
}
