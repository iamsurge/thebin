海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥聚直播 ⚙ 聚直播设置 ⚙@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"加载数据\",\"path\":\"config\",\"rule\":\"function getConfig() {\\n    try {\\n        let config = fetch(\\\"hiker://files/rules/live/config.json\\\");\\n        if (!config || config == \\\"\\\") {\\n            return {\\n                data: [],\\n                version: 0\\n            }\\n        } else {\\n            return JSON.parse(config)\\n        }\\n    } catch (e) {\\n        try {\\n            toast(\\\"配置文件格式有误\\\")\\n        } catch (e) {}\\n        return {\\n            data: [],\\n            version: 0\\n        }\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"批量导入\",\"path\":\"batchIm\",\"rule\":\"function batchImport(input, rule) {\\n    input = input.trim();\\n    if (input.length < 3 || input[0] != \\\"{\\\") {\\n        return \\\"toast://请输入正确的格式\\\"\\n    }\\n    let im = JSON.parse(input);\\n    if (im.data == null || im.data.length < 1) {\\n        return \\\"toast://请输入正确的格式\\\"\\n    }\\n    eval(JSON.parse(request(\\\"hiker://page/config?rule=\\\" + rule)).rule);\\n    let config = getConfig();\\n    let count = 0;\\n    let all = config.data.map(it => it.url + \\\"&&&\\\").join();\\n    for (let i of im.data) {\\n        if (all.indexOf(i.url + \\\"&&&\\\") >= 0) {\\n            //重复的不要\\n            continue;\\n        }\\n        count++;\\n        config.data.push(i)\\n    }\\n    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n    refreshPage();\\n    return \\\"toast://已导入\\\" + count + \\\"条订阅源\\\";\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"直播数据\",\"path\":\"renderData\",\"rule\":\"function renderLiveData(url) {\\n    let m3u = \\\"\\\";\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\n        m3u = fetch(url);\\n    } else {\\n        let interval = Number(getItem('interval', '24')),\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\n            remoteData = '';\\n        try {\\n            remoteData = fetchCache(url, interval, {\\n                timeout: 50000\\n            });\\n        } catch (e) {}\\n        if (!remoteData.includes('http') || remoteData.includes('<body>')) { \\n            log('更新失败');\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData);\\n            m3u = oldData;\\n        } else {\\n            m3u = remoteData;\\n        }\\n    }\\n\\n    let mode =  m3u.indexOf('#EXTM3U') == 0 , re;\\n    if(mode){\\n        re = /(.*),(.*)\\\\s*?((?:http|rtmp)[^#\\\\s]*)/g;\\n    }else{\\n        re = /()(?:\\\\B\\\\$c_start|\\\\B#{1,2})?(.*?),?(##|头#|\\\\$c_end|,?#genre#|(?:http|rtmp)[^\\\\s]*)/g;\\n    }\\n        \\n    let items = {},\\n        group = '未分组';\\n    for (let i = re.exec(m3u); i != null; i = re.exec(m3u)) {\\n        if (mode) {\\n            group = (i[1].match(/group-title=\\\"(.*?)\\\"/) || [null, group])[1];\\n        } else if (['#genre#','##','头#','$c_end'].includes(i[3])) {\\n            group = i[2];\\n            continue;\\n        }\\n        let title = i[2],\\n            url = i[3].includes('#') ? i[3].split('#') : [i[3]],\\n            headers = [];\\n        if(!url[url.length-1]) url.pop();\\n        url.forEach((v,index,array)=>{\\n            if(/;\\\\{(.*)\\\\}/.test(v)){\\n                let obj = {},\\n                     con = v.match(/;\\\\{(.*)\\\\}/)[1],\\n                     arr = con.split('&&');\\n                arr.forEach((i)=>{\\n                    let [key,value] = i.split('@');\\n                    obj[key] = value.replace(/;/g,'；；');\\n                })\\n                array[index] = v.match(/^([^;]*);\\\\{/)[1]\\n                headers.push(obj);\\n            }else{\\n                headers.push({'User-Agent' : MOBILE_UA.replace(/;/g,'；；')});\\n            }\\n            array[index] = array[index].replace(/;/g,'；；')+'#isVideo=true#';\\n        });\\n        if (items[group]) {\\n            if (items[group][title]) {\\n                items[group][title].url = items[group][title].url.concat(url);\\n                items[group][title].headers = items[group][title].headers.concat(headers);\\n            } else {\\n                items[group][title] = {url:url,headers:headers};\\n            }\\n        } else {\\n            items[group] = {};\\n            items[group][title] = {url:url,headers:headers};\\n        };\\n    }\\n    return items;\\n}\\n\\n$.exports = {\\n    renderLiveData: renderLiveData\\n}\\n\"},{\"col_type\":\"movie_3\",\"name\":\"设置页\",\"path\":\"renderSetting\",\"rule\":\"function renderSetting() {\\n    function getColoredText(text) {\\n        return '““””<span style=\\\"color: #19B89D\\\">' + text + '</span>';\\n    }\\n    const d = [];\\n    let interval = getItem('interval', '24');\\n    d.push({\\n        title: interval == -1 ? '已禁止自动更新'.fontcolor(\\\"#19B89D\\\").bold() : ('更新间隔:' + interval + '小时').fontcolor(\\\"#19B89D\\\").bold(),\\n        url: $(interval, '输入n为正整数时，每隔n小时自动更新\\\\n为0时，每次打开都会更新\\\\n为-1时，禁止自动更新').input(() => {\\n            if (parseInt(input) >= -1) {\\n                setItem('interval', input);\\n            }\\n            refreshPage();\\n            return 'hiker://empty'\\n        }),\\n        pic_url: 'https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fis4.mzstatic.com%2Fimage%2Fthumb%2FPurple3%2Fv4%2Fdf%2Ff6%2Fda%2Fdff6da83-47d7-9cb6-2398-1919c13837b4%2Fmzl.kgmnwodo.png%2F0x0ss-85.jpg&refer=http%3A%2F%2Fis4.mzstatic.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638629349&t=2f6d967185fe2b9c54e8b230eb83e66c',\\n        col_type: \\\"avatar\\\"\\n    });\\n\\n    d.push({\\n        col_type: \\\"big_blank_block\\\"\\n    });\\n\\n    d.push({\\n        title: getColoredText(\\\"新建订阅\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        desc: \\\"请输入直播源订阅地址\\\",\\n        url: $('', '请输入订阅地址').input((rule) => {\\n            if (input == \\\"\\\") {\\n                return \\\"toast://不能为空\\\"\\n            } else if (input.indexOf(\\\"http\\\") != 0 && input.indexOf(\\\"file\\\") != 0 && input.indexOf(\\\"hiker\\\") != 0) {\\n                return \\\"toast://链接格式有误\\\"\\n            } else {\\n                return $('',\\\"请输入订阅标题\\\").input((url, rule) => {\\n                    eval(JSON.parse(request(\\\"hiker://page/config?rule=\\\" + rule)).rule);\\n                    let config = getConfig();\\n                    config.data.push({\\n                        name: input,\\n                        url: url\\n                    });\\n                    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                    refreshPage();\\n                    return \\\"toast://已保存\\\";\\n                }, input, rule)\\n            }\\n        }, getMyVar('title'))\\n    });\\n\\n    d.push({\\n        title: getColoredText(\\\"导入订阅\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        url: $('','支持原始数据和云剪贴板分享链接').input((rule) => {\\n            eval(JSON.parse(request(\\\"hiker://page/batchIm?rule=\\\" + rule)).rule);\\n            if (input.startsWith('聚直播分享##')) {\\n                input = parsePaste(input.split('##\\\\n')[1]);\\n            }\\n            return batchImport(input, rule);\\n        }, getMyVar('title'))\\n    });\\n    d.push({\\n        title: getColoredText(\\\"分享订阅\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        url: $([\\\"原始数据\\\", \\\"云剪贴板\\\",\\\"云口令\\\"], 3).select(() => {\\n            return $('确定导出？\\\\n(禁用订阅不会导出)').confirm((type) => {\\n                eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                config = getConfig();\\n                config.data = config.data.filter(v => !v.inVisible);\\n                if (type == \\\"云剪贴板\\\") {\\n                    var data = '聚直播分享##\\\\n' + sharePaste(JSON.stringify(config));\\n                }else if(type == \\\"云口令\\\"){\\n                    var data = '聚直播分享,复制后打开软件即可导入\\\\n' + sharePaste(JSON.stringify(config)) + '@import=js:eval(JSON.parse(fetch(\\\"hiker://page/cloud?rule=聚直播\\\")).rule)';\\n                } else {\\n                    var data = JSON.stringify(config);\\n                }\\n                return \\\"copy://\\\" + data;\\n            }, input)\\n        })\\n    });\\n    d.push({\\n        title: getColoredText(\\\"编辑全部\\\"),\\n        col_type: \\\"scroll_button\\\",\\n        url: \\\"editFile://hiker://files/rules/live/config.json\\\"\\n    });\\n\\n    d.push({\\n        col_type: \\\"blank_block\\\"\\n    });\\n\\n    eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n    config = getConfig();\\n    let editMode = getMyVar('editMode', '启用禁用');\\n    ['启用禁用', '删除订阅', '重新排序', '编辑订阅','清除缓存'].forEach((v) => {\\n        d.push({\\n            title: v == editMode ? '““””' + v.bold().fontcolor('#19B89D') : v,\\n            url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\n                putMyVar('editMode', v)\\n                refreshPage(false)\\n                return 'hiker://empty'\\n            }, v),\\n            col_type: 'scroll_button'\\n        })\\n    });\\n    config.data.forEach((v, i) => {\\n        let el = {\\n            title: v.name,\\n            col_type: \\\"text_3\\\"\\n        }\\n        switch (editMode) {\\n            case '启用禁用':\\n                el.title = (v.inVisible ? '🔴 ' : '🟢 ') + el.title\\n                el.url = $('#noLoading#').lazyRule((i) => {\\n                    eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                    config = getConfig();\\n                    config.data[i].inVisible = !config.data[i].inVisible;\\n                    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                    refreshPage(false);\\n                    return 'hiker://empty'\\n                }, i)\\n                break\\n            case '删除订阅':\\n                el.url = \\\"confirm://确认删除“\\\" + v.name + \\\"”订阅？.js:\\\" + $.toString((i) => {\\n                    eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                    config = getConfig();\\n                    config.data.splice(i,1);\\n                    writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                    refreshPage(false);\\n                    return \\\"toast://已删除\\\";\\n                }, i)\\n                break\\n            case '重新排序':\\n                let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\n                el.title = (sortFlag == i ? '🔃  ' : '') + el.title\\n                if (sortFlag == -1)\\n                    el.url = $('#noLoading#').lazyRule((i) => {\\n                        putMyVar('sortFlag', i.toString())\\n                        refreshPage(false)\\n                        return 'toast://选择要移动到的位置'\\n                    }, i)\\n                else\\n                    el.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\n                        eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                        config = getConfig();\\n                        config.data.splice(newIndex, 0, config.data.splice(oldIndex, 1)[0])\\n                        writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                        putMyVar('sortFlag', '-1')\\n                        refreshPage(false)\\n                        return 'hiker://empty'\\n                    }, sortFlag, i)\\n                break\\n            case '编辑订阅':\\n                let arr = ['编辑名称', '编辑地址', '编辑内容'];\\n                el.url = $(arr, 3).select((v, i) => {\\n                    if (input == '编辑名称') {\\n                        return $(v.name, '输入新名称').input((i) => {\\n                            eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                            config = getConfig();\\n                            if (input) {\\n                                config.data[i].name = input\\n                                writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                                refreshPage(false)\\n                                return 'toast://修改成功'\\n                            } else {\\n                                return 'toast://不能为空'\\n                            }\\n                        }, i);\\n                    } else if (input == '编辑地址') {\\n                        return $(v.url, '输入新地址').input((i) => {\\n                            eval(JSON.parse(request(\\\"hiker://page/config\\\")).rule);\\n                            config = getConfig();\\n                            if (input == \\\"\\\") {\\n                                return \\\"toast://不能为空\\\"\\n                            } else if (input.indexOf(\\\"http\\\") != 0 && input.indexOf(\\\"file\\\") != 0 && input.indexOf(\\\"hiker\\\") != 0) {\\n                                return \\\"toast://链接格式有误\\\"\\n                            } else {\\n                                config.data[i].url = input\\n                                writeFile(\\\"hiker://files/rules/live/config.json\\\", JSON.stringify(config));\\n                                refreshPage(false)\\n                                return 'toast://修改成功'\\n                            }\\n                        }, i);\\n                    } else if (input == '编辑内容') {\\n                        if (v.url.startsWith('file://') || v.url.startsWith('hiker://files')) {\\n                            return 'editFile://' + v.url;\\n                        }\\n                        return 'editFile://hiker://files/libs/' + md5(v.url) + '.js'\\n                    }\\n                }, v, i);\\n                break;\\n            case '清除缓存':\\n                el.url = $('确定清除“' + v.name + '”订阅缓存？\\\\n(可立即更新)').confirm((url)=>{\\n                    deleteCache(url);\\n                    return 'toast://清除成功'\\n                },v.url)\\n                break;\\n        }\\n        d.push(el)\\n    });\\n    return d;\\n}\\n\\n$.exports = {\\n    renderSetting: renderSetting\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"云口令\",\"path\":\"cloud\",\"rule\":\"eval(JSON.parse(request(\\\"hiker://page/batchIm?rule=聚直播\\\")).rule);\\nlet content = parsePaste(input);\\nbatchImport(content, \\\"聚直播\\\");\"}],\"saved\":false,\"title\":\"聚直播\",\"version\":0,\"url\":\"hiker://empty#noLoading#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"icon_2_round\",\"find_rule\":\"js:(\\n() => {\\n    addListener(\\\"onClose\\\", \\\"refreshPage()\\\");\\n    setResult($.require(\\\"hiker://page/renderSetting\\\").renderSetting());\\n}\\n)()\",\"group\":\"⑥直播\",\"ua\":\"mobile\",\"preRule\":\"putMyVar('title',MY_RULE.title);\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"加载数据\\\",\\\"path\\\":\\\"config\\\",\\\"rule\\\":\\\"function getConfig() {\\\\n    try {\\\\n        let config = fetch(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\");\\\\n        if (!config || config == \\\\\\\"\\\\\\\") {\\\\n            return {\\\\n                data: [],\\\\n                version: 0\\\\n            }\\\\n        } else {\\\\n            return JSON.parse(config)\\\\n        }\\\\n    } catch (e) {\\\\n        try {\\\\n            toast(\\\\\\\"配置文件格式有误\\\\\\\")\\\\n        } catch (e) {}\\\\n        return {\\\\n            data: [],\\\\n            version: 0\\\\n        }\\\\n    }\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"批量导入\\\",\\\"path\\\":\\\"batchIm\\\",\\\"rule\\\":\\\"function batchImport(input, rule) {\\\\n    input = input.trim();\\\\n    if (input.length < 3 || input[0] != \\\\\\\"{\\\\\\\") {\\\\n        return \\\\\\\"toast://请输入正确的格式\\\\\\\"\\\\n    }\\\\n    let im = JSON.parse(input);\\\\n    if (im.data == null || im.data.length < 1) {\\\\n        return \\\\\\\"toast://请输入正确的格式\\\\\\\"\\\\n    }\\\\n    eval(JSON.parse(request(\\\\\\\"hiker://page/config?rule=\\\\\\\" + rule)).rule);\\\\n    let config = getConfig();\\\\n    let count = 0;\\\\n    let all = config.data.map(it => it.url + \\\\\\\"&&&\\\\\\\").join();\\\\n    for (let i of im.data) {\\\\n        if (all.indexOf(i.url + \\\\\\\"&&&\\\\\\\") >= 0) {\\\\n            //重复的不要\\\\n            continue;\\\\n        }\\\\n        count++;\\\\n        config.data.push(i)\\\\n    }\\\\n    writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n    refreshPage();\\\\n    return \\\\\\\"toast://已导入\\\\\\\" + count + \\\\\\\"条订阅源\\\\\\\";\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"直播数据\\\",\\\"path\\\":\\\"renderData\\\",\\\"rule\\\":\\\"function renderLiveData(url) {\\\\n    let m3u = \\\\\\\"\\\\\\\";\\\\n    if (url.startsWith('hiker://') || url.startsWith('file://')) {\\\\n        m3u = fetch(url);\\\\n    } else {\\\\n        let interval = Number(getItem('interval', '24')),\\\\n            oldData = fetch('hiker://files/libs/' + md5(url) + '.js'),\\\\n            remoteData = '';\\\\n        try {\\\\n            remoteData = fetchCache(url, interval, {\\\\n                timeout: 50000\\\\n            });\\\\n        } catch (e) {}\\\\n        if (!remoteData.includes('http') || remoteData.includes('<body>')) { \\\\n            log('更新失败');\\\\n            if (oldData) writeFile('hiker://files/libs/' + md5(url) + '.js', oldData);\\\\n            m3u = oldData;\\\\n        } else {\\\\n            m3u = remoteData;\\\\n        }\\\\n    }\\\\n\\\\n    let mode =  m3u.indexOf('#EXTM3U') == 0 , re;\\\\n    if(mode){\\\\n        re = /(.*),(.*)\\\\\\\\s*?((?:http|rtmp)[^#\\\\\\\\s]*)/g;\\\\n    }else{\\\\n        re = /()(?:\\\\\\\\B\\\\\\\\$c_start|\\\\\\\\B#{1,2})?(.*?),?(##|头#|\\\\\\\\$c_end|,?#genre#|(?:http|rtmp)[^\\\\\\\\s]*)/g;\\\\n    }\\\\n        \\\\n    let items = {},\\\\n        group = '未分组';\\\\n    for (let i = re.exec(m3u); i != null; i = re.exec(m3u)) {\\\\n        if (mode) {\\\\n            group = (i[1].match(/group-title=\\\\\\\"(.*?)\\\\\\\"/) || [null, group])[1];\\\\n        } else if (['#genre#','##','头#','$c_end'].includes(i[3])) {\\\\n            group = i[2];\\\\n            continue;\\\\n        }\\\\n        let title = i[2],\\\\n            url = i[3].includes('#') ? i[3].split('#') : [i[3]],\\\\n            headers = [];\\\\n        if(!url[url.length-1]) url.pop();\\\\n        url.forEach((v,index,array)=>{\\\\n            if(/;\\\\\\\\{(.*)\\\\\\\\}/.test(v)){\\\\n                let obj = {},\\\\n                     con = v.match(/;\\\\\\\\{(.*)\\\\\\\\}/)[1],\\\\n                     arr = con.split('&&');\\\\n                arr.forEach((i)=>{\\\\n                    let [key,value] = i.split('@');\\\\n                    obj[key] = value.replace(/;/g,'；；');\\\\n                })\\\\n                array[index] = v.match(/^([^;]*);\\\\\\\\{/)[1]\\\\n                headers.push(obj);\\\\n            }else{\\\\n                headers.push({'User-Agent' : MOBILE_UA.replace(/;/g,'；；')});\\\\n            }\\\\n            array[index] = array[index].replace(/;/g,'；；')+'#isVideo=true#';\\\\n        });\\\\n        if (items[group]) {\\\\n            if (items[group][title]) {\\\\n                items[group][title].url = items[group][title].url.concat(url);\\\\n                items[group][title].headers = items[group][title].headers.concat(headers);\\\\n            } else {\\\\n                items[group][title] = {url:url,headers:headers};\\\\n            }\\\\n        } else {\\\\n            items[group] = {};\\\\n            items[group][title] = {url:url,headers:headers};\\\\n        };\\\\n    }\\\\n    return items;\\\\n}\\\\n\\\\n$.exports = {\\\\n    renderLiveData: renderLiveData\\\\n}\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"设置页\\\",\\\"path\\\":\\\"renderSetting\\\",\\\"rule\\\":\\\"function renderSetting() {\\\\n    function getColoredText(text) {\\\\n        return '““””<span style=\\\\\\\"color: #19B89D\\\\\\\">' + text + '</span>';\\\\n    }\\\\n    const d = [];\\\\n    let interval = getItem('interval', '24');\\\\n    d.push({\\\\n        title: interval == -1 ? '已禁止自动更新'.fontcolor(\\\\\\\"#19B89D\\\\\\\").bold() : ('更新间隔:' + interval + '小时').fontcolor(\\\\\\\"#19B89D\\\\\\\").bold(),\\\\n        url: $(interval, '输入n为正整数时，每隔n小时自动更新\\\\\\\\n为0时，每次打开都会更新\\\\\\\\n为-1时，禁止自动更新').input(() => {\\\\n            if (parseInt(input) >= -1) {\\\\n                setItem('interval', input);\\\\n            }\\\\n            refreshPage();\\\\n            return 'hiker://empty'\\\\n        }),\\\\n        pic_url: 'https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fis4.mzstatic.com%2Fimage%2Fthumb%2FPurple3%2Fv4%2Fdf%2Ff6%2Fda%2Fdff6da83-47d7-9cb6-2398-1919c13837b4%2Fmzl.kgmnwodo.png%2F0x0ss-85.jpg&refer=http%3A%2F%2Fis4.mzstatic.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638629349&t=2f6d967185fe2b9c54e8b230eb83e66c',\\\\n        col_type: \\\\\\\"avatar\\\\\\\"\\\\n    });\\\\n\\\\n    d.push({\\\\n        col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n    });\\\\n\\\\n    d.push({\\\\n        title: getColoredText(\\\\\\\"新建订阅\\\\\\\"),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n        desc: \\\\\\\"请输入直播源订阅地址\\\\\\\",\\\\n        url: $('', '请输入订阅地址').input((rule) => {\\\\n            if (input == \\\\\\\"\\\\\\\") {\\\\n                return \\\\\\\"toast://不能为空\\\\\\\"\\\\n            } else if (input.indexOf(\\\\\\\"http\\\\\\\") != 0 && input.indexOf(\\\\\\\"file\\\\\\\") != 0 && input.indexOf(\\\\\\\"hiker\\\\\\\") != 0) {\\\\n                return \\\\\\\"toast://链接格式有误\\\\\\\"\\\\n            } else {\\\\n                return $('',\\\\\\\"请输入订阅标题\\\\\\\").input((url, rule) => {\\\\n                    eval(JSON.parse(request(\\\\\\\"hiker://page/config?rule=\\\\\\\" + rule)).rule);\\\\n                    let config = getConfig();\\\\n                    config.data.push({\\\\n                        name: input,\\\\n                        url: url\\\\n                    });\\\\n                    writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n                    refreshPage();\\\\n                    return \\\\\\\"toast://已保存\\\\\\\";\\\\n                }, input, rule)\\\\n            }\\\\n        }, getMyVar('title'))\\\\n    });\\\\n\\\\n    d.push({\\\\n        title: getColoredText(\\\\\\\"导入订阅\\\\\\\"),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n        url: $('','支持原始数据和云剪贴板分享链接').input((rule) => {\\\\n            eval(JSON.parse(request(\\\\\\\"hiker://page/batchIm?rule=\\\\\\\" + rule)).rule);\\\\n            if (input.startsWith('聚直播分享##')) {\\\\n                input = parsePaste(input.split('##\\\\\\\\n')[1]);\\\\n            }\\\\n            return batchImport(input, rule);\\\\n        }, getMyVar('title'))\\\\n    });\\\\n    d.push({\\\\n        title: getColoredText(\\\\\\\"分享订阅\\\\\\\"),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n        url: $([\\\\\\\"原始数据\\\\\\\", \\\\\\\"云剪贴板\\\\\\\",\\\\\\\"云口令\\\\\\\"], 3).select(() => {\\\\n            return $('确定导出？\\\\\\\\n(禁用订阅不会导出)').confirm((type) => {\\\\n                eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n                config = getConfig();\\\\n                config.data = config.data.filter(v => !v.inVisible);\\\\n                if (type == \\\\\\\"云剪贴板\\\\\\\") {\\\\n                    var data = '聚直播分享##\\\\\\\\n' + sharePaste(JSON.stringify(config));\\\\n                }else if(type == \\\\\\\"云口令\\\\\\\"){\\\\n                    var data = '聚直播分享,复制后打开软件即可导入\\\\\\\\n' + sharePaste(JSON.stringify(config)) + '@import=js:eval(JSON.parse(fetch(\\\\\\\"hiker://page/cloud?rule=聚直播\\\\\\\")).rule)';\\\\n                } else {\\\\n                    var data = JSON.stringify(config);\\\\n                }\\\\n                return \\\\\\\"copy://\\\\\\\" + data;\\\\n            }, input)\\\\n        })\\\\n    });\\\\n    d.push({\\\\n        title: getColoredText(\\\\\\\"编辑全部\\\\\\\"),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n        url: \\\\\\\"editFile://hiker://files/rules/live/config.json\\\\\\\"\\\\n    });\\\\n\\\\n    d.push({\\\\n        col_type: \\\\\\\"blank_block\\\\\\\"\\\\n    });\\\\n\\\\n    eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n    config = getConfig();\\\\n    let editMode = getMyVar('editMode', '启用禁用');\\\\n    ['启用禁用', '删除订阅', '重新排序', '编辑订阅','清除缓存'].forEach((v) => {\\\\n        d.push({\\\\n            title: v == editMode ? '““””' + v.bold().fontcolor('#19B89D') : v,\\\\n            url: v == editMode ? 'hiker://empty' : $('#noLoading#').lazyRule((v) => {\\\\n                putMyVar('editMode', v)\\\\n                refreshPage(false)\\\\n                return 'hiker://empty'\\\\n            }, v),\\\\n            col_type: 'scroll_button'\\\\n        })\\\\n    });\\\\n    config.data.forEach((v, i) => {\\\\n        let el = {\\\\n            title: v.name,\\\\n            col_type: \\\\\\\"text_3\\\\\\\"\\\\n        }\\\\n        switch (editMode) {\\\\n            case '启用禁用':\\\\n                el.title = (v.inVisible ? '🔴 ' : '🟢 ') + el.title\\\\n                el.url = $('#noLoading#').lazyRule((i) => {\\\\n                    eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n                    config = getConfig();\\\\n                    config.data[i].inVisible = !config.data[i].inVisible;\\\\n                    writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n                    refreshPage(false);\\\\n                    return 'hiker://empty'\\\\n                }, i)\\\\n                break\\\\n            case '删除订阅':\\\\n                el.url = \\\\\\\"confirm://确认删除“\\\\\\\" + v.name + \\\\\\\"”订阅？.js:\\\\\\\" + $.toString((i) => {\\\\n                    eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n                    config = getConfig();\\\\n                    config.data.splice(i,1);\\\\n                    writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n                    refreshPage(false);\\\\n                    return \\\\\\\"toast://已删除\\\\\\\";\\\\n                }, i)\\\\n                break\\\\n            case '重新排序':\\\\n                let sortFlag = parseInt(getMyVar('sortFlag', '-1'))\\\\n                el.title = (sortFlag == i ? '🔃  ' : '') + el.title\\\\n                if (sortFlag == -1)\\\\n                    el.url = $('#noLoading#').lazyRule((i) => {\\\\n                        putMyVar('sortFlag', i.toString())\\\\n                        refreshPage(false)\\\\n                        return 'toast://选择要移动到的位置'\\\\n                    }, i)\\\\n                else\\\\n                    el.url = $('#noLoading#').lazyRule((oldIndex, newIndex) => {\\\\n                        eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n                        config = getConfig();\\\\n                        config.data.splice(newIndex, 0, config.data.splice(oldIndex, 1)[0])\\\\n                        writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n                        putMyVar('sortFlag', '-1')\\\\n                        refreshPage(false)\\\\n                        return 'hiker://empty'\\\\n                    }, sortFlag, i)\\\\n                break\\\\n            case '编辑订阅':\\\\n                let arr = ['编辑名称', '编辑地址', '编辑内容'];\\\\n                el.url = $(arr, 3).select((v, i) => {\\\\n                    if (input == '编辑名称') {\\\\n                        return $(v.name, '输入新名称').input((i) => {\\\\n                            eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n                            config = getConfig();\\\\n                            if (input) {\\\\n                                config.data[i].name = input\\\\n                                writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n                                refreshPage(false)\\\\n                                return 'toast://修改成功'\\\\n                            } else {\\\\n                                return 'toast://不能为空'\\\\n                            }\\\\n                        }, i);\\\\n                    } else if (input == '编辑地址') {\\\\n                        return $(v.url, '输入新地址').input((i) => {\\\\n                            eval(JSON.parse(request(\\\\\\\"hiker://page/config\\\\\\\")).rule);\\\\n                            config = getConfig();\\\\n                            if (input == \\\\\\\"\\\\\\\") {\\\\n                                return \\\\\\\"toast://不能为空\\\\\\\"\\\\n                            } else if (input.indexOf(\\\\\\\"http\\\\\\\") != 0 && input.indexOf(\\\\\\\"file\\\\\\\") != 0 && input.indexOf(\\\\\\\"hiker\\\\\\\") != 0) {\\\\n                                return \\\\\\\"toast://链接格式有误\\\\\\\"\\\\n                            } else {\\\\n                                config.data[i].url = input\\\\n                                writeFile(\\\\\\\"hiker://files/rules/live/config.json\\\\\\\", JSON.stringify(config));\\\\n                                refreshPage(false)\\\\n                                return 'toast://修改成功'\\\\n                            }\\\\n                        }, i);\\\\n                    } else if (input == '编辑内容') {\\\\n                        if (v.url.startsWith('file://') || v.url.startsWith('hiker://files')) {\\\\n                            return 'editFile://' + v.url;\\\\n                        }\\\\n                        return 'editFile://hiker://files/libs/' + md5(v.url) + '.js'\\\\n                    }\\\\n                }, v, i);\\\\n                break;\\\\n            case '清除缓存':\\\\n                el.url = $('确定清除“' + v.name + '”订阅缓存？\\\\\\\\n(可立即更新)').confirm((url)=>{\\\\n                    deleteCache(url);\\\\n                    return 'toast://清除成功'\\\\n                },v.url)\\\\n                break;\\\\n        }\\\\n        d.push(el)\\\\n    });\\\\n    return d;\\\\n}\\\\n\\\\n$.exports = {\\\\n    renderSetting: renderSetting\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"云口令\\\",\\\"path\\\":\\\"cloud\\\",\\\"rule\\\":\\\"eval(JSON.parse(request(\\\\\\\"hiker://page/batchIm?rule=聚直播\\\\\\\")).rule);\\\\nlet content = parsePaste(input);\\\\nbatchImport(content, \\\\\\\"聚直播\\\\\\\");\\\"}]\"}","picUrl":"https://gimg2.baidu.com/image_search/src=http%3A%2F%2Fis4.mzstatic.com%2Fimage%2Fthumb%2FPurple3%2Fv4%2Fdf%2Ff6%2Fda%2Fdff6da83-47d7-9cb6-2398-1919c13837b4%2Fmzl.kgmnwodo.png%2F0x0ss-85.jpg&refer=http%3A%2F%2Fis4.mzstatic.com&app=2002&size=f9999,10000&q=a80&n=0&g=0n&fmt=jpeg?sec=1638629349&t=2f6d967185fe2b9c54e8b230eb83e66c","title":"聚直播 ⚙ 聚直播设置 ⚙"}