pub fn maximum_count_threaded_3 (nums: &[i32], thread_count: usize) -> i32 {
    let len = nums.len();
    let thread_work_amount = (len + (thread_count - (len - 1) % thread_count + 1)) / thread_count; // trust me this works
    let results = worker_function(0, 1, (nums, thread_count, thread_work_amount));
    max(results.0, results.1)
}



fn worker_function (id: usize, current_thread_count: usize, data: (&[i32], usize, usize)) -> (i32, i32) {
    let (nums, target_thread_count, thread_work_amount) = data;
    if current_thread_count < target_thread_count && id == current_thread_count - 1 {
        let (counts_1, counts_2) = rayon::join(
            || worker_function(id, current_thread_count + 1, data),
            || worker_function(id + 1, current_thread_count + 1, data)
        );
        return (counts_1.0 + counts_2.0, counts_1.1 + counts_2.1);
    }
    let lower_bound = id * thread_work_amount;
    let upper_bound = lower_bound + thread_work_amount;
    let mut positive_count = 0;
    let mut negative_count = 0;
    for &v in nums.iter().take(upper_bound).skip(lower_bound) {
        if v > 0 {
            positive_count += 1;
        } else if v < 0 {
            negative_count += 1;
        }
    }
    (positive_count, negative_count)
}