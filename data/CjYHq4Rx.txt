class Hasher:
    def __init__(self,normalized_text_string,k_gram = 5):
        self.normalized_text_string = normalized_text_string
        self.hash = 0
        self.base = 26
        self.window_start = 0
        self.window_end = 0
        self.mod = 5807
        self.k_gram = k_gram
        
    def compute_hash_whole_text(self): # k_gram should be a prime number (prime number works well for this type of hash functions)
        hash_value = 0
        for i in range(0, self.k_gram):
            hash_value = (hash_value + (ord(self.normalized_text_string[i]) - 96)*(self.base**(self.k_gram - i - 1))) % self.mod

        self.window_start = 0
        self.window_end = self.k_gram

        return hash_value

    def compute_rehash(self):
        if self.window_end <= len(self.normalized_text_string) - 1:
            self.hash -= (ord(self.normalized_text_string[self.window_start]) - 96)*self.base**(self.k_gram - 1)

            self.hash *= self.base
            self.hash += ord(self.text[self.window_end]) - 96
            self.hash %= self.mod
            self.window_start += 1
            self.window_end += 1
            
            return True
        return False
