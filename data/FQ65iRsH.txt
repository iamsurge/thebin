class Lista {
private:
    Node* head;
    Node* tail;
public:
    Lista() {
        head = new Node();
        tail = head;
    }

    virtual ~Lista() {
        Node *tmp;
        tmp = head->next;
        while (tmp) {
            head->next = tmp->next;
            delete tmp;
            tmp = head->next;
        }
        delete head;
    }

    void adaugaStudent(std::string nume, double medie) {
        Node *newNode = new Node(nume, medie);
        newNode->next = NULL;
        tail->next = newNode;
        tail = newNode;
        newNode->index = tail->index + 1; //update index
    }

    struct Node* partition(struct Node* first, struct Node* last) {
        struct Node* pivot = first;
        struct Node* front = first;
        int tempIndex = 0;
        double tempAverage = 0;
        string tempName;
        while (front != NULL && front != last) {
            if (front->average < last->average) {
                pivot = first;

                tempName = first->Name;
                first->Name = front->Name;
                front->Name = tempName;
                tempAverage = first->average;
                first->average = front->average;
                front->average = tempAverage;
                tempIndex = first->index;
                first->index = front->index;
                front->index = tempIndex;

                first = first->next;
            }else if (front->average == last->average && front->Name > last->Name) {
                tempName = first->Name;
                first->Name = front->Name;
                front->Name = tempName;
                tempIndex = first->index;
                first->index = front->index;
                front->index = tempIndex;
            }

            front = front->next;
        }

        tempName = first->Name;
        first->Name = last->Name;
        last->Name = tempName;
        tempAverage = first->average;
        first->average = last->average;
        last->average = tempAverage;
        tempIndex = first->index;
        first->index = last->index;
        last->index = tempIndex;
        return pivot;
    }

    void quick_sort(struct Node* first, struct Node* last)
    {
        // base case
        if (first == last) {
            return;
        }
        struct Node* pivot = partition(first, last);

        if (pivot != NULL && pivot->next != NULL) {
            quick_sort(first, pivot);
            quick_sort(pivot->next, last);
        }
    }
};
