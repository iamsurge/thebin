const int maxn = 1000 + 100;
long long dp[maxn][maxn];

class Solution {
public:
    bool flag;
    string s, t;
    
    long long dfs(int i, int j) {
        if (j == 0) {
            return 1;
        }
        if (i == 0) {
            return 0;
        }
        if (dp[i][j] != -1) {
            return dp[i][j];
        }
        
        dp[i][j] = dfs(i - 1, j);
        if (s[i - 1] == t[j - 1]) {
            dp[i][j] += dfs(i - 1, j - 1);
        }
        if (dp[i][j] >= INT_MAX) {
            flag = true;
            dp[i][j] = INT_MAX;
        }
        return dp[i][j];
    }
    
    long long numDistinct(string s, string t) {
        flag = false;
        this->s = s;
        this->t = t;
        int len1 = s.length();
        int len2 = t.length();
        for (int i = 0; i <= len1; ++i) {
            for(int j = 0; j <= len2; ++j) {
                dp[i][j] = -1;
            }
        }
        
        dfs(len1, len2);
        if (flag) {
            return -1;
        }
        return dp[len1][len2];
    }
};