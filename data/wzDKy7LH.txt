package com.company;

import java.util.*;

public class Automation {
    public String currentState;
    public List<String> endStatesList;

    public String startState;
    public String[] states;
    public Character[] alphabet;
    public String[] endStates;
    public Map<StateSymbol, String> map;

    public Automation(String[] states, Character[] alphabet, Map<StateSymbol, String> map, String startState, String[] endStates) {
        this.currentState = startState;

        this.startState = startState;
        this.states = states;
        this.alphabet = alphabet;
        this.endStates = endStates;
        this.map = new HashMap<>(map);

        this.endStatesList = List.of(endStates);
    }

    public void printTableAutomation() {
        int sizeAlphabet = alphabet.length;
        int sizeStates = states.length;

        int row = sizeStates + 1;
        int column = sizeAlphabet + 1;

        printHorizontalSeparateLine(column);

        System.out.print("|    ");
        for (var ch : alphabet) {
            System.out.print("| " + ch + "  ");
        }
        System.out.print("|");
        System.out.println();

        printHorizontalSeparateLine(column);

        for (var state : states) {
            if (!state.equals("q#")) {
                printLineForCurrentState(state, column);
                printHorizontalSeparateLine(column);
            }
        }
    }

    public void printLineForCurrentState(String state, int column) {
        System.out.print("| " + state + " ");

        Map<Integer, String> mapForCurrentState = new LinkedHashMap<>();
        for (var entry : map.entrySet()) {
            if (entry.getKey().getState().equals(state)) {
                char symbol = entry.getKey().getSymbol();
                int indexSymbol = findInArray(symbol);
                String endState = entry.getValue();

                mapForCurrentState.put(indexSymbol, endState);
            }
        }

        Set<Integer> indexes = mapForCurrentState.keySet();

        int columnNumber = 0;
        for (int i = 0; i < column; i++) {
            if (indexes.contains(columnNumber)) {
                System.out.print("| " + findEndStateBySymbol(columnNumber, mapForCurrentState) + " ");
            } else {
                System.out.print("|    ");
            }
            columnNumber++;
        }
        System.out.println();
    }

    public String findEndStateBySymbol(Integer indexSymbol, Map<Integer, String> mapForCurrentState) {
        for (var entry : mapForCurrentState.entrySet()) {
            if (Objects.equals(entry.getKey(), indexSymbol)) {
                return entry.getValue();
            }
        }
        return null;
    }

    public void printHorizontalSeparateLine(int column) {
        for (int i = 0; i < column * 5; i++) {
            System.out.print("_");
        }
        System.out.println();
    }

    public int findInArray(char symbol) {
        for (int i = 0; i < alphabet.length; i++) {
            if (alphabet[i].equals(symbol)) {
                return i;
            }
        }
        return -1;
    }
}
