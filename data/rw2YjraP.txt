/*firstPaymentDateTime & cohortYearMonth of all customers */
 
WITH firstPayment as (
    SELECT 
        userID,
        MIN(FORMAT_DATE('%Y-%m',DATETIME(paymentDateTime))) as cohortYearMonth, 
        MIN(paymentDateTime) as firstPaymentDateTime
    FROM `uptimerobot-001.ur.payments`
    WHERE paymentStatus = 1 AND paymentType = 2
    GROUP BY userID
    ),
 
/*All payments of a customer with cohortYearMonth, paymentYearMonth of given payment, index of the month used to decide 
if he should be included in cohort and payment amount with cohort Revenue for specific cohort*/
 
preparedData as (
    SELECT 
        p.userID,
        fp.cohortYearMonth,
        FORMAT_DATE('%Y-%m',DATETIME(paymentDateTime)) paymentYearMonth,
        (DATE_DIFF(DATETIME(p.paymentDateTime), DATETIME(fp.firstPaymentDateTime), MONTH) + p.paymentPeriod) as indexOfActiveMonth,
        p.paymentPeriod,
        p.productID,
        p.paymentAmount,
        p.paymentAmount/p.paymentPeriod as cohortRevenue
        
    FROM `uptimerobot-001.ur.payments` p
        LEFT JOIN firstPayment fp
        ON p.userID = fp.userID
    WHERE paymentStatus = 1 AND paymentType = 2
    ORDER BY paymentYearMonth
    ),
 
/*added previousmont values for some fields to the table*/
preparedData2 as(
 
   SELECT 
        userID,
        cohortYearMonth,
        paymentYearMonth,
        indexOfActiveMonth,
        LAG(indexOfActiveMonth) OVER (PARTITION BY userID ORDER BY paymentYearMonth) as indexOfPreviousActiveMonth,
        LAG(paymentPeriod) OVER (PARTITION BY userID ORDER BY paymentYearMonth) as previousPaymentPeriod,
        paymentPeriod,
        productID,
        paymentAmount,
        cohortRevenue
        
    FROM preparedData
    ORDER BY paymentYearMonth
    ),
 
        
cohorts as (
    SELECT DISTINCT cohortYearMonth as acquisitionYearMonth
    FROM firstPayment
    ORDER BY cohortYearMonth DESC)
    
    
/*Customer Cohorts in Abs Numbers*/
SELECT
    acquisitionYearMonth,
        COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 1 AND (indexOfPreviousActiveMonth <1 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month0,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 2 AND (indexOfPreviousActiveMonth <2 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month1,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 3 AND (indexOfPreviousActiveMonth <3 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month2,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 4 AND (indexOfPreviousActiveMonth <4 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month3,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 5 AND (indexOfPreviousActiveMonth <5 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month4,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 6 AND (indexOfPreviousActiveMonth <6 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month5,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 7 AND (indexOfPreviousActiveMonth <7 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month6,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 8 AND (indexOfPreviousActiveMonth <8 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month7,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 9 AND (indexOfPreviousActiveMonth <9 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month8,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 10 AND (indexOfPreviousActiveMonth <10 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month9,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 11 AND (indexOfPreviousActiveMonth <11 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month10,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 12 AND (indexOfPreviousActiveMonth <12 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month11,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 13 AND (indexOfPreviousActiveMonth <13 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month12,
                
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 14 AND (indexOfPreviousActiveMonth <14 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month13,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 15 AND (indexOfPreviousActiveMonth <15 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month14,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 16 AND (indexOfPreviousActiveMonth <16 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month15,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 17 AND (indexOfPreviousActiveMonth <17 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month16,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 18 AND (indexOfPreviousActiveMonth <18 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month17,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 19 AND (indexOfPreviousActiveMonth <19 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month18,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 20 AND (indexOfPreviousActiveMonth <20 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month19,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 21 AND (indexOfPreviousActiveMonth <21 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month20,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 22 AND (indexOfPreviousActiveMonth <22 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month21,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 23 AND (indexOfPreviousActiveMonth <23 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month22,
        COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 24 AND (indexOfPreviousActiveMonth <24 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month23,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 25 AND (indexOfPreviousActiveMonth <25 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month24,
                
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 26 AND (indexOfPreviousActiveMonth <26 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month25,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 27 AND (indexOfPreviousActiveMonth <27 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month26,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 28 AND (indexOfPreviousActiveMonth <28 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month27,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 29 AND (indexOfPreviousActiveMonth <29 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month28,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 30 AND (indexOfPreviousActiveMonth <30 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month29,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 31 AND (indexOfPreviousActiveMonth <31 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month30,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 32 AND (indexOfPreviousActiveMonth <32 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month31,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 33 AND (indexOfPreviousActiveMonth <33 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month32,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 34 AND (indexOfPreviousActiveMonth <34 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month33,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 35 AND (indexOfPreviousActiveMonth <35 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month34,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 36 AND (indexOfPreviousActiveMonth <36 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month35,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 37 AND (indexOfPreviousActiveMonth <37 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month36,
    
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 38 AND (indexOfPreviousActiveMonth <38 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month37,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 39 AND (indexOfPreviousActiveMonth <39 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month38,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 40 AND (indexOfPreviousActiveMonth <40 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month39,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 41 AND (indexOfPreviousActiveMonth <41 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month40,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 42 AND (indexOfPreviousActiveMonth <42 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month41,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 43 AND (indexOfPreviousActiveMonth <43 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month42,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 44 AND (indexOfPreviousActiveMonth <44 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month43,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 45 AND (indexOfPreviousActiveMonth <45 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month44,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 46 AND (indexOfPreviousActiveMonth <46 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month45,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 47 AND (indexOfPreviousActiveMonth <47 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month46,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 48 AND (indexOfPreviousActiveMonth <48 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month47,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 49 AND (indexOfPreviousActiveMonth <49 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month48,
                
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 50 AND (indexOfPreviousActiveMonth <50 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month49,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 51 AND (indexOfPreviousActiveMonth <51 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month50,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 52 AND (indexOfPreviousActiveMonth <52 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month51,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 53 AND (indexOfPreviousActiveMonth <53 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month52,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 54 AND (indexOfPreviousActiveMonth <54 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month53,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 55 AND (indexOfPreviousActiveMonth <55 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month54,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 56 AND (indexOfPreviousActiveMonth <56 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month55,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 57 AND (indexOfPreviousActiveMonth <57 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month56,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 58 AND (indexOfPreviousActiveMonth <58 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month57,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 59 AND (indexOfPreviousActiveMonth <59 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month58,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 60 AND (indexOfPreviousActiveMonth <60 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month59,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 61 AND (indexOfPreviousActiveMonth <61 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month60,
                
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 62 AND (indexOfPreviousActiveMonth <62 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month61,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 63 AND (indexOfPreviousActiveMonth <63 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month62,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 64 AND (indexOfPreviousActiveMonth <64 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month63,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 65 AND (indexOfPreviousActiveMonth <65 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month64,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 66 AND (indexOfPreviousActiveMonth <66 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month65,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 67 AND (indexOfPreviousActiveMonth <67 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month66,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 68 AND (indexOfPreviousActiveMonth <68 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month67,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 69 AND (indexOfPreviousActiveMonth <69 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month68,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 70 AND (indexOfPreviousActiveMonth <70 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month69,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 71 AND (indexOfPreviousActiveMonth <71 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month70,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 72 AND (indexOfPreviousActiveMonth <72 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month71,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 73 AND (indexOfPreviousActiveMonth <73 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month72,
                
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 74 AND (indexOfPreviousActiveMonth <74 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month73,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 75 AND (indexOfPreviousActiveMonth <75 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month74,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 76 AND (indexOfPreviousActiveMonth <76 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month75,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 77 AND (indexOfPreviousActiveMonth <77 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month76,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 78 AND (indexOfPreviousActiveMonth <78 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month77,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 79 AND (indexOfPreviousActiveMonth <79 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month78,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 80 AND (indexOfPreviousActiveMonth <80 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month79,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 81 AND (indexOfPreviousActiveMonth <81 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month80,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 82 AND (indexOfPreviousActiveMonth <82 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month81,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 83 AND (indexOfPreviousActiveMonth <83 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month82,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 84 AND (indexOfPreviousActiveMonth <84 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month83,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 85 AND (indexOfPreviousActiveMonth <85 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month84,

                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 86 AND (indexOfPreviousActiveMonth <86 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month85,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 87 AND (indexOfPreviousActiveMonth <87 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month86,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 88 AND (indexOfPreviousActiveMonth <88 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month87,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 89 AND (indexOfPreviousActiveMonth <89 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month88,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 90 AND (indexOfPreviousActiveMonth <90 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month89,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 91 AND (indexOfPreviousActiveMonth <91 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month90,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 92 AND (indexOfPreviousActiveMonth <92 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month91,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 93 AND (indexOfPreviousActiveMonth <93 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month92,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 94 AND (indexOfPreviousActiveMonth <94 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month93,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 95 AND (indexOfPreviousActiveMonth <95 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month94,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 96 AND (indexOfPreviousActiveMonth <96 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month95,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 97 AND (indexOfPreviousActiveMonth <97 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month96,
                
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 98 AND (indexOfPreviousActiveMonth <98 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month97,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 99 AND (indexOfPreviousActiveMonth <99 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month98,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 100 AND (indexOfPreviousActiveMonth <100 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month99,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 101 AND (indexOfPreviousActiveMonth <101 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month100,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 102 AND (indexOfPreviousActiveMonth <102 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month101,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 103 AND (indexOfPreviousActiveMonth <103 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month102,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 104 AND (indexOfPreviousActiveMonth <104 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month103,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 105 AND (indexOfPreviousActiveMonth <105 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month104,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 106 AND (indexOfPreviousActiveMonth <106 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month105,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 107 AND (indexOfPreviousActiveMonth <107 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month106,

                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 108 AND (indexOfPreviousActiveMonth <108 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month107,
                COUNT(DISTINCT CASE WHEN acquisitionYearMonth = cohortYearMonth AND indexOfActiveMonth >= 109 AND (indexOfPreviousActiveMonth <109 OR indexOfPreviousActiveMonth IS NULL) AND (indexOfActiveMonth - indexOfPreviousActiveMonth <= previousPaymentPeriod OR indexOfActiveMonth - indexOfPreviousActiveMonth IS NULL) THEN userID END) Month108
                
    
 
FROM cohorts c
    LEFT JOIN
        preparedData2 pd
        ON c.acquisitionYearMonth = pd.cohortYearMonth
GROUP BY acquisitionYearMonth
ORDER BY acquisitionYearMonth