const fs = require('fs');
const input = fs.readFileSync(process.stdin.fd, 'utf-8');

function parseArguments(argv) {
  const args = {part: 1};
  let i = 2;
  while (i < argv.length) {
    if (argv[i] === '--print') {
      args.print = true;
    } else if (/^--part=[12]$/.test(argv[i])) {
      args.part = Number(argv[i].at(-1));
    } else {
      console.error(`Unrecognized argument[${i - 2}]: ${argv[i]}`);
      process.exit(1);
    }
    i++;
  }
  return args;
}
/*
  33_5=
  22_s
*/
const snafuToDigit = {
  '=': -2,
  '-': -1,
  '0': 0,
  '1': 1,
  '2': 2,
};
function fromSnafu(s) {
  let result = 0;
  for (const digit of s) {
    result = 5 * result + snafuToDigit[digit];
  }
  return result;
}

const digitToSnafu =
    Object.fromEntries(Object.entries(snafuToDigit).map(([k, v]) => [v, k]));
function toSnafu(n) {
  if (n === 0) return '0';
  if (n < 0) throw new TypeError('Not sure how to do negatives');
  let result = '';
  let carry = 0;
  while (n) {
    digit = n % 5 + carry;
    carry = 0;
    if (digit >= 3) {
      carry = 1;
      digit -= 5;
    }
    result = digitToSnafu[digit] + result;
    n = Math.floor(n / 5);
  }
  if (carry) {
    result = digitToSnafu[carry] + result;
    carry = 0;
  }
  return result;
}

function solvePart1(input, print) {
  let result = 0;
  if (print) {
    const snafu = toSnafu(parseInt('444', 5));
    console.log(`444_5 → ${snafu} → ${fromSnafu(snafu).toString(5)}_5`);
  }
  for (const num of input.split('\n')) {
    result += fromSnafu(num);
  }
  return toSnafu(result);
}

const args = parseArguments(process.argv);
if (args.part === 1) {
  console.log(solvePart1(input, args.print));
} else {
  console.error('Part two not yet implemented');
  process.exit(1);
}
