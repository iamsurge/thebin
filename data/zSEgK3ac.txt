exports.createCaseTask = (req, res) => {
  //console.log('Inside create case tasks');
  CaseTask.create({
    court_type_id: req.body.court_type_id,
    court_id: req.body.court_id,
    task_no: req.body.task_no,
    case_no: req.body.case_no,
    client_id: req.body.client_id,
    account_name: req.body.account_name,
    plaintiff: req.body.plaintiff,
    against: req.body.against,
    file_receive_date: req.body.file_receive_date,
    hearing_prev_date: req.body.hearing_prev_date,
    hearing_next_date: req.body.hearing_next_date,
    step_remarks: req.body.step_remarks,
    status: req.body.status,
    subscription_id: req.currentUser.subscription_id,
    is_deleted: 0,
  })
    .then((case_task) => {
      if (case_task) {
        //console.log(case_task.case_task_id);
        //Put the data in case workflow
        CaseWorkflow.create({
          case_task_id: case_task.case_task_id,
          court_type_id: req.body.court_type_id,
          court_id: req.body.court_id,
          task_no: req.body.task_no,
          case_no: req.body.case_no,
          client_id: req.body.client_id,
          account_name: req.body.account_name,
          plaintiff: req.body.plaintiff,
          against: req.body.against,
          file_receive_date: req.body.file_receive_date,
          hearing_prev_date: req.body.hearing_prev_date,
          hearing_next_date: req.body.hearing_next_date,
          step_remarks: req.body.step_remarks,
          status: req.body.status,
          subscription_id: req.currentUser.subscription_id,
          is_deleted: 0,
        }).then((case_workflow) => {
          if (case_workflow) {
            // res.status(201).send({
            //   message: 'Case task and case workflow successfully created.',
            // });
            //put data in case_assign_details
            CaseAssign.create({
              case_workflow_id: case_workflow.case_workflow_id,
              assigne_id: req.body.assigne_id,
              assign_date: req.body.assign_date,
              assign_by: req.body.assign_by,
              deadline: req.body.deadline,
              priority: req.body.priority,
              remarks: req.body.remarks,
              is_deleted: 0,
            }).then((case_assign) => {
              if (case_assign) {
                if (req.files) {
                  for (let i = 0; i < req.files.length; i++) {
                    console.log(req.files[0].filename, req.files[0].path);
                    CaseDocs.create({
                      case_task_id: case_task.case_task_id,
                      case_workflow_id: case_workflow.case_workflow_id,
                      case_assign_task_id: case_assign.case_assign_task_id,
                      doc_name: req.files[i].filename,
                      doc_url: req.files[i].path,
                      is_deleted: 0,
                    })
                      .then((case_doc) => {
                        if (case_doc) {
                          console.log('File uploaded successfully');
                        }
                      })
                      .catch((err) => {
                        console.log(err.message);
                      });
                  }
                }
                res
                  .status(201)
                  .send({ message: 'Case task successfully created' });
              } else {
                return res
                  .status(404)
                  .send({ message: "Couldn't create case assign details" });
              }
            });
          } else {
            return res
              .status(400)
              .send({ message: "Couldn't create case workflow" });
          }
        });
      } else {
        return res
          .status(400)
          .send({ message: 'Sorry. Something went wrong.' });
      }
    })
    .catch((err) => {
      res.status(500).send({ message: err.message });
    });
};