int[] board = new int[9];

// Initialize the board
for (int i = 0; i < 9; i++)
{
    board[i] = 0;
}

void printTicTacToeBoard()
{
    for (int i = 0; i < 9; i++)
    {
        /*
         . = unoccupied square
         X = human player
         O = computer player
        */

        if (board[i] == 0)
        {
            Console.Write(".");
        }

        if (board[i] == 1)
        {
            Console.Write("X");
        }

        if (board[i] == 2)
        {
            Console.Write("O");
        }

        // Create a line break every third character to make a tic tac toe board
        if (i == 2 || i == 5 || i == 8)
        {
            Console.WriteLine();
        }
    }
}

int humanTurn = -1;
int computerTurn = -1;
Random random = new Random();

var plays = 9;

// If there is no winner yet
while (checkForWinner() == 0 && plays > 0 )
{
    // Prevent the human player from choosing an occupied squarewhile (humanTurn == -1 || board[humanTurn] != 0)
    {
        Console.WriteLine("Please enter a number between 0 and 8:");
        humanTurn = Convert.ToInt32(Console.ReadLine());
        Console.WriteLine($"You chose: {humanTurn}");
    }
    board[humanTurn] = 1;
    plays--;

    // Prevent the computer from choosing an occupied square
    while (computerTurn == -1 || board[computerTurn] != 0)
    {
        computerTurn = random.Next(9);
        Console.WriteLine($"The computer chose: {computerTurn}");
    }

    board[computerTurn] = 2;
    plays--;

    // Print board
    printTicTacToeBoard();
}

int checkForWinner()
{
    // Return a 0 if nobody won
    // Return a player number if they one

    if (board[0] == board[1] && board[1] == board[2])
    {
        // Top row matches
        return board[0];
    }

    if (board[3] == board[4] && board[4] == board[5])
    {
        // Middle row matches
        return board[3];
    }

    if (board[6] == board[7] && board[7] == board[8])
    {
        // Bottom row matches
        return board[6];
    }

    if (board[0] == board[3] && board[3] == board[6])
    {
        // First column matches
        return board[0];
    }

    if (board[1] == board[4] && board[4] == board[7])
    {
        // Second column matches
        return board[1];
    }

    if (board[2] == board[5] && board[5] == board[8])
    {
        // Third column matches
        return board[2];
    }

    if (board[0] == board[4] && board[4] == board[8])
    {
        // Diagonal position [0 - 4 - 8] matches
        return board[0];
    }

    if (board[2] == board[4] && board[4] == board[6])
    {
        // Diagonal position [2 - 4 - 6] matches
        return board[2];
    }

    // No winner yet
    return 0;
}

Console.WriteLine($"Player {checkForWinner()} won the game");
Console.Read();