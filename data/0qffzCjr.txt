--Sensors -> Inputs
--x gantry start and end -> 2 Sensors
--y gantry start and end -> 2 Sensors


--links: 

--outputs:
--2 cobble = x gantry --> left
--1 cobble = y gantry --> bottom
--1 log = clutch --> back
--2 log = gearshift --> right
--1 dirt = sequencedgearshift --> top
 
--sensors:

--1 brass ingo = pulley --> top
--1 acacia log = ys --> left
--2 acacia log = ye --> bottom
--1 andesite casing = xs --> right
--2 andesite casing = xe --> back





--Outputs
--clutch
--sequenced gearshift
--gearshift
--x gantry
--y gantry


--wrap the redstoneblocks
redsb1 = peripheral.wrap("right") --SENSORS
redsb2 = peripheral.wrap("left") --OUTPUTS



timedowndrill = 300
timeup = 20
tick2 = 0.2
tick1 = 0.1
timeunload = 20
timetomvone = 3

finished = false
yetriggered = false

--start
--Sensor sides
xs = "right"
xe = "back"
ys = "left"
ye = "bottom"
pulleys = "top"

pb = redsb1.getInput(pulleys)
ysb = redsb1.getInput(ys)
yeb = redsb1.getInput(ye)
xsb = redsb1.getInput(xs)
xeb = redsb1.getInput(xe)

row = 0

--Output sides
clutch = "back"
sqg = "top"
gs = "right"
xgantry = "left"
ygantry = "bottom"

redsb2.setOutput(gs,false)
redsb2.setOutput(clutch,true)

print("PRESS ENTER TO START QUARRY. MAKE SURE ITS AT THE START")
check = input()



--Check for start condition.
while not finished do
    --make sure input is not reversed and clutch for reverse is open
    redsb2.setOutput(gs,false)
    redsb2.setOutput(clutch,true)
    pb = redsb1.getInput(pulleys)
    ysb = redsb1.getInput(ys)
    yeb = redsb1.getInput(ye)
    xsb = redsb1.getInput(xs)
    xeb = redsb1.getInput(xe)
    if row ~= 0 then
        redsb2.setOutput(ygantry,false)
        redsb2.setOutput(xgantry,false)
        for i = 1,row do
            redsb2.setOutput(sqg,true)
            sleep(tick2)
            redsb2.setOutput(sqg,false)
            sleep(timetomvone)
        end
    end
    while not xeb do
        redsb2.setOutput(ygantry,true)
        redsb2.setOutput(xgantry,true)
        --enable continous input by closing clutch
        redsb2.setOutput(clutch,false)
        --pulley lowers and drill starts
        sleep(timedown)
        pb = redsb1.getInput(pulleys)
        --reverse input to pull pulley up
        while not pb do
            redsb2.setOutput(gs,true)
            pb = redsb1.getInput(pulleys)
            sleep(tick1)
        end
        --disable continous input by opening clutch
        redsb2.setOutput(clutch,true)
        --reverse input again after dragging up the pulley
        redsb2.setOutput(gs,false)

        xeb = redsb1.getInput(xe)
        --check if at end of x
        if xeb then
            break
        end
        --when not at end move to next position
        redsb2.setOutput(xgantry,false)
        redsb2.setOutput(sqgs,true)
        sleep(tick2)
        redsb2.setOutput(sqgs,false)
    end
    --End of xgantry reached but last drill process of row is still pending
    --Last drill process of row starts
    redsb2.setOutput(ygantry,true)
    redsb2.setOutput(xgantry,true)
    --enable continous input by closing clutch
    redsb2.setOutput(clutch,false)
    --pulley lowers and drill starts wait to complete
    sleep(timedown)
    --reverse input to pull pulley up
    pb = redsb1.getInput(pulleys)
    while not pb do
        redsb2.setOutput(gs,true)
        pb = redsb1.getInput(pulleys)
        sleep(tick1)
    end
    --reverse again after pulley is up
    redsb2.setOutput(gs,false)
    --disable continous input by opening clutch
    redsb2.setOutput(clutch,true)
    --Last drill process complete
    --Back to start to unload
    --enable continous input by closing clutch
    redsb2.setOutput(clutch,false)
    --reverse input
    redsb2.setOutput(gs,true)
    xs = redsb1.getInput(xs)
    while not xs do
        redsb2.setOutput(xgantry,false)
        sleep(tick1)
        ye = redsb1.getInput(ye)
        if ye then
            finished = true
        end
        xs = redsb1.getInput(xs)
    end
    ys = redsb1.getInput(ys)
    while not ys do
        redsb2.setOutput(ygantry,false)
        ys = redsb1.getInput(ys)
        sleep(tick1)
    end
    row += 1
    --Unload
    sleep(timeunload)
    --disable continous input by opening clutch
    redsb2.setOutput(clutch,true)
end