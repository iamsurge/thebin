#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

const int max_size = 21;

vector <int> v1, v2;

int a[max_size], b[max_size], uz[max_size], n1, n2;

void bkt1 (int s, int lst)
{
    if (lst == n1)
    {
        return;
    }
    for (int i = lst + 1; i <= n1; i++)
    {
        s += a[i];
        v1.push_back(s);
        bkt1(s, i);
        s -= a[i];
    }
}

void bkt2 (int s, int lst)
{
    if (lst == n2)
    {
        return;
    }
    for (int i = lst + 1; i <= n2; i++)
    {
        s += b[i];
        v2.push_back(s);
        bkt2(s, i);
        s -= b[i];
    }
}

int main ()
{
    v1.push_back(0);
    v2.push_back(0);
    int n, s;
    cin >> n >> s;
    n1 = n / 2;
    n2 = n - n1;
    for (int i = 1; i <= n1; i++)
    {
        cin >> a[i];
    }
    bkt1(0, 0);
    for (int i = 1; i <= n2; i++)
    {
        cin >> b[i];
    }
    bkt2(0, 0);
    sort(v1.begin(), v1.end());
    sort(v2.begin(), v2.end());
    int ans = 0;
    for (auto f : v1)
    {
        if (f > s)
        {
            break;
        }
        int caut = s - f, l = 0, r = v2.size() - 1, poz = 0;
        while (l <= r)
        {
            int m = (l + r) / 2;
            if (v2[m] <= caut)
            {
                poz = m;
                l = m + 1;
            }
            else
            {
                r = m - 1;
            }
        }
        ans = max(ans, f + v2[poz]);
    }
    cout << ans;
    return 0;
}
