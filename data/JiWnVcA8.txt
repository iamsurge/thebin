#include "bits/stdc++.h"

#define Mehh ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0)
#define int long long
#define endl "\n"

using namespace std;

const int MAXN = 1e15 + 5;
int MOD = 1e9 + 7;

int fastpow(int x, int y) {
    if (!y) return 1;
    if (y & 1) return ((x * fastpow(x, y - 1) % MOD) % MOD) % MOD;
    int ans = fastpow(x, y >>= 1);
    ans %= MOD;
    ans *= ans;
    ans %= MOD;
    return ans;
}
// Start Here VVVVVVVVVVVVVVVVVVVVVVVVVVV
string caeser(string original, int key) {
    string cipher = original;
    for (int i = 0; i < cipher.size(); ++i) {
        cipher[i] = ((cipher[i] - 'a' + key) % 26) + 'a';
    }
    return cipher;
}

string rowtransposition(string original, string order) {
    string cipher = "";
    int row = original.size() / order.size();
    int col = order.size();
    if (row * order.size() < original.size())
        row++;
    char grid[row][col];
    int currIndex = 0;
    for (int i = 0; i < row; ++i)
        for (int j = 0; j < col; ++j) {
            if (currIndex < original.size())
                grid[i][j] = original[currIndex];
            else
                grid[i][j] = '.';
            currIndex++;
        }

    for (int i = 0; i < col; ++i)
        for (int j = 0; j < row; ++j)
            cipher += grid[j][order[i] - '1'];

    return cipher;
}

string railfence(string original, int depth){
    string cipher = "";
    bool goingDown = false;
    int currDepth = 0;
    vector<string> grid(3,string(original.size(), 0));
    for (int i = 0; i < original.size(); ++i) {
        if(currDepth == depth - 1 || currDepth == 0)
            goingDown = !goingDown;
        grid[currDepth][i] = original[i];
        if(goingDown)
            currDepth++;
        else
            currDepth--;
    }
    for (int i = 0; i < depth; ++i)
        for (int j = 0; j < original.size(); ++j)
            if (grid[i][j] != 0)
                cipher += grid[i][j];
    return cipher;
}
// Ends here ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
int32_t main() {
//    Mehh;
//  freopen("text.txt", "r", stdin);
//  freopen("output.txt", "w", stdout);
    int _ = 1;
//    cin >> _;
    int cs = 1;
    while (_--) {
        cout << railfence("meetmeattwoam", 3);
    }
    return 0;
}