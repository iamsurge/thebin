def shift_char(char: str) -> str:
    return chr((((ord(char)-97)+1) % 26) + 97)


def shift_str(string: str) -> str:
    return "".join(map(shift_char, string))


def countFamilyLogins(logins: list[str]) -> int:
    shifted = list(map(shift_str, logins))

    return sum(shifted.count(login) for login in logins)


import pytest

from questions.q1 import shift_char, shift_str, countFamilyLogins


class TestQuestion1:
    @pytest.mark.parametrize(["character", "expected"], [
        pytest.param("a", "b", id="a->b"),
        pytest.param("z", "a", id="z->a")
    ])
    def test_shift_char(self, expected: str, character: str):
        assert expected == shift_char(character)

    @pytest.mark.parametrize(["string", "expected"], [
        pytest.param("abc", "bcd"),
        pytest.param("bag", "cbh"),
        pytest.param("red", "sfe", ),
        pytest.param("corn", "dpso"),
        pytest.param("dpso", "eqtp")
    ])
    def test_shift_str(self, expected: str, string: str):
        assert expected == shift_str(string)

    @pytest.mark.parametrize(["expected", "logins"], [
        pytest.param(3, ["bag", "sfe", "cbh", "cbh", "red"]),
        pytest.param(3, ["corn", "horn", "dpso", "eqtp", "corn"]),
        pytest.param(2, ["cbu", "bat", "cbu"])
    ])
    def test(self, expected: int, logins: list[str]):
        assert expected == countFamilyLogins(logins)





#########################################


def power_consumption(processing_power, booting_power) -> int:
    return max(booting_power) + (sum(processing_power) * len(processing_power))


def check(num_processors, cluster_size, processing_power, booting_power, power_max) -> bool:
    for cluster_group in range(num_processors - cluster_size + 1):
        cluster_slice = slice(cluster_group, cluster_group + cluster_size)
        if power_consumption(processing_power[cluster_slice], booting_power[cluster_slice]) <= power_max:
            return True
    return False


def findMaximumSustainableClusterSize(processingPower, bootingPower, powerMax) -> int:
    max_cluster_size = 0
    num_processors = len(processingPower)
    processingPower, bootingPower = list(zip(*sorted(list(zip(processingPower, bootingPower)), key=lambda x: x[0])))


    for cluster_size in range(1, num_processors+1):
        if check(num_processors, cluster_size, processingPower, bootingPower, powerMax):
            max_cluster_size = cluster_size
            continue
        break

    return max_cluster_size



import pytest

from questions.q2 import power_consumption, findMaximumSustainableClusterSize


class TestQuestion2:
    @pytest.mark.parametrize(["expected", "processing_power", "booting_power"], [
        pytest.param(33, [3, 6, 1], [2, 1, 3]),
        pytest.param(34, [6, 1, 3], [1, 3, 4]),
        pytest.param(29, [1, 3, 4], [3, 4, 5]),
        pytest.param(60, [4, 6, 1, 3], [2, 1, 3, 4]),
    ])
    def test_power_consumption(self, expected: int, processing_power: list[int], booting_power: list[int]):
        assert expected == power_consumption(processing_power, booting_power)

    @pytest.mark.parametrize(["expected", "processing_power", "booting_power", "power_max"], [
        pytest.param(3, [2, 1, 3, 4, 5], [3, 6, 1, 3, 4], 25, id="example"),
        pytest.param(2, [4, 1, 4, 5, 3], [8, 8, 10, 9, 12], 33, id="test_case_0"),
        pytest.param(0, [10, 8, 7], [11, 12, 19], 6, id="test_case_1"),
        pytest.param(1, [10, 8, 7, 1], [11, 12, 19, 1], 6, id="test_case_1b"),
        pytest.param(1, [1], [1], 2)
    ])
    def test(self, expected: int, processing_power: list[int], booting_power: list[int], power_max: int):
        assert expected == findMaximumSustainableClusterSize(processing_power, booting_power, power_max)
