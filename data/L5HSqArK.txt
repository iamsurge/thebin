// P1.c

#include <stdio.h>
#include <shared.h>

struct shared_mem {
        volatile int counter;
        volatile int lock;
};

typedef struct shared_mem memory;

int main() {
        memory *data;

        int i, k, a;

        data  = (memory *) getmem(54109);

        for (i = 0; i <= 1000000; i++) {
                while(testandset(&(data->lock)));

                a = data->counter;
                a = a + 1;
                data->counter = a;
                for(k = 0; k < 1000; k++);

                data->lock = 0;
        }

        printf("P1 process ended.\n");

        return 0;
}

// P2.c
// P2.c

#include <stdio.h>
#include <shared.h>

struct shared_mem {
        volatile int counter;
        volatile int lock;
};

typedef struct shared_mem memory;

int main() {
        int i, k, a;

        memory *data;

        data = (memory *)getmem(54109);

        for (i = 1; i <= 10000000; i++) {
                while(testandset(&(data->lock)));

                a = data->counter;
                a = a + 1;
                data->counter = a;
                for(k = 0; k < 1000; k++);

                data->lock = 0;
        }

        printf("P2 process ended.\n");

        return 0;
}

// init.c

#include <stdio.h>
#include <shared.h>

int main() {
        int *counter;

        counter = (int *)getmem(1234);
        *counter = 0;

        printf("The initial value is %d. \n", *counter);

        return 0;
}

// show.c

#include <stdio.h>
#include <shared.h>

int main() {
        int *counter;

        counter = (int *)getmem(1234);

        printf("The common value is %d. \n", *counter);

        return 0;
}

