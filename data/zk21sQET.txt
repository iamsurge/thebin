#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <locale.h>
#include "ep.h"

// colunas atual e marcada
int col = 0, Mcol = 0;

// Linhas topo e marcada
linha top, marked;

/* Trim string */
string trim(string str) {
	strtok(str, "\n");
	strtok(str, "\r");
	char *end = str+strlen(str)-1;
	while (end >= str && isspace((unsigned char)*end)) // (str[i] == ' ' || str[i] == '\0' || str[i] == '\t' || str[i] == '\r' || str[i] == '\n')
		end--;
	end[1] = '\0';
	if (end[0] == '\n')
		end[0] = '\0';
	return str;
}

/* Inicializa linha vazia */
linha inicializa(linha atual) {
	atual = (linha)malloc(sizeof(linha_));
	atual->prox = NULL;
	atual->ant = NULL;
	atual->idx = 0;
	atual->caracs = (string)malloc(sizeof(char));
	atual->caracs[0] = '\0';
	return atual;
}

/* Limpa memória das linhas, reseta col */
linha limpa() {
	// Limpa memória de tudo
	linha aux = top, aux2;
	while (aux != NULL) {
		aux2 = aux->prox;
		free(aux);
		aux = aux2;
	}

	// Inicializa globais novamente
	top = inicializa(top);
	marked = inicializa(marked);
	col = 0;
	Mcol = 0;

	// Retorna
	return top;
}

/* Retorna linha nova, com cursor de coluna ajustado. Caso não exista linha, returna NULL. */
linha moveParaLinha(linha novo) {
	if (novo != NULL)
		col = MIN(col, strlen(novo->caracs));
	return novo;
}

/* Move para linha com index idx, caso não exista */
linha moveParaLinhaPorIndex(int idx) {
	linha novo = top;
	while (novo->idx != idx && novo->prox != NULL)
		novo = novo->prox;
	if (novo != NULL)
		col = MIN(col, strlen(novo->caracs));
	return novo;
}

/* Insere nova linha após a atual com texto text */
linha insereLinha(linha atual, char text[MAX_TAM_LINHA]){
	linha novo = (linha)malloc(sizeof(linha_));
	linha next = atual->prox;
	int len = strlen(text);

	// Insere dados na nova linha
	novo->caracs = (string)malloc((1+len)*sizeof(char)); // TODO: 1+?
	strcpy(novo->caracs, text); // memcpy(novo->caracs, text, strlen(text)+1);
	novo->caracs[len] = '\0';
	novo->idx = atual->idx + 1;

	// Atualiza numero da linha para todas as linhas seguintes
	linha aux = atual;
	while(aux->prox !=NULL) {
		aux = aux->prox;
		aux->idx = aux->idx + 1;
	}

	// Atualiza ponteiros
	novo->prox = next;
	novo->ant = atual;
	atual->prox = novo;
	if (next != NULL) next->ant = novo;

	//Atualiza cursor
	col = 0;

	// Retorna novo
	return novo;
}

/* Une linha atual com a próxima */
linha uneLinhas(linha atual) {
	// Une linhas na linha atual, e libera memória da próxima linha
	linha old_prox = atual->prox;
	strcat(atual->caracs, old_prox->caracs); //TODO: realloc atual->caracs ?
	atual->prox = old_prox->prox;
	free(old_prox);

	// Atualiza numero da linha para todas as linhas seguintes
	linha aux = atual;
	while(aux->prox !=NULL) {
		aux = aux->prox;
		aux->idx = aux->idx - 1;
	}
	return atual;
}

/* Separa linha atual na posição do cursor */
linha separaLinha(linha atual) {
	int len = strlen(atual->caracs);
	char aux[len-col-1];
	for (int i = col; i < len; i++)
		aux[i - col] = atual->caracs[i];
	atual->caracs[col] = '\0';

	atual = insereLinha(atual, aux);
	return atual;
}

/* Imprime linha */
void imprime(linha atual) {
	// Imprime o texto da linha
	printf("\n%s\n", atual->caracs);  // TODO: consertar, às vezes não está pulando linha no final!

	// Imprime cursor
	bool mostra_M = (atual->idx == marked->idx && Mcol != col);
	int minimum = mostra_M ? MIN(col,Mcol) : col;
	int i;
	for (i = 0; i < minimum; i++)
		printf(" ");
	printf(minimum == col ? "^" : "M");
	if (mostra_M) {
		for (i = 0; i < abs(Mcol-col)-1; i++) printf(" ");
		printf(minimum == col ? "M" : "^");
	}

	// Fim print
	printf("\n\n");
}

/* Retorna ultima linha do arquivo */
linha ultimaLinha() {
	linha aux = top;
	while(aux->prox !=NULL) {
		aux = aux->prox;
	}
	return aux;
}

/* Insere texto na linha atual, na posição de cursor col */
linha insereTexto(linha atual, string entrada) {
	int len = strlen(atual->caracs); //TODO: realloc atual->caracs ?
	int len_entr = strlen(entrada);
	int pos = len < col ? len : col;
	int i;
	for (i = 0; i < len - pos; i++)
		atual->caracs[len + len_entr - i - 1] = atual->caracs[len - i - 1];
	for (i = 0; i < len_entr; i++)
		atual->caracs[pos+i] = entrada[i];
	atual->caracs[len + len_entr] = '\0';
	col = col + strlen(entrada);
	return atual;
}

/* Remove texto na linha atual, na posição de cursor col */
linha removeTexto(linha atual) {
	int len = strlen(atual->caracs); //TODO: realloc atual->caracs ?
	for (int i = col; i < len; i++)
		atual->caracs[i - 1] = atual->caracs[i];
	atual->caracs[len - 1] = '\0';
	col = col - 1;
	return atual;
}

/* Carrega um arquivo */
linha carrega(linha atual, string entrada) {
	// Abre arquivo
	FILE *fp;
	fp = fopen(entrada, "r");
	if (fp == NULL) {
		printf("Arquivo %s nao encontrado", entrada);
		return atual;
	}

	// Limpa memória
	atual = limpa();

	// Insere nova linha na estrutura
	char temp_linha[MAX_TAM_LINHA];
	while (fgets(temp_linha, MAX_TAM_LINHA, fp)) {
		trim(temp_linha); //strtok(temp_linha, "\n");
		atual = insereLinha(atual, temp_linha);
	}

	// Fecha arquivo e retorna
	fclose(fp);
	return atual;
}

/* Salva conteúdo do editor para arquivo */
linha salva(linha atual, string entrada) {
	// Abre arquivo
	FILE *fp;
	fp = fopen(entrada, "w+");
	if (fp == NULL) {
		printf("Arquivo %s nao encontrado e nao pode ser criado", entrada);
		return atual;
	}

	// Escreve linhas no arquivo
	linha aux = top;
	while(aux !=NULL) {
		fprintf(fp, "%s", aux->caracs);
		if (aux->caracs[strlen(aux->caracs)] != '\n' && aux->prox != NULL)
			fprintf(fp, "\n", aux->caracs);
		aux = aux->prox;
	}

	// Fecha arquivo e retorna
	fclose(fp);
	return atual;
}

/* Move cursor */
linha move(linha atual, string entrada) {
	char comando;
	for (int i = 0; entrada[i] != '\0'; i++) {
		switch (comando = entrada[i]) {
			case 'F':
				col = (col+1 <= strlen(atual->caracs)) ? col+1 : col; break;
			case 'T':
				col = (col-1 >= 0) ? col-1 : col; break;
			case 'O':
				col = 0; break;
			/*case 'P': //TODO
				movePalavra(1); break; // move para próxima palavra
			case 'Q':
				movePalavra(0); break; //move para inicio palavra*/
			case '$':
				col = strlen(atual->caracs); break; //move fim da linha atual
			case 'J':
				if (atual->prox != NULL) atual = moveParaLinha(atual->prox); break;
			case 'H':
				if (atual->ant != NULL) atual = moveParaLinha(atual->ant);
				else col = 0;
				break;
			case 'M':
				marked = atual;
				Mcol = col;
				break;
			case 'D':
				if (col > 0) atual = removeTexto(atual);
				break;
			default:
				printf("Comando %c nao reconhecido\n", comando); break;
		}
	}
	return atual;
}

/* MAIN */
int main() {
	setlocale(LC_ALL, ".UTF8");
	printf("Ola\n\n");

	/* Inicializa estrutura e linha vazia */
	top = inicializa(top);
	marked = inicializa(marked);
	linha atual = top;

	/* Lê entrada */
	char comando = '\0', entrada[MAX_TAM_ENTRADA];
	while (comando != '!') {
		// Lê entrada
		printf("%d,%d> ", atual->idx, col);
		if (fgets(entrada, sizeof(entrada), stdin) == NULL) {
			printf("Erro lendo entrada\n");
			continue;
		}
		strtok(entrada, "\n"); //retirando a quebra de linha da entrada

		// Executa comando
		switch (comando = entrada[0]) {
			case 'I':
				atual = insereTexto(atual, entrada+1); break;
			case '#': // Insere linha vazia após a atual
				atual = insereLinha(atual, "\0"); break;
			case 'A':
				atual = carrega(atual, entrada+1); break; //TODO: deve apagar o que havia antes no editor
			case 'E':
				atual = salva(atual, entrada+1);
				break;
			case 'F':
			case 'T':
			case 'O':
			case 'P':
			case 'Q':
			case '$':
			case 'J':
			case 'H':
			case 'M':
			case 'D':
				atual = move(atual, entrada);
				break;
			case ':':
				if (entrada[1] == 'F') atual = moveParaLinha(ultimaLinha());
				else if (atoi(entrada+1) != 0 || (entrada+1)[0] == '0') atual = moveParaLinhaPorIndex(atoi(entrada+1));
				else printf("Comando %c nao reconhecido", comando);
				break;
			case 'N': // Separa linha atual na posição do cursor
				atual = separaLinha(atual);
				break;
			case 'U': // Unir linha atual e a próxima
				atual = uneLinhas(atual);
				break;
			case 'C': // Empilha o texto entre a posi¸c˜ao marcada e a posi¸c˜ao atual (sem modific´a-lo)
				break; //TODO
			case 'X': // Empilha o texto entre a posi¸c˜ao marcada e a posi¸c˜ao atual e o deleta
				break; //TODO
			case 'Z': // Exibe a pilha de memoria, comecando pelo topo
				break; //TODO
			case 'B': // Busca pela pr´oxima ocorrˆencia do padr˜ao s no texto
				break; //TODO
			case 'S': // Ss/r Substitui toda ocorrˆencia de s por r no texto a partir da posi¸c˜ao atual
				break; //TODO
			case '!':
				printf("\nSaindo...\n"); break;
			default:
				printf("Comando %c nao reconhecido\n", comando); break;
		}

		/* IMPRIME TEXTO */
		imprime(atual);
	}

	printf("\nFim de programa");
	return 0;
}
