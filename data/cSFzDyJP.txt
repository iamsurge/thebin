Here are the detailed steps to create a custom layer in AWS Lambda:

Create a directory for your layer. This directory should contain the code and dependencies for your layer. For example, you might create a directory called my_layer and add the following files to it:

For e.g.,
my_layer/
├── main.py
└── requirements.txt

The main.py file should contain the code for your layer. This code should be written as a Python module that can be imported and used in your functions. For example, if your layer includes a function called custom_function, you might have a main.py file that looks like this:

def custom_function(x):
    return x + 1
The requirements.txt file should list any Python packages that your layer depends on. For example, if your layer depends on the pandas package, you would include the following line in your requirements.txt file:

pandas

Use the following command to create a ZIP archive of the my_layer directory:

zip -r layer.zip my_layer

Use the AWS CLI to create the layer, specifying the path to the ZIP archive:

aws lambda publish-layer-version --layer-name my-layer --zip-file fileb://layer.zip
This will create a layer called my-layer in your AWS account.

To use the layer in your function, you will need to specify the layer's Amazon Resource Name (ARN) when you create or update your function. You can find the ARN for your layer by using the following command:

aws lambda list-layers

This will output a list of all the layers in your account, along with their ARNs. You can then use the ARN of your my-layer layer to reference it in your function.

For example, you might create a function that uses the custom_function from your layer like this:


import boto3

def lambda_handler(event, context):
    # Import the custom_function from the my-layer layer
    from main import custom_function
    
    result = custom_function(10)
    print(result)

For more information about creating and using custom layers in AWS Lambda, see the AWS Lambda documentation.