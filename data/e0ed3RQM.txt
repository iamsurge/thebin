using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task
{
    class Program
    {
        static void Main(string[] args)
        {
            DGift certificate = new DGift("green", 0.1);
            DGift c2 = new DGift("blue", 0.2);
            DGift c3 = new DGift("purple", 0.6);
            //Console.WriteLine(certificate.ToString());
            ZGift broken_toy = new ZGift("white", 0.7);
            ZGift br = new ZGift("brown", 0.4);
            ZGift toy = new ZGift("black", 0.8);
            NewYearGift nyGift = new NewYearGift();
            nyGift.ListOfDGift(certificate, c2, c3);
            nyGift.ListOfZGift(broken_toy, br, toy);
            //Console.WriteLine(nyGift.ToStr());
            foreach (var item in nyGift.ListofDGift)
            {
                Console.WriteLine(item.ToStr());
            }
            foreach (var item in nyGift.ListofZGift)
            {
                Console.WriteLine(item.ToStr());
            }
            Console.ReadKey();
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task
{
    class DGift: IAboutGift
    {
        private double weight; // kg
        private string color;
        public DGift(string color, double weight)
        {
            this.color = color;
            this.weight = weight;
        }
        public double Weight
        {
            get => this.weight;
            set => this.weight = value;
        }
        public string Color
        {
            get => this.color;
            set => this.color = value;
        }
        public  string ToStr()
        {
            return $"Это добрый подарок! Его вес - {weight}, а его цвет - {color}";
        }
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task
{
    class ZGift: IAboutGift
    {
        private double weight; // kg
        private string color;
        public ZGift(string color, double weight)
        {
            this.color = color;
            this.weight = weight;
        }
        public double Weight
        {
            get => this.weight;
            set => this.weight = value;
        }
        public string Color
        {
            get => this.color;
            set => this.color = value;
        }
        public  string ToStr()
        {
            return $"Это злой подарок! Его вес - {weight}, а его цвет - {color}";
        }
    }
}
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task
{
    interface IAboutGift
    {
        string ToStr();
    }
}

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Task
{
    class NewYearGift: IAboutGift
    {
        private List<DGift> dGifts = new List<DGift>();
        private List<ZGift> zGifts = new List<ZGift>();
        public List<DGift> ListofDGift
        {
            get { return dGifts; }
            set { dGifts = value; }
        }
        public List<ZGift> ListofZGift
        {
            get { return zGifts; }
            set { zGifts = value; }
        }
        public void ListOfDGift(params DGift[] ds)
        {
            if (dGifts == null) { dGifts = new List<DGift>(); }
            dGifts.AddRange(ds);
            //return dGifts;
        }
        public void ListOfZGift(params ZGift[] zs)
        {
            if (zGifts == null) { zGifts = new List<ZGift>(); }
            zGifts.AddRange(zs);
        }
        public  string ToStr()
        {
            /*string concatestr = "";
            foreach (DGift item in dGifts)
            {
                concatestr += item.ToString() + "\n";
            }
            concatestr += "\n";
            foreach (ZGift item in zGifts)
            {
                concatestr += item.ToString() + "\n";
            }
            return concatestr;*/
            return "\nХорошие подарки:\n" + string.Join<DGift>("\n", dGifts) + "\nПлохие подарки:\n" + string.Join<ZGift>("\n", zGifts);
        }
    }
}
