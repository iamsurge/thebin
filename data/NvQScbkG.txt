        class SinksWrapper:
            def __init__(self, sinks: list):
                self._sinks = sinks

            def __bool__(self):
                return False

            def __iter__(self):
                return self._sinks.__iter__()

        class StreamSingleEventWrapper:
            def __init__(self, stream: Stream):
                self._stream = stream

            async def events(self) -> AsyncIterable[EventT]:
                async for event in self._stream.events():
                    yield event
                    return

            def get_active_stream(self) -> StreamT:
                return self

            def __getattr__(self, item):
                return getattr(self._stream, item)