// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long

const ll INF = (ll)1e9 + 7;
const ll MOD = (ll)998244353;
const ll ONE = 1;
const ll max_sz = 1e5 + 1, max_sz2 = 101;
ld EPS = 1e-7;
ld PI = 3.1415926535897932384;
mt19937_64 gen(time(0));

struct SegTree {
    struct Node {
        int min_val, min_cnt, weight, push = 0;
    };
    vector <Node> t;
    SegTree(int n) {
        t.resize(4 * n);
    }
    void unite(const Node& l, const Node& r, Node& m) {
        m.min_val = min(l.min_val, r.min_val);
        m.min_cnt = 0;
        m.weight = l.weight + r.weight;
        if (l.min_val == m.min_val) m.min_cnt += l.min_cnt;
        if (r.min_val == m.min_val) m.min_cnt += r.min_cnt;
    }
    void pushUP(int v, int tl, int tr) {
        if (!t[v].push) {
            return;
        }
        t[v].min_val += t[v].push;
        if (v * 2 + 1 >= (int)t.size()) {
            t[v].push = 0;
            return;
        }
        t[v * 2].push += t[v].push;
        t[v * 2 + 1].push += t[v].push;
        t[v].push = 0;
    }
    void build(vector <int>& w, int v, int tl, int tr) {
        if (tl == tr) {
            t[v].min_val = 0;
            t[v].weight = w[tl];
            t[v].min_cnt = t[v].weight;
        }
        else {
            int tm = (tl + tr) / 2;
            build(w, v * 2, tl, tm);
            build(w, v * 2 + 1, tm + 1, tr);
            unite(t[v * 2], t[v * 2 + 1], t[v]);
        }
    }
    void update(int v, int tl, int tr, int l, int r, int boost) {
        pushUP(v, tl, tr);
        if (tl > r || tr < l) {
            return;
        }
        else {
            if (tl >= l && tr <= r) {
                t[v].push += boost;
                pushUP(v, tl, tr);
            }
            else {
                int tm = (tl + tr) / 2;
                update(v * 2, tl, tm, l, r, boost);
                update(v * 2 + 1, tm + 1, tr, l, r, boost);
                unite(t[v * 2], t[v * 2 + 1], t[v]);
            }
        }
    }
    int querry() {
        if (t[1].min_val == 0) {
            return t[1].weight - t[1].min_cnt;
        }
        else {
            return t[1].weight;
        }
    }
};

struct Query {
    int x, y1, y2;
    int boost;
};

bool cmp(const Query& a, const Query& b) {
    return a.x < b.x;
}

signed main() {
#ifdef _DEBUG
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, i, j, x1, y1, x2, y2, ans = 0, last = 0;
        cin >> n;
        vector <Query> Q;
        vector <int> rzl_y, weight;
        unordered_map <int, int> keys;
        for (i = 0; i < n; i++) {
            cin >> x1 >> y1 >> x2 >> y2;
            if (y1 != y2) {
                Q.push_back({ x1, y1, y2, 1 });
                Q.push_back({ x2, y1, y2, -1 });
                rzl_y.push_back(y1);
                rzl_y.push_back(y2);
            }
        }
        sort(all(Q), cmp);
        sort(all(rzl_y));
        rzl_y.erase(unique(all(rzl_y)), rzl_y.end());
        n = rzl_y.size();
        weight.resize(n);
        if (n > 0) {
            for (i = 0; i < n - 1; i++) {
                keys[rzl_y[i]] = i;
                weight[i] = rzl_y[i + 1] - rzl_y[i];
            }
            weight[i] = 0;
            keys[rzl_y[i]] = i;
            SegTree tree(n);
            tree.build(weight, 1, 0, n - 1);
            for (i = 0; i < Q.size(); i++) {
                ans += (Q[i].x - last) * tree.querry();
                last = Q[i].x;
                tree.update(1, 0, n - 1, keys[Q[i].y1], keys[Q[i].y2] - 1, Q[i].boost);
            }
        }
        cout << ans << endl;
    }
    //Документ по прививке манту
    
}
//Deisgned by skimono