#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>


using namespace std;

typedef long long ll;

const int SIZE = 100001;
const int INF = 1000000001;
int a[SIZE];
ll t[SIZE * 4];
ll c[SIZE * 4];

void push(int v) {
	c[v * 2 + 1] += c[v];
	c[v * 2 + 2] += c[v];
	c[v] = 0;
}

void update(int v, int l, int r, int m) {
	t[v] = t[v * 2 + 1] + t[v * 2 + 2] + c[v * 2 + 1] * (m - l) + c[v * 2 + 2] * (r - m);
}

void build(int v, int l, int r) {
	if (r - l == 1) {
		t[v] = a[l];
		return;
	}

	int m = (r + l) / 2;
	build(v * 2 + 1, l, m);
	build(v * 2 + 2, m, r);
	//t[v] = t[v * 2 + 1] + t[v * 2 + 2];
}

ll ask(int v, int l, int r, int aski) {
	if (l > aski || r <= aski) {
		return 0;
	}

	if (r - l == 1 && l == aski) {
		return t[v] + c[v];
	}
	push(v);
	int m = (l + r) / 2;

	if (aski < m) {
		return ask(v * 2 + 1, l, m, aski);
	}
	else {
		return ask(v * 2 + 2, m, r, aski);
	}

	//int t1 = ask(v * 2 + 1, l, r, aski);
	//int t2 = ask(v * 2 + 2, l, r, aski);
	//update(v, l, r, m);

	//return t1 + t2;
}

void change(int v, int l, int r, int askl, int askr, ll val) {
	if (l >= askr || r <= askl) {
		return;
	}

	if (askl <= l && askr >= r) {
		c[v] += val;
		return;
	}
	push(v);
	int m = (l + r) / 2;
	change(v * 2 + 1, l, m, askl, askr, val);
	change(v * 2 + 2, m, r, askl, askr, val);
	//update(v, l, r, m);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	
	build(0, 0, n);

	int m;
	cin >> m;

	for (int i = 0; i < m; i++) {
		char ct;
		cin >> ct;

		if (ct == 'g') {
			int aski;
			cin >> aski;
			cout << ask(0, 0, n, --aski) << '\n';
		}
		else {
			int l, r, val;
			cin >> l >> r >> val;
			change(0, 0, n, --l, r, val);
		}
	}
}