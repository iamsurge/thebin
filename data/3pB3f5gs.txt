# -*- coding: utf-8 -*-
"""
Created on Sat Jan  7 22:21:41 2023

@author: Sidha
"""

#import libraries
import numpy as np
from scipy.optimize import curve_fit 
import matplotlib.pyplot as plt
import pandas as pd

#import data
powders = []
nacl = pd.read_excel(r"../XrayDiff/powders/kalpha_nacl.xlsx") #nacl powder 
cscl = pd.read_excel(r"../XrayDiff/powders/kalpha_unknown_full.xlsx") #cscl powder
x_nacl = nacl['Angle']
y_nacl = nacl['Counts']
x_cscl = cscl['Angle']
y_cscl = cscl['Counts']
sin2_nacl = nacl['sin^2'].dropna()
N_nacl = nacl['N'].dropna()
sin2_cscl = cscl['sin^2'].dropna()
N_cscl = cscl['N'].dropna()

nacl_1 = nacl.query('13 <= Angle <= 17') #peak 1 data range
nacl_2 = nacl.query('21 <= Angle <= 25')
nacl_3 = nacl.query('27 <= Angle <= 29')
nacl_4 = nacl.query('32 <= Angle <= 34')
nacl_5 = nacl.query('37 <= Angle <= 39')
nacl_6 = nacl.query('41 <= Angle <= 43')
nacl_7 = nacl.query('13.4 <= Angle <= 14.3')

cscl_1 = cscl.query('9.8 <= Angle <= 11.5')
cscl_2 = cscl.query('14 <= Angle <= 18')
cscl_3 = cscl.query('18.7 <= Angle <= 19.3')
cscl_4 = cscl.query('20 <= Angle <= 23.5')
cscl_5 = cscl.query('24 <= Angle <= 25.2')
cscl_6 = cscl.query('26 <= Angle <= 28')
cscl_7 = cscl.query('33.5 <= Angle <= 34.7')
cscl_8 = cscl.query('35.5 <= Angle <= 37.5')

#function definitions
def linear(x, m, c):
    y = m*x + c
    return y

def gauss(x, A, mu, sigma):
    return A * np.exp(-(x - mu) ** 2 / (2 * sigma ** 2))



popt_nacl_1, pcov_nacl_1 = curve_fit(gauss, nacl_1['Angle'], nacl_1['Counts'], p0 = [80, 15, 1])
popt_nacl_2, pcov_nacl_2 = curve_fit(gauss, nacl_2['Angle'], nacl_2['Counts'], p0 = [76, 21, 1])
popt_nacl_3, pcov_nacl_3 = curve_fit(gauss, nacl_3['Angle'], nacl_3['Counts'], p0 = [18, 28, 1])
popt_nacl_4, pcov_nacl_4 = curve_fit(gauss, nacl_4['Angle'], nacl_4['Counts'], p0 = [21, 33, 1])
popt_nacl_5, pcov_nacl_5 = curve_fit(gauss, nacl_5['Angle'], nacl_5['Counts'], p0 = [17.5, 38, 1])
popt_nacl_6, pcov_nacl_6 = curve_fit(gauss, nacl_6['Angle'], nacl_6['Counts'], p0 = [15, 42, 1])
popt_nacl_7, pcov_nacl_7 = curve_fit(gauss, nacl_7['Angle'], nacl_7['Counts'], p0 = [2, 13.9, 0.5])

popt_cscl_1, pcov_cscl_1 = curve_fit(gauss, cscl_1['Angle'], cscl_1['Counts'], p0 = [38, 10.9, 0.2])
popt_cscl_2, pcov_cscl_2 = curve_fit(gauss, cscl_2['Angle'], cscl_2['Counts'], p0 = [55, 15.4, 1])
popt_cscl_3, pcov_cscl_3 = curve_fit(gauss, cscl_3['Angle'], cscl_3['Counts'], p0 = [2, 19.1, 1])
popt_cscl_4, pcov_cscl_4 = curve_fit(gauss, cscl_4['Angle'], cscl_4['Counts'], p0 = [11, 22.2, 1])
popt_cscl_5, pcov_cscl_5 = curve_fit(gauss, cscl_5['Angle'], cscl_5['Counts'], p0 = [3, 24.6, 1])
popt_cscl_6, pcov_cscl_6 = curve_fit(gauss, cscl_6['Angle'], cscl_6['Counts'], p0 = [20, 27.2, 1])
popt_cscl_7, pcov_cscl_7 = curve_fit(gauss, cscl_7['Angle'], cscl_7['Counts'], p0 = [2, 34, 1])
popt_cscl_8, pcov_cscl_8 = curve_fit(gauss, cscl_8['Angle'], cscl_8['Counts'], p0 = [10, 36.3, 1])

cu_lambda = 1.54e-10
theta_nacl = nacl['theta'].dropna()
theta_cscl = cscl['theta'].dropna()

#gathering uncertainties
nacl_uc = abs(np.array([popt_nacl_1[2], popt_nacl_2[2], popt_nacl_3[2], popt_nacl_4[2], popt_nacl_5[2], popt_nacl_6[2], popt_nacl_7[2]])) #nacl uncertainties
cscl_uc = abs(np.array([popt_cscl_1[2], popt_cscl_2[2], popt_cscl_3[2], popt_cscl_4[2], popt_cscl_5[2], popt_cscl_6[2], popt_cscl_7[2], popt_cscl_8[2]]))

nacl_x_uc = abs(np.multiply(np.array(2*np.sin(theta_nacl)*np.cos(theta_nacl)*(theta_nacl**-1)), nacl_uc))
cscl_x_uc = abs(np.multiply(np.array(2*np.sin(theta_cscl)*np.cos(theta_cscl)*(theta_cscl**-1)), cscl_uc))
nacl_y_uc = np.multiply(N_nacl, ((np.divide(nacl_x_uc, theta_nacl) + np.divide(np.repeat(0.218, len(theta_nacl)), np.repeat(N_nacl[2], len(theta_nacl)))**2 )))
cscl_y_uc = np.multiply(N_cscl, ((np.divide(cscl_x_uc, theta_cscl)+ np.divide(np.repeat(0.49, len(theta_cscl)), np.repeat(N_cscl[2], len(theta_cscl)))**2 )))

#plotting
plt.plot(x_nacl, y_nacl, color = 'black') #plots NaCl powder angle spectrum
plt.plot(nacl_1['Angle'], gauss(nacl_1['Angle'], popt_nacl_1[0], popt_nacl_1[1], popt_nacl_1[2]), linestyle = 'dashed', color = 'red')
plt.plot(nacl_2['Angle'], gauss(nacl_2['Angle'], popt_nacl_2[0], popt_nacl_2[1], popt_nacl_2[2]), linestyle = 'dashed', color = 'red')
plt.plot(nacl_3['Angle'], gauss(nacl_3['Angle'], popt_nacl_3[0], popt_nacl_3[1], popt_nacl_3[2]), linestyle = 'dashed', color = 'red')
plt.plot(nacl_4['Angle'], gauss(nacl_4['Angle'], popt_nacl_4[0], popt_nacl_4[1], popt_nacl_4[2]), linestyle = 'dashed', color = 'red')
plt.plot(nacl_5['Angle'], gauss(nacl_5['Angle'], popt_nacl_5[0], popt_nacl_5[1], popt_nacl_5[2]), linestyle = 'dashed', color = 'red')
plt.plot(nacl_6['Angle'], gauss(nacl_6['Angle'], popt_nacl_6[0], popt_nacl_6[1], popt_nacl_6[2]), linestyle = 'dashed', color = 'red', label = 'Gaussian approximation')
plt.plot(nacl_7['Angle'], gauss(nacl_7['Angle'], popt_nacl_7[0], popt_nacl_7[1], popt_nacl_7[2]), linestyle = 'dashed', color = 'red')
plt.xlabel('Angle of Rotation (°)')
plt.ylabel('Counts')
plt.legend()
plt.title('NaCl Powder Sample')
plt.show()

plt.plot(sin2_nacl, N_nacl, 'D', color = 'navy') #nacl braggs law analysis
popt_nacl, pcov_nacl = curve_fit(linear, sin2_nacl, N_nacl)
a0_nacl = np.sqrt((popt_nacl[0]*(cu_lambda**2))/4)
label_1 = '$a_{0} = $' + str(round(a0_nacl*1e12, 2)) + ' pm'
plt.plot(sin2_nacl, popt_nacl[0]*sin2_nacl + popt_nacl[1], color = 'black', label = label_1)
plt.errorbar(sin2_nacl, N_nacl, yerr=nacl_y_uc, xerr = nacl_x_uc, ls = 'none', capsize = 5, color = 'black')
plt.xlabel(r'$\sin^{2}\theta$')
plt.ylabel(r'N')
plt.title("NaCl Bragg's Law analysis")
plt.legend()
plt.show()
print('The uncertainty in the gradient for NaCl is', pcov_nacl[0][0]**0.5)

plt.plot(x_cscl, y_cscl, color = 'black') #plots CsCl powder angle spectrum
plt.plot(cscl_1['Angle'], gauss(cscl_1['Angle'], popt_cscl_1[0], popt_cscl_1[1], popt_cscl_1[2])+10, linestyle = 'dashed', color = 'red')
plt.plot(cscl_2['Angle'], gauss(cscl_2['Angle'], popt_cscl_2[0], popt_cscl_2[1], popt_cscl_2[2])+5, linestyle = 'dashed', color = 'red')
plt.plot(cscl_3['Angle'], gauss(cscl_3['Angle'], popt_cscl_3[0], popt_cscl_3[1], popt_cscl_3[2]), linestyle = 'dashed', color = 'red')
plt.plot(cscl_4['Angle'], gauss(cscl_4['Angle'], popt_cscl_4[0], popt_cscl_4[1], popt_cscl_4[2])+2, linestyle = 'dashed', color = 'red')
plt.plot(cscl_5['Angle'], gauss(cscl_5['Angle'], popt_cscl_5[0], popt_cscl_5[1], popt_cscl_5[2])+1, linestyle = 'dashed', color = 'red')
plt.plot(cscl_6['Angle'], gauss(cscl_6['Angle'], popt_cscl_6[0], popt_cscl_6[1], popt_cscl_6[2])+1, linestyle = 'dashed', color = 'red', label = 'Gaussian approximation')
plt.plot(cscl_7['Angle'], gauss(cscl_7['Angle'], popt_cscl_7[0], popt_cscl_7[1], popt_cscl_7[2]), linestyle = 'dashed', color = 'red')
plt.plot(cscl_8['Angle'], gauss(cscl_8['Angle'], popt_cscl_8[0], popt_cscl_8[1], popt_cscl_8[2])+2, linestyle = 'dashed', color = 'red')
plt.xlabel('Angle (°)')
plt.ylabel('Counts')
plt.legend()
plt.title('CsCl Powder Sample')
plt.show()

plt.plot(sin2_cscl, N_cscl, 'D', color = 'navy') #CsCl braggs law analysis
popt_cscl, pcov_cscl = curve_fit(linear, sin2_cscl, N_cscl)
a0_cscl = np.sqrt((popt_cscl[0]*(cu_lambda**2))/4)
label_2 = '$a_{0} = $' + str(round(a0_cscl*1e12, 2)) + ' pm'
plt.plot(sin2_cscl, popt_cscl[0]*sin2_cscl + popt_cscl[1], label = label_2, color = 'black')
plt.errorbar(sin2_cscl, N_cscl, yerr=cscl_y_uc, xerr = cscl_x_uc, ls = 'none', capsize = 5, color = 'black')
plt.xlabel(r'$\sin^{2}\theta$')
plt.ylabel(r'N')
plt.title("CsCl Bragg's Law analysis")
plt.legend()
plt.show()
print('The uncertainty in the gradient for CsCl is', pcov_cscl[0][0]**0.5)
