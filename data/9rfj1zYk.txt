```py
class Checkings:
    def __init__(self):
        self.balance = 0
        print("Checkings")

    def account(self):
        Transaction = {"Deposit": self.deposit, "Withdraw": self.withdraw}
        Transaction_Type = input("Do You Wish To Deposit Or Withdraw?: ")
        try:
            CheckingAccount = Transaction[Transaction_Type]()
        except KeyError:
            print("Please Enter Deposit Or Withdraw.")

    def deposit(self):
        amount = float(input("Enter amount to be Deposited To Checkings: "))
        self.balance += amount
        print("\n Amount Deposited:", amount)

    def withdraw(self):
        amount = float(input("Enter amount to be Withdrawn From Checkings: "))
        if self.balance >= amount:
            self.balance -= amount
            print("\n You Withdrew From Checkings:", amount)
        else:
            print("\n Insufficient balance  ")

    def display(self):
        print("\n Net Available Balance=", self.balance)


class Savings:
    def __init__(self, ):
        self.balance = 0
        print("Savings")

    def account(self):
        Transaction = {"Deposit": self.deposit, "Withdraw": self.withdraw}
        Transaction_Type = input("Do You Wish To Deposit Or Withdraw?: ")
        try:
            SavingsAccount = Transaction[Transaction_Type]()
        except KeyError:
            print("Please Enter Deposit Or Withdraw.")

    def deposit(self):
        amount = float(input("Enter amount to be Deposited To Savings: "))
        self.balance += amount
        print("\n Amount Deposited:", amount)

    def withdraw(self):
        amount = float(input("Enter amount to be Withdrawn From Savings: "))
        if self.balance >= amount:
            self.balance -= amount
            print("\n You Withdrew From Savings:", amount)
        else:
            print("\n Insufficient balance  ")

    def display(self):
        print("\n Net Available Balance=", self.balance)


Accounts = {"Checkings": Checkings, "Savings": Savings}
# Getting What Account They Wish To Check On Or Add Or Withdraw
Account_Type = input("What Account Do You Wish To Deposit/Withdraw To Checkings Or Savings: ")
try:
    Account = Accounts[Account_Type]()
    Account.account()
except KeyError:
    print("That Is Not A Account That Is Available.")

# creating an object of class
#self = Checkings()
#self.account()

# Calling functions with that class object
#self = Savings()
#self.account()
```
This seems to work