#include <iostream>
#include <string>

using namespace std;

// Define a base class with a virtual function
class Shape {
 public:
  Shape(string name) : name_(name) {}
  virtual void Draw() {
    cout << "Drawing a shape called " << name_ << endl;
  }
  virtual ~Shape() {}  // Virtual destructor

 private:
  string name_;
};

// Define a derived class
class Circle : public Shape {
 public:
  Circle(string name, int radius) : Shape(name), radius_(radius) {}
  void Draw() override {  // Override virtual function from base class
    cout << "Drawing a circle with radius " << radius_ << endl;
  }

 private:
  int radius_;
};

// Define another derived class
class Rectangle : public Shape {
 public:
  Rectangle(string name, int width, int height)
      : Shape(name), width_(width), height_(height) {}
  void Draw() override {  // Override virtual function from base class
    cout << "Drawing a rectangle with dimensions " << width_ << "x" << height_ << endl;
  }

 private:
  int width_;
  int height_;
};

// Define a class with a private member that can only be accessed by friends
class Secret {
 private:
  int secret_;

  // Declare a friend function
  friend void PrintSecret(const Secret &s);
};

// Friend function implementation
void PrintSecret(const Secret &s) {
  cout << "The secret is: " << s.secret_ << endl;
}

int main() {
  // Create an object of the base class
  Shape s("Base shape");
  s.Draw();

  // Create an object of the derived class
  Circle c("Circle", 5);
  c.Draw();

  // Create another object of the derived class
  Rectangle r("Rectangle", 10, 20);
  r.Draw();

  // Polymorphism
  Shape *shapes[3] = {&s, &c, &r};
  for (auto shape : shapes) {
    shape->Draw();
  }

  // Friend function
  Secret sec;
  PrintSecret(sec);

  return 0;
}