const fs = require('fs')

const input = fs.readFileSync('test.txt').toString().trim()
// const input = fs.readFileSync('input.txt').toString().trim()

const range = (a) => [...Array(a).keys()]
const abs = Math.abs
const follow = (head, tail) => abs(head[0] - tail[0]) >= 2 || abs(head[1] - tail[1]) >= 2 ? head : null
const move = (rope, [hx, hy]) => {
  const head = rope.head.at(-1)
  const tail = rope.tail.at(-1)
  const newHead = [head[0] + hx, head[1] + hy]

  return {
    head: [...rope.head, newHead],
    tail: follow(newHead, tail) ? [...rope.tail, [...head]] : rope.tail,
  }
}

const moves = {
  U: (current, count) => range(count).reduce((acc) => move(acc, [1, 0]), current),
  D: (current, count) => range(count).reduce((acc) => move(acc, [-1, 0]), current),
  L: (current, count) => range(count).reduce((acc) => move(acc, [0, -1]), current),
  R: (current, count) => range(count).reduce((acc) => move(acc, [0, 1]), current),
}

const pairs = input.split('\n').map((pair) => pair.split(' '))
  .reduce((acc, [direction, count]) => moves[direction](acc, +count), {
    head: [[0, 0]],
    tail: [[0, 0]],
  })

console.log(new Set(pairs.tail.map((pairs) => pairs.join('_'))).size)