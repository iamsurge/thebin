/**
 * This library is open source software licensed under terms of the MIT License.
 *
 * Copyright (c) 2023 Petr ÄŒervinka - FortSoft <cervinka@fortsoft.eu>
 * Copyright (c) 2011 Mike Zhang - MSDN Community Support
 * Copyright (c) 2011 Cody Gray
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 **
 * Version 1.0.0.0
 */

using System;
using System.Windows.Forms;

namespace FortSoft.Controls {

    /// <summary>
    /// Implements custom TabControl without tabs and border. Note that this will
    /// not work properly for tab headers positioned on the sides or the bottom.
    /// But not only does that just look weird, you won't be able to see the tabs
    /// at run-time anyway. Just put them on the top where they belong.
    /// </summary>
    public class TabControlEx : TabControl {

        /// <summary>
        /// Constant value found in the Windows.h header file.
        /// </summary>
        private const int TCM_ADJUSTRECT = 0x1328;

        /// <summary>
        /// A callback function that processes messages sent to a window.
        /// </summary>
        protected override void WndProc(ref Message message) {
            if (message.Msg == TCM_ADJUSTRECT && !DesignMode) {
                message.Result = (IntPtr)1;
                return;
            }
            base.WndProc(ref message);
        }
    }
}
