# Character.py

import bge
from collections import OrderedDict

import InputsControl


class Character(bge.types.KX_PythonComponent):
    args = OrderedDict([
        ("Walk Speed", 0.05),
        ("Run Speed", 0.1),
        ("Jump Heigth", 0.2)
    ])

    def init__(self):
        self.runSpeed = None
        self.walkSpeed = None
        self.character = None

    def start(self, args):
        self.character = bge.constraints.getCharacter(self.object)
        self.camera = self.object.children.get("PlayerCamera")

        self.walkSpeed = args["Walk Speed"]
        self.runSpeed = args["Run Speed"]

    def movement(self):
        """Faz o personagem andar """

        speed = self.walkSpeed
        if InputsControl.isRunning():
            speed = self.runSpeed

        movDirection = InputsControl.movementDirection()

        vec = self.object.worldOrientation * movDirection

        self.character.walkDirection = vec * speed

    def cameraLook(self):
        """ Faz a camera se mover com o mouse e joystick """

        vec = InputsControl.cameraDirection()
        self.object.applyRotation([0, 0, vec[0]])
        self.camera.applyRotation([vec[1], 0, 0], True)

    def update(self):
        """ Função Principal """

        self.movement()
        self.cameraLook()
        
        
 ####### InputsControl
import bge
from mathutils import Vector

keyboard = bge.logic.keyboard.inputs
mouse = bge.logic.mouse.inputs

joysticks  = bge.logic.joysticks



def movementDirection():
    x = 0
    y = 0

    if keyboard[bge.events.WKEY].active:
        y = 1

    elif keyboard[bge.events.SKEY].active:
        y = -1

    if keyboard[bge.events.AKEY].active:
        x = -1

    elif keyboard[bge.events.DKEY].active:
        x = 1

    vec = Vector([x, y, 0])

    print(len(joysticks)) # printa o número de joysticks conectados

    if joysticks[0] != None and vec.length == 0:
        vec.x = joysticks[0].axisValues[0]
        vec.y = joysticks[0].axisValues[1]
    
    vec.normalize()

    return vec

def cameraDirection():
    x = 0
    y = 0

    #vec = Vector([x, y])

    joystickSens = 0.01
    mouseSens = 0.01

    mousePos = Vector(bge.logic.mouse.position) * 2
    mousePos += Vector([-1, -1])
    mousePos.y *= -1

    print(mousePos)

    vec = mousePos * mouseSens

    if joysticks[0] != None and vec.length == 0:
        vec.x = joysticks[0].axisValues[2] * joystickSens
        vec.y = joysticks[0].axisValues[3] * joystickSens


def isRunning():
    return keyboard[bge.events.LEFTSHIFTKEY].active

