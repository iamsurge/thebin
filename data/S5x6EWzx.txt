const express = require('express');
const app = express();
const bodyParser = require('body-parser');

// parse application/x-www-form-urlencoded
app.use(bodyParser.urlencoded({ extended: false }))

// parse application/json
app.use(bodyParser.json())

let items = [
  { id: 1, name: 'Item 1' },
  { id: 2, name: 'Item 2' },
  { id: 3, name: 'Item 3' },
];

// Controller for the /api/items route
const itemsController = {
  // GET request to retrieve all items
  index(req, res) {
    res.send(items);
  },

  // GET request to retrieve a single item by ID
  show(req, res) {
    let item = items.find(i => i.id === parseInt(req.params.id));
    if (!item) {
      res.status(404).send('The item with the given ID was not found');
    } else {
      res.send(item);
    }
  },

  // POST request to create a new item
  create(req, res) {
    let item = {
      id: items.length + 1,
      name: req.body.name,
    };
    items.push(item);
    res.send(item);
  },

  // PUT request to update an existing item
  update(req, res) {
    let item = items.find(i => i.id === parseInt(req.params.id));
    if (!item) {
      res.status(404).send('The item with the given ID was not found');
    } else {
      item.name = req.body.name;
      res.send(item);
    }
  },

  // DELETE request to delete an item
  delete(req, res) {
    let item = items.find(i => i.id === parseInt(req.params.id));
    if (!item) {
      res.status(404).send('The item with the given ID was not found');
    } else {
      let index = items.indexOf(item);
      items.splice(index, 1);
      res.send(item);
    }
  },
};

// Map routes to controller functions
app.get('/api/items', itemsController.index);
app.get('/api/items/:id', itemsController.show);
app.post('/api/items', itemsController.create);
app.put('/api/items/:id', itemsController.update);
app.delete('/api/items/:id', itemsController.delete);

const port = process.env.PORT || 3000;
app.listen(port, () => console.log(`Listening on port ${port}...`));
