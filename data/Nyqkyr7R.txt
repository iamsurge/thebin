#include <iostream>

using namespace std;

template<class T>
class Tablica
{
    unsigned wielkosc;
    T* tablica;
public:
    Tablica();
    explicit Tablica(unsigned w);
    ~Tablica();
    void dodaj(T nowy);
    void zmien_rozmiar(unsigned nowy);
    void wypisz() const;
    void usun_dane();
    unsigned rozmiar() const;
    T& operator[](unsigned nr);
};

template<class T>
Tablica<T>::Tablica() : wielkosc(0), tablica(nullptr) {}

template<class T>
Tablica<T>::Tablica(unsigned w) : wielkosc(w), tablica(new T[w])
{
    for(unsigned i = 0; i < w; ++i)
        tablica[i] = 0;
}

template<class T>
Tablica<T>::~Tablica()
{
    if(tablica != nullptr)
        delete[] tablica;
    cout << "Tablica poprawnie usunieta.\n";
}

template<class T>
void Tablica<T>::dodaj(T nowy)
{
    // jeżeli tablica dotychczas jest pusta, alokujemy do niej pamięć dla tablicy jednoelementowej:
    if(tablica == nullptr)
    {
        tablica = new T[1];
        tablica[0] = nowy;
        wielkosc = 1;
        return;
    }
    // w przeciwnym wypadku:
    // tworzymy tablicę tymczasową o rozmiarze dotychczasowej tablicy
    T* temp = new T[wielkosc];
    // kopiujemy zawartość tablicy dotychczasowej do nowej, tymczasowej
    for(unsigned i = 0; i < wielkosc; ++i)
        temp[i] = tablica[i];
    // zwalniamy pamięć z dotychczasowej tablicy
    delete[] tablica;
    // na miejscu tablicy tworzymy nową, o rozmiarze o 1 większym
    tablica = new int[wielkosc + 1];
    // do nowej tablicy kopiujemy zawartość tymczasowej
    for(unsigned i = 0; i < wielkosc; ++i)
        tablica[i] = temp[i];
    // zwalniamy pamięć z tablicy tymczasowej
    delete[] temp;
    // na ostatni element tablicy wpisujemy nową wartość
    tablica[wielkosc] = nowy;
    // zwiększamy wielkość o 1
    ++wielkosc;
}

template <class T>
void Tablica<T>::zmien_rozmiar(unsigned nowy)
{
    if(wielkosc==nowy)
        return;

    if(wielkosc == 0)
    {
        wielkosc = nowy;
        tablica = new T[wielkosc];

        for(unsigned i = 0; i < wielkosc; ++i)
            tablica[i] = 0;
        return;
    }

    if(wielkosc<nowy)
    {
        T* temp= new T[wielkosc];
        for(unsigned i=0; i<wielkosc; i++)
            temp[i]=tablica[i];

        delete[] tablica;

        tablica = new T[nowy];
        for (unsigned i=0; i<wielkosc; ++i)
            tablica[i] = temp[i];
        delete [] temp;

        for(unsigned i=wielkosc; i<nowy; i++)
            tablica[i] = 0;

        wielkosc=nowy;
        return;
    }

    if(nowy==0)
    {
        delete[] tablica;
        wielkosc=0;
        return;
    }

    wielkosc=nowy;
    T* temp = new T[wielkosc];
    for (unsigned i=0; i<wielkosc; i++)
        temp[i]= tablica[i];

    delete[] tablica;
    tablica = new T[wielkosc];
    for (unsigned i=0; i<wielkosc; ++i)
        tablica[i] = temp[i];
    delete [] temp;



}

template <class T>
void Tablica<T>::wypisz() const
{
    if(wielkosc > 0)
        for(unsigned i = 0; i < wielkosc; ++i)
            cout << tablica[i] << '\t';
    cout << endl;
}

template <class T>
void Tablica<T>::usun_dane()
{
    zmien_rozmiar(0);
}

template <class T>
unsigned Tablica<T>::rozmiar() const
{
    return wielkosc;
}

template <class T>
T& Tablica<T>::operator[](unsigned nr)
{
    return tablica[nr];
}

int main()
{
    Tablica<double> tablica(10);
    tablica[3] = 5.5;
    tablica.wypisz();

    return 0;
}