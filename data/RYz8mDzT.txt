#include <bits/stdc++.h>
// tiom4eg's precompiler options
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
// IO settings
#define fastIO ios_base::sync_with_stdio(false); cin.tie(0)
// Quick types
#define ll long long
#define ld long double
#define ull unsigned long long
#define pii pair <int, int>
#define vi vector <int>
#define mi vector <vector <int>>
// Quick functions
#define endl "\n"
#define F first
#define S second
#define all(a) a.begin(), a.end()
#define sz(a) (int)(a.size())
#define pb push_back
#define mp make_pair
// Quick fors
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define FORS(i, a, b, c) for (int i = a; i < b; i += c)
#define RFOR(i, a, b) for (int i = a; i >= b; --i)
#define EACH(e, a) for (auto& e : a)
// Pragmas
#ifndef TIOM4EG
#pragma GCC optimize("O3") // let the chaos begin!
#pragma GCC target("avx,avx2,bmi,bmi2,popcnt,lzcnt,tune=native")
#pragma GCC comment(linker, "/stack:200000000")
#endif
// PBDS
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update>
#define ook order_of_key
#define fbo find_by_order
using namespace __gnu_pbds;
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
using namespace std;
mt19937 rng(chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());
#define int long long
const int INF = 1e9 + 7, MD = 998244353, MAX = 505, R = 1 << 19, MOD = 1e9 + 7, MOD2 = 1e9 + 9, MOD12 = MOD * MOD, MOD22 = MOD2 * MOD2, LG = 20, B1 = 300007, B2 = 107, S = 10008;
const ll INFLL = 1e18 + 7;

int sum[LG], sum2[LG];

struct segtree {
    struct node { int s, si, sii, d; };
    vector <node> t;
    void merge(int v) {
        int l = R >> __lg(2 * v);
        t[v].s = (t[2 * v].s + t[2 * v + 1].s) % MOD;
        t[v].si = (t[2 * v].si + t[2 * v + 1].si + l * t[2 * v + 1].s) % MOD;
        t[v].sii = (t[2 * v].sii + t[2 * v + 1].sii + 2 * l * t[2 * v + 1].si + ((l * l) % MOD) * t[2 * v + 1].s);
    }
    void tag(int v, int x, int l) { t[v].s = x * l % MOD, t[v].si = x * sum[__lg(l)] % MOD, t[v].sii = x * sum2[__lg(l)] % MOD, t[v].d = x; }
    void push(int v, int l) {
        if (l == 1 || !t[v].d) return;
        tag(2 * v, t[v].d, l / 2), tag(2 * v + 1, t[v].d, l / 2);
        t[v].d = 0;
    }
    void build(vi& a) {
        t.resize(2 * R);
        FOR(i, 0, sz(a)) tag(R + i, a[i], 1);
        RFOR(i, R - 1, 1) merge(i);
    }
    void upd(int ql, int qr, int x, int v = 1, int nl = 0, int nr = R) {
        push(v, nr - nl);
        if (qr <= nl || nr <= ql) return;
        if (ql <= nl && nr <= qr) {
            tag(v, x, nr - nl), push(v, nr - nl);
            return;
        }
        int nm = (nl + nr) / 2;
        upd(ql, qr, x, 2 * v, nl, nm), upd(ql, qr, x, 2 * v + 1, nm, nr);
        merge(v);
    }
    int get(int ql, int qr, int v = 1, int nl = 0, int nr = R) {
        push(v, nr - nl);
        if (qr <= nl || nr <= ql) return 0;
        if (ql <= nl && nr <= qr) return (t[v].sii + 2 * (nl - ql) * t[v].si + ((nl - ql) * (nl - ql) % MOD) * t[v].s) % MOD;
        int nm = (nl + nr) / 2;
        return (get(ql, qr, 2 * v, nl, nm) + get(ql, qr, 2 * v + 1, nm, nr)) % MOD;
    }
} t;

signed main() {
    fastIO;
    int n, q; cin >> n >> q;
    vi a(n); EACH(e, a) cin >> e;
    t.build(a);
    while (q--) {
        int o, l, r; cin >> o >> l >> r, --l;
        if (o == 1) {
            int x; cin >> x;
            t.upd(l, r, x);
        }
        else cout << t.get(l, r) << endl;
    }
}
