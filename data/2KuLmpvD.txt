vector <int> wt[maxN * 4];
int a[maxN];
void build(int id = 1, int i = 1, int j = n + 1, int l = 0, int r = n){
    if (l == r){
        return;
    }
    wt[id].resize(j - i + 1);
    wt[id][0] = 0;
    int mid = (l + r) >> 1;
    for (int _ = i; _ < j; ++_){
        wt[id][_ - i + 1] = wt[id][_ - i] + (a[_] <= mid);
    }
    int p = stable_partition(a + i, a + j,[&](const int &w){
        return w <= mid;
    }) - a;
    build(id << 1, i, p, l, mid);
    build(id << 1 | 1, p, j, mid + 1, r);
}

int pos(int id, int i, int j, int k, int l = 0, int r = n){
    if (k < 0) return 0;
    if (l == r){
        return j - i;
    }
    int mid = (l + r) >> 1;
    if (k <= mid) return pos(id << 1, wt[id][i], wt[id][j], k, l, mid);
    return wt[id][j] - wt[id][i] + pos(id << 1 | 1, i - wt[id][i], j - wt[id][j], k, mid + 1, r);
}