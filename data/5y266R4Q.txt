#include <WiFi.h>
#include <WebServer.h>
#include <SparkFun_TB6612.h> //Library used to control TB6612FNG - See Reference 1
#include <FastLED.h> //Needed to control LEDs - In this case WS2812B

#define AIN1 19 //ESP32 GPIO 19 Connected to TB6612FNG Pin AIN1
#define BIN1 17 //ESP32 GPIO 17 Connected to TB6612FNG Pin BIN1
#define AIN2 21 //ESP32 GPIO 21 Connected to TB6612FNG Pin AIN2
#define BIN2 16 //ESP32 GPIO 16 Connected to TB6612FNG Pin BIN2
#define PWMA 22 //ESP32 GPIO 22 Connected to TB6612FNG Pin PWMA
#define PWMB 4 //ESP32 GPIO 4 Connected to TB6612FNG Pin PWMB
#define STBY 18 //ESP32 GPIO 18 Connected to TB6612FNG Pin STBY
#define horn_Buzz 13 //ESP32 GPIO 13 Connected to Horn Buzzer Red Wire

FASTLED_USING_NAMESPACE //From DemoReel100Rev4.ino Used for LED Control
#define LED_TYPE    WS2812
#define COLOR_ORDER GRB //From DemoReel100Rev4.ino Used for LED Control
#define NUM_LEDS    4 //From DemoReel100Rev4.ino Used for LED Control
CRGB leds[NUM_LEDS]; //Defins an leds array with NUM_LEDS number of elements i.e. LED 1 is accessed through leds[0], LED2 is accessed through leds[1] etc.
#define BRIGHTNESS 96 //From DemoReel100Rev4.ino Used for LED Strip Control
#define FRAMES_PER_SECOND 120 //From DemoReel100Rev4.ino Used for LED Strip Control
#define DATA_PIN 23 //LED strip data pin connected to ESP32 GPIO 23

//#ifdef ESP_H //See Reference 7
#define PWM1_Ch    0
#define PWM1_Res   8
void tone ( int tonePin, int toneFreq ) {
  Serial.print( "my tone called for pin " );
  Serial.print( tonePin );
  Serial.print( " with frequency " );
  Serial.println( toneFreq );
  ledcSetup( PWM1_Ch, toneFreq, PWM1_Res );
  ledcWrite( PWM1_Ch, 127 ); // 50% duty cycle
}
void noTone( int tonePin ) {
  Serial.print( "my noTone called for pin " );
  Serial.println( tonePin );
  ledcWrite( PWM1_Ch, 0 ); // 0% duty cycle
}

char command;
int speedCar = 100; // Variable to store the PWM speed of the car 50 - 255.
int speed_Coeff = 4;

//These constants are used to allow you to make your motor configuration line up with function names like forward.  Value can be 1 or -1
const int offsetA = 1; //From Reference 4
const int offsetB = 1; //From Reference 4

//Initializing motors.  The library will allow you to initialize as many motors as you have memory for.  If you are using functions like forward
// that take 2 motors as arguements you can either write new functions or call the function more than once.
Motor motor1 = Motor(AIN1, AIN2, PWMA, offsetA, STBY); //From Reference 4
Motor motor2 = Motor(BIN1, BIN2, PWMB, offsetB, STBY); //From Reference 4

int lightFState=0, lightBState=0; //Stores the state of the front and back lights

/* Put your SSID & Password */
const char* ssid = "JonDeWittsESP32WiFiCar";  // Enter SSID here
const char* password = "12345678";  //Enter Password here

/* Put IP Address details */
IPAddress local_ip(192,168,1,1);
IPAddress gateway(192,168,1,1);
IPAddress subnet(255,255,255,0);

WebServer server(80);

bool FORWARDstatus = LOW;

bool LEFTstatus = LOW;

bool STOPstatus = LOW;

bool RIGHTstatus = LOW;

bool REVERSEstatus = LOW;

bool HORNstatus = LOW;

bool HEADLIGHTSstatus = LOW;

bool TAILLIGHTSstatus = LOW;

void setup() {
  Serial.begin(115200);

  speedCar = 235; //Hard codes motors to go at maximum speed that won't cause a brownout

  pinMode(AIN1,OUTPUT); //Sets specified pin as an output
  pinMode(BIN1,OUTPUT); //Sets specified pin as an output
  pinMode(AIN2,OUTPUT); //Sets specified pin as an output
  pinMode(BIN2,OUTPUT); //Sets specified pin as an output
  pinMode(PWMA,OUTPUT); //Sets specified pin as an output
  pinMode(PWMB,OUTPUT); //Sets specified pin as an output
  pinMode(STBY,OUTPUT); //Sets specified pin as an output

  FastLED.addLeds<LED_TYPE,DATA_PIN,COLOR_ORDER>(leds, NUM_LEDS).setCorrection(TypicalLEDStrip); //For LED Strip - See DemoReel100
  FastLED.setBrightness(BRIGHTNESS); //Set master brightness control for LED strip

  //Reference 5 Code for Horn
  #ifdef ESP_H
  ledcAttachPin( horn_Buzz, PWM1_Ch );
  #else
  // LilyPad!
  pinMode(horn_Buzz, OUTPUT);
  #endif

  WiFi.softAP(ssid, password);
  WiFi.softAPConfig(local_ip, gateway, subnet);
  delay(100);
  
  server.on("/", handle_OnConnect);
  server.on("/forwardon", handle_forwardon);
  server.on("/forwardoff", handle_forwardoff);
  server.on("/lefton", handle_lefton);
  server.on("/leftoff", handle_leftoff);
  server.on("/stopon", handle_stopon);
  server.on("/stopoff", handle_stopoff);
  server.on("/righton", handle_righton);
  server.on("/rightoff", handle_rightoff);
  server.on("/reverseon", handle_reverseon);
  server.on("/reverseoff", handle_reverseoff);
  server.on("/hornon", handle_hornon);
  server.on("/hornoff", handle_hornoff);
  server.on("/headlightson", handle_headlightson);
  server.on("/headlightsoff", handle_headlightsoff);
  server.on("/taillightson", handle_taillightson);
  server.on("/taillightsoff", handle_taillightsoff);
  server.onNotFound(handle_NotFound);
  
  server.begin();
  Serial.println("HTTP server started");
}
void loop() {
  server.handleClient();
  if(FORWARDstatus==HIGH && LEFTstatus==LOW && RIGHTstatus==LOW && REVERSEstatus==LOW) //If the forward button has been pressed and the other movement buttons have not been pressed
  {
//    command = 'F';
//    Serial.println(command);
    motor1.drive(speedCar,50);
    motor2.drive(-speedCar,50);
    }
  
  if(LEFTstatus==HIGH && FORWARDstatus==LOW && RIGHTstatus==LOW && REVERSEstatus==LOW) //If the left button has been pressed and the other movement buttons have not been pressed
  {
//    command = 'L';
//    Serial.println(command);
    motor1.drive(-speedCar,50); //Motor A goes opposite direction from forward
    motor2.drive(-speedCar,50); //Motor B keeps going forward
    }

  if(RIGHTstatus==HIGH && FORWARDstatus==LOW && LEFTstatus==LOW && REVERSEstatus==LOW) //If the right button has been pressed and the other movement buttons have not been pressed
  {
//    command = 'R';
//    Serial.println(command);
    motor1.drive(speedCar,50); //Motor A keeps going forward
    motor2.drive(speedCar,50); //Motor B goes opposite direction from forward
    }

  if(REVERSEstatus==HIGH && FORWARDstatus==LOW && LEFTstatus==LOW && RIGHTstatus==LOW) //If the reverse button has been pressed and the other movement buttons have not been pressed
  {
//    command = 'B';
//    Serial.println(command);
    motor1.drive(-speedCar,50);
    motor2.drive(speedCar,50);
    }
  if(HORNstatus)
  {
//    command = 'U';
//    Serial.println(command);
    hornH();
    }
  else if (HORNstatus==LOW)
  {
//    command = 'Z';
//    Serial.println(command);
    hornL();
    }

  if(HEADLIGHTSstatus)
  {
//    command = 'D';
//    Serial.println(command);
    lightsFrontH();
    }
  else if (HEADLIGHTSstatus==LOW)
  {
    lightsFrontL();
    }

  if(TAILLIGHTSstatus)
  {
//    command = 'O';
//    Serial.println(command);
    lightsBackH();
    }
  else if (TAILLIGHTSstatus==LOW)
  {
    lightsBackL();
    }

  if(FORWARDstatus==LOW && LEFTstatus==LOW && RIGHTstatus==LOW && REVERSEstatus==LOW)
  {
    stopVehicle();
  }

} //End of void loop

void handle_OnConnect() {
  FORWARDstatus = LOW;
  LEFTstatus = LOW;
  STOPstatus = LOW;
  RIGHTstatus = LOW;
  REVERSEstatus = LOW;
  HORNstatus = LOW;
  HEADLIGHTSstatus = LOW;
  TAILLIGHTSstatus = LOW;
  Serial.println("Output 1 Status: OFF | Output 2 Status: OFF | Output 3 Status: OFF | Output 4 Status: OFF | Output 5 Status: OFF | Output 6 Status: OFF | Output 7 Status: OFF | Output 8 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_forwardon() {
  FORWARDstatus = HIGH;
  Serial.println("Output 1 Status: ON");
  server.send(200, "text/html", SendHTML(true,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); //Report existing status for outputs not concerned with at this time. Update status of only the output we are interested in at this time. LEFTstatus in this case
}

void handle_forwardoff() {
  FORWARDstatus = LOW;
  Serial.println("Output 1 Status: OFF");
  server.send(200, "text/html", SendHTML(false,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_lefton() {
  LEFTstatus = HIGH;
  Serial.println("Output 2 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,true, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_leftoff() {
  LEFTstatus = LOW;
  Serial.println("Output 2 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,false, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_stopon() {
  STOPstatus = HIGH;
  Serial.println("Output 3 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, true, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_stopoff() {
  STOPstatus = LOW;
  Serial.println("Output 3 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, false, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_righton() {
  RIGHTstatus = HIGH;
  Serial.println("Output 4 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, true, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_rightoff() {
  RIGHTstatus = LOW;
  Serial.println("Output 4 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, false, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_reverseon() {
  REVERSEstatus = HIGH;
  Serial.println("Output 5 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, true, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_reverseoff() {
  REVERSEstatus = LOW;
  Serial.println("Output 5 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, false, HORNstatus, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_hornon() {
  HORNstatus = HIGH;
  Serial.println("Output 6 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, true, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_hornoff() {
  HORNstatus = LOW;
  Serial.println("Output 6 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, false, HEADLIGHTSstatus, TAILLIGHTSstatus)); 
}

void handle_headlightson() {
  HEADLIGHTSstatus = HIGH;
  Serial.println("Output 7 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, true, TAILLIGHTSstatus)); 
}

void handle_headlightsoff() {
  HEADLIGHTSstatus = LOW;
  Serial.println("Output 7 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, false, TAILLIGHTSstatus)); 
}

void handle_taillightson() {
  TAILLIGHTSstatus = HIGH;
  Serial.println("Output 8 Status: ON");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, true)); 
}

void handle_taillightsoff() {
  TAILLIGHTSstatus = LOW;
  Serial.println("Output 8 Status: OFF");
  server.send(200, "text/html", SendHTML(FORWARDstatus,LEFTstatus, STOPstatus, RIGHTstatus, REVERSEstatus, HORNstatus, HEADLIGHTSstatus, false)); 
}

void handle_NotFound(){
  server.send(404, "text/plain", "Not found");
}

String SendHTML(uint8_t FORWARDstat,uint8_t LEFTstat, uint8_t STOPstat, uint8_t RIGHTstat, uint8_t REVERSEstat, uint8_t HORNstat, uint8_t HEADLIGHTSstat, uint8_t TAILLIGHTSstat){
  String ptr = "<!DOCTYPE html> <html>\n";
  ptr +="<head><meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0, user-scalable=no\">\n";
  ptr +="<title>LED Control</title>\n";
  ptr +="<style>html { font-family: Helvetica; display: inline-block; margin: 0px auto;}\n";
  ptr +="body{margin-top: 50px;} h1 {color: #444444;margin: 50px auto 30px;} h3 {color: #444444;margin-bottom: 50px;}\n";
  ptr +="table { margin-left: auto; margin-right: auto; }\n";
  ptr +="td { padding: 8 px; }\n";
  ptr +=".button {display: block;width: 50px;background-color: #3498db;border: none;color: white;padding: 13px 30px;text-decoration: none;font-size: 25px;margin: 0px auto 35px;cursor: pointer;border-radius: 4px;}\n";
  ptr +=".button-on {background-color: #3498db;}\n";
  ptr +=".button-on:active {background-color: #2980b9;}\n";
  ptr +=".button-off {background-color: #34495e;}\n";
  ptr +=".button-off:active {background-color: #2c3e50;}\n";
  ptr +="p {font-size: 14px;color: #888;margin-bottom: 10px;}\n";
  ptr +="</style>\n";
  ptr +="</head>\n";
  ptr +="<body>\n";
  ptr +="<h1>ESP32 WiFi Car</h1>\n";
  ptr +="<table>\n";
  
   if(FORWARDstat)
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> FORWARD: ON<a class=\"button button-off\" href=\"/forwardoff\">OFF</a></td></tr>\n";}
  else
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> FORWARD: OFF<a class=\"button button-on\" href=\"/forwardon\">ON</a></td></tr>\n";}

  if(LEFTstat)
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> LEFT: ON<a class=\"button button-off\" href=\"/leftoff\">OFF</a></td>";}
  else
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> LEFT: OFF<a class=\"button button-on\" href=\"/lefton\">ON</a></td>";}

  if(STOPstat)
  {ptr +="<td colspan=\"3\" align=\"center\"> STOP: ON<a class=\"button button-off\" href=\"/stopoff\">OFF</a></td>";}
  else
  {ptr +="<td colspan=\"3\" align=\"center\"> STOP: OFF<a class=\"button button-on\" href=\"/stopon\">ON</a></td>";}

  if(RIGHTstat)
  {ptr +="<td colspan=\"3\" align=\"center\"> RIGHT: ON<a class=\"button button-off\" href=\"/rightoff\">OFF</a></td></tr>\n";}
  else
  {ptr +="<td colspan=\"3\" align=\"center\"> RIGHT: OFF<a class=\"button button-on\" href=\"/righton\">ON</a></td></tr>\n";}

  if(REVERSEstat)
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> REVERSE: ON<a class=\"button button-off\" href=\"/reverseoff\">OFF</a></td></tr>\n";}
  else
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> REVERSE: OFF<a class=\"button button-on\" href=\"/reverseon\">ON</a></td></tr>\n";}

  if(HORNstat)
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> HORN: ON<a class=\"button button-off\" href=\"/hornoff\">OFF</a></td></tr>\n";}
  else
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> HORN: OFF<a class=\"button button-on\" href=\"/hornon\">ON</a></td></tr>\n";}

  if(HEADLIGHTSstat)
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> HEADLIGHTS: ON<a class=\"button button-off\" href=\"/headlightsoff\">OFF</a></td>";}
  else
  {ptr +="<tr><td colspan=\"3\" align=\"center\"> HEADLIGHTS: OFF<a class=\"button button-on\" href=\"/headlightson\">ON</a></td>";}

  if(TAILLIGHTSstat)
  {ptr +="<td colspan=\"3\" align=\"center\"> TAILLIGHTS: ON<a class=\"button button-off\" href=\"/taillightsoff\">OFF</a></td></tr>\n";}
  else
  {ptr +="<td colspan=\"3\" align=\"center\"> TAILLIGHTS: OFF<a class=\"button button-on\" href=\"/taillightson\">ON</a></td></tr>\n";}

  ptr +="</table>\n";
  ptr +="</body>\n";
  ptr +="</html>\n";
  return ptr;
}

//Function Definitions
void stopVehicle()
{
  motor1.brake();
  motor2.brake();
}

void hornH() //Function turns the horn on
{
  //digitalWrite(horn_Buzz, HIGH); //This works fine with the small buzzer
  tone(horn_Buzz, 523); //Sets the horn_Buzz pin high at a frequency of 523 Hz which is a high c note
} //End of hornH function

void hornL() //Function turns the horn off
{
  //digitalWrite(horn_Buzz, LOW);
  noTone(horn_Buzz);
} //End of hornL function

void stopPeriph() //Function turns off all of the peripherals at once (i.e. front lights, back lights, and horn)
{
  lightsFrontL(); //Turns front lights output low
  lightsBackL(); //Turns back lights output low
  hornL(); //Turns horn output low
} //End of stopPeriph function

void lightsFrontH() //Function turns the front lights on
{
  //float brightF = 0.75;
  //int brightness = 255*brightF;
  //fill_solid(leds[0], 1, CRGB::Green);
  //fill_solid(leds[1], 1, CRGB::Green);
  leds[0].r=0;
  leds[0].g=255;
  leds[0].b=0;
  leds[1].r=0;
  leds[1].g=255;
  leds[1].b=0;
  //Serial.println("Front light code executed.");
  FastLED.show();
} //End of lightsFrontH function

void lightsFrontL() //Function turns the front lights off
{
  leds[0].r=0;
  leds[0].g=0;
  leds[0].b=0;
  leds[1].r=0;
  leds[1].g=0;
  leds[1].b=0;
  FastLED.show();
} //End of lightsFrontL function

void lightsBackH() //Function turns the back lights on
{
  //fill_solid(leds[2], 1, CRGB::Red);
  //fill_solid(leds[3], 1, CRGB::Red);
  leds[2].r=255;
  leds[2].g=0;
  leds[2].b=0;
  leds[3].r=255;
  leds[3].g=0;
  leds[3].b=0;
  //Serial.println("Back light code executed.");
  FastLED.show();
} //End of lightsBackH function

void lightsBackL() //Function turns the back lights off
{
  leds[2].r=0;
  leds[2].g=0;
  leds[2].b=0;
  leds[3].r=0;
  leds[3].g=0;
  leds[3].b=0;
  FastLED.show();
} //End of lightsBackL function