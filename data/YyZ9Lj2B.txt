class Rational(object):
 
    numerator = int(0)
    denominator = int(0)
 
 
    def __init__(self, numerator: int, denominator: int):   #Конструктор класса
        self.numerator = numerator
        self.denominator = denominator
 
    def __str__(self):                                      #Переопределение вывода - вызывается, когда пишем print(...)
        return(f"{self.numerator}/{self.denominator}")
 
    def __repr__(self):                                     #Еще раз, но только для представление чисел в других случаях, например вывод всего списка
        return(f"{self.numerator}/{self.denominator}")
 
    def __eq__(self, other):                                #Переопределим метод, который вызывается, когда мы пишем a==b
        a = self.numerator
        b = self.denominator
        c = other.numerator
        d = other.denominator
        if (c/a == d/b): return(True)
        else: return(False)
 
    def max(array):                                         #Создадим метод максимума, который считает значения чисел и выводит максимальное
        numerators = []                                  
        denominators = []
        floats = []
        for i in range(len(array)):
            numerators.append(array[i].numerator)
            denominators.append(array[i].denominator)
        for i in range(len(numerators)):
            floats.append(numerators[i]/denominators[i])
        i = floats.index(max(floats))
        return(array[i])
 
    def __add__(self, other):                           #Переопределим метод, который вызывается когда мы пишем a+b
        return(Rational((self.numerator*other.denominator+other.numerator*self.denominator), (self.denominator*other.denominator)))
 
    def min(first, second):                             #Создадим метод, который ищет минимум
        if (first.numerator/first.denominator > second.numerator/second.denominator): return(second)
        elif (first.numerator/first.denominator < second.numerator/second.denominator): return(first)
        else: return(False)
 
    def __mul__(self, other):                           #Переопределим метод, который вызывается, когда мы пишем a*b
        return(Rational((self.numerator*other.numerator), (self.denominator*other.denominator)))
 
 
 
a = Rational(1, 3)  #Создадим два экземпляра класса Rational
b = Rational(2, 4)
print(Rational.min(a, b))    #Выведем минимальный из них
print(a*b)                   #Выведем их умножение
print(a+b)                   #Выведем их сумму
print(a==b)                  #Проверим равны ли они, ожидаем False
a = Rational(3, 6)           #Теперь переприсвоим "а" так, чтобы  с точки зрения алгебры а = b
print(a==b)                  #Проверим равны ли они, ожидаем True
 
array = []                   #Создадим массив рациональных чисел, чтобы он стал аргументом метода max
for i in range(8):
    array.append(Rational(i*13, i+9))
 
print(array)                 #Выведем массив
print(Rational.max(array))   #Выведем максимальный элемент массива