x = 1
y = 1
z = 1
d = 0
digCount = 0
 
ignore = {
    "minecraft:stone",
    "minecraft:gravel",
    "minecraft:dirt",
    "minecraft:cobblestone",
    "minecraft:bedrock",
    "minecraft:cobbled_deepslate",
    "minecraft:deepslate",
    "minecraft:diorite",
    "minecraft:granite",
    "minecraft:tuff",
    "create:limestone",
    "create:crimsite",
}
 
print("Welcome to Little Quarry")
print("------------------------")
print("Enter dimensions of the quarry")
 
print("X:")
userx = tonumber(read())
print("Current Z:")
usery = tonumber(read())
y = usery
print("Y:")
userz = tonumber(read())
print("Bedrock top Z:")
bedrock = tonumber(read()) + 1
 
 
 
-- function round(n)
--  return (n + 0.5 - (n + 0.5) % 1)
-- end
maxLayer = math.floor((usery - bedrock) / 3)
if (bedrock + (maxLayer) * 3) == y then
    maxLayer = maxLayer - 1
end
 
if turtle.getFuelLevel() < (((maxLayer) * (userx * userz)) + (y * 2)) then
    print("Need atleast", (((maxLayer) * (userx * userz)) + (y * 2)), "Fuel level")
    error()
end
 
function fatal(s)
    print("--FATAL ERROR--")
    print("er: ", s)
    home(true)
    error()
end
 
function turn(n)
    n = n or 0
    if n == 0 and d == 3 then
        turtle.turnRight()
        d = 0
    elseif n == 3 and d == 0 then
        turtle.turnLeft()
        d = 3
    else
        while d < n do
            turtle.turnRight()
            d = d + 1
        end
        while d > n do
            turtle.turnLeft()
            d = d - 1
        end
    end
end
 
function down()
    if not turtle.down() then
        dig("down")
        turtle.down()
    end
    y = y - 1
end
 
function up()
    if not turtle.up() then
        dig("up")
        turtle.up()
    end
    y = y + 1
end
 
function forward()
    if turtle.forward() then
        if d == 0 then
            z = z + 1
        elseif d == 1 then
            x = x + 1
        elseif d == 2 then
            z = z - 1
        elseif d == 3 then
            x = x - 1
        end
    else
        print("x:", x, "y:", y, "z:", z)
        fatal("cannot forward")
    end
end
 
function dig(command)
    command = command or "forward"
    if command == "forward" then
        if turtle.detect() then
            while turtle.dig() do
                sleep(0.2)
                digCount = digCount + 1
            end
        end
    elseif command == "up" then
        if turtle.detectUp() then
            while turtle.digUp() do
                sleep(0.2)
                digCount = digCount + 1
            end
        end
    elseif command == "down" then
        if turtle.detectDown() then
            while turtle.digDown() do
                sleep(0.2)
                digCount = digCount + 1
            end
        end
    end
 
    if digCount >= 16 then
        if turtle.getItemCount(16) ~= 0 then
            tempd = d
            tempx = x
            tempy = y
            tempz = z
            home(true)
            gotoLayer(tempy)
            turn(0)
            while z < tempz do
                forward()
            end
            turn(1)
            while x < tempx do          
                forward()
            end
            turn(tempd)
        end
        digCount = 0
    end
end
 
function home(n)
    n = n or false
    i = i or false
    --x
    if x > 1 then
        turn(3)
        while x > 1 do
            forward()
        end
    end
    --z
    if z > 1 then
        turn(2)
        while z > 1 do
            forward()
        end
    end
    --y
    if n == true then
        turn(2)
        while y < usery do
            up()
        end
        unload()
        turn(0)
    end
end
 
function unload()
    for i=1, 16 do
        turtle.select(i)
        turtle.drop(64)
    end
    turtle.select(1)
end
 
function gotoLayer(n)
    while y > n do
        down()
    end
    while y < n do
        up()
    end
end
 
function check()
    downS, downD = turtle.inspectDown()
    upS, upD = turtle.inspectUp()
    upCheck = false
    downCheck = false
    --up
    for key,value in pairs(ignore) do
        if upD.name == value then
            upCheck = true
            break
        end
    end
    if not upCheck then
        dig("up")
    end
    --down
    for key,value in pairs(ignore) do
        if downD.name == value then
            downCheck = true
            break
        end
    end
    if not downCheck then
        dig("down")
    end
end
 
function mineLayer()
    miningDirection = true
    for i=1, userx do
        if miningDirection == true then
            turn(0)
            while z < userz do
                dig()
                forward()
                check()
            end
            if x < userx then
                turn(1)
                dig()
                forward()
                check()
            end
            miningDirection = false
        else
            
            turn(2)
            while z > 1 do
                dig()
                forward()
                check()
            end
            if x < userx then
                turn(1)
                dig()
                forward()
                check()
            end
            miningDirection = true
        end
    end
end
 
print(bedrock + (maxLayer) * 3)
print(maxLayer)
 
-- main loop (i=0, maxLayer)
for i=0, maxLayer do
    gotoLayer(bedrock + (maxLayer - i) * 3)
    print("mining at Z:", y)
    mineLayer()
    home()
end
print("Program completed successfully")
home(true)