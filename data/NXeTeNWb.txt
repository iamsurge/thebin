function SequentialAlphaBeta(node, depth, Max, alpha, beta):
if node is a leaf node:
return value of the node
if Max:
BestValue = -Infinity
for every child node:
value = minimax(node, depth+1, false, alpha, beta)
BestValue = max( BestValue, value)
alpha = max( alpha, BestValue)
 if beta <= alpha:
 break
 return BestValue
 else:
 BestValue = +Infinity
 for every child node :
 value = minimax(node, depth+1, true, alpha, beta)
 BestValue = min( BestValue, value)
 beta = min( beta, BestValue)
 if beta <= alpha:
 break
 return BestValue
 SequentialAlphaBeta(0, 0, true, -Infinity, +Infinity)