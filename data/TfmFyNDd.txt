#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>

// https://www.eolymp.com/az/contests/2741/problems/22043

using namespace std;

typedef long long ll;
const float EPS = 0.00001;

vector<int> a;


struct Mo {
	multiset<int> m;
	int s = 0, f = -1;

	vector<int> ask(int k) {
		vector<int> res;
		int len = f - s + 1;
		auto it = m.begin();
		while (k) {
			res.push_back(*it);
			--k;
			++it;
		}
		return res;
	}

	void change(int l, int r) {
		while (s > l) {
			m.insert(a[s - 1]);
			--s;
		}
		while (s < l) {
			m.erase(a[s + 1]);
			++s;
		}

		while (f < r) {
			m.insert(a[f + 1]);
			++f;
		}
		while (f > r) {
			m.erase(a[f - 1]);
			--f;
		}
	}
};

int K;

struct Rq {
	int l, r, k, num;
};

inline bool cmp(Rq& a, Rq& b) {
	return make_pair(a.l / K, a.r) < make_pair(b.l / K, b.r);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;

	K = sqrt(n);

	Mo tb;

	a.resize(n);
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	int q;
	cin >> q;

	vector<Rq> rq(q, Rq());

	for (int i = 0; i < q; i++) {
		cin >> rq[i].l >> rq[i].r >> rq[i].k;
		--rq[i].l;
		--rq[i].r;
		rq[i].num = i;
	}

	sort(rq.begin(), rq.end(), cmp);

	vector<pair<int, vector<int>>> ans;
	for (int i = 0; i < q; i++) {
		Rq cur = rq[i];
		tb.change(cur.l, cur.r);
		vector<int> an = tb.ask(cur.k);

		ans.push_back({ cur.num, an });
	}

	sort(ans.begin(), ans.end());

	for (int i = 0; i < q; i++) {
		vector<int> an = ans[i].second;
		for (int j = 0; j < an.size(); j++) {
			cout << an[j] << ' ';
		}
		cout << '\n';
	}

}