#include <algorithm>
#include <fstream>
#include <iostream>
#include <numeric>
#include <ranges>
#include <sstream>
#include <vector>

namespace {
  using namespace std;
  using namespace std::views;
  using views::transform;

  auto work(bool part2) {
    // Read file into a range-view of strings.
    auto in = (ostringstream() << (ifstream("2022/2022_day01_input.txt")).rdbuf()).str() 
        | split('\n') 
        | transform([](auto r) { return string(r.begin(), r.end()); });

    // From view of strings, create a view of summed ints.
    auto elves = vector<string>(in.begin(), in.end())
        | split("") 
        | transform([](const auto& elf_as_str_range) {
            return elf_as_str_range | transform( [](auto& s) { return stoi(s); });
          })
        | transform([](const auto& elf_as_int_range) {
            auto c = elf_as_int_range;
            return accumulate(c.begin(), c.end(), 0);
          });

    // Copy ints to vector to enable standard algs.
    vector<int> ve(elves.begin(), elves.end());
    partial_sort(ve.begin(), ve.begin() + 3, ve.end(), greater<int>());
    auto top3 = ve | take(3);

   return part2 ? accumulate(top3.begin(), top3.end(), 0) : top3.front();
  }
}

namespace y2022 {
  void day01() {
    cout << "part 1: " << work(false) << "\n";
    cout << "part 2: " << work(true) << "\n";
  }
}
