#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

class Logger {
public:
	Logger() { cout << "Default ctor\n"; } // конструктор по умолчанию
	Logger(const Logger&) { cout << "Copy ctor\n"; } // конструктор копирования
	Logger(Logger&&) { cout << "move ctor\n"; } // конструктор перемещения
	void operator=(const Logger&) { cout << "Copy assignment\n"; } // оператор присваивания
	void operator=(Logger&&) { cout << "Copy move assignment\n"; }// Оператор перемещающего присваивания
};

Logger  foo(vector<Logger> v) {
	auto tmp = v[0];
	return move(tmp);
}


int main() {

	Logger source;
	Logger* target = &source;

	cout << '\n';

	vector<Logger> v1  { source, *(target) };

	cout << '\n';
	//foo(v1); // вывод аналогичен "output with move:" при закоментированной следующей строке и раскоментированной этой
	Logger new_source = foo(v1);

}
// тут произошел "NRVO и copy elision [компилятор может опускать и перемещение и копирование / Zero copy]"
/* output without move:
Default ctor

Copy ctor
Copy ctor
Copy ctor
Copy ctor

Copy ctor
Copy ctor
Copy ctor
*/

/* output with move:
...
move ctor
*/