import matplotlib.pyplot as plt
import numpy as np
import time


# R(0, 1)
def RStandart(N):
    # const
    c1 = 4096
    c2 = 150889
    c3 = 714025
    nk = np.array([])
    xk = np.array([])
    # init
    n0 = np.mod(time.time(), c1)
    nk = np.append(nk, n0)
    xk = np.append(xk, nk[0] / c3)

    for i in range(1, N):
        nk = np.append(nk, np.mod(c1 * nk[i - 1] + c2, c3))
        xk = np.append(xk, nk[i] / c3)

    return xk

# N(0, 1), N – количество элементов
def NStandart(N):
    xk = np.array([])
    # R(0, 1)
    a1 = RStandart(N)
    time.sleep(3) # pause
    a2 = RStandart(N)
    
    for i in range(N):
        xk = np.append(xk, np.sqrt(-2 * np.log(a1[i])) * np.cos(2 * np.pi * a2[i]))

    return xk

# генерация белого шума на заданном интервале с заданным шагом
def WhiteNoise(t0, t1, h):
    return NStandart(int((t1 - t0) / h))

# Система ОДУ
def f1(x,y1,y2,y3,y4):
    return y2

def f2(x,y1,y2,y3,y4):
    return y3 + 2*x

def f3(x,y1,y2,y3,y4):
    return y4

def f4(x,y1,y2,y3,y4):
    return -y1 - 4.25 * y3 - 6.5 * x
for i in range(3):
    # Параметры задачи
    h = 0.05
    t0 = 0
    t1 = 10
    # Метод Эйлера
    x = WhiteNoise(t0, t1, h)
    yij = np.zeros((4, int((t1 - t0) / h)))
    for j in range(1,int(t1 / h)):
        yij[0][j] = yij[0][j-1] + h * f1(x[j - 1], yij[0][j - 1], yij[1][j - 1], yij[2][j - 1], yij[3][j - 1])
        yij[1][j] = yij[1][j-1] + h * f2(x[j - 1], yij[0][j - 1], yij[1][j - 1], yij[2][j - 1], yij[3][j - 1])
        yij[2][j] = yij[2][j-1] + h * f3(x[j - 1], yij[0][j - 1], yij[1][j - 1], yij[2][j - 1], yij[3][j - 1])
        yij[3][j] = yij[3][j-1] + h * f4(x[j - 1], yij[0][j - 1], yij[1][j - 1], yij[2][j - 1], yij[3][j - 1])

    # Строим график
    t = np.arange(t0, t1, h)
    plt.plot(t, yij[0])
    plt.grid(True)
    plt.show()