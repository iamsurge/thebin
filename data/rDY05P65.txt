// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
//#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = 1e9 + 7;
const ll max_sz = 6250001;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(rand() % 100);

bitset <max_sz> w;
bitset <max_sz> zxc;
pair <int, int> p[max_sz];

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, s, i, j;
        cin >> n >> s;
        vector <int> a(n);
        w[0] = 1;
        for (i = 0;i < max_sz;i++){
            p[i] = {-1,-1};
        }
        for (i = 0; i < n; i++) {
            cin >> a[i];
            zxc = w xor (w << a[i]);
            w |= (w << a[i]);
            for (j = zxc._Find_first(); j < max_sz; j = zxc._Find_next(j)) {
                p[j] = { a[i], i + 1 };
            }
        }
        if (w[s]) {
            cout << "YES" << endl;
            vector <int> path;
            j = s;
            while (p[j].second != -1) {
                path.push_back(p[j].second);
                j = j - p[j].first;
            }
            reverse(all(path));
            for (auto it : path) {
                cout << it << " ";
            }
            cout << endl;
        }
        else {
            cout << "NO" << endl;
        }
    }
}
//Deisgned by skimono