import numpy as np
from matplotlib import pyplot as plt
from scipy import signal

def main():
    NomDen = [
        [[10], [1, 2], 'Tytuł wykresu 1'],
        [[4], [2, 0, 1], 'Tytuł wykresu 2'],
        [[-2, 6], [1, 7, 16, 12], 'Tytuł wykresu 3']
    ]

    # Tablica transmitancji
    TFs = []

    # Tablica równań stanu
    SEs = []

    for G in NomDen:
        TFs.append(signal.TransferFunction(G[0], G[1]))
        SEs.append(signal.tf2ss(G[0], G[1]))

    fig, axis = plt.subplots(NomDen.__len__(), 1)
    plt.subplots_adjust(hspace=0.5)

    for i in range(NomDen.__len__()):
        axis[i].set_title(NomDen[i][2])
        axis[i].grid()
        t, y = signal.step2(TFs[i])
        axis[i].plot(t, y)
        t, y = signal.step2(SEs[i])
        axis[i].plot(t, y)
        
    plt.show()
    fig, axis = plt.subplots(NomDen.__len__(), 1)
    plt.subplots_adjust(hspace=0.5)

    for i in range(NomDen.__len__()):
        axis[i].set_title(NomDen[i][2] + ' dla niezerowego warunku początkowego')
        axis[i].grid()
        t, y = signal.lti(NomDen[i][0], NomDen[i][1]).step(X0=2)
        axis[i].plot(t, y)
        t, y = signal.lti(SEs[i][0], SEs[i][1], SEs[i][2], SEs[i][3]).step(X0=2)
        axis[i].plot(t, y)

    plt.show()

if __name__ == '__main__':
    main()