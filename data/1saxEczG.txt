#define _CRT_SECURE_NO_WARNINGS
#define _USE_MATH_DEFINES
#include<iostream>
#include<cmath>
#include<cstdlib>
#include<queue>
#include<deque>
#include<map>
#include<unordered_map>
#include<string>
#include<stack>
#include<vector>
#include<set>
#include <cstdint>
#include <unordered_set>
#include <set>
#include <algorithm>
#include <bitset>
#include <random>

using namespace std;

vector<long long> powers;

int solveCorrect(long long x)
{
    if (x == 0)
        return 0;

    if (x % 2 == 0)
        return solveCorrect(x / 2);

    if (x % 4 == 1)
        return 1 + solveCorrect((x - 1) / 4);

    if (x % 4 == 3)
        return 1 + solveCorrect((x + 1) / 4);
}

long long solveBad(long long num)
{
    if (num == 0)
        return 0;
    if (num == 1)
        return 1;

    long long ans = 0;
    long long left = 0;

    for (int i = 62; i >= 0; i--)
    {
        if (powers[i] <= num)
        {
            long long leftBigger = powers[i + 1] - num;
            long long leftLess = num - powers[i];

            left = min(leftBigger, leftLess);

            ans++;
            break;
        }
    }

    long long ansRec = solveBad(left) + ans;

    //for (int i = 62; i >= 0; i--)
    //{
    //    while (powers[i] <= leftBigger)
    //    {
    //        leftBigger -= powers[i];
    //        ansBigger++;
    //    }

    //    while (powers[i] <= leftLess)
    //    {
    //        leftLess -= powers[i];
    //        ansLess++;
    //    }
    //}

    return ansRec;
}

void main()
{
    std::ios::sync_with_stdio(false);
    cin.tie(0);
    cout.tie(0);

    powers.push_back(1);
    long long temp = 1;
    for (int i = 0; i < 62; i++)
    {
        temp *= 2;
        powers.push_back(temp);
    }

    //for (int i = 0; i < 10000; i++)
    //{
    //    if (solveCorrect(i) != solveBad(i))
    //        cout << "BLYAT " << i << ' ' << solveBad(i) << " != " << solveCorrect(i) << '\n';
    //}

    int cnt;
    cin >> cnt;

    for (int test = 0; test < cnt; test++)
    {
        long long num;
        cin >> num;
        num = abs(num);

        cout << solveBad(num) << '\n';
    }
}
