

currentX = 0
currentY = 0

m = peripheral.find("modem")


function transmit(channel, data)
    m.transmit(channel, 1, data)
end
Â 

function listen(channel)
    m.open(channel)
    _,_,_,_,data,_ = os.pullEvent("modem_message")
	m.close(channel)
    return data
end

function isOre()
	local success, data = turtle.inspect()
	if success then
		if string.match(data.name, "coal") then
			turtle.select(16)
			turtle.dig()
			turtle.refuel()
			turtle.select(1)
		end
		return string.match(data.name, "ore")
	else
		return false
	end
end

function checkWalls
	for i=1, 4 do
		if isOre() then
			turtle.dig()
		end
		turtle.turnRight()
	end
end

function digHole()
	count = 0
	repeat 
		turtle.digDown()
		count = count + 1
		checkWalls()
	until turtle.down == false
	for i=1, count do
		turtle.up()
	end
end
		
function moveX(x)
	if x < currentX then
		turtle.turnRight()
		for i=1, math.abs(x-currentX) do
			repeat os.sleep(0.25) until turtle.forward()
		end
		turtle.turnLeft()
		currentX = x
	elseif x > currentX then
		turtle.turnLeft()
		for i=1, math.abs(x-currentX) do
			repeat os.sleep(0.25) until turtle.forward()
		end
		turtle.turnRight()
		currentX = x
	end
end
	
	
end

function moveY(y)
	if y < currentY then
		for i=1, math.abs(y-currentY) do
			repeat os.sleep(0.25) until turtle.backward()
		end
		currentY = y
	elseif x > currentX then
		for i=1, math.abs(y-currentY) do
			repeat os.sleep(0.25) until turtle.forward()
		end
		currentY = y
	end
end	


data = listen(1)
while data.return == false do
	moveX(data.x)
	moveY(data.y)
	digHole()
	transmit(2, {request=true})
	data = listen(1)
end

moveX(0)
moveY(0)



	
