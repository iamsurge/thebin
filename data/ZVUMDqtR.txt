#include "2022_utils.h"

using namespace std;

namespace {
  struct V {
    int x, y;
  };

  bool operator==(const V& l, const V& r) { return l.x == r.x && l.y == r.y; }
  bool operator<(const V& l, const V& r) { return l.x == r.x ? l.y < r.y : l.x < r.x; }
}

namespace std {
  template <>
  struct hash<V>
  {
    std::size_t operator()(const V& k) const {
      return std::hash<int>()(k.x ^ (k.y << 16));
    }
  };
}

namespace {
  struct S {
    // Position.
    V p;

    // Nearest beacon.
    V nb;
  };

  auto part1() {
    auto in = load_strings("2022/2022_day15_input.txt");
    
    vector<S> sensors;
    for (auto& str : in) {
      S s;
      sscanf_s(str.c_str(), "Sensor at x=%d, y=%d: closest beacon is at x=%d, y=%d",
        &s.p.x, &s.p.y, &s.nb.x, &s.nb.y);
      sensors.push_back(s);
    }

    int row = 2000000;
    set<int> no_distress_x;

    for (auto& s : sensors) {
      int signal_radius = (abs(s.p.x - s.nb.x) + abs(s.p.y - s.nb.y));
      int radius_at_row = signal_radius - abs(s.p.y - row);

      if (radius_at_row <= 0) continue;

      for (int x = s.p.x - radius_at_row; x <= s.p.x + radius_at_row; ++x) {
        // Skip beacon itself.
        if (s.nb == V(x, row)) continue;
        no_distress_x.insert(x);
      }
    }

    return no_distress_x.size();
  }

  auto part2() {
    auto in = load_strings("2022/2022_day15_input.txt");

    vector<S> sensors;
    for (auto& str : in) {
      S s;
      sscanf_s(str.c_str(), "Sensor at x=%d, y=%d: closest beacon is at x=%d, y=%d",
        &s.p.x, &s.p.y, &s.nb.x, &s.nb.y);
      sensors.push_back(s);
    }

    int max_coord = 4000000;
    //int max_coord = 20;
    for (int i = 0; i < sensors.size(); ++i) {
      auto& s = sensors[i];
      int signal_radius_i = (abs(s.p.x - s.nb.x) + abs(s.p.y - s.nb.y));

      // Start with 4 positions to walk each edge of the perimeter.
      V p_top_left(s.p.x, s.p.y - signal_radius_i - 1);
      V p_top_right = p_top_left;
      V p_bottom_left(s.p.x, s.p.y + signal_radius_i + 1);
      V p_bottom_right = p_bottom_left;

      // Check each position against each sensor.
      for (int r = 0; r <= signal_radius_i; ++r) {
        for (V p : vector<V>{ p_top_left, p_top_right, p_bottom_left, p_bottom_right }) {
          if (p.x < 0 || p.y < 0 || p.x > max_coord || p.y > max_coord) continue;

          bool detected = false;
          for (int j = 0; j < sensors.size(); ++j) {
            if (i == j) continue;

            // Check whether the sensor could detect this position.
            auto& ss = sensors[j];
            int signal_radius_j = (abs(ss.p.x - ss.nb.x) + abs(ss.p.y - ss.nb.y));
            int d = abs(p.x - ss.p.x) + abs(p.y - ss.p.y);
            if (d <= signal_radius_j) {
              detected = true;
              break;
            }
          }

          if (!detected) {
            return (int64_t)p.x * 4000000 + p.y;
          }
        }

        p_top_left.x -= 1;
        p_top_left.y += 1;
        p_top_right.x += 1;
        p_top_right.y += 1;
        p_bottom_left.x -= 1;
        p_bottom_left.y -= 1;
        p_bottom_right.x += 1;
        p_bottom_right.y -= 1;
      }
    }


    return (int64_t)(-1);
  }
}

namespace y2022 {
  void day15() {
    {
      Profile p("duration");
      cout << "part 1: " << part1() << "\n";
    }

    {
      Profile p("duration");
      cout << "part 2: " << part2() << "\n";
    }
  }
}
