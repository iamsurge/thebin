unit UPanelBorderColor;

interface

uses

  Messages,
  Classes,
  ExtCtrls,
  SysUtils,
  Windows,
  Graphics,
  Direct2D,
  D2D1;

type

  TPanelBorderColor = class(TPanel)
  private
    FD2DCanvas: TDirect2DCanvas;
    FRadius : Integer;
    FBorderColor : TColor;
    FBorderColorHover : TColor;
    FPenWidth : Integer;
    procedure Paint;
    procedure SetBorderColor(const Value: TColor);
    procedure SetBorderColorHover(const Value: TColor);
    procedure SetPenWidth(const Value: Integer);
    procedure SetRadius(const Value: Integer);
  protected
    procedure CreateWnd; override;
    procedure WMPaint(var Message: TWMPaint); message WM_PAINT;
    procedure WMSize(var Message: TWMSize); message WM_SIZE;
    procedure WMEraseBkgnd(var Message: TWMEraseBkgnd); message WM_ERASEBKGND;
  public
    constructor Create(AOwner: TComponent); override;
    destructor Destroy; override;
  published
    property Canvas: TDirect2DCanvas read FD2DCanvas;
    property Radius : Integer read FRadius write SetRadius;
    property BorderColor : TColor read FBorderColor write SetBorderColor;
    property BorderColorHover : TColor read FBorderColorHover write SetBorderColorHover;
    property PenWidth : Integer read FPenWidth write SetPenWidth;
  end;

implementation

{ TPanelBorderColor }

constructor TPanelBorderColor.Create(AOwner: TComponent);
begin
  inherited;
  width  := 200;
  height := 50;
end;

procedure TPanelBorderColor.CreateWnd;
begin
  inherited;
  FD2DCanvas.Free;
  FD2DCanvas:= TDirect2DCanvas.Create(Handle);
end;

destructor TPanelBorderColor.Destroy;
begin
  FreeAndNil(FD2DCanvas);
  inherited;
end;

procedure TPanelBorderColor.Paint;
var
  Rect1 : D2D1_RECT_F;
  RoundRect1 : D2D1_ROUNDED_RECT;
  R: TRect;
begin
   // Erase background
   FD2DCanvas.RenderTarget.Clear(D2D1ColorF(Self.Color));
   // Set pen color to draw rectangle outline
   FD2DCanvas.Pen.Color   := FBorderColor;
   FD2DCanvas.Pen.Width:=FPenWidth;
   FD2DCanvas.Brush.Color := FBorderColorHover;

   FD2DCanvas.FillRoundedRectangle(D2D1RoundedRect(D2D1RectF(ClientRect.Top+5,ClientRect.Left+5, ClientRect.Right-5, ClientRect.Bottom-5), FRadius, FRadius));
   FD2DCanvas.DrawRoundedRectangle(D2D1RoundedRect(D2D1RectF(ClientRect.Top+5,ClientRect.Left+5, ClientRect.Right-5, ClientRect.Bottom-5), FRadius, FRadius));
end;

procedure TPanelBorderColor.SetBorderColor(const Value: TColor);
begin
  FBorderColor := Value;
end;

procedure TPanelBorderColor.SetBorderColorHover(const Value: TColor);
begin
  FBorderColorHover := Value;
end;

procedure TPanelBorderColor.SetPenWidth(const Value: Integer);
begin
  FPenWidth := Value;
end;

procedure TPanelBorderColor.SetRadius(const Value: Integer);
begin
  FRadius := Value;
end;

procedure TPanelBorderColor.WMEraseBkgnd(var Message: TWMEraseBkgnd);
begin
  Message.Result := 1;
end;

procedure TPanelBorderColor.WMPaint(var Message: TWMPaint);
var
  PaintStruct: TPaintStruct;
begin
  BeginPaint(Handle, PaintStruct);
  try
    if Assigned(FD2DCanvas) then
    begin
      FD2DCanvas.BeginDraw;
      try
        Paint;
      finally
        FD2DCanvas.EndDraw;
      end;
    end;
  finally
    EndPaint(Handle, PaintStruct);
  end;

end;

procedure TPanelBorderColor.WMSize(var Message: TWMSize);
var
  S: TD2DSizeU;
begin
  if Assigned(FD2DCanvas) then
  begin
    S := D2D1SizeU(ClientWidth, ClientHeight);
    ID2D1HwndRenderTarget(FD2DCanvas.RenderTarget).Resize(S);
  end;
  Invalidate;
end;

end.