#PHYSICAL_MONITOR_DESCRIPTION_SIZE = 128

Structure PHYSICAL_MONITOR
  hPhysicalMonitor.i
  szPhysicalMonitorDescription.u[#PHYSICAL_MONITOR_DESCRIPTION_SIZE]
EndStructure

Prototype.l GetNumberOfPhysicalMonitorsFromHMONITOR_(hMonitor.i, *pdwNumberOfPhysicalMonitors.Long)
Prototype.l GetPhysicalMonitorsFromHMONITOR_(hMonitor.i, dwPhysicalMonitorArraySize.l, *pPhysicalMonitorArray.PHYSICAL_MONITOR)
Prototype.l DestroyPhysicalMonitors_(dwPhysicalMonitorArraySize.l, *pPhysicalMonitorArray.PHYSICAL_MONITOR)
Prototype.l SetVCPFeature_( hMonitor.i, bVCPCode.a, dwNewValue.i)
  

Global GetNumberOfPhysicalMonitorsFromHMONITOR_.GetNumberOfPhysicalMonitorsFromHMONITOR_
Global GetPhysicalMonitorsFromHMONITOR_.GetPhysicalMonitorsFromHMONITOR_
Global DestroyPhysicalMonitors_.DestroyPhysicalMonitors_
Global SetVCPFeature_.SetVCPFeature_


Global Dim PhysicalMonitorArray.PHYSICAL_MONITOR(0)
 
 

OpenLibrary(0, "Dxva2.dll")
  GetNumberOfPhysicalMonitorsFromHMONITOR_ = GetFunction(0, "GetNumberOfPhysicalMonitorsFromHMONITOR")
  GetPhysicalMonitorsFromHMONITOR_ = GetFunction(0, "GetPhysicalMonitorsFromHMONITOR")
  DestroyPhysicalMonitors_ = GetFunction(0, "DestroyPhysicalMonitors")
  SetVCPFeature_ =GetFunction(0, "SetVCPFeature")
  
  

  
Global TimeOFF, Messaga.s,EscON, sek
TimeOFF =60
sek = TimeOFF
MessagaON = 0
EscON = 0
ParameterCount.i = CountProgramParameters()                                                         
If ParameterCount.i <>  0                                                                           
  If Val(ProgramParameter(0)) > 0: TimeOFF =  Val(ProgramParameter(0)): EndIf
  If Val(ProgramParameter(1)) > 0: MessagaON = 1: EndIf  
  If Val(ProgramParameter(2)) > 0: EscON = 1: EndIf 
EndIf         





Procedure OnOff(state.b)
     hMonitor = MonitorFromPoint_(0, #MONITOR_DEFAULTTOPRIMARY)
   If hMonitor
     If GetNumberOfPhysicalMonitorsFromHMONITOR_(hMonitor, @PhysicalMonitorArraySize) And PhysicalMonitorArraySize > 0 
        ReDim PhysicalMonitorArray(PhysicalMonitorArraySize-1)
         If GetPhysicalMonitorsFromHMONITOR_(hMonitor, PhysicalMonitorArraySize, @PhysicalMonitorArray())
           For PhysicalMonitorArrayIndex = 0 To PhysicalMonitorArraySize - 1
             SetVCPFeature_(PhysicalMonitorArray(PhysicalMonitorArrayIndex)\hPhysicalMonitor,$E1,state)
           Next
           DestroyPhysicalMonitors_(PhysicalMonitorArraySize, @PhysicalMonitorArray())
         EndIf
       EndIf
     EndIf
EndProcedure

Procedure MonicOff(x)
 
 Repeat
   If EscON = 1   
     If GetAsyncKeyState_(27) 
       OnOff(#False)
       sek = TimeOFF
       AddWindowTimer(0, 1, 1000)
   ElseIf GetAsyncKeyState_($20)
    OnOff(#False)
     EndIf
    Else 
   For i = 5 To 255
     If GetAsyncKeyState_(i)
       OnOff(#True)
     EndIf 
   Next
 EndIf
    Delay(1)  
  ForEver
EndProcedure
 
Procedure GetIdleTime()
  Shared Mx, My
  GetCursorPos_(pt.POINT)
  
  If Mx = pt\x Or My = pt\y
    If sek=0
      OnOff(#True)
      Debug  "MonicOff"
     RemoveWindowTimer(0, 1) 
    Else
      sek = sek - 1
    EndIf
  Else  
    sek = TimeOFF
  EndIf
  
  SetGadgetText(0, "Monitor budet potushen avtomaticheski posle " +  FormatDate("%hh:%ii:%ss", sek)  + " sek. prostoya/bezdejstviya! ")
  Mx = pt\x
  My = pt\y
  
EndProcedure

CreateThread(@MonicOff(), 0)

; MonicOff()
Wh=50
Ww=250
OpenWindow(0, 0, 0, Ww, Wh, "", #PB_Window_BorderLess|#PB_Window_ScreenCentered)
SetClassLongPtr_(WindowID(0), #GCL_STYLE, $00020000)
TextGadget(0, 0, 0, Ww-0, Wh-0, "", #PB_Text_Center)

HideWindow(0, #True)
; Dobavlenie znachka v oblast' uvedomlenij (SysTray) 
  AddSysTrayIcon(0, WindowID(0), CatchImage(0, ?Logo))
  ; GetIdleTime()
  OnOff(#True)
 If CreatePopupMenu(0)      ; Nachinaetsya sozdanie vsplyvayushhego Menyu...
   MenuItem(1, "Vykhod")
   MenuBar()
   MenuItem(2, "Pogasit' ehkran") 
EndIf
 StickyWindow(0,1)
 If MessagaON>0
   HideWindow(0, #False) ;  Messaga dlya uvedomleniya
 EndIf
 
Repeat
  Select WaitWindowEvent()
      
      
      
    Case #PB_Event_CloseWindow : Break
    Case #PB_Event_Timer  
      GetIdleTime()
    Case #PB_Event_SysTray
      If EventType()=#PB_EventType_RightClick 
         DisplayPopupMenu(0, WindowID(0))   
       EndIf 
    Case #PB_Event_Menu        
          Select EventMenu()    
            Case 1 :End
            Case 2
               OnOff(#True)
          EndSelect
  EndSelect
ForEver
CloseLibrary(0)
DataSection
    Logo: 
      IncludeBinary "offmon.ico"
  EndDataSection