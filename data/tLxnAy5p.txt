import mysql.connector
from tkinter import *
from tkinter import ttk
from tkinter import messagebox
import tkinter as tk


# connection for my mysql database
def connection():
    mydb = mysql.connector.connect(
        host='localhost',
        password='022301',
        user='root',
        port='3306',
        database='rodriguezdb'
    )
    return mydb


def refresh_table():
    for data in my_tree.get_children():
        my_tree.delete(data)

    for array in read():
        my_tree.insert(parent='', index='end', iid=array, text="", values=array, tag="orow")

    my_tree.tag_configure('orow', background='#EEEEEE', font=('Arial', 8))
    my_tree.grid(row=11, column=0, columnspan=16, rowspan=13, padx=0, pady=0)


root = Tk()
root.title("Student Registration System")
root.geometry("1430x600")
my_tree = ttk.Treeview(root)

# placeholders for entry
ph1 = tk.StringVar()
ph2 = tk.StringVar()
ph3 = tk.StringVar()
ph4 = tk.StringVar()
ph5 = tk.StringVar()
ph6 = tk.StringVar()
ph7 = tk.StringVar()
ph8 = tk.StringVar()
ph9 = tk.StringVar()
ph10 = tk.StringVar()


# placeholder set value function
def setph(word, num):
    if num == 1:
        ph1.set(word)
    if num == 2:
        ph2.set(word)
    if num == 3:
        ph3.set(word)
    if num == 4:
        ph4.set(word)
    if num == 5:
        ph5.set(word)
    if num == 6:
        ph6.set(word)
    if num == 7:
        ph7.set(word)
    if num == 8:
        ph8.set(word)


def read():
    conn = connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM student_information")
    results = cursor.fetchall()
    conn.commit()
    conn.close()
    return results


def add():
    student_number = str(student_number_entry.get())
    name = str(name_entry.get())
    address = str(address_entry.get())
    college_level = str(college_level_entry.get())
    program = str(program_entry.get())
    email = str(email_entry.get())
    contact_number = str(contact_number_entry.get())
    gender = str(gender_entry.get())

    if (student_number == "" or student_number == " ") or (name == "" or name == " ") or (address == "" or address == " ") or (
            college_level == "" or college_level == " ") or (program == "" or program == " ") or (email == "" or email == " ") or (
            contact_number == "" or contact_number == " ") or (gender == "" or gender == " "):
        messagebox.showinfo("Error", "Please fill up the blank entry")
        return
    else:
        try:
            conn = connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO student_information VALUES ('" + student_number + "','" + name + "','" + address + "','" + college_level + "','" +
                program + "','" + email + "','" + contact_number + "','" + gender + "') ")
            conn.commit()
            conn.close()

        except:
            messagebox.showinfo("Error", "Stud ID already exist")
            return

    refresh_table()


def delete():
    decision = messagebox.askquestion("Warning!!", "Delete the selected data?")
    if decision != "yes":
        return
    else:
        selected_item = my_tree.selection()[0]
        deleteData = str(my_tree.item(selected_item)['values'][0])
        try:
            conn = connection()
            cursor = conn.cursor()
            cursor.execute("DELETE FROM student_information WHERE student_number='" + str(deleteData) + "'")
            conn.commit()
            conn.close()

        except:
            messagebox.showinfo("Error", "Sorry an error occured")
            return

        refresh_table()


def select():
    try:
        selected_item = my_tree.selection()[0]
        student_number = str(my_tree.item(selected_item)['values'][0])
        name = str(my_tree.item(selected_item)['values'][1])
        address = str(my_tree.item(selected_item)['values'][2])
        college_level = str(my_tree.item(selected_item)['values'][3])
        program = str(my_tree.item(selected_item)['values'][4])
        email = str(my_tree.item(selected_item)['values'][5])
        contact_number = str(my_tree.item(selected_item)['values'][6])
        gender = str(my_tree.item(selected_item)['values'][7])

        setph(student_number, 1)
        setph(name, 2)
        setph(address, 3)
        setph(college_level, 4)
        setph(program, 5)
        setph(email, 6)
        setph(contact_number, 7)
        setph(gender, 8)

    except:
        messagebox.showinfo("Error", "Please select a data row")


def search():
    student_number = str(student_number_entry.get())
    name = str(name_entry.get())
    address = str(address_entry.get())
    college_level = str(college_level_entry.get())
    program = str(program_entry.get())
    email = str(email_entry.get())
    contact_number = str(contact_number_entry.get())
    gender = str(gender_entry.get())

    conn = connection()
    cursor = conn.cursor()
    cursor.execute("SELECT * FROM student_information WHERE student_number='" +
                   student_number + "' or name='" +
                   name + "' or address='" +
                   address + "' or college_level='" +
                   college_level + "' or program='" +
                   program + "' or email='" +
                   email + "' or contact_number='" +
                   contact_number + "' or gender='" +
                   gender + "' ")

    try:
        result = cursor.fetchall()

        for num in range(0, 8):
            setph(result[0][num], (num + 1))

        conn.commit()
        conn.close()
    except:
        messagebox.showinfo("Error", "No data found")


def update():
    selected_student_number = ""

    try:
        selected_item = my_tree.selection()[0]
        selected_student_number = str(my_tree.item(selected_item)['values'][0])
    except:
        messagebox.showinfo("Error", "Please select a data row")

    student_number = str(student_number_entry.get())
    name = str(name_entry.get())
    address = str(address_entry.get())
    college_level = str(college_level_entry.get())
    program = str(program_entry.get())
    email = str(email_entry.get())
    contact_number = str(contact_number_entry.get())
    gender = str(gender_entry.get())

    if (student_number == "" or student_number == " ") or (name == "" or name == " ") or (address == "" or address == " ") or (
            college_level == "" or college_level == " ") or (program == "" or program == " ") or (email == "" or email == " ") or (
            contact_number == "" or contact_number == " ") or (gender == "" or gender == " "):
        messagebox.showinfo("Error", "Please fill up the blank entry")
        return
    else:
        try:
            conn = connection()
            cursor = conn.cursor()
            cursor.execute("UPDATE student_information SET student_number='" +
                           student_number + "', name='" +
                           name + "', address='" +
                           address + "', college_level='" +
                           college_level + "', program='" +
                           program + "', email='" +
                           email + "', contact_number='" +
                           contact_number + "', gender='" +
                           gender + "' WHERE student_number='" +
                           selected_student_number + "' ")
            conn.commit()
            conn.close()
        except:
            messagebox.showinfo("Error", "Student ID already exist")
            return

    refresh_table()


label = Label(root, text="Student Registration System (CRUD MATRIX)", font=('Arial Bold', 30))
label.grid(row=0, column=0, columnspan=8, rowspan=2, padx=0, pady=0)

student_number_label = Label(root, text="Student Number", font=('Arial', 15))
name_label = Label(root, text="Full Name", font=('Arial', 15))
address_label = Label(root, text="Address", font=('Arial', 15))
college_level_label = Label(root, text="College Level", font=('Arial', 15))
program_label = Label(root, text="Program", font=('Arial', 15))
email_label = Label(root, text="Email", font=('Arial', 15))
contact_number_label = Label(root, text="Contact Number", font=('Arial', 15))
gender_label = Label(root, text="Gender", font=('Arial', 15))


student_number_label.grid(row=3, column=0, columnspan=1, padx=0, pady=5)
name_label.grid(row=4, column=0, columnspan=1, padx=0, pady=5)
address_label.grid(row=5, column=0, columnspan=1, padx=0, pady=5)
college_level_label.grid(row=6, column=0, columnspan=1, padx=0, pady=5)
program_label.grid(row=7, column=0, columnspan=1, padx=0, pady=5)
email_label.grid(row=8, column=0, columnspan=1, padx=0, pady=5)
contact_number_label.grid(row=9, column=0, columnspan=1, padx=0, pady=5)
gender_label.grid(row=10, column=0, columnspan=1, padx=0, pady=5)

student_number_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph1)
name_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph2)
address_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph3)
college_level_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph4)
program_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph5)
email_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph6)
contact_number_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph7)
gender_entry = Entry(root, width=55, bd=5, font=('Arial', 15), textvariable=ph8)

student_number_entry.grid(row=3, column=1, columnspan=4, padx=0, pady=0)
name_entry.grid(row=4, column=1, columnspan=4, padx=0, pady=0)
address_entry.grid(row=5, column=1, columnspan=4, padx=0, pady=0)
college_level_entry.grid(row=6, column=1, columnspan=4, padx=0, pady=0)
program_entry.grid(row=7, column=1, columnspan=4, padx=0, pady=0)
email_entry.grid(row=8, column=1, columnspan=4, padx=0, pady=0)
contact_number_entry.grid(row=9, column=1, columnspan=4, padx=0, pady=0)
gender_entry.grid(row=10, column=1, columnspan=4, padx=0, pady=0)


addBtn = Button(
    root, text="Add", padx=5, pady=5, width=5,
    bd=5, font=('Arial', 15), bg="#84F894", command=add)
updateBtn = Button(
    root, text="Update", padx=5, pady=5, width=5,
    bd=5, font=('Arial', 15), bg="#84E8F8", command=update)
deleteBtn = Button(
    root, text="Delete", padx=5, pady=5, width=5,
    bd=5, font=('Arial', 15), bg="#FF9999", command=delete)
searchBtn = Button(
    root, text="Search", padx=5, pady=5, width=5,
    bd=5, font=('Arial', 15), bg="#F4FE82", command=search)

selectBtn = Button(
    root, text="Select", padx=5, pady=5, width=5,
    bd=5, font=('Arial', 15), bg="#EEEEEE", command=select)

addBtn.grid(row=1, column=7, columnspan=1, rowspan=2)
updateBtn.grid(row=3, column=7, columnspan=1, rowspan=2)
deleteBtn.grid(row=4, column=7, columnspan=1, rowspan=2)
searchBtn.grid(row=5, column=7, columnspan=1, rowspan=2)
selectBtn.grid(row=6, column=7, columnspan=1, rowspan=2)


# box view of database
style = ttk.Style()
style.configure("Treeview.Heading", font=('Arial Bold', 10))

my_tree['columns'] = ("student_number", "name", "address", "college_level", "program", "email", "contact_number", "gender")

my_tree.column("student_number", width=80, stretch=NO)
my_tree.column("name", anchor=W, width=250)
my_tree.column("address", anchor=W, width=350)
my_tree.column("college_level", anchor=W, width=100)
my_tree.column("program", anchor=W, width=70)
my_tree.column("email", anchor=W, width=200)
my_tree.column("contact_number", anchor=W, width=110)
my_tree.column("gender", anchor=W, width=60)

my_tree.heading("student_number", text="Student ID", anchor=W)
my_tree.heading("name", text="Full Name", anchor=W)
my_tree.heading("address", text="Address", anchor=W)
my_tree.heading("college_level", text="College Level", anchor=W)
my_tree.heading("program", text="Program", anchor=W)
my_tree.heading("email", text="Email", anchor=W)
my_tree.heading("contact_number", text="Contact Number", anchor=W)
my_tree.heading("gender", text="Gender", anchor=W)
refresh_table()

root.mainloop()