海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥麻花特开心@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"二级解析\",\"path\":\"p\",\"rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlet html = request(url);\\nlet alist = pdfa(html, \\\"body&&a\\\");\\nlet arr = alist.map(it => {\\n    return {\\n        //html: it,\\n        text: pdfh(it, \\\"a&&Text\\\"),\\n        title: pdfh(it, \\\"a&&title\\\"),\\n        href: pd(it, \\\"a&&href\\\", url)\\n    }\\n});\\n//log(arr);\\nlet debug = false;\\n\\nfunction clearText(it) {\\n    return it.replace(/第|集|章/g, \\\"\\\");\\n}\\n\\nfunction isMovie(it) {\\n    if (it == null || it.text == null) {\\n        return false;\\n    }\\n    let tit = it.title || \\\"\\\";\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\" || it.length > 8) {\\n        return false;\\n    }\\n    //排除\\n    let reg = /\\\\.|高清直播|写真推荐|影院|影视|蓝光电影|高清电影|第一季|第二季|第三季|第四季|第五季/;\\n    if (tit != \\\"\\\" && !tit.includes(it) || reg.test(it)) {\\n        return false;\\n    }\\n    return it.match(/原画|备用|蓝光|超清|高清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\n}\\n\\nfunction notChapter(it) {\\n    if (it == null || it.text == null) {\\n        return true;\\n    }\\n    return it.text.match(/[0-9]\\\\.[0-9]分/);\\n}\\n\\nfunction isChapter(it, pre, next) {\\n    if (notChapter(it)) {\\n        //优先排除\\n        return false;\\n    }\\n    //判断是不是电影\\n    if (isMovie(it)) {\\n        return true;\\n    }\\n    return isChapter0(it, pre) || isChapter0(it, next);\\n}\\n\\nfunction getChapterNum(it) {\\n    if (it == null || it.text == null) {\\n        return -1;\\n    }\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\") {\\n        return -1;\\n    }\\n    it = clearText(it);\\n    let reg = /^[0-9]*$/;\\n    if (!reg.test(it)) {\\n        return -1;\\n    }\\n    it = parseInt(it);\\n    if (isNaN(it)) {\\n        return -1;\\n    }\\n    if (it > 1900 && it < 2100) {\\n        return -1;\\n    }\\n    return it;\\n}\\n\\nfunction isChapter0(it, brother) {\\n    /*if (debug) {\\n        log({\\n            it: it,\\n            brother: brother\\n        });\\n    }*/\\n    it = getChapterNum(it);\\n    //if (debug) log(it);\\n    if (it < 0) {\\n        return false;\\n    }\\n    brother = getChapterNum(brother);\\n    //if (debug) log(brother);\\n    if (brother < 0) {\\n        return false;\\n    }\\n    return it - brother < 2 && it - brother > -2;\\n}\\n\\nlet _web = $.toString(() => {\\n    let urls = _getUrls();\\n    let reg = /\\\\.html|\\\\.css|\\\\.js/;\\n    for (let k in urls) {\\n        if (!reg.test(urls[k]) && urls[k].match(/\\\\.mp4|\\\\.m3u8/)) {\\n            fy_bridge_app.log(urls[k]);\\n            return fy_bridge_app.getHeaderUrl(urls[k].replace(/.*?url=/, \\\"\\\")) + \\\"#ignoreImg=true#\\\";\\n        }\\n    }\\n});\\n\\nlet web = getItem('web', '0') == \\\"1\\\";\\n\\nfor (let i = 0; i < arr.length; i++) {\\n    let it = arr[i];\\n    let t = it.text;\\n    if (!it.href || it.href == \\\"\\\") {\\n        continue;\\n    }\\n    let pre = i == 0 ? null : arr[i - 1];\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\n    if (isChapter(it, pre, next)) {\\n        if (web) {\\n            var urlx = \\\"webRule://\\\" + it.href + \\\"@\\\" + _web;\\n            var extrax = {\\n                jsLoadingInject: true,\\n                id: it.href,\\n                blockRules: ['.m4a', '.mp3', '.flv', '.avi', '.3gp', '.mpeg', '.wmv', '.mov', '.rmvb', '.gif', '.jpeg', '.png', '.ico', '.svg']\\n            };\\n        } else {\\n            var urlx = \\\"video://\\\" + it.href;\\n            var extrax = {\\n                id: it.href\\n            };\\n        }\\n        d.push({\\n            title: t,\\n            url: urlx,\\n            col_type: \\\"text_3\\\",\\n            extra: extrax\\n        });\\n    }\\n}\\nif (d.length == 0) {\\n    //匹配失败\\n    d.push({\\n        title: \\\"\\\",\\n        url: url,\\n        col_type: \\\"x5_webview_single\\\",\\n        desc: \\\"float&&100%\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            canBack: true\\n        }\\n    });\\n    toast(\\\"AI匹配失败，已使用X5加载\\\");\\n    setResult(d);\\n} else {\\n    //为线路加分割线\\n    let d2 = [];\\n    for (let i = 0; i < d.length; i++) {\\n        d2.push(d[i]);\\n        if (i < d.length - 1) {\\n            let it = d[i];\\n            let t1 = parseInt(clearText(it.title));\\n            let next = d[i + 1];\\n            let t2 = parseInt(clearText(next.title));\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"line_blank\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n            }\\n        }\\n    }\\n\\n    setResult(d2);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"聚合搜索\",\"path\":\"pro\",\"rule\":\"var d = [];\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(() => {\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: \\\"input\\\",\\n        desc: \\\"请输入关键词，尽量少字不要多字\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"sou\\\", \\\"\\\"),\\n            onChange: $.toString(() => {\\n                putMyVar(\\\"sou\\\", input);\\n            })\\n        }\\n    });\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"sou\\\");\\n    }));\\n}\\n\\nlet s = getMyVar(\\\"sou\\\", \\\"\\\");\\nlet r = \\\"\\\";\\nif (s != \\\"\\\") {\\n    MY_URL = \\\"https://www.qimaitv.com/index.php?s=api&c=api&m=getplaylist&title=\\\" + s + \\\"&id=undefined&page=1\\\";\\n    let html = fetch(MY_URL, {\\n        headers: {\\n            \\\"X-Requested-With\\\": \\\"XMLHttpRequest\\\"\\n        }\\n    });\\n    let info = JSON.parse(html).info;\\n    let data = pdfa(info, \\\"body&&a\\\");\\n    //log(data);\\n    let {\\n        wrap\\n    } = $.require(\\\"hiker://page/tool\\\");\\n\\n    for (let it of data) {\\n        let t = pdfh(it, \\\"h4&&Text\\\");\\n        if (!t) {\\n            continue;\\n        }\\n        d.push({\\n            title: wrap(t, s),\\n            url: \\\"hiker://page/p?u=\\\" + base64Encode(pd(it, \\\"a&&href\\\")),\\n            col_type: \\\"text_1\\\",\\n            desc: (pdfa(it, \\\"a&&span\\\") || []).map(i => pdfh(i, \\\"Text\\\")).join(\\\" \\\"),\\n            pic_url: \\\"\\\",\\n            extra: {\\n                inheritTitle: false\\n            }\\n        });\\n    }\\n} else {\\n    d.push({\\n        title: \\\"AI技术\\\",\\n        url: \\\"confirm://基于AI识片自动分析源码技术，代码完全开源，数据来源于原网站，软件和规则不提供任何内容.js:''\\\",\\n        col_type: \\\"flex_button\\\"\\n    }, {\\n        title: getItem('web', '0') == \\\"0\\\" ? \\\"视频嗅探\\\" : \\\"Web通免\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            if (getItem('web', '0') == \\\"0\\\") {\\n                setItem('web', '1')\\n            } else {\\n                setItem('web', '0')\\n            }\\n            refreshPage();\\n            return 'hiker://empty'\\n        }),\\n        col_type: \\\"flex_button\\\"\\n    });\\n    d.push({\\n        title: \\\"轻麦\\\",\\n        url: \\\"hiker://page/ysfx?r=\\\" + MY_RULE.title + \\\"##https://www.qimaitv.com/\\\",\\n        col_type: \\\"flex_button\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"\\\"\\n    });\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tool\",\"rule\":\"function wrap(text, s) {\\n    return text.includes(\\\"““””\\\") ? text : \\\"““””\\\" + text.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\")\\n}\\n$.exports = {\\n    wrap: wrap\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索页面\",\"path\":\"soup\",\"rule\":\"js:\\nvar d = [];\\nif (MY_PARAMS.key && getMyVar(\\\"use\\\", \\\"\\\") == \\\"\\\") {\\n    putMyVar(\\\"sou\\\", MY_PARAMS.key);\\n    putMyVar(\\\"use\\\", \\\"1\\\");\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"use\\\");\\n    }));\\n}\\n$.require('hiker://page/pro')\"},{\"col_type\":\"movie_3\",\"name\":\"u\",\"path\":\"u\",\"rule\":\"$.exports = function(rule, origin) {\\n    return $.toString((rule, origin) => {\\n        let host = origin.replace(new RegExp(\\\"http://|https://\\\"), \\\"\\\").split(\\\"/\\\")[0];\\n        let hosts = host.split(\\\".\\\");\\n        if (hosts.length > 2) {\\n            host = hosts[hosts.length - 2] + \\\".\\\" + hosts[hosts.length - 1];\\n        }\\n        if (input.startsWith(\\\"magnet\\\")) {\\n            confirm({\\n                title: \\\"温馨提示\\\",\\n                content: \\\"检测到新的磁链地址，点击确定按钮即可播放，点击取消按钮可以复制链接\\\",\\n                confirm: $.toString((mag) => {\\n                    return mag;\\n                }, input),\\n                cancel: $.toString((mag) => {\\n                    return \\\"copy://\\\" + mag\\n                }, input)\\n            })\\n            return true;\\n        } else if (!input.includes(host) && input.startsWith(\\\"http\\\")) {\\n            log(input);\\n            return $.toString((url, rule) => {\\n                let white = [\\n                    \\\"douyin\\\",\\n                    \\\"douban\\\",\\n                    \\\"ixigua.com\\\",\\n                    \\\"kuaishou\\\",\\n                    \\\"bilibili\\\",\\n                    \\\"weibo\\\",\\n                    \\\"weixin\\\",\\n                    \\\"baidu\\\",\\n                    \\\"zmk.\\\",\\n                    \\\"subhd\\\",\\n                    \\\"thunder\\\",\\n                    \\\"xinjuc\\\",\\n                    \\\"grab4k\\\",\\n                    \\\"/bt\\\",\\n                    \\\"jsr10\\\",\\n                    \\\"assrt\\\",\\n                    \\\"quark\\\"\\n                ];\\n                let inWhite = white.filter(it => url.includes(it)).length > 0;\\n                if (inWhite) {\\n                    //跳网页\\n                    fy_bridge_app.open(JSON.stringify({\\n                        title: \\\"详情\\\",\\n                        url: \\\"hiker://page/ysfx?rule=\\\" + rule + \\\"&r=\\\" + rule + \\\"##\\\" + url,\\n                    }))\\n                } else {\\n                    //AI解析\\n                    fy_bridge_app.open(JSON.stringify({\\n                        title: document.title,\\n                        url: \\\"hiker://page/p?rule=\\\" + rule + \\\"&r=\\\" + rule + \\\"&u=\\\" + fy_bridge_app.base64Encode(url),\\n                    }))\\n                }\\n            }, input, rule);\\n        } else if (!input.startsWith(\\\"http\\\")) {\\n            log(input);\\n            //能唤起APP的白名单\\n            let white = [\\n                \\\"qklink\\\",\\n                \\\"bdnetdisk\\\",\\n                \\\"xunleiapp\\\"\\n            ];\\n            let inWhite = white.filter(it => input.startsWith(it)).length > 0;\\n            if (!inWhite) {\\n                return false;\\n            }\\n            return $.toString((url, rule) => {\\n                fy_bridge_app.openThirdApp && fy_bridge_app.openThirdApp(url);\\n            }, input, rule)\\n        } else {\\n\\n        }\\n    }, rule, origin);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"广告拦截\",\"path\":\"ad\",\"rule\":\"海阔视界规则分享，当前分享的是：广告网址拦截￥ad_url_rule￥/ad/&&.gif&&.GIF&&/sh/to/\"},{\"col_type\":\"movie_3\",\"name\":\"ysfx\",\"path\":\"ysfx\",\"rule\":\"js:\\nvar d = [];\\nlet rule = getParam(\\\"r\\\").split(\\\"##\\\")[0];\\nlet url = MY_URL.split(\\\"##\\\")[1];\\nlet ite = $.require(\\\"hiker://page/u\\\")(rule, getHome(url));\\nlet js = $.toString(() => {\\n    try {\\n        if (document.title && document.title.length) {\\n            let r = $$$().lazyRule((t) => {\\n                setPageTitle(t);\\n            }, document.title);\\n            fy_bridge_app.parseLazyRule(r);\\n        }\\n    } catch (e) {\\n        fy_bridge_app.log(e.toString());\\n    }\\n});\\nlet ad = JSON.parse(fetch(\\\"hiker://page/ad\\\")).rule;\\nad = ad.split(\\\"￥\\\")[2];\\nlet blockRules = ad.split(\\\"&&\\\");\\nlog(blockRules);\\nd.push({\\n    title: \\\"\\\",\\n    url: url,\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"100%&&float\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        urlInterceptor: ite,\\n        js: js,\\n        canBack: true,\\n        jsLoadingInject: true,\\n        floatVideo: true,\\n        blockRules: blockRules\\n    }\\n});\\nd.push({\\n    col_type: \\\"line\\\",\\n    extra: {\\n        id: url\\n    }\\n});\\nsetResult(d);\"}],\"params\":\"{\\\"inheritTitle\\\":false}\",\"saved\":false,\"title\":\"AI轻麦\",\"version\":0,\"url\":\"hiker://page/p?u=aHR0cHM6Ly93d3cuNjA4MGR5Mi5jb20vdmlkZW8vNjM0ODIuaHRtbA==\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlet html = request(url);\\nlet alist = pdfa(html, \\\"body&&a\\\");\\nlet arr = alist.map(it => {\\n    return {\\n        //html: it,\\n        text: pdfh(it, \\\"a&&Text\\\"),\\n        title: pdfh(it, \\\"a&&title\\\"),\\n        href: pd(it, \\\"a&&href\\\", url)\\n    }\\n});\\n//log(arr);\\nlet debug = false;\\n\\nfunction clearText(it) {\\n    return it.replace(/第|集|章/g, \\\"\\\");\\n}\\n\\nfunction isMovie(it) {\\n    if (it == null || it.text == null) {\\n        return false;\\n    }\\n    let tit = it.title || \\\"\\\";\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\" || it.length > 8) {\\n        return false;\\n    }\\n    //排除\\n    let reg = /\\\\.|高清直播|写真推荐|影院|影视|蓝光电影|高清电影|第一季|第二季|第三季|第四季|第五季/;\\n    if (tit != \\\"\\\" && !tit.includes(it) || reg.test(it)) {\\n        return false;\\n    }\\n    return it.match(/原画|备用|蓝光|超清|高清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\n}\\n\\nfunction notChapter(it) {\\n    if (it == null || it.text == null) {\\n        return true;\\n    }\\n    return it.text.match(/[0-9]\\\\.[0-9]分/);\\n}\\n\\nfunction isChapter(it, pre, next) {\\n    if (notChapter(it)) {\\n        //优先排除\\n        return false;\\n    }\\n    //判断是不是电影\\n    if (isMovie(it)) {\\n        return true;\\n    }\\n    return isChapter0(it, pre) || isChapter0(it, next);\\n}\\n\\nfunction getChapterNum(it) {\\n    if (it == null || it.text == null) {\\n        return -1;\\n    }\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\") {\\n        return -1;\\n    }\\n    it = clearText(it);\\n    let reg = /^[0-9]*$/;\\n    if (!reg.test(it)) {\\n        return -1;\\n    }\\n    it = parseInt(it);\\n    if (isNaN(it)) {\\n        return -1;\\n    }\\n    if (it > 1900 && it < 2100) {\\n        return -1;\\n    }\\n    return it;\\n}\\n\\nfunction isChapter0(it, brother) {\\n    /*if (debug) {\\n        log({\\n            it: it,\\n            brother: brother\\n        });\\n    }*/\\n    it = getChapterNum(it);\\n    //if (debug) log(it);\\n    if (it < 0) {\\n        return false;\\n    }\\n    brother = getChapterNum(brother);\\n    //if (debug) log(brother);\\n    if (brother < 0) {\\n        return false;\\n    }\\n    return it - brother < 2 && it - brother > -2;\\n}\\n\\nlet _web = $.toString(() => {\\n    let urls = _getUrls();\\n    let reg = /\\\\.html|\\\\.css|\\\\.js/;\\n    for (let k in urls) {\\n        if (!reg.test(urls[k]) && urls[k].match(/\\\\.mp4|\\\\.m3u8/)) {\\n            fy_bridge_app.log(urls[k]);\\n            return fy_bridge_app.getHeaderUrl(urls[k].replace(/.*?url=/, \\\"\\\")) + \\\"#ignoreImg=true#\\\";\\n        }\\n    }\\n});\\n\\nlet web = getItem('web', '0') == \\\"1\\\";\\n\\nfor (let i = 0; i < arr.length; i++) {\\n    let it = arr[i];\\n    let t = it.text;\\n    if (!it.href || it.href == \\\"\\\") {\\n        continue;\\n    }\\n    let pre = i == 0 ? null : arr[i - 1];\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\n    if (isChapter(it, pre, next)) {\\n        if (web) {\\n            var urlx = \\\"webRule://\\\" + it.href + \\\"@\\\" + _web;\\n            var extrax = {\\n                jsLoadingInject: true,\\n                id: it.href,\\n                blockRules: ['.m4a', '.mp3', '.flv', '.avi', '.3gp', '.mpeg', '.wmv', '.mov', '.rmvb', '.gif', '.jpeg', '.png', '.ico', '.svg']\\n            };\\n        } else {\\n            var urlx = \\\"video://\\\" + it.href;\\n            var extrax = {\\n                id: it.href\\n            };\\n        }\\n        d.push({\\n            title: t,\\n            url: urlx,\\n            col_type: \\\"text_3\\\",\\n            extra: extrax\\n        });\\n    }\\n}\\nif (d.length == 0) {\\n    //匹配失败\\n    d.push({\\n        title: \\\"\\\",\\n        url: url,\\n        col_type: \\\"x5_webview_single\\\",\\n        desc: \\\"float&&100%\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            canBack: true\\n        }\\n    });\\n    toast(\\\"AI匹配失败，已使用X5加载\\\");\\n    setResult(d);\\n} else {\\n    //为线路加分割线\\n    let d2 = [];\\n    for (let i = 0; i < d.length; i++) {\\n        d2.push(d[i]);\\n        if (i < d.length - 1) {\\n            let it = d[i];\\n            let t1 = parseInt(clearText(it.title));\\n            let next = d[i + 1];\\n            let t2 = parseInt(clearText(next.title));\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"line_blank\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n            }\\n        }\\n    }\\n\\n    setResult(d2);\\n}\",\"group\":\"③AI\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级解析\\\",\\\"path\\\":\\\"p\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet url = base64Decode(getParam(\\\\\\\"u\\\\\\\"));\\\\nlet html = request(url);\\\\nlet alist = pdfa(html, \\\\\\\"body&&a\\\\\\\");\\\\nlet arr = alist.map(it => {\\\\n    return {\\\\n        //html: it,\\\\n        text: pdfh(it, \\\\\\\"a&&Text\\\\\\\"),\\\\n        title: pdfh(it, \\\\\\\"a&&title\\\\\\\"),\\\\n        href: pd(it, \\\\\\\"a&&href\\\\\\\", url)\\\\n    }\\\\n});\\\\n//log(arr);\\\\nlet debug = false;\\\\n\\\\nfunction clearText(it) {\\\\n    return it.replace(/第|集|章/g, \\\\\\\"\\\\\\\");\\\\n}\\\\n\\\\nfunction isMovie(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return false;\\\\n    }\\\\n    let tit = it.title || \\\\\\\"\\\\\\\";\\\\n    it = it.text || \\\\\\\"\\\\\\\";\\\\n    if (it == \\\\\\\"\\\\\\\" || it.length > 8) {\\\\n        return false;\\\\n    }\\\\n    //排除\\\\n    let reg = /\\\\\\\\.|高清直播|写真推荐|影院|影视|蓝光电影|高清电影|第一季|第二季|第三季|第四季|第五季/;\\\\n    if (tit != \\\\\\\"\\\\\\\" && !tit.includes(it) || reg.test(it)) {\\\\n        return false;\\\\n    }\\\\n    return it.match(/原画|备用|蓝光|超清|高清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\\\n}\\\\n\\\\nfunction notChapter(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return true;\\\\n    }\\\\n    return it.text.match(/[0-9]\\\\\\\\.[0-9]分/);\\\\n}\\\\n\\\\nfunction isChapter(it, pre, next) {\\\\n    if (notChapter(it)) {\\\\n        //优先排除\\\\n        return false;\\\\n    }\\\\n    //判断是不是电影\\\\n    if (isMovie(it)) {\\\\n        return true;\\\\n    }\\\\n    return isChapter0(it, pre) || isChapter0(it, next);\\\\n}\\\\n\\\\nfunction getChapterNum(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return -1;\\\\n    }\\\\n    it = it.text || \\\\\\\"\\\\\\\";\\\\n    if (it == \\\\\\\"\\\\\\\") {\\\\n        return -1;\\\\n    }\\\\n    it = clearText(it);\\\\n    let reg = /^[0-9]*$/;\\\\n    if (!reg.test(it)) {\\\\n        return -1;\\\\n    }\\\\n    it = parseInt(it);\\\\n    if (isNaN(it)) {\\\\n        return -1;\\\\n    }\\\\n    if (it > 1900 && it < 2100) {\\\\n        return -1;\\\\n    }\\\\n    return it;\\\\n}\\\\n\\\\nfunction isChapter0(it, brother) {\\\\n    /*if (debug) {\\\\n        log({\\\\n            it: it,\\\\n            brother: brother\\\\n        });\\\\n    }*/\\\\n    it = getChapterNum(it);\\\\n    //if (debug) log(it);\\\\n    if (it < 0) {\\\\n        return false;\\\\n    }\\\\n    brother = getChapterNum(brother);\\\\n    //if (debug) log(brother);\\\\n    if (brother < 0) {\\\\n        return false;\\\\n    }\\\\n    return it - brother < 2 && it - brother > -2;\\\\n}\\\\n\\\\nlet _web = $.toString(() => {\\\\n    let urls = _getUrls();\\\\n    let reg = /\\\\\\\\.html|\\\\\\\\.css|\\\\\\\\.js/;\\\\n    for (let k in urls) {\\\\n        if (!reg.test(urls[k]) && urls[k].match(/\\\\\\\\.mp4|\\\\\\\\.m3u8/)) {\\\\n            fy_bridge_app.log(urls[k]);\\\\n            return fy_bridge_app.getHeaderUrl(urls[k].replace(/.*?url=/, \\\\\\\"\\\\\\\")) + \\\\\\\"#ignoreImg=true#\\\\\\\";\\\\n        }\\\\n    }\\\\n});\\\\n\\\\nlet web = getItem('web', '0') == \\\\\\\"1\\\\\\\";\\\\n\\\\nfor (let i = 0; i < arr.length; i++) {\\\\n    let it = arr[i];\\\\n    let t = it.text;\\\\n    if (!it.href || it.href == \\\\\\\"\\\\\\\") {\\\\n        continue;\\\\n    }\\\\n    let pre = i == 0 ? null : arr[i - 1];\\\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\\\n    if (isChapter(it, pre, next)) {\\\\n        if (web) {\\\\n            var urlx = \\\\\\\"webRule://\\\\\\\" + it.href + \\\\\\\"@\\\\\\\" + _web;\\\\n            var extrax = {\\\\n                jsLoadingInject: true,\\\\n                id: it.href,\\\\n                blockRules: ['.m4a', '.mp3', '.flv', '.avi', '.3gp', '.mpeg', '.wmv', '.mov', '.rmvb', '.gif', '.jpeg', '.png', '.ico', '.svg']\\\\n            };\\\\n        } else {\\\\n            var urlx = \\\\\\\"video://\\\\\\\" + it.href;\\\\n            var extrax = {\\\\n                id: it.href\\\\n            };\\\\n        }\\\\n        d.push({\\\\n            title: t,\\\\n            url: urlx,\\\\n            col_type: \\\\\\\"text_3\\\\\\\",\\\\n            extra: extrax\\\\n        });\\\\n    }\\\\n}\\\\nif (d.length == 0) {\\\\n    //匹配失败\\\\n    d.push({\\\\n        title: \\\\\\\"\\\\\\\",\\\\n        url: url,\\\\n        col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n        desc: \\\\\\\"float&&100%\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            canBack: true\\\\n        }\\\\n    });\\\\n    toast(\\\\\\\"AI匹配失败，已使用X5加载\\\\\\\");\\\\n    setResult(d);\\\\n} else {\\\\n    //为线路加分割线\\\\n    let d2 = [];\\\\n    for (let i = 0; i < d.length; i++) {\\\\n        d2.push(d[i]);\\\\n        if (i < d.length - 1) {\\\\n            let it = d[i];\\\\n            let t1 = parseInt(clearText(it.title));\\\\n            let next = d[i + 1];\\\\n            let t2 = parseInt(clearText(next.title));\\\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n                });\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"line_blank\\\\\\\"\\\\n                });\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n                });\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    setResult(d2);\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"聚合搜索\\\",\\\"path\\\":\\\"pro\\\",\\\"rule\\\":\\\"var d = [];\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: \\\\\\\"搜索\\\\\\\",\\\\n        url: $.toString(() => {\\\\n            refreshPage();\\\\n            return \\\\\\\"hiker://empty\\\\\\\";\\\\n        }),\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        desc: \\\\\\\"请输入关键词，尽量少字不要多字\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            defaultValue: getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n            onChange: $.toString(() => {\\\\n                putMyVar(\\\\\\\"sou\\\\\\\", input);\\\\n            })\\\\n        }\\\\n    });\\\\n    addListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n        clearMyVar(\\\\\\\"sou\\\\\\\");\\\\n    }));\\\\n}\\\\n\\\\nlet s = getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\");\\\\nlet r = \\\\\\\"\\\\\\\";\\\\nif (s != \\\\\\\"\\\\\\\") {\\\\n    MY_URL = \\\\\\\"https://www.qimaitv.com/index.php?s=api&c=api&m=getplaylist&title=\\\\\\\" + s + \\\\\\\"&id=undefined&page=1\\\\\\\";\\\\n    let html = fetch(MY_URL, {\\\\n        headers: {\\\\n            \\\\\\\"X-Requested-With\\\\\\\": \\\\\\\"XMLHttpRequest\\\\\\\"\\\\n        }\\\\n    });\\\\n    let info = JSON.parse(html).info;\\\\n    let data = pdfa(info, \\\\\\\"body&&a\\\\\\\");\\\\n    //log(data);\\\\n    let {\\\\n        wrap\\\\n    } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n\\\\n    for (let it of data) {\\\\n        let t = pdfh(it, \\\\\\\"h4&&Text\\\\\\\");\\\\n        if (!t) {\\\\n            continue;\\\\n        }\\\\n        d.push({\\\\n            title: wrap(t, s),\\\\n            url: \\\\\\\"hiker://page/p?u=\\\\\\\" + base64Encode(pd(it, \\\\\\\"a&&href\\\\\\\")),\\\\n            col_type: \\\\\\\"text_1\\\\\\\",\\\\n            desc: (pdfa(it, \\\\\\\"a&&span\\\\\\\") || []).map(i => pdfh(i, \\\\\\\"Text\\\\\\\")).join(\\\\\\\" \\\\\\\"),\\\\n            pic_url: \\\\\\\"\\\\\\\",\\\\n            extra: {\\\\n                inheritTitle: false\\\\n            }\\\\n        });\\\\n    }\\\\n} else {\\\\n    d.push({\\\\n        title: \\\\\\\"AI技术\\\\\\\",\\\\n        url: \\\\\\\"confirm://基于AI识片自动分析源码技术，代码完全开源，数据来源于原网站，软件和规则不提供任何内容.js:''\\\\\\\",\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    }, {\\\\n        title: getItem('web', '0') == \\\\\\\"0\\\\\\\" ? \\\\\\\"视频嗅探\\\\\\\" : \\\\\\\"Web通免\\\\\\\",\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n            if (getItem('web', '0') == \\\\\\\"0\\\\\\\") {\\\\n                setItem('web', '1')\\\\n            } else {\\\\n                setItem('web', '0')\\\\n            }\\\\n            refreshPage();\\\\n            return 'hiker://empty'\\\\n        }),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    });\\\\n    d.push({\\\\n        title: \\\\\\\"轻麦\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/ysfx?r=\\\\\\\" + MY_RULE.title + \\\\\\\"##https://www.qimaitv.com/\\\\\\\",\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\n        desc: \\\\\\\"\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\"\\\\n    });\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"工具\\\",\\\"path\\\":\\\"tool\\\",\\\"rule\\\":\\\"function wrap(text, s) {\\\\n    return text.includes(\\\\\\\"““””\\\\\\\") ? text : \\\\\\\"““””\\\\\\\" + text.replace(new RegExp(\\\\\\\"<em>|</em>\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\").replace(new RegExp(s, \\\\\\\"g\\\\\\\"), \\\\\\\"<strong><span style=\\\\\\\\\\\\\\\"color: #1E90FF\\\\\\\\\\\\\\\">\\\\\\\" + s + \\\\\\\"</span></strong>\\\\\\\")\\\\n}\\\\n$.exports = {\\\\n    wrap: wrap\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索页面\\\",\\\"path\\\":\\\"soup\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nif (MY_PARAMS.key && getMyVar(\\\\\\\"use\\\\\\\", \\\\\\\"\\\\\\\") == \\\\\\\"\\\\\\\") {\\\\n    putMyVar(\\\\\\\"sou\\\\\\\", MY_PARAMS.key);\\\\n    putMyVar(\\\\\\\"use\\\\\\\", \\\\\\\"1\\\\\\\");\\\\n    addListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n        clearMyVar(\\\\\\\"use\\\\\\\");\\\\n    }));\\\\n}\\\\n$.require('hiker://page/pro')\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"u\\\",\\\"path\\\":\\\"u\\\",\\\"rule\\\":\\\"$.exports = function(rule, origin) {\\\\n    return $.toString((rule, origin) => {\\\\n        let host = origin.replace(new RegExp(\\\\\\\"http://|https://\\\\\\\"), \\\\\\\"\\\\\\\").split(\\\\\\\"/\\\\\\\")[0];\\\\n        let hosts = host.split(\\\\\\\".\\\\\\\");\\\\n        if (hosts.length > 2) {\\\\n            host = hosts[hosts.length - 2] + \\\\\\\".\\\\\\\" + hosts[hosts.length - 1];\\\\n        }\\\\n        if (input.startsWith(\\\\\\\"magnet\\\\\\\")) {\\\\n            confirm({\\\\n                title: \\\\\\\"温馨提示\\\\\\\",\\\\n                content: \\\\\\\"检测到新的磁链地址，点击确定按钮即可播放，点击取消按钮可以复制链接\\\\\\\",\\\\n                confirm: $.toString((mag) => {\\\\n                    return mag;\\\\n                }, input),\\\\n                cancel: $.toString((mag) => {\\\\n                    return \\\\\\\"copy://\\\\\\\" + mag\\\\n                }, input)\\\\n            })\\\\n            return true;\\\\n        } else if (!input.includes(host) && input.startsWith(\\\\\\\"http\\\\\\\")) {\\\\n            log(input);\\\\n            return $.toString((url, rule) => {\\\\n                let white = [\\\\n                    \\\\\\\"douyin\\\\\\\",\\\\n                    \\\\\\\"douban\\\\\\\",\\\\n                    \\\\\\\"ixigua.com\\\\\\\",\\\\n                    \\\\\\\"kuaishou\\\\\\\",\\\\n                    \\\\\\\"bilibili\\\\\\\",\\\\n                    \\\\\\\"weibo\\\\\\\",\\\\n                    \\\\\\\"weixin\\\\\\\",\\\\n                    \\\\\\\"baidu\\\\\\\",\\\\n                    \\\\\\\"zmk.\\\\\\\",\\\\n                    \\\\\\\"subhd\\\\\\\",\\\\n                    \\\\\\\"thunder\\\\\\\",\\\\n                    \\\\\\\"xinjuc\\\\\\\",\\\\n                    \\\\\\\"grab4k\\\\\\\",\\\\n                    \\\\\\\"/bt\\\\\\\",\\\\n                    \\\\\\\"jsr10\\\\\\\",\\\\n                    \\\\\\\"assrt\\\\\\\",\\\\n                    \\\\\\\"quark\\\\\\\"\\\\n                ];\\\\n                let inWhite = white.filter(it => url.includes(it)).length > 0;\\\\n                if (inWhite) {\\\\n                    //跳网页\\\\n                    fy_bridge_app.open(JSON.stringify({\\\\n                        title: \\\\\\\"详情\\\\\\\",\\\\n                        url: \\\\\\\"hiker://page/ysfx?rule=\\\\\\\" + rule + \\\\\\\"&r=\\\\\\\" + rule + \\\\\\\"##\\\\\\\" + url,\\\\n                    }))\\\\n                } else {\\\\n                    //AI解析\\\\n                    fy_bridge_app.open(JSON.stringify({\\\\n                        title: document.title,\\\\n                        url: \\\\\\\"hiker://page/p?rule=\\\\\\\" + rule + \\\\\\\"&r=\\\\\\\" + rule + \\\\\\\"&u=\\\\\\\" + fy_bridge_app.base64Encode(url),\\\\n                    }))\\\\n                }\\\\n            }, input, rule);\\\\n        } else if (!input.startsWith(\\\\\\\"http\\\\\\\")) {\\\\n            log(input);\\\\n            //能唤起APP的白名单\\\\n            let white = [\\\\n                \\\\\\\"qklink\\\\\\\",\\\\n                \\\\\\\"bdnetdisk\\\\\\\",\\\\n                \\\\\\\"xunleiapp\\\\\\\"\\\\n            ];\\\\n            let inWhite = white.filter(it => input.startsWith(it)).length > 0;\\\\n            if (!inWhite) {\\\\n                return false;\\\\n            }\\\\n            return $.toString((url, rule) => {\\\\n                fy_bridge_app.openThirdApp && fy_bridge_app.openThirdApp(url);\\\\n            }, input, rule)\\\\n        } else {\\\\n\\\\n        }\\\\n    }, rule, origin);\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"广告拦截\\\",\\\"path\\\":\\\"ad\\\",\\\"rule\\\":\\\"海阔视界规则分享，当前分享的是：广告网址拦截￥ad_url_rule￥/ad/&&.gif&&.GIF&&/sh/to/\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"ysfx\\\",\\\"path\\\":\\\"ysfx\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet rule = getParam(\\\\\\\"r\\\\\\\").split(\\\\\\\"##\\\\\\\")[0];\\\\nlet url = MY_URL.split(\\\\\\\"##\\\\\\\")[1];\\\\nlet ite = $.require(\\\\\\\"hiker://page/u\\\\\\\")(rule, getHome(url));\\\\nlet js = $.toString(() => {\\\\n    try {\\\\n        if (document.title && document.title.length) {\\\\n            let r = $$$().lazyRule((t) => {\\\\n                setPageTitle(t);\\\\n            }, document.title);\\\\n            fy_bridge_app.parseLazyRule(r);\\\\n        }\\\\n    } catch (e) {\\\\n        fy_bridge_app.log(e.toString());\\\\n    }\\\\n});\\\\nlet ad = JSON.parse(fetch(\\\\\\\"hiker://page/ad\\\\\\\")).rule;\\\\nad = ad.split(\\\\\\\"￥\\\\\\\")[2];\\\\nlet blockRules = ad.split(\\\\\\\"&&\\\\\\\");\\\\nlog(blockRules);\\\\nd.push({\\\\n    title: \\\\\\\"\\\\\\\",\\\\n    url: url,\\\\n    col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n    desc: \\\\\\\"100%&&float\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        urlInterceptor: ite,\\\\n        js: js,\\\\n        canBack: true,\\\\n        jsLoadingInject: true,\\\\n        floatVideo: true,\\\\n        blockRules: blockRules\\\\n    }\\\\n});\\\\nd.push({\\\\n    col_type: \\\\\\\"line\\\\\\\",\\\\n    extra: {\\\\n        id: url\\\\n    }\\\\n});\\\\nsetResult(d);\\\"}]\"}","title":"麻花特开心"}