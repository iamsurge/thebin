 6.17 KB | None |  
      
/*
 
Потребно е да се направи компјутерска апликација со која ќе се забрза работењето на една аптека. Притоа апликацијата треба да му овозможи на корисникот (фармацевтот) брзо да пребарува низ огромното множество со лекови кои се внесени во системот. Начинот на кој тој треба да пребарува е следен: доволно е да ги внесе првите 3 букви од името на лекот за да може да му се излиста листа од лекови кои ги има во системот. Работата на фармацевтот е да провери дали внесениот лек го има во системот и да му даде информација на клиентот. Информацијата што треба да му ја даде на клиентот е дали лекот се наоѓа на позитивната листа на лекови, која е цената и колку парчиња од лекот има на залиха. Доколку лекот постои клиентот го нарачува со што кажува колку парчиња ќе купи. Оваа акција фармацевтот треба да ја евидентира на системот (односно да ја намали залихата на лекови за онолку парчиња колку што му издал на клиентот). Доколку нарачката на клиентот е поголема од залихата на лекот што ја има во системот, не се презема никаква акција.
 
Влез: Од стандарден влез прво се дава број N кој претставува број на лекови кои ќе бидат внесени во системот. Во наредните N реда се дадени имињата на лековите, дали ги има на позитивната листа (1/0), цената и број на парчиња, сите разделени со по едно празно место. Потоа се даваат редови со имиња на лекови и број на парчиња нарачани од клиентот. За означување на крај се дава зборот KRAJ.
 
Излез: На стандарден излез треба да се испечати за секој од влезовите следната информација: IME POZ/NEG CENA BR_LEKOVI. Доколку лекот не е најден се печати Nema takov lek. Доколку нарачката на клиентот е поголема од залихата се печати Nema dovolno lekovi инаку Napravena naracka.
 
Забелешка: Задачата да се реши со хeш табела. Функцијата со која се врши мапирање на имињата на лековите во број е следна: h(w)=(29∗(29∗(29∗0+ASCII(c1))+ASCII(c2))+ASCII(c3))%102780 каде зборот w=c1c2c3c4c5…. е составен од сите големи букви.
 
Исто така за лековите да се направи посебна класа која како атрибути ќе ги има наведените карактеристики на лекот во системот.
 
Име на класата: Apteka.
 
*/
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;
 
 
public class Apteka {
 
    private static int parse(String s) {
        return Integer.parseInt(s);
    }
    
    public static void main(String[] args) throws NumberFormatException, IOException {
        
        BufferedReader bf = new BufferedReader(new InputStreamReader(System.in));
        
        int howManyItems = parse(bf.readLine());
        
        Map<ItemName, Item> map = new HashMap<>();
        
        for(int i=0;i<howManyItems;i++) {
            String[] parts = bf.readLine().split(" ");
            Item ins = new Item(parts[0].toUpperCase(), parse(parts[1]), parse(parts[2]), parse(parts[3]));
            map.put(new ItemName(parts[0].toUpperCase()), ins);
        }
        
        String name = null;
        while(!(name = bf.readLine()).equals("KRAJ")) {
            ItemName im = new ItemName(name.toUpperCase());
            int buy = parse(bf.readLine());
            if(!map.containsKey(im)) {
                System.out.println("Nema takov lek");
                continue;
            }
            Item lek = map.get(im);
            System.out.println(lek);
            if(!lek.checkStorage(buy)) {
                System.out.println("Nema dovolno lekovi");
                continue;
            }
            else {
                System.out.println("Napravena naracka");
                lek.buyItem(buy);
            }
        }
 
    }
 
}
 
class ItemName{
    
    private String name;
 
    public ItemName(String name) {
        super();
        this.name = name;
    }
    
    private int ASCII(char c) {
        return (int)c;
    }
    
    @Override
    public int hashCode() {
        return (29*(29*(29*0+ASCII(name.charAt(0)))+ASCII(name.charAt(1)))+ASCII(name.charAt(2)))%102780;
    }
 
    @Override
    public boolean equals(Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ItemName other = (ItemName) obj;
        if (name == null) {
            if (other.name != null)
                return false;
        } else if (!name.equals(other.name))
            return false;
        return true;
    }
    
}
 
class Item{
    
    private String name;
    private int onList;
    private int price;
    private int howMany;
    
    public Item(String name, int onList, int price, int howMany) {
        super();
        this.name = name;
        this.onList = onList;
        this.price = price;
        this.howMany = howMany;
    }
 
    @Override
    public String toString() {
        String s = this.name + "\n";
        if(this.onList == 1)
            s += "POZ\n";
        else
            s += "NEG\n";
        s += this.price + "\n" + this.howMany;
        return s;
    }
    
    public boolean checkStorage(int take) {
        return (take <= this.howMany);
    }
    
    public void buyItem(int howMany) {
        this.howMany -= howMany;
    }
    
}