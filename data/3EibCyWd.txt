#pragma GCC optimzize("Ofast,no-stack-protector")
#include<bits/stdc++.h>
//#define int long long
#define quick ios::sync_with_stdio(0);cin.tie(0);
#define rep(x,a,b) for(int x=a;x<=b;x++)
#define repd(x,a,b) for(int x=a;x>=b;x--)
#define lowbit(x) (x&-x)
#define sz(x) (int)(x.size())
#define F first
#define S second
#define all(x) x.begin(),x.end()
#define mp make_pair
#define eb emplace_back
using namespace std;
const int N=1e6+1;
const int INF=1e8;
int dp[N][2];
int cost[N];
int s[N];
int deg[N];
int q[N];
inline int solve(int &x){
	int l=0;
	q[l++]=x;
	deg[x]=0;
	for(int i=s[x];i!=x;i=s[i]){
		deg[i]=0;
		q[l++]=i;
	}
	if(l==1){
		return max(dp[q[0]][0],dp[q[0]][1]);
	}
	vector<int> dp2[2];
	dp2[0].resize(l);
	dp2[1].resize(l);
	dp2[0][0]=dp[q[0]][0];
	dp2[0][1]=dp[q[0]][0]+1;// last not choose
	rep(i,1,l-1){
		int now=q[i];
		dp2[0][i]=max(dp2[0][i-1],dp2[1][i-1])+dp[now][0];
		dp2[1][i]=max(dp2[0][i-1]+dp[now][0]+1,dp2[1][i-1]+dp[now][1]);
	}
	int ans=dp2[0][l-1];
	dp2[0][0]=dp[q[0]][0];
	dp2[1][0]=dp[q[0]][1];
	rep(i,1,l-1){
		int now=q[i];
		dp2[0][i]=max(dp2[0][i-1],dp2[1][i-1])+dp[now][0];
		dp2[1][i]=max(dp2[0][i-1]+dp[now][0]+1,dp2[1][i-1]+dp[now][1]);
	}
	ans=max(ans,dp2[1][l-1]);
	return ans;
}
signed main(){
	quick
	int n;
	cin>>n;
	rep(i,1,n){
		cin>>s[i];
		deg[s[i]]++;
	}
	rep(i,1,n){
		cost[i]=INF;
	}
	int ans=0;
	int Cnt,S;
	Cnt=S=0;
	rep(i,1,n){
		dp[i][0]=0;
		dp[i][1]=1;
		if(!deg[i]){
			q[Cnt++]=i;
			dp[i][1]=-INF;
			cost[i]=0;
		}
	}
	while(S<Cnt){
		int x=q[S++];
		int i=s[x];
		dp[i][1]+=max(dp[x][0],dp[x][1]);
		dp[i][0]+=max(dp[x][0],dp[x][1]);
		cost[i]=min(cost[i],max(dp[x][1]-dp[x][0],0));
		deg[i]--;
		if(!deg[i]){
			dp[i][1]-=cost[i];
			cost[i]=0;
			q[Cnt++]=i;
		}	
	}
	rep(i,1,n) dp[i][1]-=cost[i];
	rep(i,1,n){
		if(!deg[i]) continue;
	//	debug("v2");for(int i:v2) cout<<i<<" ";cout<<"\n";
		ans+=solve(i);
	}
	cout<<ans<<"\n";
	return 0;
}
