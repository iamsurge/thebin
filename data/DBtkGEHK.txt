using UnityEngine;
using System.Collections;


namespace KazePashaMSK
{
    public class NewHealPotion : NewPickableItem
    {

        [Tooltip("The amount of health to add when collected")]
        public int HealthToAdd = 20;

        protected override void Pick(GameObject picker)
        {
            if (picker.TryGetComponent(out NewKZHealth health))
            {
                health.AddCurrentHP(HealthToAdd);
                StartCoroutine(Fall(gameObject.transform.position, picker, gameObject));
            }
        }

        //temporary (function Fall should stay only in TotemPickableItem)
        public IEnumerator Fall(Vector3 initialPos, GameObject picker, GameObject Totem)
        {
            Vector3 playerPos = picker.transform.position;
            if (picker.TryGetComponent(out TotemListener totemListener))
            {
                float height = initialPos.y;
                Vector3 direction = initialPos - playerPos;
                direction.Normalize();

                Vector3 end_position = initialPos + direction * totemListener.FallDistance;
                Vector3 start_position_v2 = new Vector2(initialPos.x, initialPos.z);
                Vector3 end_position_v2 = new Vector2(end_position.x, end_position.z);


                Quaternion start_rotation = Totem.transform.rotation;
                Quaternion end_rotation = Quaternion.Euler(0, 180f, 0) * Quaternion.LookRotation(direction);

                float timer = 0f;
                float normalizedTimer;

                while (timer < totemListener.FallTime)
                {
                    timer += Time.deltaTime;
                    normalizedTimer = timer / totemListener.FallTime;

                    Vector3 position_2d = Vector2.Lerp(start_position_v2, end_position_v2, totemListener.FallDistanceCurve.Evaluate(normalizedTimer));
                    Vector3 position_3d = new Vector3(position_2d.x, totemListener.FallHeightCurve.Evaluate(normalizedTimer) * height, position_2d.y);


                    Quaternion Rotation = Quaternion.Lerp(start_rotation, end_rotation, normalizedTimer);
                    Totem.transform.position = position_3d;
                    Totem.transform.rotation = Rotation;

                    yield return null;
                }
            }
            yield return null;
        }
    }
}

