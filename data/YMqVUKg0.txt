#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>


using namespace std;

typedef long long ll;

const int SIZE = 100001;
const int INF = 1000000001;
int a[SIZE];
vector<pair<int, int>> t(SIZE * 4);

void build(int v, int l, int r) {
	if (r - l == 1) {
		t[v] = { a[l], a[l] };
		return;
	}
	int m = (l + r) / 2;

	build(v * 2 + 1, l, m);
	build(v * 2 + 2, m, r);

	t[v].first = max(t[v * 2 + 1].first, t[v * 2 + 2].first);
	t[v].second = min(t[v * 2 + 1].second, t[v * 2 + 2].second);
}

pair<int, int> ask(int v, int l, int r, int askl, int askr) {
	if (askr <= l || askl >= r) {
		return { -INF, INF };
	}

	if (askl <= l && askr >= r) {
		return t[v];
	}

	int m = (l + r) / 2;
	pair<int, int> a = ask(v * 2 + 1, l, m, askl, askr);
	pair<int, int> b = ask(v * 2 + 2, m, r, askl, askr);
	return { max(a.first, b.first), min(a.second, b.second) };
}

void change(int v, int l, int r, int aski, int val) {

	if (aski < l || aski >= r) {
		return;
	}

	if (r - l == 1) {
		t[v] = { val, val };
		return;
	}

	int m = (l + r) / 2;

	change(v * 2 + 1, l, m, aski, val);
	change(v * 2 + 2, m, r, aski, val);

	t[v].first = max(t[v * 2 + 1].first, t[v * 2 + 2].first);
	t[v].second = min(t[v * 2 + 1].second, t[v * 2 + 2].second);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int N = 100001;

	for (ll n = 1; n <= N; n++) {
		a[n - 1] = (n * n) % 12345 + (n * n * n) % 23456;
	}

	build(0, 0, N);

	int k;
	cin >> k;

	int x, y;
	for (int i = 0; i < k; i++) {
		cin >> x >> y;

		if (x > 0) {
			pair<int, int> r = ask(0, 0, N, --x, y);
			cout << r.first - r.second << '\n';
		}
		else {
			change(0, 0, N, abs(x) - 1, y);
		}
	}
}