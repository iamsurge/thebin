#include <stdio.h>
#include <stdlib.h>

struct node {
	int data;         
	struct node *next;
}*head;
void createList(int n);
void insertNodeAtBeginning(int data);
void insertNodeAtEnd(int data);
void insertNodeAtMiddle(int data, int position);
void displayList();
int sizeof_LL();
void createList(int n){
	struct node *newNode, *temp;
	int data, i;
	head = (struct node *)malloc(sizeof(struct node));
	if(head == NULL){
    	printf("Unable to allocate memory.");
	}
	else{
    	printf("Enter the data of node 1: ");
    	scanf("%d", &data);
	    head->data = data; 
	    head->next = NULL;
	    temp = head;
    	for(i=2; i<=n; i++){
	        newNode = (struct node *)malloc(sizeof(struct node));
	        if(newNode == NULL){
	            printf("Unable to allocate memory.");
	            break;
        	}
        	else{
	            printf("Enter the data of node %d: ", i);
	            scanf("%d", &data);
            	newNode->data = data;
            	newNode->next = NULL;
	            temp->next = newNode;
	            temp = temp->next; 
	        }
    	}
    	printf("SINGLY LINKED LIST CREATED SUCCESSFULLY\n");
	}
}



void insertNodeAtBeginning(int data){
	struct node *newNode;
	newNode = (struct node*)malloc(sizeof(struct node));
	if(newNode == NULL){
	    printf("Unable to allocate memory.");
	}
	else{
	    newNode->data = data; 
	    newNode->next = head;
	    head = newNode;        
	    printf("DATA INSERTED SUCCESSFULLY\n");
	}
}
void insertNodeAtEnd(int data){
	struct node *newNode, *temp;
	newNode = (struct node*)malloc(sizeof(struct node));
	if(newNode == NULL){
	    printf("Unable to allocate memory.");
	}
	else{
	    newNode->data = data; 
	    newNode->next = NULL; 
	    temp = head;
	    while(temp != NULL && temp->next != NULL){
	        temp = temp->next;
		}
	    temp->next = newNode;
	    printf("DATA INSERTED SUCCESSFULLY\n");
	}
}
void displayList(){
	struct node *temp;
	if(head == NULL){
	    printf("List is empty.");
	}
	else{
	    temp = head;
	    while(temp != NULL){
	        printf(" %d -> ", temp->data); 
	        temp = temp->next;                 
	    }
	    printf("NULL");
	}
}
void insertNodeAtMiddle(int data, int position){
	int i;
	struct node *newNode, *temp;
	newNode = (struct node*)malloc(sizeof(struct node));
	if(newNode == NULL){
		printf("Unable to allocate memory.");
	}
	else{
		newNode->data = data; 
		newNode->next = NULL;
		temp = head;
		for(i=2; i<=position-1; i++){
		    temp = temp->next;
		    if(temp == NULL){
		        break;
			}
		}
		if(temp != NULL){
		    newNode->next = temp->next; 
		    temp->next = newNode;
		    printf("DATA INSERTED SUCCESSFULLY\n");
		}
		else{
		    printf("UNABLE TO INSERT DATA AT THE GIVEN POSITION\n");
		}
	}
}
int sizeof_LL(){
	int size=0;
	if (head==NULL){
		return size;
	}
	else{
		struct node *temp;
		temp=head;
		while(temp!=NULL){
			size++;
			temp=temp->next;
		}
	return size;
	}
}
void deleteNode(int position){
	int i;
	struct node *temp,*prev;
	temp=head;
	int size=sizeof_LL();
	if(position<1 || position>size){
		printf("Enter correct position!");
		return;
	}
	else if (position==1){
		head=temp->next;
		free(temp);
	}
	else{
		while (--position) {
       		prev = temp; 
        	temp = temp->next; 
    	}
    	prev->next = temp->next;
    	printf("Deleted: %d\n", temp->data);
    	free(temp);
	}
}
int main(){
	int n, data,position,choice;
	choice=8;
	while(choice!=0){
		printf("---------------------------------------------");
		printf("\n1. Create linked list");
		printf("\n2. Insert node at beginning");
		printf("\n3. Insert node at End");
		printf("\n4. Insert node in Middle");
		printf("\n5.Display Linked list");
		printf("\n6.Display Size of List");
		printf("\n7.DElete a node of List");		
		printf("\n0. To Exit!");
		printf("\nENter choice:");
		scanf("%d",&choice);
		if (choice==1){
			printf("Enter the total number of nodes: ");
			scanf("%d", &n);
			createList(n);
		}
		else if(choice==5){
			printf("\nData in the list \n");
			displayList();
		}
		else if(choice==2){
			printf("\nEnter data to insert at beginning of the list: ");
			scanf("%d", &data);
			insertNodeAtBeginning(data);
		}
		else if(choice==3){
			printf("\nEnter data to insert at end of the list: ");
			scanf("%d", &data);
			insertNodeAtEnd(data);
		}
		else if(choice==4){
			printf("\nEnter data to insert at middle of the list: ");
			scanf("%d", &data);
			printf("Enter the position to insert new node: " );
			scanf("%d", &position);
			insertNodeAtMiddle(data, position);
		}
		else if(choice==6){
			printf("\nSize of the list: %d\n",sizeof_LL());
		}
		else if(choice==7){
			int pos;
			printf("\nenter position of node:");
			scanf("%d",&pos);
			deleteNode(pos);
		}
	}
	return 0;
}