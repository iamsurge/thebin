class Solution 
{
    public:
    //Function to find distance of nearest 1 in the grid for each cell.
    int dx[4] = {-1, 0, 1, 0};
    int dy[4] = {0, -1, 0, +1};
	vector<vector<int>>nearest(vector<vector<int>>grid)
	{
	    int row = grid.size();
	    int col = grid[0].size();
	    
	    queue<array<int,3>>q;
	    vector<vector<bool>>visited(row,vector<bool>(col));
	    
	    for(int i = 0; i<row; i++){
	        for(int j = 0; j<col; j++){
	            if(grid[i][j] == 1){
	                q.push({i, j, 0});
	                visited[i][j] = 1;
	                grid[i][j] = 0;
	            }
	        }
	    }
	    
	    while(!q.empty()){
	        int r = q.front()[0];
	        int c = q.front()[1];
	        int count = q.front()[2];
	        
	        q.pop();
	        for(int i = 0; i<4; i++){
	            int nrow = dx[i] + r;
	            int ncol = dy[i] + c;
	            if(nrow >=0 && nrow < row && ncol >=0 && ncol< col && !visited[nrow][ncol]){
	                q.push({nrow, ncol, count + 1});
	                visited[nrow][ncol] = 1;
	                grid[nrow][ncol] = count + 1;
	            }
	        }
	    }
	    
	    return grid;
	}
};