/* Generated by Nim Compiler v1.6.6 */
/* Compiled for: Linux, amd64, gcc */
/* Command for C compiler:
   g++ -c -std=gnu++14 -funsigned-char  -w -fmax-errors=3 -fpermissive -I/usr/include/opencascade/ -O3 -fno-strict-aliasing -fno-ident   -I/home/jose/.choosenim/toolchains/nim-1.6.6/lib -I/home/jose/src/nimlang/occt.nim/examples -o /home/jose/src/nimlang/occt.nim/examples/cache/@mviewer02.nim.cpp.o /home/jose/src/nimlang/occt.nim/examples/cache/@mviewer02.nim.cpp */
#define NIM_INTBITS 64

#include "nimbase.h"
#include "Standard_Handle.hxx"
#include "Aspect_DisplayConnection.hxx"
#include "Standard_Transient.hxx"
#include "OpenGl_GraphicDriver.hxx"
#include "Graphic3d_GraphicDriver.hxx"
#include "OpenGl_Caps.hxx"
#include "Xw_Window.hxx"
#include "Aspect_Window.hxx"
#include "V3d_Viewer.hxx"
#include "V3d_View.hxx"
#include "V3d_TypeOfView.hxx"
#include "Graphic3d_TypeOfShadingModel.hxx"
#include "Quantity_Color.hxx"
#include "Quantity_NameOfColor.hxx"
#include "Graphic3d_Camera.hxx"
#include "Aspect_TypeOfTriedronPosition.hxx"
#include "V3d_TypeOfVisualization.hxx"
#undef LANGUAGE_C
#undef MIPSEB
#undef MIPSEL
#undef PPC
#undef R3000
#undef R4000
#undef i386
#undef linux
#undef mips
#undef near
#undef far
#undef powerpc
#undef unix
#define nimfr_(x, y)
#define nimln_(x, y)
typedef opencascade::handle<Aspect_DisplayConnection> TY__keu8dJZTmN1bTjmh2YTMeA;
typedef opencascade::handle<OpenGl_GraphicDriver> TY__FZHdszn6vruH9aCoz9aCktYQ;
typedef opencascade::handle<Xw_Window> TY__LyS0CtE7Da8V9c3SncboSbA;
typedef opencascade::handle<Graphic3d_GraphicDriver> TY__WzQHB9c9cwo6CTGferBwI78g;
typedef opencascade::handle<V3d_Viewer> TY__47tV2K1aaSZXiNrxUNujaw;
typedef opencascade::handle<V3d_View> TY__icTQkUhVkd9cEc0gJ9c2VwPg;
typedef opencascade::handle<Aspect_Window> TY__yB86VfuSyzthqado7ziZgg;
static N_INLINE(void, initStackBottomWith)(void* locals);
N_LIB_PRIVATE N_NOINLINE(void, nimGC_setStackBottom)(void* theStackBottom);
N_LIB_PRIVATE N_NIMCALL(void, systemDatInit000)(void);
N_LIB_PRIVATE N_NIMCALL(void, systemInit000)(void);
N_LIB_PRIVATE N_NIMCALL(void, NimMainModule)(void);
N_LIB_PRIVATE TY__keu8dJZTmN1bTjmh2YTMeA aDisplay__viewer4850_8;
N_LIB_PRIVATE TY__FZHdszn6vruH9aCoz9aCktYQ aGlDriver__viewer4850_16;
N_LIB_PRIVATE TY__LyS0CtE7Da8V9c3SncboSbA aWindow__viewer4850_26;
N_LIB_PRIVATE TY__WzQHB9c9cwo6CTGferBwI78g theDriver__viewer4850_28;
N_LIB_PRIVATE TY__47tV2K1aaSZXiNrxUNujaw aViewer__viewer4850_36;
N_LIB_PRIVATE TY__icTQkUhVkd9cEc0gJ9c2VwPg aView__viewer4850_44;
N_LIB_PRIVATE NIM_BOOL tmp__viewer4850_48;
N_LIB_PRIVATE TY__yB86VfuSyzthqado7ziZgg theWindow__viewer4850_53;
static N_INLINE(void, initStackBottomWith)(void* locals) {
	nimGC_setStackBottom(locals);
}

N_LIB_PRIVATE void PreMainInner(void) {
}

N_LIB_PRIVATE int cmdCount;
N_LIB_PRIVATE char** cmdLine;
N_LIB_PRIVATE char** gEnv;
N_LIB_PRIVATE void PreMain(void) {
	void (*volatile inner)(void);
	inner = PreMainInner;
	systemDatInit000();
	initStackBottomWith((void *)&inner);
	systemInit000();
	(*inner)();
}

N_LIB_PRIVATE N_CDECL(void, NimMainInner)(void) {
	NimMainModule();
}

N_CDECL(void, NimMain)(void) {
	void (*volatile inner)(void);
	PreMain();
	inner = NimMainInner;
	initStackBottomWith((void *)&inner);
	(*inner)();
}

int main(int argc, char** args, char** env) {
	cmdLine = args;
	cmdCount = argc;
	gEnv = env;
	NimMain();
	return nim_program_result;
}

N_LIB_PRIVATE N_NIMCALL(void, NimMainModule)(void) {
{
	aDisplay__viewer4850_8 = opencascade::handle<Aspect_DisplayConnection>((new Aspect_DisplayConnection()));
	aGlDriver__viewer4850_16 = opencascade::handle<OpenGl_GraphicDriver>((new OpenGl_GraphicDriver(aDisplay__viewer4850_8, NIM_TRUE)));
	(* aGlDriver__viewer4850_16).ChangeOptions().swapInterval = ((int) 1);
	aWindow__viewer4850_26 = opencascade::handle<Xw_Window>((new Xw_Window(aDisplay__viewer4850_8, "Window Title", ((int) 0), ((int) 0), ((int) 640), ((int) 480))));
	aViewer__viewer4850_36 = opencascade::handle<V3d_Viewer>((new V3d_Viewer(theDriver__viewer4850_28)));
	aView__viewer4850_44 = opencascade::handle<V3d_View>((new V3d_View(aViewer__viewer4850_36, ((V3d_TypeOfView) 0))));
	tmp__viewer4850_48 = (* aView__viewer4850_44).SetImmediateUpdate(NIM_FALSE);
	(* aView__viewer4850_44).SetShadingModel(((Graphic3d_TypeOfShadingModel) 3));
	(* aView__viewer4850_44).SetWindow(theWindow__viewer4850_53, NIM_NIL);
	(* aView__viewer4850_44).SetBackgroundColor(Quantity_Color(((Quantity_NameOfColor) 182)));
	(* (* aView__viewer4850_44).Camera()).SetProjectionType(((Graphic3d_Camera::Projection) 0));
	(* aView__viewer4850_44).TriedronDisplay(((Aspect_TypeOfTriedronPosition) 0), Quantity_Color(((Quantity_NameOfColor) 508)), 0.02f, ((V3d_TypeOfVisualization) 0));
}
}