import React from "react";
import ProfileSideMenu from "../../common/sideMenu/ProfileSideMenu";
import { ValidatorForm, TextValidator } from "react-material-ui-form-validator";
import Button from "@material-ui/core/Button";
import { ChangeRole as ChangeRoleAction } from "../../../actions/profileAction";
import compose from "recompose/compose";
import { connect } from "react-redux";

class ChangeRole extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      remarks: "",
      selectedFile: null,
      errorMessage: ""
    };
  }

  handleChange = event => {
    event.preventDefault();
    //let { request } = this.state;
    //request[event.target.name] = event.target.value;

    this.setState({ remarks: event.target.value });
  };

  onFileChange = event => {
    console.log("selectedFile: ", event.target.files[0]);
    this.setState({ selectedFile: event.target.files[0] });
    console.log("current state: ", this.state);
  };

  handleSubmit = event => {
    console.log("handleSubmit called ");
    console.log("current state: ", this.state);
    const formData = new FormData();
    // Update the formData object
    formData.append(
      "Attachment",
      this.state.selectedFile,
      this.state.selectedFile.name
    );
    formData.append("Remarks", this.state.remarks);
    console.log("formData: ", formData);

    this.props.ChangeRoleAction(formData, data => {
      this.setState({ remarks: "" });
      this.setState({ selectedFile: null });
      document.getElementById("change-role-attachment").value = "";
    });
  };

  render() {
    return (
      <div className="profile-container">
        <div className="profile-inner">
          <ProfileSideMenu class="profile-menu" />
          <div className="setting-wrapper builder-tab-wrapper container-wrapper section-wrapper">
            <div class="page-head">
              <h1 className="page-title"> Change Role </h1>
            </div>
            <div>
              <ValidatorForm onSubmit={e => this.handleSubmit(e)}>
                <div className="form-group">
                  <label>Remarks</label>
                  <TextValidator
                    name="remarks"
                    type="text"
                    onChange={e => this.handleChange(e)}
                    className="custom-input-box"
                    variant="outlined"
                    placeholder="Enter Remarks"
                    autoComplete="off"
                    validators={["required"]}
                    value={this.state.remarks}
                    errorMessages={"Remarks is required"}
                    errorMessages={this.state.errorMessage}
                    helperText={this.state.errorMessage}
                  />
                </div>

                <div className="form-group">
                  <label>Attachment</label>
                  <div>
                    <input
                      accept="image/*"
                      id="change-role-attachment"
                      type="file"
                      onChange={e => this.onFileChange(e)}
                    />
                    {/* <label
                      htmlFor="raised-button-file"
                      className="raised-button-file"
                    >
                      <i className="material-icons">edit</i>
                    </label> */}
                  </div>
                </div>

                <div className="btn-wrapper text-right">
                  <Button
                    type="submit"
                    className="btn btn-primary"
                    variant="outlined"
                    color="primary"
                  >
                    Request
                  </Button>
                </div>
              </ValidatorForm>
            </div>
          </div>
        </div>
      </div>
    );
  }
}

const mapStateToProps = state => {
  return {};
};

export default {
  component: compose(
    connect(mapStateToProps, {
      ChangeRoleAction
    })
  )(ChangeRole)
};
