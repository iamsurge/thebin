#! /usr/bin/env python3

def is_triangular_number_formula(number):
    root_of_square = (number * 8 + 1) ** 0.5
    return root_of_square == round(root_of_square)

# is_triangular_number_formula(2 ^ 64 + 1)
# 5 function calls in 0.000 seconds

def is_triangular_number_algorithm_one(number):
    accumulator = 0
    counter = 0
    
    while accumulator <= number:
        accumulator += counter
        counter += 1

        if accumulator == number:
            result = True
            break
    else:
        result = False

    return result

# is_triangular_number_algorithm_one(2 ^ 64 + 1)
# 4 function calls in 0.000 seconds

def is_triangular_number_algorithm_two(number):
    counter = 0
    while number >= 0:
        counter += 1
        number -= counter

        if number == 0:
            result = True
            break
    else:
        result = False

    return result

# is_triangular_number_algorithm_two(2 ^ 64 + 1)
# 4 function calls in 0.000 seconds

# for i in range(10000): is_triangular_number_formula(2 ^ 64 + 1)
# 20003 function calls in 0.023 seconds

# for i in range(10000): is_triangular_number_algorithm_one(2 ^ 64 + 1)
# 10003 function calls in 0.037 seconds

# for i in range(10000): is_triangular_number_algorithm_two(2 ^ 64 + 1)
# 10003 function calls in 0.034 seconds