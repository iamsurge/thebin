#include "stdio.h"
#include "malloc.h"
#include "limits.h"

struct List *head = NULL;
struct List *tail = NULL;

int __length = 0;

struct List
{
    int value;
    struct List *next;
    struct List *prev;
};

int add(int value)
{
    if(head==NULL)
    {
        head = malloc(sizeof(struct List));
        head->next = NULL;
        head->value = value;
        tail = head;
        __length = 1;
    }
    else
    {
        struct List *newElement = malloc(sizeof(struct List));
        newElement->prev = tail;
        newElement->next = NULL;
        newElement->value = value;

        tail->next = newElement;

        tail = newElement;
        __length++;
    }
    return 0;
}
int printList()
{
    struct List *e = head;
    if(e == NULL)
        return -1;
    while(e!=NULL)
    {
        printf("%d, ", e->value);
        e = e->next;
    }
    return 0;
}
int printListDescending()
{
    struct List *e = tail;
    if(e == NULL)
        return -1;
    while(e!=NULL)
    {
        printf("%d, ", e->value);
        e = e->prev;
    }
    return 0;
}
int indexOf(int value)
{
    struct List *e = head;
    int index = 0;

    while(e != NULL)
    {
        if(e->value == value)
            return index;
        index++;
        e = e->next;
    }
    return -1;
}
int valueAtIndex(int i)
{
    if(i<0 || i >= __length)
        return INT_MIN;

    if((__length/2)>=i)
    {
        struct List *e = head;
        int counter = 0;

        while(e != NULL)
        {
            if(counter == i)
                return e->value;
            counter++;
            e = e -> next;
        }
    }
    else
    {
        struct List *e = tail;
        int counter = __length-1;

        while(e != NULL)
        {
            if(counter == i)
                return e->value;
            counter--;
            e = e -> prev;
        }
    }
}
int contains(int value)
{
    struct List *e = head;

    while(e != NULL)
    {
        if(e->value == value)
            return 0;
        e = e->next;
    }
    return -1;
}
int length()
{
    return __length;
}
int clear()
{
    struct List *e = head;
    while(e->next != NULL)
    {
        e = e->next;
        free(e->prev);
        printf("dupa");
    }
    if(e != NULL)
        free(e);
    head = NULL;
    tail = NULL;
    __length = 0;
    return 0;
}
int removeAt(int index)
{
    if(__length==0 || index<0 || index>=__length)
        return -1;
    if(__length==1)
    {
        free(head);
        free(tail);
    }
    else if(index==0)
    {
        printf("brak dupy");
        struct List *e = head;
        head = head->next;
        head->prev = NULL;
        free(e);
        printf("brak dupy");
    }
    else if(index==__length-1)
    {
        struct List *e = tail;
        tail = tail->prev;
        tail->next = NULL;
        free(e);
    }
    else if((__length/2)>=index)
    {
        struct List *e = head;
        int counter = 0;

        while(e != NULL)
        {
            if(counter == index)
            {
                e->prev->next = e->next;
                e->next->prev = e->prev;
                __length--;
                free(e);
                return 0;
            }
            counter++;
            e = e->next;
        }
    }
    else if((__length/2)<index)
    {
        struct List *e = head;
        int counter = __length-1;

        while(e != NULL)
        {
            if(counter == index)
            {
                e->prev->next = e->next;
                e->next->prev = e->prev;
                __length--;
                free(e);
                return 0;
            }
            counter--;
            e = e -> prev;
        }
    }
    return 0;
}
int insert(int index, int value)
{
    if(index<0 || index>__length)
        return -1;
    else if(__length==0 || index==__length)
        return add(value);
    else if(index==0)
    {
        struct List *e = malloc(sizeof(struct List));
        e->value = value;
        e->next = head;
        head->prev = e;
        __length++;
        void *swapper = e;
        e = head;
        head = swapper;
        return 0;
    }
    else if((__length/2)>=index)
    {
        struct List *e = head;
        int counter = 0;
        while(e != NULL)
        {
            if(counter == index)
            {
                struct List *new = malloc(sizeof(struct List));
                new->value = value;
                new->next = e;
                new->prev = e->prev;
                e->prev->next = new;
                e->prev = new;
                __length++;
                return 0;
            }
            counter++;
            e = e->next;
        }
    }
    else if((__length/2)<index)
    {
        struct List *e = tail;
        int counter = __length-1;
        while(e != NULL)
        {
            if(counter == index)
            {
                struct List *new = malloc(sizeof(struct List));
                new->value = value;
                new->next = e;
                new->prev = e->prev;
                e->prev->next = new;
                e->prev = new;
                __length++;
                return 0;
            }
            counter--;
            e = e -> prev;
        }
    }
    return -1;
}
int changeValAt(int index, int newVal)
{
    if(index<0 || index>=__length)
        return -1;
    
    struct List *e = head;
    int counter = 0;
    while(e->next != NULL)
    {
        if(counter == index)
        {
            e->value = newVal;
        }
        e = e->next;
        counter++;
    }
}
void sort()
{
    if(__length<2)
        return;
    for(int i = 0; i < __length-1; i++)
    {
        struct List *e = head;
        while(e->next != NULL)
        {
            if(e->value > e->next->value)
            {
                int value = e->value;
                e->value = e->next->value;
                e->next->value = value;
            }
            e = e->next;
        }
        
    }
}
int main()
{
    add(1);
    add(3);
    add(4);
    add(2);
    add(100);
    printList();
    removeAt(2);
    printList();
    insert(0,88);
    changeValAt(0, 55);
    printList();
    printf("\nIndex of value 4 is: %d\n", indexOf(4));
    //clear();
    printf("Value at index 4 is: %d\n", valueAtIndex(4));
    printf("Value at index 2 is: %d\n", valueAtIndex(2));
    printf("Value at index 0 is: %d\n", valueAtIndex(0));
    printf("Value at index -1 is: %d\n", valueAtIndex(-1));
    insert(3,200);
    printf("dupa\n");
    sort();
    printList();
    for (size_t i = 0; i < length(); i++)
    {
        printf("\n%d -> %d", i, valueAtIndex(i));
    }
    getchar();
    return 0;
}