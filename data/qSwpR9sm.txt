#include <iostream>
#include <vector>

using namespace std;

const int N = 1e6 + 1;
const int NE = 0;
long long T[4 * N];
long long f[4 * N];
int len[4 * N];

long long combine(long long a, long long b)
{
  return a + b;
}

long long getVal(int v)
{
  return T[v] + f[v] * len[v];
}

void recalc(int v)
{
  T[v] = combine(getVal(2 * v + 1), getVal(2 * v + 2));
}

void build(int v, int l, int r, const vector<int> &a)
{
  len[v] = r - l;
  f[v] = 0;
  if (r - l == 1)
    {
      T[v] = a[l];
      return;
    }
  int m = (l + r) / 2;
  build(2 * v + 1, l, m, a);
  build(2 * v + 2, m, r, a);
  recalc(v);
}

void push(int v)
{
  f[2 * v + 1] += f[v];
  f[2 * v + 2] += f[v];
  T[v] = getVal(v);
  f[v] = 0;
}

long long get(int v, int l, int r, int pos)
{
  if (r - l == 1)
    return getVal(v);
  int m = (l + r) / 2;
  push(v);
  long long a;
  if (pos < m)
    a = get(2 * v + 1, l, m, pos);
  else
    a = get(2 * v + 2, m, r, pos);
  recalc(v);
  return a;
}

void update(int v, int l, int r, int L, int R, int val)
{
  if (r == R && l == L)
    {
      f[v] += val;
      return;
    }
  if (L >= R)
    return;
  int m = (l + r) / 2;
  push(v);
  update(2 * v + 1, l, m, L, min(R, m), val);
  update(2 * v + 2, m, r, max(L, m), R, val);
  recalc(v);
}

int main()
{
  int n, q;
  cin >> n >> q;
  vector<int> arr(n);
  for (int i = 0; i < n; ++i)
    cin >> arr[i];
  build(0, 0, n, arr);
  for (int i = 0; i < q; ++i)
    {
      int t;
      cin >> t;
      if (t == 1)
	{
	  int l, r, x;
	  cin >> l >> r >> x;
	  --l;
	  update(0, 0, n, l, r, x);
	}
      else
	{
	  int j;
	  cin >> j;
	  --j;
	  cout << get(0, 0, n, j) << '\n';
	}
    }
}
