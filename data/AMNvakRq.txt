func db_find_column_header(db_type : int, header : String) -> int:
	match db_type:
		DBType.First:
			for i in len(first_db[0]):
				if first_db[0][i] == header: return i
		DBType.Second:
			for i in len(second_db[0]):
				if second_db[0][i] == header: return i
		# ...
	return(-1 as int)


func db_interpret_cell(db_type : int, row : int, column):
	#managing the inputs; converting column into an int
	var r : int = row # not necessary but I wanted consistency
	var c : int
	if column is int:
		c = column
	if column is String:
		c = db_find_column_header(db_type, column)

	match db_type:
		DBType.First:
			return _type_interpreter(first_db[1][c], first_db[r][c])
		DBType.Second:
			return _type_interpreter(second[1][c], second_db[r][c])
		# ...


func _type_interpreter(type_cell : String, data_cell):
	var out
	match type_cell:
		"String": out = data_cell # Already a String
		"int": out = data_cell as int
		"float": out = data_cell as float
		"bool": out = data_cell as bool
		"Array":
			var temp = data_cell.left(data_cell.length()-1).right(1) #removes square brackets
			out = temp.split(",", false) #separates elements into new array
	return out