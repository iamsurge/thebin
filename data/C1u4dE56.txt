tnvOne :: Int -> Bool
tnvOne = aux 0 0
  where
    aux a c n
      | a == n = True
      | a > n = False
      | a < n = aux (a + c) (c + 1) n

tnvTwo :: Int -> Bool
tnvTwo = aux 1
  where
    aux c n
      | n == 0 = True
      | n < 0 = False
      | n > 0 = aux (c + 1) (n - c)

tnvThree :: Int -> Bool
tnvThree = aux 0
  where
    aux c n
      | n > tng c = aux (c + 1) n
      | n == tng c = True
      | n < tng c = False
      where
        tng x = x * (x + 1) `div` 2

tnvFour :: (RealFrac t, Floating t) => t -> Bool
tnvFour n = ceiling m == floor m
  where
    m = sqrt (n * 8 + 1)