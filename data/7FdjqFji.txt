class Solution {
public:
    vector<vector<int> > ans;
    vector<int> tmp;
    vector<int> cnt;
    
    void dfs(int target, int depth) {
        if (depth == cnt.size()) {
            if (target == 0) {
                ans.push_back(tmp);
            }
            return ;
        }
        
        dfs(target, depth + 1);
        int ccnt;
        for (ccnt = 0; ccnt < cnt[depth]; ++ccnt) {
            if (target >= depth) {
                target -= depth;
                tmp.push_back(depth);
                dfs(target, depth + 1);
            } else {
                break;
            }
        }
        for (int i = 0; i < ccnt; ++i) {
            tmp.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum2(vector<int>& candidates, int target) {
        ans.clear();
        cnt.assign(51, 0);
        for (int i = 0; i < candidates.size(); ++i) {
            ++cnt[candidates[i]];
        }
        dfs(target, 0);
        return ans;
    }
};