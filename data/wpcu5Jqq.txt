
import sys
import os
import json
import time
import random

# StringBuilder
class StringBuilder:
    _file_str = list()

    _length = 0

    @property
    def length(self):
        """
        Получава дължината на текущия обект StringBuilder.
        """
        return self._length

    def __set_length(self):
        self._length = len(self._file_str)

    def __getitem__(self, index):
        # Индексатор на елементите на класа StringBuilder

        return self._file_str[index]

    def __init__(self, init_string: str = None):

        """
            Инициализира нов екземпляр на класа StringBuilder, използвайки посочения низ.
            Ако не е подаден низ се инициализира празен екземпляр на класа
        """

        if (init_string == None):
            self._file_str = list()

        else:
            for s in init_string:
                self._file_str.append(s)

        self.__set_length()

    def Append(self, input_string: str = None):

        """
            Добавя низовото представяне на определен обект към този екземпляр.
        """

        for s in input_string:
            self._file_str.append(s)

        self.__set_length()

    def AppendLine(self, input_string: str = None):

        """
            Добавя символ за край на ред или копие на определен низ и символ за край на ред в края на този екземпляр.
        """

        if (not (input_string == None)):

            for s in input_string:
                self._file_str.append(s)

        self._file_str.append("\n")

        self.__set_length()

    def Clear(self):

        """
            Премахва всички символи от текущия екземпляр на StringBuilder.
        """

        self._file_str = []

        self.__set_length()

    def CopyTo(self, sourceIndex: int, destinationIndex: int, count: int, destination: list):

        """
            Копира символите от определен сегмент на този екземпляр в определен сегмент от целевия списък.
            Параметри:
            sourceIndex - Началната позиция от която ще бъдат копирани знаците. Нула базиран индекс.
            destination - Списък в който знаците ще бъдат копирани.
            destinationIndex - Началната позиция, в destination. Нула базиран индекс.
            count - Броят на знаците, които трябва да се копират.
        """

        is_valid_index = ((sourceIndex < 0) or (destinationIndex < 0) or (count < 0))

        is_valid_index = (
                    (is_valid_index) or (sourceIndex >= self.length) or ((sourceIndex + count) >= self.length) or (
                    (destinationIndex + count) >= self.length))

        if (is_valid_index):
            raise IndexError

        for i in range(sourceIndex + count, sourceIndex - 1, -1):
            destination.insert(destinationIndex, self._file_str[i])

    def Insert(self, index, string):

        """
            Вмъква низ в този екземпляр на посочената позиция на символа.
            Параметри
            index - Позицията откъдето започва вмъкването.
            string - Низът за вмъкване.
        """

        if ((len(self._file_str) == 0) and (index == 0)):
            self.Append(string)

            return

        if (not ((index >= 0) and (index < len(self._file_str)))):
            raise IndexError

        for i in range(len(string) - 1, -1, -1):
            self._file_str.insert(index, string[i])

        self.__set_length()

    def Remove(self, startIndex: int, lng: int):
        """
            Премахва посочения диапазон от знаци от този екземпляр.

            Параметри
            startIndex - Базирана на нула позиция откъдето започва премахването.
            lng - Броят знаци за премахване.
        """

        is_valid_index = ((startIndex < 0) or (lng < 0))

        is_valid_index = ((is_valid_index) or ((startIndex + lng) > self.length))

        if (is_valid_index):
            raise IndexError

        new_list = self._file_str[: startIndex] + self._file_str[startIndex + lng:]

        self._file_str = new_list
        self.__set_length()
        return self.__str__()

    def __str__(self):

        s = ""

        for i in range(len(self._file_str)):
            s = f"{s}{self._file_str[i]}"

        return s

EMPTY_POSITION = 0
HUMAN_PLAYER = 1
AI_PLAYER = 2

EMPTY_STR = " "
HUMAN_STR = "O"
AI_STR = "X"
SEPARARE_STR = "|"

RANDOM_AI = 1
INVINCIBLE_AI = 2

IS_WIN = 1
IS_NO_WIN  = 2
IS_INVALID_MOVE = 3
IS_SAVE_COMMAND = 4
IS_EXIT = 5

OK = 1
FAULT = 0

def saveGame(filename, game):
    #The function saves the current state of the game

    filePath=filename+".txt"
    stringedGame=str(game)

    try:
        if os.path.exists(filePath):
            raise Exception()
        else:
            f = open(filePath, "x")

            with open(filePath, 'w') as f:
                f.write(stringedGame)
    except:
        print("Couldn't save the game. Exiting now.")

    sys.exit()

def loadGame(filename):
    #The function loads the saved game

    filePath = filename + ".txt"

    try:
        if os.path.exists(filePath):
            with open(filePath) as f:
                return f.readlines()
        else:
            raise Exception()
    except:
        print("File with that name hasn't been found!")
        sys.exit()

def convertDashBoard(dashBoard):
    result = []

    convertMap = {
        EMPTY_POSITION: EMPTY_STR,
        HUMAN_PLAYER: HUMAN_STR,
        AI_PLAYER: AI_STR
    }

    for row in range(len(dashBoard)):
        tempRow = dashBoard[row]
        arr = []

        for col in range(len(tempRow)):
            arr.append(convertMap.get(tempRow[col]))

        result.append(arr)

    return result

def newBoard():
    dashboard = []

    for row in range(3):
        rowBoard = []

        for col in range(3):
            rowBoard.append(EMPTY_POSITION)

        dashboard.append(rowBoard)

    return dashboard

def printBoard(dashBoard):
    sb = StringBuilder()

    printableDashBoard = convertDashBoard(dashBoard)

    for row in range(len(printableDashBoard)):
        sb.AppendLine(SEPARARE_STR.join(printableDashBoard[row]))

    print(sb)

def validMove(row, column, board):
    is_valid = row >= 0 and row < len(board)
    is_valid = is_valid and column >= 0 and column < len(board[row])
    is_valid = is_valid and board[row][column] == EMPTY_POSITION

    return is_valid

def checkWinnerV(turn, board):
    is_Win = False
    n = len(board)

    col = 0
    while (not is_Win and col < n):
        is_CurrentColWin = True

        row = 0
        while (not is_Win and row < n):
            is_CurrentColWin = is_CurrentColWin and board[row][col] == turn
            row = row + 1

        is_Win = is_Win or is_CurrentColWin
        col = col + 1

    return is_Win

def checkWinnerH(turn, board):
    is_Win = False
    n = len(board)

    row = 0
    while (not is_Win and row < n):
        is_CurrentRowWin = True

        col = 0
        while (not is_Win and col < n):
            is_CurrentRowWin = is_CurrentRowWin and board[row][col] == turn
            col = col + 1

        is_Win = is_Win or is_CurrentRowWin
        row = row + 1

    return is_Win

def checkWinMainDiagonal(turn, board):
    is_Win = True
    n = len(board)

    row = 0
    while (row < n):
        is_Win = is_Win and board[row][row] == turn

        row = row + 1

    return is_Win

def checkWinSecondDiagonal(turn, board):
    is_Win = True
    n = len(board)

    row = 0
    while (row < n):
        is_Win = is_Win and board[row][n - 1 - row] == turn
        row = row + 1

    return is_Win

def checkWinnerD(turn, board):
    return checkWinMainDiagonal(turn, board) or checkWinSecondDiagonal(turn, board)

def checkWinner(turn, board):
    is_PlayerWin = False

    is_PlayerWin = is_PlayerWin or checkWinnerV(turn, board)
    is_PlayerWin = is_PlayerWin or checkWinnerH(turn, board)
    is_PlayerWin = is_PlayerWin or checkWinnerD(turn, board)

    return is_PlayerWin

def checkFull(board):

    is_Fill = False
    n = len(board)
    
    row = 0
    while (not is_Fill and row < n):
        
        col = 0
        while (not is_Fill and col < n):
            is_Fill = board[row][col] == EMPTY_POSITION
            col = col + 1

        row = row + 1

    return not is_Fill

def isGameOver(board):

    n = len(board)

    for row in range(n):
        if isRowFull(row, board) != EMPTY_POSITION:
            return True
    
    for col in range(n):
        if isColFull(col, board) != EMPTY_POSITION:
            return True
            
    if isMainDiagonalFull(board) != EMPTY_POSITION:
        return True
        
    if isSecondDiagonalFull(board) != EMPTY_POSITION:
        return True
        
    return checkFull(board)

def isRowFull(row, board):
    c = 0
    n = len(board)
    
    symbol = board[row][0]
    if symbol == EMPTY_POSITION:
        return EMPTY_POSITION
        
    result = True
    while (c < n):
        result = result and symbol == board[row][c]
        c = c + 1
        
    if result:
        return symbol
        
    return EMPTY_POSITION

def isColFull(col, board):
    r = 0
    n = len(board)
    
    symbol = board[0][col]
    if symbol == EMPTY_POSITION:
        return EMPTY_POSITION
        
    result = True
    while r < n:
        result = result and symbol == board[r][col]
        r = r + 1
        
    if result:
        return symbol
        
    return EMPTY_POSITION

def isMainDiagonalFull(board):
    r = 0
    n = len(board)
    symbol = board[0][0]
    
    if symbol == EMPTY_POSITION:
        return EMPTY_POSITION
        
    result = True
    while r < n:
        result = result and symbol == board[r][r]
        r = r + 1
        
    if result:
        return symbol
        
    return EMPTY_POSITION
    
def isSecondDiagonalFull(board):
    r = 0
    n = len(board)
    
    maxCol = n - 1
    symbol = board[0][maxCol]
    
    if symbol == EMPTY_POSITION:
        return EMPTY_POSITION
        
    result = True
    while r < n:
        result = result and symbol == board[r][maxCol - r]
        r = r + 1
        
    if result:
        return symbol
        
    return EMPTY_POSITION

def getWinner(board):
    n = len(board)
    
    for row in range(n):
        winner = isRowFull(row, board)
        
        if winner != EMPTY_POSITION:
            return winner
            
    for col in range(n):
        winner = isColFull(col, board)
        
        if winner != EMPTY_POSITION:
            return winner
            
    winner = isMainDiagonalFull(board)
    if winner != EMPTY_POSITION:
        return winner
        
    winner = isSecondDiagonalFull(board)
    if winner != EMPTY_POSITION:
        return winner
        
    return EMPTY_POSITION 

def computerMove(game):

    def getEmptyPositions(board):
        result = []
        n = len(board)

        for row in range(n):
            for col in range(n):
                if board[row][col] == EMPTY_POSITION:
                    position = [row, col]
                    result.append(position)
                
        return result

    def randomPlayer(board, posiblePosition):       

        randomPosition = random.randrange(0, len(posiblePosition))

        board[posiblePosition[randomPosition][0]][posiblePosition[randomPosition][1]] = AI_PLAYER

        return board

    def invinsiblePlayer(board, posiblePosition):

        def miniMax(board, turn, currentPlayer):

            if isGameOver(board):
                winner = getWinner(board)

                if winner == turn:
                    return 1
                    
                if winner == EMPTY_POSITION:
                    return 0
                    
                return -1
                
            bestValue = 0
            if currentPlayer == turn:
                bestValue = -sys.maxsize - 1
            else:
                bestValue = sys.maxsize
                
            options = getEmptyPositions(board)
            
            for option in options:
                board[option[0]][option[1]] = currentPlayer
                
                newCurrentPlayer = EMPTY_POSITION
                if currentPlayer == HUMAN_PLAYER:
                    newCurrentPlayer = AI_PLAYER
                else:
                    newCurrentPlayer = HUMAN_PLAYER
                    
                value = miniMax(board, turn, newCurrentPlayer)

                board[option[0]][option[1]] = EMPTY_POSITION

                if currentPlayer == turn:
                    bestValue = max(bestValue, value)
                else:
                    bestValue = min(bestValue, value)            

            return bestValue
            
        bestMove = []
        bestMoveValue = -sys.maxsize - 1
        sym = AI_PLAYER 
        
        moves = getEmptyPositions(board)
        
        for move in moves:
            currentPlayer = EMPTY_POSITION
            
            if sym == AI_PLAYER:
                currentPlayer = HUMAN_PLAYER
            else:
                currentPlayer = AI_PLAYER
                
            board[move[0]][move[1]] = sym
            
            value = miniMax(board, sym, currentPlayer)

            board[move[0]][move[1]] = EMPTY_POSITION

            if value > bestMoveValue:
                bestMoveValue = value
                bestMove = move
        
        board[bestMove[0]][bestMove[1]] = AI_PLAYER

        return board

    t = random.randrange(2, 5)
    time.sleep(t)

    posiblePosition = getEmptyPositions(game["board"])

    if game["AI"] == RANDOM_AI:
        game["board"] = randomPlayer(game["board"], posiblePosition)
    else:
        game["board"] = invinsiblePlayer(game["board"], posiblePosition)    
    
    return game

def humanMove(game):
    is_LoopExit = False

    [moveRow, moveCol] = [-1, -1]

    while not is_LoopExit:
        x = input("Your turn: ")

        if x.lower() == "s":
            filename = input("Enter a file name: ")

            saveGame(filename, game)

        if x.count(" ") == 1:
            [moveRow, moveCol] = x.split()

            if str(moveRow).isdigit() and str(moveCol).isdigit():
                moveRow = int(moveRow) - 1
                moveCol = int(moveCol) - 1

                if validMove(moveRow, moveCol, game["board"]):
                    is_LoopExit = True
                
        if not is_LoopExit:
            print("Nevalid input!")
                
    return [moveRow, moveCol]

def gamePlay(game):

    is_LoopExit = False
    result = ''

    currentTurn = game["turn"]    

    while not is_LoopExit:
        
        printBoard(game["board"])
        game["turn"] = 2 - currentTurn % 2  

        if  currentTurn % 2 == 1:
            [moveRow, moveCol] = humanMove(game)
            dashBoard = game["board"]

            dashBoard[moveRow][moveCol] = HUMAN_PLAYER

            game["board"] = dashBoard

            if checkWinner(HUMAN_PLAYER, dashBoard):
                result = "You won! Congratulations!"
                is_LoopExit = True

        else:
            print("Computer is thinking...")
            game = computerMove(game)

            dashBoard = game["board"]

            if checkWinner(AI_PLAYER, dashBoard):
                result = "You lost! Maybe next time..."
                is_LoopExit = True

        if not is_LoopExit and checkFull(dashBoard):
            result = "The game is a draw!"
            is_LoopExit = True
        
        currentTurn = currentTurn + 1

    return result

def startMenu(game):
    s = 'Welcome to the game. Choose your option from the listed below:\n'
    s = f"{s}Press (n)ew game / (l)oad game"

    is_LoopExit = False
    result = 0

    while not is_LoopExit:
        print(s)
        str = input()

        if str.lower() == 'l':
            # Зареждане на игра от файл
            gamePath = input('въведете име на файл: ')
            gameLoad = loadGame(gamePath)

            if  gameLoad == FAULT:
                return IS_EXIT

            game = json.loads(str(gameLoad))

        elif str.lower() == 'n':
            # Нова игра
            s = "Трудност\n" 
            s = f'{s}1 - Лесно AI\n'
            s = f"{s}2 - Непобедим AI\n"

            game["board"] = newBoard()
            game["nicknam"] = input("Въведете никнейм: ")

            is_Vrong_AI = False
            while   not is_Vrong_AI:
                print(s)
                str = input("Въведете трудност: ")
                if str == '1' or str == '2':
                    game["AI"] = int(str)
                    is_Vrong_AI = True

        s = "To make a move, enter row and column numbers (from 1 to 3). To save the game, enter `s` for a row."
        print(s)

        return gamePlay(game)

game = {
    "nicknam":"",
    "turn":1,
    "AI": 1,
    "board":[]
}

result = startMenu(game)
printBoard(game["board"])
print(result)