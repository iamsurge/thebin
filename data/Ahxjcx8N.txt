bool CBaseObject::Construct( float flHealth )
{
	// Multiply it by the repair rate
	flHealth *= GetConstructionMultiplier();
	if ( !flHealth )
		return false;

	if ( IsBuilding() )
	{
		// Reduce the construction time by the correct amount for the health passed in
		float flConstructionTime = flHealth / ((GetMaxHealth() - OBJECT_CONSTRUCTION_STARTINGHEALTH) / m_flTotalConstructionTime);
		if ( flConstructionTime < 0.0f )
		{
			flConstructionTime *= -1.0f;
		}

		m_flConstructionTimeLeft = MAX( 0, m_flConstructionTimeLeft - flConstructionTime);
		m_flConstructionTimeLeft = clamp( m_flConstructionTimeLeft, 0.0f, m_flTotalConstructionTime );

		m_flPercentageConstructed = m_flConstructionTimeLeft / m_flTotalConstructionTime;

		if ( flHealth >= 0.0f )
		{
			// Only do this if we're not reversing construction
			m_flPercentageConstructed = 1.0f - m_flPercentageConstructed;
		}
		m_flPercentageConstructed = clamp( (float) m_flPercentageConstructed, 0.0f, 1.0f );

		// Increase health (unless it's a mini-building, which start at max health)
		// Minibuildings build health at a reduced rate
		// Staging_engy
		{
			SetHealth( MIN( GetMaxHealth(), m_flHealth + (IsMiniBuilding() ? (flHealth * 0.5f) : flHealth) ) );
		}

		// Return true if we're constructed now
		if ( m_flConstructionTimeLeft <= 0.0f )
		{
			FinishedBuilding();
			return true;
		}
	}
	else
	{
		// Return true if we're already fully healed
		if ( GetHealth() >= GetMaxHealth() )
			return true;

		// Increase health.
		SetHealth( MIN( GetMaxHealth(), MAX( 1, m_flHealth + flHealth ) ) );

		m_OnRepaired.FireOutput( this, this);

		// Return true if we're fully healed now
		if ( GetHealth() == GetMaxHealth() )
			return true;
	}

	return false;
}