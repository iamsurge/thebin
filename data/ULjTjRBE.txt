#include <bits/stdc++.h>

using namespace std;
using ll = long long;

constexpr int N = 2e3 + 5;
constexpr ll mod = 1e9 + 7;
int n, a[N];
string m;

int dp[12][12][2002][3];

// 0: less
// 1: equal
// 2: more

void Read()
{
    cin >> n >> m;

    reverse(m.begin(), m.end());

    for (int i = 1; i <= n; ++i)
        cin >> a[i];
}

void Solve()
{
    dp[0][0][0][1] = 1;

    for (int i = 0; i < (int)m.size(); ++i)
    {
        for (int j = 1; j <= n; ++j)
            for (int sum = 0; sum <= 2000; ++sum)
                for (int comp = 0; comp < 3; ++comp)
                    if (dp[i][j - 1][sum][comp])
                    {
                        for (int digit = 0; digit < 9 && digit + sum <= 2000; ++digit)
                            (dp[i][j][sum + digit][comp] += dp[i][j - 1][sum][comp]) %= mod;
                    }

        for (int sum = 0; sum <= 2000; ++sum)
        {
            if (sum % 10 < m[i] - '0')
            {
                (dp[i + 1][0][sum / 10][0] += dp[i][n][sum][0] + dp[i][n][sum][1] + dp[i][n][sum][2]) %= mod;
            }
            else if (sum % 10 == m[i] - '0')
            {
                for (int comp = 0; comp < 3; ++comp)
                    (dp[i + 1][0][sum / 10][comp] += dp[i][n][sum][comp]) %= mod;
            }
            else
            {
                (dp[i + 1][0][sum / 10][2] += dp[i][n][sum][0] + dp[i][n][sum][1] + dp[i][n][sum][2]) %= mod;
            }
        }
    }

    cout << (dp[m.size()][0][0][0] + dp[m.size()][0][0][1]) % mod;
}

int32_t main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    Read();
    Solve();
}

