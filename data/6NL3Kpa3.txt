#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;



// Base class
class Plant
{
private:
	string name; // name of the plant
	double cost; // cost of the plant
public:
	Plant() // default constructor
	{
		name = "";
		cost = 0;
	}
	Plant(string plantName, double plantCost) // main constructor
	{
		name = plantName;
		cost = plantCost;
	}
	string getName() // getter - name
	{
		return name;
	}
	double getCost() // getter - cost
	{
		return cost;
	}
	bool operator == (Plant p) // operator overload compare name
	{
		if (name == p.getName())
			return true;
		return false;
	}

	virtual void display() // display the name and cost of the plant
	{
		cout << name << "   $" << cost << endl;
	}

	// overload the << operator and use it a friend function
	friend ostream& operator <<(ostream& os, const Plant& p); 
};

//overload the << operator for the plant class
ostream& operator <<(ostream& os, const Plant& p)
{
	os << p.name << p.cost;
	return os;
}

// derivative class
class Flower : public Plant
{
private:
	string color; // flower color
	bool isAnual; // flower type
public:
	Flower() { color = ""; isAnual = false; } // default constructor
	// main constructor
	Flower(string plantName, double plantCost, string flowerColor, bool flowerType)
		:Plant(plantName, plantCost) // using the plant constructor
	{
		// setting the flower properties
		color = flowerColor;
		isAnual = flowerType;
	}
	void display() // display fn for the flower fn(virtual in the base class)
	{
		string s = isAnual ? "annual" : "perennial";
		cout << getName() << "   $" << getCost() <<"    "<< color << "   "<< s << endl;
	}
	friend ostream& operator <<(ostream& os, const Flower& f);
};

ostream& operator <<(ostream& os, const Flower& f) // overloading the << operator for the flower class
{
	os << f.color << f.isAnual;
	return os;
}



void addPlant(vector<Plant*> &pl)
{
	char sel;
	// get selected option
	cout << "Enter plant type ('P' - plant, 'F' - flower): ";
	cin >> sel;
	cout << endl;
	if (tolower(sel) == 'p') // if plant
	{
		string eName = "";
		double eCost = 0;

		// get the name and cost of the plant from the user
		cout <<"Enter plant name: ";
		cin >> eName;
		cout << endl << "Enter plant cost: ";
		cin >> eCost;
		cout << endl;

		// add the plant to the vector
		pl.push_back(new Plant(eName, eCost));
	}
	else if(tolower(sel) == 'f')
	{
		string eName = "", eColor = "";
		double eCost = 0;
		bool eType = false;
		char sel;
		// get the name, cost, color and type of the flower from the user
		cout << "Enter flower name: ";
		cin >> eName;
		cout << endl << "Enter flower cost: ";
		cin >> eCost;
		cout <<endl<< "Enter flower color: ";
		cin >> eColor;
		cout << endl << "Enter if flower is anual (Y/N): ";
		cin >> sel;
		cout << endl;

		if (tolower(sel) == 'y')
			eType = true;
		// add the flower to the vector
		pl.push_back(new Flower(eName, eCost, eColor, eType));
	}
	else
	{
		// if the user entered a bad type
		cout << "Please enter `P` or `F` only!!" << endl;
		addPlant(pl); // reruning the fn to display the selection again
	}
}

void removePlant(vector<Plant*>& pl) // removes a plant from the vector
{
	// user promt to get the name of the plant that needs to be removed
	string eName;
	cout << "Enter a plant name to remove: ";
	cin >> eName; //getting the name
	cout << endl;

	for (int i = 0; i < pl.size(); i++) // iteratates tru the vector
	{
		if (pl[i]->getName() == eName) // if we find the name
		{
			pl.erase(pl.begin() + i); // eraseing the element by position
			cout << "Plant '" << eName << "' removed from the garden!"<<endl;
			return; // ending the function
		}
	}
	
	// if the function didnt return yet, then it didnt find the plant with the given name
	cout << "ERROR  - Plant '" << eName << "' is not in the garden." << endl;
}

void displayVec(const vector<Plant*> &pl) // displays plant or flower
{
	for (int i = 0; i < pl.size(); i++) // iteratates tru the vector
	{
		cout << "Plant " << i << ": "; // numarates the plants
		pl[i]->display(); // displays the plant
	}
}

double totalCost(const vector<Plant*>& pl)
{
	double res = 0;
	for (int i = 0; i < pl.size(); i++) // iteratates tru the vector
	{
		res += pl[i]->getCost(); // ads up all the plant cost
	}

	return res; // returns the result(total cost of all plants)
}


// in sort how to compare elements
class compareByCost // comparing by name
{
public:
	bool operator()(Plant* a, Plant* b)
	{
		return a->getCost() < b->getCost();
	}
};
class compareByName // comparin by cost
{
public:
	bool operator()(Plant* a, Plant* b)
	{
		return a->getName() < b->getName();
	}
};

bool checkSel(int x) // check if the value is between 1 and 7
{
	if (x < 1 or x >7)
	{
		return false;
	}
	return true;
}

int main()
{

	// declaring the plant vector
	// plant vector is type Plant class pointers
	vector<Plant*> plant;


	// creating the menu
	bool menu = true;
	do
	{
		int selection;
		// selection
		cout << endl << "***MY GARDEN MENU***" << endl;
		cout << "   1. Add a new plant" << endl;
		cout << "   2. Remove a plant" << endl;
		cout << "   3. Display plants" << endl;
		cout << "   4. Total cost" << endl;
		cout << "   5. Sort by plant name" << endl;
		cout << "   6. Sort by plant cost" << endl;
		cout << "   7. Quit" << endl;

		cout << "Enter selection: ";
		cin >> selection; // getting the char
		cout << endl;
		if (!checkSel(selection)) // checks if the input is a valid option
		{
			cout << "Invalid selection. Please select value between 1-7!!";
			continue; // starts over
		}
		
		switch (selection) //switch cases for all the options
		{
		case 1: // add a new plant
			addPlant(plant);
			break;
		case 2: // remove a plant
			removePlant(plant);
			break;
		case 3: // display all the plants
			displayVec(plant);
			break;
		case 4: // get the total cost
			cout << "The total cost of all the plants and flowers is: $" << totalCost(plant) <<endl;
			break;
		case 5: // sort by plant name
			sort(plant.begin(), plant.end(), compareByName());
			displayVec(plant);
			break;
		case 6: // sort by plant cost
			sort(plant.begin(), plant.end(), compareByCost());
			displayVec(plant);
			break;
		case 7:// quit
			menu = false;
			break;
		default:
			break;
		}
	

	} while (menu); // runs till the menu is still true

	return 0;

}
