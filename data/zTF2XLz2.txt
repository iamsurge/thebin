#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
using namespace std;
const int maxn = 1e5 + 10;
int n, m;
vector<int> graph[maxn];

int discovarable_time[maxn];
int low_link[maxn];
bool on_stack[maxn];
vector<vector<int> > scc;
int current_time = 0;
void dfs(int node) {
    static stack<int> st;
    discovarable_time[node] = current_time;
    low_link[node] = current_time;
    current_time++;
    st.push(node);
    on_stack[node] = true;
    
    for(int i = 0; i < (int) graph[node].size(); i++) {
        int neighbour = graph[node][i];
        if(discovarable_time[neighbour] == -1) {
            dfs(neighbour);
            low_link[node] = min(low_link[node], low_link[neighbour]);
        }
        else if(on_stack[neighbour]) {
            low_link[node] = min(low_link[node], discovarable_time[neighbour]);
        }
    }
    
    if(discovarable_time[node] == low_link[node]) {
        vector<int> v;
        while(!st.empty()) {
            int t = st.top();
            st.pop();
            on_stack[t] = false;
            v.push_back(t);
            if(t == node) {
                break;
            }
        }
        scc.push_back(v);
       
       
    }
    
}
void SCC() {
    for(int i = 0; i < maxn; i++) {
        discovarable_time[i] = -1;
        on_stack[i] = 0;
    }
    int result = 0;
    for(int i = 0; i < n; i++) {
        if(discovarable_time[i] == -1) {
            dfs(i);
        }
    }
}
int main()
{
    cin >> n >> m;
    
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        graph[a].push_back(b);
    }
    SCC();
    cout << (int) scc.size() << endl;
    int result = 0;
    for(int i = 0; i < (int) scc.size(); i++) {
        result = max(result, (int) scc[i].size());
    }
    cout << result << endl;
    return 0;
}
