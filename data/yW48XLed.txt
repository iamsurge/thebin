("use strict");
const CACHE_VERSION = 5;
let CURRENT_CACHES = { offline: "cache-" + CACHE_VERSION };
const OFFLINE_URL = "./offline.html";
self.addEventListener("install", (event) => {
	event.waitUntil(
		fetch(OFFLINE_URL).then(function (response) {
			return caches.open(CURRENT_CACHES.offline).then(function (cache) {
				return cache.addAll([OFFLINE_URL, "/css/css.css"]);
			});
		})
	);
});
self.addEventListener("activate", (event) => {
	let expectedCacheNames = Object.keys(CURRENT_CACHES).map(function (key) {
		return CURRENT_CACHES[key];
	});
	event.waitUntil(
		caches.keys().then((cacheNames) => {
			return Promise.all(
				cacheNames.map((cacheName) => {
					if (expectedCacheNames.indexOf(cacheName) === -1) {
						return caches.delete(cacheName);
					}
				})
			);
		})
	);
});
self.addEventListener("fetch", (event) => {
	if (event.request.mode === "navigate" || (event.request.method === "GET" && event.request.headers.get("accept").includes("text/html"))) {
		event.respondWith(
			fetch(event.request).catch((error) => {
				console.log("Could not load the page", error);
				return caches.match(OFFLINE_URL);
			})
		);
	} else {
		event.respondWith(
			fetch(event.request).catch((error) => {
				return caches.match(event.request);
			})
		);
	}
});
