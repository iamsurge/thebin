const fs = require('fs')

// const input = fs.readFileSync('test.txt').toString()
const input = fs.readFileSync('input.txt').toString().trim()

const [stackPart, instructions] = input.replaceAll(' ', '_').trim().split('\n\n')

const moves = instructions.split('\n').map((instruction) => {
  const [_, count, from, to] = /move_(\d*)_from_(\d*)_to_(\d*)/gi.exec(instruction).map(Number)
  return { count, from, to }
})
const length = +stackPart.split('\n').at(-1).split('_').at(-1)

const stackLines = stackPart
  .split('\n')
  .slice(0, -1)
  .map((line) => line.replaceAll(/[\[\]]/g, '').replaceAll('__', '_'))

const stack = Array.from(Array(length), () => [])
  .map((_, index) => stackLines.map((line) => line.at(index ? index * 2 : index))
    .filter((item) => item && item !== '_'))

const restack9000 = moves.reduce((acc, { count, from, to }) => {
  Array.from(Array(count)).forEach(() => {
    acc[to - 1].unshift(acc[from - 1].shift())
  })
  return acc
}, stack.map((col) => [...col]))

const restack9001 = moves.reduce((acc, { count, from, to }) => {
  const fromIndex = from - 1
  const toIndex = to - 1
  acc[toIndex] = acc[fromIndex].slice(0, count).concat(acc[toIndex])
  acc[fromIndex] = acc[fromIndex].splice(count, acc[fromIndex].length - 1)
  return acc
}, stack.map((col) => [...col]))

console.log({
  top9000: restack9000.map((column) => column.at(0)).join(''),
  top9001: restack9001.map((column) => column.at(0)).join(''),
})
