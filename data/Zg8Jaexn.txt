modem = peripheral.wrap("right")
chest = peripheral.wrap("front")
gchan = 42900
lchan = 42901
gitem = ""
modem.open(gchan)
function search(item)
    indexes = {}
    gitem = item
    local length = chest
    length = length.list()
    length = #length
    print("search " .. item)
    --print(length)
    local active = {}
    local inactive = {}
    local isActive = "false"
    local isInactive = "false"
    local fisInactive = "false"
    local fisActive = "false"
    for i = 1, length, 1 do
        local citem = chest.getItem(i)
        actS = citem.getMetadata().individual.genome.active.species.displayName
        inaS = citem.getMetadata().individual.genome.inactive.species.displayName
        --print(i)
        --print(actS)
        --print(inaS)
        table.insert(active, actS)
        table.insert(inactive, inaS)
    end
    for i = 1, #active, 1 do
        ind = i
        local dispLength = #active[i]
        item2 = string.sub(item, 1, dispLength)
        item3 = string.sub(item, #item2 + 1, #item)
        isActive = false
        isInactive = false
        if active[i] == item2 then
            isActive = "true"
        end
        
        if inactive[i] == item3 then
            isInactive = "true"
        end
        -------
        if inactive[i] == item2 then
            fisInctive = "true"
        end
        
        if active[i] == item3 then
            fisActive = "true"
        end
        ------
        print("is Active: " .. tostring(isActive))
        print("is Inactive: " .. tostring(isInactive))
        print("is flip Active: " .. tostring(fisActive))
        print("is flip Inactive: " .. tostring(fisInactive))
        if isActive == "true" and isInactive == "true" then
            table.insert(indexes, ind)
            return("found" .. item)
            
        end
        --if fisActive == "true" and fisInactive == "true" then
            --return("founf" .. item)
        --end
    end
    --print("ITEM TWO " .. item2)
    --print("ITEM TWO " .. item3)


end

function get(item)

end

while true do
    event, side, frequency, replyFrequency, message, dist = os.pullEvent("modem_message")
    
    print(message)
    pre = string.sub(message, 1, 4)
    post = string.sub(message, 5, #message)
    --print(pre)
    --print(post)
    if pre == "ping" then
        print("recieved ping")
        local test = search(post)
        --print("after")
        --print(string.sub(test, 1, 5))
        if test then
            if string.sub(test, 1, 5) == "found" then
                
                print("Found Item at: " .. indexes[1])
                modem.transmit(lchan, lchan, "found" .. gitem)
            end
        end
    end
    if pre == "suck" then
        print("sucking")
        local target = indexes[1]
        for i = 1, target - 1, 1 do
            turtle.suck()
            turtle.dropUp()
        end
        turtle.suck()
        turtle.turnLeft()
        turtle.turnLeft()
        turtle.drop()
        turtle.turnLeft()
        turtle.turnLeft()
    end
end
