function dig()
	print("dig")
    while turtle.detect() do
        turtle.dig()
    end
end

function digForward(steps)
	print("digForward")
    steps = steps or 1
    for i = 1, steps do
        while turtle.detect() do
            turtle.dig()
        end
        turtle.forward()
    end
end

function digBack(steps)
	print("digBack")
    steps = steps or 1
    for i= 1, steps do
        turn()
        digForward()
    end
end

function digLeft(steps)
	print("digLeft")
    steps = steps or 1
    for i = 1, steps do
        turtle.turnLeft()
        digForward()
    end
end

function digRight(steps)
	print("digRight")
    steps = steps or 1
    for i= 1, steps do
        turtle.turnRight()
        digForward()
    end
end

function digUp(steps)
	print("digUp")
    steps = steps or 1
    for i = 1, steps do
        while turtle.detectUp() do
            turtle.digUp()
        end
        turtle.up()
    end
end

function digDown(steps)
	print("digDown")
    steps = steps or 1
    for i = 1, steps do
        while turtle.detectDown() do
            turtle.digDown()
        end
        turtle.Down()
    end
end

function turn()
	print("turn")
    turtle.turnRight()
    turtle.turnRight()
end

function inspect()
	print("inspect")
    local success, data = turtle.inspect()
    return inspectBase(success , data)
end

function inspectUp()
	print("inspectUp")
    local success, data = turtle.inspectUp()
    return inspectBase(success , data)
end

function inspectDown()
	print("inspectDown")
    local success, data = turtle.inspect()
    return inspectBase(success , data)
end

function inspectBase(success, data)
	print("inspectBase")
    if success then
        return data.name
    end
    
    return ""
end

function digStrip()
	print("digStrip")
    tryDigVaine()
    digUp()
    tryDigVaine()
    turtle.down()
    for currentStriplength = 1, striplength do
        digForward()
        tryDigVaine()
        if turtle.getFuelLevel() > 100 then
            refuel()
        end
        if getEmptyInventorySlotcount() > 3 then
            returnToChest()
            transferItemsToChest()
            returnToStrip()
        end

        if not currentStriplength % 2 == 0 then
            digUp()
        else
            digDown()
        end

        tryDigVaine()
        if turtle.getFuelLevel() > 100 then
            refuel()
        end
        if getEmptyInventorySlotcount() > 3 then
            returnToChest()
            transferItemsToChest()
            returnToStrip()
        end
    end

    if not striplength % 2 == 0 then
        turtle.down()
    end
end

function returnFromStrip()
	print("returnFromStrip")
    for i = 1, striplength do
        turtle.back()
    end
end

function digToNextStrip()
	print("digToNextStrip")
    digLeft()
    for i = 1, stripgap do
        digForward() 
        if not i % 2 == 0 then
            digUp()
        else
            digDown()
        end
    end

    if not i % 2 == 0 then
        turtle.down()
    end
    turtle.turnRight()
end

function placeChests()
	print("placeChests")
    turtle.turnRight()
    layers = 0
    for i = 1, 16 do
        turtle.select(i)
        while (turtle.getItemCount() > 1 and turtle.getItemDetail().name == "minecraft:chest") do
            dig()
            turtle.place()
            digLeft()
            turtle.turnRight()
            dig()
            turtle.place()

            turtle.turnLeft()
            turtle.back()
            turtle.turnRight()

            digUp()
            layers = layers + 1
        end
    end

    dig()
    digLeft()
    turtle.turnRight()
    dig()

    turtle.turnLeft()
    turtle.back()
    turtle.turnRight()

    for i = 1, layers do
        turtle.down()
    end
    turtle.turnLeft()
end

function transferItemsToChest()
	print("transferItemsToChest")
    for i = 1, 16 do
        turtle.select(i)
        if not turtle.refuel(0) then
            while not turtle.drop() do
                digUp()
                if not inspect() == "minecraft:chest" then
                    return false
                end
            end
        end
    end
    return true
end

function refuel()
	print("refuel")
    for i = 1, 16 do
        turtle.select(i)     
        if turtle.refuel(0) then
            for i = 1, turtle.getItemCount() do
                if turtle.getFuelLevel() >= turtle.getFuelLimit() then
                    return true
                end
                turtle.refuel(1)
            end
        end
    end
end

function tryDigVaine()
	print("tryDigVaine")
    if getMustDig(inspect()) then 
        digForward()
        tryDigVaine()
        turtle.back()
    end

    if getMustDig(inspectUp()) then
        digUp()
        tryDigVaine()
        turtle.down()
    end

    if getMustDig(inspectDown()) then
        digDown()
        tryDigVaine()
        turtle.up()
    end

    turtle.turnLeft()
    if getMustDig(inspect()) then 
        digForward()
        tryDigVaine()
        turtle.back()
    end

    turn()
    if getMustDig(inspect()) then
        digForward()
        tryDigVaine()
        turtle.back()
    end
    turtle.turnLeft() -- reposition straight
end

function getEmptyInventorySlotcount()
	print("getEmptyInventorySlotcount")
    slotcount = 0
    for i = 1, 16 do
        if turtle.getItemCount(i) == 0 then
            slotcount = slotcount + 1
        end
    end
    return slotcount
end

function returnToChest()
	print("returnToChest")
    for i = 1, currentStriplength do
        turtle.back()
    end
    if currentStriplength % 2 == 0 then
        turtle.down()
    end

    turtle.turnRight()
    for i = 1, (currentStripcount - 1) * (stripgap + 1) do
        turtle.forward()
    end
end

function returnToStrip()
	print("returnToStrip")
    for i = 1, (currentStripcount - 1) * (stripgap + 1) do
        turtle.back()
    end
    turtle.turnLeft()

    for i = 1, currentStriplength do
        turtle.forward()
    end
    if currentStriplength % 2 == 0 then
        turtle.up()
    end
end

function setBlocksToIgnore()
	print("setBlocksToIgnore")
    for i = 1, 16 do
        turtle.select(i)
        if turtle.getItemCount() > 0 and not turtle.refuel(0) then
            table.insert(blocksToIgnore, turtle.getItemDetail().name)
            turtle.drop()
        end
    end
end

function getMustDig(blockID)
	print("getMustDig")
    for i = 1, #blocksToIgnore do
        if blockID == blocksToIgnore[i] then
            return false
        end
    end
    return true
end

striplength = read()
stripcount = read()
stripgap = read()

currentStripcount = 1
currentStriplength = 1

blocksToIgnore = {}

refuel()
placeChests()
setBlocksToIgnore()
for currentStripcount = 1, stripcount do
    digStrip()
    returnFromStrip()

    if not currentStripcount == stripcount then
        digToNextStrip()
    end
end
returnToChest()