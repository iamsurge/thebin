#include <iostream>
#include <ctime>
#include <sys/types.h>
using namespace std;

void printArr(int* arr, int sz) {
    for (int i = 0; i < sz; i++) { cout << arr[i] << " "; }
    cout << endl;
}

int copyArr(int* arr1, int sz, int* arr2) {
    for (int i = 0; i < sz; i++) arr2[i] = arr1[i];
    return 0;
}

int fillArr(int* arr, int sz) {
    for (int i = 0; i < sz; i++) arr[i] = rand();
    return 0;
}

void selectionSort(int* arr, int sz) {
    for (int i = 0; i < sz - 1; i++) {
        int mini, index;
        mini = arr[i];
        index = i;
        for (int j = i + 1; j < sz; j++) {
            if (arr[j] < mini) {
                mini = arr[j];
                index = j;
            }
        }
        arr[index] = arr[i];
        arr[i] = mini;
    }
}

void quickSort(int* arr, int from, int to) {
    int i, j, etalon;
    i = from, j = to;
    etalon = arr[(from + to) / 2];
    do
    {
        while (arr[i] < etalon) i++;
        while (arr[j] > etalon) j--;
        if (i <= j){
            swap(arr[i++], arr[j--]);
        }
    } while (i <= j);

    if (from < to) {
        quickSort(arr, from, j);
        quickSort(arr, i, to);
    }
}

int main() {

    srand(time(0));
   for (int sz = 1000; sz <= 10000; sz += 1000) {
        clock_t c0, c1;
        int* arr1 = new int[sz];
        int* arr2 = new int[sz];
        fillArr(arr1, sz);
        copyArr(arr1, sz, arr2);
        
        c0 = clock();
        quickSort(arr1, 0, sz - 1);
        c1 = clock();
        cout << "quick sort " << sz << ": " << (float)(c1 - c0) / CLOCKS_PER_SEC << endl;

        c0 = clock();
        selectionSort(arr2, sz);
        c1 = clock();
        cout << "selection sort " << sz << ": " << (float)(c1 - c0) / CLOCKS_PER_SEC << endl;

        cout << endl;
        delete[] arr1;
        delete[] arr2;
    }
    return 0;
}