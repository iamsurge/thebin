#include <iostream>
#include <cmath>
#include <vector>

struct Point {
    int x;
    int y;
};

int main() {
    int n; std::cin >> n;
    std::vector<Point> points(n);
    for (int i = 0; i < n; ++i) {
        std::cin >> points[i].x;
        std::cin >> points[i].y;
    }
    std::vector<double> distances(n, 1e9 + 17);
    std::vector<int>seen(n);
    distances[0] = 0;
    double sum = 0;
    for (int i = 0; i < points.size(); i++) {
        int index = -1;
        for (int h = 0; h < points.size(); h++) {
            if (seen[h] == 0 && index == -1 || seen[h] == 0 && distances[index] > distances[h]) {
                index = h;
            }
        }

        sum = sum + distances[index];
        seen[index] = 1;
        for (int h = 0; h < points.size(); h++) {
            if (index != h) {
                Point first = points[index];
                Point second = points[h];
                double distance_to_point = std::sqrt(std::pow(first.x - second.x, 2) + std::pow(first.y - second.y, 2));
                if (distances[h] > distance_to_point) {
                    distances[h] = distance_to_point;
                }
            }
        }
    }

    std::cout << sum;
}
