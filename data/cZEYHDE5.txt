import org.junit.Before;
import org.junit.Test;
import org.softuni.exam.entities.Deliverer;
import org.softuni.exam.entities.Package;
import org.softuni.exam.structures.*;

import java.util.Arrays;
import java.util.List;
import java.util.Set;
import java.util.UUID;
import java.util.stream.Collectors;
import java.util.stream.StreamSupport;

import static org.junit.Assert.*;

public class DeliveriesManagerTests8 {
    private interface InternalTest {
        void execute();
    }

    private DeliveriesManager deliveriesManager;

    private Deliverer getRandomDeliverer() {
        return new Deliverer(
                UUID.randomUUID().toString(),
                UUID.randomUUID().toString());
    }

    private Package getRandomPackage() {
        return new Package(
                UUID.randomUUID().toString(),
                UUID.randomUUID().toString(),
                UUID.randomUUID().toString(),
                UUID.randomUUID().toString(),
                Math.min(1, Math.random() * 1_000_000_000));
    }

    @Before
    public void setup() {
        this.deliveriesManager = new DeliveriesManagerImpl();
    }

    public void performCorrectnessTesting(InternalTest[] methods) {
        Arrays.stream(methods)
                .forEach(method -> {
                    this.deliveriesManager = new DeliveriesManagerImpl();

                    try {
                        method.execute();
                    } catch (IllegalArgumentException ignored) { }
                });

        this.deliveriesManager = new DeliveriesManagerImpl();
    }

    // Correctness Tests
    @Test
    public void testGetDeliverers_WithEmptyCollection_ShouldReturnCorrectResults() {
        assertEquals(StreamSupport.stream(this.deliveriesManager.getDeliverers().spliterator(), false)
                .collect(Collectors.toSet()).size(), 0);
    }
}
