/**Парсит запрос в соответствии с шаблоном. 
 * Если в запросе есть ошибка, то вызывает синтаксическую ошибку.
 * 
 * @param {string} line – строка-запрос, кот. должна соответствовать template
 * @param {string} template – эталонная строка-запрос
 * @returns {obj} - словарь, где ключ - название параметра из template, значение - значение параметра из line
*/

function parseLine(line, lineNumber, template) 
{
    let inputWords = line.split(' ');
    let templateWords = template.split(' ');

    let validPart = '';
    let input = [];
    let inputShift = 0;

    for (let i = 0; i < templateWords.length; i++) 
    {
        // console.log(template);
        if (i + inputShift >= inputWords.length) 
        {
            syntaxError(lineNumber, validPart.length);
        }

        // ввод данных
        if (templateWords[i][0] == '<' && templateWords[i][templateWords[i].length - 1] == '>') 
        {
            let key = templateWords[i].substring(1, templateWords[i].length - 1);
            let inputValue = '';

            if (i === templateWords.length - 1) // последнее ли шаблонное слово
            {;
                inputValue = inputWords.slice(i + inputShift).join(' ');  // ввод до конца строки
                inputShift++;
            } 
            else  // ввод, после которого следует ещё хоть одно шаблонное слово
            {
                let inputData = [];
                while (inputWords[i + inputShift] != templateWords[i + 1] && i + inputShift < inputWords.length) 
                {   // конкатенируем все, пока не встретим следующее шаблонное слово
                    inputData.push(inputWords[i + inputShift]);
                    inputShift++;
                }

                if (inputWords[i + inputShift] != templateWords[i + 1] && i + inputShift == inputWords.length)
                    console.log(validPart.length);

                inputShift--; // убираем лишнее смещение (за начальное слово вводной группы)
                inputValue = inputData.join(' ');
            }

            input[key] = {'startIndex': validPart.length + 1, 'value': inputValue};
            validPart += ' ' + inputValue;
        }
        else if (templateWords[i] === inputWords[i + inputShift]) // совпадение шаблонных слов
            validPart += (i === 0 ? '' : ' ') + inputWords[i + inputShift];
        else syntaxError(lineNumber, validPart.length + 1);
    }

    return input;
}