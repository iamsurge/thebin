//#
#ifndef _GLIBCXX_NO_ASSERT
#include <cassert>
#endif
#include <cctype>
#include <cerrno>
#include <cfloat>
#include <ciso646>
#include <climits>
#include <clocale>
#include <cmath>
#include <csetjmp>
#include <csignal>
#include <cstdarg>
#include <cstddef>
#include <cstdio>
#include <cstdlib>
#include <cstring>
#include <ctime>

#if __cplusplus >= 201103L
#include <ccomplex>
#include <cfenv>
#include <cinttypes>
#include <cstdbool>
#include <cstdint>
#include <ctgmath>
#include <cwchar>
#include <cwctype>
#endif

// C++
#include <algorithm>
#include <bitset>
#include <complex>
#include <deque>
#include <exception>
#include <fstream>
#include <functional>
#include <iomanip>
#include <ios>
#include <iosfwd>
#include <iostream>
#include <istream>
#include <iterator>
#include <limits>
#include <list>
#include <locale>
#include <map>
#include <memory>
#include <new>
#include <numeric>
#include <ostream>
#include <queue>
#include <set>
#include <sstream>
#include <stack>
#include <stdexcept>
#include <streambuf>
#include <string>
#include <typeinfo>
#include <utility>
#include <valarray>
#include <vector>

#if __cplusplus >= 201103L
#include <array>
#include <atomic>
#include <chrono>
#include <condition_variable>
#include <forward_list>
#include <future>
#include <initializer_list>
#include <mutex>
#include <random>
#include <ratio>
#include <regex>
#include <scoped_allocator>
#include <system_error>
#include <thread>
#include <tuple>
#include <type_traits>
#include <typeindex>
#include <unordered_map>
#include <unordered_set>
#endif
//#include<ext/pb_ds/assoc_container.hpp>
//#include<ext/pb_ds/tree_policy.hpp>
// using namespace __gnu_pbds;

using namespace std;

using ll = long long;
using db = long double; // or double, if TL is tight
using str = string;     // yay python!

// pairs
using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pd = pair<db, db>;
#define pb push_back
#define mp make_pair
#define fi first
#define se second

template <class T> using V = vector<T>;
template <class T, size_t SZ> using AR = array<T, SZ>;
using vi = V<int>;
using vvi = V<vi>;
using vb = V<bool>;
using vll = V<ll>;
using vd = V<db>;
using vs = V<str>;
using vpii = V<pii>;
using vpll = V<pll>;
using vpd = V<pd>;

template <class T> using pair2 = pair<T, T>;

// vectors
// oops size(x), rbegin(x), rend(x) need C++17

template <class T> int sz(const T &a) { return a.size(); }

#define all(x) x.begin(), x.end()
#define rall(x) x.rbegin(), x.rend()
#define sor(x) sort(all(x))

template <class T> int lwb(V<T> &a, const T &b) {
  return int(lower_bound(all(a), b) - bg(a));
}
template <class T> int upb(V<T> &a, const T &b) {
  return int(upper_bound(all(a), b) - bg(a));
}

template <class T> using pqg = priority_queue<T, vector<T>, greater<T>>;
template <class T> using pql = priority_queue<T, vector<T>, less<T>>;

// loops
#define FOR(i, a, b) for (int i = (a); i < (b); ++i)
#define F0R(i, a) FOR(i, 0, a)
#define ROF(i, a, b) for (int i = (b)-1; i >= (a); --i)
#define R0F(i, a) ROF(i, 0, a)
#define rep(a) F0R(_, a)
#define each(a, x) for (auto &a : x)

const int MOD = 998244353;
const int MX = 2e5 + 5;
const ll BIG = 1e18; // not too close to LLONG_MAX
const db PI = acos((db)-1);
const int dx[4]{1, 0, -1, 0}, dy[4]{0, 1, 0, -1}; // for every grid problem!!
mt19937 rng((uint32_t)chrono::steady_clock::now().time_since_epoch().count());

// bitwise ops
// also see https://gcc.gnu.org/onlinedocs/gcc/Other-Builtins.html
constexpr long long pct(long long x) {
  return __builtin_popcount(x);
} // # of bits set
constexpr long long bits(long long x) { // assert(x >= 0); // make C++11
                                        // compatible until USACO updates ...
  return x == 0 ? 0 : 31 - __builtin_clz(x);
} // floor(log2(x))
constexpr long long p2(long long x) { return 1 << x; }
constexpr long long msk2(long long x) { return p2(x) - 1; }

ll cdiv(ll a, ll b) {
  return a / b + ((a ^ b) > 0 && a % b);
} // divide a by b rounded up
ll fdiv(ll a, ll b) {
  return a / b - ((a ^ b) < 0 && a % b);
} // divide a by b rounded down

template <class T> bool ckmin(T &a, const T &b) {
  return b < a ? a = b, 1 : 0;
} // set a = min(a,b)
template <class T> bool ckmax(T &a, const T &b) {
  return a < b ? a = b, 1 : 0;
} // set a = max(a,b)

template <class T, class U> bool ckmin(T &a, const U &b) {
  return b < a ? a = b, 1 : 0;
} // set a = min(a,b)
template <class T, class U> bool ckmax(T &a, const U &b) {
  return a < b ? a = b, 1 : 0;
} // set a = max(a,b)

template <class T, class U> T fstTrue(T lo, T hi, U f) {
  ++hi;
  assert(lo <= hi); // assuming f is increasing
  while (lo < hi) { // find first index such that f is true
    T mid = lo + (hi - lo) / 2;
    f(mid) ? hi = mid : lo = mid + 1;
  }
  return lo;
}
template <class T, class U> T lstTrue(T lo, T hi, U f) {
  --lo;
  assert(lo <= hi); // assuming f is decreasing
  while (lo < hi) { // find first index such that f is true
    T mid = lo + (hi - lo + 1) / 2;
    f(mid) ? lo = mid : hi = mid - 1;
  }
  return lo;
}

template <class T> void remDup(vector<T> &v) { // sort and remove duplicates
  sort(all(v));
  v.erase(unique(all(v)), end(v));
}
template <class T, class U> void erase(T &t, const U &u) { // don't erase
  auto it = t.find(u);
  assert(it != end(t));
  t.erase(it);
} // element that doesn't exist from (multi)set

ll myRand(ll B) { return (unsigned long long)rng() % B; }

// http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2016/p0200r0.html
template <class Fun> class y_combinator_result {
  Fun fun_;

public:
  template <class T>
  explicit y_combinator_result(T &&fun) : fun_(std::forward<T>(fun)) {}
  template <class... Args> decltype(auto) operator()(Args &&...args) {
    return fun_(std::ref(*this), std::forward<Args>(args)...);
  }
};

template <class Fun> decltype(auto) y_combinator(Fun &&fun) {
  return y_combinator_result<std::decay_t<Fun>>(std::forward<Fun>(fun));
}

template <class T, class U> istream &operator>>(istream &in, pair<T, U> &a) {
  in >> a.first >> a.second;
  return in;
}

template <class T, class U> ostream &operator<<(ostream &out, pair<T, U> &a) {
  out << a.first << ' ' << a.second << '\n';
  return out;
}

template <class T> istream &operator>>(istream &in, vector<T> &a) {
  each(i, a) { in >> i; }
  return in;
}

template <class T> ostream &operator<<(ostream &out, vector<T> &a) {
  each(i, a) { out << i << ' '; }
  out << '\n';
  return out;
}

template <typename T> T inverse(T a, T m) {
  T u = 0, v = 1;
  while (a != 0) {
    T t = m / a;
    m -= t * a;
    swap(a, m);
    u -= t * v;
    swap(u, v);
  }
  assert(m == 1);
  return u;
}

template <typename T> class Modular {
public:
  using Type = typename decay<decltype(T::value)>::type;

  constexpr Modular() : value() {}
  template <typename U> Modular(const U &x) { value = normalize(x); }

  template <typename U> static Type normalize(const U &x) {
    Type v;
    if (-mod() <= x && x < mod())
      v = static_cast<Type>(x);
    else
      v = static_cast<Type>(x % mod());
    if (v < 0)
      v += mod();
    return v;
  }

  const Type &operator()() const { return value; }
  template <typename U> explicit operator U() const {
    return static_cast<U>(value);
  }
  constexpr static Type mod() { return T::value; }

  Modular &operator+=(const Modular &other) {
    if ((value += other.value) >= mod())
      value -= mod();
    return *this;
  }
  Modular &operator-=(const Modular &other) {
    if ((value -= other.value) < 0)
      value += mod();
    return *this;
  }
  template <typename U> Modular &operator+=(const U &other) {
    return *this += Modular(other);
  }
  template <typename U> Modular &operator-=(const U &other) {
    return *this -= Modular(other);
  }
  Modular &operator++() { return *this += 1; }
  Modular &operator--() { return *this -= 1; }
  Modular operator++(int) {
    Modular result(*this);
    *this += 1;
    return result;
  }
  Modular operator--(int) {
    Modular result(*this);
    *this -= 1;
    return result;
  }
  Modular operator-() const { return Modular(-value); }

  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, int>::value,
                     Modular>::type &
  operator*=(const Modular &rhs) {
#ifdef _WIN32
    uint64_t x = static_cast<int64_t>(value) * static_cast<int64_t>(rhs.value);
    uint32_t xh = static_cast<uint32_t>(x >> 32), xl = static_cast<uint32_t>(x),
             d, m;
    asm("divl %4; \n\t" : "=a"(d), "=d"(m) : "d"(xh), "a"(xl), "r"(mod()));
    value = m;
#else
    value = normalize(static_cast<int64_t>(value) *
                      static_cast<int64_t>(rhs.value));
#endif
    return *this;
  }
  template <typename U = T>
  typename enable_if<is_same<typename Modular<U>::Type, long long>::value,
                     Modular>::type &
  operator*=(const Modular &rhs) {
    long long q = static_cast<long long>(static_cast<long double>(value) *
                                         rhs.value / mod());
    value = normalize(value * rhs.value - q * mod());
    return *this;
  }
  template <typename U = T>
  typename enable_if<!is_integral<typename Modular<U>::Type>::value,
                     Modular>::type &
  operator*=(const Modular &rhs) {
    value = normalize(value * rhs.value);
    return *this;
  }

  Modular &operator/=(const Modular &other) {
    return *this *= Modular(inverse(other.value, mod()));
  }

  friend const Type &abs(const Modular &x) { return x.value; }

  template <typename U>
  friend bool operator==(const Modular<U> &lhs, const Modular<U> &rhs);

  template <typename U>
  friend bool operator<(const Modular<U> &lhs, const Modular<U> &rhs);

  template <typename V, typename U>
  friend V &operator>>(V &stream, Modular<U> &number);

private:
  Type value;
};

template <typename T>
bool operator==(const Modular<T> &lhs, const Modular<T> &rhs) {
  return lhs.value == rhs.value;
}
template <typename T, typename U>
bool operator==(const Modular<T> &lhs, U rhs) {
  return lhs == Modular<T>(rhs);
}
template <typename T, typename U>
bool operator==(U lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) == rhs;
}

template <typename T>
bool operator!=(const Modular<T> &lhs, const Modular<T> &rhs) {
  return !(lhs == rhs);
}
template <typename T, typename U>
bool operator!=(const Modular<T> &lhs, U rhs) {
  return !(lhs == rhs);
}
template <typename T, typename U>
bool operator!=(U lhs, const Modular<T> &rhs) {
  return !(lhs == rhs);
}

template <typename T>
bool operator<(const Modular<T> &lhs, const Modular<T> &rhs) {
  return lhs.value < rhs.value;
}

template <typename T>
Modular<T> operator+(const Modular<T> &lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) += rhs;
}
template <typename T, typename U>
Modular<T> operator+(const Modular<T> &lhs, U rhs) {
  return Modular<T>(lhs) += rhs;
}
template <typename T, typename U>
Modular<T> operator+(U lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) += rhs;
}

template <typename T>
Modular<T> operator-(const Modular<T> &lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) -= rhs;
}
template <typename T, typename U>
Modular<T> operator-(const Modular<T> &lhs, U rhs) {
  return Modular<T>(lhs) -= rhs;
}
template <typename T, typename U>
Modular<T> operator-(U lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) -= rhs;
}

template <typename T>
Modular<T> operator*(const Modular<T> &lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) *= rhs;
}
template <typename T, typename U>
Modular<T> operator*(const Modular<T> &lhs, U rhs) {
  return Modular<T>(lhs) *= rhs;
}
template <typename T, typename U>
Modular<T> operator*(U lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) *= rhs;
}

template <typename T>
Modular<T> operator/(const Modular<T> &lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) /= rhs;
}
template <typename T, typename U>
Modular<T> operator/(const Modular<T> &lhs, U rhs) {
  return Modular<T>(lhs) /= rhs;
}
template <typename T, typename U>
Modular<T> operator/(U lhs, const Modular<T> &rhs) {
  return Modular<T>(lhs) /= rhs;
}

template <typename T, typename U>
Modular<T> power(const Modular<T> &a, const U &b) {
  assert(b >= 0);
  Modular<T> x = a, res = 1;
  U p = b;
  while (p > 0) {
    if (p & 1)
      res *= x;
    x *= x;
    p >>= 1;
  }
  return res;
}

template <typename T> bool IsZero(const Modular<T> &number) {
  return number() == 0;
}

template <typename T> string to_string(const Modular<T> &number) {
  return to_string(number());
}

// U == std::ostream? but done this way because of fastoutput
template <typename U, typename T>
U &operator<<(U &stream, const Modular<T> &number) {
  return stream << number();
}

// U == std::istream? but done this way because of fastinput
template <typename U, typename T> U &operator>>(U &stream, Modular<T> &number) {
  typename common_type<typename Modular<T>::Type, long long>::type x;
  stream >> x;
  number.value = Modular<T>::normalize(x);
  return stream;
}

/*
using ModType = int;

struct VarMod { static ModType value; };
ModType VarMod::value;
ModType& md = VarMod::value;
using Mint = Modular<VarMod>;
*/

constexpr int md = 1e9 + 7;
using Mint = Modular<std::integral_constant<decay<decltype(md)>::type, md>>;

void solve() {
  string fake_string;
  cin >> fake_string;
  string s;
  auto normalize = [](string s) {
    string result = "";
    int n = s.size();
    for (int i = 0; i < s.size(); ++i) {
      result += s[i];
      if (i + 1 == n) {
        return result;
      }
      result += '$';
      
    }
    return result;
  };
  s = normalize(fake_string);
  cerr << s << '\n';
  auto get_ans_stupid = [](string s) {
    ll ans = 0;
    for (int i = 1; i + 1 < s.size(); ++i) {
      int cur_cnt = 0;
      int bad_cnt = 0;
      for (int j = 1; j <= min(i, (int)s.size() - 1 - i); ++j) {
        if (s[i - j] != s[i + j]) {
          bad_cnt++;
          if (bad_cnt == 2)
            break;
        }
        cur_cnt += (s[i - j] != '$' && bad_cnt);
      }
      ans += cur_cnt;
    }
    return ans;
  };

  const int prime = 101;
  vector<Mint> prime_powers(s.size());
  auto get_hashes = [&prime_powers, prime](string s) {
    vector<Mint> ans(s.size() + 1, Mint(0));
    prime_powers[0] = 1;
    for (int i = 1; i <= s.size(); ++i) {
      prime_powers[i] = prime_powers[i - 1] * prime;
      ans[i] = ans[i - 1] + prime_powers[i - 1] * (s[i - 1] - 'a' + 1);
    }
    return ans;
  };

  auto get_ans_fast = [&get_hashes, &prime_powers](string s) {
    vector<Mint> pref_hashes = get_hashes(s);
    reverse(all(s));
    auto rev_pref_hashes = get_hashes(s);
    reverse(all(s));
    auto equals = [&pref_hashes, &rev_pref_hashes,
                   &prime_powers, &s](int l1, int r1, int l2, int r2) {
        l1++; r1++; l2++; r2++;
      int n = pref_hashes.size() - 1;
      int l = l1;
      int r = r1;
      int rev_l = n + 1 - r2;
      int rev_r = n + 1 - l2;
      Mint normal_res = (pref_hashes[r] - pref_hashes[l - 1]) * prime_powers[n - l];
      Mint rev_res =
          (rev_pref_hashes[rev_r] - rev_pref_hashes[rev_l - 1]) * prime_powers[n - rev_l];
      return normal_res == rev_res;
    };

    auto count_ans = [&s, &equals](int i) {
      int ans = 0;
      auto findfirst = [&s, &equals](int i, int least_diff) {
        if (i - least_diff < 0 || i + least_diff >= s.size()) return least_diff;
        if (s[i - least_diff] != s[i + least_diff])
          return least_diff;
        int l = least_diff;
        int r = min(i + 1, (int)s.size() - i);
        while (r - l > 1) {
          int m = l + (r - l) / 2;
          if (equals(i - m, i - least_diff, i + least_diff, i + m)) {
            l = m;
          } else {
            r = m;
          }
        }
        return r;
      };
      int first_diff = findfirst(i, 0);
      if(i - first_diff < 0 || i + first_diff >= s.size()) return 0;
      int second_diff = findfirst(i, first_diff + 1);
      ans = (second_diff - first_diff + 1) / 2;
      return ans;
    };

    ll ans = 0;
    for (int i = 0; i < s.size(); ++i) {
      ans += count_ans(i);
    }

    return ans;
  };
  ll ans = get_ans_fast(s);
  cout << ans << '\n';
}

signed main() {
  ios_base::sync_with_stdio(false);
  cin.tie(0);
  cout.precision(30);
  // setIO();
  int tt = 1;
  // cin >> tt;
  rep(tt) solve();
  // you should actually read the stuff at the bottom
}

/* stuff you should look for
 * long long overflow, array bounds
 * special cases (n=1?)
 * do smth instead of nothing and stay organized
 * WRITE STUFF DOWN
 * DON'T GET STUCK ON ONE APPROACH
 */
