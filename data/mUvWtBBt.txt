int searchByAddress(user_data * point, char * address, int size) {
    int number = -1;
    for (int i = 0; i < size; i++) {
        if (strcmp(address, point[i].adress) == 0) { // проверяем строки на соответствие введенным данным
            return i; //возвращаем номер
        }
    }
    return number;
}

int searchByStatus(user_data * point, char * status, int size) {
    int number = -1;
    for (int i = 0; i < size; i++) {
        if (strcmp(status, point[i].status) == 0) { // проверяем строки на соответствие введенным данным
            return i; //возвращаем номер
        }
    }
    return number;
}

int dateComparator(const user_data *userA, const user_data *userB) {
    if (userA->data[0] != userB->data[0])
        return userA->data[0] - userB->data[0];
    if (userA->data[1] != userB->data[1])
        return userA->data[1] - userB->data[1];
    return userA->data[2] - userB->data[2];
}

int timeComparator(const user_data *userA, const user_data *userB) {
    if (userA->timeH != userB->timeH)
        return userA->timeH - userB->timeH;
    return userA->timeMin - userB->timeMin;
}

// функция сортировки по времени и дате
void sort_(user_data* point, int size, int (*comparator)(const void *,const void *)) {
    qsort(point, size, sizeof(point[0]), comparator);
}

void sortByDate(user_data* point, int size) {
    sort_(point, size, dateComparator);
}

void sortByTime(user_data* point, int size) {
    sort_(point, size, timeComparator);
}