#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int commandChoice;

void pline(int numberOfPage){
    printf("\t");
    for(int i=0; i<numberOfPage; i++){
        printf("-----");
    }
    printf("\n");
}

//This function return the least recently used position (ex: i-n)
int getLoc(int time[], int n){
    int minimum = time[0], loc = 0;

    for(int i=1; i < n; i++){
        if(time[i] < minimum){
            minimum = time[i];
            loc = i;
        }
    }
    return loc;
}
void lru(){
    int numberOfPage, numOfFrames, pos, pageFault = 0, pageHit = 0;
    int count = 0, loc;

    char referenceString[30];
    printf("\tRerence String: ");
    fflush(stdin);
    scanf("%s", &referenceString);
    printf("\tNumber of frames: ");
    scanf("%d", &numOfFrames);

    numberOfPage = strlen(referenceString);

    char lru[numOfFrames];//storing the lru manner with size of number of frames
    char timeSnapshot[numberOfPage]; // storing the status of that time (ex: * or -)
    char result[numOfFrames][numberOfPage];//creating a multi d array, to store the whole result of what's happening
    int time[numOfFrames];// storing the count number of the pages if the pages count is less than count

    for(int i=0; i<numOfFrames; i++){
        lru[i] = '-'; // initializing the each page frame to default before adding values
    }

    for(int i=0; i<numberOfPage; i++){
        int notEmpty = 1, isFull = 1;

        // Hit
        for(int j=0; j<numOfFrames; j++){
            if(lru[j] == referenceString[i]){ // if the current page is equal to any page frame
                count++; //increment count
                time[j] = count;// and store it to the time array
                pageHit++; //increase the value of page hit
                notEmpty = isFull = 0; // since it is equal we don't want our next condition to run
                timeSnapshot[i] = '-';//store the simbol of that snapshot for the printing of info
                break; // to exit the loop
            }
        }
        // End of Hit

        // Not empty frames
        if(notEmpty){
            for(int j=0; j<numOfFrames; j++){ //if the frame is empty
                if(lru[j] == '-'){
                    count++; //increment count
                    pageFault++; //increase the value of page hit
                    lru[j] = referenceString[i]; // we set the current refference string to lru page frame
                    time[j] = count; // we are not storing the value of count to array time
                    timeSnapshot[i] = '*';//store the simbol of that snapshot for the printing of info
                    isFull = 0;// since it is not empty, we set the isfull to false so that it cannot be run
                    break;// to exit the loop
                }
            }
        }
        // End of not empty frames

        // Full frames, run lru algo
        if(isFull){
            loc = getLoc(time, numOfFrames);// storing the
            count++;
            pageFault++;
            lru[loc] = referenceString[i];
            time[loc] = count;
            timeSnapshot[i] = '*';
        }
        //end

        for(int j=0; j<numOfFrames; j++){
            result[j][i] = lru[j];
        }
    }
    pline(numberOfPage);
    printf("\t");
    for(int i=0; i<numberOfPage; i++){
        printf("| %c |", referenceString[i]);
    }
    printf("\n");
    pline(numberOfPage);
    for(int j=0; j<numOfFrames; j++){
        printf("\t");
        for(int i=0; i<numberOfPage; i++){
            printf("[ %c ]", result[j][i]);
        }
        printf("\n");
    }
    pline(numberOfPage);
    printf("\t");
    for(int i=0; i<numberOfPage; i++){
        printf("| %c |", timeSnapshot[i]);
    }
    printf("\n");
    pline(numberOfPage);
    printf("\n\t[*] Page Faults:\t%d / %d", pageFault, numberOfPage);
    printf("\n\t[-] Page Hits:\t%d / %d\n", pageHit, numberOfPage);
    printf("\n\tPlease enter any key to continue...");
    getch();
    system("cls");
}
void fifo(){
    int numberOfPage, numOfFrames, pageFault = 0, pageHit = 0, localLoop = 0;
    char referenceString[30];
    printf("\tRerence String: ");
    scanf("%s", &referenceString);
    printf("\tNumber of frames: ");
    scanf("%d", &numOfFrames);

    numberOfPage = strlen(referenceString);
    char fifo[numOfFrames];
    char timeSnapshot[numberOfPage];
    char result[numOfFrames][numberOfPage];

    for(int i=0; i<numOfFrames; i++){
        fifo[i] = '-';
    }

    for(int i=0; i<numberOfPage; i++){
        int isHit = 0;
        for(int j=0; j<numOfFrames; j++){
            if(fifo[j] == referenceString[i]){
                pageHit++;
                isHit = 1;
                timeSnapshot[i] = '-';
            }
        }
        if(!isHit){
            pageFault++;
            fifo[localLoop] = referenceString[i];
            localLoop = (localLoop+1) % numOfFrames;
            timeSnapshot[i] = '*';
        }
        for(int j=0; j<numOfFrames; j++){
            result[j][i] = fifo[j];
        }
    }
    //CLEAR SCREEN
    pline(numberOfPage);
    printf("\t");
    for(int i=0; i<numberOfPage; i++){
        printf("| %c |", referenceString[i]);
    }
    printf("\n");
    pline(numberOfPage);
    for(int j=0; j<numOfFrames; j++){
        printf("\t");
        for(int i=0; i<numberOfPage; i++){
            printf("[ %c ]", result[j][i]);
        }
        printf("\n");
    }
    pline(numberOfPage);
    printf("\t");
    for(int i=0; i<numberOfPage; i++){
        printf("| %c |", timeSnapshot[i]);
    }
    printf("\n");
    pline(numberOfPage);
    printf("\n\tPage Faults:\t%d [*]/ %d", pageFault, numberOfPage);
    printf("\n\tPage Hits:\t%d [-]/ %d\n", pageHit, numberOfPage);
    printf("\n\tPlease enter any key to continue...");
    getch();
    system("cls");
}

void mainMenu(){
    do{
        printf("\t\t\t=============================================================\n");
        printf("\t\t\t|                         MAIN MENU                         |\n");
        printf("\t\t\t-------------------------------------------------------------\n");
        printf("\t\t\t|          [1]. FIRST FIT ALGORITHM (FIFO)                  |\n");
        printf("\t\t\t|          [2]. LEAST RECENTLY USED ALGORITHM (LRU)         |\n");
        printf("\t\t\t|          [3]. EXIT                                        |\n");
        printf("\t\t\t-------------------------------------------------------------\n\n\n");

        printf("\t\t\tSELECT NUMBER: ");
        scanf("%d", &commandChoice);
        switch(commandChoice){
            case 1:
                system("cls");
                printf("\t=============================================================\n");
                printf("\t|                 FIRST FIT ALGORITHM (FIFO)                |\n");
                printf("\t-------------------------------------------------------------\n");
                fifo();
                break;
            case 2:
                system("cls");
                printf("\t=============================================================\n");
                printf("\t|            LEAST RECENTLY USED ALGORITHM (LRU)            |\n");
                printf("\t-------------------------------------------------------------\n");
                lru();
                break;
            case 3:
                exit(0);
                break;
            default:
                printf("\n\t\t\tInvalid command, please select number from 1-3 only.");
                printf("\n\t\t\tPlease enter any key to continue...");
                getch();
                system("cls");
        }
    }while(commandChoice != 3);
}

int main(){
    printf("\t\t\t=============================================================\n");
    printf("\t\t\t|  A PROJECT ON SIMULATION OF MEMORY ALLOCATION ALGORITHMS  |\n");
    printf("\t\t\t-------------------------------------------------------------\n");
    printf("\t\t\t|              by: Jhomar L. Candelario                     |\n");
    printf("\t\t\t|                  Jamaica C. Sambrano                      |\n");
    printf("\t\t\t|                  Jericho DC. Sotto                        |\n");
    printf("\t\t\t-------------------------------------------------------------\n\n\n");

    printf("\t\t\tPlease enter any key to continue...");
    getchar();
    system("cls");
    mainMenu();
}
