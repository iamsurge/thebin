<?php

namespace MauticPlugin\SenderRandBundle\EventListener;

use Doctrine\ORM\EntityManager;
use Mautic\CoreBundle\Form\Type\SlotButtonType;
use Mautic\CoreBundle\Form\Type\SlotCodeModeType;
use Mautic\CoreBundle\Form\Type\SlotDynamicContentType;
use Mautic\CoreBundle\Form\Type\SlotImageCaptionType;
use Mautic\CoreBundle\Form\Type\SlotImageCardType;
use Mautic\CoreBundle\Form\Type\SlotSeparatorType;
use Mautic\CoreBundle\Form\Type\SlotSocialFollowType;
use Mautic\CoreBundle\Form\Type\SlotTextType;
use Mautic\CoreBundle\Helper\CoreParametersHelper;
use Mautic\CoreBundle\Helper\EmojiHelper;
use Mautic\EmailBundle\EmailEvents;
use Mautic\EmailBundle\Entity\Email;
use Mautic\EmailBundle\Event\EmailBuilderEvent;
use Mautic\EmailBundle\Event\EmailSendEvent;
use Mautic\EmailBundle\Model\EmailModel;
use Mautic\PageBundle\Entity\Redirect;
use Mautic\PageBundle\Entity\Trackable;
use Mautic\PageBundle\Model\RedirectModel;
use Mautic\PageBundle\Model\TrackableModel;
use Symfony\Component\EventDispatcher\EventSubscriberInterface;
use Symfony\Component\Translation\TranslatorInterface;
use Psr\Log\LoggerInterface;
use MauticPlugin\SenderRandBundle\Integration\Config;

class BuilderSubscriber implements EventSubscriberInterface
{
    /**
     * @var CoreParametersHelper
     */
    private $coreParametersHelper;

    /**
     * @var EmailModel
     */
    private $emailModel;

    /**
     * @var TrackableModel
     */
    private $pageTrackableModel;

    /**
     * @var RedirectModel
     */
    private $pageRedirectModel;

    /**
     * @var TranslatorInterface
     */
    private $translator;

    /**
     * @var EntityManager
     */
    private $entityManager;

    private $config;

    public function __construct(
        CoreParametersHelper $coreParametersHelper,
        EmailModel $emailModel,
        TrackableModel $trackableModel,
        RedirectModel $redirectModel,
        TranslatorInterface $translator,
        EntityManager $entityManager,
        LoggerInterface $logger,
        Config $config
    ) {
        $this->coreParametersHelper = $coreParametersHelper;
        $this->emailModel           = $emailModel;
        $this->pageTrackableModel   = $trackableModel;
        $this->pageRedirectModel    = $redirectModel;
        $this->translator           = $translator;
        $this->entityManager        = $entityManager;
        $this->logger = $logger;
        $this->config = $config;
    }

    /**
     * @return array
     */
    public static function getSubscribedEvents()
    {
        return [
            EmailEvents::EMAIL_ON_SEND  => [
                ['onEmailGenerate', 0],
            ],
            EmailEvents::EMAIL_ON_DISPLAY => [
                ['onEmailGenerate', 0],
            ],
        ];
    }

    public function onEmailGenerate(EmailSendEvent $event)
    {
        $this->logger->debug('onEmailGenerate() called');
        // Check if this plugin is enabled
        if (!$this->config->isPublished()) {
            return;
        }
        $email = $event->getEmail();
        $fromAddress = $email->getFromAddress();
        $replyToAddress = $email->getReplyToAddress();
        if (!$email->getUseOwnerAsMailer()) {
            // Check if email from address contains @sender.rand
            if (strpos($fromAddress, '@sender.rand') !== false) {
                // Get domains from plugin settings
                $domains = explode(',', $this->config->getFeatureSettings()['integration']['domains']);
                if (count($domains) > 0) {
                    // Choose random domain from domains
                    $domain = $domains[array_rand($domains)];
                    // Replace @sender.rand with chosen domain
                    $sender = str_replace('@sender.rand', '@' . $domain, $fromAddress);
                    // Update email from address
                    $email->setFromAddress($sender);
                    // Check if email reply to contains @sender.rand
                    if (strpos($replyToAddress, '@sender.rand') !== false) {
                        // Replace @sender.rand with chosen domain
                        $newReplyToAddress = str_replace('@sender.rand', '@' . $domain, $replyToAddress);
                        // Update email reply to address
                        $email->setReplyToAddress($newReplyToAddress);
                    }
                    $this->logger->debug('FROM ' . $email->getFromAddress() . '; REPLY TO ' . $email->getReplyToAddress());
                }
            }
        }
    }

}
