#define _USE_MATH_DEFINES 
#include <iostream>
#include <iomanip>
#include <vector>
#include <random>
#include <chrono>
#include <cmath>
#include <ctime>
using namespace std;
using namespace chrono;

typedef vector <double> vec;
typedef vector <vec> mat;

const double v = 10, EPS = 1e-5;

double A(double x, double t)
{
    return x * t + (x * x * t * t) + (x * x * x * t * t * t);
}

double f(double x)
{
    return v * ((x * 4 / 3) + (x * x / 4) + (x * x * x / 5));
}

vec Gauss(mat A, vec b)
{
    int n = b.size();

    // прямой ход
    for (int i = 0; i < n; ++i)
    {
        if (fabs(A[i][i]) < 1e-5)
        {
            int m = i;

            for (int k = i + 1; k < n; ++k)
                if (fabs(A[k][i]) > fabs(A[m][i])) m = k;

            swap(b[i], b[m]);

            for (int j = i; j < n; ++j)
                swap(A[i][j], A[m][j]);
        }

        // нормируем строку 
        for (int j = i + 1; j < n; ++j)
            A[i][j] /= A[i][i];

        // нормируем строку
        b[i] /= A[i][i]; A[i][i] = 1;

        // вычитаем из нижних строк текущую строку
        // получаем в i-ом столбце нули
        for (int k = i + 1; k < n; ++k)
        {
            for (int j = i + 1; j < n; ++j)
                A[k][j] -= A[i][j] * A[k][i];

            b[k] -= b[i] * A[k][i];
        }
    }

    vec x(n);

    // обратный ход
    for (int i = n - 1; i >= 0; --i)
    {
        x[i] = b[i];

        for (int j = i + 1; j < n; ++j)
            x[i] -= A[i][j] * x[j];
    }

    return x;
}

void print(vec& a)
{
    int n = a.size();

    cout << "Вектор: (";

    for (int i = 0; i < n - 1; ++i)
        cout << a[i] << ", ";

    cout << a[n - 1] << ")\n\n";
}

void print(mat& A, vec& b)
{
    int n = b.size();

    cout << "Матрица СЛУ имеет вид:\n";

    for (int i = 0; i < n; ++i, cout << "\n")
    {
        for (int j = 0; j < n; ++j)
            cout << left << setw(8) << A[i][j];

        cout << "| " << b[i];
    }

    cout << "\n";
}

int main()
{
    setlocale(LC_ALL, "Russian");
    cout << fixed << setprecision(5);

    double h = 0.01; int n = 1 / h;

    vec x(n);

    for (int k = 0; k < n; ++k)
        x[k] = k * h;

    mat matrix(n, vec(n));

    for (int i = 0; i < n; ++i)
        for (int j = 0; j < n; ++j)
            matrix[i][j] = h * A(x[i], x[j]) + (i == j);

    vec b(n);

    for (int i = 0; i < n; ++i)
        b[i] = f(x[i]);

    //print(matrix, b);

    vec y = Gauss(matrix, b);

    cout << "+----------+------------+------------+-----------+\n";
    cout << "|    x     |  expected  |  observed  |   delta   |\n";
    cout << "+----------+------------+------------+-----------+\n";

    for (int i = 0; i < n; ++i)
        cout << left << "| " << setw(8) << x[i] << " | " << setw(10) << v * x[i] << " | " << setw(10) << y[i] << " | " << setw(10) << fabs(y[i] - v * x[i]) << "|\n";

    cout << "+----------+------------+------------+-----------+\n";

    return 0;
}   