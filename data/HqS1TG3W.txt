#include <cstdio>
 
const int MAX = 128;
const int INF = 1000000000;
 
int n, m, p, plen;
int route[MAX*MAX];
int path[MAX*MAX*MAX];
char con[MAX][MAX];
int dist[MAX][MAX];
int en[MAX][MAX];
int edges[MAX*MAX][3];
 
int main(){
  //freopen("floyd.in", "r", stdin);
  //freopen("floyd.out", "w", stdout);
  scanf("%d%d%d", &n, &m, &p);
  int i, j, k;
  for (i=1; i<=n; i++){
    for (j=1; j<=n; j++){
      if (i == j){
        dist[i][i] = 0;
        con[i][i] = 1;
      }
      else{
        dist[i][j] = -INF;
      }
    }
  }
  for (i=1; i<=m; i++){
    int b, e, w;
    scanf("%d%d%d", &b, &e, &w);
    edges[i][0] = b;
    edges[i][1] = e;
    edges[i][2] = w;
    if (dist[b][e] < w){
      dist[b][e] = w;
      en[b][e] = i;
      con[b][e] = 1;
    }
  }
  for (k=1; k<=n; k++){
    for (i=1; i<=n; i++){
      for (j=1; j<=n; j++){
        if (con[i][k] && con[k][j]){
          con[i][j] = 1;
          int nd = dist[i][k] + dist[k][j];
          if (nd < -INF) nd = -INF;
          if (nd > INF) nd = INF;
          if (nd > dist[i][j]){
            dist[i][j] = nd;
            if (i == k) en[i][j] = en[k][j];
            else en[i][j] = en[i][k];
          }
        }
      }
    }
  }
  for (i=1; i<=p; i++){
    scanf("%d", &route[i]);
  }
  for (i=2; i<=p; i++){
    int b, e;
    b = route[i-1];
    e = route[i];
    for (j=1; j<=n; j++){
      if (con[b][j] && con[j][e] && dist[j][j]>0){
        printf("infinitely kind\n");
        return 0;
      }
    }
    while (b != e){
      path[plen++] = en[b][e];
      b = edges[en[b][e]][1];
    }
  }
  printf("%d\n", plen);
  for (i=0; i<plen; i++) printf("%d ", path[i]);
  return 0;
}