#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}

bool sh = 0;
vector <ll> a, dp;
int L, R;
ll n, k, p;
int inf = 2e9;
ll N;
struct tree {
    vector <ll> mx;
    ll bld() {
        cin >> n >> k >> p;
        N = log2(n + 2);
        if (pow(2, N) < n + 2) N++;
        N = pow(2, N);
        a.resize(n + 2);
        dp.assign(n + 2, -inf);
        a[0] = 0;
        a[n + 1] = 0;
        dp[0] = p;
        for (int i = 1; i <= n; ++i) {
            cin >> a[i];
        }
        if (sh) {
            cout << "n k p = " << n << ' ' << k << ' ' << p << "\n";
            cout << "a\n"; cvl(a);
        }
        mx.assign(2 * N - 1, -inf);
        mx[N - 1] = dp[0];
        for (int i = N - 2; i >= 0; --i) {
            mx[i] = max(mx[i * 2 + 1], mx[2 * i + 2]);
        }
    }
    ll get(int id, int l, int r) {
        if (l >= L && r <= R) {
            return mx[id];
        }
        if (max(l, L) <= min(r, R)) {
            int m = (l + r) / 2;
            ll a = get(2 * id + 1, l, m);
            ll b = get(2 * id + 2, m + 1, r);
            return max(a, b);
        }
        return -inf;
    }

    void upd(int id, ll x) {
        id += N - 1;
        mx[id] = x;
        while ( (id - 1) / 2 >= 0) {
            id--; id /= 2;
            mx[id] = max(mx[2 * id + 1], mx[2 * id + 2]);
            if (id == 0) break;
        }
    }

    void see() {
        int id = -1;
        for (int i = 0; i <= log2(N); ++i) {
            for (int j = 0; j < pow(2, i); ++j) {
                id++;
                cout << mx[id] << ' ';
            } cout << "\n";
        } cout << "\n";
    }
};
/*
3 1 2
-2 10 100
*/
int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    tree T;
    T.bld();

    for (ll i = 1; i <= n + 1; ++i) {
        if (sh) {
            cout << "i = " << i << "\n";
            cout << "dp\n"; cvl(dp);
            cout << "i - k  = " << i - k << "\n";
        }
        /*for (ll j = max(0LL, i - k); j <= i - 1; ++j) {
            if (sh) {
                cout << "j =  " << j << "\n";
            }
            if (dp[j] < 0) {
                continue;
            }
            dp[i] = max(dp[i], dp[j] + a[i]);
        }*/
        L = max(0LL, i - k);
        R = i - 1;
        ll gt = T.get(0, 0, N - 1);
        if (sh) {
            cout << "L R = " << L << ' ' << R << "\n";
            cout << "gt = " << gt << "\n";
        }
        if (gt < 0) {
            continue;
        }
        dp[i] = a[i] + gt;
        T.upd(i, dp[i]);
        if (sh) {
            T.see(); cout << "\n";
        }
    }
    if (sh) {
        cout << "a\n"; cvl(a);
        cout << "dp\n"; cvl(dp);
    }
    if (dp[n + 1] < 0 ) {
        cout << -1;
        exit(0);
    }
    cout << dp[n + 1];
}
