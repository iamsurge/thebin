/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {
        int firstListSize = 1, secondListSize = 1;
        ListNode currentFirstListNode = list1;
        ListNode currentSecondListNode = list2;

        if (currentFirstListNode != null) {
            while (currentFirstListNode.next != null) {
                currentFirstListNode = currentFirstListNode.next;
                firstListSize++;
            }
        } else {
            firstListSize = 0;
        }

        if (currentSecondListNode != null) {
            while (currentSecondListNode.next != null) {
                currentSecondListNode = currentSecondListNode.next;
                secondListSize++;
            }
        } else {
            secondListSize = 0;
        }

        int maxSize = Math.max(firstListSize, secondListSize);
        boolean maxIsFirst = maxSize == firstListSize;

        ListNode currentFirstListNodeFor = list1;
        ListNode currentSecondListNodeFor = list2;

        int currentIndex = -1;
        int[] resultArray = new int[firstListSize + secondListSize];

        System.out.println(maxSize);
        System.out.println(maxIsFirst);
        for (int i = 0; i < firstListSize + secondListSize; i++) {
            System.out.println("iteration");
            if (maxIsFirst) {
                if (currentSecondListNodeFor != null) {
                    if (currentFirstListNodeFor != null) {
                        if (currentFirstListNodeFor.val > currentSecondListNodeFor.val) {
                            resultArray[++currentIndex] = currentSecondListNodeFor.val;
//                            resultString += currentSecondListNodeFor.val;
                            currentSecondListNodeFor = currentSecondListNodeFor.next;
                        } else if (currentFirstListNodeFor.val < currentSecondListNodeFor.val) {
//                            resultString += currentFirstListNodeFor.val;
                            resultArray[++currentIndex] = currentFirstListNodeFor.val;
                            currentFirstListNodeFor = currentFirstListNodeFor.next;
                        } else {
//                            resultString += currentFirstListNodeFor.val;
//                            resultString += currentSecondListNodeFor.val;
                            resultArray[++currentIndex] = currentSecondListNodeFor.val;
                            resultArray[++currentIndex] = currentFirstListNodeFor.val;
                            currentSecondListNodeFor = currentSecondListNodeFor.next;
                            currentFirstListNodeFor = currentFirstListNodeFor.next;
                        }
                    } else {
//                        resultString += currentSecondListNodeFor.val;
                        resultArray[++currentIndex] = currentSecondListNodeFor.val;
                        currentSecondListNodeFor = currentSecondListNodeFor.next;
                    }

                } else {
                    if (currentFirstListNodeFor == null) break;
                    resultArray[++currentIndex] = currentFirstListNodeFor.val;

//                    resultString += currentFirstListNodeFor.val;
                    currentFirstListNodeFor = currentFirstListNodeFor.next;
                    System.out.println("Both");
                }
            } else {
                if (currentFirstListNodeFor != null) {
                    if(currentSecondListNodeFor != null) {
                        if (currentFirstListNodeFor.val > currentSecondListNodeFor.val) {
                            System.out.println("currentSecondListNodeFor < first push " + currentSecondListNodeFor.val);
                            resultArray[++currentIndex] = currentSecondListNodeFor.val;
//                            resultString += currentSecondListNodeFor.val;
                            currentSecondListNodeFor = currentSecondListNodeFor.next;
                        } else if (currentFirstListNodeFor.val < currentSecondListNodeFor.val) {
                            resultArray[++currentIndex] = currentFirstListNodeFor.val;
//                            resultString += currentFirstListNodeFor.val;
                            System.out.println("currentSecondListNodeFor > first push " + currentFirstListNodeFor.val);
                            currentFirstListNodeFor = currentFirstListNodeFor.next;
                        } else {
                            System.out.println("push both " + currentFirstListNodeFor.val + " and " + currentSecondListNodeFor.val);
                            resultArray[++currentIndex] = currentFirstListNodeFor.val;
                            resultArray[++currentIndex] = currentSecondListNodeFor.val;
//                            resultString += currentFirstListNodeFor.val;
//                            resultString += currentSecondListNodeFor.val;
                            currentSecondListNodeFor = currentSecondListNodeFor.next;
                            currentFirstListNodeFor = currentFirstListNodeFor.next;
                        }
                    } else {
                        resultArray[++currentIndex] = currentFirstListNodeFor.val;
//                        resultString += currentFirstListNodeFor.val;
                        currentFirstListNodeFor = currentFirstListNodeFor.next;
                    }
                } else {
                    // push only second
                    if (currentSecondListNodeFor == null) break;
                    System.out.println("second null, push first - " + currentSecondListNodeFor.val);
                    resultArray[++currentIndex] = currentSecondListNodeFor.val;

//                    resultString += currentSecondListNodeFor.val;
                    currentSecondListNodeFor = currentSecondListNodeFor.next;
                }
            }
        }



        ListNode first = null;

        if (resultArray.length > 0) {
            first = new ListNode();
            first.val = resultArray[0];
        }

        ListNode result = first;

        for(int i = 1; i < resultArray.length; i++) {
            result.next = new ListNode(resultArray[i]);
            result = result.next;
        }

        return first;
    }
}