#include <iostream>
#include <vector>
#include <string>
using namespace std;

void sieve_down(vector<pair<int, int>>& vec, int i, int heap_size) {
    int l = i * 2 + 1, r = i * 2 + 2, k = i;
    if (l <= heap_size && vec[l].second < vec[k].second) {
        k = l;
        swap(vec[i], vec[k]);
    }
    if (r <= heap_size && vec[r].second < vec[k].second)
        k = r;
    if (k != i) {
        swap(vec[i], vec[k]);
        sieve_down(vec, k, heap_size - 1);
    }
}

void extract(vector <pair<int, int>>& vec, int& heap_size) {
    if (heap_size == 0) {
        cout << "*";
        return;
    }
    cout << vec[0].second;
    swap(vec[0], vec[heap_size - 1]);
    //vec[0] = vec[heap_size - 1];
    vec.pop_back();
    heap_size--;
    sieve_down(vec, 0, heap_size - 1);
}

void sieve_up(vector <pair<int, int>>& vec, int i) {
    while (i > 0 && vec[(i - 1) / 2].second > vec[i].second) {
        swap(vec[(i - 1) / 2], vec[i]);
        i = (i - 1) / 2;
    }
}

void decrease(vector <pair<int, int>>& vec, string& s, int& heap_size) {
    string temp = "";
    int i;
    for (i = 13; s[i] != ' '; ++i) {
        temp += s[i];
    }
    int x = stoi(temp);
    temp = "";
    for (i = i + 1; i < s.length(); ++i)
        temp += s[i];
    int y = stoi(temp);

    for (int i = 0; i < vec.size(); ++i) {
        if (vec[i].first == x) {
            vec[i].second = y;
            sieve_up(vec, i);
        }
    }
}


void push(vector <pair<int, int>>& vec, string& s, int count, int& heap_size) {
    string temp = "";
    for (int i = 5; i < s.length(); ++i)
        temp += s[i];

    vec.push_back(pair<int, int>(count, stoi(temp)));
    heap_size++;
    sieve_up(vec, heap_size - 1);
}



int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    vector <pair<int, int>> vec;
    string s;
    int heap_size = 0, count = 1;
    while (getline(cin, s)) {
        if (s.empty())
            break;
        if (s[0] == 'e') {
            extract(vec, heap_size);
        }
        if (s[0] == 'p') {
            push(vec, s, count, heap_size);
        }
        if (s[0] == 'd') {
            decrease(vec, s, heap_size);
        }
        count++;
    }

    return 0;
}