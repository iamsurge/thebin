class LRUCache {
  constructor(capacity, ttl) {
    this.capacity = capacity;
    this.ttl = ttl;
    this.cache = new Map();
    this.timestamps = new Map();
  }

  get(key) {
    if (!this.cache.has(key)) {
      return null;
    }

    this.updateTimestamp(key);
    return this.cache.get(key);
  }

  set(key, value) {
    if (this.cache.has(key)) {
      this.updateTimestamp(key);
      this.cache.set(key, value);
      return;
    }

    if (this.cache.size === this.capacity) {
      this.evict();
    }

    this.cache.set(key, value);
    this.timestamps.set(key, Date.now());
  }

  updateTimestamp(key) {
    this.timestamps.set(key, Date.now());
  }

  evict() {
    let oldestKey = null;
    let oldestTimestamp = Infinity;

    for (const [key, timestamp] of this.timestamps) {
      if (timestamp < oldestTimestamp) {
        oldestKey = key;
        oldestTimestamp = timestamp;
      }
    }

    if (oldestKey !== null) {
      this.cache.delete(oldestKey);
      this.timestamps.delete(oldestKey);
    }
  }

  checkTTL() {
    for (const [key, timestamp] of this.timestamps) {
      if (Date.now() - timestamp > this.ttl) {
        this.cache.delete(key);
        this.timestamps.delete(key);
      }
    }
  }
}
