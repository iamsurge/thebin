// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e9 + 7;
const ll ONE = 1;
const ll MOD = 1e9 + 7;
ld EPS = 1e-12;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

vector <vector <int> > g, g2;
bitset <3000> used;
vector <int> path;
vector <int> colors;

void TopSort(int v) {
    used[v] = true;
    for (auto u : g[v]) {
        if (!used[u]) {
            TopSort(u);
        }
    }
    path.push_back(v);
}

void dfs(int v, int color) {
    used[v] = true;
    colors[v] = color;
    for (auto u : g2[v]) {
        if (!used[u]) {
            dfs(u, color);
        }
    }
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    freopen("firesafe.in", "r", stdin);
    freopen("firesafe.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, m, i, j, x, y, cnt = 0;
        cin >> n >> m;
        g.resize(n);
        g2.resize(n);
        colors.resize(n);
        vector <pair <int, int> > edge(m);
        for (i = 0; i < m; i++) {
            cin >> x >> y;
            x--;
            y--;
            edge[i] = { x, y };
            g[x].push_back(y);
            g2[y].push_back(x);
        }
        for (i = 0; i < n; i++) {
            if (!used[i]) {
                TopSort(i);
            }
        }
        reverse(all(path));
        used.reset();
        for (i = 0; i < n; i++) {
            if (!used[path[i]]) {
                dfs(path[i], cnt);
                cnt++;
                //cout << path[i] + 1 << endl;
            }
        }
        vector <int> cnt2(cnt);
        for (i = 0; i < m; i++) {
            if (colors[edge[i].first] != colors[edge[i].second]) {
                cnt2[colors[edge[i].first]]++;
            }
        }
        set <int> need;
        for (i = 0; i < cnt; i++) {
            if (cnt2[i] == 0) {
                need.insert(i);
            }
        }
        vector <int> ans;
        for (i = 0; i < n; i++) {
            if (need.contains(colors[i])) {
                ans.push_back(i + 1);
                need.erase(colors[i]);
            }
        }
        cout << ans.size() << endl;
        for (auto it : ans) {
            cout << it << endl;
        }
    }
}
//Deisgned by skimono