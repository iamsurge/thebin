import androidx.compose.material3.*
import com.guidofe.pocketlibrary.viewmodels.EditBookVM
import com.guidofe.pocketlibrary.viewmodels.interfaces.IEditBookVM
...

val verticalSpace = 8.dp
val horizontalSpace = 8.dp

@OptIn(
    ExperimentalMaterial3Api::class, ExperimentalPermissionsApi::class
)
@Destination
@Composable
fun EditBookPage(
    bookId: Long? = null,
    isbn: String? = null,
    newBookDestination: BookDestination? = null,
    navigator: DestinationsNavigator,
    vm: IEditBookVM = hiltViewModel<EditBookVM>(),
    coverPhotoRecipient: ResultRecipient<TakeCoverPhotoPageDestination, Uri>
) {
    coverPhotoRecipient.onNavResult { result ->
        Log.d("debug", "EditPage received result")
        if (result is NavResult.Value) {
            Log.d("debug", "EditPage result is valid, == ${result.value}")
            vm.state.coverUri = result.value
        } else {
            Log.e("debug", "EditPage result is not valid")
        }
    }
    val scrollState = rememberScrollState()
    val focusManager = LocalFocusManager.current
    ...
    
    Column(
        horizontalAlignment = Alignment.CenterHorizontally,
        verticalArrangement = Arrangement.spacedBy(verticalSpace),
        modifier = Modifier
            .verticalScroll(scrollState)
            .fillMaxWidth()
            .nestedScroll(vm.scaffoldState.scrollBehavior!!.nestedScrollConnection)
            .padding(8.dp)
    ) {

        ...
        
        OutlinedTextField(
            value = vm.state.title,
            label = { Text(stringResource(id = R.string.title) + "*") },
            onValueChange = { vm.state.title = it },
            singleLine = true,
            modifier = Modifier.fillMaxWidth()
        )
       ...
    }
}