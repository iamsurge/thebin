class Solution {
public:
    vector<vector<int> > ans;
    vector<int> tmp;
    
    void dfs(vector<int>& candidates, int target, int depth) {
        if (depth == candidates.size()) {
            if (target == 0) {
                ans.push_back(tmp);
            }
            return ;
        }
        
        dfs(candidates, target, depth + 1);
        int cnt;
        for (cnt = 0; cnt < 1000; ++cnt) {
            if (target >= candidates[depth]) {
                target -= candidates[depth];
                tmp.push_back(candidates[depth]);
                dfs(candidates, target, depth + 1);
            } else {
                break;
            }
        }
        for (int i = 0; i < cnt; ++i) {
            tmp.pop_back();
        }
    }
    
    vector<vector<int>> combinationSum(vector<int>& candidates, int target) {
        ans.clear();
        dfs(candidates, target, 0);
        return ans;
    }
};