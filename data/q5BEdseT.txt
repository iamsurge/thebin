program Lab11v1;

{$APPTYPE CONSOLE}

{$R *.res}

uses
  System.SysUtils;


type two_d_array = Array[1..20, 1..20] of integer;
type one_d_array = Array[1..3] of integer;


procedure read_mtrx(var in_file: TextFile; var n: integer; var mtrx: two_d_array);
var i, j: integer;
begin
  readln(in_file, n);
  for i := 1 to n do
    begin
      for j := 1 to n - 1 do
        read(in_file, mtrx[i][j]);
      readln(in_file, mtrx[i][n]);
    end;
end;


procedure write_mtrx(var out_file: TextFile; m_num: integer; n: integer; var mtrx: two_d_array);
var i, j: integer;
begin
  writeln(out_file, 'Матрица ', m_num:1, ' размером ', n:2, 'x', n:2, ':');

  for i := 1 to n do
  begin
    for j := 1 to n - 1 do
      write(out_file, mtrx[i][j]:4, ' ');
    writeln(out_file, mtrx[i][n]:4);
  end;
end;


procedure mtrx_sum(n: integer; mtrx: two_d_array; var res: integer);
var i, j: integer;
begin
  res := 0;
  for i := 1 to n do
  begin
    for j := 1 to n do
      res := res + mtrx[i][j];
  end;
end;


procedure num_sorted_rows(n: integer; mtrx: two_d_array; var res: integer);
var i, j: integer;
    is_sorted: boolean;
begin
  res := 0;
  for i := 1 to n do
  begin
    is_sorted := true;
    for j := 1 to n - 1 do
    begin
      if mtrx[i][j] >= mtrx[i][j + 1] then
        is_sorted := false;
    end;
    if is_sorted then
      res := res + 1;
  end;
end;


procedure max_el_index(n: integer; arr: one_d_array; var res: Integer);
var i: integer;
begin
  res := 1;
  for i := 1 to n do
  begin
    if arr[i] > arr[res] then
      res := i;
  end;
end;


function SetConsoleOutputCP(wCodePageID: cardinal): cardinal;
  stdcall; external 'Kernel32.dll';
function SetConsoleCP(wCodePageID: cardinal): cardinal;
  stdcall; external 'Kernel32.dll';



var in_file, out_file: TextFile;
    n: Integer;
    matrix: two_d_array;
    sums, num_sorted: one_d_array;
    i, result: Integer;


begin
  SetConsoleOutputCP(1251);
  SetConsoleCP(1251);

  AssignFile(in_file, paramstr(1));
  AssignFile(out_file, paramstr(2));

  Reset(in_file);
  Rewrite(out_file);

  for i := 1 to 3 do
  begin
    read_mtrx(in_file, n, matrix);
    write_mtrx(out_file, i, n, matrix);

    mtrx_sum(n, matrix, sums[i]);
    num_sorted_rows(n, matrix, num_sorted[i]);

    writeln(out_file, 'Сумма элементов матрицы: ', sums[i]:5);
    writeln(out_file, 'Количество упорядоченных по возрастанию строк: ', num_sorted[i]:5);
    writeln(out_file, '============');
  end;

  max_el_index(3, num_sorted, result);
  if num_sorted[result] = 0 then
    writeln(out_file, 'Ни в одном из массивов нет упорядоченных строк!')
  else
    writeln(out_file, 'Наибольшее количество упорядоченных по возрастанию строк ',
            'в матрице номер ', result:2);

  CloseFile(in_file);
  CloseFile(out_file);
end.