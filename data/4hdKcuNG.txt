const fs = require('fs')

// const input = fs.readFileSync('test.txt').toString().trim()
const input = fs.readFileSync('input.txt').toString().trim()

const transpose = (arr) => arr[0].map((col, c) => arr.map((row, r) => arr[r][c]))

const forest = input.split('\n').map((line) => line.split('').map(Number))
const transposed = transpose(forest)
const isGraterOrEqual = tree => (height) => height >= tree

const visible = forest
  .reduce((acc, line, x, plan) => {
    const ok = line.filter((tree, y, line) => {
      if (!x || !y || x === plan.length - 1 || y === line.length - 1) {
        return true
      }

      const column = transposed[y]

      const t = column.slice(0, x).filter(isGraterOrEqual(tree)).length
      const b = column.slice(x + 1, column.length).filter(isGraterOrEqual(tree)).length
      const l = line.slice(0, y).filter(isGraterOrEqual(tree)).length
      const r = line.slice(y + 1, line.length).filter(isGraterOrEqual(tree)).length

      return !(t && b && l && r)
    })
    return acc.concat(ok)
  }, []).length

const getTopCount = (x, y) => {
  const tree = forest[x][y]
  const col = transposed[y].slice(0, x).reverse()
  return col.findIndex((height) => height >= tree) + 1 || col.length
}
const getLeftCount = (x, y) => {
  const tree = forest[x][y]
  const col = forest[x].slice(0, y).reverse()
  return col.findIndex((height) => height >= tree) + 1 || col.length
}
const getRightCount = (x, y) => {
  const tree = forest[x][y]
  const col = forest[x].slice(y + 1, forest[x].length)
  return col.findIndex((height) => height >= tree) + 1 || col.length
}
const getBottomCount = (x, y) => {
  const tree = forest[x][y]
  const column = transposed[y]
  const bottom = column.slice(x + 1, column.length)
  return bottom.findIndex((height) => height >= tree) + 1 || bottom.length
}

const topScore = forest.map((line, x) => {
  return line.map((tree, y) => {
    if (x === 0 || y === 0 || x === forest.length - 1 || y === line.length - 1) {
      return 0
    }
    return getTopCount(x, y) * getBottomCount(x, y) * getLeftCount(x, y) * getRightCount(x, y)
  })
}).flat().reduce((acc, height) => acc > height ? acc : height, 0)

console.log(topScore)
console.log(visible)
