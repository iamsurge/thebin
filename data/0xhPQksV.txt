"#include <stdio.h>\r\n#include <stdlib.h>\r\n#include <stddef.h>\r\n\r\nextern void * __libc_malloc(size_t);\r\nextern void * __libc_memalign(size_t, size_t);\r\nextern void * __libc_realloc(void *, size_t);\r\nextern void * __libc_calloc(size_t, size_t);\r\nextern void __libc_free(void *);\r\n\r\nstatic void memlog (const char * keyword, size_t size, size_t reference, void * result) {\r\n  fprintf(stderr, \"%7s %#18zx %#18zx %18p\\n\", keyword, reference, size, result);\r\n}\r\n\r\nextern void * malloc (size_t size) {\r\n  void * result = __libc_malloc(size);\r\n  memlog(\"malloc\", size, 0, result);\r\n  return result;\r\n}\r\n\r\nextern void * aligned_alloc (size_t alignment, size_t size) {\r\n  void * result = __libc_memalign(alignment, size);\r\n  memlog(\"malloc\", size, alignment, result);\r\n  return result;\r\n}\r\n\r\nextern void * calloc (size_t members, size_t size) {\r\n  void * result = __libc_calloc(members, size);\r\n  memlog(\"calloc\", size, members, result);\r\n  return result;\r\n}\r\n\r\nextern void * realloc (void * buffer, size_t size) {\r\n  void * result = __libc_realloc(buffer, size);\r\n  memlog(\"realloc\", size, (size_t) buffer, result);\r\n  return result;\r\n}\r\n\r\nextern void free (void * buffer) {\r\n  memlog(\"free\", 0, (size_t) buffer, NULL);\r\n  __libc_free(buffer);\r\n}"