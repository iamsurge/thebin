#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <conio.h>

#define STACK_SIZE 3
#define QUEUE_SIZE 3

// Define a struct to represent an item in the warehouse
struct Item {
  char name[50];
  int quantity;
};

// Define a queue structure to store items
struct Queue {
  struct Item items[QUEUE_SIZE];
  int front;
  int rear;
};

// Initialize the queue
void init_queue(struct Queue* queue) {
  queue->front = 0;
  queue->rear = -1;
}

// Add an item to the queue
void enqueue(struct Queue* queue, struct Item item) {
  if (queue->rear == QUEUE_SIZE - 1) {
  } else {
    queue->items[++queue->rear] = item;
  }
}

// Remove an item from the queue
struct Item dequeue(struct Queue* queue) {
  if (queue->front > queue->rear) {
    printf("Error: Queue delivery is empty\n");
    struct Item empty = {"", 0};
    return empty;
  } else {
    return queue->items[queue->front++];
  }
}

// Define a stack structure to store items
struct Stack {
  struct Item items[STACK_SIZE];
  int top;
};

// Initialize the stack
void init_stack(struct Stack* stack) {
  stack->top = -1;
}

// Push an item onto the stack
void push(struct Stack* stack, struct Item item) {
  if (stack->top == STACK_SIZE - 1) {
    printf("Error: FULL Space warehouse\n");
  } else {
    stack->items[++stack->top] = item;
  }
}

// Pop an item off the stack
struct Item pop(struct Stack* stack) {
  if (stack->top == -1) {
    struct Item empty = {"", 0};
    return empty;
  } else {
    return stack->items[stack->top--];
  }
}

int main() {
  struct Stack stack;
  init_stack(&stack);
  struct Queue queue;
  init_queue(&queue);

  int choice;
  do {
    system("cls");
    printf("Warehouse Management System\n");
    printf("1. Enter item\n");
    printf("2. Delivery item\n");
    printf("3. Check warehouse space \n");
    printf("4. Check queue item delivery\n");
    printf("5. Quit\n");
    printf("Enter your choice: ");
    scanf("%d", &choice);

    if (choice == 1) {
      // Enter a new item
      system("cls");
      struct Item item;
      printf("Enter item name: ");
      scanf("%s", item.name);
      printf("Enter item quantity: ");
      scanf("%d", &item.quantity);
      enqueue(&queue, item);
	  push(&stack, item);
      
    } 
    else if (choice == 2) {
            // Remove an item
            system("cls");
      {
        struct Item item = pop(&stack);
        
      }
      {
        struct Item item = dequeue(&queue);
        printf("Removed item: %s (quantity: %d)\n", item.name, item.quantity);
        getch();
      }
      getch();
    } 
    else if (choice == 3) {
      // Check stack all items
      system("cls");
      if (stack.top == STACK_SIZE - 1) {
      	printf("Error: FULL Space warehouse\n");
      	getch();
      	} 
      else {
      	printf("There is still space in the warehouse\n");
      	getch();
      	}
      	getch();
      } 
    else if (choice == 4) {
      // Check all items in the queue
      system("cls");
      if (queue.front > queue.rear) {
      	printf("Error: Queue delivery is empty\n");
      	getch();
      	} 
      else {
      	printf("All items in delivery queue:\n");
      	for (int i = queue.front; i <= queue.rear; i++){
      	 printf("%s (quantity: %d)\n", queue.items[i].name, queue.items[i].quantity);
      	 }
      	getch();
      	}
      	getch();
      }
  } 
  while (choice != 5);

  return 0;
}