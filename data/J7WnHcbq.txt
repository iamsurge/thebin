// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = 1e9 + 7;
const ll max_sz = 6250001;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(rand() % 100);

struct Node {
    int type, dp = inf;
    int flag;
};
vector <vector <int> > g;
vector <Node> dp;
void dfs(int v) {
    if (dp[v].flag != -1) {
        int l = g[v].front(), r = g[v].back();
        dfs(l);
        dfs(r);
        if (dp[v].type == 0) {
            dp[v].dp = min(dp[l].dp, dp[r].dp);
        }
        else {
            if (dp[v].flag == 1) {
                dp[v].dp = min(inf, min(dp[l].dp + dp[r].dp, min(dp[l].dp, dp[r].dp) + 1));
            }
            else {
                dp[v].dp = min(inf, dp[l].dp + dp[r].dp);
            }
        }
    }
    else {
        if (dp[v].type == 1) {
            dp[v].dp = 0;
        }
        else {
            dp[v].dp = inf;
        }
    }
}
void dfs2(int v) {
    if (dp[v].flag != -1) {
        int l = g[v].front(), r = g[v].back();
        dfs2(l);
        dfs2(r);
        if (dp[v].type == 1) {
            dp[v].dp = min(dp[l].dp, dp[r].dp);
        }
        else {
            if (dp[v].flag == 1) {
                dp[v].dp = min(inf, min(dp[l].dp + dp[r].dp, min(dp[l].dp, dp[r].dp) + 1));
            }
            else {
                dp[v].dp = min(inf, dp[l].dp + dp[r].dp);
            }
        }
    }
    else {
        if (dp[v].type == 1) {
            dp[v].dp = inf;
        }
        else {
            dp[v].dp = 0;
        }
    }
}
signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL); 
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, i, j, x, y, res;
        cin >> n >> res;
        g.resize(n);
        dp.resize(n);
        vector <int> pshltinahuy;
        for (i = 0; i < n / 2; i++) {
            cin >> dp[i].type >> dp[i].flag;
            g[i].push_back(2 * i + 1);
            g[i].push_back(2 * i + 2);
            if (2 * i + 1 >= n / 2) {
                pshltinahuy.push_back(2 * i + 1);
            }
            if (2 * i + 2 >= n / 2) {
                pshltinahuy.push_back(2 * i + 2);
            }
        }
        j = 0;
        if (pshltinahuy.size() == 0) {
            pshltinahuy.push_back(0);
        }
        for (i = n / 2; i < n; i++) {
            cin >> dp[pshltinahuy[j]].type;
            dp[pshltinahuy[j]].flag = -1;
            j++;
        }
        if (res == 1) {
            dfs(0);
        }
        else {
            dfs2(0);
        }
        if (dp[0].dp == inf) {
            cout << "IMPOSSIBLE" << endl;
        }
        else {
            cout << dp[0].dp << endl;
        }
    }
}
//Deisgned by skimono