    public sealed class ApplicationVersionDetails : IEquatable<ApplicationVersionDetails>
    {
        public string Name { get; set; }

        public int Major { get; set; }

        public int Minor { get; set; }

        public int Patch { get; set; }

        public int Revision { get; set; }

        public string Version { get; set; }

        public string Url { get; set; }

        public bool Equals(ApplicationVersionDetails d)
        {
            if (d == null)
            {
                return false;
            }

            return Major == d.Major
                   && Minor == d.Minor
                   && Patch == d.Patch
                   && Revision == d.Revision;
        }

        public override bool Equals(object obj)
        {
            return obj is ApplicationVersionDetails d && Equals(d);
        }

        public override int GetHashCode()
        {
            unchecked
            {
                var hash = new HashCode();
                hash.Add(Major.GetHashCode());
                hash.Add(Minor.GetHashCode());
                hash.Add(Patch.GetHashCode());
                hash.Add(Revision.GetHashCode());

                return hash.ToHashCode();
            }
        }

        public static implicit operator ApplicationVersionDetails(Version version)
        {
            if (version is null)
            {
                return null;
            }

            return new ApplicationVersionDetails
            {
                Major = version.Major,
                Minor = version.Minor,
                Patch = version.Build,
                Revision = version.Revision
            };
        }

        public static explicit operator Version(ApplicationVersionDetails appDetails)
        {
            return new Version(appDetails.Major, appDetails.Minor, appDetails.Patch, appDetails.Revision);
        }

        public static bool operator ==(ApplicationVersionDetails appDetails, Version version)
        {
            return EqualityComparer<ApplicationVersionDetails>.Default.Equals(appDetails, version);
        }

        public static bool operator !=(ApplicationVersionDetails appDetails, Version version)
        {
            return !(appDetails == version);
        }

        public static bool operator ==(Version version, ApplicationVersionDetails appDetails)
        {
            return EqualityComparer<ApplicationVersionDetails>.Default.Equals(version, appDetails);
        }

        public static bool operator !=(Version version, ApplicationVersionDetails appDetails)
        {
            return !(version == appDetails);
        }

        public static bool operator >(ApplicationVersionDetails appDetails, Version version)
        {
            if (appDetails is null | version is null)
            {
                return false;
            }

            return appDetails.Major > version.Major
                   || appDetails.Minor > version.Minor
                   || appDetails.Patch > version.Build
                   || appDetails.Revision > version.Revision;
        }

        public static bool operator <(ApplicationVersionDetails appDetails, Version version)
        {
            if (appDetails is null | version is null)
            {
                return false;
            }

            return appDetails.Major < version.Major
                   || appDetails.Minor < version.Minor
                   || appDetails.Patch < version.Build
                   || appDetails.Revision < version.Revision;
        }

        public static bool operator >(Version version, ApplicationVersionDetails appDetails)
        {
            if (appDetails is null | version is null)
            {
                return false;
            }

            return appDetails.Major < version.Major
                   || appDetails.Minor < version.Minor
                   || appDetails.Patch < version.Build
                   || appDetails.Revision < version.Revision;
        }

        public static bool operator <(Version version, ApplicationVersionDetails appDetails)
        {
            if (appDetails is null | version is null)
            {
                return false;
            }

            return appDetails.Major > version.Major
                   || appDetails.Minor > version.Minor
                   || appDetails.Patch > version.Build
                   || appDetails.Revision > version.Revision;
        }
    }