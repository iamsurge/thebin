海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥偷香高手.txt@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiNmLkZpbGXlt6XlhbdcIixcInBhdGhcIjpcIkZpbGUuanNcIixcInJ1bGVcIjpcImNvbnN0IEZpbGUgPSBqYXZhLmlvLkZpbGU7XFxuY29uc3Qge1xcbiAgICBGaWxlcyxcXG4gICAgUGF0aHMsXFxuICAgIFN0YW5kYXJkQ29weU9wdGlvbixcXG4gICAgU3RhbmRhcmRPcGVuT3B0aW9uXFxufSA9IGphdmEubmlvLmZpbGU7XFxuY29uc3QgamF2YVN0cmluZyA9IGphdmEubGFuZy5TdHJpbmc7XFxubGV0IGphdmFTY29wZSA9IG5ldyBKYXZhSW1wb3J0ZXIoamF2YS5pbywgamF2YS5sYW5nLCBqYXZhLmxhbmcucmVmbGVjdCwgamF2YS51dGlsLlZlY3Rvcik7XFxuXFxuZnVuY3Rpb24gZGVsZXRlRmlsZXMoZmlsZU5hbWUpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShmaWxlTmFtZSk7XFxuICAgIGlmICghZmlsZS5leGlzdHMoKSkge1xcbiAgICAgICAgLy9sb2coXFxcIuWIoOmZpOaWh+S7tuWksei0pe+8mlxcXCIgKyBmaWxlTmFtZSArIFxcXCLmlofku7bkuI3lrZjlnKhcXFwiKTtcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGlmIChmaWxlLmlzRmlsZSgpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZUZpbGUoZmlsZU5hbWUpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gZGVsZXRlRGlyZWN0b3J5KGZpbGVOYW1lKTtcXG4gICAgICAgIH1cXG5cXG4gICAgfVxcblxcbn1cXG4vKipcXG4gKiDliKDpmaTljZXkuKrmlofku7ZcXG4gKiBcXG4gKiBAcGFyYW0gZmlsZU5hbWVcXG4gKiAgICAgICAgICAgIOiiq+WIoOmZpOaWh+S7tueahOaWh+S7tuWQjVxcbiAqIEByZXR1cm4g5Y2V5Liq5paH5Lu25Yig6Zmk5oiQ5Yqf6L+U5ZuedHJ1ZSzlkKbliJnov5Tlm55mYWxzZVxcbiAqL1xcbmZ1bmN0aW9uIGRlbGV0ZUZpbGUoZmlsZU5hbWUpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShmaWxlTmFtZSk7XFxuICAgIGlmIChmaWxlLmlzRmlsZSgpICYmIGZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgIGZpbGUuZGVsZXRlKCk7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk5Y2V5Liq5paH5Lu2XFxcIiArIGZpbGVOYW1lICsgXFxcIuaIkOWKn++8gVxcXCIpO1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk5Y2V5Liq5paH5Lu2XFxcIiArIGZpbGVOYW1lICsgXFxcIuWksei0pe+8gVxcXCIpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuXFxufVxcbi8qKlxcbiAqIOWIoOmZpOebruW9le+8iOaWh+S7tuWkue+8ieS7peWPiuebruW9leS4i+eahOaWh+S7tlxcbiAqIFxcbiAqIEBwYXJhbSBkaXJcXG4gKiAgICAgICAgICAgIOiiq+WIoOmZpOebruW9leeahOaWh+S7tui3r+W+hFxcbiAqIEByZXR1cm4g55uu5b2V5Yig6Zmk5oiQ5Yqf6L+U5ZuedHJ1ZSzlkKbliJnov5Tlm55mYWxzZVxcbiAqL1xcbmZ1bmN0aW9uIGRlbGV0ZURpcmVjdG9yeShkaXIpIHtcXG4gICAgLy8g5aaC5p6cZGly5LiN5Lul5paH5Lu25YiG6ZqU56ym57uT5bC+77yM6Ieq5Yqo5re75Yqg5paH5Lu25YiG6ZqU56ymXFxuICAgIGlmICghZGlyLmVuZHNXaXRoKEZpbGUuc2VwYXJhdG9yKSkge1xcbiAgICAgICAgZGlyID0gZGlyICsgRmlsZS5zZXBhcmF0b3I7XFxuICAgIH1cXG4gICAgbGV0IGRpckZpbGUgPSBuZXcgRmlsZShkaXIpO1xcbiAgICAvLyDlpoLmnpxkaXLlr7nlupTnmoTmlofku7bkuI3lrZjlnKjvvIzmiJbogIXkuI3mmK/kuIDkuKrnm67lvZXvvIzliJnpgIDlh7pcXG4gICAgaWYgKCFkaXJGaWxlLmV4aXN0cygpIHx8ICFkaXJGaWxlLmlzRGlyZWN0b3J5KCkpIHtcXG4gICAgICAgIC8vbG9nKFxcXCLliKDpmaTnm67lvZXlpLHotKVcXFwiICsgZGlyICsgXFxcIuebruW9leS4jeWtmOWcqO+8gVxcXCIpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuICAgIGxldCBmbGFnID0gdHJ1ZTtcXG4gICAgLy8g5Yig6Zmk5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2KOWMheaLrOWtkOebruW9lSlcXG4gICAgbGV0IGZpbGVzID0gZGlyRmlsZS5saXN0RmlsZXMoKTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgLy8g5Yig6Zmk5a2Q5paH5Lu2XFxuICAgICAgICBpZiAoZmlsZXNbaV0uaXNGaWxlKCkpIHtcXG4gICAgICAgICAgICBmbGFnID0gZGVsZXRlRmlsZShmaWxlc1tpXS5nZXRBYnNvbHV0ZVBhdGgoKSk7XFxuICAgICAgICAgICAgaWYgKCFmbGFnKSB7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSB7IC8vIOWIoOmZpOWtkOebruW9lVxcbiAgICAgICAgICAgIGZsYWcgPSBkZWxldGVEaXJlY3RvcnkoZmlsZXNbaV0uZ2V0QWJzb2x1dGVQYXRoKCkpO1xcbiAgICAgICAgICAgIGlmICghZmxhZykge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgaWYgKCFmbGFnKSB7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk55uu5b2V5aSx6LSlXFxcIik7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG4gICAgLy8g5Yig6Zmk5b2T5YmN55uu5b2VXFxuICAgIGlmIChkaXJGaWxlLmRlbGV0ZSgpKSB7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk55uu5b2VXFxcIiArIGRpciArIFxcXCLmiJDlip/vvIFcXFwiKTtcXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgLy9sb2coXFxcIuWIoOmZpOebruW9lVxcXCIgKyBkaXIgKyBcXFwi5aSx6LSl77yBXFxcIik7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG59XFxuXFxuLy9jb3B55Y2V5Liq5paH5Lu2XFxuZnVuY3Rpb24gY29weUZpbGUoc291cmNlLCB0YXJnZXQsIGlzQ292ZXIpIHtcXG4gICAgbGV0IHNvdXJjZVBhdGggPSBQYXRocy5nZXQoc291cmNlKTtcXG4gICAgbGV0IHRhcmdldFBhdGggPSBQYXRocy5nZXQodGFyZ2V0KTtcXG4gICAgbGV0IGlzRXhpc3QgPSBGaWxlcy5leGlzdHModGFyZ2V0UGF0aCk7XFxuICAgIGlmIChGaWxlcy5pc0RpcmVjdG9yeShzb3VyY2VQYXRoKSB8fCAoaXNFeGlzdCAmJiAhaXNDb3ZlcikgfHwgKGlzRXhpc3QgJiYgRmlsZXMuaXNEaXJlY3RvcnkodGFyZ2V0UGF0aCkpKSB7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG4gICAgdHJ5IHtcXG4gICAgICAgIGlmICghaXNFeGlzdCkge1xcbiAgICAgICAgICAgIEZpbGVzLmNyZWF0ZURpcmVjdG9yaWVzKHRhcmdldFBhdGguZ2V0UGFyZW50KCkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGlzQ292ZXIgPT09IHRydWUpIHtcXG4gICAgICAgICAgICBGaWxlcy5jb3B5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HLCBTdGFuZGFyZENvcHlPcHRpb24uQ09QWV9BVFRSSUJVVEVTKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgRmlsZXMuY29weShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBTdGFuZGFyZENvcHlPcHRpb24uQ09QWV9BVFRSSUJVVEVTKTtcXG4gICAgICAgIH1cXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxufVxcblxcbmZ1bmN0aW9uIGdldEZpbGVUaW1lKHBhdGgpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShwYXRoKTtcXG4gICAgbGV0IGxhc3RNb2RpZmllZCA9IGZpbGUubGFzdE1vZGlmaWVkKCk7XFxuICAgIGxldCBkYXRlID0gbmV3IERhdGUobGFzdE1vZGlmaWVkKTtcXG4gICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xcbn1cXG5cXG5mdW5jdGlvbiBnZXROYW1lKHBhdGgpIHtcXG4gICAgcmV0dXJuIG5ldyBGaWxlKHBhdGgpLmdldE5hbWUoKSArIFxcXCJcXFwiO1xcbn1cXG5cXG5mdW5jdGlvbiBnZXRGaWxlUGF0aChwYXRoLCB0eXBlLCBleHBhbmQpIHtcXG4gICAgdHlwZSA9IHR5cGUgfHwgXFxcImZpbGVcXFwiO1xcbiAgICBpZiAoIVtcXFwiZmlsZVxcXCIsIFxcXCJkaXJcXFwiXS5pbmNsdWRlcyh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFxcXCLnsbvlnovplJnor69cXFwiKTtcXG4gICAgbGV0IGZpbGVUeXBlID0gdHlwZSA9PT0gXFxcImZpbGVcXFwiID8gXFxcImlzRmlsZVxcXCIgOiBcXFwiaXNEaXJlY3RvcnlcXFwiO1xcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKHBhdGgpO1xcbiAgICBsZXQgYXJyYXkgPSBmaWxlLmxpc3RGaWxlcygpIHx8IFtdO1xcbiAgICBsZXQgcGF0aExpc3QgPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgaWYgKGFycmF5W2ldW2ZpbGVUeXBlXSgpKSB7XFxuICAgICAgICAgICAgcGF0aExpc3QucHVzaCh7XFxuICAgICAgICAgICAgICAgIG5hbWU6IGFycmF5W2ldLmdldE5hbWUoKSArIFxcXCJcXFwiLFxcbiAgICAgICAgICAgICAgICBwYXRoOiBhcnJheVtpXS5nZXRQYXRoKCkgKyBcXFwiXFxcIixcXG4gICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiBOdW1iZXIoYXJyYXlbaV0ubGFzdE1vZGlmaWVkKCkpLFxcblxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGlmIChleHBhbmQpIHtcXG4gICAgICAgIHBhdGhMaXN0ID0gcGF0aExpc3QuZmlsdGVyKGl0ID0+IGl0Lm5hbWUuZW5kc1dpdGgoZXhwYW5kKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHBhdGhMaXN0O1xcbn1cXG5cXG5mdW5jdGlvbiByZW5hbWVGaWxlKGZyb21QYXRoLCBuYW1lKSB7XFxuICAgIGxldCBmcm9tRmlsZSA9IG5ldyBGaWxlKGZyb21QYXRoKTtcXG4gICAgbGV0IHRvRmlsZSA9IG5ldyBGaWxlKGZyb21GaWxlLmdldFBhcmVudCgpICsgXFxcIi9cXFwiICsgbmFtZSk7XFxuICAgIHRyeSB7XFxuICAgICAgICBpZiAoIWZyb21GaWxlLmV4aXN0cygpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHRvRmlsZS5leGlzdHMoKSkge1xcbiAgICAgICAgICAgIGlmICghZGVsZXRlRmxpZXModG9QYXRoKSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgRmlsZXMubW92ZShmcm9tRmlsZS50b1BhdGgoKSwgdG9GaWxlLnRvUGF0aCgpLCBTdGFuZGFyZENvcHlPcHRpb24uUkVQTEFDRV9FWElTVElORyk7XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gbW92ZUZpbGVzKGZyb21QYXRoLCB0b1BhdGgpIHtcXG4gICAgbGV0IGZyb21GaWxlID0gbmV3IEZpbGUoZnJvbVBhdGgpO1xcbiAgICBsZXQgdG9GaWxlID0gbmV3IEZpbGUodG9QYXRoKTtcXG4gICAgdHJ5IHtcXG4gICAgICAgIGlmICghZnJvbUZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAodG9GaWxlLmV4aXN0cygpKSB7XFxuICAgICAgICAgICAgaWYgKCFkZWxldGVGbGllcyh0b1BhdGgpKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBGaWxlcy5tb3ZlKGZyb21GaWxlLnRvUGF0aCgpLCB0b0ZpbGUudG9QYXRoKCksIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HKTtcXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgfVxcbn1cXG5cXG5mdW5jdGlvbiBmaWxlV3JpdGUocGF0aCwgY29udGVudCkge1xcbiAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCwgY29udGVudClcXG59XFxuXFxuZnVuY3Rpb24gZmlsZVdyaXRlQXBwZW5kKHBhdGgsIGNvbnRlbnQpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShwYXRoKTtcXG4gICAgbGV0IHBhdGhzID0gZmlsZS50b1BhdGgoKTtcXG4gICAgaWYgKGZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgIEZpbGVzLndyaXRlKHBhdGhzLCBuZXcgamF2YVN0cmluZyhjb250ZW50KS5nZXRCeXRlcygpLCBTdGFuZGFyZE9wZW5PcHRpb24uQVBQRU5EKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHdyaXRlRmlsZShcXFwiZmlsZTovL1xcXCIgKyBwYXRoLCBjb250ZW50KTtcXG4gICAgfVxcbn1cXG5cXG5mdW5jdGlvbiBnZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIoZmlsZSkge1xcbiAgICBpZiAoZmlsZS5pc0ZpbGUoKSkge1xcbiAgICAgICAgcmV0dXJuIGZpbGUubGVuZ3RoKCk7XFxuICAgIH1cXG4gICAgbGV0IGNoaWxkcmVuID0gZmlsZS5saXN0RmlsZXMoKTtcXG4gICAgbGV0IHRvdGFsID0gMDtcXG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcXG4gICAgICAgIGZvciAobGV0IGNoaWxkIG9mIGNoaWxkcmVuKSB7XFxuICAgICAgICAgICAgdG90YWwgKz0gZ2V0VG90YWxTaXplT2ZGaWxlc0luRGlyKGNoaWxkKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gdG90YWw7XFxufVxcblxcbmZ1bmN0aW9uIGdldEZpbGVTaXplKGZpbGVQYXRoKSB7XFxuICAgIC8vQnl0ZVxcbiAgICBsZXQgc2l6ZSA9IGdldFRvdGFsU2l6ZU9mRmlsZXNJbkRpcihuZXcgRmlsZShmaWxlUGF0aCkpO1xcbiAgICBpZiAoc2l6ZSA8IDApIHtcXG4gICAgICAgIHJldHVybiBudWxsO1xcbiAgICB9XFxuICAgIGxldCB1bml0Rm9ybSA9IFtcXFwiQnl0ZVxcXCIsIFxcXCJLQlxcXCIsIFxcXCJNQlxcXCIsIFxcXCJHQlxcXCIsIFxcXCJUQlxcXCJdO1xcbiAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gdW5pdEZvcm0ubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcXG4gICAgICAgIGlmIChzaXplID4gMTAyNCkge1xcbiAgICAgICAgICAgIHNpemUgLz0gMTAyNDtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIHNpemUudG9GaXhlZCgyKS5yZXBsYWNlKC8oXFxcXC4wMCkkLywgXFxcIlxcXCIpICsgdW5pdEZvcm1baV07XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIFxcXCJFUlJPUjrmlbDlgLzov4flpKdcXFwiO1xcbn1cXG4vL+WujOaVtOWQiOW5tlxcbi8qXFxuZnVuY3Rpb24gZmlsZUNvbWJpbmUoZmlsZXNJbnB1dCwgZmlsZU91dCwgZXh0ZW5zaW9uLCBpbnRlcmNlcHQpIHtcXG4gICAgd2l0aChqYXZhU2NvcGUpIHtcXG4gICAgICAgIGNvbnN0IFRNUF9CVUZGRVJfU0laRSA9IDB4MzAwMDA7XFxuICAgICAgICBjb25zdCBCVUZGRVJfU0laRSA9IDB4MzAwMDAwO1xcbiAgICAgICAgLy/lkIjlubbkuLTml7bmlofku7ZcXG4gICAgICAgIGxldCBpbnB1dEZpbGUgPSBuZXcgRmlsZShmaWxlc0lucHV0KTtcXG4gICAgICAgIGxldCB0bXBGaWxlID0gbmV3IEZpbGUoZmlsZU91dCArIFxcXCIudG1wXFxcIik7XFxuICAgICAgICBsZXQgdG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKHRtcEZpbGUpKTtcXG4gICAgICAgIGxldCBpbnB1dEZpbGVzID0gaW5wdXRGaWxlLmxpc3RGaWxlcygpO1xcbiAgICAgICAgbGV0IHRieXMgPSBBcnJheS5uZXdJbnN0YW5jZShCeXRlLlRZUEUsIFRNUF9CVUZGRVJfU0laRSk7XFxuICAgICAgICBmb3IgKGxldCBmaWxlIG9mIGlucHV0RmlsZXMpIHtcXG4gICAgICAgICAgICBpZiAoZmlsZS5nZXROYW1lKCkuZW5kc1dpdGgoZXh0ZW5zaW9uKSkge1xcbiAgICAgICAgICAgICAgICBsZXQgaXMgPSBuZXcgRmlsZUlucHV0U3RyZWFtKGZpbGUpO1xcbiAgICAgICAgICAgICAgICBsZXQgbGVuID0gMDtcXG4gICAgICAgICAgICAgICAgd2hpbGUgKChsZW4gPSBpcy5yZWFkKHRieXMpKSAhPSAtMSkge1xcbiAgICAgICAgICAgICAgICAgICAgdG9zLndyaXRlKHRieXMsIDAsIGxlbik7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaXMuY2xvc2UoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICB0b3MuY2xvc2UoKTtcXG4gICAgICAgIC8v6KeE5YiZ5pu/5o2i6KeE5YiZO1xcbiAgICAgICAgbGV0IG91dEZpbGUgPSBuZXcgRmlsZShmaWxlT3V0KTtcXG4gICAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0ID09PSBcXFwiZnVuY3Rpb25cXFwiKSB7XFxuICAgICAgICAgICAgbGV0IHRpcyA9IG5ldyBGaWxlSW5wdXRTdHJlYW0odG1wRmlsZSk7XFxuICAgICAgICAgICAgbGV0IG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKG91dEZpbGUpKTtcXG4gICAgICAgICAgICBsZXQgbGVuID0gMDtcXG4gICAgICAgICAgICBsZXQgYnlzID0gQXJyYXkubmV3SW5zdGFuY2UoQnl0ZS5UWVBFLCBCVUZGRVJfU0laRSk7XFxuICAgICAgICAgICAgd2hpbGUgKChsZW4gPSB0aXMucmVhZChieXMpKSAhPSAtMSkge1xcbiAgICAgICAgICAgICAgICBsZXQgbmJ5cyA9IGludGVyY2VwdChuZXcgU3RyaW5nKGJ5cywwLGxlbikpO1xcbiAgICAgICAgICAgICAgICBvcy53cml0ZShuYnlzLCAwLCBuYnlzLmxlbmd0aCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRtcEZpbGUuZGVsZXRlKCk7XFxuICAgICAgICAgICAgdGlzLmNsb3NlKCk7XFxuICAgICAgICAgICAgb3MuY2xvc2UoKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgaWYgKG91dEZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgICAgICAgICAgb3V0RmlsZS5kZWxldGUoKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdG1wRmlsZS5yZW5hbWVUbyhvdXRGaWxlKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn0qL1xcbi8v5q6LXFxuZnVuY3Rpb24gZmlsZVJ1bGUoZmlsZXNJbnB1dCwgZmlsZU91dCwgaW50ZXJjZXB0KSB7XFxuICAgIHdpdGgoamF2YVNjb3BlKSB7XFxuICAgICAgICBjb25zdCBCVUZGRVJfU0laRSA9IDB4MzAwMDAwO1xcbiAgICAgICAgbGV0IHRtcEZpbGUgPSBuZXcgRmlsZShmaWxlc0lucHV0KTtcXG4gICAgICAgIGlmICghKHRtcEZpbGUuZXhpc3RzKCkgJiYgdG1wRmlsZS5pc0ZpbGUoKSkpIHtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgb3V0RmlsZSA9IG5ldyBGaWxlKGZpbGVPdXQpO1xcblxcbiAgICAgICAgbGV0IHRpcyA9IG5ldyBGaWxlSW5wdXRTdHJlYW0odG1wRmlsZSk7XFxuICAgICAgICBsZXQgb3MgPSBuZXcgQnVmZmVyZWRPdXRwdXRTdHJlYW0obmV3IEZpbGVPdXRwdXRTdHJlYW0ob3V0RmlsZSkpO1xcbiAgICAgICAgbGV0IGxlbiA9IDA7XFxuICAgICAgICBsZXQgYnlzID0gQXJyYXkubmV3SW5zdGFuY2UoQnl0ZS5UWVBFLCBCVUZGRVJfU0laRSk7XFxuICAgICAgICB3aGlsZSAoKGxlbiA9IHRpcy5yZWFkKGJ5cykpICE9IC0xKSB7XFxuICAgICAgICAgICAgbGV0IG5ieXMgPSBpbnRlcmNlcHQobmV3IFN0cmluZyhieXMsIDAsIGxlbikpO1xcbiAgICAgICAgICAgIG9zLndyaXRlKG5ieXMsIDAsIG5ieXMubGVuZ3RoKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHRtcEZpbGUuZGVsZXRlKCk7XFxuICAgICAgICB0aXMuY2xvc2UoKTtcXG4gICAgICAgIG9zLmNsb3NlKCk7XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfVxcbn1cXG5cXG5mdW5jdGlvbiByZWFkRmlsZShwYXRoKSB7XFxuICAgIHRyeSB7XFxuICAgICAgICBsZXQgcGF0aHMgPSBQYXRocy5nZXQocGF0aCk7XFxuICAgICAgICBpZiAoIUZpbGVzLmV4aXN0cyhwYXRocykpIHJldHVybiBcXFwiXFxcIjtcXG4gICAgICAgIHJldHVybiBTdHJpbmcobmV3IGphdmFTdHJpbmcoRmlsZXMucmVhZEFsbEJ5dGVzKHBhdGhzKSkpO1xcbiAgICB9IGNhdGNoIHtcXG4gICAgICAgIHJldHVybiBcXFwiXFxcIjtcXG4gICAgfVxcbn1cXG4kLmV4cG9ydHMgPSB7XFxuICAgIGdldEZpbGVUaW1lOiAocGF0aCkgPT4gZ2V0RmlsZVRpbWUocGF0aCksXFxuICAgIGdldEZpbGVQYXRoOiAocGF0aCwgdHlwZSwgZXhwYW5kKSA9PiBnZXRGaWxlUGF0aChwYXRoLCB0eXBlLCBleHBhbmQpLFxcbiAgICBkZWxldGVGaWxlczogKHBhdGgpID0+IGRlbGV0ZUZpbGVzKHBhdGgpLFxcbiAgICByZW5hbWVGaWxlOiAocGF0aCwgbmFtZSkgPT4gcmVuYW1lRmlsZShwYXRoLCBuYW1lKSxcXG4gICAgbW92ZUZpbGVzOiAoZnJvbVBhdGgsIHRvUGF0aCkgPT4gbW92ZUZpbGVzKGZyb21QYXRoLCB0b1BhdGgpLFxcbiAgICBmaWxlV3JpdGU6IChwYXRoLCBjb250ZW50KSA9PiBmaWxlV3JpdGUocGF0aCwgY29udGVudCksXFxuICAgIGZpbGVXcml0ZUFwcGVuZDogKHBhdGgsIGNvbnRlbnQpID0+IGZpbGVXcml0ZUFwcGVuZChwYXRoLCBjb250ZW50KSxcXG4gICAgZ2V0TmFtZTogKHBhdGgpID0+IGdldE5hbWUocGF0aCksXFxuICAgIGdldEZpbGVTaXplOiAoZmlsZVBhdGgpID0+IGdldEZpbGVTaXplKGZpbGVQYXRoKSxcXG4gICAgZmlsZVJ1bGU6IChmaWxlc0lucHV0LCBmaWxlT3V0LCBpbnRlcmNlcHQpID0+IGZpbGVSdWxlKGZpbGVzSW5wdXQsIGZpbGVPdXQsIGludGVyY2VwdCksXFxuICAgIGNvcHlGaWxlOiAoc291cmNlLCB0YXJnZXQsIGlzQ292ZXIpID0+IGNvcHlGaWxlKHNvdXJjZSwgdGFyZ2V0LCBpc0NvdmVyKSxcXG4gICAgcmVhZEZpbGU6IChwYXRoKSA9PiByZWFkRmlsZShwYXRoKVxcbn1cIn0se1wiY29sX3R5cGVcIjpcInRleHRfMlwiLFwibmFtZVwiOlwiI3Yu5LiL6L295YiX6KGoLeaZrumAmuS4i+i9vVwiLFwicGF0aFwiOlwiZG93bmxvYWQudmlld1wiLFwicnVsZVwiOlwianM6XFxuY29uc3Qgdmlld0NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xcbiAgICBjaGFwdGVyTGlzdDogW10sXFxuICAgIGluZm86IHt9LFxcbiAgICBkZWZhdWx0VmlldzogXFxcIjBcXFwiXFxufSwgTVlfUEFSQU1TKTtcXG52aWV3Q29uZmlnLmluZm8gPSBPYmplY3QuYXNzaWduKHtcXG4gICAgcnVsZU5hbWU6IFxcXCJcXFwiLFxcbiAgICBib29rTmFtZTogXFxcIlxcXCIsXFxuICAgIGJvb2tUb3BQaWM6IFxcXCJcXFwiLFxcbiAgICBwYXJzZUNvZGU6IFxcXCJcXFwiLFxcbiAgICB0eXBlOiBcXFwiY29taWNcXFwiLFxcbn0sIHZpZXdDb25maWcuaW5mbyk7XFxubGV0IHtcXG4gICAgY2hhcHRlckxpc3QsXFxuICAgIGluZm8sXFxuICAgIGRlZmF1bHRWaWV3XFxufSA9IHZpZXdDb25maWc7XFxuc2V0UGFnZVRpdGxlKFxcXCLpgInmi6nlmah8XFxcIiArIGluZm8uYm9va05hbWUpXFxuXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuXFxuY29uc3QgZGVmX0RvVmlfU3R5bGUgPSBDb25maWcuZGVmX0RvVmlfU3R5bGU7XFxuY29uc3QgTVlfSUQgPSBpbmZvLnJ1bGVOYW1lICsgXFxcIi8vXFxcIiArIGluZm8uYm9va05hbWU7XFxuXFxuXFxubGV0IGlzU3RhcnQgPSBnZXRNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIpO1xcbmxldCB2aWV3TW9kZSA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjp2aWV3TW9kZVxcXCIsIGRlZmF1bHRWaWV3KTtcXG5sZXQgaXNSZXZlcnNlID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmlzUmV2ZXJzZVxcXCIsIFxcXCIwXFxcIik7XFxubGV0IHRhZ0ZpbHRlciA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjp0YWdGaWx0ZXJcXFwiLCBDb25maWcuZGVmX0RvVmlfVHlwZSk7XFxuXFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKChNWV9JRCkgPT4ge1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpsb2FkaW5nVGVhbVxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjp2aWV3TW9kZVxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpjb21wbGV0ZWRcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOnRhZ0ZpbHRlclxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpwYWdlTnVtXFxcIik7XFxufSwgTVlfSUQpKTtcXG5cXG5sZXQgbGF5b3V0ID0gW107XFxuXFxuaWYgKGlzU3RhcnQgPT09IFxcXCIxXFxcIikge1xcbiAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6dmlld01vZGVcXFwiLCBkZWZhdWx0Vmlldyk7XFxuICAgIHZpZXdNb2RlID0gXFxcIjFcXFwiO1xcbn1cXG5cXG5sZXQgYmFja3VwQ2hhcHRlckxpc3QgPSBjaGFwdGVyTGlzdDtcXG5pZiAodHlwZW9mIGNoYXB0ZXJMaXN0ID09PSBcXFwic3RyaW5nXFxcIikge1xcbiAgICBjaGFwdGVyTGlzdCA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBjaGFwdGVyTGlzdCkgfHwgXFxcIltdXFxcIik7XFxufVxcbmxldCBjaGFwdGVyQWxsID0gY2hhcHRlckxpc3Q7XFxuY2hhcHRlckxpc3QgPSBjaGFwdGVyTGlzdC5tYXAoKGl0ZW0sIENJRCkgPT4ge1xcbiAgICBpdGVtLkNJRCA9IENJRDtcXG4gICAgcmV0dXJuIGl0ZW07XFxufSk7XFxubGV0IHBhZ2VOdW0gPSBOdW1iZXIoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnBhZ2VOdW1cXFwiLCBcXFwiMVxcXCIpKTtcXG5sZXQgY2hhcHRlckNodW5rID0gW2NoYXB0ZXJMaXN0XS5jb25jYXQoVG9vbC5jaHVuayhjaGFwdGVyTGlzdCwgQ29uZmlnLnZpZXdQYWdlU2l6ZSkpO1xcbmNoYXB0ZXJMaXN0ID0gY2hhcHRlckNodW5rW3BhZ2VOdW1dIHx8IFtdO1xcblxcbmZ1bmN0aW9uIHNldFR5cGUoKSB7XFxuICAgIGxldCBzZXQgPSAodGFnLCBwdXQpID0+IHtcXG4gICAgICAgIHB1dE15VmFyKHB1dCwgdGFnKTtcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgfTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IDAgPT0gcGFnZU51bSA/IFxcXCLigJzigJzigJ3igJ1cXFwiICsgKFxcXCLlhajpg6goXFxcIiArIGNoYXB0ZXJBbGwubGVuZ3RoICsgXFxcIilcXFwiKS5mb250Y29sb3IoXFxcIiMyM0FENkZcXFwiKSA6IFxcXCLlhajpg6goXFxcIiArIGNoYXB0ZXJBbGwubGVuZ3RoICsgXFxcIilcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKHNldCwgMCwgTVlfSUQgKyBcXFwiOnBhZ2VOdW1cXFwiKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG4gICAgfSk7XFxuICAgIGZvciAobGV0IGkgPSAxOyBpIDwgY2hhcHRlckNodW5rLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBsZXQgdGFnVGV4dCA9IChpIC0gMSkgKiBDb25maWcudmlld1BhZ2VTaXplICsgXFxcIi1cXFwiICsgKChpIC0gMSkgKiBDb25maWcudmlld1BhZ2VTaXplICsgY2hhcHRlckNodW5rW2ldLmxlbmd0aCk7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGkgPT0gcGFnZU51bSA/IFxcXCLigJzigJzigJ3igJ1cXFwiICsgdGFnVGV4dC5mb250Y29sb3IoXFxcIiMyM0FENkZcXFwiKSA6IHRhZ1RleHQsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKHNldCwgaSwgTVlfSUQgKyBcXFwiOnBhZ2VOdW1cXFwiKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogXFxcImJsYW5rX2Jsb2NrXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IHRhZ0ZpbHRlciA9PT0gXFxcIjBcXFwiID8gXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi5YWo6YOoXFxcIi5mb250Y29sb3IoXFxcIiMyM0FENkZcXFwiKSA6IFxcXCLlhajpg6hcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKHNldCwgXFxcIjBcXFwiLCBNWV9JRCArIFxcXCI6dGFnRmlsdGVyXFxcIiksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogdGFnRmlsdGVyID09PSBcXFwiMVxcXCIgPyBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLmnKrkuIvovb1cXFwiLmZvbnRjb2xvcihcXFwiIzIzQUQ2RlxcXCIpIDogXFxcIuacquS4i+i9vVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoc2V0LCBcXFwiMVxcXCIsIE1ZX0lEICsgXFxcIjp0YWdGaWx0ZXJcXFwiKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiB0YWdGaWx0ZXIgPT09IFxcXCIyXFxcIiA/IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIuW3suS4i+i9vVxcXCIuZm9udGNvbG9yKFxcXCIjMjNBRDZGXFxcIikgOiBcXFwi5bey5LiL6L29XFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShzZXQsIFxcXCIyXFxcIiwgTVlfSUQgKyBcXFwiOnRhZ0ZpbHRlclxcXCIpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcbiAgICB9KTtcXG59XFxubGV0IGNoYXB0ZXJUZWFtID0gW107XFxubGV0IHJlY29yZCA9IFtdO1xcbmlmIChpbmZvLnR5cGUgPT09IFxcXCJjb21pY1xcXCIpIHtcXG4gICAgbGV0IGxhenkgPSAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICBsZXQgZmlsZWxpc3QgPSBGaWxlLmdldEZpbGVQYXRoKGlucHV0KTtcXG4gICAgICAgIGxldCBwaWNsaXN0ID0gZmlsZWxpc3QubWFwKChpdGVtLCBpKSA9PiBcXFwiZmlsZTovL1xcXCIgKyBpbnB1dCArIFxcXCIvXFxcIiArIChpICsgMSkgKyBcXFwiLmpwZ1xcXCIpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJwaWNzOi8vXFxcIiArIHBpY2xpc3Quam9pbihcXFwiJiZcXFwiKTtcXG4gICAgfSk7XFxuXFxuICAgIGZ1bmN0aW9uIGNvbUZ1bihpLCBpdGVtKSB7XFxuICAgICAgICBsZXQgcm9vdFBhdGggPSBDb25maWcuY29taWNQYXRoICsgXFxcIi9cXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXCIvXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFwiL1xcXCIgKyBpICsgXFxcIiRBJFxcXCIgKyBpdGVtLnRpdGxlO1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIuKAneKAnVxcXCIsXFxuICAgICAgICAgICAgdXJsOiByb290UGF0aCArIGxhenksXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNcXFwiICsgaSxcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBkZWZfRG9WaV9TdHlsZVxcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnW2luZm8udHlwZSArIFxcXCJQYXRoXFxcIl0gKyBcXFwiL1xcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcIi9cXFwiICsgaW5mby5ib29rTmFtZSwgXFxcImRpclxcXCIpLmZvckVhY2goKGZpbGUpID0+IHtcXG4gICAgICAgIGxldCBhdHQgPSBUb29sLnNwbGl0KGZpbGUubmFtZSwgXFxcIiRcXFwiLCAyKTtcXG4gICAgICAgIGlmIChhdHQubGVuZ3RoID09PSAzICYmIGF0dFsxXSA9PT0gKFxcXCJBXFxcIikpIHtcXG4gICAgICAgICAgICByZWNvcmQucHVzaChhdHRbMl0pO1xcbiAgICAgICAgfVxcbiAgICB9KTtcXG59IGVsc2Uge1xcbiAgICBmdW5jdGlvbiBjb21GdW4oaSwgaXRlbSkge1xcbiAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIuKAneKAnVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL05vdmVsTWFpbkJvZHkjYXV0b1BhZ2UjI3JlYWRUaGVtZSNcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjXFxcIiArIGksXFxuICAgICAgICAgICAgICAgIHBhdGg6IENvbmZpZy5ub3ZlbFBhdGggKyBcXFwiL1xcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcIi9cXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCIvXFxcIiArIGkgKyBcXFwiJEEkXFxcIiArIGl0ZW0udGl0bGUgKyBcXFwiLnR4dFxcXCIsXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBGaWxlLmdldEZpbGVQYXRoKENvbmZpZ1tpbmZvLnR5cGUgKyBcXFwiUGF0aFxcXCJdICsgXFxcIi9cXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXCIvXFxcIiArIGluZm8uYm9va05hbWUsIFxcXCJmaWxlXFxcIiwgXFxcIi50eHRcXFwiKS5mb3JFYWNoKChmaWxlKSA9PiB7XFxuICAgICAgICBsZXQgYXR0ID0gVG9vbC5zcGxpdChmaWxlLm5hbWUsIFxcXCIkXFxcIiwgMik7XFxuICAgICAgICBpZiAoYXR0Lmxlbmd0aCA9PT0gMyAmJiBhdHRbMV0gPT09IChcXFwiQVxcXCIpKSB7XFxuICAgICAgICAgICAgcmVjb3JkLnB1c2goYXR0WzJdLnNsaWNlKDAsIGF0dFsyXS5sYXN0SW5kZXhPZihcXFwiLlxcXCIpKSk7XFxuICAgICAgICB9XFxuICAgIH0pO1xcbn1cXG5cXG5mdW5jdGlvbiBjbGlja0Rvd25sb2FkKGl0ZW0sIGluZm8sIE1ZX0lELCBpKSB7XFxuICAgIGxldCBsb2FkaW5nVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmxvYWRpbmdUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgIGxldCBFbGVtZW50SW5kZXggPSBsb2FkaW5nVGVhbS5pbmRleE9mKGkpO1xcbiAgICBpZiAoRWxlbWVudEluZGV4ID4gLTEpIHJldHVybiBcXFwidG9hc3Q6Ly/mraPlnKjkuIvovb1cXFwiO1xcblxcbiAgICBsb2FkaW5nVGVhbS5wdXNoKGkpO1xcbiAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6bG9hZGluZ1RlYW1cXFwiLCBKU09OLnN0cmluZ2lmeShsb2FkaW5nVGVhbSkpO1xcbiAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi4oCY4oCYXFxcIiArIGl0ZW0udGl0bGUgKyBcXFwi4oCZ4oCZXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNcXFwiICsgaVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGV0IHJlc3VsdCA9IFxcXCJ0b2FzdDovL+S4i+i9veWksei0pVxcXCI7XFxuICAgIHRyeSB7XFxuICAgICAgICB0b2FzdChcXFwi5byA5aeL5LiL6L29OlxcXCIgKyBpdGVtLnRpdGxlKTtcXG4gICAgICAgIGxldCBkb3dubG9hZCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0Rvd25sb2FkLmV4ZS5qc1xcXCIpO1xcbiAgICAgICAgcmVzdWx0ID0gZG93bmxvYWQoaXRlbSwgaW5mbywgTVlfSUQsIGkpO1xcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJxcXFwiICsgaXRlbS50aXRsZSArIFxcXCLigJ3igJ1cXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcInRvYXN0Oi8v5bey5LiL6L29XFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI1xcXCIgKyBpXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjXFxcIiArIGlcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICB9IGZpbmFsbHkge1xcbiAgICAgICAgbG9hZGluZ1RlYW0uc3BsaWNlKEVsZW1lbnRJbmRleCwgMSk7XFxuICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6bG9hZGluZ1RlYW1cXFwiLCBKU09OLnN0cmluZ2lmeShsb2FkaW5nVGVhbSkpO1xcbiAgICB9XFxuICAgIHJldHVybiByZXN1bHQ7XFxufVxcblxcbmZ1bmN0aW9uIHNpbmdsZVZpZXcoKSB7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5Y+N6L2s5YiX6KGoXFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlLCBNWV9JRCkgPT4ge1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjppc1JldmVyc2VcXFwiLCBpc1JldmVyc2UgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCBpc1JldmVyc2UsIE1ZX0lEKSxcXG4gICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9pZD0zM252RHFiSEg3SFcmc2l6ZT00OCZmb3JtYXQ9Z2lmJnRva2VuPVxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcImljb25fMlxcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5om56YeP5LiL6L29XFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoTVlfSUQpID0+IHtcXG4gICAgICAgICAgICBsZXQgbG9hZGluZ1RlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpsb2FkaW5nVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICAgICAgICAgIGlmIChsb2FkaW5nVGVhbS5sZW5ndGggPiAwKSByZXR1cm4gXFxcInRvYXN0Oi8v6L+Y5pyJ5Lu75Yqh5rKh5pyJ5a6M5oiQXFxcIjtcXG4gICAgICAgICAgICBpZiAoZ2V0QXBwVmVyc2lvbigpIDwgMjU5NCkgcmV0dXJuIFxcXCJ0b2FzdDovL+acquW8gOaUvlxcXCI7XFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOnZpZXdNb2RlXFxcIiwgXFxcIjFcXFwiKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG5cXG4gICAgICAgIH0sIE1ZX0lEKSxcXG4gICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9mb3JtYXQ9Z2lmJmlkPTB1YWZhTU56eGo4OCZ0b2tlbj1cXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uXzJcXFwiXFxuICAgIH0pO1xcbiAgICBzZXRUeXBlKCk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgfSk7XFxuICAgIGxldCBsb2FkaW5nVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmxvYWRpbmdUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgIGZvciAobGV0IGkgPSAwLCBpdGVtID0gY2hhcHRlckxpc3RbMF07IGkgPCBjaGFwdGVyTGlzdC5sZW5ndGg7IGl0ZW0gPSBjaGFwdGVyTGlzdFsrK2ldKSB7XFxuICAgICAgICBsZXQgaXNfZG93bmxvYWQgPSByZWNvcmQuaW5jbHVkZXMoaXRlbS50aXRsZSk7XFxuICAgICAgICBpZiAoaXNfZG93bmxvYWQgJiYgdGFnRmlsdGVyICE9PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgICAgICBjaGFwdGVyVGVhbS5wdXNoKGNvbUZ1bihpdGVtLkNJRCwgaXRlbSkpO1xcbiAgICAgICAgfSBlbHNlIGlmICghaXNfZG93bmxvYWQgJiYgdGFnRmlsdGVyICE9PSBcXFwiMlxcXCIpIHtcXG4gICAgICAgICAgICBjaGFwdGVyVGVhbS5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGxvYWRpbmdUZWFtLmluY2x1ZGVzKGl0ZW0uQ0lEKSA/IFxcXCLigJjigJhcXFwiICsgaXRlbS50aXRsZSArIFxcXCLigJnigJlcXFwiIDogaXRlbS50aXRsZSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKGNsaWNrRG93bmxvYWQsIGl0ZW0sIGluZm8sIE1ZX0lELCBpdGVtLkNJRCksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI1xcXCIgKyBpdGVtLkNJRFxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbn1cXG5cXG5mdW5jdGlvbiBjbGlja0Nob29zZSh0aXRsZSwgTVlfSUQsIGkpIHtcXG4gICAgbGV0IGlzU3RhcnQgPSBnZXRNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIpO1xcbiAgICBpZiAoaXNTdGFydCA9PT0gXFxcIjFcXFwiKSByZXR1cm4gXFxcInRvYXN0Oi8v5q2j5Zyo5LiL6L29Li4uXFxcIjtcXG4gICAgbGV0IGJhdGNoVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICBsZXQgRWxlbWVudEluZGV4ID0gYmF0Y2hUZWFtLmluZGV4T2YoaSk7XFxuICAgIGlmIChFbGVtZW50SW5kZXggPiAtMSkge1xcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjXFxcIiArIGlcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGJhdGNoVGVhbS5zcGxpY2UoRWxlbWVudEluZGV4LCAxKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCY4oCYXFxcIiArIHRpdGxlICsgXFxcIuKAmeKAmVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNcXFwiICsgaVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgYmF0Y2hUZWFtLnB1c2goaSk7XFxuICAgIH1cXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcbiAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbn1cXG5cXG5mdW5jdGlvbiBiYXRjaFZpZXcoKSB7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5Y2V6YCJ5LiL6L29XFxcIixcXG4gICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9pZD1QSWljdkY2ZWJ6TW4mc2l6ZT00OCZmb3JtYXQ9Z2lmJnRva2VuPVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIikgPT09IFxcXCIxXFxcIikgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOaJuemHj+S4i+i9vVxcXCI7XFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOnZpZXdNb2RlXFxcIiwgXFxcIjBcXFwiKTtcXG4gICAgICAgICAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgIH0sIE1ZX0lEKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIlxcbiAgICB9KTtcXG4gICAgbGV0IHN0YXJ0ID0gQ29uZmlnLnZpZXdQYWdlU2l6ZSAqIE1hdGgubWF4KHBhZ2VOdW0gLSAxLCAwKTtcXG4gICAgbGV0IGVuZCA9IHN0YXJ0ICsgY2hhcHRlckxpc3QubGVuZ3RoO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIumAieaLqeWFqOmDqFxcXCIsXFxuICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9pbWcuaWNvbnM4LmNvbS8/Zm9ybWF0PWdpZiZpZD0xSFZjSExvTnpyaXQmdG9rZW49XFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoc3RhcnQsIGVuZCwgTVlfSUQpID0+IHtcXG4gICAgICAgICAgICBjb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXCIpO1xcbiAgICAgICAgICAgIGxldCBjaG9vc2VUZWFtID0gVG9vbC5yYW5nZShzdGFydCwgZW5kKTtcXG4gICAgICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICAgICAgYmF0Y2hUZWFtID0gQXJyYXkuZnJvbShuZXcgU2V0KGJhdGNoVGVhbS5jb25jYXQoY2hvb3NlVGVhbSkpKTtcXG4gICAgICAgICAgICBsZXQgY29tcGxldGVkID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6Y29tcGxldGVkXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICAgICAgYmF0Y2hUZWFtID0gYmF0Y2hUZWFtLmZpbHRlcigoaSkgPT4gIWNvbXBsZXRlZC5pbmNsdWRlcyhpKSk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuICAgICAgICB9LCBzdGFydCwgZW5kLCBNWV9JRCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5Y+W5raI5YWo6YOoXFxcIixcXG4gICAgICAgIHBpY191cmw6IFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9mb3JtYXQ9Z2lmJmlkPUh6RWpQcEkzTkw4RCZ0b2tlbj1cXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChzdGFydCwgZW5kLCBNWV9JRCkgPT4ge1xcbiAgICAgICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuICAgICAgICAgICAgbGV0IGNob29zZVRlYW0gPSBuZXcgU2V0KFRvb2wucmFuZ2Uoc3RhcnQsIGVuZCkpO1xcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHggPT4gIWNob29zZVRlYW0uaGFzKHgpKTtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgSlNPTi5zdHJpbmdpZnkoYmF0Y2hUZWFtKSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgICAgIH0sIHN0YXJ0LCBlbmQsIE1ZX0lEKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLnoa7orqTpgInkuK1cXFwiLFxcbiAgICAgICAgcGljX3VybDogXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9dE1ydnRjNlQ5aFZiJnRva2VuPVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIiwgXFxcIi0xXFxcIikgIT09IFxcXCItMVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9vS4uLlxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gYmF0Y2hUZWFtLmxlbmd0aCA9PT0gMCA/IFxcXCJ0b2FzdDovL+S9oOi/mOS7gOS5iOmDveayoeaciemAiVxcXCIgOiBcXFwiaGlrZXI6Ly9wYWdlL0JhdGNoLnZpZXcjbm9SZWZyZXNoIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSNcXFwiO1xcbiAgICAgICAgfSwgTVlfSUQpLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBuZXdXaW5kb3c6IHRydWUsXFxuICAgICAgICAgICAgd2luZG93SWQ6IE1ZX0lEICsgXFxcIi8v5om56YeP5LiL6L29XFxcIixcXG4gICAgICAgICAgICBNWV9JRDogTVlfSUQsXFxuICAgICAgICAgICAgY2hhcHRlckxpc3Q6IGJhY2t1cENoYXB0ZXJMaXN0LFxcbiAgICAgICAgICAgIGluZm86IGluZm9cXG4gICAgICAgIH0sXFxuICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCJcXG4gICAgfSk7XFxuICAgIHNldFR5cGUoKTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbiAgICB9KTtcXG4gICAgbGV0IGJhdGNoVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICBsZXQgY29tcGxldGVkID0gW107XFxuICAgIGZvciAobGV0IGkgPSAwLCBpdGVtID0gY2hhcHRlckxpc3RbMF07IGkgPCBjaGFwdGVyTGlzdC5sZW5ndGg7IGl0ZW0gPSBjaGFwdGVyTGlzdFsrK2ldKSB7XFxuICAgICAgICBsZXQgaXNfZG93bmxvYWQgPSByZWNvcmQuaW5jbHVkZXMoaXRlbS50aXRsZSk7XFxuICAgICAgICBpZiAoaXNfZG93bmxvYWQgJiYgdGFnRmlsdGVyICE9PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgICAgICBjb21wbGV0ZWQucHVzaChpdGVtLkNJRCk7XFxuICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaChjb21GdW4oaXRlbS5DSUQsIGl0ZW0pKTtcXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcIjJcXFwiKSB7XFxuICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBiYXRjaFRlYW0uaW5jbHVkZXMoaXRlbS5DSUQpID8gXFxcIuKAmOKAmFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIuKAmeKAmVxcXCIgOiBpdGVtLnRpdGxlLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoY2xpY2tDaG9vc2UsIGl0ZW0udGl0bGUsIE1ZX0lELCBpdGVtLkNJRCksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI1xcXCIgKyBpdGVtLkNJRFxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6Y29tcGxldGVkXFxcIiwgSlNPTi5zdHJpbmdpZnkoY29tcGxldGVkKSk7XFxufVxcbnN3aXRjaCAodmlld01vZGUpIHtcXG4gICAgY2FzZSBcXFwiMFxcXCI6XFxuICAgICAgICBzaW5nbGVWaWV3KCk7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSBcXFwiMVxcXCI6XFxuICAgICAgICBiYXRjaFZpZXcoKTtcXG4gICAgICAgIGJyZWFrO1xcbn1cXG5pZiAoaXNSZXZlcnNlID09PSBcXFwiMVxcXCIpIHtcXG4gICAgY2hhcHRlclRlYW0ucmV2ZXJzZSgpO1xcbn1cXG5sYXlvdXQucHVzaC5hcHBseShsYXlvdXQsIGNoYXB0ZXJUZWFtKTtcXG5zZXRSZXN1bHQobGF5b3V0KTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2LuaJuemHj+S4i+i9veWZqFwiLFwicGF0aFwiOlwiQmF0Y2gudmlld1wiLFwicnVsZVwiOlwianM6XFxubGV0IHtcXG4gICAgY2hhcHRlckxpc3QsXFxuICAgIGluZm8sXFxuICAgIE1ZX0lEXFxufSA9IE1ZX1BBUkFNUztcXG5zZXRQYWdlVGl0bGUoXFxcIuS4i+i9veWZqHxcXFwiK2luZm8uYm9va05hbWUpO1xcbmFkZExpc3RlbmVyKFxcXCJvbkNsb3NlXFxcIiwgJC50b1N0cmluZygoTVlfSUQpID0+IHtcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIik7XFxuICAgIHJlZnJlc2hQYWdlKCk7XFxufSwgTVlfSUQpKTtcXG5cXG5sZXQgaXNTdGFydCA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIiwgXFxcIjBcXFwiKTtcXG5sZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIwXFxcIik7XFxubGV0IGxheW91dCA9IFtdO1xcblxcbmxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG5pZih0eXBlb2YgY2hhcHRlckxpc3QgPT09IFxcXCJzdHJpbmdcXFwiKXtcXG4gICAgY2hhcHRlckxpc3QgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiK2NoYXB0ZXJMaXN0KXx8XFxcIltdXFxcIik7XFxufVxcbmxldCBjaGFwdGVyVGVhbSA9IGJhdGNoVGVhbS5tYXAodiA9PiB7XFxuICAgIGxldCBjaGFwdGVySXRlbSA9IGNoYXB0ZXJMaXN0W3ZdO1xcbiAgICBjaGFwdGVySXRlbS5DSUQgPSB2O1xcbiAgICByZXR1cm4gY2hhcHRlckl0ZW07XFxufSk7XFxuaWYgKGlzU3RhcnQgPT09IFxcXCIwXFxcIikge1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuW8gOWni+S4i+i9vVtcXFwiICsgY2hhcHRlclRlYW0ubGVuZ3RoICsgXFxcIl1cXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChjaGFwdGVyVGVhbSwgaW5mbywgTVlfSUQpID0+IHtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIsIFxcXCIxXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIGxldCBkb3dubG9hZCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0JhdGNoU3RhdGlzdGljcy5qc1xcXCIpO1xcbiAgICAgICAgICAgIHJldHVybiBkb3dubG9hZChjaGFwdGVyVGVhbSwgaW5mbywgTVlfSUQpIHx8IFxcXCJ0b2FzdDovL+S4i+i9vemUmeivr1xcXCI7XFxuICAgICAgICB9LCBjaGFwdGVyVGVhbSwgaW5mbywgTVlfSUQpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85byA5aeL5LiL6L29XFxcIlxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLku7vliqHliJfooajvvJpcXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbiAgICB9KTtcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjaGFwdGVyVGVhbSkge1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLnRpdGxlLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbiAgICAgICAgfSk7XFxuICAgIH1cXG5cXG59IGVsc2Uge1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuS4i+i9vei/m+W6pjowL1xcXCIrY2hhcHRlclRlYW0ubGVuZ3RoLFxcbiAgICAgICAgZGVzYzogXFxcIuKAnOKAnOKAneKAneKWh+KWh+KWh+KWh+KWh+KWh+KWh+KWh+KWh+KWh1xcXCIuZm9udGNvbG9yKFxcXCIjZTVlMWU0XFxcIikrXFxcIiAwJVxcXCIsXFxuICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOS4i+i9vei/m+W6plxcXCIsXFxuICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuWQjuWPsOS4i+i9vVxcXCIsXFxuICAgICAgICB1cmw6IFxcXCJmdW5jOi8vYmFja2dyb3VuZFxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG4gICAgfSk7XFxuXFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBbXFxcIlvlj5bmtojkuIvovb1dXFxcIiwgXFxcIlvmraPlnKjlgZzmraIuLi5dXFxcIiwgXFxcIlvov5Tlm55dXFxcIiwgXFxcIlvlpITnkIblpLHotKVdXFxcIiwgXFxcIlvph43mlrDlvIDlp4tdXFxcIl1bc3RhdHVzXSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoTVlfSUQpID0+IHtcXG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gXFxcIjBcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiMVxcXCIpO1xcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwiW+ato+WcqOWBnOatoi4uLl1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzkuIvovb3mjqfliLZcXFwiXFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5q2j5Zyo5Y+W5raI5LiL6L295Lu75YqhXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gXFxcIjFcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mraPlnKjmmoLlgZwuLi5cXFwiO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBcXFwiMlxcXCIpIHtcXG4gICAgICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey6YCA5Ye65LiL6L295ZmoXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtcXFwiM1xcXCIsIFxcXCI0XFxcIl0uaW5jbHVkZXMoc3RhdHVzKSkge1xcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIik7XFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIpO1xcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpsb2dcXFwiKTtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+mHjeaWsOeCueWHu+S4i+i9vVxcXCJcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9LCBNWV9JRCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOS4i+i9veaOp+WItlxcXCJcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwiPHN0cm9uZz7kuIvovb3ml6Xlv5c8L3N0cm9uZz5cXFwiLmJpZygpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbiAgICAgICAgXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzml6Xlv5dcXFwiXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTpcXFwi4oCc4oCc4oCd4oCdJD5cXFwiK1xcXCLlvIDlp4vkuIvovb0uLi4uLi5cXFwiLmZvbnRjb2xvcihcXFwiIzAwZmYwMFxcXCIpLFxcbiAgICAgICAgdXJsOlxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNsb2cjMFxcXCIsXFxuICAgICAgICAgICAgbGluZVZpc2libGU6ZmFsc2VcXG4gICAgICAgIH1cXG4gICAgfSk7XFxufVxcblxcbnNldFJlc3VsdChsYXlvdXQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI2ZnLuaJuemHj+S4i+i9vee7n+iuoVwiLFwicGF0aFwiOlwiQmF0Y2hTdGF0aXN0aWNzLmpzXCIsXCJydWxlXCI6XCJjb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuXFxuZnVuY3Rpb24gdGFzayh0YXNrUGFyYW0pIHtcXG4gICAgbGV0IHJlc3VsdCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0JhdGNoLmV4ZS5qc1xcXCIpKHRhc2tQYXJhbSk7XFxuICAgIHJldHVybiByZXN1bHQ7XFxufVxcblxcbiQuZXhwb3J0cyA9IGZ1bmN0aW9uKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkge1xcbiAgICBpZiAoY2hhcHRlclRlYW0ubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v56m655qE5LiL6L296Zif5YiXXFxcIjtcXG4gICAgfVxcbiAgICB2YXIgY291bnQgPSAwO1xcbiAgICB2YXIgdGFza0NvdW50ID0gY2hhcHRlclRlYW0ubGVuZ3RoO1xcbiAgICB2YXIgc3VjY2Vzc0NJRCA9IFtdO1xcbiAgICB2YXIgZmFpbE5hbWUgPSBbXTtcXG4gICAgdmFyIGxvZ0NvdW50ID0gMTtcXG4gICAgdmFyIHRhc2tUZWFtID0gY2hhcHRlclRlYW0ubWFwKGNoYXB0ZXJJdGVtID0+ICh7XFxuICAgICAgICBmdW5jOiB0YXNrLFxcbiAgICAgICAgaWQ6IGNoYXB0ZXJJdGVtLnRpdGxlLFxcbiAgICAgICAgcGFyYW06IHtcXG4gICAgICAgICAgICBjaGFwdGVySXRlbTogY2hhcHRlckl0ZW0sXFxuICAgICAgICAgICAgaW5mbzogaW5mbyxcXG4gICAgICAgICAgICBNWV9JRDogTVlfSURcXG4gICAgICAgIH1cXG4gICAgfSkpO1xcbiAgICBsZXQgbG9nTnVtID0gQ29uZmlnLmxvZ051bTtcXG5cXG4gICAgZnVuY3Rpb24gcHV0TG9nKHRleHQpIHtcXG4gICAgICAgIGxvZyh0ZXh0KTtcXG4gICAgICAgIGlmIChsb2dDb3VudCA+PSBsb2dOdW0pIHtcXG4gICAgICAgICAgICBkZWxldGVJdGVtKE1ZX0lEICsgXFxcIiNsb2cjXFxcIiArIChsb2dDb3VudCAtIDEwKSk7XFxuICAgICAgICB9XFxuICAgICAgICBhZGRJdGVtQWZ0ZXIoTVlfSUQgKyBcXFwifHzml6Xlv5dcXFwiLCB7XFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCIkPlxcXCIgKyB0ZXh0LFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjbG9nI1xcXCIgKyBsb2dDb3VudFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgbG9nQ291bnQrKztcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiBsaXN0ZW5lcihwZXJjaCwgaWQsIGVycm9yLCBDSUQpIHtcXG4gICAgICAgIGNvdW50Kys7XFxuICAgICAgICBsZXQgaXNTdWNjZXNzID0gZmFsc2U7XFxuICAgICAgICBpZiAoZXJyb3IgIT09IG51bGwpIHtcXG4gICAgICAgICAgICBmYWlsTmFtZS5wdXNoKGlkKTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIltsaXN0ZW5lcl3kuIvovb3lpLHotKXvvJpcXFwiICsgaWQgKyBcXFwiPEVSUk9SQCBcXFwiICsgZXJyb3IgKyBcXFwiPlxcXCIpO1xcbiAgICAgICAgfSBlbHNlIGlmIChDSUQgPj0gMCkge1xcbiAgICAgICAgICAgIHN1Y2Nlc3NDSUQucHVzaChDSUQpO1xcbiAgICAgICAgICAgIGxldCByYXRpbyA9IChjb3VudCAvIHRhc2tDb3VudCkudG9GaXhlZCg0KTtcXG4gICAgICAgICAgICBsZXQgc3RyaXBDb3VudCA9IE1hdGguY2VpbChyYXRpbyAqIDEwKTtcXG4gICAgICAgICAgICBpc1N1Y2Nlc3MgPSB0cnVlO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuS4i+i9vei/m+W6pu+8mlxcXCIgKyBzdWNjZXNzQ0lELmxlbmd0aCArIFxcXCIvXFxcIiArIHRhc2tDb3VudCxcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi4paHXFxcIi5yZXBlYXQoc3RyaXBDb3VudCkuZm9udGNvbG9yKFxcXCIjZmZhYzJkXFxcIikgKyBcXFwi4paHXFxcIi5yZXBlYXQoMTAgLSBzdHJpcENvdW50KS5mb250Y29sb3IoXFxcIiNlNWUxZTRcXFwiKSArIFxcXCIgXFxcIiArIChyYXRpbyAqIDEwMCkgKyBcXFwiJVxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzkuIvovb3ov5vluqZcXFwiXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIltsaXN0ZW5lcl3lt7LlrozmiJDkuIvovb3vvJpcXFwiICsgaWQpO1xcbiAgICAgICAgfSBlbHNlIGlmIChDSUQgPT09IC0xKSB7XFxuICAgICAgICAgICAgZmFpbE5hbWUucHVzaChpZCk7XFxuICAgICAgICAgICAgcHV0TG9nKFxcXCJbbGlzdGVuZXJd5bey5YGc5q2i77yaXFxcIiArIGlkKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh0YXNrQ291bnQgIT09IGNvdW50KSByZXR1cm47XFxuICAgICAgICBpZiAoc3VjY2Vzc0NJRC5sZW5ndGggPT09IHRhc2tDb3VudCkge1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgICAgICBkZXNjOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLilodcXFwiLnJlcGVhdCgxMCkuZm9udGNvbG9yKFxcXCIjMDBmZjAwXFxcIikgKyBcXFwiIDEwMCVcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L296L+b5bqmXFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICBsZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIwXFxcIik7XFxuICAgICAgICBsZXQgZmFpbFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHYgPT4gIXN1Y2Nlc3NDSUQuaW5jbHVkZXModikpO1xcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIEpTT04uc3RyaW5naWZ5KGZhaWxUZWFtKSk7XFxuICAgICAgICBpZiAoZmFpbFRlYW0ubGVuZ3RoID4gMCAmJiBzdGF0dXMgIT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiM1xcXCIpO1xcbiAgICAgICAgICAgIHB1dExvZyhcXFwi5LiL6L295aSx6LSlOltcXFwiICsgZmFpbE5hbWUuam9pbihcXFwiXe+8jFtcXFwiKSArIFxcXCJd44CCXFxcIik7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwiW+WkhOeQhuWksei0pV1cXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2UgaWYgKGZhaWxUZWFtLmxlbmd0aCA+IDAgJiYgc3RhdHVzID09PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjRcXFwiKTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIltsaXN0ZW5lcl0j5bey5YGc5q2i5omA5pyJ5Lu75Yqh77yM5L2G5bey5pyJ6L+b5bqm5LiN5Lya5raI5aSxI1xcXCIpO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIlvph43mlrDlvIDlp4tdXFxcIixcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOS4i+i9veaOp+WItlxcXCJcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjJcXFwiKTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIuS4i+i9veS7u+WKoVtcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCJd5bey5YWo6YOo5oiQ5Yqf5a6M5oiQXFxcIik7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwiW+i/lOWbnl1cXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICB0b2FzdChcXFwi5LiL6L295Lu75YqhW1xcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcIl3lt7LlrozmiJBcXFwiKTtcXG4gICAgfVxcbiAgICBsZXQgdGFza1RlYW1DaHVuayA9IFtdO1xcbiAgICBpZiAoQ29uZmlnLnRocmVhZE51bSA+IDApIHtcXG4gICAgICAgIHRhc2tUZWFtQ2h1bmsgPSBUb29sLmNodW5rKHRhc2tUZWFtLCBDb25maWcudGhyZWFkTnVtKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHRhc2tUZWFtQ2h1bmsgPSBbdGFza1RlYW1dO1xcbiAgICB9XFxuICAgIGZvciAobGV0IHRhc2tMaXN0IG9mIHRhc2tUZWFtQ2h1bmspIHtcXG4gICAgICAgIGJlKHRhc2tMaXN0LCB7XFxuICAgICAgICAgICAgZnVuYzogbGlzdGVuZXJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiMFxcXCIpO1xcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gXFxcIjFcXFwiKSB7XFxuICAgICAgICAgICAgbGV0IGJhdGNoVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBnZXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjBcXFwiKTtcXG4gICAgICAgICAgICBsZXQgZmFpbFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHYgPT4gIXN1Y2Nlc3NDSUQuaW5jbHVkZXModikpO1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBKU09OLnN0cmluZ2lmeShmYWlsVGVhbSkpO1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiNFxcXCIpO1xcbiAgICAgICAgICAgIHB1dExvZyhcXFwiW2xpc3RlbmVyXSPlt7LlgZzmraLmiYDmnInku7vliqHvvIzkvYblt7LmnInov5vluqbkuI3kvJrmtojlpLEjXFxcIik7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwiW+mHjeaWsOW8gOWni11cXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgIH1cXG5cXG4gICAgfVxcblxcbiAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbn07XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjZmcu5om56YeP5Li756iL5bqPXCIsXCJwYXRoXCI6XCJCYXRjaC5leGUuanNcIixcInJ1bGVcIjpcImNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXCIpO1xcblxcbmZ1bmN0aW9uIGNvbWljKHRhc2tQYXJhbSkge1xcbiAgICBsZXQge1xcbiAgICAgICAgY2hhcHRlckl0ZW0sXFxuICAgICAgICBpbmZvLFxcbiAgICAgICAgTVlfSUQsXFxuICAgIH0gPSB0YXNrUGFyYW07XFxuICAgIGlmIChnZXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIlxcXCIpID09PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgIHJldHVybiAtMTtcXG4gICAgfVxcbiAgICBsZXQgbWFpblBhdGggPSBDb25maWcuY29taWNQYXRoICsgXFxcIi9cXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXCIvXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFwiL1xcXCI7XFxuICAgIGxldCBjaGFwdGVyUGF0aCA9IG1haW5QYXRoICsgY2hhcHRlckl0ZW0uQ0lEICsgXFxcIiRCJFxcXCIgKyBjaGFwdGVySXRlbS50aXRsZSArIFxcXCIvXFxcIjtcXG4gICAgbGV0IHBpY0xpc3Q7XFxuICAgIHRyeSB7XFxuICAgICAgICBsZXQgZ2V0UGljTGlzdCA9IG5ldyBGdW5jdGlvbihcXFwiaW5wdXRcXFwiLCBcXFwidXJsXFxcIiwgXFxcInJldHVybiBcXFwiICsgaW5mby5wYXJzZUNvZGUpO1xcbiAgICAgICAgcGljTGlzdCA9IGdldFBpY0xpc3QoY2hhcHRlckl0ZW0udXJsLCBjaGFwdGVySXRlbS51cmwpO1xcbiAgICAgICAgaWYgKHR5cGVvZiBwaWNMaXN0ID09PSBcXFwic3RyaW5nXFxcIikge1xcbiAgICAgICAgICAgIHBpY0xpc3QgPSBwaWNMaXN0LnJlcGxhY2UoXFxcInBpY3M6Ly9cXFwiLCBcXFwiXFxcIikuc3BsaXQoXFxcIiYmXFxcIik7XFxuICAgICAgICB9XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGUubWVzc2FnZSA9IFxcXCI85ryr55S75Zu+54mH6Kej5p6Q6ZSZ6K+v77yaXFxcIiArIGUubWVzc2FnZSArIFxcXCI+XFxcIjtcXG4gICAgICAgIHRocm93IGU7XFxuICAgIH1cXG4gICAgY29uc3QgTCA9IHBpY0xpc3QubGVuZ3RoO1xcbiAgICBpZihMPT09MCl7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcIjzmvKvnlLvlm77niYfop6PmnpDplJnor6/vvJrlm77niYfpk77mjqXov5Tlm57kuLrnqbo+XFxcIik7XFxuICAgIH1cXG4gICAgaWYgKGluZm8uYm9va1RvcFBpYykge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBsZXQgYm9va1RvcFBpYyA9IFRvb2wuaGlrZXJQaWMoaW5mby5ib29rVG9wUGljKTtcXG4gICAgICAgICAgICByZXF1aXJlRG93bmxvYWQoYm9va1RvcFBpY1swXSwgbWFpblBhdGggKyBpbmZvLmJvb2tOYW1lICsgXFxcIi5qcGdcXFwiLCBib29rVG9wUGljWzFdKTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coXFxcIjzlsIHpnaLkuIvovb3plJnor6/vvJpcXFwiICsgZS5tZXNzYWdlICsgXFxcIj5cXFwiKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICB2YXIgc2NoZWR1bGUgPSBuZXcgTWFwKFtcXG4gICAgICAgIFtMLCAoKSA9PiBsb2coY2hhcHRlckl0ZW0udGl0bGUgKyBcXFwi5bey5LiL6L29MTAwJVxcXCIpXSxcXG4gICAgICAgIFt+figwLjkwICogTCksICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXCLlt7LkuIvovb05MCUrXFxcIildLFxcbiAgICAgICAgW35+KDAuNzUgKiBMKSwgKCkgPT4gbG9nKGNoYXB0ZXJJdGVtLnRpdGxlICsgXFxcIuW3suS4i+i9vTc1JStcXFwiKV0sXFxuICAgICAgICBbfn4oMC41MCAqIEwpLCAoKSA9PiBsb2coY2hhcHRlckl0ZW0udGl0bGUgKyBcXFwi5bey5LiL6L29NTAlK1xcXCIpXSxcXG4gICAgICAgIFt+figwLjI1ICogTCksICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXCLlt7LkuIvovb0yNSUrXFxcIildXFxuICAgIF0pO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKykge1xcbiAgICAgICAgbGV0IHBpYyA9IFRvb2wuaGlrZXJQaWMocGljTGlzdFtpXSk7XFxuICAgICAgICByZXF1aXJlRG93bmxvYWQocGljWzBdLCBjaGFwdGVyUGF0aCArIChpICsgMSkgKyBcXFwiLmpwZ1xcXCIsIHBpY1sxXSk7XFxuICAgICAgICBzY2hlZHVsZS5oYXMoaSArIDEpICYmIHNjaGVkdWxlLmdldChpICsgMSkoKTtcXG4gICAgICAgIGlmIChnZXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIlxcXCIpID09PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgICAgICByZXR1cm4gLTE7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgRmlsZS5yZW5hbWVGaWxlKGNoYXB0ZXJQYXRoLCBjaGFwdGVySXRlbS5DSUQgKyBcXFwiJEEkXFxcIiArIGNoYXB0ZXJJdGVtLnRpdGxlKTtcXG4gICAgcmV0dXJuIGNoYXB0ZXJJdGVtLkNJRDtcXG59XFxuXFxuZnVuY3Rpb24gbm92ZWwodGFza1BhcmFtKSB7XFxuICAgIGxldCB7XFxuICAgICAgICBjaGFwdGVySXRlbSxcXG4gICAgICAgIGluZm8sXFxuICAgICAgICBNWV9JRCxcXG4gICAgfSA9IHRhc2tQYXJhbTtcXG4gICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiXFxcIikgPT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgcmV0dXJuIC0xO1xcbiAgICB9XFxuICAgIGxldCBtYWluUGF0aCA9IENvbmZpZy5ub3ZlbFBhdGggKyBcXFwiL1xcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcIi9cXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCIvXFxcIjtcXG4gICAgbGV0IGNoYXB0ZXJQYXRoID0gbWFpblBhdGggKyBjaGFwdGVySXRlbS5DSUQgKyBcXFwiJEEkXFxcIiArIGNoYXB0ZXJJdGVtLnRpdGxlICsgXFxcIi50eHRcXFwiO1xcbiAgICBsZXQgY29udGVudCA9IFxcXCJcXFwiO1xcbiAgICB0cnkge1xcbiAgICAgICAgbGV0IGdldENvbnRlbnQgPSBuZXcgRnVuY3Rpb24oXFxcImlucHV0XFxcIiwgXFxcInVybFxcXCIsIFxcXCJyZXR1cm4gXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXG4gICAgICAgIGNvbnRlbnQgPSBnZXRDb250ZW50KGNoYXB0ZXJJdGVtLnVybCwgY2hhcHRlckl0ZW0udXJsKTtcXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgZS5tZXNzYWdlID0gXFxcIjzlsI/or7TmraPmlofop6PmnpDplJnor6/vvJpcXFwiICsgZS5tZXNzYWdlICsgXFxcIj5cXFwiO1xcbiAgICAgICAgdGhyb3cgZTtcXG4gICAgfVxcbiAgICBpZiAoIWNvbnRlbnQpIHtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiPOWwj+ivtOato+aWh+ino+aekOmUmeivr++8muato+aWh+i/lOWbnuS4uuepuj5cXFwiKTtcXG4gICAgfVxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcbiAgICAgICAgICAgIHJlcXVpcmVEb3dubG9hZChib29rVG9wUGljWzBdLCBtYWluUGF0aCArIGluZm8uYm9va05hbWUgKyBcXFwiLmpwZ1xcXCIsIGJvb2tUb3BQaWNbMV0pO1xcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhcXFwiPOWwgemdouS4i+i9vemUmeivr++8mlxcXCIgKyBlLm1lc3NhZ2UgKyBcXFwiPlxcXCIpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIEZpbGUuZmlsZVdyaXRlKGNoYXB0ZXJQYXRoLCBjb250ZW50LnJlcGxhY2UoLzxzY3JpcHQ+Lio/PFxcXFwvc2NyaXB0Pi9nbWksIFxcXCJcXFwiKS50cmltUmlnaHQoKSk7XFxuICAgIC8vRmlsZS5yZW5hbWVGaWxlKGNoYXB0ZXJQYXRoLCBjaGFwdGVySXRlbS5DSUQgKyBcXFwiJEEkXFxcIiArIGNoYXB0ZXJJdGVtLnRpdGxlKTtcXG4gICAgcmV0dXJuIGNoYXB0ZXJJdGVtLkNJRDtcXG59XFxudmFyICRleGUgPSB7XFxuICAgIGNvbWljOiBjb21pYyxcXG4gICAgbm92ZWw6IG5vdmVsXFxufTtcXG4kLmV4cG9ydHMgPSBmdW5jdGlvbih0YXNrUGFyYW0pIHtcXG4gICAgcmV0dXJuICRleGVbdGFza1BhcmFtLmluZm8udHlwZV0odGFza1BhcmFtKTtcXG59O1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI2ZnLuaZrumAmuS4u+eoi+W6j1wiLFwicGF0aFwiOlwiRG93bmxvYWQuZXhlLmpzXCIsXCJydWxlXCI6XCJjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFwiKTtcXG5cXG5mdW5jdGlvbiBub3ZlbChpdGVtLCBpbmZvLCBNWV9JRCwgb3JkZXIpIHtcXG4gICAgbGV0IG1haW5QYXRoID0gQ29uZmlnLm5vdmVsUGF0aCArIFxcXCIvXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFwiL1xcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcIi9cXFwiO1xcbiAgICBsZXQgY2hhcHRlclBhdGggPSBtYWluUGF0aCArIG9yZGVyICsgXFxcIiRBJFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIi50eHRcXFwiO1xcbiAgICBsZXQgY29udGVudCA9IFxcXCJcXFwiO1xcbiAgICB0cnkge1xcbiAgICAgICAgbGV0IGdldENvbnRlbnQgPSBuZXcgRnVuY3Rpb24oXFxcImlucHV0XFxcIiwgXFxcInVybFxcXCIsIFxcXCJyZXR1cm4gXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXG4gICAgICAgIGNvbnRlbnQgPSBnZXRDb250ZW50KGl0ZW0udXJsLCBpdGVtLnVybCkgfHwgXFxcIlxcXCI7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGUubWVzc2FnZSA9IFxcXCI85bCP6K+05q2j5paH6Kej5p6Q6ZSZ6K+vPiBcXFwiICsgZS5tZXNzYWdlO1xcbiAgICAgICAgdGhyb3cgZTtcXG4gICAgfVxcbiAgICBpZiAoIWNvbnRlbnQpIHtcXG4gICAgICAgIHRvYXN0KFxcXCLlsI/or7TkuLrnqbpcXFwiKTtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiPOWwj+ivtOato+aWh+ino+aekOmUmeivr++8muato+aWh+i/lOWbnuS4uuepuj5cXFwiKTtcXG4gICAgfVxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcbiAgICAgICAgICAgIHJlcXVpcmVEb3dubG9hZChib29rVG9wUGljWzBdLCBtYWluUGF0aCArIGluZm8uYm9va05hbWUgKyBcXFwiLmpwZ1xcXCIsIGJvb2tUb3BQaWNbMV0pO1xcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcIiArIGUubWVzc2FnZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgRmlsZS5maWxlV3JpdGUoY2hhcHRlclBhdGgsIGNvbnRlbnQucmVwbGFjZSgvPHNjcmlwdD4uKj88XFxcXC9zY3JpcHQ+L2dtaSwgXFxcIlxcXCIpLnRyaW1SaWdodCgpKTtcXG4gICAgLy9GaWxlLnJlbmFtZUZpbGUoY2hhcHRlclBhdGgsIG9yZGVyICsgXFxcIiRBJFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIi50eHRcXFwiKTtcXG4gICAgcmV0dXJuIFxcXCJ0b2FzdDovL1xcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcIkBcXFwiICsgaXRlbS50aXRsZSArIFxcXCIg5LiL6L295a6M5oiQXFxcIjtcXG59XFxuXFxuZnVuY3Rpb24gY29taWMoaXRlbSwgaW5mbywgTVlfSUQsIG9yZGVyKSB7XFxuICAgIGxldCBtYWluUGF0aCA9IENvbmZpZy5jb21pY1BhdGggKyBcXFwiL1xcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcIi9cXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCIvXFxcIjtcXG4gICAgbGV0IGNoYXB0ZXJQYXRoID0gbWFpblBhdGggKyBvcmRlciArIFxcXCIkQiRcXFwiICsgaXRlbS50aXRsZSArIFxcXCIvXFxcIjtcXG4gICAgbGV0IHBpY0xpc3QgPSBbXTtcXG4gICAgdHJ5IHtcXG4gICAgICAgIGxldCBnZXRQaWNMaXN0ID0gbmV3IEZ1bmN0aW9uKFxcXCJpbnB1dFxcXCIsIFxcXCJyZXR1cm5cXFwiICsgaW5mby5wYXJzZUNvZGUpO1xcbiAgICAgICAgcGljTGlzdCA9IGdldFBpY0xpc3QoaXRlbS51cmwpO1xcbiAgICAgICAgaWYgKHR5cGVvZiBwaWNMaXN0ID09PSBcXFwic3RyaW5nXFxcIikge1xcbiAgICAgICAgICAgIHBpY0xpc3QgPSBwaWNMaXN0LnJlcGxhY2UoXFxcInBpY3M6Ly9cXFwiLCBcXFwiXFxcIikuc3BsaXQoXFxcIiYmXFxcIik7XFxuICAgICAgICB9XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGUubWVzc2FnZSA9IFxcXCI85ryr55S75Zu+54mH6Kej5p6Q6ZSZ6K+vPiBcXFwiICsgZS5tZXNzYWdlO1xcbiAgICAgICAgdGhyb3cgZTtcXG4gICAgfVxcblxcbiAgICBjb25zdCBMID0gcGljTGlzdC5sZW5ndGg7XFxuICAgIGlmKEw9PT0wKXtcXG4gICAgICAgIHRvYXN0KFxcXCLlm77niYfpk77mjqXkuLrnqbpcXFwiKTtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiPOa8q+eUu+WbvueJh+ino+aekOmUmeivr++8muWbvueJh+mTvuaOpei/lOWbnuS4uuepuj5cXFwiKTtcXG4gICAgfVxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcbiAgICAgICAgICAgIHJlcXVpcmVEb3dubG9hZChib29rVG9wUGljWzBdLCBtYWluUGF0aCArIGluZm8uYm9va05hbWUgKyBcXFwiLmpwZ1xcXCIsIGJvb2tUb3BQaWNbMV0pO1xcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcIiArIGUubWVzc2FnZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgdmFyIHNjaGVkdWxlID0gbmV3IE1hcChbXFxuICAgICAgICBbTCwgKCkgPT4gbG9nKGl0ZW0udGl0bGUgKyBcXFwi5bey5LiL6L29MTAwJVxcXCIpXSxcXG4gICAgICAgIFt+figwLjkwICogTCksICgpID0+IGxvZyhpdGVtLnRpdGxlICsgXFxcIuW3suS4i+i9vTkwJStcXFwiKV0sXFxuICAgICAgICBbfn4oMC43NSAqIEwpLCAoKSA9PiBsb2coaXRlbS50aXRsZSArIFxcXCLlt7LkuIvovb03NSUrXFxcIildLFxcbiAgICAgICAgW35+KDAuNTAgKiBMKSwgKCkgPT4gbG9nKGl0ZW0udGl0bGUgKyBcXFwi5bey5LiL6L29NTAlK1xcXCIpXSxcXG4gICAgICAgIFt+figwLjI1ICogTCksICgpID0+IGxvZyhpdGVtLnRpdGxlICsgXFxcIuW3suS4i+i9vTI1JStcXFwiKV1cXG4gICAgXSk7XFxuXFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKSB7XFxuICAgICAgICBsZXQgcGljID0gVG9vbC5oaWtlclBpYyhwaWNMaXN0W2ldKTtcXG4gICAgICAgIHJlcXVpcmVEb3dubG9hZChwaWNbMF0sIGNoYXB0ZXJQYXRoICsgKGkgKyAxKSArIFxcXCIuanBnXFxcIiwgcGljWzFdKTtcXG4gICAgICAgIHNjaGVkdWxlLmhhcyhpICsgMSkgJiYgc2NoZWR1bGUuZ2V0KGkgKyAxKSgpO1xcbiAgICB9XFxuXFxuICAgIEZpbGUucmVuYW1lRmlsZShjaGFwdGVyUGF0aCwgb3JkZXIgKyBcXFwiJEEkXFxcIiArIGl0ZW0udGl0bGUpO1xcbiAgICByZXR1cm4gXFxcInRvYXN0Oi8vXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFwiQFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIiDkuIvovb3lrozmiJBcXFwiO1xcbn1cXG52YXIgJGV4ZSA9IHtcXG4gICAgY29taWM6IGNvbWljLFxcbiAgICBub3ZlbDogbm92ZWxcXG59O1xcbiQuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZW0sIGluZm8sIE1ZX0lELCBvcmRlcikge1xcbiAgICByZXR1cm4gJGV4ZVtpbmZvLnR5cGVdKGl0ZW0sIGluZm8sIE1ZX0lELCBvcmRlcik7XFxufTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiNmLumAmueUqOW3peWFt1wiLFwicGF0aFwiOlwiVG9vbC5qc1wiLFwicnVsZVwiOlwiJC5leHBvcnRzID0ge1xcbiAgICBzcGxpdCh0ZXh0LCB0YXJnZXQsIGNvdW50KSB7XFxuICAgICAgICBjb3VudCA9IGNvdW50ID09PSB1bmRlZmluZWQgPyAxIDogY291bnQ7XFxuICAgICAgICBsZXQgYXJyYXkgPSBbdGV4dF07XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcXG4gICAgICAgICAgICB0ZXh0ID0gYXJyYXlbaV07XFxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGV4dC5pbmRleE9mKHRhcmdldCk7XFxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgYXJyYXlbaV0gPSB0ZXh0LnNsaWNlKDAsIGluZGV4KTtcXG4gICAgICAgICAgICBhcnJheVtpICsgMV0gPSB0ZXh0LnNsaWNlKGluZGV4ICsgdGFyZ2V0Lmxlbmd0aCk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gYXJyYXk7XFxuICAgIH0sXFxuICAgIGNodW5rKGFyciwgc2l6ZSkge1xcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkgKz0gc2l6ZSkge1xcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFyci5zbGljZShpLCBpICsgc2l6ZSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfSxcXG4gICAgaGlrZXJQaWModXJsKSB7XFxuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xcbiAgICAgICAgbGV0IHVybHMgPSB1cmwuc3BsaXQoXFxcIkBcXFwiKTtcXG4gICAgICAgIGxldCBwaWNVcmwgPSB1cmxzLnNoaWZ0KCk7XFxuICAgICAgICBsZXQgbGVuZ3RoID0gdXJscy5sZW5ndGg7XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IHVybHNbaV0uc3BsaXQoXFxcIj1cXFwiKTtcXG4gICAgICAgICAgICBoZWFkZXJzW2tleV0gPSB2YWx1ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBbcGljVXJsLCBoZWFkZXJzXTtcXG4gICAgfSxcXG4gICAgcmFuZ2Uoc3RhcnQsIGVuZCkge1xcbiAgICAgICAgcmV0dXJuIEFycmF5KGVuZCAtIHN0YXJ0KS5maWxsKDApLm1hcCgoZWwsIGkpID0+IHN0YXJ0ICsgaSk7XFxuICAgIH1cXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjai5Db25maWdcIixcInBhdGhcIjpcIkNvbmZpZy5qc29uXCIsXCJydWxlXCI6XCJqczpcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qcz9ydWxlPeacrOWcsOi1hOa6kOeuoeeQhlxcXCIpO1xcblxcbmxldCBsb2NhbENvbmZpZyA9IHt9O1xcblxcbnRyeSB7XFxuICAgIGxvY2FsQ29uZmlnID0gSlNPTi5wYXJzZShGaWxlLnJlYWRGaWxlKGdldFBhdGgoXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvZmlsZXMv5pys5Zyw6LWE5rqQ566h55CGL2NvbmZpZy5qc29uXFxcIikuc2xpY2UoNykpKTtcXG59IGNhdGNoIChlKSB7XFxuICAgIGRlbGV0ZUZpbGUoXFxcImNvbmZpZy5qc29uXFxcIik7XFxufVxcbmNvbnN0IENvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xcbiAgICBob21lUGF0aDogZ2V0UGF0aChcXFwiaGlrZXI6Ly9maWxlcy9sb2NhbE1hbmFnZXJcXFwiKS5zbGljZSg3KSxcXG4gICAgbG9nTnVtOiAxMCxcXG4gICAgdGhyZWFkTnVtOiAxNixcXG4gICAgZGVmX2lzUGFnaW5hdGU6IFxcXCIxXFxcIiwgLy8x6buY6K6k5byA5ZCv5YiG6aG177yMMOm7mOiupOWFs+mXrVxcbiAgICB2aWV3UGFnZVNpemU6IDIwMCxcXG4gICAgZGVmX1BpYzogXFxcImhpa2VyOi8vaW1hZ2VzL2hvbWVfcGljNFxcXCIsXFxuICAgIGRlZl9Mb3JkX1R5cGU6IFxcXCJjb21pY1xcXCIsXFxuICAgIGRlZl9WaWV3X1N0eWxlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgZGVmX0RvVmlfU3R5bGU6IFxcXCJ0ZXh0XzJcXFwiLFxcbiAgICBkZWZfRG9WaV9UeXBlOiBcXFwiMVxcXCIsIC8vMOWFqOmDqCwgMeacquWujOaIkO+8jDLlt7LlrozmiJBcXG59LCBsb2NhbENvbmZpZyk7XFxuY29uc3QgUEFUSFMgPSB7XFxuICAgIG5vdmVsUGF0aDogXFxcIi/lsI/or7QvXFxcIixcXG4gICAgY29taWNQYXRoOiBcXFwiL+a8q+eUuy9cXFwiLFxcbiAgICBub3ZlbEZ1bGxQYXRoOiBcXFwiL+Wwj+ivtOWQiOW5ti9cXFwiLFxcbiAgICBleHRlcm5hbEltcG9ydFBhdGg6IFxcXCIv5aSW5a+85bCP6K+0L1xcXCJcXG59XFxuXFxuXFxuT2JqZWN0LmtleXMoUEFUSFMpLmZvckVhY2goa2V5ID0+IENvbmZpZ1trZXldID0gQ29uZmlnLmhvbWVQYXRoICsgUEFUSFNba2V5XSk7XFxuJC5leHBvcnRzID0gQ29uZmlnO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3Yu5Li76aG16Z2iXCIsXCJwYXRoXCI6XCJNYWluLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmZ1bmN0aW9uIG1haW4oKSB7XFxuICAgIHZhciBsYXlvdXQgPSBbXTtcXG4gICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG4gICAgbGV0IHR5cGUgPSBnZXRNeVZhcihcXFwiLnR5cGVcXFwiLCBnZXRJdGVtKFxcXCJtYWluOnR5cGVcXFwiKSB8fCBDb25maWcuZGVmX0xvcmRfVHlwZSk7XFxuICAgIGxldCB0Z251bSA9IGdldE15VmFyKFxcXCIudGdudW1cXFwiLCBcXFwiMFxcXCIpO1xcbiAgICBhZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKE1ZX0lEKSA9PiB7XFxuICAgICAgICBjbGVhck15VmFyKFxcXCJzZWFyY2hLZXlcXFwiKTtcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcIi50Z251bVxcXCIpO1xcbiAgICB9KSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiB0eXBlID09PSBcXFwiY29taWNcXFwiID8gXFxcIuKXiea8q+eUu1xcXCIgOiBcXFwi4peL5ryr55S7XFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgodHlwZSkgPT4ge1xcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwiY29taWNcXFwiKSByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCIudHlwZVxcXCIsIFxcXCJjb21pY1xcXCIpO1xcbiAgICAgICAgICAgIHNldEl0ZW0oXFxcIm1haW46dHlwZVxcXCIsIFxcXCJjb21pY1xcXCIpO1xcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcIi50Z251bVxcXCIpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgdHlwZSksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfM1xcXCIsXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogdHlwZSA9PT0gXFxcIm5vdmVsXFxcIiA/IFxcXCLil4nlsI/or7RcXFwiIDogXFxcIuKXi+Wwj+ivtFxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHR5cGUpID0+IHtcXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcIm5vdmVsXFxcIikgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiLnR5cGVcXFwiLCBcXFwibm92ZWxcXFwiKTtcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXCJtYWluOnR5cGVcXFwiLCBcXFwibm92ZWxcXFwiKTtcXG4gICAgICAgICAgICBjbGVhck15VmFyKFxcXCIudGdudW1cXFwiKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgIH0sIHR5cGUpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzNcXFwiLFxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXCJ0eHRcXFwiID8gXFxcIuKXiVRYVFxcXCIgOiBcXFwi4peLVFhUXFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgodHlwZSkgPT4ge1xcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFwidHh0XFxcIikgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxDb2xsZWN0ZWQudmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcXFwiO1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCIudHlwZVxcXCIsIFxcXCJ0eHRcXFwiKTtcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXCJtYWluOnR5cGVcXFwiLCBcXFwidHh0XFxcIik7XFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFwiLnRnbnVtXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCB0eXBlKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIlxcbiAgICB9KTtcXG4gICAgaWYgKHR5cGUgPT09IFxcXCJ0eHRcXFwiKSB7XFxuICAgICAgICB0eHRWaWV3ID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvZXh0ZXJuYWxpbXBvcnRUeHQudmlld1xcXCIpO1xcbiAgICAgICAgcmV0dXJuIHR4dFZpZXcobGF5b3V0KTtcXG4gICAgfVxcbiAgICBsZXQgdGFnID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbdHlwZSArIFxcXCJQYXRoXFxcIl0sIFxcXCJkaXJcXFwiKTtcXG4gICAgaWYgKHRhZy5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiLFxcbiAgICAgICAgfSk7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLorr7nva5cXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9TZXR0aW5nLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICB2ZXJzaW9uOiBNWV9SVUxFLnZlcnNpb25cXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOW4ruWKqeKAneKAnVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2hlbHAudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5Iz9rZXl3b3JkPW5vdmVsQ29taWNcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICc8aDEgc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFwiPuWVpemDveayoeacieiAtjwvaDE+JyxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHNldFJlc3VsdChsYXlvdXQpO1xcbiAgICB9XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHVybDogJ1xcXCJoaWtlcjovL3NlYXJjaD9zPVxcXCIraW5wdXQnLFxcbiAgICAgICAgZGVzYzogXFxcIuaQnOS9oOaDs+imgeeahCNcXFwiICsgdHlwZSArIFxcXCIjLi4uLi4uXFxcIixcXG4gICAgICAgIHRpdGxlOiBcXFwi8J+UjVxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgcnVsZXM6ICQudG9TdHJpbmcoKHRhZywgdHlwZSkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgYXJyMSA9IFtdO1xcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRhZy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgICAgICAgICAgICAgYXJyMS5wdXNoKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwidGl0bGVcXFwiOiB0YWdbaV0ubmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwic2VhcmNoX3VybFxcXCI6IFxcXCJoaWtlcjovL2VtcHR5P2lzQWxsPTEmc2VhcmNoVGVybXM9KiomdHlwZT1cXFwiICsgdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwic2VhcmNoRmluZFxcXCI6IFxcXCJqczokLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9TZWFyY2gudmlldz9ydWxlPScrTVlfUlVMRS5fdGl0bGUpO1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcnIxKTtcXG4gICAgICAgICAgICB9LCB0YWcsIHR5cGUpLFxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoJ3NlYXJjaEtleScsICcnKSxcXG4gICAgICAgICAgICBvbkNoYW5nZTogXFxcInB1dE15VmFyKCdzZWFyY2hLZXknLGlucHV0KVxcXCJcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuXFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi4oCY4oCY4pqZ6K6+572u4oCZ4oCZXFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCIsXFxuICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgdmVyc2lvbjogTVlfUlVMRS52ZXJzaW9uXFxuICAgICAgICB9XFxuICAgIH0pO1xcblxcblxcbiAgICBmb3IgKGxldCBpIGluIHRhZykge1xcbiAgICAgICAgbGV0IGl0ID0gdGFnW2ldO1xcbiAgICAgICAgaWYgKHRnbnVtID09PSBpKSB7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnFxcXCIgKyBpdC5uYW1lICsgXFxcIuKAneKAnVxcXCIsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogJChbXFxcIuWIoOmZpOivpeebruW9lVxcXCIsIFxcXCLot7PovazlsI/nqIvluo9cXFwiXSwgMSwgXFxcIumAieaLqeaTjeS9nFxcXCIpLnNlbGVjdCgoaXQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChcXFwi6Lez6L2s5bCP56iL5bqPXFxcIiA9PT0gaW5wdXQpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vaG9tZUBcXFwiICsgaXQubmFtZTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZXR1cm4gdGhlbihbXFxcIuivpeaTjeS9nOS4jeS8muWIoOmZpOWwj+eoi+W6j++8jOS9huivpeWwj+eoi+W6j+S4i+i9veeahOaJgOaciea8q+eUu+Wwhuiiq+WIoOmZpFxcXCJdKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwi6K+l5pON5L2c5LiN5Lya5Yig6Zmk5bCP56iL5bqP77yM5L2G6K+l5bCP56iL5bqP5LiL6L2955qE5omA5pyJIOa8q+eUuy/lsI/or7Qg5bCG6KKr5Yig6ZmkXFxcIikuY29uZmlybSgocGF0aCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcihcXFwiLnRnbnVtXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGl0LnBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9LCBpdClcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogaXQubmFtZSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKGkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi50Z251bVxcXCIsIGkpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIGkpLFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGxldCBwYXRoID0gdGFnW3RnbnVtXS5wYXRoO1xcbiAgICBsZXQgbWhsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChwYXRoLCBcXFwiZGlyXFxcIik7XFxuXFxuICAgIGlmIChtaGxpc3QubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIuWVpemDveayoeacieiAtlxcXCIuYmlnKCksXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBzZXRSZXN1bHQobGF5b3V0KTtcXG4gICAgfVxcbiAgICBsZXQgcGFnZVVybCA9IHR5cGUgPT09IFxcXCJub3ZlbFxcXCIgPyBcXFwiaGlrZXI6Ly9wYWdlL05vdmVsQnJvd3Nlci52aWV3XFxcIiA6IFxcXCJoaWtlcjovL3BhZ2UvQ29taWNCcm93c2VyLnZpZXdcXFwiO1xcbiAgICBmb3IgKGxldCBpdGVtIG9mIG1obGlzdCkge1xcbiAgICAgICAgbGV0IHBpYyA9IGZpbGVFeGlzdChcXFwiZmlsZTovL1xcXCIgKyBpdGVtLnBhdGggKyBcXFwiL1xcXCIgKyBpdGVtLm5hbWUgKyBcXFwiLmpwZ1xcXCIpID8gaXRlbS5wYXRoICsgXFxcIi9cXFwiICsgaXRlbS5uYW1lICsgXFxcIi5qcGdcXFwiIDogQ29uZmlnLmRlZl9QaWM7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0ubmFtZSxcXG4gICAgICAgICAgICBwaWNfdXJsOiBwaWMsXFxuICAgICAgICAgICAgdXJsOiBwYWdlVXJsICsgXFxcIj9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlLFxcbiAgICAgICAgICAgIGV4dHJhOiBpdGVtXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBzZXRSZXN1bHQobGF5b3V0KTtcXG59XFxuXFxubWFpbigpO1wifSx7XCJjb2xfdHlwZVwiOlwidGV4dF8xXCIsXCJuYW1lXCI6XCIjdi7mvKvnlLvnq6DoioLliJfooahcIixcInBhdGhcIjpcIkNvbWljQnJvd3Nlci52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5pZiAoZ2V0UGFyYW0oXFxcImhhc1BhcmFtc1xcXCIpID09PSBcXFwidHJ1ZVxcXCIpIHtcXG4gICAgTVlfUEFSQU1TID0ge1xcbiAgICAgICAgcGF0aDogZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJwYXRoXFxcIikpLFxcbiAgICAgICAgbmFtZTogZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJuYW1lXFxcIikpXFxuICAgIH1cXG59XFxubGV0IHBhdGggPSBNWV9QQVJBTVMucGF0aDtcXG5zZXRQYWdlVGl0bGUoXFxcIkNWfFxcXCIgKyBNWV9QQVJBTVMubmFtZSlcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbmNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5cXG52YXIgbGF5b3V0ID0gW107XFxubGV0IG1vZGUgPSBnZXRNeVZhcihcXFwiLm1vZGVcXFwiLCBcXFwiMFxcXCIpO1xcbmxldCBpc1JldmVyc2UgPSBnZXRNeVZhcihcXFwiLmlzUmV2ZXJzZVxcXCIsIFxcXCIwXFxcIik7XFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgY2xlYXJNeVZhcihcXFwiLm1vZGVcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLmlzUmV2ZXJzZVxcXCIpO1xcbn0pKTtcXG5jb25zdCBjb21pY1N0YXR1cz1uZXcgTWFwKFtbXFxcIkFcXFwiLFxcXCJcXFwiXSxbXFxcIkJcXFwiLFxcXCLigJjigJhb5pyq5a6M5oiQXeKAmeKAmVxcXCJdXSk7XFxuZnVuY3Rpb24gZ2V0VGl0bGUodGl0bGUpIHtcXG4gICAgbGV0IHRpdGxlcyA9IFRvb2wuc3BsaXQodGl0bGUsIFxcXCIkXFxcIiwgMik7XFxuICAgIHJldHVybiBjb21pY1N0YXR1cy5nZXQodGl0bGVzWzFdKSt0aXRsZXNbMl0gfHwgdGl0bGU7XFxufVxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLliKDpmaTmlbTmnKxcXFwiLFxcbiAgICB1cmw6ICQoXFxcIuehruiupOWIoOmZpOaVtOacrOa8q+eUu++8n1xcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXG4gICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcbiAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcIjtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXCI7XFxuICAgICAgICB9XFxuICAgIH0sIHBhdGgpLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBbXFxcIueci+a8q+eUu1xcXCIsIFxcXCLliKDpmaTnq6DoioJcXFwiXVttb2RlXSxcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChtb2RlKSA9PiB7XFxuICAgICAgICBwdXRNeVZhcihcXFwiLm1vZGVcXFwiLCBtb2RlID09PSBcXFwiMFxcXCIgPyBcXFwiMVxcXCIgOiBcXFwiMFxcXCIpO1xcbiAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuICAgIH0sIG1vZGUpLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG59KVxcbmxldCBtaGxpc3QgPSBGaWxlLmdldEZpbGVQYXRoKHBhdGgsIFxcXCJkaXJcXFwiKTtcXG5taGxpc3Quc29ydCgoYSwgYikgPT4ge1xcbiAgICBhID0gKGEubmFtZS5tYXRjaCgvXFxcXGQrLykgfHwgW10pWzBdIHx8IDA7XFxuICAgIGIgPSAoYi5uYW1lLm1hdGNoKC9cXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXG4gICAgcmV0dXJuIGEgLSBiO1xcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIueroOiKgiBcXFwiLmJpZygpICsgKFxcXCLlhbHmnIk6XFxcIiArIG1obGlzdC5sZW5ndGggKyBcXFwi56ugXFxcIikuc21hbGwoKSxcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChpc1JldmVyc2UpID0+IHtcXG4gICAgICAgIHB1dE15VmFyKFxcXCIuaXNSZXZlcnNlXFxcIiwgaXNSZXZlcnNlID09PSBcXFwiMFxcXCIgPyBcXFwiMVxcXCIgOiBcXFwiMFxcXCIpO1xcbiAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuICAgIH0sIGlzUmV2ZXJzZSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxldCBhcnJheSA9IFtdO1xcbmxldCBsYXp5ID0gJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgIGxldCBmaWxlbGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgoaW5wdXQpO1xcbiAgICBsZXQgcGljbGlzdCA9IGZpbGVsaXN0Lm1hcCgoaXRlbSwgaSkgPT4gXFxcImZpbGU6Ly9cXFwiICsgaW5wdXQgKyBcXFwiL1xcXCIgKyAoaSArIDEpICsgXFxcIi5qcGdcXFwiKTtcXG4gICAgcmV0dXJuIFxcXCJwaWNzOi8vXFxcIiArIHBpY2xpc3Quam9pbihcXFwiJiZcXFwiKTtcXG59KVxcbmlmIChtb2RlID09PSBcXFwiMFxcXCIpIHtcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBtaGxpc3QpIHtcXG4gICAgICAgIGFycmF5LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBnZXRUaXRsZShpdGVtLm5hbWUpLFxcbiAgICAgICAgICAgIHVybDogaXRlbS5wYXRoK2xhenksXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59IGVsc2Uge1xcbiAgICBmb3IgKGxldCBpdGVtIG9mIG1obGlzdCkge1xcbiAgICAgICAgbGV0IG5hbWUgPSBnZXRUaXRsZShpdGVtLm5hbWUpO1xcbiAgICAgICAgYXJyYXkucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCLnoa7orqTliKDpmaRbXFxcIiArIG5hbWUgKyBcXFwiXe+8n1xcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXG4gICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sIGl0ZW0ucGF0aCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcIjFcXFwiKSB7XFxuICAgIGFycmF5LnJldmVyc2UoKTtcXG59XFxubGF5b3V0LnB1c2guYXBwbHkobGF5b3V0LCBhcnJheSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7ogZrlkIjmkJzntKJcIixcInBhdGhcIjpcIlNlYXJjaC52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qcz9ydWxlPVxcXCIgKyBNWV9SVUxFLl90aXRsZSk7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb24/cnVsZT1cXFwiICsgTVlfUlVMRS5fdGl0bGUpO1xcbmxldCBjb21pY1J1bGVEaXJzID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbZ2V0UGFyYW0oXFxcInR5cGVcXFwiKSArIFxcXCJQYXRoXFxcIl0sIFxcXCJkaXJcXFwiKTtcXG5pZiAoZ2V0UGFyYW0oXFxcImlzQWxsXFxcIikgPT09IFxcXCIxXFxcIikge1xcbiAgICBjb21pY1J1bGVEaXJzID0gY29taWNSdWxlRGlycy5maWx0ZXIoaXRlbSA9PiBpdGVtLm5hbWUgPT09IE1ZX1JVTEUudGl0bGUpO1xcbn1cXG5cXG5sZXQgc2VhcmNoUmVzdWx0ID0gW107XFxubGV0IHNlYXJjaFRlcm1zID0gZ2V0UGFyYW0oXFxcInNlYXJjaFRlcm1zXFxcIik7XFxubGV0IHRlcm1zQXJyID0gc2VhcmNoVGVybXMuc3BsaXQoXFxcIlxcXCIpLm1hcCh0ID0+IHQucmVwbGFjZSgvXFxcXCp8XFxcXC58XFxcXD98XFxcXCt8XFxcXCR8XFxcXF58XFxcXFt8XFxcXF18XFxcXCh8XFxcXCl8XFxcXHt8XFxcXH18XFxcXHx8XFxcXC98XFxcXFxcXFwvZywgayA9PiBcXFwiXFxcXFxcXFxcXFwiICsgaykpO1xcbmxldCByZWcgPSBuZXcgUmVnRXhwKHRlcm1zQXJyLmpvaW4oXFxcIi4qXFxcIiksIFxcXCJpXFxcIik7XFxubGV0IHBhZ2VVcmwgPSBnZXRQYXJhbShcXFwidHlwZVxcXCIpID09PSBcXFwibm92ZWxcXFwiID8gXFxcImhpa2VyOi8vcGFnZS9Ob3ZlbEJyb3dzZXIudmlld1xcXCIgOiBcXFwiaGlrZXI6Ly9wYWdlL0NvbWljQnJvd3Nlci52aWV3XFxcIjtcXG5mb3IgKGxldCBzb25EaXIgb2YgY29taWNSdWxlRGlycykge1xcbiAgICBsZXQgY29taWNMaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChzb25EaXIucGF0aCwgXFxcImRpclxcXCIpO1xcbiAgICBmb3IgKGxldCBjb21pYyBvZiBjb21pY0xpc3QpIHtcXG4gICAgICAgIGlmIChyZWcudGVzdChjb21pYy5uYW1lKSkge1xcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGNvbWljLm5hbWUsXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IGNvbWljLnBhdGggKyBcXFwiL1xcXCIgKyBjb21pYy5uYW1lICsgXFxcIi5qcGdcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6IHBhZ2VVcmwgKyBcXFwiP3J1bGU9XFxcIiArIE1ZX1JVTEUuX3RpdGxlLFxcbiAgICAgICAgICAgICAgICBkZXNjOiBzb25EaXIubmFtZSxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IGNvbWljXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG59XFxuc2V0UmVzdWx0KHNlYXJjaFJlc3VsdCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7orr7nva5cIixcInBhdGhcIjpcIlNldHRpbmcudmlld1wiLFwicnVsZVwiOlwianM6XFxuc2V0UGFnZVRpdGxlKE1ZX1JVTEUudGl0bGUgKyBcXFwifOiuvue9rlxcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuXFxubGV0IGxheW91dCA9IFtdO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCI8c3Ryb25nPuWfuuehgOiuvue9rjwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLnm67lvZXot6/lvoRcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/c2V0dGluZ1R5cGU9Y29udGVudHNcXFwiLFxcbiAgICBkZXNjOiBDb25maWcuaG9tZVBhdGgsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLorr7nva7pu5jorqTlsIHpnaJcXFwiLFxcbiAgICBkZXNjOiBDb25maWcuZGVmX1BpYyxcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcvTW9yZS52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3NldHRpbmdUeXBlPWRlZmF1bHRQaWNcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgfVxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCI8c3Ryb25nPuS4i+i9veWZqOiuvue9rjwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcblxcbmZ1bmN0aW9uIHNldE51bShrZXksIHRlc3QpIHtcXG4gICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgMCkgfHwgXFxcInt9XFxcIik7XFxuICAgIGlucHV0ID0gcGFyc2VJbnQoaW5wdXQpO1xcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0KSkgcmV0dXJuIFxcXCJ0b2FzdDovL+ivt+i+k+WFpeaVsOWtl1xcXCI7XFxuICAgIGlmICghdGVzdChpbnB1dCkpIHJldHVybiBcXFwidG9hc3Q6Ly/kuI3nrKblkIjmnaHku7ZcXFwiO1xcbiAgICBDb25maWdba2V5XSA9IGlucHV0O1xcbiAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICByZXR1cm4gXFxcInRvYXN0Oi8v5L+u5pS55oiQ5YqfXFxcIjtcXG59XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcImxvZ+aVsFxcXCIsXFxuICAgIHVybDogJChDb25maWcubG9nTnVtLCBcXFwiMDxOPDEwMFxcXCIpLmlucHV0KHNldE51bSwgXFxcImxvZ051bVxcXCIsIGl0ID0+IGl0ID4gMCAmJiBpdCA8IDEwMCksXFxuICAgIGRlc2M6IFxcXCJcXFwiICsgQ29uZmlnLmxvZ051bSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuWIhuaJueS4i+i9veaVsCgw5LiN5byA5ZCvKVxcXCIsXFxuICAgIHVybDogJChcXFwiXFxcIiArIENvbmZpZy50aHJlYWROdW0sIFxcXCJOPi0xXFxcIikuaW5wdXQoc2V0TnVtLCBcXFwidGhyZWFkTnVtXFxcIiwgaXQgPT4gaXQgPiAtMSksXFxuICAgIGRlc2M6IFxcXCJcXFwiICsgQ29uZmlnLnRocmVhZE51bSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcbiAgICB9XFxufSk7XFxuXFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIjxzdHJvbmc+5bCP6K+06ZiF6K+75Zmo6K6+572uPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIum7mOiupOW8gOWQr+WIhumhtemYheivu1xcXCIsXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoZGVmX2lzUGFnaW5hdGUpID0+IHtcXG4gICAgICAgIGxldCBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIDApIHx8IFxcXCJ7fVxcXCIpO1xcblxcbiAgICAgICAgQ29uZmlnLmRlZl9pc1BhZ2luYXRlID0gZGVmX2lzUGFnaW5hdGUgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIjtcXG5cXG4gICAgICAgIHNhdmVGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgfSwgQ29uZmlnLmRlZl9pc1BhZ2luYXRlKSxcXG4gICAgZGVzYzogQ29uZmlnLmRlZl9pc1BhZ2luYXRlID09PSBcXFwiMFxcXCIgPyBcXFwi5LiN5byA5ZCvXFxcIiA6IFxcXCLlvIDlkK9cXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJcXG59KTtcXG5cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5q+P6aG15pyA5aSn56ug5pWwXFxcIixcXG4gICAgdXJsOiAkKENvbmZpZy52aWV3UGFnZVNpemUsIFxcXCIzMDxOPDUwMFxcXCIpLmlucHV0KHNldE51bSwgXFxcInZpZXdQYWdlU2l6ZVxcXCIsIGl0ID0+IGl0ID4gMzAgJiYgaXQgPCA1MDApLFxcbiAgICBkZXNjOiBcXFwiXFxcIiArIENvbmZpZy52aWV3UGFnZVNpemUsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLmm7/mjaLop4TliJlcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/c2V0dGluZ1R5cGU9cmVwbGFjZVJ1bGVcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgfVxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCI8c3Ryb25nPuWFtuS7luiuvue9rjwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLop4TliJnlj5HluIPpobVcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvcnVsZURldGFpbCNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSM/cnVsZT3pgZPplb/ku5PlupNQcm9cXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgbHZlcjogTVlfUEFSQU1TLnZlcnNpb24gfHwgXFxcIuiOt+WPlueJiOacrOWksei0pe+8jOiHquihjOafpeeci1xcXCIsXFxuICAgICAgICBpZDogXFxcIjM1NTlcXFwiXFxuICAgIH0sXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLmgaLlpI3pu5jorqTorr7nva5cXFwiLFxcbiAgICB1cmw6ICQoXFxcIuehruiupOaBouWkjem7mOiupOiuvue9ru+8n1xcXCIpLmNvbmZpcm0oKCkgPT4ge1xcbiAgICAgICAgZGVsZXRlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiKTtcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mgaLlpI3lrozmiJBcXFwiO1xcbiAgICB9KSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIua4heeQhue8k+WtmFxcXCIsXFxuICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9TZXR0aW5nL01vcmUudmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/c2V0dGluZ1R5cGU9Y2FjaGVcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJcXG59KTtcXG5sZXQgdGlkID0gRGF0ZS5ub3coKTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5qOA5rWL5pu05pawXFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKG9sZFZlcnNpb24sIHRpZCkgPT4ge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBsZXQgbmV3VmVyc2lvbiA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL2Rldi9nZXRieWlkP2lkPTM1NTlcXFwiLCB7XFxuICAgICAgICAgICAgICAgIHRpbWVvdXQ6IDIwMDBcXG4gICAgICAgICAgICB9KSkucmVzdWx0LnZlcjtcXG4gICAgICAgICAgICBpZiAobmV3VmVyc2lvbiA8PSBvbGRWZXJzaW9uKSB7XFxuICAgICAgICAgICAgICAgIHVwZGF0ZUl0ZW0odGlkICsgXFxcIiPorr7nva5f5pu05pawXFxcIiwge1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLlt7Lnu4/mmK/mnIDmlrDniYjmnKzkuoZcXFwiXFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey57uP5piv5pyA5paw54mI5pys5LqGXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXCIj6K6+572uX+abtOaWsFxcXCIsIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5pyJ5paw54mI5pys6L+Y5pyq5pu05pawXFxcIlxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgdG9hc3QoXFxcIuacieaWsOeJiOacrOi/mOacquabtOaWsFxcXCIpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInJ1bGU6Ly81clczNlppVTZLZUc1NVdNNzcrbGFHOXRaVjl5ZFd4bFgzVnliTysvcFdoMGRIQTZMeTlvYVd0bGNpNXViMnRwWVM1d2NtVnpjeTlvYVd0bGNuVnNaUzl5ZFd4bGJHbHpkQzVxYzI5dVAybGtQVE0xTlRrPVxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0odGlkICsgXFxcIiPorr7nva5f5pu05pawXFxcIiwge1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuS/oeaBr+iOt+WPluWksei0pVxcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5pu05paw5L+h5oGv6I635Y+W5aSx6LSlXFxcIjtcXG4gICAgICAgIH1cXG4gICAgfSwgTVlfUEFSQU1TLnZlcnNpb24sIHRpZCksXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBpZDogdGlkICsgXFxcIiPorr7nva5f5pu05pawXFxcIlxcbiAgICB9XFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuWFs+S6juWmguS9leiwg+eUqFxcXCIsXFxuICAgIHVybDogXFxcImh0dHBzOi8vcXVuLnFxLmNvbS9xcXdlYi9xdW5wcm8vc2hhcmU/X3d2PTMmX3d3dj0xMjgmaW52aXRlQ29kZT0xSEZ5QkomZnJvbT0yNDY2MTAmYml6PWthXFxcIixcXG4gICAgZGVzYzogXFxcIuivpue7hueCueWHu+WKoOWFpemikemBk++8jOmikemBk+mHjEBMb3lEZ0lrXFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxuLypcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5riF6Zmk5bCP6K+05YiG6aG16K6w5b2VXFxcIixcXG4gICAgdXJsOiAkKFxcXCLnoa7orqTmuIXpmaTlsI/or7TliIbpobXorrDlvZXvvJ9cXFwiKS5jb25maXJtKCgpID0+IHtcXG4gICAgICAgIGRlbGV0ZUZpbGUoXFxcIm5vdmVsRm9vdHByaW50Lmpzb25cXFwiKTtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/muIXpmaTlrozmiJBcXFwiO1xcbiAgICB9KSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxuKi9cXG5zZXRSZXN1bHQobGF5b3V0KTtcIn0se1wiY29sX3R5cGVcIjpcInRleHRfMVwiLFwibmFtZVwiOlwiI3Yu5bCP6K+056ug6IqC5YiX6KGoXCIsXCJwYXRoXCI6XCJOb3ZlbEJyb3dzZXIudmlld1wiLFwicnVsZVwiOlwianM6XFxuaWYgKGdldFBhcmFtKFxcXCJoYXNQYXJhbXNcXFwiKSA9PT0gXFxcInRydWVcXFwiKSB7XFxuICAgIE1ZX1BBUkFNUyA9IHtcXG4gICAgICAgIHBhdGg6IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwicGF0aFxcXCIpKSxcXG4gICAgICAgIG5hbWU6IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwibmFtZVxcXCIpKVxcbiAgICB9XFxufVxcbmxldCBwYXRoID0gTVlfUEFSQU1TLnBhdGg7XFxuc2V0UGFnZVRpdGxlKFxcXCJOVnxcXFwiICsgTVlfUEFSQU1TLm5hbWUpO1xcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFwiKTtcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbmNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgIGZvb3Q6IDAsXFxuICAgIGlzUmVwbGFjZTogdHJ1ZVxcbn0sIEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIikpO1xcbmxldCBpZCA9IFxcXCIjXFxcIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcbnZhciBsYXlvdXQgPSBbXTtcXG5sZXQgbW9kZSA9IGdldE15VmFyKFxcXCIubW9kZVxcXCIsIFxcXCIwXFxcIik7XFxubGV0IG1vZGUyID0gZ2V0TXlWYXIoXFxcIi5tb2RlMlxcXCIsIENvbmZpZy5kZWZfaXNQYWdpbmF0ZSk7XFxuXFxubGV0IGlzUmV2ZXJzZSA9IGdldE15VmFyKFxcXCIuaXNSZXZlcnNlXFxcIiwgXFxcIjBcXFwiKTtcXG5hZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICBjbGVhck15VmFyKFxcXCIubW9kZVxcXCIpO1xcbiAgICBjbGVhck15VmFyKFxcXCIubW9kZTJcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLmlzUmV2ZXJzZVxcXCIpO1xcbiAgICBjbGVhck15VmFyKFxcXCIucGFnZU51bVxcXCIpO1xcbn0pKTtcXG5cXG5mdW5jdGlvbiBnZXRUaXRsZSh0aXRsZSkge1xcbiAgICBsZXQgdGl0bGVzID0gVG9vbC5zcGxpdCh0aXRsZSwgXFxcIiRcXFwiLCAyKTtcXG4gICAgcmV0dXJuIHRpdGxlc1syXSAhPT0gdW5kZWZpbmVkID8gdGl0bGVzWzJdLnNsaWNlKDAsIHRpdGxlc1syXS5sYXN0SW5kZXhPZihcXFwiLlxcXCIpKSA6IHRpdGxlO1xcbn1cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5Yig6Zmk5pW05pysXFxcIixcXG4gICAgdXJsOiAkKFxcXCLnoa7orqTliKDpmaTmlbTmnKzlsI/or7TvvJ9cXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICBiYWNrKCk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFwiO1xcbiAgICAgICAgfVxcbiAgICB9LCBwYXRoKSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogW1xcXCLnnIvlsI/or7RcXFwiLCBcXFwi5Yig6Zmk56ug6IqCXFxcIl1bbW9kZV0sXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgobW9kZSkgPT4ge1xcbiAgICAgICAgcHV0TXlWYXIoXFxcIi5tb2RlXFxcIiwgbW9kZSA9PT0gXFxcIjBcXFwiID8gXFxcIjFcXFwiIDogXFxcIjBcXFwiKTtcXG4gICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICB9LCBtb2RlKSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuKAmOKAmOabtOWkmuWKn+iDvSA+4oCZ4oCZXFxcIixcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG59KTtcXG5cXG5mdW5jdGlvbiB0eHQocGF0aHMpIHtcXG4gICAgc2hvd0xvYWRpbmcoXFxcIuato+WcqOWQiOW5ti4uLlxcXCIpO1xcbiAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICBjb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXCIpO1xcbiAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcblxcbiAgICBsZXQgZmlsZWxpc3QgPSBGaWxlLmdldEZpbGVQYXRoKHBhdGhzLnBhdGgsIFxcXCJmaWxlXFxcIiwgXFxcIi50eHRcXFwiKTtcXG4gICAgbGV0IGxpc3RMZW5ndGggPSBmaWxlbGlzdC5sZW5ndGg7XFxuICAgIGlmIChsaXN0TGVuZ3RoID09PSAwKSB7XFxuICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+epuueahOeroOiKglxcXCI7XFxuICAgIH1cXG4gICAgY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXG4gICAgICAgIHNlbGVjdGVkOiBbXSxcXG4gICAgICAgIGlzUmVwbGFjZTogdHJ1ZVxcbiAgICB9LCBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aHMucGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpKTtcXG4gICAgbGV0IGJ1ZmlsZWxpc3QgPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0TGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGxldCBmaWxlID0gZmlsZWxpc3RbaV07XFxuICAgICAgICBsZXQgZmlsZUluZm8gPSBUb29sLnNwbGl0KGZpbGUubmFtZSwgXFxcIiRcXFwiLCAyKTtcXG4gICAgICAgIGJ1ZmlsZWxpc3QucHVzaCh7XFxuICAgICAgICAgICAgbmFtZTogZmlsZUluZm9bMl0uc2xpY2UoMCwgZmlsZUluZm9bMl0ubGFzdEluZGV4T2YoXFxcIi5cXFwiKSksXFxuICAgICAgICAgICAgcGF0aDogXFxcImZpbGU6Ly9cXFwiICsgZmlsZS5wYXRoLFxcbiAgICAgICAgICAgIGlkOiBOdW1iZXIoZmlsZUluZm9bMF0pIHx8IDBcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIGJ1ZmlsZWxpc3Quc29ydCgoYSwgYikgPT4gYS5pZCAtIGIuaWQpO1xcbiAgICBsZXQgZW50aXJlUGF0aCA9IHBhdGhzLnBhdGgucmVwbGFjZShDb25maWcubm92ZWxQYXRoLCBDb25maWcubm92ZWxGdWxsUGF0aCkgKyBcXFwiLnR4dFxcXCI7XFxuICAgIGxldCBlbnRpcmVQYXRodG8gPSBib29rSW5mby5pc1JlcGxhY2UgPyBlbnRpcmVQYXRoICsgXFxcIi50bXBcXFwiIDogZW50aXJlUGF0aDtcXG5cXG4gICAgaWYgKGZpbGVFeGlzdChcXFwiZmlsZTovL1xcXCIgKyBlbnRpcmVQYXRoKSkge1xcbiAgICAgICAgdG9hc3QoXFxcIuWIneWni+WMluaWh+S7tlxcXCIpO1xcbiAgICAgICAgaWYgKCFGaWxlLmRlbGV0ZUZpbGVzKGVudGlyZVBhdGgpKSB7XFxuICAgICAgICAgICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yid5aeL5YyW5aSx6LSlXFxcIjtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgdG9hc3QoXFxcIuWIneWni+WMluaIkOWKn1xcXCIpO1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdExlbmd0aDsgaSsrKSB7XFxuICAgICAgICBsZXQgaXRlbSA9IGJ1ZmlsZWxpc3RbaV07XFxuICAgICAgICBsZXQgY29udGVudCA9IHJlcXVlc3QoaXRlbS5wYXRoKTtcXG4gICAgICAgIEZpbGUuZmlsZVdyaXRlQXBwZW5kKGVudGlyZVBhdGh0bywgaXRlbS5uYW1lICsgXFxcIlxcXFxu44CA44CAXFxcIiArIGNvbnRlbnQucmVwbGFjZSgvXlxcXFxzK3xcXFxccyskL2dtLCBcXFwiXFxcIikucmVwbGFjZSgvJm5ic3A7L2csXFxcIlxcXCIpLnNwbGl0KC9cXFxcbisvKS5qb2luKFxcXCJcXFxccuOAgOOAgFxcXCIpICsgXFxcIlxcXFxuXFxcXG5cXFwiKTtcXG4gICAgfVxcbiAgICBpZiAoYm9va0luZm8uaXNSZXBsYWNlKSB7XFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICBsZXQgbGVuID0gcnVsZUxpc3QubGVuZ3RoO1xcbiAgICAgICAgbGV0IHJlcGxhY2VQYXR0ZXJuID0gW1xcXCJyZXBsYWNlXFxcIiwgXFxcInJlcGxhY2VBbGxcXFwiXTtcXG4gICAgICAgIGxldCBmbGFnID0gRmlsZS5maWxlUnVsZShlbnRpcmVQYXRodG8sIGVudGlyZVBhdGgsIChqYXZhU3RyaW5nKSA9PiB7XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXG4gICAgICAgICAgICAgICAgaWYgKCFib29rSW5mby5zZWxlY3RlZC5pbmNsdWRlcyhyZXBsYWNlUnVsZS5pZCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVBhdHRlcm5bMCArIHJlcGxhY2VSdWxlLmlzUmVnZXhdO1xcbiAgICAgICAgICAgICAgICBqYXZhU3RyaW5nID0gamF2YVN0cmluZ1tyZXBsYWNlXShyZXBsYWNlUnVsZS5wYXR0ZXJuLCByZXBsYWNlUnVsZS5yZXBsYWNlbWVudCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBqYXZhU3RyaW5nLmdldEJ5dGVzKCk7XFxuICAgICAgICB9KTtcXG4gICAgICAgIGlmICghZmxhZykge1xcbiAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WQiOW5tuWksei0pVxcXCI7XFxuICAgICAgICB9XFxuXFxuICAgIH1cXG4gICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WQiOW5tuWujOaIkFxcXCI7XFxufVxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlkIjlubblsI/or7RcXFwiLFxcbiAgICB1cmw6ICQoXFxcIuehruWumuWQiOW5tj9cXFxcbuS8muimhuebluW3suaciVRYVFxcXCIpLmNvbmZpcm0odHh0LCBNWV9QQVJBTVMpLFxcbiAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogW1xcXCLimJDliIbpobVcXFwiLCBcXFwi4piR5YiG6aG1XFxcIl1bbW9kZTJdLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKG1vZGUyKSA9PiB7XFxuICAgICAgICBwdXRNeVZhcihcXFwiLm1vZGUyXFxcIiwgbW9kZTIgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgIH0sIG1vZGUyKSxcXG4gICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlh4DljJZcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxDdXN0b20udmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSMjbm9SZWZyZXNoI1xcXCIsXFxuICAgIGV4dHJhOiBNWV9QQVJBTVMsXFxuICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5aSW6YOo5p+l55yLXFxcIixcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbiAgICAgICAgbGV0IGVudGlyZVBhdGggPSBwYXRoLnJlcGxhY2UoQ29uZmlnLm5vdmVsUGF0aCwgQ29uZmlnLm5vdmVsRnVsbFBhdGgpICsgXFxcIi50eHRcXFwiO1xcbiAgICAgICAgaWYgKGZpbGVFeGlzdChcXFwiZmlsZTovL1xcXCIgKyBlbnRpcmVQYXRoKSkge1xcbiAgICAgICAgICAgIHRvYXN0KFxcXCLosIPnlKjnrKzkuInmlrnlupTnlKjmiZPlvIDmlofku7ZcXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXCIgKyBlbnRpcmVQYXRoXFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mnKzlnLDmmoLml6Dlj6/kvpvlpJbpg6jmiZPlvIDnmoR0eHTmlofku7bvvIzor7flhYjlkIjlubblsI/or7TvvIFcXFwiXFxuICAgICAgICB9XFxuICAgIH0sIHBhdGgpLFxcbiAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxufSk7XFxuXFxubGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcImZpbGVcXFwiLCBcXFwiLnR4dFxcXCIpO1xcbm1obGlzdC5zb3J0KChhLCBiKSA9PiB7XFxuICAgIGEgPSAoYS5uYW1lLm1hdGNoKC9cXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXG4gICAgYiA9IChiLm5hbWUubWF0Y2goL1xcXFxkKy8pIHx8IFtdKVswXSB8fCAwO1xcbiAgICByZXR1cm4gYSAtIGI7XFxufSk7XFxubGV0IGNoYXB0ZXJMaXN0ID0gW107XFxubGV0IGNoYXB0ZXJDb3VudCA9IG1obGlzdC5sZW5ndGg7XFxuXFxuaWYgKG1vZGUyID09PSBcXFwiMVxcXCIpIHtcXG4gICAgbGV0IG1obGlzdENodW5rID0gVG9vbC5jaHVuayhtaGxpc3QsIENvbmZpZy52aWV3UGFnZVNpemUpO1xcbiAgICBsZXQgdmlld1BhZ2VDb3VudCA9IG1obGlzdENodW5rLmxlbmd0aDtcXG4gICAgbGV0IGRlZlBhZ2UgPSAodmlld1BhZ2VDb3VudCAtIDEgPCBib29rSW5mby5mb290ID8gMCA6IGJvb2tJbmZvLmZvb3QpIHx8IDA7XFxuICAgIGxldCBwYWdlTnVtID0gTnVtYmVyKGdldE15VmFyKFxcXCIucGFnZU51bVxcXCIsIFxcXCJcXFwiICsgZGVmUGFnZSkpO1xcbiAgICBjaGFwdGVyTGlzdCA9IG1obGlzdENodW5rW3BhZ2VOdW1dIHx8IFtdO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi56ug6IqCIFxcXCIuYmlnKCkgKyAoXFxcIuacrOmhtTpcXFwiICsgY2hhcHRlckxpc3QubGVuZ3RoICsgXFxcIiDlhbHmnIk6XFxcIiArIGNoYXB0ZXJDb3VudCArIFxcXCLnq6Ag5b2T5YmNOlxcXCIgKyAocGFnZU51bSArIDEpICsgXFxcIi9cXFwiICsgdmlld1BhZ2VDb3VudCkuc21hbGwoKSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5pc1JldmVyc2VcXFwiLCBpc1JldmVyc2UgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICAgICAgfSwgaXNSZXZlcnNlKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLot7Ppm4ZcXFwiLFxcbiAgICAgICAgdXJsOiAkKGNoYXB0ZXJDb3VudCwgXFxcIui+k+WFpei3s+i9rOeroOiKgiAxLVxcXCIgKyBjaGFwdGVyQ291bnQpLmlucHV0KChjaGFwdGVyQ291bnQsIHBhZ2VOdW0sIHZpZXdQYWdlU2l6ZSwgcGF0aCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IE51bWJlcihpbnB1dCk7XFxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihpbnB1dE51bSkgfHwgaW5wdXROdW0gPCAwIHx8IGlucHV0TnVtID4gY2hhcHRlckNvdW50KSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/or7fovpPlhaXmraPnoa7ojIPlm7TlhoXnmoTmlbDlrZdcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnB1dE51bSA9IE1hdGguZmxvb3IoKGlucHV0TnVtICsgdmlld1BhZ2VTaXplKSAvIHZpZXdQYWdlU2l6ZSkgLSAxO1xcbiAgICAgICAgICAgIGlmIChwYWdlTnVtID09PSBpbnB1dE51bSkgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOW9k+WJjemhtemdolxcXCI7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5wYWdlTnVtXFxcIiwgXFxcIlxcXCIgKyBpbnB1dE51bSk7XFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICB9LCBjaGFwdGVyQ291bnQsIHBhZ2VOdW0sIENvbmZpZy52aWV3UGFnZVNpemUsIHBhdGgpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzVcXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIui3s+mhtVxcXCIsXFxuICAgICAgICB1cmw6ICQocGFnZU51bSArIDEsIFxcXCLot7PovazpobXmlbAgMS1cXFwiICsgdmlld1BhZ2VDb3VudCkuaW5wdXQoKHZpZXdQYWdlQ291bnQsIHBhZ2VOdW0sIHBhdGgpID0+IHtcXG4gICAgICAgICAgICBsZXQgaW5wdXROdW0gPSBOdW1iZXIoaW5wdXQpIC0gMTtcXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0TnVtKSB8fCBpbnB1dE51bSA8IDAgfHwgaW5wdXROdW0gPiB2aWV3UGFnZUNvdW50IC0gMSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v6K+36L6T5YWl5q2j56Gu6IyD5Zu05YaF55qE5pWw5a2XXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHBhZ2VOdW0gPT09IGlucHV0TnVtKSByZXR1cm4gXFxcInRvYXN0Oi8v5q2j5Zyo5b2T5YmN6aG16Z2iXFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiLnBhZ2VOdW1cXFwiLCBcXFwiXFxcIiArIGlucHV0TnVtKTtcXG4gICAgICAgICAgICBjb25zdCBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIik7XFxuICAgICAgICAgICAgYm9va0luZm8uZm9vdCA9IGlucHV0TnVtO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICB9LCB2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF81XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLkuIrkuIDpobVcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYWdlTnVtLCBwYXRoKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFnZU51bSAtIDE7XFxuICAgICAgICAgICAgaWYgKGlucHV0TnVtIDwgMCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey57uP5piv56ys5LiA6aG15LqGXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5wYWdlTnVtXFxcIiwgXFxcIlxcXCIgKyBpbnB1dE51bSk7XFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCBwYWdlTnVtLCBwYXRoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF81XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLkuIvkuIDpobVcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCh2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFnZU51bSArIDE7XFxuICAgICAgICAgICAgaWYgKGlucHV0TnVtID4gdmlld1BhZ2VDb3VudCAtIDEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOWQjuS4gOmhteS6hlxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCIucGFnZU51bVxcXCIsIFxcXCJcXFwiICsgaW5wdXROdW0pO1xcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgdmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfNVxcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5pyr6aG1XFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgodmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IHZpZXdQYWdlQ291bnQgLSAxO1xcbiAgICAgICAgICAgIGlmIChwYWdlTnVtID09PSBpbnB1dE51bSB8fCBpbnB1dE51bSA9PT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOWQjuS4gOmhteS6hlxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCIucGFnZU51bVxcXCIsIFxcXCJcXFwiICsgaW5wdXROdW0pO1xcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgdmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfNVxcXCJcXG4gICAgfSk7XFxufSBlbHNlIHtcXG4gICAgY2hhcHRlckxpc3QgPSBtaGxpc3Q7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLnq6DoioIgXFxcIi5iaWcoKSArIChcXFwi5YWx5pyJOlxcXCIgKyBjaGFwdGVyQ291bnQgKyBcXFwi56ugXFxcIikuc21hbGwoKSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5pc1JldmVyc2VcXFwiLCBpc1JldmVyc2UgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICAgICAgfSwgaXNSZXZlcnNlKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICB9KTtcXG59XFxubGV0IGFycmF5ID0gW107XFxuaWYgKG1vZGUgPT09IFxcXCIwXFxcIikge1xcbiAgICBmb3IgKGxldCBpdGVtIG9mIGNoYXB0ZXJMaXN0KSB7XFxuICAgICAgICBsZXQgbmFtZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxuICAgICAgICBhcnJheS5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogbmFtZSxcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxNYWluQm9keSNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgcGF0aDogaXRlbS5wYXRoLFxcbiAgICAgICAgICAgICAgICBkaXJQYXRoOiBwYXRoLFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbmFtZSxcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBDb25maWcuZGVmX1ZpZXdfU3R5bGVcXG4gICAgICAgIH0pO1xcbiAgICB9XFxufSBlbHNlIHtcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjaGFwdGVyTGlzdCkge1xcbiAgICAgICAgbGV0IG5hbWUgPSBnZXRUaXRsZShpdGVtLm5hbWUpO1xcbiAgICAgICAgYXJyYXkucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCLnoa7orqTliKDpmaRbXFxcIiArIG5hbWUgKyBcXFwiXe+8n1xcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXG4gICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sIGl0ZW0ucGF0aCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcIjFcXFwiKSB7XFxuICAgIGFycmF5LnJldmVyc2UoKTtcXG59XFxubGF5b3V0LnB1c2guYXBwbHkobGF5b3V0LCBhcnJheSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7lsI/or7TmraPmlofpmIXor7tcIixcInBhdGhcIjpcIk5vdmVsTWFpbkJvZHlcIixcInJ1bGVcIjpcImpzOlxcbnZhciBsYXlvdXQgPSBbXTtcXG5sZXQgY29udGVudCA9IHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgTVlfUEFSQU1TLnBhdGgpO1xcbi8vY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxcXG58XFxcXHIvZywgXFxcIjxicj5cXFwiKS5yZXBsYWNlKC8oJm5ic3A7KSsvZyxcXFwiIFxcXCIpO1xcbmNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgIHNlbGVjdGVkOiBbXSxcXG4gICAgaXNSZXBsYWNlOiB0cnVlXFxufSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIE1ZX1BBUkFNUy5kaXJQYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIikpO1xcblxcbmlmIChib29rSW5mby5pc1JlcGxhY2UpIHtcXG4gICAgbGV0IGphdmFTdHJpbmcgPSBqYXZhLmxhbmcuU3RyaW5nKGNvbnRlbnQpO1xcbiAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgIGxldCByZXBsYWNlUGF0dGVybiA9IFtcXFwicmVwbGFjZVxcXCIsIFxcXCJyZXBsYWNlQWxsXFxcIl07XFxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBydWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xcbiAgICAgICAgbGV0IHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaV07XFxuICAgICAgICBpZiAoIWJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKSkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUGF0dGVyblswICsgcmVwbGFjZVJ1bGUuaXNSZWdleF07XFxuICAgICAgICBqYXZhU3RyaW5nID0gamF2YVN0cmluZ1tyZXBsYWNlXShyZXBsYWNlUnVsZS5wYXR0ZXJuLCByZXBsYWNlUnVsZS5yZXBsYWNlbWVudCk7XFxuICAgIH1cXG4gICAgY29udGVudCA9IFN0cmluZyhqYXZhU3RyaW5nKTtcXG59XFxuY29udGVudCA9IFxcXCLjgIDjgIBcXFwiICsgY29udGVudC5yZXBsYWNlKC9eXFxcXHMrfFxcXFxzKyQvZ20sIFxcXCJcXFwiKS5zcGxpdCgvXFxcXG4rLykuam9pbihcXFwiPGJyPuOAgOOAgFxcXCIpO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbiAgICB0aXRsZTogKFxcXCI8c3Ryb25nPlxcXCIgKyBNWV9QQVJBTVMudGl0bGUgKyBcXFwiPC9zdHJvbmc+XFxcIikuYmlnKCksXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogY29udGVudCxcXG4gICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgdGV4dFNpemU6IDE4LFxcbiAgICAgICAgY2xpY2s6IHRydWVcXG4gICAgfVxcbn0pO1xcbnNldFJlc3VsdChsYXlvdXQpO1wifSx7XCJjb2xfdHlwZVwiOlwidGV4dF8xXCIsXCJuYW1lXCI6XCIjdi7lkIjlubZUWFRcIixcInBhdGhcIjpcIk5vdmVsQ29sbGVjdGVkLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5sZXQgcnVsZWxEaXIgPSBGaWxlLmdldEZpbGVQYXRoKENvbmZpZy5ub3ZlbEZ1bGxQYXRoLCBcXFwiZGlyXFxcIik7XFxuc2V0UGFnZVRpdGxlKFxcXCLlkIjlubZUWFRcXFwiKTtcXG5sZXQgbGF5b3V0ID0gW107XFxuXFxuZnVuY3Rpb24gb3BlcmF0aW9uKHBhdGgpIHtcXG4gICAgc3dpdGNoIChpbnB1dCkge1xcbiAgICAgICAgY2FzZSBcXFwi5YiG5LqrXFxcIjpcXG4gICAgICAgICAgICByZXR1cm4gXFxcInNoYXJlOi8vXFxcIiArIHBhdGg7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlIFxcXCLliKDpmaRcXFwiOlxcbiAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgY2FzZSBcXFwi5rW36ZiU6aKE6KeIXFxcIjpcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXCI7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlIFxcXCLmiZPlvIDmlrnlvI9cXFwiOlxcbiAgICAgICAgICAgIHJldHVybiBcXFwib3BlbkZpbGU6Ly9maWxlOi8vXFxcIiArIHBhdGg7XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgIH1cXG59XFxuZm9yIChsZXQgcnVsZVBhdGhzIG9mIHJ1bGVsRGlyKSB7XFxuICAgIGxldCBub3ZlbHMgPSBGaWxlLmdldEZpbGVQYXRoKHJ1bGVQYXRocy5wYXRoLCBcXFwiZmlsZVxcXCIsIFxcXCIudHh0XFxcIik7XFxuICAgIGZvciAobGV0IG5vdmVsIG9mIG5vdmVscykge1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBub3ZlbC5uYW1lLFxcbiAgICAgICAgICAgIHVybDogJChbXFxcIuWIhuS6q1xcXCIsIFxcXCLliKDpmaRcXFwiLCBcXFwi5rW36ZiU6aKE6KeIXFxcIiwgXFxcIuaJk+W8gOaWueW8j1xcXCJdLCAxKS5zZWxlY3Qob3BlcmF0aW9uLCBub3ZlbC5wYXRoKSxcXG4gICAgICAgICAgICBkZXNjOiBcXFwi5p2l5rqQ77yaXFxcIiArIHJ1bGVQYXRocy5uYW1lLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBwYXRoOiBub3ZlbC5wYXRoXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuaWYgKGxheW91dC5sZW5ndGggPT09IDApIHtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6ICc8aDEgc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFwiPuWVpemDveayoeacieiAtjwvaDE+JyxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbiAgICB9KTtcXG59XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7mm7TlpJrorr7nva5cIixcInBhdGhcIjpcIlNldHRpbmcvTW9yZS52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuXFxuY29uc3Qgc2V0dGluZ1R5cGUgPSBNWV9QQVJBTVMuc2V0dGluZ1R5cGUgfHwgZ2V0UGFyYW0oXFxcInNldHRpbmdUeXBlXFxcIik7XFxuXFxubGV0IGxheW91dCA9IFtdO1xcbmxldCBpZCA9IFxcXCIjXFxcIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcbnN3aXRjaCAoc2V0dGluZ1R5cGUpIHtcXG4gICAgY2FzZSBcXFwiY2FjaGVcXFwiOlxcbiAgICAgICAgc2V0UGFnZVRpdGxlKFxcXCLmuIXpmaTnvJPlrZh86K6+572uXFxcIik7XFxuICAgICAgICBjb25zdCBrbm93bkxpc3QgPSBuZXcgTWFwKFtcXG4gICAgICAgICAgICBbRmlsZS5nZXROYW1lKENvbmZpZy5ub3ZlbFBhdGgpLCBcXFwiI+euoeeQhuWZqCPlsI/or7TnvJPlrZjnm67lvZVb5LiN5bu66K6u5riF6ZmkXVxcXCJdLFxcbiAgICAgICAgICAgIFtGaWxlLmdldE5hbWUoQ29uZmlnLmNvbWljUGF0aCksIFxcXCIj566h55CG5ZmoI+a8q+eUu+e8k+WtmOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcIl0sXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcuZXh0ZXJuYWxJbXBvcnRQYXRoKSwgXFxcIiPnrqHnkIblmagj5a+85YWl55qEVFhU55uu5b2VW+S4jeW7uuiurua4hemZpF1cXFwiXSxcXG4gICAgICAgICAgICBbRmlsZS5nZXROYW1lKENvbmZpZy5ub3ZlbEZ1bGxQYXRoKSwgXFxcIiPnrqHnkIblmagj5bCP6K+05ZCI5bm255uu5b2VW+WPr+S7pea4hemZpF1cXFwiXSxcXG4gICAgICAgICAgICBbXFxcImRy56ug6IqC57yT5a2YXFxcIiwgXFxcIumBk+mVv+aooeadv+S4tOaXtue8k+WtmFvlu7rorq7muIXpmaRdXFxcIl1cXG4gICAgICAgIF0pO1xcblxcbiAgICAgICAgbGV0IGNhY2hlRGlyID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWcuaG9tZVBhdGgsIFxcXCJkaXJcXFwiKTtcXG5cXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFuQ2FjaGUocGF0aCkge1xcbiAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5riF6Zmk5a6M5oiQXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5riF6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKGxldCBjYWNoZSBvZiBjYWNoZURpcikge1xcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGNhY2hlLm5hbWUsXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXCLlpKflsI/vvJpcXFwiICsgRmlsZS5nZXRGaWxlU2l6ZShjYWNoZS5wYXRoKSArIFxcXCJcXFxcbuaPj+i/sO+8mlxcXCIgKyAoa25vd25MaXN0LmdldChjYWNoZS5uYW1lKSB8fCBcXFwi5pyq55+l55uu5b2VW+mjjumZqeacquefpV1cXFwiKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcIuehruiupOa4hemZpCBcXFwiICsgY2FjaGUubmFtZSArIFxcXCIgP1xcXCIpLmNvbmZpcm0oY2xlYW5DYWNoZSwgY2FjaGUucGF0aClcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxuICAgICAgICB9KTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuWFqOmDqOa4hemZpChcXFwiICsgRmlsZS5nZXRGaWxlU2l6ZShDb25maWcuaG9tZVBhdGgpICsgXFxcIilcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCLnoa7orqTmuIXpmaTlhajpg6jnvJPlrZjmlbDmja4/XFxcIikuY29uZmlybShjbGVhbkNhY2hlLCBDb25maWcuaG9tZVBhdGgpXFxuICAgICAgICB9KTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlIFxcXCJkZWZhdWx0UGljXFxcIjpcXG4gICAgICAgIHNldFBhZ2VUaXRsZShcXFwi6buY6K6k5bCB6Z2ifOiuvue9rlxcXCIpO1xcbiAgICAgICAgaWYgKGdldE15VmFyKFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFwiKSkge1xcbiAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICBjbGVhck15VmFyKFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFwiKTtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGZ1bmN0aW9uIHNldERlZmF1bHRQaWModXJsKSB7XFxuICAgICAgICAgICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgMCkgfHwgXFxcInt9XFxcIik7XFxuICAgICAgICAgICAgQ29uZmlnLmRlZl9QaWMgPSB1cmw7XFxuICAgICAgICAgICAgc2F2ZUZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxuICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/kv67mlLnmiJDlip9cXFwiO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGV0IHN0YXJ0ID0gMTtcXG4gICAgICAgIGlmICh0eXBlb2YoTVlfTkFNRSkgIT09IFxcXCJ1bmRlZmluZWRcXFwiICYmIE1ZX05BTUUgPT09IFxcXCLll4Xop4nmtY/op4jlmahcXFwiKSB7XFxuICAgICAgICAgICAgc3RhcnQgPSA0O1xcbiAgICAgICAgfVxcbiAgICAgICAgZm9yIChsZXQgaSA9IHN0YXJ0OyBpIDw9IDQ7IGkrKykge1xcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLlm77niYdcXFwiICsgaSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJtb3ZpZV8zXFxcIixcXG4gICAgICAgICAgICAgICAgcGljX3VybDogXFxcImhpa2VyOi8vaW1hZ2VzL2hvbWVfcGljXFxcIiArIGksXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShzZXREZWZhdWx0UGljLCBcXFwiaGlrZXI6Ly9pbWFnZXMvaG9tZV9waWNcXFwiICsgaSlcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuiHquWumuS5ieKelVxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzNcXFwiLFxcbiAgICAgICAgICAgIHVybDogJChbXFxcIuiHquWumuS5iXVybFxcXCIsIFxcXCLpgInmi6nmlofku7bot6/lvoRcXFwiXSkuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcXFwi6Ieq5a6a5LmJdXJsXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoXFxcIlxcXCIsIFxcXCLovpPlhaXlm77niYfnmoTot6/lvoTmiJbogIXpk77mjqVcXFwiKS5pbnB1dCgoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgMCkgfHwgXFxcInt9XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgQ29uZmlnLmRlZl9QaWMgPSBpbnB1dDtcXG4gICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBiYWNrKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUwOTlcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVTZWxlY3QgPSByZXF1aXJlKHJlcXVpcmVVcmwpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCAwKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29uZmlnLmRlZl9QaWMgPSBcXFwiZmlsZTovL1xcXCIgKyBQQVRIO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcIjpkZWZhdWx0UGljQmFja1xcXCIsIFxcXCJ0cnVlXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVVybDogcmVxdWlyZVVybCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZTogXFxcIi5qcGd8LmpwZWd8LmdpZnwucG5nfC5zdmd8LmJtcFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1R5cGU6IFxcXCJjb25maXJtXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnk6IFxcXCJzZWxlY3RQYXRoQ2FjaGUyXFxcIlxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KVxcbiAgICAgICAgfSk7XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSBcXFwicmVwbGFjZVJ1bGVcXFwiOlxcbiAgICAgICAgaWYgKE1ZX1BBUkFNUy5pc1JlZnJlc2gpIHtcXG4gICAgICAgICAgICBhZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4gcmVmcmVzaFBhZ2UoKSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2V0UGFnZVRpdGxlKFxcXCLmm7/mjaLop4TliJl86K6+572uXFxcIik7XFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLmlrDlu7rmm7/mjaJcXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9lZGl0UmVwbGFjZVJ1bGUudmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSMjbm9SZWZyZXNoIz9pc05ldz10cnVlXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfM1xcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5a+85Ye66KeE5YiZXFxcIixcXG4gICAgICAgICAgICB1cmw6ICQoXFxcIuehruiupOWvvOWHulxcXCIgKyBydWxlTGlzdC5sZW5ndGggKyBcXFwi5p2h6KeE5YiZ77yfXFxcXG4oe2hvbWVQdGFofS9yZXBsYWNlUnVsZS5qc29uKVxcXCIpLmNvbmZpcm0oKG51bSkgPT4ge1xcbiAgICAgICAgICAgICAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbiAgICAgICAgICAgICAgICBsZXQgc2F2ZVB0YSA9IENvbmZpZy5ob21lUGF0aCArIFxcXCIvcmVwbGFjZVJ1bGUuanNvblxcXCI7XFxuICAgICAgICAgICAgICAgIHdyaXRlRmlsZShzYXZlUHRhLCByZWFkRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICAgICAgICAgICAgICBsb2coXFxcIlxcXFxu6Lev5b6E77yaXFxcIiArIHNhdmVQdGEgKyBcXFwiXFxcXG7lr7zlh7rop4TliJkgXFxcIiArIG51bSArIFxcXCIg5p2hXFxcIik7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwic2hhcmU6Ly9cXFwiICsgc2F2ZVB0YTtcXG4gICAgICAgICAgICB9LCBydWxlTGlzdC5sZW5ndGgpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIlxcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICBmdW5jdGlvbiBpbXBvcnRSdWxlKGlzYmFjaykge1xcbiAgICAgICAgICAgIGlucHV0ID0gdHlwZW9mIFBBVEggPT09IFxcXCJ1bmRlZmluZWRcXFwiID8gaW5wdXQgOiBQQVRIO1xcbiAgICAgICAgICAgIGlucHV0ID0gaW5wdXQuc3RhcnRzV2l0aChcXFwiZmlsZTovL1xcXCIpID8gaW5wdXQgOiBcXFwiZmlsZTovL1xcXCIgKyBpbnB1dFxcbiAgICAgICAgICAgIGxldCBydWxlVGV4dCA9IHJlcXVlc3QoaW5wdXQpO1xcbiAgICAgICAgICAgIGlmICghcnVsZVRleHQpIHJldHVybiBcXFwidG9hc3Q6Ly/ojrflj5bmlofku7bkuLrnqbpcXFwiO1xcbiAgICAgICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgICAgIGxldCBuZXdSdWxlTGlzdCA9IEpTT04ucGFyc2UocnVsZVRleHQpO1xcbiAgICAgICAgICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICAgICAgICAgIGxldCBuZXdDb3VudCA9IDAsXFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb3VudCA9IDA7XFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gbmV3UnVsZUxpc3QpIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBuZXdSdWxlID0gbmV3UnVsZUxpc3RbaV07XFxuICAgICAgICAgICAgICAgICAgICBpZiAoIW5ld1J1bGUuaGFzT3duUHJvcGVydHkoXFxcInJlcGxhY2VtZW50XFxcIikgfHwgIW5ld1J1bGUuaGFzT3duUHJvcGVydHkoXFxcInBhdHRlcm5cXFwiKSB8fCAhbmV3UnVsZS5oYXNPd25Qcm9wZXJ0eShcXFwibmFtZVxcXCIpIHx8IChuZXdSdWxlLnNjb3BlQ29udGVudCA9PT0gdW5kZWZpbmVkID8gZmFsc2UgOiAhbmV3UnVsZS5zY29wZUNvbnRlbnQpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBsZXQgaWQgPSBuZXdSdWxlLmlkO1xcbiAgICAgICAgICAgICAgICAgICAgbmV3UnVsZS5pZCA9IGlkIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkSW5kZXggPSBydWxlTGlzdC5maW5kSW5kZXgocnVsZSA9PiBydWxlLmlkID09PSBpZCk7XFxuICAgICAgICAgICAgICAgICAgICBpZiAoaWRJbmRleCA+IC0xKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ291bnQrKztcXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTGlzdC5zcGxpY2UoaWRJbmRleCwgMSwgbmV3UnVsZSk7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvdW50Kys7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcnVsZUxpc3QucHVzaChuZXdSdWxlKTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGVMaXN0KSk7XFxuICAgICAgICAgICAgICAgIGlmIChpc2JhY2spIHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgbG9nKFxcXCJcXFxcbui3r+W+hO+8mlxcXCIgKyBpbnB1dCArIFxcXCJcXFxcbuaAu+inhOWImeaVsO+8mlxcXCIgKyBuZXdSdWxlTGlzdC5sZW5ndGggKyBcXFwiXFxcXG7mm7TmlrDop4TliJkgXFxcIiArIHVwZGF0ZUNvdW50ICsgXFxcIiDmnaFcXFxcdOaWsOWinuinhOWImSBcXFwiICsgbmV3Q291bnQgKyBcXFwiIOadoVxcXCIpO1xcbiAgICAgICAgICAgICAgICB0b2FzdChcXFwi5a+85YWl5oiQ5YqfXFxcIik7XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICAgICAgaWYgKGlzYmFjaykgYmFjaygpO1xcbiAgICAgICAgICAgICAgICB0b2FzdChcXFwi5a+85YWl5aSx6LSlXFxcIik7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5a+85YWl6KeE5YiZXFxcIixcXG4gICAgICAgICAgICB1cmw6ICQoW1xcXCLlpJbpg6jmlofku7ZcXFwiLCBcXFwi5YaF6YOo5paH5Lu2XFxcIl0sIDEsIFxcXCLop4TliJnlr7zlhaVcXFwiKS5zZWxlY3QoKGltcG9ydFJ1bGUpID0+IHtcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcXFwi5aSW6YOo5paH5Lu2XFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJmaWxlU2VsZWN0Oi8vXFxcIiArICQudG9TdHJpbmcoaW1wb3J0UnVsZSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgcmVxdWlyZVVybCA9IFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlU2VsZWN0ID0gcmVxdWlyZShyZXF1aXJlVXJsKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBmaWxlU2VsZWN0LmZpbGVTZWxlY3Rpb25Vcmkoe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAkLnRvU3RyaW5nKGltcG9ydFJ1bGUsIHRydWUpLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVVcmw6IHJlcXVpcmVVcmwsXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGU6IFxcXCIuanNvblxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1R5cGU6IFxcXCJjb25maXJtXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnk6IFxcXCJzZWxlY3RQYXRoQ2FjaGVcXFwiXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sIGltcG9ydFJ1bGUpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBmb3IgKGxldCBpID0gMCwgbGVuID0gcnVsZUxpc3QubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcXG4gICAgICAgICAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiByZXBsYWNlUnVsZS5uYW1lLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBpZCArIFxcXCIuXFxcIiArIGksXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLliKDpmaRcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGlkLCBpbmRleCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSBydWxlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoXFxcInJlcGxhY2VSdWxlLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShydWxlTGlzdCkpO1xcbiAgICAgICAgICAgICAgICAgICAgLy9kZWxldGVJdGVtQnlDbHMoaWQgKyBcXFwiLlxcXCIgKyBpbmRleCk7XFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgICAgICAgICB0b2FzdChcXFwi5Yig6Zmk5oiQ5YqfXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgICAgICAgICB9LCBpZCwgaSksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcIi5cXFwiICsgaVxcbiAgICAgICAgICAgICAgICB9LFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi57yW6L6RXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2VkaXRSZXBsYWNlUnVsZS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjP2luZGV4PVxcXCIgKyBpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcIi5cXFwiICsgaVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgY2xzOiBpZCArIFxcXCIuXFxcIiArIGlcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgXFxcImNvbnRlbnRzXFxcIjpcXG4gICAgICAgIGxldCBmID0gcmVxdWlyZShcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXCIpO1xcbiAgICAgICAgc2V0UGFnZVRpdGxlKFxcXCLnm67lvZXorr7nva586K6+572uXFxcIik7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLpgInmi6nmlofku7blpLlcXFwiLFxcbiAgICAgICAgICAgIHVybDogSlNPTi5zdHJpbmdpZnkoZi5maWxlU2VsZWN0aW9uVXJpKHtcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKGlkKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgdGFyZ2V0ID0gZmluZEl0ZW0oaWQpLmV4dHJhO1xcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlSXRlbShpZCwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBPYmplY3QuYXNzaWduKHRhcmdldCwge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IFBBVEhcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KVxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgICAgICAgICAgICAgfSwgaWQpLFxcbiAgICAgICAgICAgICAgICBpbml0aWFsUGF0aDogQ29uZmlnLmhvbWVQYXRoLFxcbiAgICAgICAgICAgICAgICByZXF1aXJlVXJsOiBcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXCIsXFxuICAgICAgICAgICAgICAgIHBhdHRlcm46IDFcXG4gICAgICAgICAgICB9KSksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgICAgICAgICAgZGVzYzogXFxcIuaUr+aMgWhpa2VyOi8vZmlsZXPot6/lvoQo6K+l5pON5L2c5LiN5Lya5Yid5aeL5YyW55uu5b2VKVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBDb25maWcuaG9tZVBhdGgsXFxuICAgICAgICAgICAgICAgIG9uQ2hhbmdlOiAkLnRvU3RyaW5nKChpZCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoaWQsIGlucHV0KTtcXG4gICAgICAgICAgICAgICAgfSwgaWQpLFxcbiAgICAgICAgICAgICAgICBpZDogaWRcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxuICAgICAgICB9KTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuehruiupFxcXCIsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChpZCkgPT4ge1xcbiAgICAgICAgICAgICAgICBsZXQgaW5wdXQgPSBnZXRNeVZhcihpZCwgZmluZEl0ZW0oaWQpLmV4dHJhLmRlZmF1bHRWYWx1ZSB8fCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFxcXCJoaWtlcjovL2ZpbGVzL1xcXCIpKSBpbnB1dCA9IGdldFBhdGgoaW5wdXQpLnNsaWNlKDcpO1xcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQuZW5kc1dpdGgoXFxcIi9cXFwiKSkgaW5wdXQ9aW5wdXQucmVwbGFjZSgvXFxcXC8kLyxcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgIGlmIChDb25maWcuaG9tZVBhdGggPT0gaW5wdXQpIHJldHVybiBcXFwidG9hc3Q6Ly/lt7Lnu4/mmK/lvZPliY3nm67lvZVcXFwiO1xcbiAgICAgICAgICAgICAgICBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIDApIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgICAgICAgICBDb25maWcuaG9tZVBhdGggPSBpbnB1dDtcXG4gICAgICAgICAgICAgICAgc2F2ZUZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxuICAgICAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3suS/neWtmFxcXCI7XFxuICAgICAgICAgICAgfSwgaWQpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF9jZW50ZXJfMVxcXCIsXFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIGJyZWFrO1xcbn1cXG5zZXRSZXN1bHQobGF5b3V0KTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2Lue8lui+keabv+aNouinhOWImVwiLFwicGF0aFwiOlwiZWRpdFJlcGxhY2VSdWxlLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmNvbnN0IGlzTmV3ID0gTVlfUEFSQU1TLmlzTmV3IHx8IGdldFBhcmFtKFxcXCJpc05ld1xcXCIpO1xcbmNvbnN0IGluZGV4ID0gTVlfUEFSQU1TLmluZGV4IHx8IE51bWJlcihnZXRQYXJhbShcXFwiaW5kZXhcXFwiKSk7XFxubGV0IGxheW91dCA9IFtdO1xcbmFkZExpc3RlbmVyKFxcXCJvbkNsb3NlXFxcIiwgJC50b1N0cmluZygoKSA9PiB7XFxuICAgIGNsZWFyTXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUubmFtZVxcXCIpO1xcbiAgICBjbGVhck15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5wYXR0ZXJuXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5maXJzdFxcXCIpO1xcbiAgICAvL2NsZWFyTXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuc2NvcGVcXFwiKTtcXG59KSk7XFxubGV0IHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbmxldCBpZCA9IFxcXCIjXFxcIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcbi8vbGV0IHJlcGxhY2VSdWxlID0gaXNOZXcgPT0gXFxcInRydWVcXFwiP3t9OnJ1bGVMaXN0W2luZGV4XTtcXG5pZiAoaXNOZXcgPT0gXFxcInRydWVcXFwiKSB7XFxuICAgIHJlcGxhY2VSdWxlID0ge1xcbiAgICAgICAgaWQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxcbiAgICAgICAgaXNSZWdleDogZmFsc2UsXFxuICAgIH1cXG59IGVsc2Uge1xcbiAgICByZXBsYWNlUnVsZSA9IHJ1bGVMaXN0W2luZGV4XTtcXG59XFxuLy/pppbmrKHliJ3lp4vljJZcXG5pZihnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5maXJzdFxcXCIsXFxcIlxcXCIpPT1cXFwiXFxcIil7XFxuICAgIHB1dE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFwiLCBcXFwiXFxcIiArIHJlcGxhY2VSdWxlLmlzUmVnZXgpO1xcbiAgICBwdXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5maXJzdFxcXCIsXFxcIjFcXFwiKTtcXG59XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuaLt+i0nVxcXCIsXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICBsZXQgYXR0ID0gW1xcXCJuYW1lXFxcIiwgXFxcImlzUmVnZXhcXFwiLCBcXFwicGF0dGVyblxcXCIsIFxcXCJyZXBsYWNlbWVudFxcXCJdO1xcbiAgICAgICAgbGV0IGpzb24gPSB7fTtcXG4gICAgICAgIGF0dC5mb3JFYWNoKGtleSA9PiB7XFxuICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuXFxcIiArIGtleSwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFxcXCJpc1JlZ2V4XFxcIikge1xcbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHZhbHVlID09PSBcXFwidHJ1ZVxcXCIgPyB0cnVlIDogZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGpzb25ba2V5XSA9IHZhbHVlO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBjb3B5KEpTT04uc3RyaW5naWZ5KGpzb24pKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi57KY6LS0XFxcIixcXG4gICAgdXJsOiAkKFxcXCJ7e2NsaXBib2FyZH19XFxcIikuaW5wdXQoKCkgPT4ge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBsZXQganNvbiA9IEpTT04ucGFyc2UoaW5wdXQpO1xcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pIHx8IGpzb24ucGF0dGVybiA9PSB1bmRlZmluZWQpIHJldHVybjtcXG4gICAgICAgICAgICBsZXQgYXR0ID0gW1xcXCJuYW1lXFxcIiwgXFxcImlzUmVnZXhcXFwiLCBcXFwicGF0dGVyblxcXCIsIFxcXCJyZXBsYWNlbWVudFxcXCJdO1xcbiAgICAgICAgICAgIGF0dC5mb3JFYWNoKGtleSA9PiB7XFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLlxcXCIgKyBrZXksIFN0cmluZyhqc29uW2tleV0pKTtcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxuICAgICAgICB9XFxuICAgIH0pLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwiaW5wdXRcXFwiLFxcbiAgICBkZXNjOiBcXFwi5pu/5o2i6KeE5YiZ5ZCN56ewXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLm5hbWVcXFwiLCByZXBsYWNlUnVsZS5uYW1lKSxcXG4gICAgICAgIG9uQ2hhbmdlOiAncHV0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUubmFtZVxcXCIsaW5wdXQpOydcXG4gICAgfVxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgIGRlc2M6IFxcXCLmm7/mjaLop4TliJlcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgIHR5cGU6IFxcXCJ0ZXh0YXJlYVxcXCIsXFxuICAgICAgICBoZWlnaHQ6IC0xLFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5wYXR0ZXJuXFxcIiwgcmVwbGFjZVJ1bGUucGF0dGVybiksXFxuICAgICAgICBvbkNoYW5nZTogJ3B1dE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLnBhdHRlcm5cXFwiLCBpbnB1dCk7J1xcbiAgICB9XFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuaYr+WQpuS9v+eUqOato+WImeihqOi+vuW8j++8mlxcXCIgKyBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5pc1JlZ2V4XFxcIiksXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaWQpID0+IHtcXG4gICAgICAgIGxldCBpc1JlZ2V4ID0gZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXCIpID09PSBcXFwidHJ1ZVxcXCIgPyBmYWxzZSA6IHRydWU7XFxuICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogaWRcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5piv5ZCm5L2/55So5q2j5YiZ6KGo6L6+5byP77yaXFxcIiArIGlzUmVnZXhcXG4gICAgICAgIH0pO1xcbiAgICAgICAgcHV0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXCIsIFxcXCJcXFwiICsgaXNSZWdleCk7XFxuICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICB9LCBpZCksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGlkOiBpZFxcbiAgICB9XFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgZGVzYzogXFxcIuabv+aNouS4ulxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxcbiAgICAgICAgdHlwZTogXFxcInRleHRhcmVhXFxcIixcXG4gICAgICAgIGhlaWdodDogLTEsXFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLnJlcGxhY2VtZW50XFxcIiwgcmVwbGFjZVJ1bGUucmVwbGFjZW1lbnQpLFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5yZXBsYWNlbWVudFxcXCIsaW5wdXQpOydcXG4gICAgfVxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLkv53lrZhcXFwiLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHJlcGxhY2VSdWxlLCBpc05ldywgaW5kZXgpID0+IHtcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgIGlmICghcGF0dGVybikge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mm7/mjaLop4TliJnkuI3og73kuLrnqbpcXFwiO1xcbiAgICAgICAgfVxcbiAgICAgICAgT2JqZWN0LmFzc2lnbihyZXBsYWNlUnVsZSwge1xcbiAgICAgICAgICAgIG5hbWU6IGdldE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLm5hbWVcXFwiLCBcXFwiXFxcIiksXFxuICAgICAgICAgICAgaXNSZWdleDogZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXCIpID09PSBcXFwidHJ1ZVxcXCIgPyB0cnVlIDogZmFsc2UsXFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybixcXG4gICAgICAgICAgICByZXBsYWNlbWVudDogZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFwiLCBcXFwiXFxcIilcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGV0IHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICAgICAgaWYgKGlzTmV3ID09IFxcXCJ0cnVlXFxcIikge1xcbiAgICAgICAgICAgIHJ1bGVMaXN0LnB1c2gocmVwbGFjZVJ1bGUpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBydWxlTGlzdC5zcGxpY2UoaW5kZXgsIDEsIHJlcGxhY2VSdWxlKTtcXG4gICAgICAgIH1cXG4gICAgICAgIHNhdmVGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkocnVsZUxpc3QpKTtcXG4gICAgICAgIGJhY2soKTtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/kv53lrZjmiJDlip9cXFwiO1xcbiAgICB9LCByZXBsYWNlUnVsZSwgaXNOZXcsIGluZGV4KSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG59KTtcXG5cXG4vKlxcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgIGRlc2M6IFxcXCLmm7/mjaLojIPlm7RcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgIHR5cGU6IFxcXCJ0ZXh0YXJlYVxcXCIsXFxuICAgICAgICBoZWlnaHQ6IC0xLFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBcXFwiXFxcIixcXG4gICAgICAgIG9uQ2hhbmdlOiAncHV0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuc2NvcGVcXFwiLGlucHV0KTsnXFxuICAgIH1cXG59KTtcXG5cXG4qL1xcbnNldFJlc3VsdChsYXlvdXQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3Yu5bCP6K+05Liq5oCn5YyW5YeA5YyWXCIsXCJwYXRoXCI6XCJOb3ZlbEN1c3RvbS52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5zZXRQYWdlVGl0bGUoXFxcIuabv+aNouinhOWImXxcXFwiICsgTVlfUEFSQU1TLm5hbWUpO1xcbmxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcInJlcGxhY2VSdWxlLmpzb25cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG5sZXQgaWQgPSBcXFwiI1xcXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcXG5cXG5jb25zdCBib29rSW5mbyA9IE9iamVjdC5hc3NpZ24oe1xcbiAgICBmb290OiAwLFxcbiAgICBpc1JlcGxhY2U6IHRydWUsXFxuICAgIHNlbGVjdGVkOiBbXVxcbn0sIEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBNWV9QQVJBTVMucGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpKTtcXG5cXG5sZXQgbGF5b3V0ID0gW107XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogW1xcXCLimJDlh4DljJZcXFwiLCBcXFwi4piR5YeA5YyWXFxcIl1bMCArIGJvb2tJbmZvLmlzUmVwbGFjZV0sXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoJGlkLCBwYXRoKSA9PiB7XFxuXFxuICAgICAgICB2YXIgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgbGV0IGlzUmVwbGFjZSA9IGJvb2tJbmZvLmlzUmVwbGFjZT09PXVuZGVmaW5lZD90cnVlOmJvb2tJbmZvLmlzUmVwbGFjZTtcXG4gICAgICAgIGJvb2tJbmZvLmlzUmVwbGFjZSA9ICFpc1JlcGxhY2U7XFxuICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxuICAgICAgICB1cGRhdGVJdGVtKCRpZCwge1xcbiAgICAgICAgICAgIHRpdGxlOiBpc1JlcGxhY2UgPyBcXFwi4piQ5YeA5YyWXFxcIiA6IFxcXCLimJHlh4DljJZcXFwiLFxcbiAgICAgICAgfSk7XFxuICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICB9LCBpZCArIFxcXCIjLTFcXFwiLCBNWV9QQVJBTVMucGF0aCksXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBpZDogaWQgKyBcXFwiIy0xXFxcIlxcbiAgICB9LFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi57yW6L6R6KeE5YiZXFxcIixcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcvTW9yZS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjP3NldHRpbmdUeXBlPXJlcGxhY2VSdWxlXFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiLFxcbiAgICBleHRyYTp7XFxuICAgICAgICBpc1JlZnJlc2g6IHRydWVcXG4gICAgfVxcbn0pO1xcbmZvciAobGV0IGkgPSAwLCBsZW4gPSBydWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xcbiAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXG4gICAgbGV0IGlzVHJ1ZSA9IGJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IChpc1RydWUgPyBcXFwi4pePXFxcIiA6IFxcXCLil4tcXFwiKSArIHJlcGxhY2VSdWxlLm5hbWUsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgIHk6IDAsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlzVHJ1ZTogaXNUcnVlLFxcbiAgICAgICAgICAgIGlkOiBpZCArIGksXFxuICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuW8gOWQr1xcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKCRpZCwgcmVwbGFjZVJ1bGUsIHBhdGgpID0+IHtcXG4gICAgICAgICAgICBpZiAoZmluZEl0ZW0oJGlkKS5leHRyYS5pc1RydWUpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3suW8gOWQr1xcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgICAgICAgICAgICAgIHNlbGVjdGVkOiBbXVxcbiAgICAgICAgICAgIH0sIEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIikpO1xcbiAgICAgICAgICAgIGJvb2tJbmZvLnNlbGVjdGVkLnB1c2gocmVwbGFjZVJ1bGUuaWQpO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oJGlkLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi4pePXFxcIiArIHJlcGxhY2VSdWxlLm5hbWUsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpc1RydWU6IHRydWUsXFxuICAgICAgICAgICAgICAgICAgICBpZDogJGlkLFxcbiAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgIH0sIGlkICsgaSwgcmVwbGFjZVJ1bGUsIE1ZX1BBUkFNUy5wYXRoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLlhbPpl61cXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgkaWQsIHJlcGxhY2VSdWxlLCBwYXRoKSA9PiB7XFxuICAgICAgICAgICAgaWYgKCFmaW5kSXRlbSgkaWQpLmV4dHJhLmlzVHJ1ZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey5YWz6ZetXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IFtdXFxuICAgICAgICAgICAgfSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKSk7XFxuICAgICAgICAgICAgYm9va0luZm8uc2VsZWN0ZWQuc3BsaWNlKGJvb2tJbmZvLnNlbGVjdGVkLmluZGV4T2YocmVwbGFjZVJ1bGUuaWQpLCAxKTtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCRpZCwge1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKXi1xcXCIgKyByZXBsYWNlUnVsZS5uYW1lLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaXNUcnVlOiBmYWxzZSxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkaWQsXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgaWQgKyBpLCByZXBsYWNlUnVsZSwgTVlfUEFSQU1TLnBhdGgpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxuICAgIH0pO1xcbn1cXG5cXG5zZXRSZXN1bHQobGF5b3V0KTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2LuWkluWvvFRYVFwiLFwicGF0aFwiOlwiZXh0ZXJuYWxpbXBvcnRUeHQudmlld1wiLFwicnVsZVwiOlwianM6XFxuZnVuY3Rpb24gdHh0VmlldyhsYXlvdXQpIHtcXG4gICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG4gICAgbGV0IGZpbGVzID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWcuZXh0ZXJuYWxJbXBvcnRQYXRoLCB1bmRlZmluZWQsIFxcXCIudHh0XFxcIik7XFxuICAgIHNldFBhZ2VUaXRsZShcXFwiVFhU6ZiF6K+75ZmoXFxcIik7XFxuICAgIC8vbGV0IGxheW91dCA9IFtdO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB1cmw6ICdcXFwiaGlrZXI6Ly9wYWdlL3R4dFNlYXJjaC52aWV3I25vUmVmcmVzaCM/c2VhcmNoVGVybXM9XFxcIitlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpJyxcXG4gICAgICAgIGRlc2M6IFxcXCJUWFTmkJzntKJcXFwiLFxcbiAgICAgICAgdGl0bGU6IFxcXCLwn5SNXFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaW5wdXRcXFwiLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKFxcXCJzZWFyY2hLZXlCeVR4dFxcXCIsIFxcXCJcXFwiKSxcXG4gICAgICAgICAgICBvbkNoYW5nZTogXFxcInB1dE15VmFyKCdzZWFyY2hLZXlCeVR4dCcsaW5wdXQpXFxcIlxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLlr7zlhaVUWFRcXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiLFxcbiAgICAgICAgdXJsOiAkKFtcXFwi57O757uf6YCJ5oup5ZmoXFxcIiwgXFxcIua1t+mYlOmAieaLqeWZqFxcXCJdLCAxLCBcXFwi6YCJ5oup5Zmo57G75Z6LXFxcIikuc2VsZWN0KCgpID0+IHtcXG4gICAgICAgICAgICBpZiAoaW5wdXQgPT09IFxcXCLns7vnu5/pgInmi6nlmahcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwiZmlsZVNlbGVjdDovL1xcXCIgKyAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGlmICghLyhcXFxcLnR4dCkkL2kudGVzdChpbnB1dCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdChcXFwi6YCJ5oup5LqG6ZSZ6K+v55qE5paH5Lu257G75Z6LXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBub3ZlbE5hbWUgPSBpbnB1dC5tYXRjaCgvXFxcXC8oW15cXFxcL10qPykoXFxcXC50eHQpJC9pKVsxXS5yZXBsYWNlKFxcXCJfZmlsZVNlbGVjdF9cXFwiLCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9wYXRoID0gQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCArIG5vdmVsTmFtZSArIFxcXCIudHh0XFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXRoID0gaW5wdXQucmVwbGFjZShcXFwiZmlsZTovL1xcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm0oe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWvvOWFpeaPkOekulxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCLlt7LlrZjlnKhbXFxcIiArIG5vdmVsTmFtZSArIFxcXCJd5piv5ZCm6KaG55uWP1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06ICQudG9TdHJpbmcoKHBhdGgsIHRvcGF0aCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoLCB0cnVlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoICsgXFxcIi5qc29uXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHRvcGF0aCArIFxcXCIuanNvblxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WvvOWFpeaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHBhdGgsIHRvcGF0aClcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5jb3B5RmlsZShwYXRoLCB0b3BhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoICsgXFxcIi5qc29uXFxcIikpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGggKyBcXFwiLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLlr7zlhaXmiJDlip9cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUwOTlcXFwiO1xcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVNlbGVjdCA9IHJlcXVpcmUocmVxdWlyZVVybCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlU2VsZWN0LmZpbGVTZWxlY3Rpb25Vcmkoe1xcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IG5vdmVsTmFtZSA9IFBBVEgubWF0Y2goL1xcXFwvKFteXFxcXC9dKj8pKFxcXFwudHh0KSQvaSlbMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvcGF0aCA9IENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGggKyBub3ZlbE5hbWUgKyBcXFwiLnR4dFxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBQQVRIO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwi5bey5a2Y5ZyoW1xcXCIgKyBub3ZlbE5hbWUgKyBcXFwiXeaYr+WQpuimhueblj9cXFwiKS5jb25maXJtKChwYXRoLCB0b3BhdGgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmNvcHlGaWxlKHBhdGgsIHRvcGF0aCwgdHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIHRvcGF0aCArIFxcXCIuanNvblxcXCIpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGggKyBcXFwiLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lr7zlhaXmiJDlip9cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBwYXRoLCB0b3BhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFwiZmlsZTovL1xcXCIgKyB0b3BhdGggKyBcXFwiLmpzb25cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGggKyBcXFwiLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lr7zlhaXmiJDlip9cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVVybDogcmVxdWlyZVVybCxcXG4gICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlOiBcXFwiLnR4dFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcImNvbmZpcm1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgbWVtb3J5OiBcXFwic2VsZWN0UGF0aENhY2hlMVxcXCJcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSksXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGV0IG9wdGlvbnMgPSBbXFxcIumYheivu1xcXCIsIFxcXCLliIbkuqtcXFwiLCBcXFwi5Yig6ZmkXFxcIiwgXFxcIuaJk+W8gOaWueW8j1xcXCJdO1xcblxcbiAgICBsZXQgcGF0dGVybiA9IGdldE15VmFyKFxcXCI6dHh0UGF0dGVyblxcXCIsIG9wdGlvbnNbMF0pO1xcbiAgICBsZXQgaWQgPSBEYXRlLm5vdygpICsgXFxcIjrmqKHlvI9cXFwiO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogcGF0dGVybixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgICAgIHVybDogJChvcHRpb25zLCAxLCBcXFwi5pON5L2c5qih5byPXFxcIikuc2VsZWN0KChpZCkgPT4ge1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCI6dHh0UGF0dGVyblxcXCIsIGlucHV0KTtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKGlkLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpbnB1dFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfSwgaWQpLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBpZDogaWRcXG4gICAgICAgIH1cXG4gICAgfSlcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbiAgICB9KTtcXG5cXG4gICAgZnVuY3Rpb24gb3BlcmF0aW9uKHBhdGgsIG5hbWUpIHtcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gZ2V0TXlWYXIoXFxcIjp0eHRQYXR0ZXJuXFxcIiwgXFxcIumYheivu1xcXCIpO1xcbiAgICAgICAgc3dpdGNoIChwYXR0ZXJuKSB7XFxuICAgICAgICAgICAgY2FzZSBcXFwi5YiG5LqrXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJzaGFyZTovL1xcXCIgKyBwYXRoO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIFxcXCLliKDpmaRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwi56Gu6K6k5Yig6ZmkW1xcXCIgKyBuYW1lICsgXFxcIl1cXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiLmpzb25cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHBhdGggKyBcXFwiLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIFxcXCLpmIXor7tcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlldz9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIFxcXCLmiZPlvIDmlrnlvI9cXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXCIgKyBwYXRoO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmb3IgKGxldCBub3ZlbCBvZiBmaWxlcykge1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBub3ZlbC5uYW1lLFxcbiAgICAgICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShvcGVyYXRpb24sIG5vdmVsLnBhdGgsIG5vdmVsLm5hbWUpLFxcbiAgICAgICAgICAgIGRlc2M6IFxcXCLlpKflsI/vvJpcXFwiICsgRmlsZS5nZXRGaWxlU2l6ZShub3ZlbC5wYXRoKSArIFxcXCJcXFxcbuS/ruaUueaXtumXtO+8mlxcXCIgKyAkLmRhdGVGb3JtYXQobm92ZWwubGFzdE1vZGlmaWVkLCBcXFwieXl5eS1NTS1kZCBISDptbTpzc1xcXCIpLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBwYXRoOiBub3ZlbC5wYXRoLFxcbiAgICAgICAgICAgICAgICBpc0NhY2hlOiB0cnVlLFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbm92ZWwubmFtZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuiuvue9rlxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIHZlcnNpb246IE1ZX1JVTEUudmVyc2lvblxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc5biu5Yqp4oCd4oCdXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvaGVscC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP2tleXdvcmQ9dHh0XFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiAnPGgxIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj7llaXpg73msqHmnInogLY8L2gxPicsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBzZXRSZXN1bHQobGF5b3V0KTtcXG59XFxuaWYgKCQuaW1wb3J0UGFyYW0gPT09IHVuZGVmaW5lZCkge1xcbiAgICAkLmV4cG9ydHMgPSB0eHRWaWV3O1xcbn0gZWxzZSBpZiAoJC5pbXBvcnRQYXJhbSA9PT0gbnVsbCkge1xcbiAgICBzZXRSZXN1bHQodHh0VmlldyhbXSkpO1xcbn1cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2LlRYVOino+aekOWZqFwiLFwicGF0aFwiOlwidHh0UGFyc2VyLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbihmdW5jdGlvbigpIHtcXG4gICAgbGV0IHJlZ3MgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9yZWd1bGFyQ2hhcHRlci5mXFxcIik7XFxuICAgIGxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJwYXRoXFxcIikgfHwgXFxcIlxcXCIpIHx8IE1ZX1BBUkFNUy5wYXRoO1xcbiAgICBsZXQgY2hhcnN0ID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJjaGFyc3RcXFwiKSB8fCBcXFwiXFxcIikgfHwgTVlfUEFSQU1TLmNoYXJzdCB8fCBcXFwiVVRGLThcXFwiO1xcbiAgICBsZXQgaXNDYWNoZSA9IE1ZX1BBUkFNUy5pc0NhY2hlO1xcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcXFwiZmlsZTovL1xcXCIpKSB7XFxuICAgICAgICBwYXRoID0gXFxcImZpbGU6Ly9cXFwiICsgcGF0aDtcXG4gICAgfVxcbiAgICBpZihNWV9QQVJBTVMudGl0bGUpe1xcbiAgICAgICAgc2V0UGFnZVRpdGxlKE1ZX1BBUkFNUy50aXRsZSk7XFxuICAgIH1lbHNle1xcbiAgICAgICAgc2V0UGFnZVRpdGxlKCQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKS5nZXROYW1lKHBhdGgpKTtcXG4gICAgfVxcbiAgICBsZXQgbGF5b3V0ID0gW107XFxuICAgIGxldCBjaGFwdGVyTmFtZXMgPSBbXTtcXG4gICAgbGV0IGludGVydmFscyA9IFtdO1xcbiAgICBsZXQgaGFzUHJlZmFjZSA9IGZhbHNlO1xcbiAgICBpZiAoZmlsZUV4aXN0KHBhdGggKyBcXFwiLmpzb25cXFwiKSAmJiBpc0NhY2hlKSB7XFxuICAgICAgICB0cnkge1xcblxcbiAgICAgICAgICAgIGxldCBjID0gSlNPTi5wYXJzZShyZXF1ZXN0KHBhdGggKyBcXFwiLmpzb25cXFwiKSk7XFxuICAgICAgICAgICAgY2hhcHRlck5hbWVzID0gYy5jaGFwdGVyTmFtZXM7XFxuICAgICAgICAgICAgaW50ZXJ2YWxzID0gYy5pbnRlcnZhbHM7XFxuICAgICAgICAgICAgaGFzUHJlZmFjZSA9IGMuaGFzUHJlZmFjZTtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi6YeN5paw6Kej5p6Q55uu5b2VXFxcIixcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcIi5qc29uXFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTpmYWxzZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTpcXFwibGluZV9ibGFua1xcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICBzZXRSZXN1bHQoW3tcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ08c3Ryb25nPuebruW9leino+aekOWksei0pSjph43mlrDop6PmnpApPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcIi5qc29uXFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBzaG93TG9hZGluZyhcXFwi5q2j5Zyo6Kej5p6Q55uu5b2VXFxcIik7XFxuICAgICAgICBsZXQgdHh0ID0gcmVxdWVzdChwYXRoLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAvL1xcXCJjb250ZW50LXR5cGVcXFwiOiBcXFwidGV4dC9wbGFpbjsgY2hhcnN0PVxcXCIgKyBjaGFyc3RcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gcmVncy5nZXRUb2NSdWxlKHR4dCk7XFxuICAgICAgICBpZiAoIXBhdHRlcm4pIHtcXG4gICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgIHNldFJlc3VsdChbe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxzdHJvbmc+55uu5b2V6Kej5p6Q5aSx6LSlPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2soZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcih0eHQpO1xcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xcbiAgICAgICAgd2hpbGUgKG1hdGNoZXIuZmluZCgpKSB7XFxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gbWF0Y2hlci5zdGFydCgpO1xcbiAgICAgICAgICAgIGxldCBlbmQgPSBtYXRjaGVyLmVuZCgpO1xcbiAgICAgICAgICAgIGxldCB0ID0gbWF0Y2hlci5ncm91cCgpO1xcbiAgICAgICAgICAgIGlmIChwb2ludGVyID09PSAwICYmIHN0YXJ0ID4gMzApIHtcXG4gICAgICAgICAgICAgICAgaGFzUHJlZmFjZSA9IHRydWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNoYXB0ZXJOYW1lcy5wdXNoKHQpO1xcbiAgICAgICAgICAgIGludGVydmFscy5wdXNoKFtwb2ludGVyLCBzdGFydF0pO1xcbiAgICAgICAgICAgIHBvaW50ZXIgPSBlbmQ7XFxuICAgICAgICB9XFxuICAgICAgICBpbnRlcnZhbHMucHVzaChbcG9pbnRlciwgdHh0Lmxlbmd0aF0pO1xcbiAgICAgICAgaWYgKGlzQ2FjaGUpIHtcXG4gICAgICAgICAgICB3cml0ZUZpbGUocGF0aCArIFxcXCIuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWVzOiBjaGFwdGVyTmFtZXMsXFxuICAgICAgICAgICAgICAgIGludGVydmFsczogaW50ZXJ2YWxzLFxcbiAgICAgICAgICAgICAgICBoYXNQcmVmYWNlOiBoYXNQcmVmYWNlXFxuICAgICAgICAgICAgfSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgfVxcblxcblxcbiAgICBpZiAoaGFzUHJlZmFjZSkge1xcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzWzBdO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5bqP6KiAXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1RYVFZpZXdlci52aWV3I2F1dG9QYWdlIyNyZWFkVGhlbWUjXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBjaGFwdGVyTmFtZTogXFxcIuW6j+iogFxcXCIsXFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBpbnRlcnZhbFswXSxcXG4gICAgICAgICAgICAgICAgZW5kOiBpbnRlcnZhbFsxXSxcXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcXG4gICAgICAgICAgICAgICAgY2hhcnN0OiBjaGFyc3RcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXB0ZXJOYW1lcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgbGV0IG5hbWUgPSBjaGFwdGVyTmFtZXNbaV07XFxuICAgICAgICBsZXQgaW50ZXJ2YWwgPSBpbnRlcnZhbHNbaSArIDFdO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBuYW1lLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvVFhUVmlld2VyLnZpZXcjYXV0b1BhZ2UjI3JlYWRUaGVtZSNcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBpbnRlcnZhbFswXSxcXG4gICAgICAgICAgICAgICAgZW5kOiBpbnRlcnZhbFsxXSxcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWU6IG5hbWUsXFxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXFxuICAgICAgICAgICAgICAgIGNoYXJzdDogY2hhcnN0XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgc2V0UmVzdWx0KGxheW91dCk7XFxufSkoKVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3YuVFhU5p+l55yL5ZmoXCIsXCJwYXRoXCI6XCJUWFRWaWV3ZXIudmlld1wiLFwicnVsZVwiOlwianM6XFxubGV0IHBhdGggPSBNWV9QQVJBTVMucGF0aDtcXG5sZXQgY2hhcnN0ID0gTVlfUEFSQU1TLmNoYXJzdDtcXG5sZXQgdHh0ID0gcmVxdWVzdChwYXRoLCB7XFxuICAgIGhlYWRlcnM6IHtcXG4gICAgICAgLy9cXFwiY29udGVudC10eXBlXFxcIjogXFxcInRleHQvcGxhaW47IGNoYXJzdD1cXFwiICsgY2hhcnN0XFxuICAgIH1cXG59KTtcXG5cXG5sZXQgdGFyZ2V0VGV4dHMgPSB0eHQuc3Vic3RyaW5nKE1ZX1BBUkFNUy5zdGFydCwgTVlfUEFSQU1TLmVuZCk7XFxuXFxubGV0IGNvbnRlbnQgPSB0YXJnZXRUZXh0cy5zcGxpdCgvKFxcXFxufFxcXFxyKSsvKS5maWx0ZXIoaXQgPT4gaXQubGVuZ3RoID4gMSkuam9pbihcXFwiPGJyPlxcXCIpO1xcbmxldCBsYXlvdXQgPSBbXTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIixcXG4gICAgdGl0bGU6IChcXFwiPHN0cm9uZz5cXFwiICsgTVlfUEFSQU1TLmNoYXB0ZXJOYW1lICsgXFxcIjwvc3Ryb25nPlxcXCIpLmJpZygpLFxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IGNvbnRlbnQsXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIHRleHRTaXplOiAxOCxcXG4gICAgICAgIGNsaWNrOiB0cnVlXFxuICAgIH1cXG59KTtcXG5zZXRSZXN1bHQobGF5b3V0KTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiNqLueroOiKguato+WImVwiLFwicGF0aFwiOlwicmVndWxhckNoYXB0ZXIuZlwiLFwicnVsZVwiOlwianM6XFxubGV0IHJ1bGVzID0gW3tcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xLFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IHRydWUsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLnm67lvZUo5Y6756m655m9KVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoPzw9W+OAgFxcXFxcXFxcc10pKD865bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ856ysP1xcXFxcXFxcc3swLDR9W1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcc3swLDR9KD8656ugfOiKgig/Ieivvil85Y23fOmbhig/IVvlkIjlkoxdKSkpLnswLDMwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi56ys5LiA56ugIOWBh+ijheesrOS4gOeroOWJjemdouacieepuueZveS9huaIkeS4jeimgVxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMFxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMixcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi55uu5b2VXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0fSg/OuW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWfOesrD9cXFxcXFxcXHN7MCw0fVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dKz9cXFxcXFxcXHN7MCw0fSg/OueroHzoioIoPyHor74pfOWNt3zpm4YoPyFb5ZCI5ZKMXSl86YOoKD8hW+WIhui1m+a4uF0pfOevhyg/IeW8oCkpKS57MCwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuesrOS4gOeroCDmoIflh4bnmoTnsqTor63lsLHmmK/ov5nmoLdcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDFcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTMsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLnm67lvZUo5Yy56YWN566A5LuLKVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoPzw9W+OAgFxcXFxcXFxcc10pKD86KD865YaF5a65fOaWh+eroCk/566A5LuLfOaWh+ahiHzliY3oqIB85bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ856ysP1xcXFxcXFxcc3swLDR9W1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcc3swLDR9KD8656ugfOiKgig/Ieivvil85Y23fOmbhig/IVvlkIjlkoxdKXzpg6goPyFb5YiG6LWb5ri4XSl85ZueKD8hW+WQiOadpeS6i+WOu10pfOWcuig/IVvlkozlkIjmr5TnlLXmmK9dKXznr4coPyHlvKApKSkuezAsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLnroDku4sg6ICB5aSr6K+46JGb5p2R5aSrXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAyXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC00LFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IGZhbHNlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi55uu5b2VKOWPpOWFuOOAgei9u+Wwj+ivtOWkh+eUqClcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiXlsg44CAXFxcXFxcXFx0XXswLDR9KD865bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ856ysP1xcXFxcXFxcc3swLDR9W1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcc3swLDR9KD8656ugfOiKgig/Ieivvil85Y23fOmbhig/IVvlkIjlkoxdKXzpg6goPyFb5YiG6LWb5ri4XSl85ZueKD8hW+WQiOadpeS6i+WOu10pfOWcuig/IVvlkozlkIjmr5TnlLXmmK9dKXzor51856+HKD8h5bygKSkpLnswLDMwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi56ys5LiA56ugIOavlOS4iumdouWPquWkmuS6huWbnuWSjOivnVxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogM1xcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtNSxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiBmYWxzZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuaVsOWtlyjnuq/mlbDlrZfmoIfpopgpXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIig/PD1b44CAXFxcXFxcXFxzXSlcXFxcXFxcXGQrXFxcXFxcXFwuP1sg44CAXFxcXFxcXFx0XXswLDR9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCIxMlxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogNFxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtNixcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiBmYWxzZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuWkp+WGmeaVsOWtlyjnuq/mlbDlrZfmoIfpopgpXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIig/PD1b44CAXFxcXFxcXFxzXSlb44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDEyfVsg44CAXFxcXFxcXFx0XXswLDR9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLkuIDnmb7kuIPljYFcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDRcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTcsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuaVsOWtlyDliIbpmpTnrKYg5qCH6aKY5ZCN56ewXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0fVxcXFxcXFxcZHsxLDV9WzrvvJosLu+8jCDjgIFf4oCUXFxcXFxcXFwtXS57MSwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIjHjgIHov5nkuKrlsLHmmK/moIfpophcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDVcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTgsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuWkp+WGmeaVsOWtlyDliIbpmpTnrKYg5qCH6aKY5ZCN56ewXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0fSg/OuW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWfFvjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH0pWyDjgIFf4oCUXFxcXFxcXFwtXS57MSwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuS4gOOAgeWPquacieWJjemdoueahOaVsOWtl+acieW3ruWIq1xcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogNlxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtOSxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5q2j5paHIOagh+mimC/luo/lj7dcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiXlsg44CAXFxcXFxcXFx0XXswLDR95q2j5paHWyDjgIBdezEsNH0uezAsMjB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLmraPmlocg5oiR5aW25bi45bGx6LW15a2Q6b6ZXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiA3XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xMCxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiQ2hhcHRlci9TZWN0aW9uL1BhcnQvRXBpc29kZSDluo/lj7cg5qCH6aKYXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0fSg/OltDY11oYXB0ZXJ8W1NzXWVjdGlvbnxbUHBdYXJ0fO+8sO+8oe+8su+8tHxbTm5dW29PXVxcXFxcXFxcLnxbRWVdcGlzb2RlfCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVxcXFxcXFxcc3swLDR9XFxcXFxcXFxkezEsNH0uezAsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCJDaGFwdGVyIDEgTXlHcmFuZG1hSXNOQlxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogOFxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTEsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCJDaGFwdGVyKOWOu+eugOS7iylcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiXlsg44CAXFxcXFxcXFx0XXswLDR9KD86W0NjXWhhcHRlcnxbU3NdZWN0aW9ufFtQcF1hcnR877yw77yh77yy77y0fFtObl1bT29dXFxcXFxcXFwufFtFZV1waXNvZGUpXFxcXFxcXFxzezAsNH1cXFxcXFxcXGR7MSw0fS57MCwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIkNoYXB0ZXIgMSBNeUdyYW5kbWFJc05CXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiA5XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xMixcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi54m55q6K56ym5Y+3IOW6j+WPtyDmoIfpophcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiKD88PVtcXFxcXFxcXHPjgIBdKVvjgJDjgJTjgJbjgIzjgI7jgIjvvLtcXFxcXFxcXFtdKD8656ysfFtDY11oYXB0ZXIpW1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSwxMH1b56ug6IqCXS57MCwyMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuOAkOesrOS4gOeroCDlkI7pnaLnmoTnrKblj7flj6/ku6XmsqHmnIlcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDEwXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xMyxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiBmYWxzZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIueJueauiuespuWPtyDmoIfpopgo5oiQ5a+5KVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoPzw9W1xcXFxcXFxcc+OAgF17MCw0fSkoPzpbXFxcXFxcXFxb44CI44CM44CO44CW44CU44CK77yI44CQXFxcXFxcXFwoXS57MSwzMH1bXFxcXFxcXFwp44CR77yJ44CL44CV44CX44CP44CN44CJXFxcXFxcXFxdXT98KD865YaF5a65fOaWh+eroCk/566A5LuLfOaWh+ahiHzliY3oqIB85bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJYpWyDjgIBdezAsNH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuOAjuWKoOS4quebtOinkuW8leWPt+abtOS4k+S4muOAj1xcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMTFcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTE0LFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IHRydWUsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLnibnmrornrKblj7cg5qCH6aKYKOWNleS4qilcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiKD88PVtcXFxcXFxcXHPjgIBdezAsNH0pKD86W+KYhuKYheKcpuKcp10uezEsMzB9fCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVsg44CAXXswLDR9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLimIbjgIHmmYvmsZ/kvZzogIXmnIDllpzmrKLnmoTmoLzlvI9cXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDEyXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xNSxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi56ugL+WNtyDluo/lj7cg5qCH6aKYXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIFxcXFxcXFxcdOOAgF17MCw0fSg/Oig/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWfFvljbfnq6BdW1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fSlbIOOAgF17MCw0fS57MCwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuWNt+S6lCDlvIDmupDnm5vkuJZcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDEzXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xNixcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiBmYWxzZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIumhtuagvOagh+mimFxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeXFxcXFxcXFxTLnsxLDIwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi5LiN6LaF6L+HMjDkuKrlrZfpobbmoLzlhpnnmoTpg73mmK/moIfpophcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDE0XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xNyxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiBmYWxzZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuWPjOagh+mimCjliY3lkJEpXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIig/bSkoPzw9WyBcXFxcXFxcXHTjgIBdezAsNH0p56ysW1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4feeroC57MCwzMH0kKD89W1xcXFxcXFxcc+OAgF17MCw4feesrFtcXFxcXFxcXGTpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH3nq6ApXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuesrOS4gOeroCDnnJ/mraPnmoTmoIfpopjlubblgYfoo4XmjaLooYznrKzkuIDnq6Ag6L+Z5Liq5LiN6KaBXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxNVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTgsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlj4zmoIfpopgo5ZCO5ZCRKVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoP20pKD88PVsgXFxcXFxcXFx044CAXXswLDR956ysW1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4feeroC57MCwzMH0kW1xcXFxcXFxcc+OAgF17MCw4fSnnrKxbXFxcXFxcXFxk6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi56ys5LiA56ugIOi/meS4quagh+mimOS4jeimgeW5tuWBh+ijheaNouihjOesrOS4gOeroOecn+ato+eahOagh+mimFxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMTZcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTE5LFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IHRydWUsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLkuablkI0g5ous5Y+3IOW6j+WPt1xcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeLnsxLDIwfVso77yIXVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH1bKe+8iV1bIOOAgFxcXFx0XXswLDR9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLmoIfpopjlkI7pnaLmlbDlrZfmnInmi6zlj7coMTIpXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxN1xcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMjAsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuS5puWQjSDluo/lj7dcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiXi57MSwyMH1bXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh9WyDjgIBcXFxcdF17MCw0fSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi5qCH6aKY5ZCO6Z2i5pWw5a2X5rKh5pyJ5ous5Y+3MTI0XFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxOFxcbiAgICB9XFxuXTtcXG5sZXQgTWF0Y2hlciA9IGphdmEudXRpbC5yZWdleC5NYXRjaGVyO1xcbmxldCBQYXR0ZXJuID0gamF2YS51dGlsLnJlZ2V4LlBhdHRlcm47XFxuXFxuZnVuY3Rpb24gZ2V0VG9jUnVsZShjb250ZW50KSB7XFxuICAgIGxldCBtYXhDcyA9IDE7XFxuICAgIGxldCB0b2NQYXR0ZXJuID0gbnVsbDtcXG4gICAgZm9yIChsZXQgdG9jUnVsZSBvZiBydWxlcykge1xcbiAgICAgICAgaWYgKCF0b2NSdWxlLmVuYWJsZSkgY29udGludWU7XFxuICAgICAgICBsZXQgcGF0dGVybiA9IFBhdHRlcm4uY29tcGlsZSh0b2NSdWxlLnJ1bGUsIFBhdHRlcm4uTVVMVElMSU5FKTtcXG4gICAgICAgIGxldCBtYXRjaGVyID0gcGF0dGVybi5tYXRjaGVyKGNvbnRlbnQpO1xcbiAgICAgICAgbGV0IGNzID0gMDtcXG4gICAgICAgIHdoaWxlIChtYXRjaGVyLmZpbmQoKSkge1xcbiAgICAgICAgICAgIGNzKys7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAoY3MgPj0gbWF4Q3MpIHtcXG4gICAgICAgICAgICBtYXhDcyA9IGNzO1xcbiAgICAgICAgICAgIHRvY1BhdHRlcm4gPSBwYXR0ZXJuO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiB0b2NQYXR0ZXJuO1xcbn1cXG4kLmV4cG9ydHMuZ2V0VG9jUnVsZSA9IGdldFRvY1J1bGU7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjVi7luK7liqlcIixcInBhdGhcIjpcImhlbHAudmlld1wiLFwicnVsZVwiOlwianM6XFxubGV0IGhlbHBUZXh0ID0ge1xcbiAgICBcXFwidHh0XFxcIjogYFxcbiAgICAgICAgPGgxIGlkPVxcXCJ0eHTmmK/ku4DkuYhcXFwiPlRYVOaYr+S7gOS5iD88L2gxPlxcbiAgICAgICAgPHA+PGEgaHJlZj1cXFwiaHR0cHM6Ly9iYWlrZS5iYWlkdS5jb20vaXRlbS90eHQvMTIxNzMzMFxcXCI+5oiR5bey57uP5biu5L2g55m+5bqm5LqGPC9hPu+8m+eugOWNleadpeivtOWwseaYr+S4gOenjeWCqOWtmOWwj+ivtOeahOaWh+S7tijmianlsZXlkI06dHh0KeOAgjwvcD5cXG4gICAgICAgIDxoMSBpZD1cXFwi5aaC5L2V55So6K+l5bCP56iL5bqP6ZiF6K+7dHh05bCP6K+0XFxcIj7lpoLkvZXnlKjor6XlsI/nqIvluo/pmIXor7t0eHTlsI/or7Q/PC9oMT5cXG4gICAgICAgIDxwPuWcqOS4u+mhtemdoiDil4lUWFQg55WM6Z2i5LiL77yM54K55Ye75a+85YWlVFhU77yM6YCJ5oup55uu5qCH5bCP6K+05paH5Lu2KHR4dOaWh+S7tu+8jDxlbT7or6Xmk43kvZzkuI3kvJrliKDpmaR0eHTmlofku7bvvIzogIzmmK9jb3B55LiA5Lu95Yiw5bCP56iL5bqP55qE6Lev5b6E5LiLPC9lbT4p77yM5a+85YWl5ZCO5YaN5ZyoIOKXiVRYVCDnlYzpnaLkuIvpgInmi6nmg7PopoHpmIXor7vnmoTlsI/or7TljbPlj6/jgII8L3A+XFxuXFxuICAgIGAsXFxuICAgIFxcXCJub3ZlbENvbWljXFxcIjogYFxcbiAgICAgICAgPGgxIGlkPVxcXCLov5nkuKrlsI/nqIvluo/mnInku4DkuYjnlKjvvJ9cXFwiPui/meS4quWwj+eoi+W6j+acieS7gOS5iOeUqO+8nzwvaDE+XFxuICAgICAgICA8dWw+XFxuICAgICAgICA8bGk+PHU+5Luj56CB5LiK5Li65YW25LuW5bCP56iL5bqPKOa8q+eUu+exuy/lsI/or7Tnsbsp5o+Q5L6b5LiL6L295o6l5Y+j44CCPC91PjwvbGk+XFxuICAgICAgICA8bGk+PHU+5pys5L2T5YWF5b2T6ZiF6K+75Zmo77yM5Y+v5Lul5rWP6KeI55So6K+l5bCP56iL5bqP5o+Q5L6b55qE5LiL6L295o6l5Y+jKOS4iumdoinvvIzkuIvovb3nmoTmvKvnlLsv5bCP6K+044CCPC91PjwvbGk+XFxuICAgICAgICA8bGk+PHU+5o+Q5L6bVFhU5qC85byP5bCP6K+05paH5Lu26Kej5p6Q5Yqf6IO944CCPC91PlxcbiAgICAgICAgPGgxIGlkPVxcXCLkuLrku4DkuYjliJfooajph4zku4DkuYjpg73msqHnlKhcXFwiPuS4uuS7gOS5iOWIl+ihqOmHjOS7gOS5iOmDveayoeeUqD88L2gxPlxcbiAgICAgICAgPHU+5Yid5qyh5L2/55So77yM5rKh5pyJ5b6I5q2j5bi45ZCn44CC8J+klDwvdT5cXG4gICAgICAgIDxoMSBpZD1cXFwi6K+l5aaC5L2V5re75Yqg5ryr55S75oiW5bCP6K+0XFxcIj7or6XlpoLkvZXmt7vliqDmvKvnlLso5oiW5bCP6K+0KT88L2gxPlxcbiAgICAgICAgPHU+IOWcqOS4gOS4quacieS4i+i9veWKn+iDveeahOWwj+eoi+W6jyjmvKvnlLvnsbsv5bCP6K+057G7KeS4reS4i+i9veS4gOacrOa8q+eUuy/lsI/or7TvvIzov5Tlm57or6Xop4TliJnljbPlj6/mtY/op4jjgII8L3U+PC9saT5cXG4gICAgICAgIDwvdWw+XFxuICAgIGBcXG59O1xcbnNldFBhZ2VUaXRsZShcXFwi5biu5YqpXFxcIik7XFxubGV0IGtleXdvcmQgPSBnZXRQYXJhbShcXFwia2V5d29yZFxcXCIpO1xcbmxldCB0ZXh0O1xcbmlmIChrZXl3b3JkID09PSB1bmRlZmluZWQgfHwgISh0ZXh0ID0gaGVscFRleHRba2V5d29yZF0pKSB7XFxuICAgIHNldFJlc3VsdChbe1xcbiAgICAgICAgdGl0bGU6ICc8aDEgc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFwiPui1hOaWmeS4jeingeWSrzwvaDE+JyxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbiAgICB9XSk7XFxufSBlbHNlIHtcXG4gICAgc2V0UmVzdWx0KFt7XFxuICAgICAgICB0aXRsZTogdGV4dCxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbiAgICB9XSk7XFxufVwifSx7XCJjb2xfdHlwZVwiOlwidGV4dF8xXCIsXCJuYW1lXCI6XCIjdi5UWFTmkJzntKJcIixcInBhdGhcIjpcInR4dFNlYXJjaC52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuXFxubGV0IHNlYXJjaFRlcm1zID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJzZWFyY2hUZXJtc1xcXCIpKTtcXG5zZXRQYWdlVGl0bGUoXFxcIuOAjFxcXCIgKyBzZWFyY2hUZXJtcyArIFxcXCLjgI3nmoTmkJzntKLnu5PmnpxcXFwiKTtcXG5sZXQgZGF0YSA9IEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCwgdW5kZWZpbmVkLCBcXFwiLnR4dFxcXCIpO1xcbmxldCB0ZXJtc0FyciA9IHNlYXJjaFRlcm1zLnNwbGl0KFxcXCJcXFwiKS5tYXAodCA9PiB0LnJlcGxhY2UoL1xcXFwqfFxcXFwufFxcXFw/fFxcXFwrfFxcXFwkfFxcXFxefFxcXFxbfFxcXFxdfFxcXFwofFxcXFwpfFxcXFx7fFxcXFx9fFxcXFx8fFxcXFwvfFxcXFxcXFxcL2csIGsgPT4gXFxcIlxcXFxcXFxcXFxcIiArIGspKTtcXG5sZXQgcmVnID0gbmV3IFJlZ0V4cCh0ZXJtc0Fyci5qb2luKFxcXCIuKlxcXCIpLCBcXFwiaVxcXCIpO1xcbmxldCBzZWFyY2hSZXN1bHQgPSBbXTtcXG5mb3IgKGxldCB0eHQgb2YgZGF0YSkge1xcbiAgICBpZiAocmVnLnRlc3QodHh0Lm5hbWUpKSB7XFxuICAgICAgICBzZWFyY2hSZXN1bHQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IHR4dC5uYW1lLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXCIsXFxuICAgICAgICAgICAgZGVzYzogdHh0LnBhdGgsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgcGF0aDogdHh0LnBhdGgsXFxuICAgICAgICAgICAgICAgIGlzQ2FjaGU6IHRydWUsXFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0eHQubmFtZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9XFxufVxcbmlmIChzZWFyY2hSZXN1bHQubGVuZ3RoID09PSAwKSB7XFxuICAgIHNlYXJjaFJlc3VsdC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOlxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcIixcXG4gICAgfSx7XFxuICAgICAgICBjb2xfdHlwZTpcXFwiYmlnX2JpZ19ibGFua19ibG9ja1xcXCIsXFxuICAgIH0se1xcbiAgICAgICAgY29sX3R5cGU6XFxcImJpZ19iaWdfYmxhbmtfYmxvY2tcXFwiLFxcbiAgICB9LHtcXG4gICAgICAgIGNvbF90eXBlOlxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcIixcXG4gICAgfSx7XFxuICAgICAgICB0aXRsZTogJzxoMiBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyO1xcXCI+8J+UjuayoeacieaJvuWIsOebuOWFs+S5puexjTwvaDI+JyxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbiAgICB9KTtcXG59XFxuc2V0UmVzdWx0KHNlYXJjaFJlc3VsdCk7XCJ9XSxcInBhcmFtc1wiOlwie1xcXCJpc0NhY2hlXFxcIjp0cnVlLFxcXCJwYXRoXFxcIjpcXFwiL3N0b3JhZ2UvZW11bGF0ZWQvMC9BbmRyb2lkL2RhdGEvY29tLmV4YW1wbGUuaGlrZXJ2aWV3L2ZpbGVzL0RvY3VtZW50cy9sb2NhbE1hbmFnZXIv5aSW5a+85bCP6K+0L+WBt+mmmemrmOaJiy50eHRcXFwiLFxcXCJ0aXRsZVxcXCI6XFxcIuWBt+mmmemrmOaJiy50eHRcXFwifVwiLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLmnKzlnLDotYTmupDnrqHnkIZcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL3BhZ2UvdHh0UGFyc2VyLnZpZXc/cnVsZT3mnKzlnLDotYTmupDnrqHnkIZcIixcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJmaW5kX3J1bGVcIjpcImpzOlxcbihmdW5jdGlvbigpIHtcXG4gICAgbGV0IHJlZ3MgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9yZWd1bGFyQ2hhcHRlci5mXFxcIik7XFxuICAgIGxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJwYXRoXFxcIikgfHwgXFxcIlxcXCIpIHx8IE1ZX1BBUkFNUy5wYXRoO1xcbiAgICBsZXQgY2hhcnN0ID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJjaGFyc3RcXFwiKSB8fCBcXFwiXFxcIikgfHwgTVlfUEFSQU1TLmNoYXJzdCB8fCBcXFwiVVRGLThcXFwiO1xcbiAgICBsZXQgaXNDYWNoZSA9IE1ZX1BBUkFNUy5pc0NhY2hlO1xcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcXFwiZmlsZTovL1xcXCIpKSB7XFxuICAgICAgICBwYXRoID0gXFxcImZpbGU6Ly9cXFwiICsgcGF0aDtcXG4gICAgfVxcbiAgICBpZihNWV9QQVJBTVMudGl0bGUpe1xcbiAgICAgICAgc2V0UGFnZVRpdGxlKE1ZX1BBUkFNUy50aXRsZSk7XFxuICAgIH1lbHNle1xcbiAgICAgICAgc2V0UGFnZVRpdGxlKCQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKS5nZXROYW1lKHBhdGgpKTtcXG4gICAgfVxcbiAgICBsZXQgbGF5b3V0ID0gW107XFxuICAgIGxldCBjaGFwdGVyTmFtZXMgPSBbXTtcXG4gICAgbGV0IGludGVydmFscyA9IFtdO1xcbiAgICBsZXQgaGFzUHJlZmFjZSA9IGZhbHNlO1xcbiAgICBpZiAoZmlsZUV4aXN0KHBhdGggKyBcXFwiLmpzb25cXFwiKSAmJiBpc0NhY2hlKSB7XFxuICAgICAgICB0cnkge1xcblxcbiAgICAgICAgICAgIGxldCBjID0gSlNPTi5wYXJzZShyZXF1ZXN0KHBhdGggKyBcXFwiLmpzb25cXFwiKSk7XFxuICAgICAgICAgICAgY2hhcHRlck5hbWVzID0gYy5jaGFwdGVyTmFtZXM7XFxuICAgICAgICAgICAgaW50ZXJ2YWxzID0gYy5pbnRlcnZhbHM7XFxuICAgICAgICAgICAgaGFzUHJlZmFjZSA9IGMuaGFzUHJlZmFjZTtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi6YeN5paw6Kej5p6Q55uu5b2VXFxcIixcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcIi5qc29uXFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTpmYWxzZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTpcXFwibGluZV9ibGFua1xcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICBzZXRSZXN1bHQoW3tcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ08c3Ryb25nPuebruW9leino+aekOWksei0pSjph43mlrDop6PmnpApPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcIi5qc29uXFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBzaG93TG9hZGluZyhcXFwi5q2j5Zyo6Kej5p6Q55uu5b2VXFxcIik7XFxuICAgICAgICBsZXQgdHh0ID0gcmVxdWVzdChwYXRoLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAvL1xcXCJjb250ZW50LXR5cGVcXFwiOiBcXFwidGV4dC9wbGFpbjsgY2hhcnN0PVxcXCIgKyBjaGFyc3RcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gcmVncy5nZXRUb2NSdWxlKHR4dCk7XFxuICAgICAgICBpZiAoIXBhdHRlcm4pIHtcXG4gICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgIHNldFJlc3VsdChbe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxzdHJvbmc+55uu5b2V6Kej5p6Q5aSx6LSlPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2soZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcih0eHQpO1xcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xcbiAgICAgICAgd2hpbGUgKG1hdGNoZXIuZmluZCgpKSB7XFxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gbWF0Y2hlci5zdGFydCgpO1xcbiAgICAgICAgICAgIGxldCBlbmQgPSBtYXRjaGVyLmVuZCgpO1xcbiAgICAgICAgICAgIGxldCB0ID0gbWF0Y2hlci5ncm91cCgpO1xcbiAgICAgICAgICAgIGlmIChwb2ludGVyID09PSAwICYmIHN0YXJ0ID4gMzApIHtcXG4gICAgICAgICAgICAgICAgaGFzUHJlZmFjZSA9IHRydWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNoYXB0ZXJOYW1lcy5wdXNoKHQpO1xcbiAgICAgICAgICAgIGludGVydmFscy5wdXNoKFtwb2ludGVyLCBzdGFydF0pO1xcbiAgICAgICAgICAgIHBvaW50ZXIgPSBlbmQ7XFxuICAgICAgICB9XFxuICAgICAgICBpbnRlcnZhbHMucHVzaChbcG9pbnRlciwgdHh0Lmxlbmd0aF0pO1xcbiAgICAgICAgaWYgKGlzQ2FjaGUpIHtcXG4gICAgICAgICAgICB3cml0ZUZpbGUocGF0aCArIFxcXCIuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KHtcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWVzOiBjaGFwdGVyTmFtZXMsXFxuICAgICAgICAgICAgICAgIGludGVydmFsczogaW50ZXJ2YWxzLFxcbiAgICAgICAgICAgICAgICBoYXNQcmVmYWNlOiBoYXNQcmVmYWNlXFxuICAgICAgICAgICAgfSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgfVxcblxcblxcbiAgICBpZiAoaGFzUHJlZmFjZSkge1xcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzWzBdO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5bqP6KiAXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1RYVFZpZXdlci52aWV3I2F1dG9QYWdlIyNyZWFkVGhlbWUjXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBjaGFwdGVyTmFtZTogXFxcIuW6j+iogFxcXCIsXFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBpbnRlcnZhbFswXSxcXG4gICAgICAgICAgICAgICAgZW5kOiBpbnRlcnZhbFsxXSxcXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcXG4gICAgICAgICAgICAgICAgY2hhcnN0OiBjaGFyc3RcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXB0ZXJOYW1lcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgbGV0IG5hbWUgPSBjaGFwdGVyTmFtZXNbaV07XFxuICAgICAgICBsZXQgaW50ZXJ2YWwgPSBpbnRlcnZhbHNbaSArIDFdO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBuYW1lLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvVFhUVmlld2VyLnZpZXcjYXV0b1BhZ2UjI3JlYWRUaGVtZSNcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIHN0YXJ0OiBpbnRlcnZhbFswXSxcXG4gICAgICAgICAgICAgICAgZW5kOiBpbnRlcnZhbFsxXSxcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWU6IG5hbWUsXFxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXFxuICAgICAgICAgICAgICAgIGNoYXJzdDogY2hhcnN0XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgc2V0UmVzdWx0KGxheW91dCk7XFxufSkoKVwiLFwiZ3JvdXBcIjpcIuKRoOaOqOiNkFwiLFwidWFcIjpcIm1vYmlsZVwiLFwicHJlUnVsZVwiOlwiXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNmLkZpbGXlt6XlhbdcXFwiLFxcXCJwYXRoXFxcIjpcXFwiRmlsZS5qc1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJjb25zdCBGaWxlID0gamF2YS5pby5GaWxlO1xcXFxuY29uc3Qge1xcXFxuICAgIEZpbGVzLFxcXFxuICAgIFBhdGhzLFxcXFxuICAgIFN0YW5kYXJkQ29weU9wdGlvbixcXFxcbiAgICBTdGFuZGFyZE9wZW5PcHRpb25cXFxcbn0gPSBqYXZhLm5pby5maWxlO1xcXFxuY29uc3QgamF2YVN0cmluZyA9IGphdmEubGFuZy5TdHJpbmc7XFxcXG5sZXQgamF2YVNjb3BlID0gbmV3IEphdmFJbXBvcnRlcihqYXZhLmlvLCBqYXZhLmxhbmcsIGphdmEubGFuZy5yZWZsZWN0LCBqYXZhLnV0aWwuVmVjdG9yKTtcXFxcblxcXFxuZnVuY3Rpb24gZGVsZXRlRmlsZXMoZmlsZU5hbWUpIHtcXFxcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKGZpbGVOYW1lKTtcXFxcbiAgICBpZiAoIWZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgLy9sb2coXFxcXFxcXCLliKDpmaTmlofku7blpLHotKXvvJpcXFxcXFxcIiArIGZpbGVOYW1lICsgXFxcXFxcXCLmlofku7bkuI3lrZjlnKhcXFxcXFxcIik7XFxcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICBpZiAoZmlsZS5pc0ZpbGUoKSkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZUZpbGUoZmlsZU5hbWUpO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZURpcmVjdG9yeShmaWxlTmFtZSk7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgIH1cXFxcblxcXFxufVxcXFxuLyoqXFxcXG4gKiDliKDpmaTljZXkuKrmlofku7ZcXFxcbiAqIFxcXFxuICogQHBhcmFtIGZpbGVOYW1lXFxcXG4gKiAgICAgICAgICAgIOiiq+WIoOmZpOaWh+S7tueahOaWh+S7tuWQjVxcXFxuICogQHJldHVybiDljZXkuKrmlofku7bliKDpmaTmiJDlip/ov5Tlm550cnVlLOWQpuWImei/lOWbnmZhbHNlXFxcXG4gKi9cXFxcbmZ1bmN0aW9uIGRlbGV0ZUZpbGUoZmlsZU5hbWUpIHtcXFxcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKGZpbGVOYW1lKTtcXFxcbiAgICBpZiAoZmlsZS5pc0ZpbGUoKSAmJiBmaWxlLmV4aXN0cygpKSB7XFxcXG4gICAgICAgIGZpbGUuZGVsZXRlKCk7XFxcXG4gICAgICAgIC8vbG9nKFxcXFxcXFwi5Yig6Zmk5Y2V5Liq5paH5Lu2XFxcXFxcXCIgKyBmaWxlTmFtZSArIFxcXFxcXFwi5oiQ5Yqf77yBXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICAvL2xvZyhcXFxcXFxcIuWIoOmZpOWNleS4quaWh+S7tlxcXFxcXFwiICsgZmlsZU5hbWUgKyBcXFxcXFxcIuWksei0pe+8gVxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcblxcXFxufVxcXFxuLyoqXFxcXG4gKiDliKDpmaTnm67lvZXvvIjmlofku7blpLnvvInku6Xlj4rnm67lvZXkuIvnmoTmlofku7ZcXFxcbiAqIFxcXFxuICogQHBhcmFtIGRpclxcXFxuICogICAgICAgICAgICDooqvliKDpmaTnm67lvZXnmoTmlofku7bot6/lvoRcXFxcbiAqIEByZXR1cm4g55uu5b2V5Yig6Zmk5oiQ5Yqf6L+U5ZuedHJ1ZSzlkKbliJnov5Tlm55mYWxzZVxcXFxuICovXFxcXG5mdW5jdGlvbiBkZWxldGVEaXJlY3RvcnkoZGlyKSB7XFxcXG4gICAgLy8g5aaC5p6cZGly5LiN5Lul5paH5Lu25YiG6ZqU56ym57uT5bC+77yM6Ieq5Yqo5re75Yqg5paH5Lu25YiG6ZqU56ymXFxcXG4gICAgaWYgKCFkaXIuZW5kc1dpdGgoRmlsZS5zZXBhcmF0b3IpKSB7XFxcXG4gICAgICAgIGRpciA9IGRpciArIEZpbGUuc2VwYXJhdG9yO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgZGlyRmlsZSA9IG5ldyBGaWxlKGRpcik7XFxcXG4gICAgLy8g5aaC5p6cZGly5a+55bqU55qE5paH5Lu25LiN5a2Y5Zyo77yM5oiW6ICF5LiN5piv5LiA5Liq55uu5b2V77yM5YiZ6YCA5Ye6XFxcXG4gICAgaWYgKCFkaXJGaWxlLmV4aXN0cygpIHx8ICFkaXJGaWxlLmlzRGlyZWN0b3J5KCkpIHtcXFxcbiAgICAgICAgLy9sb2coXFxcXFxcXCLliKDpmaTnm67lvZXlpLHotKVcXFxcXFxcIiArIGRpciArIFxcXFxcXFwi55uu5b2V5LiN5a2Y5Zyo77yBXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgfVxcXFxuICAgIGxldCBmbGFnID0gdHJ1ZTtcXFxcbiAgICAvLyDliKDpmaTmlofku7blpLnkuIvnmoTmiYDmnInmlofku7Yo5YyF5ous5a2Q55uu5b2VKVxcXFxuICAgIGxldCBmaWxlcyA9IGRpckZpbGUubGlzdEZpbGVzKCk7XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAvLyDliKDpmaTlrZDmlofku7ZcXFxcbiAgICAgICAgaWYgKGZpbGVzW2ldLmlzRmlsZSgpKSB7XFxcXG4gICAgICAgICAgICBmbGFnID0gZGVsZXRlRmlsZShmaWxlc1tpXS5nZXRBYnNvbHV0ZVBhdGgoKSk7XFxcXG4gICAgICAgICAgICBpZiAoIWZsYWcpIHtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBlbHNlIHsgLy8g5Yig6Zmk5a2Q55uu5b2VXFxcXG4gICAgICAgICAgICBmbGFnID0gZGVsZXRlRGlyZWN0b3J5KGZpbGVzW2ldLmdldEFic29sdXRlUGF0aCgpKTtcXFxcbiAgICAgICAgICAgIGlmICghZmxhZykge1xcXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIGlmICghZmxhZykge1xcXFxuICAgICAgICAvL2xvZyhcXFxcXFxcIuWIoOmZpOebruW9leWksei0pVxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbiAgICAvLyDliKDpmaTlvZPliY3nm67lvZVcXFxcbiAgICBpZiAoZGlyRmlsZS5kZWxldGUoKSkge1xcXFxuICAgICAgICAvL2xvZyhcXFxcXFxcIuWIoOmZpOebruW9lVxcXFxcXFwiICsgZGlyICsgXFxcXFxcXCLmiJDlip/vvIFcXFxcXFxcIik7XFxcXG4gICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIC8vbG9nKFxcXFxcXFwi5Yig6Zmk55uu5b2VXFxcXFxcXCIgKyBkaXIgKyBcXFxcXFxcIuWksei0pe+8gVxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuLy9jb3B55Y2V5Liq5paH5Lu2XFxcXG5mdW5jdGlvbiBjb3B5RmlsZShzb3VyY2UsIHRhcmdldCwgaXNDb3Zlcikge1xcXFxuICAgIGxldCBzb3VyY2VQYXRoID0gUGF0aHMuZ2V0KHNvdXJjZSk7XFxcXG4gICAgbGV0IHRhcmdldFBhdGggPSBQYXRocy5nZXQodGFyZ2V0KTtcXFxcbiAgICBsZXQgaXNFeGlzdCA9IEZpbGVzLmV4aXN0cyh0YXJnZXRQYXRoKTtcXFxcbiAgICBpZiAoRmlsZXMuaXNEaXJlY3Rvcnkoc291cmNlUGF0aCkgfHwgKGlzRXhpc3QgJiYgIWlzQ292ZXIpIHx8IChpc0V4aXN0ICYmIEZpbGVzLmlzRGlyZWN0b3J5KHRhcmdldFBhdGgpKSkge1xcXFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgfVxcXFxuICAgIHRyeSB7XFxcXG4gICAgICAgIGlmICghaXNFeGlzdCkge1xcXFxuICAgICAgICAgICAgRmlsZXMuY3JlYXRlRGlyZWN0b3JpZXModGFyZ2V0UGF0aC5nZXRQYXJlbnQoKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgaWYgKGlzQ292ZXIgPT09IHRydWUpIHtcXFxcbiAgICAgICAgICAgIEZpbGVzLmNvcHkoc291cmNlUGF0aCwgdGFyZ2V0UGF0aCwgU3RhbmRhcmRDb3B5T3B0aW9uLlJFUExBQ0VfRVhJU1RJTkcsIFN0YW5kYXJkQ29weU9wdGlvbi5DT1BZX0FUVFJJQlVURVMpO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgRmlsZXMuY29weShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBTdGFuZGFyZENvcHlPcHRpb24uQ09QWV9BVFRSSUJVVEVTKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZ2V0RmlsZVRpbWUocGF0aCkge1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUocGF0aCk7XFxcXG4gICAgbGV0IGxhc3RNb2RpZmllZCA9IGZpbGUubGFzdE1vZGlmaWVkKCk7XFxcXG4gICAgbGV0IGRhdGUgPSBuZXcgRGF0ZShsYXN0TW9kaWZpZWQpO1xcXFxuICAgIHJldHVybiBkYXRlLmdldFRpbWUoKTtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZ2V0TmFtZShwYXRoKSB7XFxcXG4gICAgcmV0dXJuIG5ldyBGaWxlKHBhdGgpLmdldE5hbWUoKSArIFxcXFxcXFwiXFxcXFxcXCI7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIGdldEZpbGVQYXRoKHBhdGgsIHR5cGUsIGV4cGFuZCkge1xcXFxuICAgIHR5cGUgPSB0eXBlIHx8IFxcXFxcXFwiZmlsZVxcXFxcXFwiO1xcXFxuICAgIGlmICghW1xcXFxcXFwiZmlsZVxcXFxcXFwiLCBcXFxcXFxcImRpclxcXFxcXFwiXS5pbmNsdWRlcyh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwi57G75Z6L6ZSZ6K+vXFxcXFxcXCIpO1xcXFxuICAgIGxldCBmaWxlVHlwZSA9IHR5cGUgPT09IFxcXFxcXFwiZmlsZVxcXFxcXFwiID8gXFxcXFxcXCJpc0ZpbGVcXFxcXFxcIiA6IFxcXFxcXFwiaXNEaXJlY3RvcnlcXFxcXFxcIjtcXFxcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKHBhdGgpO1xcXFxuICAgIGxldCBhcnJheSA9IGZpbGUubGlzdEZpbGVzKCkgfHwgW107XFxcXG4gICAgbGV0IHBhdGhMaXN0ID0gW107XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBpZiAoYXJyYXlbaV1bZmlsZVR5cGVdKCkpIHtcXFxcbiAgICAgICAgICAgIHBhdGhMaXN0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIG5hbWU6IGFycmF5W2ldLmdldE5hbWUoKSArIFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgcGF0aDogYXJyYXlbaV0uZ2V0UGF0aCgpICsgXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IE51bWJlcihhcnJheVtpXS5sYXN0TW9kaWZpZWQoKSksXFxcXG5cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIGlmIChleHBhbmQpIHtcXFxcbiAgICAgICAgcGF0aExpc3QgPSBwYXRoTGlzdC5maWx0ZXIoaXQgPT4gaXQubmFtZS5lbmRzV2l0aChleHBhbmQpKTtcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHBhdGhMaXN0O1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiByZW5hbWVGaWxlKGZyb21QYXRoLCBuYW1lKSB7XFxcXG4gICAgbGV0IGZyb21GaWxlID0gbmV3IEZpbGUoZnJvbVBhdGgpO1xcXFxuICAgIGxldCB0b0ZpbGUgPSBuZXcgRmlsZShmcm9tRmlsZS5nZXRQYXJlbnQoKSArIFxcXFxcXFwiL1xcXFxcXFwiICsgbmFtZSk7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgaWYgKCFmcm9tRmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmICh0b0ZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgICAgIGlmICghZGVsZXRlRmxpZXModG9QYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBGaWxlcy5tb3ZlKGZyb21GaWxlLnRvUGF0aCgpLCB0b0ZpbGUudG9QYXRoKCksIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HKTtcXFxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gbW92ZUZpbGVzKGZyb21QYXRoLCB0b1BhdGgpIHtcXFxcbiAgICBsZXQgZnJvbUZpbGUgPSBuZXcgRmlsZShmcm9tUGF0aCk7XFxcXG4gICAgbGV0IHRvRmlsZSA9IG5ldyBGaWxlKHRvUGF0aCk7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgaWYgKCFmcm9tRmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmICh0b0ZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgICAgIGlmICghZGVsZXRlRmxpZXModG9QYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBGaWxlcy5tb3ZlKGZyb21GaWxlLnRvUGF0aCgpLCB0b0ZpbGUudG9QYXRoKCksIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HKTtcXFxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZmlsZVdyaXRlKHBhdGgsIGNvbnRlbnQpIHtcXFxcbiAgICB3cml0ZUZpbGUoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoLCBjb250ZW50KVxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBmaWxlV3JpdGVBcHBlbmQocGF0aCwgY29udGVudCkge1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUocGF0aCk7XFxcXG4gICAgbGV0IHBhdGhzID0gZmlsZS50b1BhdGgoKTtcXFxcbiAgICBpZiAoZmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICBGaWxlcy53cml0ZShwYXRocywgbmV3IGphdmFTdHJpbmcoY29udGVudCkuZ2V0Qnl0ZXMoKSwgU3RhbmRhcmRPcGVuT3B0aW9uLkFQUEVORCk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCwgY29udGVudCk7XFxcXG4gICAgfVxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIoZmlsZSkge1xcXFxuICAgIGlmIChmaWxlLmlzRmlsZSgpKSB7XFxcXG4gICAgICAgIHJldHVybiBmaWxlLmxlbmd0aCgpO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgY2hpbGRyZW4gPSBmaWxlLmxpc3RGaWxlcygpO1xcXFxuICAgIGxldCB0b3RhbCA9IDA7XFxcXG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcXFxcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcXFxcbiAgICAgICAgICAgIHRvdGFsICs9IGdldFRvdGFsU2l6ZU9mRmlsZXNJbkRpcihjaGlsZCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHRvdGFsO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRGaWxlU2l6ZShmaWxlUGF0aCkge1xcXFxuICAgIC8vQnl0ZVxcXFxuICAgIGxldCBzaXplID0gZ2V0VG90YWxTaXplT2ZGaWxlc0luRGlyKG5ldyBGaWxlKGZpbGVQYXRoKSk7XFxcXG4gICAgaWYgKHNpemUgPCAwKSB7XFxcXG4gICAgICAgIHJldHVybiBudWxsO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgdW5pdEZvcm0gPSBbXFxcXFxcXCJCeXRlXFxcXFxcXCIsIFxcXFxcXFwiS0JcXFxcXFxcIiwgXFxcXFxcXCJNQlxcXFxcXFwiLCBcXFxcXFxcIkdCXFxcXFxcXCIsIFxcXFxcXFwiVEJcXFxcXFxcIl07XFxcXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHVuaXRGb3JtLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgIGlmIChzaXplID4gMTAyNCkge1xcXFxuICAgICAgICAgICAgc2l6ZSAvPSAxMDI0O1xcXFxuICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gc2l6ZS50b0ZpeGVkKDIpLnJlcGxhY2UoLyhcXFxcXFxcXC4wMCkkLywgXFxcXFxcXCJcXFxcXFxcIikgKyB1bml0Rm9ybVtpXTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICByZXR1cm4gXFxcXFxcXCJFUlJPUjrmlbDlgLzov4flpKdcXFxcXFxcIjtcXFxcbn1cXFxcbi8v5a6M5pW05ZCI5bm2XFxcXG4vKlxcXFxuZnVuY3Rpb24gZmlsZUNvbWJpbmUoZmlsZXNJbnB1dCwgZmlsZU91dCwgZXh0ZW5zaW9uLCBpbnRlcmNlcHQpIHtcXFxcbiAgICB3aXRoKGphdmFTY29wZSkge1xcXFxuICAgICAgICBjb25zdCBUTVBfQlVGRkVSX1NJWkUgPSAweDMwMDAwO1xcXFxuICAgICAgICBjb25zdCBCVUZGRVJfU0laRSA9IDB4MzAwMDAwO1xcXFxuICAgICAgICAvL+WQiOW5tuS4tOaXtuaWh+S7tlxcXFxuICAgICAgICBsZXQgaW5wdXRGaWxlID0gbmV3IEZpbGUoZmlsZXNJbnB1dCk7XFxcXG4gICAgICAgIGxldCB0bXBGaWxlID0gbmV3IEZpbGUoZmlsZU91dCArIFxcXFxcXFwiLnRtcFxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IHRvcyA9IG5ldyBCdWZmZXJlZE91dHB1dFN0cmVhbShuZXcgRmlsZU91dHB1dFN0cmVhbSh0bXBGaWxlKSk7XFxcXG4gICAgICAgIGxldCBpbnB1dEZpbGVzID0gaW5wdXRGaWxlLmxpc3RGaWxlcygpO1xcXFxuICAgICAgICBsZXQgdGJ5cyA9IEFycmF5Lm5ld0luc3RhbmNlKEJ5dGUuVFlQRSwgVE1QX0JVRkZFUl9TSVpFKTtcXFxcbiAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBpbnB1dEZpbGVzKSB7XFxcXG4gICAgICAgICAgICBpZiAoZmlsZS5nZXROYW1lKCkuZW5kc1dpdGgoZXh0ZW5zaW9uKSkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpcyA9IG5ldyBGaWxlSW5wdXRTdHJlYW0oZmlsZSk7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGxlbiA9IDA7XFxcXG4gICAgICAgICAgICAgICAgd2hpbGUgKChsZW4gPSBpcy5yZWFkKHRieXMpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB0b3Mud3JpdGUodGJ5cywgMCwgbGVuKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgaXMuY2xvc2UoKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB0b3MuY2xvc2UoKTtcXFxcbiAgICAgICAgLy/op4TliJnmm7/mjaLop4TliJk7XFxcXG4gICAgICAgIGxldCBvdXRGaWxlID0gbmV3IEZpbGUoZmlsZU91dCk7XFxcXG4gICAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0ID09PSBcXFxcXFxcImZ1bmN0aW9uXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGxldCB0aXMgPSBuZXcgRmlsZUlucHV0U3RyZWFtKHRtcEZpbGUpO1xcXFxuICAgICAgICAgICAgbGV0IG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKG91dEZpbGUpKTtcXFxcbiAgICAgICAgICAgIGxldCBsZW4gPSAwO1xcXFxuICAgICAgICAgICAgbGV0IGJ5cyA9IEFycmF5Lm5ld0luc3RhbmNlKEJ5dGUuVFlQRSwgQlVGRkVSX1NJWkUpO1xcXFxuICAgICAgICAgICAgd2hpbGUgKChsZW4gPSB0aXMucmVhZChieXMpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBuYnlzID0gaW50ZXJjZXB0KG5ldyBTdHJpbmcoYnlzLDAsbGVuKSk7XFxcXG4gICAgICAgICAgICAgICAgb3Mud3JpdGUobmJ5cywgMCwgbmJ5cy5sZW5ndGgpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgdG1wRmlsZS5kZWxldGUoKTtcXFxcbiAgICAgICAgICAgIHRpcy5jbG9zZSgpO1xcXFxuICAgICAgICAgICAgb3MuY2xvc2UoKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGlmIChvdXRGaWxlLmV4aXN0cygpKSB7XFxcXG4gICAgICAgICAgICAgICAgb3V0RmlsZS5kZWxldGUoKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHRtcEZpbGUucmVuYW1lVG8ob3V0RmlsZSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG59Ki9cXFxcbi8v5q6LXFxcXG5mdW5jdGlvbiBmaWxlUnVsZShmaWxlc0lucHV0LCBmaWxlT3V0LCBpbnRlcmNlcHQpIHtcXFxcbiAgICB3aXRoKGphdmFTY29wZSkge1xcXFxuICAgICAgICBjb25zdCBCVUZGRVJfU0laRSA9IDB4MzAwMDAwO1xcXFxuICAgICAgICBsZXQgdG1wRmlsZSA9IG5ldyBGaWxlKGZpbGVzSW5wdXQpO1xcXFxuICAgICAgICBpZiAoISh0bXBGaWxlLmV4aXN0cygpICYmIHRtcEZpbGUuaXNGaWxlKCkpKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGV0IG91dEZpbGUgPSBuZXcgRmlsZShmaWxlT3V0KTtcXFxcblxcXFxuICAgICAgICBsZXQgdGlzID0gbmV3IEZpbGVJbnB1dFN0cmVhbSh0bXBGaWxlKTtcXFxcbiAgICAgICAgbGV0IG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKG91dEZpbGUpKTtcXFxcbiAgICAgICAgbGV0IGxlbiA9IDA7XFxcXG4gICAgICAgIGxldCBieXMgPSBBcnJheS5uZXdJbnN0YW5jZShCeXRlLlRZUEUsIEJVRkZFUl9TSVpFKTtcXFxcbiAgICAgICAgd2hpbGUgKChsZW4gPSB0aXMucmVhZChieXMpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgbGV0IG5ieXMgPSBpbnRlcmNlcHQobmV3IFN0cmluZyhieXMsIDAsIGxlbikpO1xcXFxuICAgICAgICAgICAgb3Mud3JpdGUobmJ5cywgMCwgbmJ5cy5sZW5ndGgpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHRtcEZpbGUuZGVsZXRlKCk7XFxcXG4gICAgICAgIHRpcy5jbG9zZSgpO1xcXFxuICAgICAgICBvcy5jbG9zZSgpO1xcXFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIHJlYWRGaWxlKHBhdGgpIHtcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBsZXQgcGF0aHMgPSBQYXRocy5nZXQocGF0aCk7XFxcXG4gICAgICAgIGlmICghRmlsZXMuZXhpc3RzKHBhdGhzKSkgcmV0dXJuIFxcXFxcXFwiXFxcXFxcXCI7XFxcXG4gICAgICAgIHJldHVybiBTdHJpbmcobmV3IGphdmFTdHJpbmcoRmlsZXMucmVhZEFsbEJ5dGVzKHBhdGhzKSkpO1xcXFxuICAgIH0gY2F0Y2gge1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG59XFxcXG4kLmV4cG9ydHMgPSB7XFxcXG4gICAgZ2V0RmlsZVRpbWU6IChwYXRoKSA9PiBnZXRGaWxlVGltZShwYXRoKSxcXFxcbiAgICBnZXRGaWxlUGF0aDogKHBhdGgsIHR5cGUsIGV4cGFuZCkgPT4gZ2V0RmlsZVBhdGgocGF0aCwgdHlwZSwgZXhwYW5kKSxcXFxcbiAgICBkZWxldGVGaWxlczogKHBhdGgpID0+IGRlbGV0ZUZpbGVzKHBhdGgpLFxcXFxuICAgIHJlbmFtZUZpbGU6IChwYXRoLCBuYW1lKSA9PiByZW5hbWVGaWxlKHBhdGgsIG5hbWUpLFxcXFxuICAgIG1vdmVGaWxlczogKGZyb21QYXRoLCB0b1BhdGgpID0+IG1vdmVGaWxlcyhmcm9tUGF0aCwgdG9QYXRoKSxcXFxcbiAgICBmaWxlV3JpdGU6IChwYXRoLCBjb250ZW50KSA9PiBmaWxlV3JpdGUocGF0aCwgY29udGVudCksXFxcXG4gICAgZmlsZVdyaXRlQXBwZW5kOiAocGF0aCwgY29udGVudCkgPT4gZmlsZVdyaXRlQXBwZW5kKHBhdGgsIGNvbnRlbnQpLFxcXFxuICAgIGdldE5hbWU6IChwYXRoKSA9PiBnZXROYW1lKHBhdGgpLFxcXFxuICAgIGdldEZpbGVTaXplOiAoZmlsZVBhdGgpID0+IGdldEZpbGVTaXplKGZpbGVQYXRoKSxcXFxcbiAgICBmaWxlUnVsZTogKGZpbGVzSW5wdXQsIGZpbGVPdXQsIGludGVyY2VwdCkgPT4gZmlsZVJ1bGUoZmlsZXNJbnB1dCwgZmlsZU91dCwgaW50ZXJjZXB0KSxcXFxcbiAgICBjb3B5RmlsZTogKHNvdXJjZSwgdGFyZ2V0LCBpc0NvdmVyKSA9PiBjb3B5RmlsZShzb3VyY2UsIHRhcmdldCwgaXNDb3ZlciksXFxcXG4gICAgcmVhZEZpbGU6IChwYXRoKSA9PiByZWFkRmlsZShwYXRoKVxcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJ0ZXh0XzJcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu5LiL6L295YiX6KGoLeaZrumAmuS4i+i9vVxcXCIsXFxcInBhdGhcXFwiOlxcXCJkb3dubG9hZC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3Qgdmlld0NvbmZpZyA9IE9iamVjdC5hc3NpZ24oe1xcXFxuICAgIGNoYXB0ZXJMaXN0OiBbXSxcXFxcbiAgICBpbmZvOiB7fSxcXFxcbiAgICBkZWZhdWx0VmlldzogXFxcXFxcXCIwXFxcXFxcXCJcXFxcbn0sIE1ZX1BBUkFNUyk7XFxcXG52aWV3Q29uZmlnLmluZm8gPSBPYmplY3QuYXNzaWduKHtcXFxcbiAgICBydWxlTmFtZTogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICBib29rTmFtZTogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICBib29rVG9wUGljOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgIHBhcnNlQ29kZTogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICB0eXBlOiBcXFxcXFxcImNvbWljXFxcXFxcXCIsXFxcXG59LCB2aWV3Q29uZmlnLmluZm8pO1xcXFxubGV0IHtcXFxcbiAgICBjaGFwdGVyTGlzdCxcXFxcbiAgICBpbmZvLFxcXFxuICAgIGRlZmF1bHRWaWV3XFxcXG59ID0gdmlld0NvbmZpZztcXFxcbnNldFBhZ2VUaXRsZShcXFxcXFxcIumAieaLqeWZqHxcXFxcXFxcIiArIGluZm8uYm9va05hbWUpXFxcXG5cXFxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcblxcXFxuY29uc3QgZGVmX0RvVmlfU3R5bGUgPSBDb25maWcuZGVmX0RvVmlfU3R5bGU7XFxcXG5jb25zdCBNWV9JRCA9IGluZm8ucnVsZU5hbWUgKyBcXFxcXFxcIi8vXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lO1xcXFxuXFxcXG5cXFxcbmxldCBpc1N0YXJ0ID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIpO1xcXFxubGV0IHZpZXdNb2RlID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjp2aWV3TW9kZVxcXFxcXFwiLCBkZWZhdWx0Vmlldyk7XFxcXG5sZXQgaXNSZXZlcnNlID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1JldmVyc2VcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxubGV0IHRhZ0ZpbHRlciA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6dGFnRmlsdGVyXFxcXFxcXCIsIENvbmZpZy5kZWZfRG9WaV9UeXBlKTtcXFxcblxcXFxuYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKE1ZX0lEKSA9PiB7XFxcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOmxvYWRpbmdUZWFtXFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjp2aWV3TW9kZVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6Y29tcGxldGVkXFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOnRhZ0ZpbHRlclxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6cGFnZU51bVxcXFxcXFwiKTtcXFxcbn0sIE1ZX0lEKSk7XFxcXG5cXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcblxcXFxuaWYgKGlzU3RhcnQgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjp2aWV3TW9kZVxcXFxcXFwiLCBkZWZhdWx0Vmlldyk7XFxcXG4gICAgdmlld01vZGUgPSBcXFxcXFxcIjFcXFxcXFxcIjtcXFxcbn1cXFxcblxcXFxubGV0IGJhY2t1cENoYXB0ZXJMaXN0ID0gY2hhcHRlckxpc3Q7XFxcXG5pZiAodHlwZW9mIGNoYXB0ZXJMaXN0ID09PSBcXFxcXFxcInN0cmluZ1xcXFxcXFwiKSB7XFxcXG4gICAgY2hhcHRlckxpc3QgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBjaGFwdGVyTGlzdCkgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbn1cXFxcbmxldCBjaGFwdGVyQWxsID0gY2hhcHRlckxpc3Q7XFxcXG5jaGFwdGVyTGlzdCA9IGNoYXB0ZXJMaXN0Lm1hcCgoaXRlbSwgQ0lEKSA9PiB7XFxcXG4gICAgaXRlbS5DSUQgPSBDSUQ7XFxcXG4gICAgcmV0dXJuIGl0ZW07XFxcXG59KTtcXFxcbmxldCBwYWdlTnVtID0gTnVtYmVyKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6cGFnZU51bVxcXFxcXFwiLCBcXFxcXFxcIjFcXFxcXFxcIikpO1xcXFxubGV0IGNoYXB0ZXJDaHVuayA9IFtjaGFwdGVyTGlzdF0uY29uY2F0KFRvb2wuY2h1bmsoY2hhcHRlckxpc3QsIENvbmZpZy52aWV3UGFnZVNpemUpKTtcXFxcbmNoYXB0ZXJMaXN0ID0gY2hhcHRlckNodW5rW3BhZ2VOdW1dIHx8IFtdO1xcXFxuXFxcXG5mdW5jdGlvbiBzZXRUeXBlKCkge1xcXFxuICAgIGxldCBzZXQgPSAodGFnLCBwdXQpID0+IHtcXFxcbiAgICAgICAgcHV0TXlWYXIocHV0LCB0YWcpO1xcXFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgIH07XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogMCA9PSBwYWdlTnVtID8gXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIChcXFxcXFxcIuWFqOmDqChcXFxcXFxcIiArIGNoYXB0ZXJBbGwubGVuZ3RoICsgXFxcXFxcXCIpXFxcXFxcXCIpLmZvbnRjb2xvcihcXFxcXFxcIiMyM0FENkZcXFxcXFxcIikgOiBcXFxcXFxcIuWFqOmDqChcXFxcXFxcIiArIGNoYXB0ZXJBbGwubGVuZ3RoICsgXFxcXFxcXCIpXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKHNldCwgMCwgTVlfSUQgKyBcXFxcXFxcIjpwYWdlTnVtXFxcXFxcXCIpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoYXB0ZXJDaHVuay5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBsZXQgdGFnVGV4dCA9IChpIC0gMSkgKiBDb25maWcudmlld1BhZ2VTaXplICsgXFxcXFxcXCItXFxcXFxcXCIgKyAoKGkgLSAxKSAqIENvbmZpZy52aWV3UGFnZVNpemUgKyBjaGFwdGVyQ2h1bmtbaV0ubGVuZ3RoKTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGkgPT0gcGFnZU51bSA/IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyB0YWdUZXh0LmZvbnRjb2xvcihcXFxcXFxcIiMyM0FENkZcXFxcXFxcIikgOiB0YWdUZXh0LFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoc2V0LCBpLCBNWV9JRCArIFxcXFxcXFwiOnBhZ2VOdW1cXFxcXFxcIiksXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiYmxhbmtfYmxvY2tcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHRhZ0ZpbHRlciA9PT0gXFxcXFxcXCIwXFxcXFxcXCIgPyBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLlhajpg6hcXFxcXFxcIi5mb250Y29sb3IoXFxcXFxcXCIjMjNBRDZGXFxcXFxcXCIpIDogXFxcXFxcXCLlhajpg6hcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoc2V0LCBcXFxcXFxcIjBcXFxcXFxcIiwgTVlfSUQgKyBcXFxcXFxcIjp0YWdGaWx0ZXJcXFxcXFxcIiksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHRhZ0ZpbHRlciA9PT0gXFxcXFxcXCIxXFxcXFxcXCIgPyBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLmnKrkuIvovb1cXFxcXFxcIi5mb250Y29sb3IoXFxcXFxcXCIjMjNBRDZGXFxcXFxcXCIpIDogXFxcXFxcXCLmnKrkuIvovb1cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoc2V0LCBcXFxcXFxcIjFcXFxcXFxcIiwgTVlfSUQgKyBcXFxcXFxcIjp0YWdGaWx0ZXJcXFxcXFxcIiksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHRhZ0ZpbHRlciA9PT0gXFxcXFxcXCIyXFxcXFxcXCIgPyBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLlt7LkuIvovb1cXFxcXFxcIi5mb250Y29sb3IoXFxcXFxcXCIjMjNBRDZGXFxcXFxcXCIpIDogXFxcXFxcXCLlt7LkuIvovb1cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoc2V0LCBcXFxcXFxcIjJcXFxcXFxcIiwgTVlfSUQgKyBcXFxcXFxcIjp0YWdGaWx0ZXJcXFxcXFxcIiksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxufVxcXFxubGV0IGNoYXB0ZXJUZWFtID0gW107XFxcXG5sZXQgcmVjb3JkID0gW107XFxcXG5pZiAoaW5mby50eXBlID09PSBcXFxcXFxcImNvbWljXFxcXFxcXCIpIHtcXFxcbiAgICBsZXQgbGF6eSA9ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxcXG4gICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChpbnB1dCk7XFxcXG4gICAgICAgIGxldCBwaWNsaXN0ID0gZmlsZWxpc3QubWFwKChpdGVtLCBpKSA9PiBcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIGlucHV0ICsgXFxcXFxcXCIvXFxcXFxcXCIgKyAoaSArIDEpICsgXFxcXFxcXCIuanBnXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJwaWNzOi8vXFxcXFxcXCIgKyBwaWNsaXN0LmpvaW4oXFxcXFxcXCImJlxcXFxcXFwiKTtcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIGZ1bmN0aW9uIGNvbUZ1bihpLCBpdGVtKSB7XFxcXG4gICAgICAgIGxldCByb290UGF0aCA9IENvbmZpZy5jb21pY1BhdGggKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGkgKyBcXFxcXFxcIiRBJFxcXFxcXFwiICsgaXRlbS50aXRsZTtcXFxcbiAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwi4oCd4oCdXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IHJvb3RQYXRoICsgbGF6eSxcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpLFxcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBkZWZfRG9WaV9TdHlsZVxcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnW2luZm8udHlwZSArIFxcXFxcXFwiUGF0aFxcXFxcXFwiXSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSwgXFxcXFxcXCJkaXJcXFxcXFxcIikuZm9yRWFjaCgoZmlsZSkgPT4ge1xcXFxuICAgICAgICBsZXQgYXR0ID0gVG9vbC5zcGxpdChmaWxlLm5hbWUsIFxcXFxcXFwiJFxcXFxcXFwiLCAyKTtcXFxcbiAgICAgICAgaWYgKGF0dC5sZW5ndGggPT09IDMgJiYgYXR0WzFdID09PSAoXFxcXFxcXCJBXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICByZWNvcmQucHVzaChhdHRbMl0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG59IGVsc2Uge1xcXFxuICAgIGZ1bmN0aW9uIGNvbUZ1bihpLCBpdGVtKSB7XFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJxcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9Ob3ZlbE1haW5Cb2R5I2F1dG9QYWdlIyNyZWFkVGhlbWUjXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI1xcXFxcXFwiICsgaSxcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBDb25maWcubm92ZWxQYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpICsgXFxcXFxcXCIkQSRcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIi50eHRcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZVxcXFxuICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBkZWZfRG9WaV9TdHlsZVxcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnW2luZm8udHlwZSArIFxcXFxcXFwiUGF0aFxcXFxcXFwiXSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSwgXFxcXFxcXCJmaWxlXFxcXFxcXCIsIFxcXFxcXFwiLnR4dFxcXFxcXFwiKS5mb3JFYWNoKChmaWxlKSA9PiB7XFxcXG4gICAgICAgIGxldCBhdHQgPSBUb29sLnNwbGl0KGZpbGUubmFtZSwgXFxcXFxcXCIkXFxcXFxcXCIsIDIpO1xcXFxuICAgICAgICBpZiAoYXR0Lmxlbmd0aCA9PT0gMyAmJiBhdHRbMV0gPT09IChcXFxcXFxcIkFcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgIHJlY29yZC5wdXNoKGF0dFsyXS5zbGljZSgwLCBhdHRbMl0ubGFzdEluZGV4T2YoXFxcXFxcXCIuXFxcXFxcXCIpKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gY2xpY2tEb3dubG9hZChpdGVtLCBpbmZvLCBNWV9JRCwgaSkge1xcXFxuICAgIGxldCBsb2FkaW5nVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpsb2FkaW5nVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgbGV0IEVsZW1lbnRJbmRleCA9IGxvYWRpbmdUZWFtLmluZGV4T2YoaSk7XFxcXG4gICAgaWYgKEVsZW1lbnRJbmRleCA+IC0xKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9vVxcXFxcXFwiO1xcXFxuXFxcXG4gICAgbG9hZGluZ1RlYW0ucHVzaChpKTtcXFxcbiAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmxvYWRpbmdUZWFtXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGxvYWRpbmdUZWFtKSk7XFxcXG4gICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAmOKAmFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwi4oCZ4oCZXFxcXFxcXCIsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcIiNcXFxcXFxcIiArIGlcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxldCByZXN1bHQgPSBcXFxcXFxcInRvYXN0Oi8v5LiL6L295aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgdG9hc3QoXFxcXFxcXCLlvIDlp4vkuIvovb06XFxcXFxcXCIgKyBpdGVtLnRpdGxlKTtcXFxcbiAgICAgICAgbGV0IGRvd25sb2FkID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0Rvd25sb2FkLmV4ZS5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgcmVzdWx0ID0gZG93bmxvYWQoaXRlbSwgaW5mbywgTVlfSUQsIGkpO1xcXFxuICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwi4oCd4oCdXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwidG9hc3Q6Ly/lt7LkuIvovb1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICB9IGZpbmFsbHkge1xcXFxuICAgICAgICBsb2FkaW5nVGVhbS5zcGxpY2UoRWxlbWVudEluZGV4LCAxKTtcXFxcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpsb2FkaW5nVGVhbVxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShsb2FkaW5nVGVhbSkpO1xcXFxuICAgIH1cXFxcbiAgICByZXR1cm4gcmVzdWx0O1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBzaW5nbGVWaWV3KCkge1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Y+N6L2s5YiX6KGoXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChpc1JldmVyc2UsIE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmlzUmV2ZXJzZVxcXFxcXFwiLCBpc1JldmVyc2UgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIGlzUmV2ZXJzZSwgTVlfSUQpLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2lkPTMzbnZEcWJISDdIVyZzaXplPTQ4JmZvcm1hdD1naWYmdG9rZW49XFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fMlxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLmibnph4/kuIvovb1cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgbG9hZGluZ1RlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6bG9hZGluZ1RlYW1cXFxcXFxcIiwgXFxcXFxcXCJbXVxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYgKGxvYWRpbmdUZWFtLmxlbmd0aCA+IDApIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6L+Y5pyJ5Lu75Yqh5rKh5pyJ5a6M5oiQXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBpZiAoZ2V0QXBwVmVyc2lvbigpIDwgMjU5NCkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mnKrlvIDmlL5cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6dmlld01vZGVcXFxcXFxcIiwgXFxcXFxcXCIxXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuXFxcXG4gICAgICAgIH0sIE1ZX0lEKSxcXFxcbiAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9mb3JtYXQ9Z2lmJmlkPTB1YWZhTU56eGo4OCZ0b2tlbj1cXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl8yXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBzZXRUeXBlKCk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsZXQgbG9hZGluZ1RlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6bG9hZGluZ1RlYW1cXFxcXFxcIiwgXFxcXFxcXCJbXVxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgIGZvciAobGV0IGkgPSAwLCBpdGVtID0gY2hhcHRlckxpc3RbMF07IGkgPCBjaGFwdGVyTGlzdC5sZW5ndGg7IGl0ZW0gPSBjaGFwdGVyTGlzdFsrK2ldKSB7XFxcXG4gICAgICAgIGxldCBpc19kb3dubG9hZCA9IHJlY29yZC5pbmNsdWRlcyhpdGVtLnRpdGxlKTtcXFxcbiAgICAgICAgaWYgKGlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGNoYXB0ZXJUZWFtLnB1c2goY29tRnVuKGl0ZW0uQ0lELCBpdGVtKSk7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcXFxcXCIyXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGNoYXB0ZXJUZWFtLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBsb2FkaW5nVGVhbS5pbmNsdWRlcyhpdGVtLkNJRCkgPyBcXFxcXFxcIuKAmOKAmFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwi4oCZ4oCZXFxcXFxcXCIgOiBpdGVtLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKGNsaWNrRG93bmxvYWQsIGl0ZW0sIGluZm8sIE1ZX0lELCBpdGVtLkNJRCksXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpdGVtLkNJRFxcXFxuICAgICAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGRlZl9Eb1ZpX1N0eWxlXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gY2xpY2tDaG9vc2UodGl0bGUsIE1ZX0lELCBpKSB7XFxcXG4gICAgbGV0IGlzU3RhcnQgPSBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmlzU3RhcnRcXFxcXFxcIik7XFxcXG4gICAgaWYgKGlzU3RhcnQgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9vS4uLlxcXFxcXFwiO1xcXFxuICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICBsZXQgRWxlbWVudEluZGV4ID0gYmF0Y2hUZWFtLmluZGV4T2YoaSk7XFxcXG4gICAgaWYgKEVsZW1lbnRJbmRleCA+IC0xKSB7XFxcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcIiNcXFxcXFxcIiArIGlcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGJhdGNoVGVhbS5zcGxpY2UoRWxlbWVudEluZGV4LCAxKTtcXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAmOKAmFxcXFxcXFwiICsgdGl0bGUgKyBcXFxcXFxcIuKAmeKAmVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcIiNcXFxcXFxcIiArIGlcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGJhdGNoVGVhbS5wdXNoKGkpO1xcXFxuICAgIH1cXFxcbiAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShiYXRjaFRlYW0pKTtcXFxcbiAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIGJhdGNoVmlldygpIHtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuWNlemAieS4i+i9vVxcXFxcXFwiLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2lkPVBJaWN2RjZlYnpNbiZzaXplPTQ4JmZvcm1hdD1naWYmdG9rZW49XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChNWV9JRCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiKSA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5q2j5Zyo5om56YeP5LiL6L29XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnZpZXdNb2RlXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIE1ZX0lEKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsZXQgc3RhcnQgPSBDb25maWcudmlld1BhZ2VTaXplICogTWF0aC5tYXgocGFnZU51bSAtIDEsIDApO1xcXFxuICAgIGxldCBlbmQgPSBzdGFydCArIGNoYXB0ZXJMaXN0Lmxlbmd0aDtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIumAieaLqeWFqOmDqFxcXFxcXFwiLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9MUhWY0hMb056cml0JnRva2VuPVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoc3RhcnQsIGVuZCwgTVlfSUQpID0+IHtcXFxcbiAgICAgICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGxldCBjaG9vc2VUZWFtID0gVG9vbC5yYW5nZShzdGFydCwgZW5kKTtcXFxcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGJhdGNoVGVhbSA9IEFycmF5LmZyb20obmV3IFNldChiYXRjaFRlYW0uY29uY2F0KGNob29zZVRlYW0pKSk7XFxcXG4gICAgICAgICAgICBsZXQgY29tcGxldGVkID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmNvbXBsZXRlZFxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKChpKSA9PiAhY29tcGxldGVkLmluY2x1ZGVzKGkpKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG4gICAgICAgIH0sIHN0YXJ0LCBlbmQsIE1ZX0lEKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuWPlua2iOWFqOmDqFxcXFxcXFwiLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9SHpFalBwSTNOTDhEJnRva2VuPVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoc3RhcnQsIGVuZCwgTVlfSUQpID0+IHtcXFxcbiAgICAgICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGxldCBjaG9vc2VUZWFtID0gbmV3IFNldChUb29sLnJhbmdlKHN0YXJ0LCBlbmQpKTtcXFxcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGJhdGNoVGVhbSA9IGJhdGNoVGVhbS5maWx0ZXIoeCA9PiAhY2hvb3NlVGVhbS5oYXMoeCkpO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoYmF0Y2hUZWFtKSk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICAgICAgfSwgc3RhcnQsIGVuZCwgTVlfSUQpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uX3NtYWxsXzRcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi56Gu6K6k6YCJ5LitXFxcXFxcXCIsXFxcXG4gICAgICAgIHBpY191cmw6IFxcXFxcXFwiaHR0cHM6Ly9pbWcuaWNvbnM4LmNvbS8/Zm9ybWF0PWdpZiZpZD10TXJ2dGM2VDloVmImdG9rZW49XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChNWV9JRCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiLCBcXFxcXFxcIi0xXFxcXFxcXCIpICE9PSBcXFxcXFxcIi0xXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9vS4uLlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgbGV0IGJhdGNoVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIiwgXFxcXFxcXCJbXVxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIGJhdGNoVGVhbS5sZW5ndGggPT09IDAgPyBcXFxcXFxcInRvYXN0Oi8v5L2g6L+Y5LuA5LmI6YO95rKh5pyJ6YCJXFxcXFxcXCIgOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9CYXRjaC52aWV3I25vUmVmcmVzaCMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjXFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIE1ZX0lEKSxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIG5ld1dpbmRvdzogdHJ1ZSxcXFxcbiAgICAgICAgICAgIHdpbmRvd0lkOiBNWV9JRCArIFxcXFxcXFwiLy/mibnph4/kuIvovb1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIE1ZX0lEOiBNWV9JRCxcXFxcbiAgICAgICAgICAgIGNoYXB0ZXJMaXN0OiBiYWNrdXBDaGFwdGVyTGlzdCxcXFxcbiAgICAgICAgICAgIGluZm86IGluZm9cXFxcbiAgICAgICAgfSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBzZXRUeXBlKCk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgbGV0IGNvbXBsZXRlZCA9IFtdO1xcXFxuICAgIGZvciAobGV0IGkgPSAwLCBpdGVtID0gY2hhcHRlckxpc3RbMF07IGkgPCBjaGFwdGVyTGlzdC5sZW5ndGg7IGl0ZW0gPSBjaGFwdGVyTGlzdFsrK2ldKSB7XFxcXG4gICAgICAgIGxldCBpc19kb3dubG9hZCA9IHJlY29yZC5pbmNsdWRlcyhpdGVtLnRpdGxlKTtcXFxcbiAgICAgICAgaWYgKGlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGNvbXBsZXRlZC5wdXNoKGl0ZW0uQ0lEKTtcXFxcbiAgICAgICAgICAgIGNoYXB0ZXJUZWFtLnB1c2goY29tRnVuKGl0ZW0uQ0lELCBpdGVtKSk7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcXFxcXCIyXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGNoYXB0ZXJUZWFtLnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBiYXRjaFRlYW0uaW5jbHVkZXMoaXRlbS5DSUQpID8gXFxcXFxcXCLigJjigJhcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIuKAmeKAmVxcXFxcXFwiIDogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZShjbGlja0Nob29zZSwgaXRlbS50aXRsZSwgTVlfSUQsIGl0ZW0uQ0lEKSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcIiNcXFxcXFxcIiArIGl0ZW0uQ0lEXFxcXG4gICAgICAgICAgICAgICAgfSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6Y29tcGxldGVkXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGNvbXBsZXRlZCkpO1xcXFxufVxcXFxuc3dpdGNoICh2aWV3TW9kZSkge1xcXFxuICAgIGNhc2UgXFxcXFxcXCIwXFxcXFxcXCI6XFxcXG4gICAgICAgIHNpbmdsZVZpZXcoKTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG4gICAgY2FzZSBcXFxcXFxcIjFcXFxcXFxcIjpcXFxcbiAgICAgICAgYmF0Y2hWaWV3KCk7XFxcXG4gICAgICAgIGJyZWFrO1xcXFxufVxcXFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICBjaGFwdGVyVGVhbS5yZXZlcnNlKCk7XFxcXG59XFxcXG5sYXlvdXQucHVzaC5hcHBseShsYXlvdXQsIGNoYXB0ZXJUZWFtKTtcXFxcbnNldFJlc3VsdChsYXlvdXQpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuaJuemHj+S4i+i9veWZqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJCYXRjaC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IHtcXFxcbiAgICBjaGFwdGVyTGlzdCxcXFxcbiAgICBpbmZvLFxcXFxuICAgIE1ZX0lEXFxcXG59ID0gTVlfUEFSQU1TO1xcXFxuc2V0UGFnZVRpdGxlKFxcXFxcXFwi5LiL6L295ZmofFxcXFxcXFwiK2luZm8uYm9va05hbWUpO1xcXFxuYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKE1ZX0lEKSA9PiB7XFxcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOmlzU3RhcnRcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIpO1xcXFxuICAgIHJlZnJlc2hQYWdlKCk7XFxcXG59LCBNWV9JRCkpO1xcXFxuXFxcXG5sZXQgaXNTdGFydCA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG5sZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxubGV0IGxheW91dCA9IFtdO1xcXFxuXFxcXG5sZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG5pZih0eXBlb2YgY2hhcHRlckxpc3QgPT09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIpe1xcXFxuICAgIGNoYXB0ZXJMaXN0ID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiK2NoYXB0ZXJMaXN0KXx8XFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbn1cXFxcbmxldCBjaGFwdGVyVGVhbSA9IGJhdGNoVGVhbS5tYXAodiA9PiB7XFxcXG4gICAgbGV0IGNoYXB0ZXJJdGVtID0gY2hhcHRlckxpc3Rbdl07XFxcXG4gICAgY2hhcHRlckl0ZW0uQ0lEID0gdjtcXFxcbiAgICByZXR1cm4gY2hhcHRlckl0ZW07XFxcXG59KTtcXFxcbmlmIChpc1N0YXJ0ID09PSBcXFxcXFxcIjBcXFxcXFxcIikge1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5byA5aeL5LiL6L29W1xcXFxcXFwiICsgY2hhcHRlclRlYW0ubGVuZ3RoICsgXFxcXFxcXCJdXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChjaGFwdGVyVGVhbSwgaW5mbywgTVlfSUQpID0+IHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiLCBcXFxcXFxcIjFcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICBsZXQgZG93bmxvYWQgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQmF0Y2hTdGF0aXN0aWNzLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIGRvd25sb2FkKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkgfHwgXFxcXFxcXCJ0b2FzdDovL+S4i+i9vemUmeivr1xcXFxcXFwiO1xcXFxuICAgICAgICB9LCBjaGFwdGVyVGVhbSwgaW5mbywgTVlfSUQpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85byA5aeL5LiL6L29XFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Lu75Yqh5YiX6KGo77yaXFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiLFxcXFxuICAgIH0pO1xcXFxuICAgIGZvciAobGV0IGl0ZW0gb2YgY2hhcHRlclRlYW0pIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuXFxcXG59IGVsc2Uge1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5LiL6L296L+b5bqmOjAvXFxcXFxcXCIrY2hhcHRlclRlYW0ubGVuZ3RoLFxcXFxuICAgICAgICBkZXNjOiBcXFxcXFxcIuKAnOKAnOKAneKAneKWh+KWh+KWh+KWh+KWh+KWh+KWh+KWh+KWh+KWh1xcXFxcXFwiLmZvbnRjb2xvcihcXFxcXFxcIiNlNWUxZTRcXFxcXFxcIikrXFxcXFxcXCIgMCVcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCJ8fOS4i+i9vei/m+W6plxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuWQjuWPsOS4i+i9vVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6IFxcXFxcXFwiZnVuYzovL2JhY2tncm91bmRcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFtcXFxcXFxcIlvlj5bmtojkuIvovb1dXFxcXFxcXCIsIFxcXFxcXFwiW+ato+WcqOWBnOatoi4uLl1cXFxcXFxcIiwgXFxcXFxcXCJb6L+U5ZueXVxcXFxcXFwiLCBcXFxcXFxcIlvlpITnkIblpLHotKVdXFxcXFxcXCIsIFxcXFxcXFwiW+mHjeaWsOW8gOWni11cXFxcXFxcIl1bc3RhdHVzXSxcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYgKHN0YXR1cyA9PT0gXFxcXFxcXCIwXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjFcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIlvmraPlnKjlgZzmraIuLi5dXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L295o6n5Yi2XFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5q2j5Zyo5Y+W5raI5LiL6L295Lu75YqhXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOaaguWBnC4uLlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFxcXFxcXFwiMlxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5bey6YCA5Ye65LiL6L295ZmoXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKFtcXFxcXFxcIjNcXFxcXFxcIiwgXFxcXFxcXCI0XFxcXFxcXCJdLmluY2x1ZGVzKHN0YXR1cykpIHtcXFxcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpsb2dcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+mHjeaWsOeCueWHu+S4i+i9vVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0sIE1ZX0lEKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L295o6n5Yi2XFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCI8c3Ryb25nPuS4i+i9veaXpeW/lzwvc3Ryb25nPlxcXFxcXFwiLmJpZygpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCIsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85pel5b+XXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6XFxcXFxcXCLigJzigJzigJ3igJ0kPlxcXFxcXFwiK1xcXFxcXFwi5byA5aeL5LiL6L29Li4uLi4uXFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiIzAwZmYwMFxcXFxcXFwiKSxcXFxcbiAgICAgICAgdXJsOlxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI2xvZyMwXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTpmYWxzZVxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG59XFxcXG5cXFxcbnNldFJlc3VsdChsYXlvdXQpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNmZy7mibnph4/kuIvovb3nu5/orqFcXFwiLFxcXCJwYXRoXFxcIjpcXFwiQmF0Y2hTdGF0aXN0aWNzLmpzXFxcIixcXFwicnVsZVxcXCI6XFxcImNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcblxcXFxuZnVuY3Rpb24gdGFzayh0YXNrUGFyYW0pIHtcXFxcbiAgICBsZXQgcmVzdWx0ID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0JhdGNoLmV4ZS5qc1xcXFxcXFwiKSh0YXNrUGFyYW0pO1xcXFxuICAgIHJldHVybiByZXN1bHQ7XFxcXG59XFxcXG5cXFxcbiQuZXhwb3J0cyA9IGZ1bmN0aW9uKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkge1xcXFxuICAgIGlmIChjaGFwdGVyVGVhbS5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/nqbrnmoTkuIvovb3pmJ/liJdcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG4gICAgdmFyIGNvdW50ID0gMDtcXFxcbiAgICB2YXIgdGFza0NvdW50ID0gY2hhcHRlclRlYW0ubGVuZ3RoO1xcXFxuICAgIHZhciBzdWNjZXNzQ0lEID0gW107XFxcXG4gICAgdmFyIGZhaWxOYW1lID0gW107XFxcXG4gICAgdmFyIGxvZ0NvdW50ID0gMTtcXFxcbiAgICB2YXIgdGFza1RlYW0gPSBjaGFwdGVyVGVhbS5tYXAoY2hhcHRlckl0ZW0gPT4gKHtcXFxcbiAgICAgICAgZnVuYzogdGFzayxcXFxcbiAgICAgICAgaWQ6IGNoYXB0ZXJJdGVtLnRpdGxlLFxcXFxuICAgICAgICBwYXJhbToge1xcXFxuICAgICAgICAgICAgY2hhcHRlckl0ZW06IGNoYXB0ZXJJdGVtLFxcXFxuICAgICAgICAgICAgaW5mbzogaW5mbyxcXFxcbiAgICAgICAgICAgIE1ZX0lEOiBNWV9JRFxcXFxuICAgICAgICB9XFxcXG4gICAgfSkpO1xcXFxuICAgIGxldCBsb2dOdW0gPSBDb25maWcubG9nTnVtO1xcXFxuXFxcXG4gICAgZnVuY3Rpb24gcHV0TG9nKHRleHQpIHtcXFxcbiAgICAgICAgbG9nKHRleHQpO1xcXFxuICAgICAgICBpZiAobG9nQ291bnQgPj0gbG9nTnVtKSB7XFxcXG4gICAgICAgICAgICBkZWxldGVJdGVtKE1ZX0lEICsgXFxcXFxcXCIjbG9nI1xcXFxcXFwiICsgKGxvZ0NvdW50IC0gMTApKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBhZGRJdGVtQWZ0ZXIoTVlfSUQgKyBcXFxcXFxcInx85pel5b+XXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCIkPlxcXFxcXFwiICsgdGV4dCxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjbG9nI1xcXFxcXFwiICsgbG9nQ291bnRcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxvZ0NvdW50Kys7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIocGVyY2gsIGlkLCBlcnJvciwgQ0lEKSB7XFxcXG4gICAgICAgIGNvdW50Kys7XFxcXG4gICAgICAgIGxldCBpc1N1Y2Nlc3MgPSBmYWxzZTtcXFxcbiAgICAgICAgaWYgKGVycm9yICE9PSBudWxsKSB7XFxcXG4gICAgICAgICAgICBmYWlsTmFtZS5wdXNoKGlkKTtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIltsaXN0ZW5lcl3kuIvovb3lpLHotKXvvJpcXFxcXFxcIiArIGlkICsgXFxcXFxcXCI8RVJST1JAIFxcXFxcXFwiICsgZXJyb3IgKyBcXFxcXFxcIj5cXFxcXFxcIik7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoQ0lEID49IDApIHtcXFxcbiAgICAgICAgICAgIHN1Y2Nlc3NDSUQucHVzaChDSUQpO1xcXFxuICAgICAgICAgICAgbGV0IHJhdGlvID0gKGNvdW50IC8gdGFza0NvdW50KS50b0ZpeGVkKDQpO1xcXFxuICAgICAgICAgICAgbGV0IHN0cmlwQ291bnQgPSBNYXRoLmNlaWwocmF0aW8gKiAxMCk7XFxcXG4gICAgICAgICAgICBpc1N1Y2Nlc3MgPSB0cnVlO1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5LiL6L296L+b5bqm77yaXFxcXFxcXCIgKyBzdWNjZXNzQ0lELmxlbmd0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgdGFza0NvdW50LFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIuKWh1xcXFxcXFwiLnJlcGVhdChzdHJpcENvdW50KS5mb250Y29sb3IoXFxcXFxcXCIjZmZhYzJkXFxcXFxcXCIpICsgXFxcXFxcXCLilodcXFxcXFxcIi5yZXBlYXQoMTAgLSBzdHJpcENvdW50KS5mb250Y29sb3IoXFxcXFxcXCIjZTVlMWU0XFxcXFxcXCIpICsgXFxcXFxcXCIgXFxcXFxcXCIgKyAocmF0aW8gKiAxMDApICsgXFxcXFxcXCIlXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCJ8fOS4i+i9vei/m+W6plxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBwdXRMb2coXFxcXFxcXCJbbGlzdGVuZXJd5bey5a6M5oiQ5LiL6L2977yaXFxcXFxcXCIgKyBpZCk7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoQ0lEID09PSAtMSkge1xcXFxuICAgICAgICAgICAgZmFpbE5hbWUucHVzaChpZCk7XFxcXG4gICAgICAgICAgICBwdXRMb2coXFxcXFxcXCJbbGlzdGVuZXJd5bey5YGc5q2i77yaXFxcXFxcXCIgKyBpZCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgaWYgKHRhc2tDb3VudCAhPT0gY291bnQpIHJldHVybjtcXFxcbiAgICAgICAgaWYgKHN1Y2Nlc3NDSUQubGVuZ3RoID09PSB0YXNrQ291bnQpIHtcXFxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIuKWh1xcXFxcXFwiLnJlcGVhdCgxMCkuZm9udGNvbG9yKFxcXFxcXFwiIzAwZmYwMFxcXFxcXFwiKSArIFxcXFxcXFwiIDEwMCVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L296L+b5bqmXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBzdGF0dXMgPSBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBmYWlsVGVhbSA9IGJhdGNoVGVhbS5maWx0ZXIodiA9PiAhc3VjY2Vzc0NJRC5pbmNsdWRlcyh2KSk7XFxcXG4gICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGZhaWxUZWFtKSk7XFxcXG4gICAgICAgIGlmIChmYWlsVGVhbS5sZW5ndGggPiAwICYmIHN0YXR1cyAhPT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiM1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIuS4i+i9veWksei0pTpbXFxcXFxcXCIgKyBmYWlsTmFtZS5qb2luKFxcXFxcXFwiXe+8jFtcXFxcXFxcIikgKyBcXFxcXFxcIl3jgIJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCJb5aSE55CG5aSx6LSlXVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9IGVsc2UgaWYgKGZhaWxUZWFtLmxlbmd0aCA+IDAgJiYgc3RhdHVzID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCI0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiW2xpc3RlbmVyXSPlt7LlgZzmraLmiYDmnInku7vliqHvvIzkvYblt7LmnInov5vluqbkuI3kvJrmtojlpLEjXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiW+mHjeaWsOW8gOWni11cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L295o6n5Yi2XFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIuS4i+i9veS7u+WKoVtcXFxcXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIl3lt7Llhajpg6jmiJDlip/lrozmiJBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCJb6L+U5ZueXVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi5LiL6L295Lu75YqhW1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiXeW3suWujOaIkFxcXFxcXFwiKTtcXFxcbiAgICB9XFxcXG4gICAgbGV0IHRhc2tUZWFtQ2h1bmsgPSBbXTtcXFxcbiAgICBpZiAoQ29uZmlnLnRocmVhZE51bSA+IDApIHtcXFxcbiAgICAgICAgdGFza1RlYW1DaHVuayA9IFRvb2wuY2h1bmsodGFza1RlYW0sIENvbmZpZy50aHJlYWROdW0pO1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIHRhc2tUZWFtQ2h1bmsgPSBbdGFza1RlYW1dO1xcXFxuICAgIH1cXFxcbiAgICBmb3IgKGxldCB0YXNrTGlzdCBvZiB0YXNrVGVhbUNodW5rKSB7XFxcXG4gICAgICAgIGJlKHRhc2tMaXN0LCB7XFxcXG4gICAgICAgICAgICBmdW5jOiBsaXN0ZW5lclxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgZmFpbFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHYgPT4gIXN1Y2Nlc3NDSUQuaW5jbHVkZXModikpO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoZmFpbFRlYW0pKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiNFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIltsaXN0ZW5lcl0j5bey5YGc5q2i5omA5pyJ5Lu75Yqh77yM5L2G5bey5pyJ6L+b5bqm5LiN5Lya5raI5aSxI1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIlvph43mlrDlvIDlp4tdXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCJ8fOS4i+i9veaOp+WItlxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgIH1cXFxcblxcXFxuICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbn07XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2ZnLuaJuemHj+S4u+eoi+W6j1xcXCIsXFxcInBhdGhcXFwiOlxcXCJCYXRjaC5leGUuanNcXFwiLFxcXCJydWxlXFxcIjpcXFwiY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcXFxcXCIpO1xcXFxuXFxcXG5mdW5jdGlvbiBjb21pYyh0YXNrUGFyYW0pIHtcXFxcbiAgICBsZXQge1xcXFxuICAgICAgICBjaGFwdGVySXRlbSxcXFxcbiAgICAgICAgaW5mbyxcXFxcbiAgICAgICAgTVlfSUQsXFxcXG4gICAgfSA9IHRhc2tQYXJhbTtcXFxcbiAgICBpZiAoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgIHJldHVybiAtMTtcXFxcbiAgICB9XFxcXG4gICAgbGV0IG1haW5QYXRoID0gQ29uZmlnLmNvbWljUGF0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiO1xcXFxuICAgIGxldCBjaGFwdGVyUGF0aCA9IG1haW5QYXRoICsgY2hhcHRlckl0ZW0uQ0lEICsgXFxcXFxcXCIkQiRcXFxcXFxcIiArIGNoYXB0ZXJJdGVtLnRpdGxlICsgXFxcXFxcXCIvXFxcXFxcXCI7XFxcXG4gICAgbGV0IHBpY0xpc3Q7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgbGV0IGdldFBpY0xpc3QgPSBuZXcgRnVuY3Rpb24oXFxcXFxcXCJpbnB1dFxcXFxcXFwiLCBcXFxcXFxcInVybFxcXFxcXFwiLCBcXFxcXFxcInJldHVybiBcXFxcXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXFxcbiAgICAgICAgcGljTGlzdCA9IGdldFBpY0xpc3QoY2hhcHRlckl0ZW0udXJsLCBjaGFwdGVySXRlbS51cmwpO1xcXFxuICAgICAgICBpZiAodHlwZW9mIHBpY0xpc3QgPT09IFxcXFxcXFwic3RyaW5nXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIHBpY0xpc3QgPSBwaWNMaXN0LnJlcGxhY2UoXFxcXFxcXCJwaWNzOi8vXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpLnNwbGl0KFxcXFxcXFwiJiZcXFxcXFxcIik7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgIGUubWVzc2FnZSA9IFxcXFxcXFwiPOa8q+eUu+WbvueJh+ino+aekOmUmeivr++8mlxcXFxcXFwiICsgZS5tZXNzYWdlICsgXFxcXFxcXCI+XFxcXFxcXCI7XFxcXG4gICAgICAgIHRocm93IGU7XFxcXG4gICAgfVxcXFxuICAgIGNvbnN0IEwgPSBwaWNMaXN0Lmxlbmd0aDtcXFxcbiAgICBpZihMPT09MCl7XFxcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIjzmvKvnlLvlm77niYfop6PmnpDplJnor6/vvJrlm77niYfpk77mjqXov5Tlm57kuLrnqbo+XFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBsZXQgYm9va1RvcFBpYyA9IFRvb2wuaGlrZXJQaWMoaW5mby5ib29rVG9wUGljKTtcXFxcbiAgICAgICAgICAgIHJlcXVpcmVEb3dubG9hZChib29rVG9wUGljWzBdLCBtYWluUGF0aCArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIiwgYm9va1RvcFBpY1sxXSk7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIGxvZyhcXFxcXFxcIjzlsIHpnaLkuIvovb3plJnor6/vvJpcXFxcXFxcIiArIGUubWVzc2FnZSArIFxcXFxcXFwiPlxcXFxcXFwiKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICB2YXIgc2NoZWR1bGUgPSBuZXcgTWFwKFtcXFxcbiAgICAgICAgW0wsICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29MTAwJVxcXFxcXFwiKV0sXFxcXG4gICAgICAgIFt+figwLjkwICogTCksICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29OTAlK1xcXFxcXFwiKV0sXFxcXG4gICAgICAgIFt+figwLjc1ICogTCksICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29NzUlK1xcXFxcXFwiKV0sXFxcXG4gICAgICAgIFt+figwLjUwICogTCksICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29NTAlK1xcXFxcXFwiKV0sXFxcXG4gICAgICAgIFt+figwLjI1ICogTCksICgpID0+IGxvZyhjaGFwdGVySXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29MjUlK1xcXFxcXFwiKV1cXFxcbiAgICBdKTtcXFxcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKykge1xcXFxuICAgICAgICBsZXQgcGljID0gVG9vbC5oaWtlclBpYyhwaWNMaXN0W2ldKTtcXFxcbiAgICAgICAgcmVxdWlyZURvd25sb2FkKHBpY1swXSwgY2hhcHRlclBhdGggKyAoaSArIDEpICsgXFxcXFxcXCIuanBnXFxcXFxcXCIsIHBpY1sxXSk7XFxcXG4gICAgICAgIHNjaGVkdWxlLmhhcyhpICsgMSkgJiYgc2NoZWR1bGUuZ2V0KGkgKyAxKSgpO1xcXFxuICAgICAgICBpZiAoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gLTE7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgRmlsZS5yZW5hbWVGaWxlKGNoYXB0ZXJQYXRoLCBjaGFwdGVySXRlbS5DSUQgKyBcXFxcXFxcIiRBJFxcXFxcXFwiICsgY2hhcHRlckl0ZW0udGl0bGUpO1xcXFxuICAgIHJldHVybiBjaGFwdGVySXRlbS5DSUQ7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIG5vdmVsKHRhc2tQYXJhbSkge1xcXFxuICAgIGxldCB7XFxcXG4gICAgICAgIGNoYXB0ZXJJdGVtLFxcXFxuICAgICAgICBpbmZvLFxcXFxuICAgICAgICBNWV9JRCxcXFxcbiAgICB9ID0gdGFza1BhcmFtO1xcXFxuICAgIGlmIChnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgcmV0dXJuIC0xO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgbWFpblBhdGggPSBDb25maWcubm92ZWxQYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCI7XFxcXG4gICAgbGV0IGNoYXB0ZXJQYXRoID0gbWFpblBhdGggKyBjaGFwdGVySXRlbS5DSUQgKyBcXFxcXFxcIiRBJFxcXFxcXFwiICsgY2hhcHRlckl0ZW0udGl0bGUgKyBcXFxcXFxcIi50eHRcXFxcXFxcIjtcXFxcbiAgICBsZXQgY29udGVudCA9IFxcXFxcXFwiXFxcXFxcXCI7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgbGV0IGdldENvbnRlbnQgPSBuZXcgRnVuY3Rpb24oXFxcXFxcXCJpbnB1dFxcXFxcXFwiLCBcXFxcXFxcInVybFxcXFxcXFwiLCBcXFxcXFxcInJldHVybiBcXFxcXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXFxcbiAgICAgICAgY29udGVudCA9IGdldENvbnRlbnQoY2hhcHRlckl0ZW0udXJsLCBjaGFwdGVySXRlbS51cmwpO1xcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgZS5tZXNzYWdlID0gXFxcXFxcXCI85bCP6K+05q2j5paH6Kej5p6Q6ZSZ6K+v77yaXFxcXFxcXCIgKyBlLm1lc3NhZ2UgKyBcXFxcXFxcIj5cXFxcXFxcIjtcXFxcbiAgICAgICAgdGhyb3cgZTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKCFjb250ZW50KSB7XFxcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIjzlsI/or7TmraPmlofop6PmnpDplJnor6/vvJrmraPmlofov5Tlm57kuLrnqbo+XFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBsZXQgYm9va1RvcFBpYyA9IFRvb2wuaGlrZXJQaWMoaW5mby5ib29rVG9wUGljKTtcXFxcbiAgICAgICAgICAgIHJlcXVpcmVEb3dubG9hZChib29rVG9wUGljWzBdLCBtYWluUGF0aCArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIiwgYm9va1RvcFBpY1sxXSk7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIGxvZyhcXFxcXFxcIjzlsIHpnaLkuIvovb3plJnor6/vvJpcXFxcXFxcIiArIGUubWVzc2FnZSArIFxcXFxcXFwiPlxcXFxcXFwiKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBGaWxlLmZpbGVXcml0ZShjaGFwdGVyUGF0aCwgY29udGVudC5yZXBsYWNlKC88c2NyaXB0Pi4qPzxcXFxcXFxcXC9zY3JpcHQ+L2dtaSwgXFxcXFxcXCJcXFxcXFxcIikudHJpbVJpZ2h0KCkpO1xcXFxuICAgIC8vRmlsZS5yZW5hbWVGaWxlKGNoYXB0ZXJQYXRoLCBjaGFwdGVySXRlbS5DSUQgKyBcXFxcXFxcIiRBJFxcXFxcXFwiICsgY2hhcHRlckl0ZW0udGl0bGUpO1xcXFxuICAgIHJldHVybiBjaGFwdGVySXRlbS5DSUQ7XFxcXG59XFxcXG52YXIgJGV4ZSA9IHtcXFxcbiAgICBjb21pYzogY29taWMsXFxcXG4gICAgbm92ZWw6IG5vdmVsXFxcXG59O1xcXFxuJC5leHBvcnRzID0gZnVuY3Rpb24odGFza1BhcmFtKSB7XFxcXG4gICAgcmV0dXJuICRleGVbdGFza1BhcmFtLmluZm8udHlwZV0odGFza1BhcmFtKTtcXFxcbn07XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2ZnLuaZrumAmuS4u+eoi+W6j1xcXCIsXFxcInBhdGhcXFwiOlxcXCJEb3dubG9hZC5leGUuanNcXFwiLFxcXCJydWxlXFxcIjpcXFwiY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcXFxcXCIpO1xcXFxuXFxcXG5mdW5jdGlvbiBub3ZlbChpdGVtLCBpbmZvLCBNWV9JRCwgb3JkZXIpIHtcXFxcbiAgICBsZXQgbWFpblBhdGggPSBDb25maWcubm92ZWxQYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCI7XFxcXG4gICAgbGV0IGNoYXB0ZXJQYXRoID0gbWFpblBhdGggKyBvcmRlciArIFxcXFxcXFwiJEEkXFxcXFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcXFxcXCIudHh0XFxcXFxcXCI7XFxcXG4gICAgbGV0IGNvbnRlbnQgPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuICAgIHRyeSB7XFxcXG4gICAgICAgIGxldCBnZXRDb250ZW50ID0gbmV3IEZ1bmN0aW9uKFxcXFxcXFwiaW5wdXRcXFxcXFxcIiwgXFxcXFxcXCJ1cmxcXFxcXFxcIiwgXFxcXFxcXCJyZXR1cm4gXFxcXFxcXCIgKyBpbmZvLnBhcnNlQ29kZSk7XFxcXG4gICAgICAgIGNvbnRlbnQgPSBnZXRDb250ZW50KGl0ZW0udXJsLCBpdGVtLnVybCkgfHwgXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgIGUubWVzc2FnZSA9IFxcXFxcXFwiPOWwj+ivtOato+aWh+ino+aekOmUmeivrz4gXFxcXFxcXCIgKyBlLm1lc3NhZ2U7XFxcXG4gICAgICAgIHRocm93IGU7XFxcXG4gICAgfVxcXFxuICAgIGlmICghY29udGVudCkge1xcXFxuICAgICAgICB0b2FzdChcXFxcXFxcIuWwj+ivtOS4uuepulxcXFxcXFwiKTtcXFxcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiPOWwj+ivtOato+aWh+ino+aekOmUmeivr++8muato+aWh+i/lOWbnuS4uuepuj5cXFxcXFxcIik7XFxcXG4gICAgfVxcXFxuICAgIGlmIChpbmZvLmJvb2tUb3BQaWMpIHtcXFxcbiAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcXFxuICAgICAgICAgICAgcmVxdWlyZURvd25sb2FkKGJvb2tUb3BQaWNbMF0sIG1haW5QYXRoICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiLCBib29rVG9wUGljWzFdKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKFxcXFxcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcXFxcXCIgKyBlLm1lc3NhZ2UpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIEZpbGUuZmlsZVdyaXRlKGNoYXB0ZXJQYXRoLCBjb250ZW50LnJlcGxhY2UoLzxzY3JpcHQ+Lio/PFxcXFxcXFxcL3NjcmlwdD4vZ21pLCBcXFxcXFxcIlxcXFxcXFwiKS50cmltUmlnaHQoKSk7XFxcXG4gICAgLy9GaWxlLnJlbmFtZUZpbGUoY2hhcHRlclBhdGgsIG9yZGVyICsgXFxcXFxcXCIkQSRcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIi50eHRcXFxcXFxcIik7XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9cXFxcXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIkBcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIiDkuIvovb3lrozmiJBcXFxcXFxcIjtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gY29taWMoaXRlbSwgaW5mbywgTVlfSUQsIG9yZGVyKSB7XFxcXG4gICAgbGV0IG1haW5QYXRoID0gQ29uZmlnLmNvbWljUGF0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiO1xcXFxuICAgIGxldCBjaGFwdGVyUGF0aCA9IG1haW5QYXRoICsgb3JkZXIgKyBcXFxcXFxcIiRCJFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwiL1xcXFxcXFwiO1xcXFxuICAgIGxldCBwaWNMaXN0ID0gW107XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgbGV0IGdldFBpY0xpc3QgPSBuZXcgRnVuY3Rpb24oXFxcXFxcXCJpbnB1dFxcXFxcXFwiLCBcXFxcXFxcInJldHVyblxcXFxcXFwiICsgaW5mby5wYXJzZUNvZGUpO1xcXFxuICAgICAgICBwaWNMaXN0ID0gZ2V0UGljTGlzdChpdGVtLnVybCk7XFxcXG4gICAgICAgIGlmICh0eXBlb2YgcGljTGlzdCA9PT0gXFxcXFxcXCJzdHJpbmdcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcGljTGlzdCA9IHBpY0xpc3QucmVwbGFjZShcXFxcXFxcInBpY3M6Ly9cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikuc3BsaXQoXFxcXFxcXCImJlxcXFxcXFwiKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgZS5tZXNzYWdlID0gXFxcXFxcXCI85ryr55S75Zu+54mH6Kej5p6Q6ZSZ6K+vPiBcXFxcXFxcIiArIGUubWVzc2FnZTtcXFxcbiAgICAgICAgdGhyb3cgZTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBjb25zdCBMID0gcGljTGlzdC5sZW5ndGg7XFxcXG4gICAgaWYoTD09PTApe1xcXFxuICAgICAgICB0b2FzdChcXFxcXFxcIuWbvueJh+mTvuaOpeS4uuepulxcXFxcXFwiKTtcXFxcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxcXFxcXFwiPOa8q+eUu+WbvueJh+ino+aekOmUmeivr++8muWbvueJh+mTvuaOpei/lOWbnuS4uuepuj5cXFxcXFxcIik7XFxcXG4gICAgfVxcXFxuICAgIGlmIChpbmZvLmJvb2tUb3BQaWMpIHtcXFxcbiAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcXFxuICAgICAgICAgICAgcmVxdWlyZURvd25sb2FkKGJvb2tUb3BQaWNbMF0sIG1haW5QYXRoICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiLCBib29rVG9wUGljWzFdKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKFxcXFxcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcXFxcXCIgKyBlLm1lc3NhZ2UpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIHZhciBzY2hlZHVsZSA9IG5ldyBNYXAoW1xcXFxuICAgICAgICBbTCwgKCkgPT4gbG9nKGl0ZW0udGl0bGUgKyBcXFxcXFxcIuW3suS4i+i9vTEwMCVcXFxcXFxcIildLFxcXFxuICAgICAgICBbfn4oMC45MCAqIEwpLCAoKSA9PiBsb2coaXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29OTAlK1xcXFxcXFwiKV0sXFxcXG4gICAgICAgIFt+figwLjc1ICogTCksICgpID0+IGxvZyhpdGVtLnRpdGxlICsgXFxcXFxcXCLlt7LkuIvovb03NSUrXFxcXFxcXCIpXSxcXFxcbiAgICAgICAgW35+KDAuNTAgKiBMKSwgKCkgPT4gbG9nKGl0ZW0udGl0bGUgKyBcXFxcXFxcIuW3suS4i+i9vTUwJStcXFxcXFxcIildLFxcXFxuICAgICAgICBbfn4oMC4yNSAqIEwpLCAoKSA9PiBsb2coaXRlbS50aXRsZSArIFxcXFxcXFwi5bey5LiL6L29MjUlK1xcXFxcXFwiKV1cXFxcbiAgICBdKTtcXFxcblxcXFxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgTDsgaSsrKSB7XFxcXG4gICAgICAgIGxldCBwaWMgPSBUb29sLmhpa2VyUGljKHBpY0xpc3RbaV0pO1xcXFxuICAgICAgICByZXF1aXJlRG93bmxvYWQocGljWzBdLCBjaGFwdGVyUGF0aCArIChpICsgMSkgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIiwgcGljWzFdKTtcXFxcbiAgICAgICAgc2NoZWR1bGUuaGFzKGkgKyAxKSAmJiBzY2hlZHVsZS5nZXQoaSArIDEpKCk7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgRmlsZS5yZW5hbWVGaWxlKGNoYXB0ZXJQYXRoLCBvcmRlciArIFxcXFxcXFwiJEEkXFxcXFxcXCIgKyBpdGVtLnRpdGxlKTtcXFxcbiAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiQFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwiIOS4i+i9veWujOaIkFxcXFxcXFwiO1xcXFxufVxcXFxudmFyICRleGUgPSB7XFxcXG4gICAgY29taWM6IGNvbWljLFxcXFxuICAgIG5vdmVsOiBub3ZlbFxcXFxufTtcXFxcbiQuZXhwb3J0cyA9IGZ1bmN0aW9uKGl0ZW0sIGluZm8sIE1ZX0lELCBvcmRlcikge1xcXFxuICAgIHJldHVybiAkZXhlW2luZm8udHlwZV0oaXRlbSwgaW5mbywgTVlfSUQsIG9yZGVyKTtcXFxcbn07XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2Yu6YCa55So5bel5YW3XFxcIixcXFwicGF0aFxcXCI6XFxcIlRvb2wuanNcXFwiLFxcXCJydWxlXFxcIjpcXFwiJC5leHBvcnRzID0ge1xcXFxuICAgIHNwbGl0KHRleHQsIHRhcmdldCwgY291bnQpIHtcXFxcbiAgICAgICAgY291bnQgPSBjb3VudCA9PT0gdW5kZWZpbmVkID8gMSA6IGNvdW50O1xcXFxuICAgICAgICBsZXQgYXJyYXkgPSBbdGV4dF07XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgY291bnQ7IGkrKykge1xcXFxuICAgICAgICAgICAgdGV4dCA9IGFycmF5W2ldO1xcXFxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGV4dC5pbmRleE9mKHRhcmdldCk7XFxcXG4gICAgICAgICAgICBpZiAoaW5kZXggPT09IC0xKSB7XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBhcnJheVtpXSA9IHRleHQuc2xpY2UoMCwgaW5kZXgpO1xcXFxuICAgICAgICAgICAgYXJyYXlbaSArIDFdID0gdGV4dC5zbGljZShpbmRleCArIHRhcmdldC5sZW5ndGgpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBhcnJheTtcXFxcbiAgICB9LFxcXFxuICAgIGNodW5rKGFyciwgc2l6ZSkge1xcXFxuICAgICAgICB2YXIgcmVzdWx0ID0gW107XFxcXG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpICs9IHNpemUpIHtcXFxcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFyci5zbGljZShpLCBpICsgc2l6ZSkpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxcXG4gICAgfSxcXFxcbiAgICBoaWtlclBpYyh1cmwpIHtcXFxcbiAgICAgICAgdmFyIGhlYWRlcnMgPSB7fTtcXFxcbiAgICAgICAgbGV0IHVybHMgPSB1cmwuc3BsaXQoXFxcXFxcXCJAXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgcGljVXJsID0gdXJscy5zaGlmdCgpO1xcXFxuICAgICAgICBsZXQgbGVuZ3RoID0gdXJscy5sZW5ndGg7XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgICAgIGxldCBba2V5LCB2YWx1ZV0gPSB1cmxzW2ldLnNwbGl0KFxcXFxcXFwiPVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBbcGljVXJsLCBoZWFkZXJzXTtcXFxcbiAgICB9LFxcXFxuICAgIHJhbmdlKHN0YXJ0LCBlbmQpIHtcXFxcbiAgICAgICAgcmV0dXJuIEFycmF5KGVuZCAtIHN0YXJ0KS5maWxsKDApLm1hcCgoZWwsIGkpID0+IHN0YXJ0ICsgaSk7XFxcXG4gICAgfVxcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNqLkNvbmZpZ1xcXCIsXFxcInBhdGhcXFwiOlxcXCJDb25maWcuanNvblxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qcz9ydWxlPeacrOWcsOi1hOa6kOeuoeeQhlxcXFxcXFwiKTtcXFxcblxcXFxubGV0IGxvY2FsQ29uZmlnID0ge307XFxcXG5cXFxcbnRyeSB7XFxcXG4gICAgbG9jYWxDb25maWcgPSBKU09OLnBhcnNlKEZpbGUucmVhZEZpbGUoZ2V0UGF0aChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvZmlsZXMv5pys5Zyw6LWE5rqQ566h55CGL2NvbmZpZy5qc29uXFxcXFxcXCIpLnNsaWNlKDcpKSk7XFxcXG59IGNhdGNoIChlKSB7XFxcXG4gICAgZGVsZXRlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxufVxcXFxuY29uc3QgQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgaG9tZVBhdGg6IGdldFBhdGgoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL2xvY2FsTWFuYWdlclxcXFxcXFwiKS5zbGljZSg3KSxcXFxcbiAgICBsb2dOdW06IDEwLFxcXFxuICAgIHRocmVhZE51bTogMTYsXFxcXG4gICAgZGVmX2lzUGFnaW5hdGU6IFxcXFxcXFwiMVxcXFxcXFwiLCAvLzHpu5jorqTlvIDlkK/liIbpobXvvIww6buY6K6k5YWz6ZetXFxcXG4gICAgdmlld1BhZ2VTaXplOiAyMDAsXFxcXG4gICAgZGVmX1BpYzogXFxcXFxcXCJoaWtlcjovL2ltYWdlcy9ob21lX3BpYzRcXFxcXFxcIixcXFxcbiAgICBkZWZfTG9yZF9UeXBlOiBcXFxcXFxcImNvbWljXFxcXFxcXCIsXFxcXG4gICAgZGVmX1ZpZXdfU3R5bGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgZGVmX0RvVmlfU3R5bGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgZGVmX0RvVmlfVHlwZTogXFxcXFxcXCIxXFxcXFxcXCIsIC8vMOWFqOmDqCwgMeacquWujOaIkO+8jDLlt7LlrozmiJBcXFxcbn0sIGxvY2FsQ29uZmlnKTtcXFxcbmNvbnN0IFBBVEhTID0ge1xcXFxuICAgIG5vdmVsUGF0aDogXFxcXFxcXCIv5bCP6K+0L1xcXFxcXFwiLFxcXFxuICAgIGNvbWljUGF0aDogXFxcXFxcXCIv5ryr55S7L1xcXFxcXFwiLFxcXFxuICAgIG5vdmVsRnVsbFBhdGg6IFxcXFxcXFwiL+Wwj+ivtOWQiOW5ti9cXFxcXFxcIixcXFxcbiAgICBleHRlcm5hbEltcG9ydFBhdGg6IFxcXFxcXFwiL+WkluWvvOWwj+ivtC9cXFxcXFxcIlxcXFxufVxcXFxuXFxcXG5cXFxcbk9iamVjdC5rZXlzKFBBVEhTKS5mb3JFYWNoKGtleSA9PiBDb25maWdba2V5XSA9IENvbmZpZy5ob21lUGF0aCArIFBBVEhTW2tleV0pO1xcXFxuJC5leHBvcnRzID0gQ29uZmlnO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuS4u+mhtemdolxcXCIsXFxcInBhdGhcXFwiOlxcXCJNYWluLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5mdW5jdGlvbiBtYWluKCkge1xcXFxuICAgIHZhciBsYXlvdXQgPSBbXTtcXFxcbiAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgIGxldCB0eXBlID0gZ2V0TXlWYXIoXFxcXFxcXCIudHlwZVxcXFxcXFwiLCBnZXRJdGVtKFxcXFxcXFwibWFpbjp0eXBlXFxcXFxcXCIpIHx8IENvbmZpZy5kZWZfTG9yZF9UeXBlKTtcXFxcbiAgICBsZXQgdGdudW0gPSBnZXRNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCJzZWFyY2hLZXlcXFxcXFxcIik7XFxcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIudGdudW1cXFxcXFxcIik7XFxcXG4gICAgfSkpO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXFxcXFwiY29taWNcXFxcXFxcIiA/IFxcXFxcXFwi4peJ5ryr55S7XFxcXFxcXCIgOiBcXFxcXFxcIuKXi+a8q+eUu1xcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgodHlwZSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwiY29taWNcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIudHlwZVxcXFxcXFwiLCBcXFxcXFxcImNvbWljXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcIm1haW46dHlwZVxcXFxcXFwiLCBcXFxcXFxcImNvbWljXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdHlwZSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiLFxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXFxcXFwibm92ZWxcXFxcXFxcIiA/IFxcXFxcXFwi4peJ5bCP6K+0XFxcXFxcXCIgOiBcXFxcXFxcIuKXi+Wwj+ivtFxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgodHlwZSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwibm92ZWxcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIudHlwZVxcXFxcXFwiLCBcXFxcXFxcIm5vdmVsXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcIm1haW46dHlwZVxcXFxcXFwiLCBcXFxcXFxcIm5vdmVsXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdHlwZSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiLFxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXFxcXFwidHh0XFxcXFxcXCIgPyBcXFxcXFxcIuKXiVRYVFxcXFxcXFwiIDogXFxcXFxcXCLil4tUWFRcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHR5cGUpID0+IHtcXFxcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInR4dFxcXFxcXFwiKSByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxDb2xsZWN0ZWQudmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnR5cGVcXFxcXFxcIiwgXFxcXFxcXCJ0eHRcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwibWFpbjp0eXBlXFxcXFxcXCIsIFxcXFxcXFwidHh0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdHlwZSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgaWYgKHR5cGUgPT09IFxcXFxcXFwidHh0XFxcXFxcXCIpIHtcXFxcbiAgICAgICAgdHh0VmlldyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9leHRlcm5hbGltcG9ydFR4dC52aWV3XFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gdHh0VmlldyhsYXlvdXQpO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgdGFnID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbdHlwZSArIFxcXFxcXFwiUGF0aFxcXFxcXFwiXSwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG4gICAgaWYgKHRhZy5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6K6+572uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHZlcnNpb246IE1ZX1JVTEUudmVyc2lvblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzluK7liqnigJ3igJ1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvaGVscC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP2tleXdvcmQ9bm92ZWxDb21pY1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAnPGgxIHN0eWxlPVxcXFxcXFwidGV4dC1hbGlnbjogY2VudGVyO1xcXFxcXFwiPuWVpemDveayoeacieiAtjwvaDE+JyxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gc2V0UmVzdWx0KGxheW91dCk7XFxcXG4gICAgfVxcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdXJsOiAnXFxcXFxcXCJoaWtlcjovL3NlYXJjaD9zPVxcXFxcXFwiK2lucHV0JyxcXFxcbiAgICAgICAgZGVzYzogXFxcXFxcXCLmkJzkvaDmg7PopoHnmoQjXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIjLi4uLi4uXFxcXFxcXCIsXFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCflI1cXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIHJ1bGVzOiAkLnRvU3RyaW5nKCh0YWcsIHR5cGUpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYXJyMSA9IFtdO1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFnLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGFycjEucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInRpdGxlXFxcXFxcXCI6IHRhZ1tpXS5uYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJzZWFyY2hfdXJsXFxcXFxcXCI6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eT9pc0FsbD0xJnNlYXJjaFRlcm1zPSoqJnR5cGU9XFxcXFxcXCIgKyB0eXBlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJzZWFyY2hGaW5kXFxcXFxcXCI6IFxcXFxcXFwianM6JC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvU2VhcmNoLnZpZXc/cnVsZT0nK01ZX1JVTEUuX3RpdGxlKTtcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJyMSk7XFxcXG4gICAgICAgICAgICB9LCB0YWcsIHR5cGUpLFxcXFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcignc2VhcmNoS2V5JywgJycpLFxcXFxuICAgICAgICAgICAgb25DaGFuZ2U6IFxcXFxcXFwicHV0TXlWYXIoJ3NlYXJjaEtleScsaW5wdXQpXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLigJjigJjimpnorr7nva7igJnigJlcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgdmVyc2lvbjogTVlfUlVMRS52ZXJzaW9uXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuXFxcXG4gICAgZm9yIChsZXQgaSBpbiB0YWcpIHtcXFxcbiAgICAgICAgbGV0IGl0ID0gdGFnW2ldO1xcXFxuICAgICAgICBpZiAodGdudW0gPT09IGkpIHtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJxcXFxcXFxcIiArIGl0Lm5hbWUgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoW1xcXFxcXFwi5Yig6Zmk6K+l55uu5b2VXFxcXFxcXCIsIFxcXFxcXFwi6Lez6L2s5bCP56iL5bqPXFxcXFxcXCJdLCAxLCBcXFxcXFxcIumAieaLqeaTjeS9nFxcXFxcXFwiKS5zZWxlY3QoKGl0KSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChcXFxcXFxcIui3s+i9rOWwj+eoi+W6j1xcXFxcXFwiID09PSBpbnB1dCkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9ob21lQFxcXFxcXFwiICsgaXQubmFtZTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHRoZW4oW1xcXFxcXFwi6K+l5pON5L2c5LiN5Lya5Yig6Zmk5bCP56iL5bqP77yM5L2G6K+l5bCP56iL5bqP5LiL6L2955qE5omA5pyJ5ryr55S75bCG6KKr5Yig6ZmkXFxcXFxcXCJdKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkKFxcXFxcXFwi6K+l5pON5L2c5LiN5Lya5Yig6Zmk5bCP56iL5bqP77yM5L2G6K+l5bCP56iL5bqP5LiL6L2955qE5omA5pyJIOa8q+eUuy/lsI/or7Qg5bCG6KKr5Yig6ZmkXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sIGl0LnBhdGgpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSwgaXQpXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogaXQubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoaSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnRnbnVtXFxcXFxcXCIsIGkpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSwgaSksXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBsZXQgcGF0aCA9IHRhZ1t0Z251bV0ucGF0aDtcXFxcbiAgICBsZXQgbWhsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChwYXRoLCBcXFxcXFxcImRpclxcXFxcXFwiKTtcXFxcblxcXFxuICAgIGlmIChtaGxpc3QubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLllaXpg73msqHmnInogLZcXFxcXFxcIi5iaWcoKSxcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgcmV0dXJuIHNldFJlc3VsdChsYXlvdXQpO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgcGFnZVVybCA9IHR5cGUgPT09IFxcXFxcXFwibm92ZWxcXFxcXFxcIiA/IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL05vdmVsQnJvd3Nlci52aWV3XFxcXFxcXCIgOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9Db21pY0Jyb3dzZXIudmlld1xcXFxcXFwiO1xcXFxuICAgIGZvciAobGV0IGl0ZW0gb2YgbWhsaXN0KSB7XFxcXG4gICAgICAgIGxldCBwaWMgPSBmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBpdGVtLnBhdGggKyBcXFxcXFxcIi9cXFxcXFxcIiArIGl0ZW0ubmFtZSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiKSA/IGl0ZW0ucGF0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgaXRlbS5uYW1lICsgXFxcXFxcXCIuanBnXFxcXFxcXCIgOiBDb25maWcuZGVmX1BpYztcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0ubmFtZSxcXFxcbiAgICAgICAgICAgIHBpY191cmw6IHBpYyxcXFxcbiAgICAgICAgICAgIHVybDogcGFnZVVybCArIFxcXFxcXFwiP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLnRpdGxlLFxcXFxuICAgICAgICAgICAgZXh0cmE6IGl0ZW1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcXFxufVxcXFxuXFxcXG5tYWluKCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcInRleHRfMVxcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7mvKvnlLvnq6DoioLliJfooahcXFwiLFxcXCJwYXRoXFxcIjpcXFwiQ29taWNCcm93c2VyLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5pZiAoZ2V0UGFyYW0oXFxcXFxcXCJoYXNQYXJhbXNcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiKSB7XFxcXG4gICAgTVlfUEFSQU1TID0ge1xcXFxuICAgICAgICBwYXRoOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJwYXRoXFxcXFxcXCIpKSxcXFxcbiAgICAgICAgbmFtZTogZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwibmFtZVxcXFxcXFwiKSlcXFxcbiAgICB9XFxcXG59XFxcXG5sZXQgcGF0aCA9IE1ZX1BBUkFNUy5wYXRoO1xcXFxuc2V0UGFnZVRpdGxlKFxcXFxcXFwiQ1Z8XFxcXFxcXCIgKyBNWV9QQVJBTVMubmFtZSlcXFxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcblxcXFxudmFyIGxheW91dCA9IFtdO1xcXFxubGV0IG1vZGUgPSBnZXRNeVZhcihcXFxcXFxcIi5tb2RlXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbmxldCBpc1JldmVyc2UgPSBnZXRNeVZhcihcXFxcXFxcIi5pc1JldmVyc2VcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIubW9kZVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiKTtcXFxcbn0pKTtcXFxcbmNvbnN0IGNvbWljU3RhdHVzPW5ldyBNYXAoW1tcXFxcXFxcIkFcXFxcXFxcIixcXFxcXFxcIlxcXFxcXFwiXSxbXFxcXFxcXCJCXFxcXFxcXCIsXFxcXFxcXCLigJjigJhb5pyq5a6M5oiQXeKAmeKAmVxcXFxcXFwiXV0pO1xcXFxuZnVuY3Rpb24gZ2V0VGl0bGUodGl0bGUpIHtcXFxcbiAgICBsZXQgdGl0bGVzID0gVG9vbC5zcGxpdCh0aXRsZSwgXFxcXFxcXCIkXFxcXFxcXCIsIDIpO1xcXFxuICAgIHJldHVybiBjb21pY1N0YXR1cy5nZXQodGl0bGVzWzFdKSt0aXRsZXNbMl0gfHwgdGl0bGU7XFxcXG59XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5Yig6Zmk5pW05pysXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5Yig6Zmk5pW05pys5ryr55S777yfXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcXFxuICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBwYXRoKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFtcXFxcXFxcIueci+a8q+eUu1xcXFxcXFwiLCBcXFxcXFxcIuWIoOmZpOeroOiKglxcXFxcXFwiXVttb2RlXSxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgobW9kZSkgPT4ge1xcXFxuICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5tb2RlXFxcXFxcXCIsIG1vZGUgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICB9LCBtb2RlKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG59KVxcXFxubGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG5taGxpc3Quc29ydCgoYSwgYikgPT4ge1xcXFxuICAgIGEgPSAoYS5uYW1lLm1hdGNoKC9cXFxcXFxcXGQrLykgfHwgW10pWzBdIHx8IDA7XFxcXG4gICAgYiA9IChiLm5hbWUubWF0Y2goL1xcXFxcXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXFxcbiAgICByZXR1cm4gYSAtIGI7XFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLnq6DoioIgXFxcXFxcXCIuYmlnKCkgKyAoXFxcXFxcXCLlhbHmnIk6XFxcXFxcXCIgKyBtaGxpc3QubGVuZ3RoICsgXFxcXFxcXCLnq6BcXFxcXFxcIikuc21hbGwoKSxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxcXG4gICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiLCBpc1JldmVyc2UgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICB9LCBpc1JldmVyc2UpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbmxldCBhcnJheSA9IFtdO1xcXFxubGV0IGxhenkgPSAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbiAgICBsZXQgZmlsZWxpc3QgPSBGaWxlLmdldEZpbGVQYXRoKGlucHV0KTtcXFxcbiAgICBsZXQgcGljbGlzdCA9IGZpbGVsaXN0Lm1hcCgoaXRlbSwgaSkgPT4gXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBpbnB1dCArIFxcXFxcXFwiL1xcXFxcXFwiICsgKGkgKyAxKSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiKTtcXFxcbiAgICByZXR1cm4gXFxcXFxcXCJwaWNzOi8vXFxcXFxcXCIgKyBwaWNsaXN0LmpvaW4oXFxcXFxcXCImJlxcXFxcXFwiKTtcXFxcbn0pXFxcXG5pZiAobW9kZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIpIHtcXFxcbiAgICBmb3IgKGxldCBpdGVtIG9mIG1obGlzdCkge1xcXFxuICAgICAgICBhcnJheS5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBnZXRUaXRsZShpdGVtLm5hbWUpLFxcXFxuICAgICAgICAgICAgdXJsOiBpdGVtLnBhdGgrbGF6eSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBDb25maWcuZGVmX1ZpZXdfU3R5bGVcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxufSBlbHNlIHtcXFxcbiAgICBmb3IgKGxldCBpdGVtIG9mIG1obGlzdCkge1xcXFxuICAgICAgICBsZXQgbmFtZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxcXG4gICAgICAgIGFycmF5LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCLnoa7orqTliKDpmaRbXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCJd77yfXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9LCBpdGVtLnBhdGgpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG5pZiAoaXNSZXZlcnNlID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGFycmF5LnJldmVyc2UoKTtcXFxcbn1cXFxcbmxheW91dC5wdXNoLmFwcGx5KGxheW91dCwgYXJyYXkpO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu6IGa5ZCI5pCc57SiXFxcIixcXFwicGF0aFxcXCI6XFxcIlNlYXJjaC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLl90aXRsZSk7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb24/cnVsZT1cXFxcXFxcIiArIE1ZX1JVTEUuX3RpdGxlKTtcXFxcbmxldCBjb21pY1J1bGVEaXJzID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbZ2V0UGFyYW0oXFxcXFxcXCJ0eXBlXFxcXFxcXCIpICsgXFxcXFxcXCJQYXRoXFxcXFxcXCJdLCBcXFxcXFxcImRpclxcXFxcXFwiKTtcXFxcbmlmIChnZXRQYXJhbShcXFxcXFxcImlzQWxsXFxcXFxcXCIpID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGNvbWljUnVsZURpcnMgPSBjb21pY1J1bGVEaXJzLmZpbHRlcihpdGVtID0+IGl0ZW0ubmFtZSA9PT0gTVlfUlVMRS50aXRsZSk7XFxcXG59XFxcXG5cXFxcbmxldCBzZWFyY2hSZXN1bHQgPSBbXTtcXFxcbmxldCBzZWFyY2hUZXJtcyA9IGdldFBhcmFtKFxcXFxcXFwic2VhcmNoVGVybXNcXFxcXFxcIik7XFxcXG5sZXQgdGVybXNBcnIgPSBzZWFyY2hUZXJtcy5zcGxpdChcXFxcXFxcIlxcXFxcXFwiKS5tYXAodCA9PiB0LnJlcGxhY2UoL1xcXFxcXFxcKnxcXFxcXFxcXC58XFxcXFxcXFw/fFxcXFxcXFxcK3xcXFxcXFxcXCR8XFxcXFxcXFxefFxcXFxcXFxcW3xcXFxcXFxcXF18XFxcXFxcXFwofFxcXFxcXFxcKXxcXFxcXFxcXHt8XFxcXFxcXFx9fFxcXFxcXFxcfHxcXFxcXFxcXC98XFxcXFxcXFxcXFxcXFxcXC9nLCBrID0+IFxcXFxcXFwiXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFwiICsgaykpO1xcXFxubGV0IHJlZyA9IG5ldyBSZWdFeHAodGVybXNBcnIuam9pbihcXFxcXFxcIi4qXFxcXFxcXCIpLCBcXFxcXFxcImlcXFxcXFxcIik7XFxcXG5sZXQgcGFnZVVybCA9IGdldFBhcmFtKFxcXFxcXFwidHlwZVxcXFxcXFwiKSA9PT0gXFxcXFxcXCJub3ZlbFxcXFxcXFwiID8gXFxcXFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxCcm93c2VyLnZpZXdcXFxcXFxcIiA6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbWljQnJvd3Nlci52aWV3XFxcXFxcXCI7XFxcXG5mb3IgKGxldCBzb25EaXIgb2YgY29taWNSdWxlRGlycykge1xcXFxuICAgIGxldCBjb21pY0xpc3QgPSBGaWxlLmdldEZpbGVQYXRoKHNvbkRpci5wYXRoLCBcXFxcXFxcImRpclxcXFxcXFwiKTtcXFxcbiAgICBmb3IgKGxldCBjb21pYyBvZiBjb21pY0xpc3QpIHtcXFxcbiAgICAgICAgaWYgKHJlZy50ZXN0KGNvbWljLm5hbWUpKSB7XFxcXG4gICAgICAgICAgICBzZWFyY2hSZXN1bHQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGNvbWljLm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgcGljX3VybDogY29taWMucGF0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgY29taWMubmFtZSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogcGFnZVVybCArIFxcXFxcXFwiP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLl90aXRsZSxcXFxcbiAgICAgICAgICAgICAgICBkZXNjOiBzb25EaXIubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYTogY29taWNcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG59XFxcXG5zZXRSZXN1bHQoc2VhcmNoUmVzdWx0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7orr7nva5cXFwiLFxcXCJwYXRoXFxcIjpcXFwiU2V0dGluZy52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuc2V0UGFnZVRpdGxlKE1ZX1JVTEUudGl0bGUgKyBcXFxcXFxcInzorr7nva5cXFxcXFxcIik7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG5cXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIjxzdHJvbmc+5Z+656GA6K6+572uPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuebruW9lei3r+W+hFxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/c2V0dGluZ1R5cGU9Y29udGVudHNcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBDb25maWcuaG9tZVBhdGgsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuiuvue9rum7mOiupOWwgemdolxcXFxcXFwiLFxcXFxuICAgIGRlc2M6IENvbmZpZy5kZWZfUGljLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/c2V0dGluZ1R5cGU9ZGVmYXVsdFBpY1xcXFxcXFwiLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgIH1cXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwiPHN0cm9uZz7kuIvovb3lmajorr7nva48L3N0cm9uZz5cXFxcXFxcIi5iaWcoKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5mdW5jdGlvbiBzZXROdW0oa2V5LCB0ZXN0KSB7XFxcXG4gICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCAwKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpO1xcXFxuICAgIGlucHV0ID0gcGFyc2VJbnQoaW5wdXQpO1xcXFxuICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXQpKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ivt+i+k+WFpeaVsOWtl1xcXFxcXFwiO1xcXFxuICAgIGlmICghdGVzdChpbnB1dCkpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5LiN56ym5ZCI5p2h5Lu2XFxcXFxcXCI7XFxcXG4gICAgQ29uZmlnW2tleV0gPSBpbnB1dDtcXFxcbiAgICBzYXZlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcXFxuICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXFxcXFwiO1xcXFxufVxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcImxvZ+aVsFxcXFxcXFwiLFxcXFxuICAgIHVybDogJChDb25maWcubG9nTnVtLCBcXFxcXFxcIjA8TjwxMDBcXFxcXFxcIikuaW5wdXQoc2V0TnVtLCBcXFxcXFxcImxvZ051bVxcXFxcXFwiLCBpdCA9PiBpdCA+IDAgJiYgaXQgPCAxMDApLFxcXFxuICAgIGRlc2M6IFxcXFxcXFwiXFxcXFxcXCIgKyBDb25maWcubG9nTnVtLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuWIhuaJueS4i+i9veaVsCgw5LiN5byA5ZCvKVxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIlxcXFxcXFwiICsgQ29uZmlnLnRocmVhZE51bSwgXFxcXFxcXCJOPi0xXFxcXFxcXCIpLmlucHV0KHNldE51bSwgXFxcXFxcXCJ0aHJlYWROdW1cXFxcXFxcIiwgaXQgPT4gaXQgPiAtMSksXFxcXG4gICAgZGVzYzogXFxcXFxcXCJcXFxcXFxcIiArIENvbmZpZy50aHJlYWROdW0sXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcXFxuICAgIH1cXFxcbn0pO1xcXFxuXFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwiPHN0cm9uZz7lsI/or7TpmIXor7vlmajorr7nva48L3N0cm9uZz5cXFxcXFxcIi5iaWcoKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi6buY6K6k5byA5ZCv5YiG6aG16ZiF6K+7XFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGRlZl9pc1BhZ2luYXRlKSA9PiB7XFxcXG4gICAgICAgIGxldCBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgMCkgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcblxcXFxuICAgICAgICBDb25maWcuZGVmX2lzUGFnaW5hdGUgPSBkZWZfaXNQYWdpbmF0ZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIgPyBcXFxcXFxcIjFcXFxcXFxcIiA6IFxcXFxcXFwiMFxcXFxcXFwiO1xcXFxuXFxcXG4gICAgICAgIHNhdmVGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgIH0sIENvbmZpZy5kZWZfaXNQYWdpbmF0ZSksXFxcXG4gICAgZGVzYzogQ29uZmlnLmRlZl9pc1BhZ2luYXRlID09PSBcXFxcXFxcIjBcXFxcXFxcIiA/IFxcXFxcXFwi5LiN5byA5ZCvXFxcXFxcXCIgOiBcXFxcXFxcIuW8gOWQr1xcXFxcXFwiLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuavj+mhteacgOWkp+eroOaVsFxcXFxcXFwiLFxcXFxuICAgIHVybDogJChDb25maWcudmlld1BhZ2VTaXplLCBcXFxcXFxcIjMwPE48NTAwXFxcXFxcXCIpLmlucHV0KHNldE51bSwgXFxcXFxcXCJ2aWV3UGFnZVNpemVcXFxcXFxcIiwgaXQgPT4gaXQgPiAzMCAmJiBpdCA8IDUwMCksXFxcXG4gICAgZGVzYzogXFxcXFxcXCJcXFxcXFxcIiArIENvbmZpZy52aWV3UGFnZVNpemUsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuabv+aNouinhOWImVxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/c2V0dGluZ1R5cGU9cmVwbGFjZVJ1bGVcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICB9XFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwiPHN0cm9uZz7lhbbku5borr7nva48L3N0cm9uZz5cXFxcXFxcIi5iaWcoKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuinhOWImeWPkeW4g+mhtVxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvcnVsZURldGFpbCNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSM/cnVsZT3pgZPplb/ku5PlupNQcm9cXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBsdmVyOiBNWV9QQVJBTVMudmVyc2lvbiB8fCBcXFxcXFxcIuiOt+WPlueJiOacrOWksei0pe+8jOiHquihjOafpeeci1xcXFxcXFwiLFxcXFxuICAgICAgICBpZDogXFxcXFxcXCIzNTU5XFxcXFxcXCJcXFxcbiAgICB9LFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaBouWkjem7mOiupOiuvue9rlxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIuehruiupOaBouWkjem7mOiupOiuvue9ru+8n1xcXFxcXFwiKS5jb25maXJtKCgpID0+IHtcXFxcbiAgICAgICAgZGVsZXRlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5oGi5aSN5a6M5oiQXFxcXFxcXCI7XFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIua4heeQhue8k+WtmFxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3NldHRpbmdUeXBlPWNhY2hlXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxubGV0IHRpZCA9IERhdGUubm93KCk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5qOA5rWL5pu05pawXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKG9sZFZlcnNpb24sIHRpZCkgPT4ge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IG5ld1ZlcnNpb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvZGV2L2dldGJ5aWQ/aWQ9MzU1OVxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgdGltZW91dDogMjAwMFxcXFxuICAgICAgICAgICAgfSkpLnJlc3VsdC52ZXI7XFxcXG4gICAgICAgICAgICBpZiAobmV3VmVyc2lvbiA8PSBvbGRWZXJzaW9uKSB7XFxcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbSh0aWQgKyBcXFxcXFxcIiPorr7nva5f5pu05pawXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5bey57uP5piv5pyA5paw54mI5pys5LqGXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOaWsOeJiOacrOS6hlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXFxcXFwiI+iuvue9rl/mm7TmlrBcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmnInmlrDniYjmnKzov5jmnKrmm7TmlrBcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5pyJ5paw54mI5pys6L+Y5pyq5pu05pawXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInJ1bGU6Ly81clczNlppVTZLZUc1NVdNNzcrbGFHOXRaVjl5ZFd4bFgzVnliTysvcFdoMGRIQTZMeTlvYVd0bGNpNXViMnRwWVM1d2NtVnpjeTlvYVd0bGNuVnNaUzl5ZFd4bGJHbHpkQzVxYzI5dVAybGtQVE0xTlRrPVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXFxcXFwiI+iuvue9rl/mm7TmlrBcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuS/oeaBr+iOt+WPluWksei0pVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pu05paw5L+h5oGv6I635Y+W5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBNWV9QQVJBTVMudmVyc2lvbiwgdGlkKSxcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBpZDogdGlkICsgXFxcXFxcXCIj6K6+572uX+abtOaWsFxcXFxcXFwiXFxcXG4gICAgfVxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5YWz5LqO5aaC5L2V6LCD55SoXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImh0dHBzOi8vcXVuLnFxLmNvbS9xcXdlYi9xdW5wcm8vc2hhcmU/X3d2PTMmX3d3dj0xMjgmaW52aXRlQ29kZT0xSEZ5QkomZnJvbT0yNDY2MTAmYml6PWthXFxcXFxcXCIsXFxcXG4gICAgZGVzYzogXFxcXFxcXCLor6bnu4bngrnlh7vliqDlhaXpopHpgZPvvIzpopHpgZPph4xATG95RGdJa1xcXFxcXFwiLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbi8qXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5riF6Zmk5bCP6K+05YiG6aG16K6w5b2VXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5riF6Zmk5bCP6K+05YiG6aG16K6w5b2V77yfXFxcXFxcXCIpLmNvbmZpcm0oKCkgPT4ge1xcXFxuICAgICAgICBkZWxldGVGaWxlKFxcXFxcXFwibm92ZWxGb290cHJpbnQuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/muIXpmaTlrozmiJBcXFxcXFxcIjtcXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxufSk7XFxcXG4qL1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcInRleHRfMVxcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7lsI/or7Tnq6DoioLliJfooahcXFwiLFxcXCJwYXRoXFxcIjpcXFwiTm92ZWxCcm93c2VyLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5pZiAoZ2V0UGFyYW0oXFxcXFxcXCJoYXNQYXJhbXNcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiKSB7XFxcXG4gICAgTVlfUEFSQU1TID0ge1xcXFxuICAgICAgICBwYXRoOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJwYXRoXFxcXFxcXCIpKSxcXFxcbiAgICAgICAgbmFtZTogZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwibmFtZVxcXFxcXFwiKSlcXFxcbiAgICB9XFxcXG59XFxcXG5sZXQgcGF0aCA9IE1ZX1BBUkFNUy5wYXRoO1xcXFxuc2V0UGFnZVRpdGxlKFxcXFxcXFwiTlZ8XFxcXFxcXCIgKyBNWV9QQVJBTVMubmFtZSk7XFxcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFxcXFxcIik7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG5jb25zdCBib29rSW5mbyA9IE9iamVjdC5hc3NpZ24oe1xcXFxuICAgIGZvb3Q6IDAsXFxcXG4gICAgaXNSZXBsYWNlOiB0cnVlXFxcXG59LCBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpKTtcXFxcbmxldCBpZCA9IFxcXFxcXFwiI1xcXFxcXFwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxcXG52YXIgbGF5b3V0ID0gW107XFxcXG5sZXQgbW9kZSA9IGdldE15VmFyKFxcXFxcXFwiLm1vZGVcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxubGV0IG1vZGUyID0gZ2V0TXlWYXIoXFxcXFxcXCIubW9kZTJcXFxcXFxcIiwgQ29uZmlnLmRlZl9pc1BhZ2luYXRlKTtcXFxcblxcXFxubGV0IGlzUmV2ZXJzZSA9IGdldE15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG5hZGRMaXN0ZW5lcihcXFxcXFxcIm9uQ2xvc2VcXFxcXFxcIiwgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5tb2RlXFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIubW9kZTJcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5pc1JldmVyc2VcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5wYWdlTnVtXFxcXFxcXCIpO1xcXFxufSkpO1xcXFxuXFxcXG5mdW5jdGlvbiBnZXRUaXRsZSh0aXRsZSkge1xcXFxuICAgIGxldCB0aXRsZXMgPSBUb29sLnNwbGl0KHRpdGxlLCBcXFxcXFxcIiRcXFxcXFxcIiwgMik7XFxcXG4gICAgcmV0dXJuIHRpdGxlc1syXSAhPT0gdW5kZWZpbmVkID8gdGl0bGVzWzJdLnNsaWNlKDAsIHRpdGxlc1syXS5sYXN0SW5kZXhPZihcXFxcXFxcIi5cXFxcXFxcIikpIDogdGl0bGU7XFxcXG59XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5Yig6Zmk5pW05pysXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5Yig6Zmk5pW05pys5bCP6K+077yfXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcXFxuICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBwYXRoKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogW1xcXFxcXFwi55yL5bCP6K+0XFxcXFxcXCIsIFxcXFxcXFwi5Yig6Zmk56ug6IqCXFxcXFxcXCJdW21vZGVdLFxcXFxuICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChtb2RlKSA9PiB7XFxcXG4gICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLm1vZGVcXFxcXFxcIiwgbW9kZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIgPyBcXFxcXFxcIjFcXFxcXFxcIiA6IFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgIH0sIG1vZGUpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMlxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuKAmOKAmOabtOWkmuWKn+iDvSA+4oCZ4oCZXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5mdW5jdGlvbiB0eHQocGF0aHMpIHtcXFxcbiAgICBzaG93TG9hZGluZyhcXFxcXFxcIuato+WcqOWQiOW5ti4uLlxcXFxcXFwiKTtcXFxcbiAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcXFxcXCIpO1xcXFxuICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcblxcXFxuICAgIGxldCBmaWxlbGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aHMucGF0aCwgXFxcXFxcXCJmaWxlXFxcXFxcXCIsIFxcXFxcXFwiLnR4dFxcXFxcXFwiKTtcXFxcbiAgICBsZXQgbGlzdExlbmd0aCA9IGZpbGVsaXN0Lmxlbmd0aDtcXFxcbiAgICBpZiAobGlzdExlbmd0aCA9PT0gMCkge1xcXFxuICAgICAgICBoaWRlTG9hZGluZygpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+epuueahOeroOiKglxcXFxcXFwiO1xcXFxuICAgIH1cXFxcbiAgICBjb25zdCBib29rSW5mbyA9IE9iamVjdC5hc3NpZ24oe1xcXFxuICAgICAgICBzZWxlY3RlZDogW10sXFxcXG4gICAgICAgIGlzUmVwbGFjZTogdHJ1ZVxcXFxuICAgIH0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGhzLnBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIikpO1xcXFxuICAgIGxldCBidWZpbGVsaXN0ID0gW107XFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaXN0TGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgbGV0IGZpbGUgPSBmaWxlbGlzdFtpXTtcXFxcbiAgICAgICAgbGV0IGZpbGVJbmZvID0gVG9vbC5zcGxpdChmaWxlLm5hbWUsIFxcXFxcXFwiJFxcXFxcXFwiLCAyKTtcXFxcbiAgICAgICAgYnVmaWxlbGlzdC5wdXNoKHtcXFxcbiAgICAgICAgICAgIG5hbWU6IGZpbGVJbmZvWzJdLnNsaWNlKDAsIGZpbGVJbmZvWzJdLmxhc3RJbmRleE9mKFxcXFxcXFwiLlxcXFxcXFwiKSksXFxcXG4gICAgICAgICAgICBwYXRoOiBcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIGZpbGUucGF0aCxcXFxcbiAgICAgICAgICAgIGlkOiBOdW1iZXIoZmlsZUluZm9bMF0pIHx8IDBcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIGJ1ZmlsZWxpc3Quc29ydCgoYSwgYikgPT4gYS5pZCAtIGIuaWQpO1xcXFxuICAgIGxldCBlbnRpcmVQYXRoID0gcGF0aHMucGF0aC5yZXBsYWNlKENvbmZpZy5ub3ZlbFBhdGgsIENvbmZpZy5ub3ZlbEZ1bGxQYXRoKSArIFxcXFxcXFwiLnR4dFxcXFxcXFwiO1xcXFxuICAgIGxldCBlbnRpcmVQYXRodG8gPSBib29rSW5mby5pc1JlcGxhY2UgPyBlbnRpcmVQYXRoICsgXFxcXFxcXCIudG1wXFxcXFxcXCIgOiBlbnRpcmVQYXRoO1xcXFxuXFxcXG4gICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIGVudGlyZVBhdGgpKSB7XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi5Yid5aeL5YyW5paH5Lu2XFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoIUZpbGUuZGVsZXRlRmlsZXMoZW50aXJlUGF0aCkpIHtcXFxcbiAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIneWni+WMluWksei0pVxcXFxcXFwiO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgdG9hc3QoXFxcXFxcXCLliJ3lp4vljJbmiJDlip9cXFxcXFxcIik7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG5cXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RMZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBsZXQgaXRlbSA9IGJ1ZmlsZWxpc3RbaV07XFxcXG4gICAgICAgIGxldCBjb250ZW50ID0gcmVxdWVzdChpdGVtLnBhdGgpO1xcXFxuICAgICAgICBGaWxlLmZpbGVXcml0ZUFwcGVuZChlbnRpcmVQYXRodG8sIGl0ZW0ubmFtZSArIFxcXFxcXFwiXFxcXFxcXFxu44CA44CAXFxcXFxcXCIgKyBjb250ZW50LnJlcGxhY2UoL15cXFxcXFxcXHMrfFxcXFxcXFxccyskL2dtLCBcXFxcXFxcIlxcXFxcXFwiKS5yZXBsYWNlKC8mbmJzcDsvZyxcXFxcXFxcIlxcXFxcXFwiKS5zcGxpdCgvXFxcXFxcXFxuKy8pLmpvaW4oXFxcXFxcXCJcXFxcXFxcXHLjgIDjgIBcXFxcXFxcIikgKyBcXFxcXFxcIlxcXFxcXFxcblxcXFxcXFxcblxcXFxcXFwiKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKGJvb2tJbmZvLmlzUmVwbGFjZSkge1xcXFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgbGVuID0gcnVsZUxpc3QubGVuZ3RoO1xcXFxuICAgICAgICBsZXQgcmVwbGFjZVBhdHRlcm4gPSBbXFxcXFxcXCJyZXBsYWNlXFxcXFxcXCIsIFxcXFxcXFwicmVwbGFjZUFsbFxcXFxcXFwiXTtcXFxcbiAgICAgICAgbGV0IGZsYWcgPSBGaWxlLmZpbGVSdWxlKGVudGlyZVBhdGh0bywgZW50aXJlUGF0aCwgKGphdmFTdHJpbmcpID0+IHtcXFxcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXFxcbiAgICAgICAgICAgICAgICBpZiAoIWJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUGF0dGVyblswICsgcmVwbGFjZVJ1bGUuaXNSZWdleF07XFxcXG4gICAgICAgICAgICAgICAgamF2YVN0cmluZyA9IGphdmFTdHJpbmdbcmVwbGFjZV0ocmVwbGFjZVJ1bGUucGF0dGVybiwgcmVwbGFjZVJ1bGUucmVwbGFjZW1lbnQpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcmV0dXJuIGphdmFTdHJpbmcuZ2V0Qnl0ZXMoKTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGlmICghZmxhZykge1xcXFxuICAgICAgICAgICAgaGlkZUxvYWRpbmcoKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5ZCI5bm25aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgIH1cXFxcbiAgICBoaWRlTG9hZGluZygpO1xcXFxuICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5ZCI5bm25a6M5oiQXFxcXFxcXCI7XFxcXG59XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5ZCI5bm25bCP6K+0XFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwi56Gu5a6a5ZCI5bm2P1xcXFxcXFxcbuS8muimhuebluW3suaciVRYVFxcXFxcXFwiKS5jb25maXJtKHR4dCwgTVlfUEFSQU1TKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBbXFxcXFxcXCLimJDliIbpobVcXFxcXFxcIiwgXFxcXFxcXCLimJHliIbpobVcXFxcXFxcIl1bbW9kZTJdLFxcXFxuICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChtb2RlMikgPT4ge1xcXFxuICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5tb2RlMlxcXFxcXFwiLCBtb2RlMiA9PT0gXFxcXFxcXCIwXFxcXFxcXCIgPyBcXFxcXFxcIjFcXFxcXFxcIiA6IFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICB9LCBtb2RlMiksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLlh4DljJZcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL05vdmVsQ3VzdG9tLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCNcXFxcXFxcIixcXFxcbiAgICBleHRyYTogTVlfUEFSQU1TLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5aSW6YOo5p+l55yLXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHBhdGgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgZW50aXJlUGF0aCA9IHBhdGgucmVwbGFjZShDb25maWcubm92ZWxQYXRoLCBDb25maWcubm92ZWxGdWxsUGF0aCkgKyBcXFxcXFxcIi50eHRcXFxcXFxcIjtcXFxcbiAgICAgICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIGVudGlyZVBhdGgpKSB7XFxcXG4gICAgICAgICAgICB0b2FzdChcXFxcXFxcIuiwg+eUqOesrOS4ieaWueW6lOeUqOaJk+W8gOaWh+S7tlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXFxcXFwiICsgZW50aXJlUGF0aFxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mnKzlnLDmmoLml6Dlj6/kvpvlpJbpg6jmiZPlvIDnmoR0eHTmlofku7bvvIzor7flhYjlkIjlubblsI/or7TvvIFcXFxcXFxcIlxcXFxuICAgICAgICB9XFxcXG4gICAgfSwgcGF0aCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5sZXQgbWhsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChwYXRoLCBcXFxcXFxcImZpbGVcXFxcXFxcIiwgXFxcXFxcXCIudHh0XFxcXFxcXCIpO1xcXFxubWhsaXN0LnNvcnQoKGEsIGIpID0+IHtcXFxcbiAgICBhID0gKGEubmFtZS5tYXRjaCgvXFxcXFxcXFxkKy8pIHx8IFtdKVswXSB8fCAwO1xcXFxuICAgIGIgPSAoYi5uYW1lLm1hdGNoKC9cXFxcXFxcXGQrLykgfHwgW10pWzBdIHx8IDA7XFxcXG4gICAgcmV0dXJuIGEgLSBiO1xcXFxufSk7XFxcXG5sZXQgY2hhcHRlckxpc3QgPSBbXTtcXFxcbmxldCBjaGFwdGVyQ291bnQgPSBtaGxpc3QubGVuZ3RoO1xcXFxuXFxcXG5pZiAobW9kZTIgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgbGV0IG1obGlzdENodW5rID0gVG9vbC5jaHVuayhtaGxpc3QsIENvbmZpZy52aWV3UGFnZVNpemUpO1xcXFxuICAgIGxldCB2aWV3UGFnZUNvdW50ID0gbWhsaXN0Q2h1bmsubGVuZ3RoO1xcXFxuICAgIGxldCBkZWZQYWdlID0gKHZpZXdQYWdlQ291bnQgLSAxIDwgYm9va0luZm8uZm9vdCA/IDAgOiBib29rSW5mby5mb290KSB8fCAwO1xcXFxuICAgIGxldCBwYWdlTnVtID0gTnVtYmVyKGdldE15VmFyKFxcXFxcXFwiLnBhZ2VOdW1cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIiArIGRlZlBhZ2UpKTtcXFxcbiAgICBjaGFwdGVyTGlzdCA9IG1obGlzdENodW5rW3BhZ2VOdW1dIHx8IFtdO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIueroOiKgiBcXFxcXFxcIi5iaWcoKSArIChcXFxcXFxcIuacrOmhtTpcXFxcXFxcIiArIGNoYXB0ZXJMaXN0Lmxlbmd0aCArIFxcXFxcXFwiIOWFseaciTpcXFxcXFxcIiArIGNoYXB0ZXJDb3VudCArIFxcXFxcXFwi56ugIOW9k+WJjTpcXFxcXFxcIiArIChwYWdlTnVtICsgMSkgKyBcXFxcXFxcIi9cXFxcXFxcIiArIHZpZXdQYWdlQ291bnQpLnNtYWxsKCksXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChpc1JldmVyc2UpID0+IHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiLCBpc1JldmVyc2UgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgICAgICB9LCBpc1JldmVyc2UpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi6Lez6ZuGXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChjaGFwdGVyQ291bnQsIFxcXFxcXFwi6L6T5YWl6Lez6L2s56ug6IqCIDEtXFxcXFxcXCIgKyBjaGFwdGVyQ291bnQpLmlucHV0KChjaGFwdGVyQ291bnQsIHBhZ2VOdW0sIHZpZXdQYWdlU2l6ZSwgcGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gTnVtYmVyKGlucHV0KTtcXFxcbiAgICAgICAgICAgIGlmIChOdW1iZXIuaXNOYU4oaW5wdXROdW0pIHx8IGlucHV0TnVtIDwgMCB8fCBpbnB1dE51bSA+IGNoYXB0ZXJDb3VudCkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+36L6T5YWl5q2j56Gu6IyD5Zu05YaF55qE5pWw5a2XXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBpbnB1dE51bSA9IE1hdGguZmxvb3IoKGlucHV0TnVtICsgdmlld1BhZ2VTaXplKSAvIHZpZXdQYWdlU2l6ZSkgLSAxO1xcXFxuICAgICAgICAgICAgaWYgKHBhZ2VOdW0gPT09IGlucHV0TnVtKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOW9k+WJjemhtemdolxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIucGFnZU51bVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgaW5wdXROdW0pO1xcXFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgYm9va0luZm8uZm9vdCA9IGlucHV0TnVtO1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgfSwgY2hhcHRlckNvdW50LCBwYWdlTnVtLCBDb25maWcudmlld1BhZ2VTaXplLCBwYXRoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF81XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIui3s+mhtVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQocGFnZU51bSArIDEsIFxcXFxcXFwi6Lez6L2s6aG15pWwIDEtXFxcXFxcXCIgKyB2aWV3UGFnZUNvdW50KS5pbnB1dCgodmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gTnVtYmVyKGlucHV0KSAtIDE7XFxcXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0TnVtKSB8fCBpbnB1dE51bSA8IDAgfHwgaW5wdXROdW0gPiB2aWV3UGFnZUNvdW50IC0gMSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6K+36L6T5YWl5q2j56Gu6IyD5Zu05YaF55qE5pWw5a2XXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBpZiAocGFnZU51bSA9PT0gaW5wdXROdW0pIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5q2j5Zyo5b2T5YmN6aG16Z2iXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5wYWdlTnVtXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIgKyBpbnB1dE51bSk7XFxcXG4gICAgICAgICAgICBjb25zdCBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICB9LCB2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF81XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuS4iuS4gOmhtVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgocGFnZU51bSwgcGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFnZU51bSAtIDE7XFxcXG4gICAgICAgICAgICBpZiAoaW5wdXROdW0gPCAwKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7Lnu4/mmK/nrKzkuIDpobXkuoZcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnBhZ2VOdW1cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIiArIGlucHV0TnVtKTtcXFxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIHBhZ2VOdW0sIHBhdGgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzVcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5LiL5LiA6aG1XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCh2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgaW5wdXROdW0gPSBwYWdlTnVtICsgMTtcXFxcbiAgICAgICAgICAgIGlmIChpbnB1dE51bSA+IHZpZXdQYWdlQ291bnQgLSAxKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7Lnu4/mmK/mnIDlkI7kuIDpobXkuoZcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnBhZ2VOdW1cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIiArIGlucHV0TnVtKTtcXFxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIHZpZXdQYWdlQ291bnQsIHBhZ2VOdW0sIHBhdGgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzVcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5pyr6aG1XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCh2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICBsZXQgaW5wdXROdW0gPSB2aWV3UGFnZUNvdW50IC0gMTtcXFxcbiAgICAgICAgICAgIGlmIChwYWdlTnVtID09PSBpbnB1dE51bSB8fCBpbnB1dE51bSA9PT0gLTEpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOWQjuS4gOmhteS6hlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIucGFnZU51bVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgaW5wdXROdW0pO1xcXFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgYm9va0luZm8uZm9vdCA9IGlucHV0TnVtO1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfNVxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG59IGVsc2Uge1xcXFxuICAgIGNoYXB0ZXJMaXN0ID0gbWhsaXN0O1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIueroOiKgiBcXFxcXFxcIi5iaWcoKSArIChcXFxcXFxcIuWFseaciTpcXFxcXFxcIiArIGNoYXB0ZXJDb3VudCArIFxcXFxcXFwi56ugXFxcXFxcXCIpLnNtYWxsKCksXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChpc1JldmVyc2UpID0+IHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiLCBpc1JldmVyc2UgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgICAgICB9LCBpc1JldmVyc2UpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxufVxcXFxubGV0IGFycmF5ID0gW107XFxcXG5pZiAobW9kZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIpIHtcXFxcbiAgICBmb3IgKGxldCBpdGVtIG9mIGNoYXB0ZXJMaXN0KSB7XFxcXG4gICAgICAgIGxldCBuYW1lID0gZ2V0VGl0bGUoaXRlbS5uYW1lKTtcXFxcbiAgICAgICAgYXJyYXkucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogbmFtZSxcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxNYWluQm9keSNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBpdGVtLnBhdGgsXFxcXG4gICAgICAgICAgICAgICAgZGlyUGF0aDogcGF0aCxcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbmFtZSxcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogQ29uZmlnLmRlZl9WaWV3X1N0eWxlXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbn0gZWxzZSB7XFxcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjaGFwdGVyTGlzdCkge1xcXFxuICAgICAgICBsZXQgbmFtZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxcXG4gICAgICAgIGFycmF5LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCLnoa7orqTliKDpmaRbXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCJd77yfXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9LCBpdGVtLnBhdGgpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG5pZiAoaXNSZXZlcnNlID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGFycmF5LnJldmVyc2UoKTtcXFxcbn1cXFxcbmxheW91dC5wdXNoLmFwcGx5KGxheW91dCwgYXJyYXkpO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu5bCP6K+05q2j5paH6ZiF6K+7XFxcIixcXFwicGF0aFxcXCI6XFxcIk5vdmVsTWFpbkJvZHlcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG52YXIgbGF5b3V0ID0gW107XFxcXG5sZXQgY29udGVudCA9IHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBNWV9QQVJBTVMucGF0aCk7XFxcXG4vL2NvbnRlbnQgPSBjb250ZW50LnJlcGxhY2UoL1xcXFxcXFxcbnxcXFxcXFxcXHIvZywgXFxcXFxcXCI8YnI+XFxcXFxcXCIpLnJlcGxhY2UoLygmbmJzcDspKy9nLFxcXFxcXFwiIFxcXFxcXFwiKTtcXFxcbmNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgc2VsZWN0ZWQ6IFtdLFxcXFxuICAgIGlzUmVwbGFjZTogdHJ1ZVxcXFxufSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgTVlfUEFSQU1TLmRpclBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIikpO1xcXFxuXFxcXG5pZiAoYm9va0luZm8uaXNSZXBsYWNlKSB7XFxcXG4gICAgbGV0IGphdmFTdHJpbmcgPSBqYXZhLmxhbmcuU3RyaW5nKGNvbnRlbnQpO1xcXFxuICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgbGV0IHJlcGxhY2VQYXR0ZXJuID0gW1xcXFxcXFwicmVwbGFjZVxcXFxcXFwiLCBcXFxcXFxcInJlcGxhY2VBbGxcXFxcXFxcIl07XFxcXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgIGxldCByZXBsYWNlUnVsZSA9IHJ1bGVMaXN0W2ldO1xcXFxuICAgICAgICBpZiAoIWJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKSkge1xcXFxuICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUGF0dGVyblswICsgcmVwbGFjZVJ1bGUuaXNSZWdleF07XFxcXG4gICAgICAgIGphdmFTdHJpbmcgPSBqYXZhU3RyaW5nW3JlcGxhY2VdKHJlcGxhY2VSdWxlLnBhdHRlcm4sIHJlcGxhY2VSdWxlLnJlcGxhY2VtZW50KTtcXFxcbiAgICB9XFxcXG4gICAgY29udGVudCA9IFN0cmluZyhqYXZhU3RyaW5nKTtcXFxcbn1cXFxcbmNvbnRlbnQgPSBcXFxcXFxcIuOAgOOAgFxcXFxcXFwiICsgY29udGVudC5yZXBsYWNlKC9eXFxcXFxcXFxzK3xcXFxcXFxcXHMrJC9nbSwgXFxcXFxcXCJcXFxcXFxcIikuc3BsaXQoL1xcXFxcXFxcbisvKS5qb2luKFxcXFxcXFwiPGJyPuOAgOOAgFxcXFxcXFwiKTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiLFxcXFxuICAgIHRpdGxlOiAoXFxcXFxcXCI8c3Ryb25nPlxcXFxcXFwiICsgTVlfUEFSQU1TLnRpdGxlICsgXFxcXFxcXCI8L3N0cm9uZz5cXFxcXFxcIikuYmlnKCksXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBjb250ZW50LFxcXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICB0ZXh0U2l6ZTogMTgsXFxcXG4gICAgICAgIGNsaWNrOiB0cnVlXFxcXG4gICAgfVxcXFxufSk7XFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwidGV4dF8xXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuWQiOW5tlRYVFxcXCIsXFxcInBhdGhcXFwiOlxcXCJOb3ZlbENvbGxlY3RlZC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxubGV0IHJ1bGVsRGlyID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWcubm92ZWxGdWxsUGF0aCwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLlkIjlubZUWFRcXFxcXFxcIik7XFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5cXFxcbmZ1bmN0aW9uIG9wZXJhdGlvbihwYXRoKSB7XFxcXG4gICAgc3dpdGNoIChpbnB1dCkge1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5YiG5LqrXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJzaGFyZTovL1xcXFxcXFwiICsgcGF0aDtcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5rW36ZiU6aKE6KeIXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvdHh0UGFyc2VyLnZpZXdcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFxcXFxcIiArIHBhdGg7XFxcXG4gICAgICAgICAgICBicmVhaztcXFxcbiAgICB9XFxcXG59XFxcXG5mb3IgKGxldCBydWxlUGF0aHMgb2YgcnVsZWxEaXIpIHtcXFxcbiAgICBsZXQgbm92ZWxzID0gRmlsZS5nZXRGaWxlUGF0aChydWxlUGF0aHMucGF0aCwgXFxcXFxcXCJmaWxlXFxcXFxcXCIsIFxcXFxcXFwiLnR4dFxcXFxcXFwiKTtcXFxcbiAgICBmb3IgKGxldCBub3ZlbCBvZiBub3ZlbHMpIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5vdmVsLm5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6ICQoW1xcXFxcXFwi5YiG5LqrXFxcXFxcXCIsIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCIsIFxcXFxcXFwi5rW36ZiU6aKE6KeIXFxcXFxcXCIsIFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCJdLCAxKS5zZWxlY3Qob3BlcmF0aW9uLCBub3ZlbC5wYXRoKSxcXFxcbiAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi5p2l5rqQ77yaXFxcXFxcXCIgKyBydWxlUGF0aHMubmFtZSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBub3ZlbC5wYXRoXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbn1cXFxcbmlmIChsYXlvdXQubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJzxoMSBzdHlsZT1cXFxcXFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFxcXFxcIj7llaXpg73msqHmnInogLY8L2gxPicsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG59XFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7mm7TlpJrorr7nva5cXFwiLFxcXCJwYXRoXFxcIjpcXFwiU2V0dGluZy9Nb3JlLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG5cXFxcbmNvbnN0IHNldHRpbmdUeXBlID0gTVlfUEFSQU1TLnNldHRpbmdUeXBlIHx8IGdldFBhcmFtKFxcXFxcXFwic2V0dGluZ1R5cGVcXFxcXFxcIik7XFxcXG5cXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcbmxldCBpZCA9IFxcXFxcXFwiI1xcXFxcXFwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxcXG5zd2l0Y2ggKHNldHRpbmdUeXBlKSB7XFxcXG4gICAgY2FzZSBcXFxcXFxcImNhY2hlXFxcXFxcXCI6XFxcXG4gICAgICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIua4hemZpOe8k+WtmHzorr7nva5cXFxcXFxcIik7XFxcXG4gICAgICAgIGNvbnN0IGtub3duTGlzdCA9IG5ldyBNYXAoW1xcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcubm92ZWxQYXRoKSwgXFxcXFxcXCIj566h55CG5ZmoI+Wwj+ivtOe8k+WtmOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcuY29taWNQYXRoKSwgXFxcXFxcXCIj566h55CG5ZmoI+a8q+eUu+e8k+WtmOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcuZXh0ZXJuYWxJbXBvcnRQYXRoKSwgXFxcXFxcXCIj566h55CG5ZmoI+WvvOWFpeeahFRYVOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcubm92ZWxGdWxsUGF0aCksIFxcXFxcXFwiI+euoeeQhuWZqCPlsI/or7TlkIjlubbnm67lvZVb5Y+v5Lul5riF6ZmkXVxcXFxcXFwiXSxcXFxcbiAgICAgICAgICAgIFtcXFxcXFxcImRy56ug6IqC57yT5a2YXFxcXFxcXCIsIFxcXFxcXFwi6YGT6ZW/5qih5p2/5Li05pe257yT5a2YW+W7uuiurua4hemZpF1cXFxcXFxcIl1cXFxcbiAgICAgICAgXSk7XFxcXG5cXFxcbiAgICAgICAgbGV0IGNhY2hlRGlyID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWcuaG9tZVBhdGgsIFxcXFxcXFwiZGlyXFxcXFxcXCIpO1xcXFxuXFxcXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFuQ2FjaGUocGF0aCkge1xcXFxuICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/muIXpmaTlrozmiJBcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/muIXpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBmb3IgKGxldCBjYWNoZSBvZiBjYWNoZURpcikge1xcXFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBjYWNoZS5uYW1lLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi5aSn5bCP77yaXFxcXFxcXCIgKyBGaWxlLmdldEZpbGVTaXplKGNhY2hlLnBhdGgpICsgXFxcXFxcXCJcXFxcXFxcXG7mj4/ov7DvvJpcXFxcXFxcIiArIChrbm93bkxpc3QuZ2V0KGNhY2hlLm5hbWUpIHx8IFxcXFxcXFwi5pyq55+l55uu5b2VW+mjjumZqeacquefpV1cXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5riF6ZmkIFxcXFxcXFwiICsgY2FjaGUubmFtZSArIFxcXFxcXFwiID9cXFxcXFxcIikuY29uZmlybShjbGVhbkNhY2hlLCBjYWNoZS5wYXRoKVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLlhajpg6jmuIXpmaQoXFxcXFxcXCIgKyBGaWxlLmdldEZpbGVTaXplKENvbmZpZy5ob21lUGF0aCkgKyBcXFxcXFxcIilcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogJChcXFxcXFxcIuehruiupOa4hemZpOWFqOmDqOe8k+WtmOaVsOaNrj9cXFxcXFxcIikuY29uZmlybShjbGVhbkNhY2hlLCBDb25maWcuaG9tZVBhdGgpXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwiZGVmYXVsdFBpY1xcXFxcXFwiOlxcXFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcXFxcXCLpu5jorqTlsIHpnaJ86K6+572uXFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoZ2V0TXlWYXIoXFxcXFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGZ1bmN0aW9uIHNldERlZmF1bHRQaWModXJsKSB7XFxcXG4gICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIDApIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IHVybDtcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxcXG4gICAgICAgICAgICBiYWNrKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxldCBzdGFydCA9IDE7XFxcXG4gICAgICAgIGlmICh0eXBlb2YoTVlfTkFNRSkgIT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgJiYgTVlfTkFNRSA9PT0gXFxcXFxcXCLll4Xop4nmtY/op4jlmahcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgc3RhcnQgPSA0O1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSA0OyBpKyspIHtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLlm77niYdcXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibW92aWVfM1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IFxcXFxcXFwiaGlrZXI6Ly9pbWFnZXMvaG9tZV9waWNcXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoc2V0RGVmYXVsdFBpYywgXFxcXFxcXCJoaWtlcjovL2ltYWdlcy9ob21lX3BpY1xcXFxcXFwiICsgaSlcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuiHquWumuS5ieKelVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6ICQoW1xcXFxcXFwi6Ieq5a6a5LmJdXJsXFxcXFxcXCIsIFxcXFxcXFwi6YCJ5oup5paH5Lu26Lev5b6EXFxcXFxcXCJdKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXFxcXFxcXCLoh6rlrprkuYl1cmxcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFxcXFxcIlxcXFxcXFwiLCBcXFxcXFxcIui+k+WFpeWbvueJh+eahOi3r+W+hOaIluiAhemTvuaOpVxcXFxcXFwiKS5pbnB1dCgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIDApIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IGlucHV0O1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5L+u5pS55oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcXFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlU2VsZWN0ID0gcmVxdWlyZShyZXF1aXJlVXJsKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCAwKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbmZpZy5kZWZfUGljID0gXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBQQVRIO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFxcXFxcIiwgXFxcXFxcXCJ0cnVlXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlVXJsOiByZXF1aXJlVXJsLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGU6IFxcXFxcXFwiLmpwZ3wuanBlZ3wuZ2lmfC5wbmd8LnN2Z3wuYm1wXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcXFxcXCJjb25maXJtXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnk6IFxcXFxcXFwic2VsZWN0UGF0aENhY2hlMlxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwicmVwbGFjZVJ1bGVcXFxcXFxcIjpcXFxcbiAgICAgICAgaWYgKE1ZX1BBUkFNUy5pc1JlZnJlc2gpIHtcXFxcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKFxcXFxcXFwib25DbG9zZVxcXFxcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHJlZnJlc2hQYWdlKCkpKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcXFxcXCLmm7/mjaLop4TliJl86K6+572uXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmlrDlu7rmm7/mjaJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvZWRpdFJlcGxhY2VSdWxlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/aXNOZXc9dHJ1ZVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWvvOWHuuinhOWImVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5a+85Ye6XFxcXFxcXCIgKyBydWxlTGlzdC5sZW5ndGggKyBcXFxcXFxcIuadoeinhOWIme+8n1xcXFxcXFxcbih7aG9tZVB0YWh9L3JlcGxhY2VSdWxlLmpzb24pXFxcXFxcXCIpLmNvbmZpcm0oKG51bSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgc2F2ZVB0YSA9IENvbmZpZy5ob21lUGF0aCArIFxcXFxcXFwiL3JlcGxhY2VSdWxlLmpzb25cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoc2F2ZVB0YSwgcmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgbG9nKFxcXFxcXFwiXFxcXFxcXFxu6Lev5b6E77yaXFxcXFxcXCIgKyBzYXZlUHRhICsgXFxcXFxcXCJcXFxcXFxcXG7lr7zlh7rop4TliJkgXFxcXFxcXCIgKyBudW0gKyBcXFxcXFxcIiDmnaFcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwic2hhcmU6Ly9cXFxcXFxcIiArIHNhdmVQdGE7XFxcXG4gICAgICAgICAgICB9LCBydWxlTGlzdC5sZW5ndGgpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG5cXFxcbiAgICAgICAgZnVuY3Rpb24gaW1wb3J0UnVsZShpc2JhY2spIHtcXFxcbiAgICAgICAgICAgIGlucHV0ID0gdHlwZW9mIFBBVEggPT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgPyBpbnB1dCA6IFBBVEg7XFxcXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnN0YXJ0c1dpdGgoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIpID8gaW5wdXQgOiBcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIGlucHV0XFxcXG4gICAgICAgICAgICBsZXQgcnVsZVRleHQgPSByZXF1ZXN0KGlucHV0KTtcXFxcbiAgICAgICAgICAgIGlmICghcnVsZVRleHQpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6I635Y+W5paH5Lu25Li656m6XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBuZXdSdWxlTGlzdCA9IEpTT04ucGFyc2UocnVsZVRleHQpO1xcXFxuICAgICAgICAgICAgICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgbGV0IG5ld0NvdW50ID0gMCxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ291bnQgPSAwO1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gbmV3UnVsZUxpc3QpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1J1bGUgPSBuZXdSdWxlTGlzdFtpXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdSdWxlLmhhc093blByb3BlcnR5KFxcXFxcXFwicmVwbGFjZW1lbnRcXFxcXFxcIikgfHwgIW5ld1J1bGUuaGFzT3duUHJvcGVydHkoXFxcXFxcXCJwYXR0ZXJuXFxcXFxcXCIpIHx8ICFuZXdSdWxlLmhhc093blByb3BlcnR5KFxcXFxcXFwibmFtZVxcXFxcXFwiKSB8fCAobmV3UnVsZS5zY29wZUNvbnRlbnQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogIW5ld1J1bGUuc2NvcGVDb250ZW50KSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gbmV3UnVsZS5pZDtcXFxcbiAgICAgICAgICAgICAgICAgICAgbmV3UnVsZS5pZCA9IGlkIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgaWRJbmRleCA9IHJ1bGVMaXN0LmZpbmRJbmRleChydWxlID0+IHJ1bGUuaWQgPT09IGlkKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkSW5kZXggPiAtMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ291bnQrKztcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVMaXN0LnNwbGljZShpZEluZGV4LCAxLCBuZXdSdWxlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvdW50Kys7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTGlzdC5wdXNoKG5ld1J1bGUpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShydWxlTGlzdCkpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpc2JhY2spIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGxvZyhcXFxcXFxcIlxcXFxcXFxcbui3r+W+hO+8mlxcXFxcXFwiICsgaW5wdXQgKyBcXFxcXFxcIlxcXFxcXFxcbuaAu+inhOWImeaVsO+8mlxcXFxcXFwiICsgbmV3UnVsZUxpc3QubGVuZ3RoICsgXFxcXFxcXCJcXFxcXFxcXG7mm7TmlrDop4TliJkgXFxcXFxcXCIgKyB1cGRhdGVDb3VudCArIFxcXFxcXFwiIOadoVxcXFxcXFxcdOaWsOWinuinhOWImSBcXFxcXFxcIiArIG5ld0NvdW50ICsgXFxcXFxcXCIg5p2hXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5a+85YWl5oiQ5YqfXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpc2JhY2spIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICB0b2FzdChcXFxcXFxcIuWvvOWFpeWksei0pVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLlr7zlhaXop4TliJlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogJChbXFxcXFxcXCLlpJbpg6jmlofku7ZcXFxcXFxcIiwgXFxcXFxcXCLlhoXpg6jmlofku7ZcXFxcXFxcIl0sIDEsIFxcXFxcXFwi6KeE5YiZ5a+85YWlXFxcXFxcXCIpLnNlbGVjdCgoaW1wb3J0UnVsZSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXFxcXFxcXCLlpJbpg6jmlofku7ZcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJmaWxlU2VsZWN0Oi8vXFxcXFxcXCIgKyAkLnRvU3RyaW5nKGltcG9ydFJ1bGUpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcXFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlU2VsZWN0ID0gcmVxdWlyZShyZXF1aXJlVXJsKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogJC50b1N0cmluZyhpbXBvcnRSdWxlLCB0cnVlKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVVcmw6IHJlcXVpcmVVcmwsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZTogXFxcXFxcXCIuanNvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1R5cGU6IFxcXFxcXFwiY29uZmlybVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVtb3J5OiBcXFxcXFxcInNlbGVjdFBhdGhDYWNoZVxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0sIGltcG9ydFJ1bGUpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgICAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIi5cXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWIoOmZpFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChpZCwgaW5kZXgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcInJlcGxhY2VSdWxlLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSBydWxlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShydWxlTGlzdCkpO1xcXFxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZUl0ZW1CeUNscyhpZCArIFxcXFxcXFwiLlxcXFxcXFwiICsgaW5kZXgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5Yig6Zmk5oiQ5YqfXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSwgaWQsIGkpLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIi5cXFxcXFxcIiArIGlcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMlxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLnvJbovpFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2VkaXRSZXBsYWNlUnVsZS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjP2luZGV4PVxcXFxcXFwiICsgaSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcXFxcXCIuXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIi5cXFxcXFxcIiArIGlcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwiY29udGVudHNcXFxcXFxcIjpcXFxcbiAgICAgICAgbGV0IGYgPSByZXF1aXJlKFxcXFxcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXFxcXFwiKTtcXFxcbiAgICAgICAgc2V0UGFnZVRpdGxlKFxcXFxcXFwi55uu5b2V6K6+572ufOiuvue9rlxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6YCJ5oup5paH5Lu25aS5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IEpTT04uc3RyaW5naWZ5KGYuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKGlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBmaW5kSXRlbShpZCkuZXh0cmE7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUl0ZW0oaWQsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBPYmplY3QuYXNzaWduKHRhcmdldCwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogUEFUSFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgICAgICAgICAgICAgIH0sIGlkKSxcXFxcbiAgICAgICAgICAgICAgICBpbml0aWFsUGF0aDogQ29uZmlnLmhvbWVQYXRoLFxcXFxuICAgICAgICAgICAgICAgIHJlcXVpcmVVcmw6IFxcXFxcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHBhdHRlcm46IDFcXFxcbiAgICAgICAgICAgIH0pKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImlucHV0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBkZXNjOiBcXFxcXFxcIuaUr+aMgWhpa2VyOi8vZmlsZXPot6/lvoQo6K+l5pON5L2c5LiN5Lya5Yid5aeL5YyW55uu5b2VKVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IENvbmZpZy5ob21lUGF0aCxcXFxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogJC50b1N0cmluZygoaWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoaWQsIGlucHV0KTtcXFxcbiAgICAgICAgICAgICAgICB9LCBpZCksXFxcXG4gICAgICAgICAgICAgICAgaWQ6IGlkXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuehruiupFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gZ2V0TXlWYXIoaWQsIGZpbmRJdGVtKGlkKS5leHRyYS5kZWZhdWx0VmFsdWUgfHwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9cXFxcXFxcIikpIGlucHV0ID0gZ2V0UGF0aChpbnB1dCkuc2xpY2UoNyk7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmVuZHNXaXRoKFxcXFxcXFwiL1xcXFxcXFwiKSkgaW5wdXQ9aW5wdXQucmVwbGFjZSgvXFxcXFxcXFwvJC8sXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKENvbmZpZy5ob21lUGF0aCA9PSBpbnB1dCkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7Lnu4/mmK/lvZPliY3nm67lvZVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgMCkgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBDb25maWcuaG9tZVBhdGggPSBpbnB1dDtcXFxcbiAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcXFxuICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3suS/neWtmFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSwgaWQpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbnNldFJlc3VsdChsYXlvdXQpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2Lue8lui+keabv+aNouinhOWImVxcXCIsXFxcInBhdGhcXFwiOlxcXCJlZGl0UmVwbGFjZVJ1bGUudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IGlzTmV3ID0gTVlfUEFSQU1TLmlzTmV3IHx8IGdldFBhcmFtKFxcXFxcXFwiaXNOZXdcXFxcXFxcIik7XFxcXG5jb25zdCBpbmRleCA9IE1ZX1BBUkFNUy5pbmRleCB8fCBOdW1iZXIoZ2V0UGFyYW0oXFxcXFxcXCJpbmRleFxcXFxcXFwiKSk7XFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5hZGRMaXN0ZW5lcihcXFxcXFxcIm9uQ2xvc2VcXFxcXFxcIiwgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUubmFtZVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5pc1JlZ2V4XFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLnBhdHRlcm5cXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuZmlyc3RcXFxcXFxcIik7XFxcXG4gICAgLy9jbGVhck15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5zY29wZVxcXFxcXFwiKTtcXFxcbn0pKTtcXFxcbmxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG5sZXQgaWQgPSBcXFxcXFxcIiNcXFxcXFxcIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcXFxuLy9sZXQgcmVwbGFjZVJ1bGUgPSBpc05ldyA9PSBcXFxcXFxcInRydWVcXFxcXFxcIj97fTpydWxlTGlzdFtpbmRleF07XFxcXG5pZiAoaXNOZXcgPT0gXFxcXFxcXCJ0cnVlXFxcXFxcXCIpIHtcXFxcbiAgICByZXBsYWNlUnVsZSA9IHtcXFxcbiAgICAgICAgaWQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxcXFxuICAgICAgICBpc1JlZ2V4OiBmYWxzZSxcXFxcbiAgICB9XFxcXG59IGVsc2Uge1xcXFxuICAgIHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaW5kZXhdO1xcXFxufVxcXFxuLy/pppbmrKHliJ3lp4vljJZcXFxcbmlmKGdldE15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5maXJzdFxcXFxcXFwiLFxcXFxcXFwiXFxcXFxcXCIpPT1cXFxcXFxcIlxcXFxcXFwiKXtcXFxcbiAgICBwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgcmVwbGFjZVJ1bGUuaXNSZWdleCk7XFxcXG4gICAgcHV0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmZpcnN0XFxcXFxcXCIsXFxcXFxcXCIxXFxcXFxcXCIpO1xcXFxufVxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaLt+i0nVxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgpID0+IHtcXFxcbiAgICAgICAgbGV0IGF0dCA9IFtcXFxcXFxcIm5hbWVcXFxcXFxcIiwgXFxcXFxcXCJpc1JlZ2V4XFxcXFxcXCIsIFxcXFxcXFwicGF0dGVyblxcXFxcXFwiLCBcXFxcXFxcInJlcGxhY2VtZW50XFxcXFxcXCJdO1xcXFxuICAgICAgICBsZXQganNvbiA9IHt9O1xcXFxuICAgICAgICBhdHQuZm9yRWFjaChrZXkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLlxcXFxcXFwiICsga2V5LCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFxcXFxcXFwiaXNSZWdleFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gXFxcXFxcXCJ0cnVlXFxcXFxcXCIgPyB0cnVlIDogZmFsc2U7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBqc29uW2tleV0gPSB2YWx1ZTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGNvcHkoSlNPTi5zdHJpbmdpZnkoanNvbikpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIueymOi0tFxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcInt7Y2xpcGJvYXJkfX1cXFxcXFxcIikuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGlucHV0KTtcXFxcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pIHx8IGpzb24ucGF0dGVybiA9PSB1bmRlZmluZWQpIHJldHVybjtcXFxcbiAgICAgICAgICAgIGxldCBhdHQgPSBbXFxcXFxcXCJuYW1lXFxcXFxcXCIsIFxcXFxcXFwiaXNSZWdleFxcXFxcXFwiLCBcXFxcXFxcInBhdHRlcm5cXFxcXFxcIiwgXFxcXFxcXCJyZXBsYWNlbWVudFxcXFxcXFwiXTtcXFxcbiAgICAgICAgICAgIGF0dC5mb3JFYWNoKGtleSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLlxcXFxcXFwiICsga2V5LCBTdHJpbmcoanNvbltrZXldKSk7XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuabv+aNouinhOWImeWQjeensFxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLm5hbWVcXFxcXFxcIiwgcmVwbGFjZVJ1bGUubmFtZSksXFxcXG4gICAgICAgIG9uQ2hhbmdlOiAncHV0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLm5hbWVcXFxcXFxcIixpbnB1dCk7J1xcXFxuICAgIH1cXFxcbn0pO1xcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuabv+aNouinhOWImVxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgIHR5cGU6IFxcXFxcXFwidGV4dGFyZWFcXFxcXFxcIixcXFxcbiAgICAgICAgaGVpZ2h0OiAtMSxcXFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXFxcXFwiLCByZXBsYWNlUnVsZS5wYXR0ZXJuKSxcXFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXFxcXFwiLCBpbnB1dCk7J1xcXFxuICAgIH1cXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaYr+WQpuS9v+eUqOato+WImeihqOi+vuW8j++8mlxcXFxcXFwiICsgZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFxcXFxcIiksXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGlkKSA9PiB7XFxcXG4gICAgICAgIGxldCBpc1JlZ2V4ID0gZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiID8gZmFsc2UgOiB0cnVlO1xcXFxuICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IGlkXFxcXG4gICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5piv5ZCm5L2/55So5q2j5YiZ6KGo6L6+5byP77yaXFxcXFxcXCIgKyBpc1JlZ2V4XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgaXNSZWdleCk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICB9LCBpZCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6IGlkXFxcXG4gICAgfVxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuabv+aNouS4ulxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgIHR5cGU6IFxcXFxcXFwidGV4dGFyZWFcXFxcXFxcIixcXFxcbiAgICAgICAgaGVpZ2h0OiAtMSxcXFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFxcXFxcIiwgcmVwbGFjZVJ1bGUucmVwbGFjZW1lbnQpLFxcXFxuICAgICAgICBvbkNoYW5nZTogJ3B1dE15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5yZXBsYWNlbWVudFxcXFxcXFwiLGlucHV0KTsnXFxcXG4gICAgfVxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5L+d5a2YXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHJlcGxhY2VSdWxlLCBpc05ldywgaW5kZXgpID0+IHtcXFxcbiAgICAgICAgbGV0IHBhdHRlcm4gPSBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgaWYgKCFwYXR0ZXJuKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+abv+aNouinhOWImeS4jeiDveS4uuepulxcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVwbGFjZVJ1bGUsIHtcXFxcbiAgICAgICAgICAgIG5hbWU6IGdldE15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5uYW1lXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgaXNSZWdleDogZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiID8gdHJ1ZSA6IGZhbHNlLFxcXFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybixcXFxcbiAgICAgICAgICAgIHJlcGxhY2VtZW50OiBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIilcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgIGlmIChpc05ldyA9PSBcXFxcXFxcInRydWVcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcnVsZUxpc3QucHVzaChyZXBsYWNlUnVsZSk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBydWxlTGlzdC5zcGxpY2UoaW5kZXgsIDEsIHJlcGxhY2VSdWxlKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBzYXZlRmlsZShcXFxcXFxcInJlcGxhY2VSdWxlLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkocnVsZUxpc3QpKTtcXFxcbiAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/neWtmOaIkOWKn1xcXFxcXFwiO1xcXFxuICAgIH0sIHJlcGxhY2VSdWxlLCBpc05ldywgaW5kZXgpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbn0pO1xcXFxuXFxcXG4vKlxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImlucHV0XFxcXFxcXCIsXFxcXG4gICAgZGVzYzogXFxcXFxcXCLmm7/mjaLojIPlm7RcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxcXFxuICAgICAgICB0eXBlOiBcXFxcXFxcInRleHRhcmVhXFxcXFxcXCIsXFxcXG4gICAgICAgIGhlaWdodDogLTEsXFxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuc2NvcGVcXFxcXFxcIixpbnB1dCk7J1xcXFxuICAgIH1cXFxcbn0pO1xcXFxuXFxcXG4qL1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu5bCP6K+05Liq5oCn5YyW5YeA5YyWXFxcIixcXFwicGF0aFxcXCI6XFxcIk5vdmVsQ3VzdG9tLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLmm7/mjaLop4TliJl8XFxcXFxcXCIgKyBNWV9QQVJBTVMubmFtZSk7XFxcXG5sZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxubGV0IGlkID0gXFxcXFxcXCIjXFxcXFxcXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcXFxcblxcXFxuY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXFxcbiAgICBmb290OiAwLFxcXFxuICAgIGlzUmVwbGFjZTogdHJ1ZSxcXFxcbiAgICBzZWxlY3RlZDogW11cXFxcbn0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIE1ZX1BBUkFNUy5wYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpKTtcXFxcblxcXFxubGV0IGxheW91dCA9IFtdO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBbXFxcXFxcXCLimJDlh4DljJZcXFxcXFxcIiwgXFxcXFxcXCLimJHlh4DljJZcXFxcXFxcIl1bMCArIGJvb2tJbmZvLmlzUmVwbGFjZV0sXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCRpZCwgcGF0aCkgPT4ge1xcXFxuXFxcXG4gICAgICAgIHZhciBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBpc1JlcGxhY2UgPSBib29rSW5mby5pc1JlcGxhY2U9PT11bmRlZmluZWQ/dHJ1ZTpib29rSW5mby5pc1JlcGxhY2U7XFxcXG4gICAgICAgIGJvb2tJbmZvLmlzUmVwbGFjZSA9ICFpc1JlcGxhY2U7XFxcXG4gICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgIHVwZGF0ZUl0ZW0oJGlkLCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogaXNSZXBsYWNlID8gXFxcXFxcXCLimJDlh4DljJZcXFxcXFxcIiA6IFxcXFxcXFwi4piR5YeA5YyWXFxcXFxcXCIsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSwgaWQgKyBcXFxcXFxcIiMtMVxcXFxcXFwiLCBNWV9QQVJBTVMucGF0aCksXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6IGlkICsgXFxcXFxcXCIjLTFcXFxcXFxcIlxcXFxuICAgIH0sXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIue8lui+keinhOWImVxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/c2V0dGluZ1R5cGU9cmVwbGFjZVJ1bGVcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICBleHRyYTp7XFxcXG4gICAgICAgIGlzUmVmcmVzaDogdHJ1ZVxcXFxuICAgIH1cXFxcbn0pO1xcXFxuZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgbGV0IHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaV07XFxcXG4gICAgbGV0IGlzVHJ1ZSA9IGJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAoaXNUcnVlID8gXFxcXFxcXCLil49cXFxcXFxcIiA6IFxcXFxcXFwi4peLXFxcXFxcXCIpICsgcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgIHk6IDAsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpc1RydWU6IGlzVHJ1ZSxcXFxcbiAgICAgICAgICAgIGlkOiBpZCArIGksXFxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5byA5ZCvXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgkaWQsIHJlcGxhY2VSdWxlLCBwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoZmluZEl0ZW0oJGlkKS5leHRyYS5pc1RydWUpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3suW8gOWQr1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXFxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogW11cXFxcbiAgICAgICAgICAgIH0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIikpO1xcXFxuICAgICAgICAgICAgYm9va0luZm8uc2VsZWN0ZWQucHVzaChyZXBsYWNlUnVsZS5pZCk7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCRpZCwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKXj1xcXFxcXFwiICsgcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpc1RydWU6IHRydWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgaWQgKyBpLCByZXBsYWNlUnVsZSwgTVlfUEFSQU1TLnBhdGgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5YWz6ZetXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgkaWQsIHJlcGxhY2VSdWxlLCBwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoIWZpbmRJdGVtKCRpZCkuZXh0cmEuaXNUcnVlKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7LlhbPpl61cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IFtdXFxcXG4gICAgICAgICAgICB9LCBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpKTtcXFxcbiAgICAgICAgICAgIGJvb2tJbmZvLnNlbGVjdGVkLnNwbGljZShib29rSW5mby5zZWxlY3RlZC5pbmRleE9mKHJlcGxhY2VSdWxlLmlkKSwgMSk7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCRpZCwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKXi1xcXFxcXFwiICsgcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpc1RydWU6IGZhbHNlLFxcXFxuICAgICAgICAgICAgICAgICAgICBpZDogJGlkLFxcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIGlkICsgaSwgcmVwbGFjZVJ1bGUsIE1ZX1BBUkFNUy5wYXRoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxufVxcXFxuXFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7lpJblr7xUWFRcXFwiLFxcXCJwYXRoXFxcIjpcXFwiZXh0ZXJuYWxpbXBvcnRUeHQudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmZ1bmN0aW9uIHR4dFZpZXcobGF5b3V0KSB7XFxcXG4gICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICBsZXQgZmlsZXMgPSBGaWxlLmdldEZpbGVQYXRoKENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGgsIHVuZGVmaW5lZCwgXFxcXFxcXCIudHh0XFxcXFxcXCIpO1xcXFxuICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIlRYVOmYheivu+WZqFxcXFxcXFwiKTtcXFxcbiAgICAvL2xldCBsYXlvdXQgPSBbXTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHVybDogJ1xcXFxcXFwiaGlrZXI6Ly9wYWdlL3R4dFNlYXJjaC52aWV3I25vUmVmcmVzaCM/c2VhcmNoVGVybXM9XFxcXFxcXCIrZW5jb2RlVVJJQ29tcG9uZW50KGlucHV0KScsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwiVFhU5pCc57SiXFxcXFxcXCIsXFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCflI1cXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcXFxcXCJzZWFyY2hLZXlCeVR4dFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBcXFxcXFxcInB1dE15VmFyKCdzZWFyY2hLZXlCeVR4dCcsaW5wdXQpXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5a+85YWlVFhUXFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMlxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoW1xcXFxcXFwi57O757uf6YCJ5oup5ZmoXFxcXFxcXCIsIFxcXFxcXFwi5rW36ZiU6YCJ5oup5ZmoXFxcXFxcXCJdLCAxLCBcXFxcXFxcIumAieaLqeWZqOexu+Wei1xcXFxcXFwiKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcXFxcXFxcIuezu+e7n+mAieaLqeWZqFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiZmlsZVNlbGVjdDovL1xcXFxcXFwiICsgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICghLyhcXFxcXFxcXC50eHQpJC9pLnRlc3QoaW5wdXQpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdChcXFxcXFxcIumAieaLqeS6humUmeivr+eahOaWh+S7tuexu+Wei1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBub3ZlbE5hbWUgPSBpbnB1dC5tYXRjaCgvXFxcXFxcXFwvKFteXFxcXFxcXFwvXSo/KShcXFxcXFxcXC50eHQpJC9pKVsxXS5yZXBsYWNlKFxcXFxcXFwiX2ZpbGVTZWxlY3RfXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9wYXRoID0gQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCArIG5vdmVsTmFtZSArIFxcXFxcXFwiLnR4dFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgcGF0aCA9IGlucHV0LnJlcGxhY2UoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgdG9wYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5a+85YWl5o+Q56S6XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29udGVudDogXFxcXFxcXCLlt7LlrZjlnKhbXFxcXFxcXCIgKyBub3ZlbE5hbWUgKyBcXFxcXFxcIl3mmK/lkKbopobnm5Y/XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uZmlybTogJC50b1N0cmluZygocGF0aCwgdG9wYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5jb3B5RmlsZShwYXRoLCB0b3BhdGgsIHRydWUpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgdG9wYXRoICsgXFxcXFxcXCIuanNvblxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGggKyBcXFxcXFxcIi5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lr7zlhaXmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBwYXRoLCB0b3BhdGgpXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyB0b3BhdGggKyBcXFxcXFxcIi5qc29uXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGggKyBcXFxcXFxcIi5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdG9hc3QoXFxcXFxcXCLlr7zlhaXmiJDlip9cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHJlcXVpcmVVcmwgPSBcXFxcXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUwOTlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVNlbGVjdCA9IHJlcXVpcmUocmVxdWlyZVVybCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNhbGxiYWNrOiAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub3ZlbE5hbWUgPSBQQVRILm1hdGNoKC9cXFxcXFxcXC8oW15cXFxcXFxcXC9dKj8pKFxcXFxcXFxcLnR4dCkkL2kpWzFdO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvcGF0aCA9IENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGggKyBub3ZlbE5hbWUgKyBcXFxcXFxcIi50eHRcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwYXRoID0gUEFUSDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyB0b3BhdGgpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoXFxcXFxcXCLlt7LlrZjlnKhbXFxcXFxcXCIgKyBub3ZlbE5hbWUgKyBcXFxcXFxcIl3mmK/lkKbopobnm5Y/XFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgsIHRvcGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoLCB0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHRvcGF0aCArIFxcXFxcXFwiLmpzb25cXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuZGVsZXRlRmlsZXModG9wYXRoICsgXFxcXFxcXCIuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5a+85YWl5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGF0aCwgdG9wYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgdG9wYXRoICsgXFxcXFxcXCIuanNvblxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHRvcGF0aCArIFxcXFxcXFwiLmpzb25cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WvvOWFpeaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KSxcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVVybDogcmVxdWlyZVVybCxcXFxcbiAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGU6IFxcXFxcXFwiLnR4dFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcXFxcXCJjb25maXJtXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIG1lbW9yeTogXFxcXFxcXCJzZWxlY3RQYXRoQ2FjaGUxXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSksXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxldCBvcHRpb25zID0gW1xcXFxcXFwi6ZiF6K+7XFxcXFxcXCIsIFxcXFxcXFwi5YiG5LqrXFxcXFxcXCIsIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCIsIFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCJdO1xcXFxuXFxcXG4gICAgbGV0IHBhdHRlcm4gPSBnZXRNeVZhcihcXFxcXFxcIjp0eHRQYXR0ZXJuXFxcXFxcXCIsIG9wdGlvbnNbMF0pO1xcXFxuICAgIGxldCBpZCA9IERhdGUubm93KCkgKyBcXFxcXFxcIjrmqKHlvI9cXFxcXFxcIjtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBwYXR0ZXJuLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKG9wdGlvbnMsIDEsIFxcXFxcXFwi5pON5L2c5qih5byPXFxcXFxcXCIpLnNlbGVjdCgoaWQpID0+IHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiOnR4dFBhdHRlcm5cXFxcXFxcIiwgaW5wdXQpO1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbShpZCwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpbnB1dFxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH0sIGlkKSxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiBpZFxcXFxuICAgICAgICB9XFxcXG4gICAgfSlcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgZnVuY3Rpb24gb3BlcmF0aW9uKHBhdGgsIG5hbWUpIHtcXFxcbiAgICAgICAgbGV0IHBhdHRlcm4gPSBnZXRNeVZhcihcXFxcXFxcIjp0eHRQYXR0ZXJuXFxcXFxcXCIsIFxcXFxcXFwi6ZiF6K+7XFxcXFxcXCIpO1xcXFxuICAgICAgICBzd2l0Y2ggKHBhdHRlcm4pIHtcXFxcbiAgICAgICAgICAgIGNhc2UgXFxcXFxcXCLliIbkuqtcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJzaGFyZTovL1xcXFxcXFwiICsgcGF0aDtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIGNhc2UgXFxcXFxcXCLliKDpmaRcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gJChcXFxcXFxcIuehruiupOWIoOmZpFtcXFxcXFxcIiArIG5hbWUgKyBcXFxcXFxcIl1cXFxcXFxcIikuY29uZmlybSgocGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiLmpzb25cXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHBhdGggKyBcXFxcXFxcIi5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSwgcGF0aCk7XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICBjYXNlIFxcXFxcXFwi6ZiF6K+7XFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9wYWdlL3R4dFBhcnNlci52aWV3P3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLnRpdGxlO1xcXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgY2FzZSBcXFxcXFxcIuaJk+W8gOaWueW8j1xcXFxcXFwiOlxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXFxcXFwiICsgcGF0aDtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcblxcXFxuICAgIGZvciAobGV0IG5vdmVsIG9mIGZpbGVzKSB7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBub3ZlbC5uYW1lLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUob3BlcmF0aW9uLCBub3ZlbC5wYXRoLCBub3ZlbC5uYW1lKSxcXFxcbiAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi5aSn5bCP77yaXFxcXFxcXCIgKyBGaWxlLmdldEZpbGVTaXplKG5vdmVsLnBhdGgpICsgXFxcXFxcXCJcXFxcXFxcXG7kv67mlLnml7bpl7TvvJpcXFxcXFxcIiArICQuZGF0ZUZvcm1hdChub3ZlbC5sYXN0TW9kaWZpZWQsIFxcXFxcXFwieXl5eS1NTS1kZCBISDptbTpzc1xcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBub3ZlbC5wYXRoLFxcXFxuICAgICAgICAgICAgICAgIGlzQ2FjaGU6IHRydWUsXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IG5vdmVsLm5hbWVcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6K6+572uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHZlcnNpb246IE1ZX1JVTEUudmVyc2lvblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzluK7liqnigJ3igJ1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvaGVscC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP2tleXdvcmQ9dHh0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6ICc8aDEgc3R5bGU9XFxcXFxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcXFxcXCI+5ZWl6YO95rKh5pyJ6IC2PC9oMT4nLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcXFxufVxcXFxuaWYgKCQuaW1wb3J0UGFyYW0gPT09IHVuZGVmaW5lZCkge1xcXFxuICAgICQuZXhwb3J0cyA9IHR4dFZpZXc7XFxcXG59IGVsc2UgaWYgKCQuaW1wb3J0UGFyYW0gPT09IG51bGwpIHtcXFxcbiAgICBzZXRSZXN1bHQodHh0VmlldyhbXSkpO1xcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LlRYVOino+aekOWZqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJ0eHRQYXJzZXIudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbihmdW5jdGlvbigpIHtcXFxcbiAgICBsZXQgcmVncyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9yZWd1bGFyQ2hhcHRlci5mXFxcXFxcXCIpO1xcXFxuICAgIGxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwicGF0aFxcXFxcXFwiKSB8fCBcXFxcXFxcIlxcXFxcXFwiKSB8fCBNWV9QQVJBTVMucGF0aDtcXFxcbiAgICBsZXQgY2hhcnN0ID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwiY2hhcnN0XFxcXFxcXCIpIHx8IFxcXFxcXFwiXFxcXFxcXCIpIHx8IE1ZX1BBUkFNUy5jaGFyc3QgfHwgXFxcXFxcXCJVVEYtOFxcXFxcXFwiO1xcXFxuICAgIGxldCBpc0NhY2hlID0gTVlfUEFSQU1TLmlzQ2FjaGU7XFxcXG4gICAgaWYgKCFwYXRoLnN0YXJ0c1dpdGgoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgIHBhdGggPSBcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGg7XFxcXG4gICAgfVxcXFxuICAgIGlmKE1ZX1BBUkFNUy50aXRsZSl7XFxcXG4gICAgICAgIHNldFBhZ2VUaXRsZShNWV9QQVJBTVMudGl0bGUpO1xcXFxuICAgIH1lbHNle1xcXFxuICAgICAgICBzZXRQYWdlVGl0bGUoJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIikuZ2V0TmFtZShwYXRoKSk7XFxcXG4gICAgfVxcXFxuICAgIGxldCBsYXlvdXQgPSBbXTtcXFxcbiAgICBsZXQgY2hhcHRlck5hbWVzID0gW107XFxcXG4gICAgbGV0IGludGVydmFscyA9IFtdO1xcXFxuICAgIGxldCBoYXNQcmVmYWNlID0gZmFsc2U7XFxcXG4gICAgaWYgKGZpbGVFeGlzdChwYXRoICsgXFxcXFxcXCIuanNvblxcXFxcXFwiKSAmJiBpc0NhY2hlKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG5cXFxcbiAgICAgICAgICAgIGxldCBjID0gSlNPTi5wYXJzZShyZXF1ZXN0KHBhdGggKyBcXFxcXFxcIi5qc29uXFxcXFxcXCIpKTtcXFxcbiAgICAgICAgICAgIGNoYXB0ZXJOYW1lcyA9IGMuY2hhcHRlck5hbWVzO1xcXFxuICAgICAgICAgICAgaW50ZXJ2YWxzID0gYy5pbnRlcnZhbHM7XFxcXG4gICAgICAgICAgICBoYXNQcmVmYWNlID0gYy5oYXNQcmVmYWNlO1xcXFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIumHjeaWsOino+aekOebruW9lVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgocGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSwgcGF0aCtcXFxcXFxcIi5qc29uXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOmZhbHNlXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6XFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICAgICAgICAgIHNldFJlc3VsdChbe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnTxzdHJvbmc+55uu5b2V6Kej5p6Q5aSx6LSlKOmHjeaWsOino+aekCk8L3N0cm9uZz5cXFxcXFxcIi5iaWcoKSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZShwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcXFxcXCIuanNvblxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XSk7XFxcXG4gICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIHNob3dMb2FkaW5nKFxcXFxcXFwi5q2j5Zyo6Kej5p6Q55uu5b2VXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgdHh0ID0gcmVxdWVzdChwYXRoLCB7XFxcXG4gICAgICAgICAgICBoZWFkZXJzOiB7XFxcXG4gICAgICAgICAgICAgICAgLy9cXFxcXFxcImNvbnRlbnQtdHlwZVxcXFxcXFwiOiBcXFxcXFxcInRleHQvcGxhaW47IGNoYXJzdD1cXFxcXFxcIiArIGNoYXJzdFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGV0IHBhdHRlcm4gPSByZWdzLmdldFRvY1J1bGUodHh0KTtcXFxcbiAgICAgICAgaWYgKCFwYXR0ZXJuKSB7XFxcXG4gICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcXFxuICAgICAgICAgICAgc2V0UmVzdWx0KFt7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdPHN0cm9uZz7nm67lvZXop6PmnpDlpLHotKU8L3N0cm9uZz5cXFxcXFxcIi5iaWcoKSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBiYWNrKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH0pLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH1dKTtcXFxcbiAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcih0eHQpO1xcXFxuICAgICAgICBsZXQgcG9pbnRlciA9IDA7XFxcXG4gICAgICAgIHdoaWxlIChtYXRjaGVyLmZpbmQoKSkge1xcXFxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gbWF0Y2hlci5zdGFydCgpO1xcXFxuICAgICAgICAgICAgbGV0IGVuZCA9IG1hdGNoZXIuZW5kKCk7XFxcXG4gICAgICAgICAgICBsZXQgdCA9IG1hdGNoZXIuZ3JvdXAoKTtcXFxcbiAgICAgICAgICAgIGlmIChwb2ludGVyID09PSAwICYmIHN0YXJ0ID4gMzApIHtcXFxcbiAgICAgICAgICAgICAgICBoYXNQcmVmYWNlID0gdHJ1ZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGNoYXB0ZXJOYW1lcy5wdXNoKHQpO1xcXFxuICAgICAgICAgICAgaW50ZXJ2YWxzLnB1c2goW3BvaW50ZXIsIHN0YXJ0XSk7XFxcXG4gICAgICAgICAgICBwb2ludGVyID0gZW5kO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGludGVydmFscy5wdXNoKFtwb2ludGVyLCB0eHQubGVuZ3RoXSk7XFxcXG4gICAgICAgIGlmIChpc0NhY2hlKSB7XFxcXG4gICAgICAgICAgICB3cml0ZUZpbGUocGF0aCArIFxcXFxcXFwiLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgICAgIGNoYXB0ZXJOYW1lczogY2hhcHRlck5hbWVzLFxcXFxuICAgICAgICAgICAgICAgIGludGVydmFsczogaW50ZXJ2YWxzLFxcXFxuICAgICAgICAgICAgICAgIGhhc1ByZWZhY2U6IGhhc1ByZWZhY2VcXFxcbiAgICAgICAgICAgIH0pKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBoaWRlTG9hZGluZygpO1xcXFxuICAgIH1cXFxcblxcXFxuXFxcXG4gICAgaWYgKGhhc1ByZWZhY2UpIHtcXFxcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzWzBdO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLluo/oqIBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9UWFRWaWV3ZXIudmlldyNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBjaGFwdGVyTmFtZTogXFxcXFxcXCLluo/oqIBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBzdGFydDogaW50ZXJ2YWxbMF0sXFxcXG4gICAgICAgICAgICAgICAgZW5kOiBpbnRlcnZhbFsxXSxcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxcXFxuICAgICAgICAgICAgICAgIGNoYXJzdDogY2hhcnN0XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXB0ZXJOYW1lcy5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBsZXQgbmFtZSA9IGNoYXB0ZXJOYW1lc1tpXTtcXFxcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzW2kgKyAxXTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvVFhUVmlld2VyLnZpZXcjYXV0b1BhZ2UjI3JlYWRUaGVtZSNcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGludGVydmFsWzBdLFxcXFxuICAgICAgICAgICAgICAgIGVuZDogaW50ZXJ2YWxbMV0sXFxcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWU6IG5hbWUsXFxcXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcXFxcbiAgICAgICAgICAgICAgICBjaGFyc3Q6IGNoYXJzdFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG4gICAgc2V0UmVzdWx0KGxheW91dCk7XFxcXG59KSgpXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3YuVFhU5p+l55yL5ZmoXFxcIixcXFwicGF0aFxcXCI6XFxcIlRYVFZpZXdlci52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IHBhdGggPSBNWV9QQVJBTVMucGF0aDtcXFxcbmxldCBjaGFyc3QgPSBNWV9QQVJBTVMuY2hhcnN0O1xcXFxubGV0IHR4dCA9IHJlcXVlc3QocGF0aCwge1xcXFxuICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAvL1xcXFxcXFwiY29udGVudC10eXBlXFxcXFxcXCI6IFxcXFxcXFwidGV4dC9wbGFpbjsgY2hhcnN0PVxcXFxcXFwiICsgY2hhcnN0XFxcXG4gICAgfVxcXFxufSk7XFxcXG5cXFxcbmxldCB0YXJnZXRUZXh0cyA9IHR4dC5zdWJzdHJpbmcoTVlfUEFSQU1TLnN0YXJ0LCBNWV9QQVJBTVMuZW5kKTtcXFxcblxcXFxubGV0IGNvbnRlbnQgPSB0YXJnZXRUZXh0cy5zcGxpdCgvKFxcXFxcXFxcbnxcXFxcXFxcXHIpKy8pLmZpbHRlcihpdCA9PiBpdC5sZW5ndGggPiAxKS5qb2luKFxcXFxcXFwiPGJyPlxcXFxcXFwiKTtcXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICB0aXRsZTogKFxcXFxcXFwiPHN0cm9uZz5cXFxcXFxcIiArIE1ZX1BBUkFNUy5jaGFwdGVyTmFtZSArIFxcXFxcXFwiPC9zdHJvbmc+XFxcXFxcXCIpLmJpZygpLFxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogY29udGVudCxcXFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgdGV4dFNpemU6IDE4LFxcXFxuICAgICAgICBjbGljazogdHJ1ZVxcXFxuICAgIH1cXFxcbn0pO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2ou56ug6IqC5q2j5YiZXFxcIixcXFwicGF0aFxcXCI6XFxcInJlZ3VsYXJDaGFwdGVyLmZcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgcnVsZXMgPSBbe1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xLFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnm67lvZUo5Y6756m655m9KVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W+OAgFxcXFxcXFxcXFxcXFxcXFxzXSkoPzrluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxcXFxcXFxcXHN7MCw0fVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcXFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pKSkuezAsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLnrKzkuIDnq6Ag5YGH6KOF56ys5LiA56ug5YmN6Z2i5pyJ56m655m95L2G5oiR5LiN6KaBXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDBcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMixcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi55uu5b2VXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIl5bIOOAgFxcXFxcXFxcXFxcXFxcXFx0XXswLDR9KD865bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ856ysP1xcXFxcXFxcXFxcXFxcXFxzezAsNH1bXFxcXFxcXFxcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dKz9cXFxcXFxcXFxcXFxcXFxcc3swLDR9KD8656ugfOiKgig/Ieivvil85Y23fOmbhig/IVvlkIjlkoxdKXzpg6goPyFb5YiG6LWb5ri4XSl856+HKD8h5bygKSkpLnswLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi56ys5LiA56ugIOagh+WHhueahOeypOivreWwseaYr+i/meagt1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxXFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTMsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IGZhbHNlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnm67lvZUo5Yy56YWN566A5LuLKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W+OAgFxcXFxcXFxcXFxcXFxcXFxzXSkoPzooPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxcXFxcXFxcXHN7MCw0fVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcXFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pfOmDqCg/IVvliIbotZvmuLhdKXzlm54oPyFb5ZCI5p2l5LqL5Y67XSl85Zy6KD8hW+WSjOWQiOavlOeUteaYr10pfOevhyg/IeW8oCkpKS57MCwzMH0kXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIueugOS7iyDogIHlpKvor7jokZvmnZHlpKtcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMlxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC00LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiBmYWxzZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi55uu5b2VKOWPpOWFuOOAgei9u+Wwj+ivtOWkh+eUqClcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH0oPzrluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxcXFxcXFxcXHN7MCw0fVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcXFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pfOmDqCg/IVvliIbotZvmuLhdKXzlm54oPyFb5ZCI5p2l5LqL5Y67XSl85Zy6KD8hW+WSjOWQiOavlOeUteaYr10pfOivnXznr4coPyHlvKApKSkuezAsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLnrKzkuIDnq6Ag5q+U5LiK6Z2i5Y+q5aSa5LqG5Zue5ZKM6K+dXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDNcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtNSxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIuaVsOWtlyjnuq/mlbDlrZfmoIfpopgpXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIig/PD1b44CAXFxcXFxcXFxcXFxcXFxcXHNdKVxcXFxcXFxcXFxcXFxcXFxkK1xcXFxcXFxcXFxcXFxcXFwuP1sg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH0kXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIjEyXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDRcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtNixcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIuWkp+WGmeaVsOWtlyjnuq/mlbDlrZfmoIfpopgpXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIig/PD1b44CAXFxcXFxcXFxcXFxcXFxcXHNdKVvjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsMTJ9WyDjgIBcXFxcXFxcXFxcXFxcXFxcdF17MCw0fSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5LiA55m+5LiD5Y2BXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDRcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtNyxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5pWw5a2XIOWIhumalOespiDmoIfpopjlkI3np7BcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH1cXFxcXFxcXFxcXFxcXFxcZHsxLDV9WzrvvJosLu+8jCDjgIFf4oCUXFxcXFxcXFxcXFxcXFxcXC1dLnsxLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwiMeOAgei/meS4quWwseaYr+agh+mimFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiA1XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTgsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IHRydWUsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIuWkp+WGmeaVsOWtlyDliIbpmpTnrKYg5qCH6aKY5ZCN56ewXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIl5bIOOAgFxcXFxcXFxcXFxcXFxcXFx0XXswLDR9KD865bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ8W+OAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fSlbIOOAgV/igJRcXFxcXFxcXFxcXFxcXFxcLV0uezEsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLkuIDjgIHlj6rmnInliY3pnaLnmoTmlbDlrZfmnInlt67liKtcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogNlxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC05LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLmraPmlocg5qCH6aKYL+W6j+WPt1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCJeWyDjgIBcXFxcXFxcXFxcXFxcXFxcdF17MCw0feato+aWh1sg44CAXXsxLDR9LnswLDIwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5q2j5paHIOaIkeWltuW4uOWxsei1teWtkOm+mVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiA3XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTEwLFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCJDaGFwdGVyL1NlY3Rpb24vUGFydC9FcGlzb2RlIOW6j+WPtyDmoIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH0oPzpbQ2NdaGFwdGVyfFtTc11lY3Rpb258W1BwXWFydHzvvLDvvKHvvLLvvLR8W05uXVtvT11cXFxcXFxcXFxcXFxcXFxcLnxbRWVdcGlzb2RlfCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVxcXFxcXFxcXFxcXFxcXFxzezAsNH1cXFxcXFxcXFxcXFxcXFxcZHsxLDR9LnswLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwiQ2hhcHRlciAxIE15R3JhbmRtYUlzTkJcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogOFxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xMSxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIkNoYXB0ZXIo5Y67566A5LuLKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCJeWyDjgIBcXFxcXFxcXFxcXFxcXFxcdF17MCw0fSg/OltDY11oYXB0ZXJ8W1NzXWVjdGlvbnxbUHBdYXJ0fO+8sO+8oe+8su+8tHxbTm5dW09vXVxcXFxcXFxcXFxcXFxcXFwufFtFZV1waXNvZGUpXFxcXFxcXFxcXFxcXFxcXHN7MCw0fVxcXFxcXFxcXFxcXFxcXFxkezEsNH0uezAsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCJDaGFwdGVyIDEgTXlHcmFuZG1hSXNOQlxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiA5XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTEyLFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnibnmrornrKblj7cg5bqP5Y+3IOagh+mimFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W1xcXFxcXFxcXFxcXFxcXFxz44CAXSlb44CQ44CU44CW44CM44CO44CI77y7XFxcXFxcXFxcXFxcXFxcXFtdKD8656ysfFtDY11oYXB0ZXIpW1xcXFxcXFxcXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDEwfVvnq6DoioJdLnswLDIwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi44CQ56ys5LiA56ugIOWQjumdoueahOespuWPt+WPr+S7peayoeaciVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxMFxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xMyxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIueJueauiuespuWPtyDmoIfpopgo5oiQ5a+5KVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W1xcXFxcXFxcXFxcXFxcXFxz44CAXXswLDR9KSg/OltcXFxcXFxcXFxcXFxcXFxcW+OAiOOAjOOAjuOAluOAlOOAiu+8iOOAkFxcXFxcXFxcXFxcXFxcXFwoXS57MSwzMH1bXFxcXFxcXFxcXFxcXFxcXCnjgJHvvInjgIvjgJXjgJfjgI/jgI3jgIlcXFxcXFxcXFxcXFxcXFxcXV0/fCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVsg44CAXXswLDR9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLjgI7liqDkuKrnm7Top5LlvJXlj7fmm7TkuJPkuJrjgI9cXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMTFcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMTQsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IHRydWUsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIueJueauiuespuWPtyDmoIfpopgo5Y2V5LiqKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W1xcXFxcXFxcXFxcXFxcXFxz44CAXXswLDR9KSg/OlvimIbimIXinKbinKddLnsxLDMwfXwoPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklilbIOOAgF17MCw0fSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi4piG44CB5pmL5rGf5L2c6ICF5pyA5Zac5qyi55qE5qC85byPXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDEyXFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTE1LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnq6Av5Y23IOW6j+WPtyDmoIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsgXFxcXFxcXFxcXFxcXFxcXHTjgIBdezAsNH0oPzooPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnxb5Y2356ugXVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fSlbIOOAgF17MCw0fS57MCwzMH0kXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIuWNt+S6lCDlvIDmupDnm5vkuJZcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMTNcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMTYsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IGZhbHNlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLpobbmoLzmoIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlxcXFxcXFxcXFxcXFxcXFxTLnsxLDIwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5LiN6LaF6L+HMjDkuKrlrZfpobbmoLzlhpnnmoTpg73mmK/moIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMTRcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMTcsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IGZhbHNlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLlj4zmoIfpopgo5YmN5ZCRKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoP20pKD88PVsgXFxcXFxcXFxcXFxcXFxcXHTjgIBdezAsNH0p56ysW1xcXFxcXFxcXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSQoPz1bXFxcXFxcXFxcXFxcXFxcXHPjgIBdezAsOH3nrKxbXFxcXFxcXFxcXFxcXFxcXGTpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH3nq6ApXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIuesrOS4gOeroCDnnJ/mraPnmoTmoIfpopjlubblgYfoo4XmjaLooYznrKzkuIDnq6Ag6L+Z5Liq5LiN6KaBXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDE1XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTE4LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiBmYWxzZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5Y+M5qCH6aKYKOWQjuWQkSlcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiKD9tKSg/PD1bIFxcXFxcXFxcXFxcXFxcXFx044CAXXswLDR956ysW1xcXFxcXFxcXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSRbXFxcXFxcXFxcXFxcXFxcXHPjgIBdezAsOH0p56ysW1xcXFxcXFxcXFxcXFxcXFxk6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi56ys5LiA56ugIOi/meS4quagh+mimOS4jeimgeW5tuWBh+ijheaNouihjOesrOS4gOeroOecn+ato+eahOagh+mimFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxNlxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xOSxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5Lmm5ZCNIOaLrOWPtyDluo/lj7dcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXi57MSwyMH1bKO+8iF1bXFxcXFxcXFxcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH1bKe+8iV1bIOOAgFxcXFxcXFxcdF17MCw0fSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5qCH6aKY5ZCO6Z2i5pWw5a2X5pyJ5ous5Y+3KDEyKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxN1xcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0yMCxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5Lmm5ZCNIOW6j+WPt1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCJeLnsxLDIwfVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fVsg44CAXFxcXFxcXFx0XXswLDR9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLmoIfpopjlkI7pnaLmlbDlrZfmsqHmnInmi6zlj7cxMjRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMThcXFxcbiAgICB9XFxcXG5dO1xcXFxubGV0IE1hdGNoZXIgPSBqYXZhLnV0aWwucmVnZXguTWF0Y2hlcjtcXFxcbmxldCBQYXR0ZXJuID0gamF2YS51dGlsLnJlZ2V4LlBhdHRlcm47XFxcXG5cXFxcbmZ1bmN0aW9uIGdldFRvY1J1bGUoY29udGVudCkge1xcXFxuICAgIGxldCBtYXhDcyA9IDE7XFxcXG4gICAgbGV0IHRvY1BhdHRlcm4gPSBudWxsO1xcXFxuICAgIGZvciAobGV0IHRvY1J1bGUgb2YgcnVsZXMpIHtcXFxcbiAgICAgICAgaWYgKCF0b2NSdWxlLmVuYWJsZSkgY29udGludWU7XFxcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gUGF0dGVybi5jb21waWxlKHRvY1J1bGUucnVsZSwgUGF0dGVybi5NVUxUSUxJTkUpO1xcXFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcihjb250ZW50KTtcXFxcbiAgICAgICAgbGV0IGNzID0gMDtcXFxcbiAgICAgICAgd2hpbGUgKG1hdGNoZXIuZmluZCgpKSB7XFxcXG4gICAgICAgICAgICBjcysrO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChjcyA+PSBtYXhDcykge1xcXFxuICAgICAgICAgICAgbWF4Q3MgPSBjcztcXFxcbiAgICAgICAgICAgIHRvY1BhdHRlcm4gPSBwYXR0ZXJuO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiB0b2NQYXR0ZXJuO1xcXFxufVxcXFxuJC5leHBvcnRzLmdldFRvY1J1bGUgPSBnZXRUb2NSdWxlO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNWLuW4ruWKqVxcXCIsXFxcInBhdGhcXFwiOlxcXCJoZWxwLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgaGVscFRleHQgPSB7XFxcXG4gICAgXFxcXFxcXCJ0eHRcXFxcXFxcIjogYFxcXFxuICAgICAgICA8aDEgaWQ9XFxcXFxcXCJ0eHTmmK/ku4DkuYhcXFxcXFxcIj5UWFTmmK/ku4DkuYg/PC9oMT5cXFxcbiAgICAgICAgPHA+PGEgaHJlZj1cXFxcXFxcImh0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vdHh0LzEyMTczMzBcXFxcXFxcIj7miJHlt7Lnu4/luK7kvaDnmb7luqbkuoY8L2E+77yb566A5Y2V5p2l6K+05bCx5piv5LiA56eN5YKo5a2Y5bCP6K+055qE5paH5Lu2KOaJqeWxleWQjTp0eHQp44CCPC9wPlxcXFxuICAgICAgICA8aDEgaWQ9XFxcXFxcXCLlpoLkvZXnlKjor6XlsI/nqIvluo/pmIXor7t0eHTlsI/or7RcXFxcXFxcIj7lpoLkvZXnlKjor6XlsI/nqIvluo/pmIXor7t0eHTlsI/or7Q/PC9oMT5cXFxcbiAgICAgICAgPHA+5Zyo5Li76aG16Z2iIOKXiVRYVCDnlYzpnaLkuIvvvIzngrnlh7vlr7zlhaVUWFTvvIzpgInmi6nnm67moIflsI/or7Tmlofku7YodHh05paH5Lu277yMPGVtPuivpeaTjeS9nOS4jeS8muWIoOmZpHR4dOaWh+S7tu+8jOiAjOaYr2NvcHnkuIDku73liLDlsI/nqIvluo/nmoTot6/lvoTkuIs8L2VtPinvvIzlr7zlhaXlkI7lho3lnKgg4peJVFhUIOeVjOmdouS4i+mAieaLqeaDs+imgemYheivu+eahOWwj+ivtOWNs+WPr+OAgjwvcD5cXFxcblxcXFxuICAgIGAsXFxcXG4gICAgXFxcXFxcXCJub3ZlbENvbWljXFxcXFxcXCI6IGBcXFxcbiAgICAgICAgPGgxIGlkPVxcXFxcXFwi6L+Z5Liq5bCP56iL5bqP5pyJ5LuA5LmI55So77yfXFxcXFxcXCI+6L+Z5Liq5bCP56iL5bqP5pyJ5LuA5LmI55So77yfPC9oMT5cXFxcbiAgICAgICAgPHVsPlxcXFxuICAgICAgICA8bGk+PHU+5Luj56CB5LiK5Li65YW25LuW5bCP56iL5bqPKOa8q+eUu+exuy/lsI/or7Tnsbsp5o+Q5L6b5LiL6L295o6l5Y+j44CCPC91PjwvbGk+XFxcXG4gICAgICAgIDxsaT48dT7mnKzkvZPlhYXlvZPpmIXor7vlmajvvIzlj6/ku6XmtY/op4jnlKjor6XlsI/nqIvluo/mj5DkvpvnmoTkuIvovb3mjqXlj6Mo5LiK6Z2iKe+8jOS4i+i9veeahOa8q+eUuy/lsI/or7TjgII8L3U+PC9saT5cXFxcbiAgICAgICAgPGxpPjx1PuaPkOS+m1RYVOagvOW8j+Wwj+ivtOaWh+S7tuino+aekOWKn+iDveOAgjwvdT5cXFxcbiAgICAgICAgPGgxIGlkPVxcXFxcXFwi5Li65LuA5LmI5YiX6KGo6YeM5LuA5LmI6YO95rKh55SoXFxcXFxcXCI+5Li65LuA5LmI5YiX6KGo6YeM5LuA5LmI6YO95rKh55SoPzwvaDE+XFxcXG4gICAgICAgIDx1PuWIneasoeS9v+eUqO+8jOayoeacieW+iOato+W4uOWQp+OAgvCfpJQ8L3U+XFxcXG4gICAgICAgIDxoMSBpZD1cXFxcXFxcIuivpeWmguS9lea3u+WKoOa8q+eUu+aIluWwj+ivtFxcXFxcXFwiPuivpeWmguS9lea3u+WKoOa8q+eUuyjmiJblsI/or7QpPzwvaDE+XFxcXG4gICAgICAgIDx1PiDlnKjkuIDkuKrmnInkuIvovb3lip/og73nmoTlsI/nqIvluo8o5ryr55S757G7L+Wwj+ivtOexuynkuK3kuIvovb3kuIDmnKzmvKvnlLsv5bCP6K+077yM6L+U5Zue6K+l6KeE5YiZ5Y2z5Y+v5rWP6KeI44CCPC91PjwvbGk+XFxcXG4gICAgICAgIDwvdWw+XFxcXG4gICAgYFxcXFxufTtcXFxcbnNldFBhZ2VUaXRsZShcXFxcXFxcIuW4ruWKqVxcXFxcXFwiKTtcXFxcbmxldCBrZXl3b3JkID0gZ2V0UGFyYW0oXFxcXFxcXCJrZXl3b3JkXFxcXFxcXCIpO1xcXFxubGV0IHRleHQ7XFxcXG5pZiAoa2V5d29yZCA9PT0gdW5kZWZpbmVkIHx8ICEodGV4dCA9IGhlbHBUZXh0W2tleXdvcmRdKSkge1xcXFxuICAgIHNldFJlc3VsdChbe1xcXFxuICAgICAgICB0aXRsZTogJzxoMSBzdHlsZT1cXFxcXFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFxcXFxcIj7otYTmlpnkuI3op4Hlkq88L2gxPicsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfV0pO1xcXFxufSBlbHNlIHtcXFxcbiAgICBzZXRSZXN1bHQoW3tcXFxcbiAgICAgICAgdGl0bGU6IHRleHQsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfV0pO1xcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJ0ZXh0XzFcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3YuVFhU5pCc57SiXFxcIixcXFwicGF0aFxcXCI6XFxcInR4dFNlYXJjaC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuXFxcXG5sZXQgc2VhcmNoVGVybXMgPSBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJzZWFyY2hUZXJtc1xcXFxcXFwiKSk7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLjgIxcXFxcXFxcIiArIHNlYXJjaFRlcm1zICsgXFxcXFxcXCLjgI3nmoTmkJzntKLnu5PmnpxcXFxcXFxcIik7XFxcXG5sZXQgZGF0YSA9IEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCwgdW5kZWZpbmVkLCBcXFxcXFxcIi50eHRcXFxcXFxcIik7XFxcXG5sZXQgdGVybXNBcnIgPSBzZWFyY2hUZXJtcy5zcGxpdChcXFxcXFxcIlxcXFxcXFwiKS5tYXAodCA9PiB0LnJlcGxhY2UoL1xcXFxcXFxcKnxcXFxcXFxcXC58XFxcXFxcXFw/fFxcXFxcXFxcK3xcXFxcXFxcXCR8XFxcXFxcXFxefFxcXFxcXFxcW3xcXFxcXFxcXF18XFxcXFxcXFwofFxcXFxcXFxcKXxcXFxcXFxcXHt8XFxcXFxcXFx9fFxcXFxcXFxcfHxcXFxcXFxcXC98XFxcXFxcXFxcXFxcXFxcXC9nLCBrID0+IFxcXFxcXFwiXFxcXFxcXFxcXFxcXFxcXFxcXFxcXFwiICsgaykpO1xcXFxubGV0IHJlZyA9IG5ldyBSZWdFeHAodGVybXNBcnIuam9pbihcXFxcXFxcIi4qXFxcXFxcXCIpLCBcXFxcXFxcImlcXFxcXFxcIik7XFxcXG5sZXQgc2VhcmNoUmVzdWx0ID0gW107XFxcXG5mb3IgKGxldCB0eHQgb2YgZGF0YSkge1xcXFxuICAgIGlmIChyZWcudGVzdCh0eHQubmFtZSkpIHtcXFxcbiAgICAgICAgc2VhcmNoUmVzdWx0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IHR4dC5uYW1lLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZGVzYzogdHh0LnBhdGgsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHBhdGg6IHR4dC5wYXRoLFxcXFxuICAgICAgICAgICAgICAgIGlzQ2FjaGU6IHRydWUsXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHR4dC5uYW1lXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbn1cXFxcbmlmIChzZWFyY2hSZXN1bHQubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgc2VhcmNoUmVzdWx0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTpcXFxcXFxcImJpZ19iaWdfYmxhbmtfYmxvY2tcXFxcXFxcIixcXFxcbiAgICB9LHtcXFxcbiAgICAgICAgY29sX3R5cGU6XFxcXFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcXFxcXCIsXFxcXG4gICAgfSx7XFxcXG4gICAgICAgIGNvbF90eXBlOlxcXFxcXFwiYmlnX2JpZ19ibGFua19ibG9ja1xcXFxcXFwiLFxcXFxuICAgIH0se1xcXFxuICAgICAgICBjb2xfdHlwZTpcXFxcXFxcImJpZ19iaWdfYmxhbmtfYmxvY2tcXFxcXFxcIixcXFxcbiAgICB9LHtcXFxcbiAgICAgICAgdGl0bGU6ICc8aDIgc3R5bGU9XFxcXFxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcXFxcXCI+8J+UjuayoeacieaJvuWIsOebuOWFs+S5puexjTwvaDI+JyxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcbnNldFJlc3VsdChzZWFyY2hSZXN1bHQpO1xcXCJ9XVwiLFwicHJveHlcIjpcIlwifSIsInRpdGxlIjoi5YG36aaZ6auY5omLLnR4dCJ9