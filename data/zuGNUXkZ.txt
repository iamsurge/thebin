海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥达龟@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"二级解析\",\"path\":\"p\",\"rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlet html = request(url);\\nlet alist = pdfa(html, \\\"body&&a\\\");\\nlet arr = alist.map(it => {\\n    return {\\n        //html: it,\\n        text: pdfh(it, \\\"a&&Text\\\"),\\n        title: pdfh(it, \\\"a&&title\\\"),\\n        href: pd(it, \\\"a&&href\\\", url)\\n    }\\n});\\n//log(arr);\\nlet debug = false;\\n\\nfunction clearText(it) {\\n    return it.replace(/第|集|章/g, \\\"\\\");\\n}\\n\\nfunction isMovie(it) {\\n    if (it == null || it.text == null) {\\n        return false;\\n    }\\n    let tit = it.title || \\\"\\\";\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\" || it.length > 8) {\\n        return false;\\n    }\\n    if (tit != \\\"\\\" && !tit.includes(it)) {\\n        return false;\\n    }\\n    return it.match(/原画|备用|蓝光|超清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\n}\\n\\nfunction notChapter(it) {\\n    if (it == null || it.text == null) {\\n        return true;\\n    }\\n    return it.text.match(/[0-9]\\\\.[0-9]分/);\\n}\\n\\nfunction isChapter(it, pre, next) {\\n    if (notChapter(it)) {\\n        //优先排除\\n        return false;\\n    }\\n    //判断是不是电影\\n    if (isMovie(it)) {\\n        return true;\\n    }\\n    return isChapter0(it, pre) || isChapter0(it, next);\\n}\\n\\nfunction getChapterNum(it) {\\n    if (it == null || it.text == null) {\\n        return -1;\\n    }\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\") {\\n        return -1;\\n    }\\n    it = clearText(it);\\n    it = parseInt(it);\\n    if (isNaN(it)) {\\n        return -1;\\n    }\\n    return it;\\n}\\n\\nfunction isChapter0(it, brother) {\\n    /*if (debug) {\\n        log({\\n            it: it,\\n            brother: brother\\n        });\\n    }*/\\n    it = getChapterNum(it);\\n    //if (debug) log(it);\\n    if (it < 0) {\\n        return false;\\n    }\\n    brother = getChapterNum(brother);\\n    //if (debug) log(brother);\\n    if (brother < 0) {\\n        return false;\\n    }\\n    return it - brother < 2 && it - brother > -2;\\n}\\n\\nfor (let i = 0; i < arr.length; i++) {\\n    let it = arr[i];\\n    let t = it.text;\\n    if (!it.href || it.href == \\\"\\\") {\\n        continue;\\n    }\\n    let pre = i == 0 ? null : arr[i - 1];\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\n    if (isChapter(it, pre, next)) {\\n        d.push({\\n            title: t,\\n            url: \\\"video://\\\" + it.href,\\n            col_type: \\\"text_3\\\",\\n            extra: {\\n                id: it.href\\n            }\\n        });\\n    }\\n}\\nif (d.length == 0) {\\n    //匹配失败\\n    d.push({\\n        title: \\\"\\\",\\n        url: url,\\n        col_type: \\\"x5_webview_single\\\",\\n        desc: \\\"float&&100%\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            canBack: true\\n        }\\n    });\\n    toast(\\\"AI匹配失败，已使用X5加载\\\");\\n    setResult(d);\\n} else {\\n    //为线路加分割线\\n    let d2 = [];\\n    for (let i = 0; i < d.length; i++) {\\n        d2.push(d[i]);\\n        if (i < d.length - 1) {\\n            let it = d[i];\\n            let t1 = parseInt(clearText(it.title));\\n            let next = d[i + 1];\\n            let t2 = parseInt(clearText(next.title));\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"line_blank\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n            }\\n        }\\n    }\\n\\n    setResult(d2);\\n}\"},{\"col_type\":\"text_1\",\"name\":\"搜索测试\",\"path\":\"s\",\"rule\":\"js:\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlog(url);\\nlet key = getParam(\\\"key\\\");\\nlet sp = $.require(\\\"hiker://page/sp\\\");\\nsetResult(sp(url, key, \\\"搜索测试\\\"));\"},{\"col_type\":\"movie_3\",\"name\":\"聚合搜索\",\"path\":\"pro\",\"rule\":\"var d = [];\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(() => {\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: \\\"input\\\",\\n        desc: \\\"请输入关键词，尽量少字不要多字\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"sou\\\", \\\"\\\"),\\n            onChange: $.toString(() => {\\n                putMyVar(\\\"sou\\\", input);\\n            })\\n        }\\n    });\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"sou\\\");\\n        clearMyVar(\\\"so\\\");\\n    }));\\n}\\n\\nlet s = getMyVar(\\\"sou\\\", \\\"\\\");\\nlet r = \\\"\\\";\\nif (s != \\\"\\\") {\\n    let p = MY_PAGE;\\n    let {\\n        load\\n    } = $.require(\\\"hiker://page/data\\\");\\n    let {\\n        wrap\\n    } = $.require(\\\"hiker://page/tool\\\");\\n    let data = load(p, r != \\\"\\\" ? r : null);\\n\\n    let pageid = MY_RULE.title + \\\"-page\\\" + p;\\n    if (data.length > 0) {\\n        d.push({\\n            title: \\\"加载第\\\" + p + \\\"页中，进度：1/\\\" + data.length,\\n            url: \\\"\\\",\\n            col_type: \\\"text_center_1\\\",\\n            desc: \\\"\\\",\\n            pic_url: \\\"\\\",\\n            extra: {\\n                id: pageid\\n            }\\n        });\\n    }\\n    setResult(d);\\n    log(data.length);\\n    if (data.length > 0) {\\n        //多线程加载        \\n        let realPage = \\\"\\\" == r ? 1 : p;\\n        let tasks = data.map(it => {\\n            return {\\n                func: function(rule) {\\n                    return rule.find(s, realPage);\\n                },\\n                param: it,\\n                id: \\\"rule@\\\" + it.name\\n            }\\n        });\\n\\n        batchExecute(tasks, {\\n            func: function(param, id, error, result) {\\n                //log(\\\"listener: \\\" + (result || []).length)\\n                param.i = param.i + 1;\\n                if (result) {\\n                    try {\\n                        for (let it of result) {\\n                            param.j = param.j + 1;\\n                            addItemBefore(pageid, {\\n                                title: wrap(it.title, s),\\n                                desc: it.desc,\\n                                url: it.url,\\n                                pic_url: it.pic_url,\\n                                col_type: it.pic_url ? 'movie_1_vertical_pic' : \\\"text_1\\\",\\n                                extra: it.extra\\n                            })\\n                        }\\n                    } catch (e) {}\\n\\n                }\\n                if (param.i >= param.all) {\\n                    deleteItem(pageid)\\n                } else {\\n                    updateItem({\\n                        title: \\\"加载第\\\" + MY_PAGE + \\\"页中，进度：\\\" + (param.i + 1) + \\\"/\\\" + param.all,\\n                        url: \\\"\\\",\\n                        col_type: \\\"text_center_1\\\",\\n                        desc: \\\"\\\",\\n                        pic_url: \\\"\\\",\\n                        extra: {\\n                            id: pageid\\n                        }\\n                    })\\n                }\\n            },\\n            param: {\\n                all: data.length,\\n                i: 0,\\n                j: -1\\n            }\\n        })\\n    }\\n} else {\\n    let {\\n        load\\n    } = $.require(\\\"hiker://page/data\\\");\\n    let data = load(-1, null);\\n    if (data.length > 0) {\\n        for (let it of data) {\\n            d.push({\\n                title: it.name,\\n                url: \\\"select://\\\" + JSON.stringify({\\n                    title: \\\"请选择操作\\\",\\n                    col: 1,\\n                    options: [\\\"访问首页\\\", \\\"搜索此站\\\"],\\n                    js: $.toString((url) => {\\n                        if (input == \\\"访问首页\\\") {\\n                            MY_URL = url;\\n                            return \\\"x5://\\\" + getHome(url)\\n                        } else {\\n                            return \\\"hiker://page/singles\\\"\\n                        }\\n                    }, it.url)\\n                }),\\n                col_type: \\\"flex_button\\\",\\n                desc: \\\"\\\",\\n                pic_url: \\\"\\\",\\n                extra: {\\n                    RULE: {\\n                        name: it.name,\\n                        url: it.url\\n                    }\\n                }\\n            });\\n        }\\n        $.require(\\\"hiker://page/manage\\\")(d, data.map(it => it.name));\\n    }\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"数据\",\"path\":\"data\",\"rule\":\"//并发规则数\\nlet size0 = 10;\\nlet rulesText0 = `稀饭@https://www.xifanys.com/yingpiansearch/-------------.html?wd=**\\n达龟@https://www.dadagui.me/vodsearch/-------------.html?wd=**&submit=\\n城市@https://www.citydy.com/search.html?wd=**\\nlibvio@https://www.libvio.me/search/-------------.html?wd=**&submit=\\n新视@https://www.6080dy1.com/vodsearch/-------------.html?wd=**\\n看看y@https://www.kkdy.live/vod-search.html?wd=**&submit=\\n饭团@https://www.fantuanhd.com/search.html?wd=**&submit=\\n免的@https://www.freeok.vip/vodsearch/-------------.html?wd=**\\n牛马@https://www.niumatv.cc/vodsearch.html?wd=**&submit=\\n免费@https://www.thefree.vip/vodsearch/-------------.html?wd=**\\n莫扎兔@https://www.mozhatu.com/index.php/vod/search.html?wd=**\\n霹雳@https://plyingshi.com/vodsearch/-------------.html?wd=**\\n厂长@https://www.czspp.com/xssearch?q=**\\nVOF@https://www.voflix.com/search/-------------.html?wd=**\\n电影@https://www.appmovie.cc/index.php/vod/search.html?wd=**&submit=\\n追剧@http://zjdr.vip/vod/search/wd/**.html\\n疯狗@https://m.fenggoudy3.com/index.php?s=vod-search-name&wd=**\\n在线@https://zxzj.vip/vodsearch/-------------.html?wd=**&submit=\\n七七@http://aaasofa.com/search.php\\n北川@https://www.bcwzg.com/vodsearch/-------------/?wd=**\\nEF@https://www.pili5.cn/vodsearch/-------------.html?wd=**&submit=\\n影家@http://yszjvip.com/index.php/vod/search.html?wd=**\\n五五@https://555dy.cc/vodsearch/-------------.html?wd=**\\n渣漫@https://www.dm2022.com/vodsearch.html?wd=**\\n在家@https://zxzj.vip/vodsearch/-------------.html?wd=**&submit=\\npia库@https://m.piaku.cc/s/-------------/?wd=**\\n极品@https://www.jpys.me/vodsearch/-------------.html?wd=**\\n艾迪@https://aidi.tv/vsearch/-------------.html?wd=**&submit=\\n九州@http://www.jiuzhou911.com/search.php?searchword=**\\n十千@http://www.qianshihouse.com/srh/-------------.html?wd=**\\n麦片@http://m.ly368.com/index.php?s=vod-m_s-name&wd=**\\n私人@https://soumk.com/vodsearch/-------------.html?wd=**\\n星辰@http://www.qhddj.com.cn/xcyysearch/**-------------.html\\nCokevY@https://cokemv.me/vodsearch/-------------.html?wd=**\\n爱看y@https://ikan6.vip/vodsearch/-------------/?wd=**&submit=\\n干饭py@https://www.gfysys1.com/vodsearch/-------------.html?wd=**\\n天空y@http://tkznp.com/vodsearch.html?wd=**\\n蓝光@https://www.lgyy.cc/vodsearch/-------------.html?wd=**\\n低端@https://ddys.tv/?s=**&post_type=post\\n努努@https://www.nunuyy3.org/so/**-**--.html`;\\nlet rulesText = getItem(\\\"rules\\\", rulesText0);\\nlet sp = $.require(\\\"hiker://page/sp\\\");\\nrules = rulesText.split(\\\"\\\\n\\\")\\n    .filter(it => it.includes(\\\"@\\\"))\\n    .map(rule => {\\n        let s = rule.split(\\\"@\\\");\\n        return {\\n            name: s[0],\\n            find: function(key, page) {\\n                return sp(s[1], key, s[0]);\\n            },\\n            url: s[1]\\n        };\\n    });\\n\\nfunction load(page, rule) {\\n    let size = page <= 0 ? rules.length : size0;\\n    page = page <= 0 ? 1 : page;\\n    if (!page && !rule) {\\n        return rules.map(it => it.name);\\n    }\\n    if (rule != null) {\\n        if (page != null && page > 1) {\\n            return rules.filter(i => i.name == rule && i.page);\\n        }\\n        return rules.filter(i => i.name == rule);\\n    }\\n    let start = (page - 1) * size;\\n    if (rules.length < start + 1) {\\n        return [];\\n    }\\n    let len = size;\\n    if (rules.length < page * size) {\\n        len = rules.length - start\\n    }\\n    return rules.slice(start, start + len);\\n}\\n\\nfunction addRule(name, surl) {\\n    setItem(\\\"rules\\\", rulesText + \\\"\\\\n\\\" + name + \\\"@\\\" + surl);\\n}\\n\\nfunction removeRule(name) {\\n    let newT = rulesText.split(\\\"\\\\n\\\")\\n        .filter(it => it.indexOf(name + \\\"@\\\") < 0)\\n        .join(\\\"\\\\n\\\");\\n    setItem(\\\"rules\\\", newT);\\n}\\n\\n$.exports = {\\n    load: load,\\n    addRule: addRule,\\n    removeRule: removeRule\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"搜索解析\",\"path\":\"sp\",\"rule\":\"function search(url, key, rule) {\\n    let d = [];\\n    let html = \\\"\\\";\\n    if (url.includes(\\\"**\\\")) {\\n        //get请求\\n        let old = url;\\n        url = url.replace(\\\"**\\\", key);\\n        html = request(url);\\n        //自动过验证码和频繁访问限制\\n        let {\\n            check, test\\n        } = $.require(\\\"hiker://page/yzm\\\");\\n        if (check(url, html, d)) {\\n            log(\\\"重试了\\\");\\n            html = request(url, {\\n                headers: {\\n                    \\\"Referer\\\": url\\n                }\\n            });           \\n        }         \\n        test(url, html, d, old, key, rule);\\n    } else {\\n        //自动识别post请求\\n        html = request(url);\\n        let form = pdfh(html, \\\"body&&form&&Html\\\");\\n        let action = pd(html, \\\"form&&action\\\", url);\\n        let inputs = pdfa(html, \\\"body&&form&&input\\\");\\n        let body = {};\\n        for (let it of inputs) {\\n            let name = pdfh(it, \\\"input&&name\\\");\\n            if (name && name != \\\"\\\") {\\n                let value = pdfh(it, \\\"input&&value\\\");\\n                body[name] = value || key;\\n            }\\n        }\\n        html = post(action, {\\n            body: body\\n        });\\n    }\\n\\n    let alist = pdfa(html, \\\"body&&a\\\");\\n    let arr = alist.map(it => {\\n        let t = pdfh(it, \\\"a&&Text\\\");\\n        let t2 = pdfh(it, \\\"a&&title\\\");\\n        return {\\n            //html: it,\\n            text: t2 && t2.includes(key) ? t2 : t,\\n            href: pd(it, \\\"a&&href\\\", url)\\n        }\\n    });\\n\\n    function isResult(it) {\\n        it = it.text || \\\"\\\";\\n        if (it == \\\"\\\" || it.match(/搜索|结果/)) {\\n            return false\\n        }\\n        return it.includes(key);\\n    }\\n\\n    for (let i = 0; i < arr.length; i++) {\\n        let it = arr[i];\\n        let t = it.text;\\n        if (!it.href || it.href == \\\"\\\") {\\n            continue;\\n        }\\n        if (isResult(it)) {\\n            d.push({\\n                title: t,\\n                url: \\\"hiker://page/p?u=\\\" + base64Encode(it.href),\\n                col_type: \\\"text_1\\\",\\n                desc: \\\"““””<font color=#f13b66a>\\\" + rule + \\\"</font>\\\"\\n            });\\n        }\\n    }\\n    return d;\\n}\\n$.exports = search;\"},{\"col_type\":\"movie_3\",\"name\":\"增删\",\"path\":\"manage\",\"rule\":\"$.exports = function(d, names) {\\n    d.push({\\n        title: \\\" + \\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule((rr) => {\\n            deleteItemByCls(\\\"aiadd\\\");\\n            addItemAfter(rr + \\\"aisdel\\\", [{\\n                    title: \\\"\\\",\\n                    desc: \\\"请输入网站名称\\\",\\n                    col_type: \\\"input\\\",\\n                    extra: {\\n                        titleVisible: false,\\n                        onChange: \\\"putMyVar('name', input)\\\",\\n                        cls: \\\"aiadd\\\"\\n                    }\\n                },\\n                {\\n                    title: \\\"\\\",\\n                    desc: \\\"请输入网站搜索地址\\\",\\n                    col_type: \\\"input\\\",\\n                    extra: {\\n                        titleVisible: false,\\n                        onChange: \\\"putMyVar('surl', input)\\\",\\n                        cls: \\\"aiadd\\\"\\n                    }\\n                },\\n                {\\n                    title: \\\"提交保存\\\",\\n                    col_type: \\\"text_center_1\\\",\\n                    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n                        let surl = getMyVar(\\\"surl\\\", \\\"\\\");\\n                        let name = getMyVar(\\\"name\\\", \\\"\\\");\\n                        if (surl == \\\"\\\" || name == \\\"\\\") {\\n                            return \\\"toast://请输入完整内容\\\"\\n                        }\\n                        let r = decodeURIComponent(surl);\\n                        r = r.replace(new RegExp(\\\"[\\\\u4e00-\\\\u9fa5]+\\\", \\\"g\\\"), \\\"**\\\");\\n                        let {\\n                            addRule\\n                        } = $.require(\\\"hiker://page/data\\\");\\n                        addRule(name, r);\\n                        refreshPage();\\n                        return \\\"toast://已保存\\\";\\n                    }),\\n                    extra: {\\n                        cls: \\\"aiadd\\\"\\n                    }\\n                }\\n            ]);\\n            return \\\"hiker://empty\\\"\\n        }, MY_RULE.title),\\n        col_type: \\\"flex_button\\\",\\n    });\\n    d.push({\\n        title: \\\" - \\\",\\n        url: \\\"select://\\\" + JSON.stringify({\\n            options: names,\\n            title: \\\"请选择要删除的站点\\\",\\n            js: $.toString(() => {\\n                let {\\n                    removeRule\\n                } = $.require(\\\"hiker://page/data\\\");\\n                removeRule(input);\\n                refreshPage();\\n                return \\\"toast://OK\\\";\\n            })\\n        }),\\n        col_type: \\\"flex_button\\\",\\n        extra: {\\n            id: MY_RULE.title + \\\"aisdel\\\"\\n        }\\n    });\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"验证码\",\"path\":\"yzm\",\"rule\":\"function check(url, html, d) {\\n    let reload = false;\\n    if (/验证码|系统安全验证/.test(html)) {\\n        let headers = {\\n            \\\"User-Agent\\\": MOBILE_UA,\\n            \\\"Referer\\\": url\\n        };\\n        MY_HOME = getHome(url);\\n        let ssyz = 'TloGnnikThrfs/5fDNlk5CSsbaGtAH7W/uMZjuYoIupB6bCoo9CotLQHfPIdGgbkbynKqL2aUE2Xy558X2QxHYtTU09vD+4oaCDIuSZO7nxDbLfRGfWj7zql+yMbvF+aJoD/m6Psfw/PyYOAp/ZVGdrPzaCByfd0HL5DFVSw+YF2OC40V8SP9RxdFKKdrBuPxCWdxUCFrJ+1lRy/TU3LC84C4xxEBhgud7RtBp0zZArqBE06+Z3JtDP0eFCz/D5X0409qPHK3e1y/LuUgccuxpHnjYLE1GjlP8wYA2hQWe7yPngggQBHw33/gvb3tuCcxEKTWgmah/R32AH9ZF8jF7WemT26lUizVXe/spCdhDgHR/zUhODD4PO6glI8JPhdu+VwfPyRLG2D7CUo1L6SIF+0fYf0oTOWN13UPITo5+uZd/WnQQLU8NYx/WFCThEnkbzln9YGt60fRxsH+8uMDFgaBiC+z2SpcxB9gZ6GXypLSXWaj+qEUbGJKEx+jK/v5fnrkIhCdwNbkp9dRks6dmlYlBifzoWF8RkuC3rqPtoScBkMOMZu7GiVtoHEdHUozmnUIdrU1LGIqq9WnG7X2a3yH8s65mjLuLnd3q0U8v+LMPnHL2/GjQuTQKVh+RKEPqK/JdrChGLNrjcHvLHDbHEshrGZuQOdEphbx/PkhkvaYy4K1MO84R17guRsKs/V6niUPaL+XbQ7c3fqJS4VHJwludJTDe02euffGCm0PJIPlAOgLHnX0izJhA6q738R2UwQcWBQjJt79aF+kyqSdyt1QPVQVjaC3IpRf7PgsDhEJ7bi9nSclyIzgJ9DCJ4T+8dG1xHhKyZasT7L/x9Lfr1Mgs8nBZER2W9ax7iTkNK+X5ACU//p/YoP/uAanDtb3D0iKUUuXFH+Jbb0x1P322S2w6BJ46nuNHBMHTpVuWwhZeZzriGh7qoOywLWiExBMKyxTGLnmKh7r03/yXKYWIJnpBN2MMycVHRZJ7RumHV4CIsVrq7iRP48823RJVt9OtyP7uuc3wBBV3kcZUzbbaYdWBx1+Au+Od2u7lR6joOL810mcJm/f7J5TvGQP6HGph1YHHX4C7453a7uVHqOgyjjh5EBd720MEBY23c+TKq/z9UpWDDOg48ZFnwSIhFqitWdiZiqsaYuN0/SXwiK8EG9eQ29u2XDJoDW4mlwtcRO7vaX5XcFsgf4/mLU07mi';\\n        evalPrivateJS(ssyz);\\n\\n        let vcode = getVCode2(MY_HOME + '/index.php/verify/index.html?', JSON.stringify(headers), 'num');\\n        fetch(MY_HOME + html.match(/\\\\/index.php.*?verify=/)[0] + JSON.parse(vcode).ret, {\\n            headers: headers,\\n            method: 'POST'\\n        });\\n        reload = true;\\n    }\\n    return reload;\\n}\\n\\nfunction test(url, html, d, old, key, rule) {\\n    if (/5秒|频繁/.test(html)) {\\n        d.push({\\n            title: '搜索需间隔5秒，点击重新加载',\\n            col_type: \\\"text_1\\\",\\n            desc: \\\"““””<font color=#f13b66a>\\\" + rule + \\\"</font>\\\",\\n            url: $().lazyRule((url, old, key, rule) => {\\n                let sp = $.require(\\\"hiker://page/sp\\\");\\n                let d = sp(old, key, rule);\\n                let {\\n                    wrap\\n                } = $.require(\\\"hiker://page/tool\\\");\\n                for (let it of d) {\\n                    it.title = wrap(it.title, key);\\n                }\\n                addItemAfter(url, d);\\n                deleteItem(url);\\n                return \\\"toast://OK\\\";\\n            }, url, old, key, rule),\\n            extra: {\\n                id: url\\n            }\\n        });\\n    }\\n}\\n\\n$.exports = {\\n    check: check,\\n    test: test\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tool\",\"rule\":\"function wrap(text, s) {\\n    return text.includes(\\\"““””\\\") ? text : \\\"““””\\\" + text.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\")\\n}\\n$.exports = {\\n    wrap: wrap\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"单搜\",\"path\":\"singles\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"搜索\\\",\\n    url: $.toString(() => {\\n        putMyVar(\\\"so\\\", input);\\n        refreshPage();\\n    }),\\n    col_type: \\\"input\\\",\\n    desc: \\\"请输入关键词，尽量少字不要多字\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        defaultValue: getMyVar(\\\"so\\\", \\\"\\\")\\n    }\\n});\\nlet s = getMyVar(\\\"so\\\", \\\"\\\");\\nlet r = \\\"\\\";\\nif (s != \\\"\\\") {\\n    let p = MY_PAGE;\\n    let {\\n        load\\n    } = $.require(\\\"hiker://page/data\\\");\\n    let {\\n        wrap\\n    } = $.require(\\\"hiker://page/tool\\\");\\n    let data = load(p, MY_PARAMS.RULE.name);\\n    let arr = data[0].find(s, p);\\n    for (let it of arr) {\\n        it.title = wrap(it.title, s)\\n        d.push(it);\\n    }\\n}\\nsetResult(d);\"}],\"saved\":false,\"title\":\"AI影搜\",\"version\":0,\"url\":\"hiker://empty\",\"col_type\":\"x5_webview_single\",\"find_rule\":\"js:setResult([{\\n    url:\\\"https://www.dadagui.me\\\",\\ndesc:\\\"100%&&float\\\",\\nextra:{canBack: true}\\n}]);\",\"group\":\"①轻合集\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级解析\\\",\\\"path\\\":\\\"p\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet url = base64Decode(getParam(\\\\\\\"u\\\\\\\"));\\\\nlet html = request(url);\\\\nlet alist = pdfa(html, \\\\\\\"body&&a\\\\\\\");\\\\nlet arr = alist.map(it => {\\\\n    return {\\\\n        //html: it,\\\\n        text: pdfh(it, \\\\\\\"a&&Text\\\\\\\"),\\\\n        title: pdfh(it, \\\\\\\"a&&title\\\\\\\"),\\\\n        href: pd(it, \\\\\\\"a&&href\\\\\\\", url)\\\\n    }\\\\n});\\\\n//log(arr);\\\\nlet debug = false;\\\\n\\\\nfunction clearText(it) {\\\\n    return it.replace(/第|集|章/g, \\\\\\\"\\\\\\\");\\\\n}\\\\n\\\\nfunction isMovie(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return false;\\\\n    }\\\\n    let tit = it.title || \\\\\\\"\\\\\\\";\\\\n    it = it.text || \\\\\\\"\\\\\\\";\\\\n    if (it == \\\\\\\"\\\\\\\" || it.length > 8) {\\\\n        return false;\\\\n    }\\\\n    if (tit != \\\\\\\"\\\\\\\" && !tit.includes(it)) {\\\\n        return false;\\\\n    }\\\\n    return it.match(/原画|备用|蓝光|超清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\\\n}\\\\n\\\\nfunction notChapter(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return true;\\\\n    }\\\\n    return it.text.match(/[0-9]\\\\\\\\.[0-9]分/);\\\\n}\\\\n\\\\nfunction isChapter(it, pre, next) {\\\\n    if (notChapter(it)) {\\\\n        //优先排除\\\\n        return false;\\\\n    }\\\\n    //判断是不是电影\\\\n    if (isMovie(it)) {\\\\n        return true;\\\\n    }\\\\n    return isChapter0(it, pre) || isChapter0(it, next);\\\\n}\\\\n\\\\nfunction getChapterNum(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return -1;\\\\n    }\\\\n    it = it.text || \\\\\\\"\\\\\\\";\\\\n    if (it == \\\\\\\"\\\\\\\") {\\\\n        return -1;\\\\n    }\\\\n    it = clearText(it);\\\\n    it = parseInt(it);\\\\n    if (isNaN(it)) {\\\\n        return -1;\\\\n    }\\\\n    return it;\\\\n}\\\\n\\\\nfunction isChapter0(it, brother) {\\\\n    /*if (debug) {\\\\n        log({\\\\n            it: it,\\\\n            brother: brother\\\\n        });\\\\n    }*/\\\\n    it = getChapterNum(it);\\\\n    //if (debug) log(it);\\\\n    if (it < 0) {\\\\n        return false;\\\\n    }\\\\n    brother = getChapterNum(brother);\\\\n    //if (debug) log(brother);\\\\n    if (brother < 0) {\\\\n        return false;\\\\n    }\\\\n    return it - brother < 2 && it - brother > -2;\\\\n}\\\\n\\\\nfor (let i = 0; i < arr.length; i++) {\\\\n    let it = arr[i];\\\\n    let t = it.text;\\\\n    if (!it.href || it.href == \\\\\\\"\\\\\\\") {\\\\n        continue;\\\\n    }\\\\n    let pre = i == 0 ? null : arr[i - 1];\\\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\\\n    if (isChapter(it, pre, next)) {\\\\n        d.push({\\\\n            title: t,\\\\n            url: \\\\\\\"video://\\\\\\\" + it.href,\\\\n            col_type: \\\\\\\"text_3\\\\\\\",\\\\n            extra: {\\\\n                id: it.href\\\\n            }\\\\n        });\\\\n    }\\\\n}\\\\nif (d.length == 0) {\\\\n    //匹配失败\\\\n    d.push({\\\\n        title: \\\\\\\"\\\\\\\",\\\\n        url: url,\\\\n        col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n        desc: \\\\\\\"float&&100%\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            canBack: true\\\\n        }\\\\n    });\\\\n    toast(\\\\\\\"AI匹配失败，已使用X5加载\\\\\\\");\\\\n    setResult(d);\\\\n} else {\\\\n    //为线路加分割线\\\\n    let d2 = [];\\\\n    for (let i = 0; i < d.length; i++) {\\\\n        d2.push(d[i]);\\\\n        if (i < d.length - 1) {\\\\n            let it = d[i];\\\\n            let t1 = parseInt(clearText(it.title));\\\\n            let next = d[i + 1];\\\\n            let t2 = parseInt(clearText(next.title));\\\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n                });\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"line_blank\\\\\\\"\\\\n                });\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n                });\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    setResult(d2);\\\\n}\\\"},{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"搜索测试\\\",\\\"path\\\":\\\"s\\\",\\\"rule\\\":\\\"js:\\\\nlet url = base64Decode(getParam(\\\\\\\"u\\\\\\\"));\\\\nlog(url);\\\\nlet key = getParam(\\\\\\\"key\\\\\\\");\\\\nlet sp = $.require(\\\\\\\"hiker://page/sp\\\\\\\");\\\\nsetResult(sp(url, key, \\\\\\\"搜索测试\\\\\\\"));\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"聚合搜索\\\",\\\"path\\\":\\\"pro\\\",\\\"rule\\\":\\\"var d = [];\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: \\\\\\\"搜索\\\\\\\",\\\\n        url: $.toString(() => {\\\\n            refreshPage();\\\\n            return \\\\\\\"hiker://empty\\\\\\\";\\\\n        }),\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        desc: \\\\\\\"请输入关键词，尽量少字不要多字\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            defaultValue: getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n            onChange: $.toString(() => {\\\\n                putMyVar(\\\\\\\"sou\\\\\\\", input);\\\\n            })\\\\n        }\\\\n    });\\\\n    addListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n        clearMyVar(\\\\\\\"sou\\\\\\\");\\\\n        clearMyVar(\\\\\\\"so\\\\\\\");\\\\n    }));\\\\n}\\\\n\\\\nlet s = getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\");\\\\nlet r = \\\\\\\"\\\\\\\";\\\\nif (s != \\\\\\\"\\\\\\\") {\\\\n    let p = MY_PAGE;\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let {\\\\n        wrap\\\\n    } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n    let data = load(p, r != \\\\\\\"\\\\\\\" ? r : null);\\\\n\\\\n    let pageid = MY_RULE.title + \\\\\\\"-page\\\\\\\" + p;\\\\n    if (data.length > 0) {\\\\n        d.push({\\\\n            title: \\\\\\\"加载第\\\\\\\" + p + \\\\\\\"页中，进度：1/\\\\\\\" + data.length,\\\\n            url: \\\\\\\"\\\\\\\",\\\\n            col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n            desc: \\\\\\\"\\\\\\\",\\\\n            pic_url: \\\\\\\"\\\\\\\",\\\\n            extra: {\\\\n                id: pageid\\\\n            }\\\\n        });\\\\n    }\\\\n    setResult(d);\\\\n    log(data.length);\\\\n    if (data.length > 0) {\\\\n        //多线程加载        \\\\n        let realPage = \\\\\\\"\\\\\\\" == r ? 1 : p;\\\\n        let tasks = data.map(it => {\\\\n            return {\\\\n                func: function(rule) {\\\\n                    return rule.find(s, realPage);\\\\n                },\\\\n                param: it,\\\\n                id: \\\\\\\"rule@\\\\\\\" + it.name\\\\n            }\\\\n        });\\\\n\\\\n        batchExecute(tasks, {\\\\n            func: function(param, id, error, result) {\\\\n                //log(\\\\\\\"listener: \\\\\\\" + (result || []).length)\\\\n                param.i = param.i + 1;\\\\n                if (result) {\\\\n                    try {\\\\n                        for (let it of result) {\\\\n                            param.j = param.j + 1;\\\\n                            addItemBefore(pageid, {\\\\n                                title: wrap(it.title, s),\\\\n                                desc: it.desc,\\\\n                                url: it.url,\\\\n                                pic_url: it.pic_url,\\\\n                                col_type: it.pic_url ? 'movie_1_vertical_pic' : \\\\\\\"text_1\\\\\\\",\\\\n                                extra: it.extra\\\\n                            })\\\\n                        }\\\\n                    } catch (e) {}\\\\n\\\\n                }\\\\n                if (param.i >= param.all) {\\\\n                    deleteItem(pageid)\\\\n                } else {\\\\n                    updateItem({\\\\n                        title: \\\\\\\"加载第\\\\\\\" + MY_PAGE + \\\\\\\"页中，进度：\\\\\\\" + (param.i + 1) + \\\\\\\"/\\\\\\\" + param.all,\\\\n                        url: \\\\\\\"\\\\\\\",\\\\n                        col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n                        desc: \\\\\\\"\\\\\\\",\\\\n                        pic_url: \\\\\\\"\\\\\\\",\\\\n                        extra: {\\\\n                            id: pageid\\\\n                        }\\\\n                    })\\\\n                }\\\\n            },\\\\n            param: {\\\\n                all: data.length,\\\\n                i: 0,\\\\n                j: -1\\\\n            }\\\\n        })\\\\n    }\\\\n} else {\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let data = load(-1, null);\\\\n    if (data.length > 0) {\\\\n        for (let it of data) {\\\\n            d.push({\\\\n                title: it.name,\\\\n                url: \\\\\\\"select://\\\\\\\" + JSON.stringify({\\\\n                    title: \\\\\\\"请选择操作\\\\\\\",\\\\n                    col: 1,\\\\n                    options: [\\\\\\\"访问首页\\\\\\\", \\\\\\\"搜索此站\\\\\\\"],\\\\n                    js: $.toString((url) => {\\\\n                        if (input == \\\\\\\"访问首页\\\\\\\") {\\\\n                            MY_URL = url;\\\\n                            return \\\\\\\"x5://\\\\\\\" + getHome(url)\\\\n                        } else {\\\\n                            return \\\\\\\"hiker://page/singles\\\\\\\"\\\\n                        }\\\\n                    }, it.url)\\\\n                }),\\\\n                col_type: \\\\\\\"flex_button\\\\\\\",\\\\n                desc: \\\\\\\"\\\\\\\",\\\\n                pic_url: \\\\\\\"\\\\\\\",\\\\n                extra: {\\\\n                    RULE: {\\\\n                        name: it.name,\\\\n                        url: it.url\\\\n                    }\\\\n                }\\\\n            });\\\\n        }\\\\n        $.require(\\\\\\\"hiker://page/manage\\\\\\\")(d, data.map(it => it.name));\\\\n    }\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"数据\\\",\\\"path\\\":\\\"data\\\",\\\"rule\\\":\\\"//并发规则数\\\\nlet size0 = 10;\\\\nlet rulesText0 = `稀饭@https://www.xifanys.com/yingpiansearch/-------------.html?wd=**\\\\n达龟@https://www.dadagui.me/vodsearch/-------------.html?wd=**&submit=\\\\n城市@https://www.citydy.com/search.html?wd=**\\\\nlibvio@https://www.libvio.me/search/-------------.html?wd=**&submit=\\\\n新视@https://www.6080dy1.com/vodsearch/-------------.html?wd=**\\\\n看看y@https://www.kkdy.live/vod-search.html?wd=**&submit=\\\\n饭团@https://www.fantuanhd.com/search.html?wd=**&submit=\\\\n免的@https://www.freeok.vip/vodsearch/-------------.html?wd=**\\\\n牛马@https://www.niumatv.cc/vodsearch.html?wd=**&submit=\\\\n免费@https://www.thefree.vip/vodsearch/-------------.html?wd=**\\\\n莫扎兔@https://www.mozhatu.com/index.php/vod/search.html?wd=**\\\\n霹雳@https://plyingshi.com/vodsearch/-------------.html?wd=**\\\\n厂长@https://www.czspp.com/xssearch?q=**\\\\nVOF@https://www.voflix.com/search/-------------.html?wd=**\\\\n电影@https://www.appmovie.cc/index.php/vod/search.html?wd=**&submit=\\\\n追剧@http://zjdr.vip/vod/search/wd/**.html\\\\n疯狗@https://m.fenggoudy3.com/index.php?s=vod-search-name&wd=**\\\\n在线@https://zxzj.vip/vodsearch/-------------.html?wd=**&submit=\\\\n七七@http://aaasofa.com/search.php\\\\n北川@https://www.bcwzg.com/vodsearch/-------------/?wd=**\\\\nEF@https://www.pili5.cn/vodsearch/-------------.html?wd=**&submit=\\\\n影家@http://yszjvip.com/index.php/vod/search.html?wd=**\\\\n五五@https://555dy.cc/vodsearch/-------------.html?wd=**\\\\n渣漫@https://www.dm2022.com/vodsearch.html?wd=**\\\\n在家@https://zxzj.vip/vodsearch/-------------.html?wd=**&submit=\\\\npia库@https://m.piaku.cc/s/-------------/?wd=**\\\\n极品@https://www.jpys.me/vodsearch/-------------.html?wd=**\\\\n艾迪@https://aidi.tv/vsearch/-------------.html?wd=**&submit=\\\\n九州@http://www.jiuzhou911.com/search.php?searchword=**\\\\n十千@http://www.qianshihouse.com/srh/-------------.html?wd=**\\\\n麦片@http://m.ly368.com/index.php?s=vod-m_s-name&wd=**\\\\n私人@https://soumk.com/vodsearch/-------------.html?wd=**\\\\n星辰@http://www.qhddj.com.cn/xcyysearch/**-------------.html\\\\nCokevY@https://cokemv.me/vodsearch/-------------.html?wd=**\\\\n爱看y@https://ikan6.vip/vodsearch/-------------/?wd=**&submit=\\\\n干饭py@https://www.gfysys1.com/vodsearch/-------------.html?wd=**\\\\n天空y@http://tkznp.com/vodsearch.html?wd=**\\\\n蓝光@https://www.lgyy.cc/vodsearch/-------------.html?wd=**\\\\n低端@https://ddys.tv/?s=**&post_type=post\\\\n努努@https://www.nunuyy3.org/so/**-**--.html`;\\\\nlet rulesText = getItem(\\\\\\\"rules\\\\\\\", rulesText0);\\\\nlet sp = $.require(\\\\\\\"hiker://page/sp\\\\\\\");\\\\nrules = rulesText.split(\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n    .filter(it => it.includes(\\\\\\\"@\\\\\\\"))\\\\n    .map(rule => {\\\\n        let s = rule.split(\\\\\\\"@\\\\\\\");\\\\n        return {\\\\n            name: s[0],\\\\n            find: function(key, page) {\\\\n                return sp(s[1], key, s[0]);\\\\n            },\\\\n            url: s[1]\\\\n        };\\\\n    });\\\\n\\\\nfunction load(page, rule) {\\\\n    let size = page <= 0 ? rules.length : size0;\\\\n    page = page <= 0 ? 1 : page;\\\\n    if (!page && !rule) {\\\\n        return rules.map(it => it.name);\\\\n    }\\\\n    if (rule != null) {\\\\n        if (page != null && page > 1) {\\\\n            return rules.filter(i => i.name == rule && i.page);\\\\n        }\\\\n        return rules.filter(i => i.name == rule);\\\\n    }\\\\n    let start = (page - 1) * size;\\\\n    if (rules.length < start + 1) {\\\\n        return [];\\\\n    }\\\\n    let len = size;\\\\n    if (rules.length < page * size) {\\\\n        len = rules.length - start\\\\n    }\\\\n    return rules.slice(start, start + len);\\\\n}\\\\n\\\\nfunction addRule(name, surl) {\\\\n    setItem(\\\\\\\"rules\\\\\\\", rulesText + \\\\\\\"\\\\\\\\n\\\\\\\" + name + \\\\\\\"@\\\\\\\" + surl);\\\\n}\\\\n\\\\nfunction removeRule(name) {\\\\n    let newT = rulesText.split(\\\\\\\"\\\\\\\\n\\\\\\\")\\\\n        .filter(it => it.indexOf(name + \\\\\\\"@\\\\\\\") < 0)\\\\n        .join(\\\\\\\"\\\\\\\\n\\\\\\\");\\\\n    setItem(\\\\\\\"rules\\\\\\\", newT);\\\\n}\\\\n\\\\n$.exports = {\\\\n    load: load,\\\\n    addRule: addRule,\\\\n    removeRule: removeRule\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索解析\\\",\\\"path\\\":\\\"sp\\\",\\\"rule\\\":\\\"function search(url, key, rule) {\\\\n    let d = [];\\\\n    let html = \\\\\\\"\\\\\\\";\\\\n    if (url.includes(\\\\\\\"**\\\\\\\")) {\\\\n        //get请求\\\\n        let old = url;\\\\n        url = url.replace(\\\\\\\"**\\\\\\\", key);\\\\n        html = request(url);\\\\n        //自动过验证码和频繁访问限制\\\\n        let {\\\\n            check, test\\\\n        } = $.require(\\\\\\\"hiker://page/yzm\\\\\\\");\\\\n        if (check(url, html, d)) {\\\\n            log(\\\\\\\"重试了\\\\\\\");\\\\n            html = request(url, {\\\\n                headers: {\\\\n                    \\\\\\\"Referer\\\\\\\": url\\\\n                }\\\\n            });           \\\\n        }         \\\\n        test(url, html, d, old, key, rule);\\\\n    } else {\\\\n        //自动识别post请求\\\\n        html = request(url);\\\\n        let form = pdfh(html, \\\\\\\"body&&form&&Html\\\\\\\");\\\\n        let action = pd(html, \\\\\\\"form&&action\\\\\\\", url);\\\\n        let inputs = pdfa(html, \\\\\\\"body&&form&&input\\\\\\\");\\\\n        let body = {};\\\\n        for (let it of inputs) {\\\\n            let name = pdfh(it, \\\\\\\"input&&name\\\\\\\");\\\\n            if (name && name != \\\\\\\"\\\\\\\") {\\\\n                let value = pdfh(it, \\\\\\\"input&&value\\\\\\\");\\\\n                body[name] = value || key;\\\\n            }\\\\n        }\\\\n        html = post(action, {\\\\n            body: body\\\\n        });\\\\n    }\\\\n\\\\n    let alist = pdfa(html, \\\\\\\"body&&a\\\\\\\");\\\\n    let arr = alist.map(it => {\\\\n        let t = pdfh(it, \\\\\\\"a&&Text\\\\\\\");\\\\n        let t2 = pdfh(it, \\\\\\\"a&&title\\\\\\\");\\\\n        return {\\\\n            //html: it,\\\\n            text: t2 && t2.includes(key) ? t2 : t,\\\\n            href: pd(it, \\\\\\\"a&&href\\\\\\\", url)\\\\n        }\\\\n    });\\\\n\\\\n    function isResult(it) {\\\\n        it = it.text || \\\\\\\"\\\\\\\";\\\\n        if (it == \\\\\\\"\\\\\\\" || it.match(/搜索|结果/)) {\\\\n            return false\\\\n        }\\\\n        return it.includes(key);\\\\n    }\\\\n\\\\n    for (let i = 0; i < arr.length; i++) {\\\\n        let it = arr[i];\\\\n        let t = it.text;\\\\n        if (!it.href || it.href == \\\\\\\"\\\\\\\") {\\\\n            continue;\\\\n        }\\\\n        if (isResult(it)) {\\\\n            d.push({\\\\n                title: t,\\\\n                url: \\\\\\\"hiker://page/p?u=\\\\\\\" + base64Encode(it.href),\\\\n                col_type: \\\\\\\"text_1\\\\\\\",\\\\n                desc: \\\\\\\"““””<font color=#f13b66a>\\\\\\\" + rule + \\\\\\\"</font>\\\\\\\"\\\\n            });\\\\n        }\\\\n    }\\\\n    return d;\\\\n}\\\\n$.exports = search;\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"增删\\\",\\\"path\\\":\\\"manage\\\",\\\"rule\\\":\\\"$.exports = function(d, names) {\\\\n    d.push({\\\\n        title: \\\\\\\" + \\\\\\\",\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((rr) => {\\\\n            deleteItemByCls(\\\\\\\"aiadd\\\\\\\");\\\\n            addItemAfter(rr + \\\\\\\"aisdel\\\\\\\", [{\\\\n                    title: \\\\\\\"\\\\\\\",\\\\n                    desc: \\\\\\\"请输入网站名称\\\\\\\",\\\\n                    col_type: \\\\\\\"input\\\\\\\",\\\\n                    extra: {\\\\n                        titleVisible: false,\\\\n                        onChange: \\\\\\\"putMyVar('name', input)\\\\\\\",\\\\n                        cls: \\\\\\\"aiadd\\\\\\\"\\\\n                    }\\\\n                },\\\\n                {\\\\n                    title: \\\\\\\"\\\\\\\",\\\\n                    desc: \\\\\\\"请输入网站搜索地址\\\\\\\",\\\\n                    col_type: \\\\\\\"input\\\\\\\",\\\\n                    extra: {\\\\n                        titleVisible: false,\\\\n                        onChange: \\\\\\\"putMyVar('surl', input)\\\\\\\",\\\\n                        cls: \\\\\\\"aiadd\\\\\\\"\\\\n                    }\\\\n                },\\\\n                {\\\\n                    title: \\\\\\\"提交保存\\\\\\\",\\\\n                    col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n                    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n                        let surl = getMyVar(\\\\\\\"surl\\\\\\\", \\\\\\\"\\\\\\\");\\\\n                        let name = getMyVar(\\\\\\\"name\\\\\\\", \\\\\\\"\\\\\\\");\\\\n                        if (surl == \\\\\\\"\\\\\\\" || name == \\\\\\\"\\\\\\\") {\\\\n                            return \\\\\\\"toast://请输入完整内容\\\\\\\"\\\\n                        }\\\\n                        let r = decodeURIComponent(surl);\\\\n                        r = r.replace(new RegExp(\\\\\\\"[\\\\\\\\u4e00-\\\\\\\\u9fa5]+\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"**\\\\\\\");\\\\n                        let {\\\\n                            addRule\\\\n                        } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n                        addRule(name, r);\\\\n                        refreshPage();\\\\n                        return \\\\\\\"toast://已保存\\\\\\\";\\\\n                    }),\\\\n                    extra: {\\\\n                        cls: \\\\\\\"aiadd\\\\\\\"\\\\n                    }\\\\n                }\\\\n            ]);\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, MY_RULE.title),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\n    });\\\\n    d.push({\\\\n        title: \\\\\\\" - \\\\\\\",\\\\n        url: \\\\\\\"select://\\\\\\\" + JSON.stringify({\\\\n            options: names,\\\\n            title: \\\\\\\"请选择要删除的站点\\\\\\\",\\\\n            js: $.toString(() => {\\\\n                let {\\\\n                    removeRule\\\\n                } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n                removeRule(input);\\\\n                refreshPage();\\\\n                return \\\\\\\"toast://OK\\\\\\\";\\\\n            })\\\\n        }),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\n        extra: {\\\\n            id: MY_RULE.title + \\\\\\\"aisdel\\\\\\\"\\\\n        }\\\\n    });\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"验证码\\\",\\\"path\\\":\\\"yzm\\\",\\\"rule\\\":\\\"function check(url, html, d) {\\\\n    let reload = false;\\\\n    if (/验证码|系统安全验证/.test(html)) {\\\\n        let headers = {\\\\n            \\\\\\\"User-Agent\\\\\\\": MOBILE_UA,\\\\n            \\\\\\\"Referer\\\\\\\": url\\\\n        };\\\\n        MY_HOME = getHome(url);\\\\n        let ssyz = 'TloGnnikThrfs/5fDNlk5CSsbaGtAH7W/uMZjuYoIupB6bCoo9CotLQHfPIdGgbkbynKqL2aUE2Xy558X2QxHYtTU09vD+4oaCDIuSZO7nxDbLfRGfWj7zql+yMbvF+aJoD/m6Psfw/PyYOAp/ZVGdrPzaCByfd0HL5DFVSw+YF2OC40V8SP9RxdFKKdrBuPxCWdxUCFrJ+1lRy/TU3LC84C4xxEBhgud7RtBp0zZArqBE06+Z3JtDP0eFCz/D5X0409qPHK3e1y/LuUgccuxpHnjYLE1GjlP8wYA2hQWe7yPngggQBHw33/gvb3tuCcxEKTWgmah/R32AH9ZF8jF7WemT26lUizVXe/spCdhDgHR/zUhODD4PO6glI8JPhdu+VwfPyRLG2D7CUo1L6SIF+0fYf0oTOWN13UPITo5+uZd/WnQQLU8NYx/WFCThEnkbzln9YGt60fRxsH+8uMDFgaBiC+z2SpcxB9gZ6GXypLSXWaj+qEUbGJKEx+jK/v5fnrkIhCdwNbkp9dRks6dmlYlBifzoWF8RkuC3rqPtoScBkMOMZu7GiVtoHEdHUozmnUIdrU1LGIqq9WnG7X2a3yH8s65mjLuLnd3q0U8v+LMPnHL2/GjQuTQKVh+RKEPqK/JdrChGLNrjcHvLHDbHEshrGZuQOdEphbx/PkhkvaYy4K1MO84R17guRsKs/V6niUPaL+XbQ7c3fqJS4VHJwludJTDe02euffGCm0PJIPlAOgLHnX0izJhA6q738R2UwQcWBQjJt79aF+kyqSdyt1QPVQVjaC3IpRf7PgsDhEJ7bi9nSclyIzgJ9DCJ4T+8dG1xHhKyZasT7L/x9Lfr1Mgs8nBZER2W9ax7iTkNK+X5ACU//p/YoP/uAanDtb3D0iKUUuXFH+Jbb0x1P322S2w6BJ46nuNHBMHTpVuWwhZeZzriGh7qoOywLWiExBMKyxTGLnmKh7r03/yXKYWIJnpBN2MMycVHRZJ7RumHV4CIsVrq7iRP48823RJVt9OtyP7uuc3wBBV3kcZUzbbaYdWBx1+Au+Od2u7lR6joOL810mcJm/f7J5TvGQP6HGph1YHHX4C7453a7uVHqOgyjjh5EBd720MEBY23c+TKq/z9UpWDDOg48ZFnwSIhFqitWdiZiqsaYuN0/SXwiK8EG9eQ29u2XDJoDW4mlwtcRO7vaX5XcFsgf4/mLU07mi';\\\\n        evalPrivateJS(ssyz);\\\\n\\\\n        let vcode = getVCode2(MY_HOME + '/index.php/verify/index.html?', JSON.stringify(headers), 'num');\\\\n        fetch(MY_HOME + html.match(/\\\\\\\\/index.php.*?verify=/)[0] + JSON.parse(vcode).ret, {\\\\n            headers: headers,\\\\n            method: 'POST'\\\\n        });\\\\n        reload = true;\\\\n    }\\\\n    return reload;\\\\n}\\\\n\\\\nfunction test(url, html, d, old, key, rule) {\\\\n    if (/5秒|频繁/.test(html)) {\\\\n        d.push({\\\\n            title: '搜索需间隔5秒，点击重新加载',\\\\n            col_type: \\\\\\\"text_1\\\\\\\",\\\\n            desc: \\\\\\\"““””<font color=#f13b66a>\\\\\\\" + rule + \\\\\\\"</font>\\\\\\\",\\\\n            url: $().lazyRule((url, old, key, rule) => {\\\\n                let sp = $.require(\\\\\\\"hiker://page/sp\\\\\\\");\\\\n                let d = sp(old, key, rule);\\\\n                let {\\\\n                    wrap\\\\n                } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n                for (let it of d) {\\\\n                    it.title = wrap(it.title, key);\\\\n                }\\\\n                addItemAfter(url, d);\\\\n                deleteItem(url);\\\\n                return \\\\\\\"toast://OK\\\\\\\";\\\\n            }, url, old, key, rule),\\\\n            extra: {\\\\n                id: url\\\\n            }\\\\n        });\\\\n    }\\\\n}\\\\n\\\\n$.exports = {\\\\n    check: check,\\\\n    test: test\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"工具\\\",\\\"path\\\":\\\"tool\\\",\\\"rule\\\":\\\"function wrap(text, s) {\\\\n    return text.includes(\\\\\\\"““””\\\\\\\") ? text : \\\\\\\"““””\\\\\\\" + text.replace(new RegExp(\\\\\\\"<em>|</em>\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\").replace(new RegExp(s, \\\\\\\"g\\\\\\\"), \\\\\\\"<strong><span style=\\\\\\\\\\\\\\\"color: #1E90FF\\\\\\\\\\\\\\\">\\\\\\\" + s + \\\\\\\"</span></strong>\\\\\\\")\\\\n}\\\\n$.exports = {\\\\n    wrap: wrap\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"单搜\\\",\\\"path\\\":\\\"singles\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"搜索\\\\\\\",\\\\n    url: $.toString(() => {\\\\n        putMyVar(\\\\\\\"so\\\\\\\", input);\\\\n        refreshPage();\\\\n    }),\\\\n    col_type: \\\\\\\"input\\\\\\\",\\\\n    desc: \\\\\\\"请输入关键词，尽量少字不要多字\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        defaultValue: getMyVar(\\\\\\\"so\\\\\\\", \\\\\\\"\\\\\\\")\\\\n    }\\\\n});\\\\nlet s = getMyVar(\\\\\\\"so\\\\\\\", \\\\\\\"\\\\\\\");\\\\nlet r = \\\\\\\"\\\\\\\";\\\\nif (s != \\\\\\\"\\\\\\\") {\\\\n    let p = MY_PAGE;\\\\n    let {\\\\n        load\\\\n    } = $.require(\\\\\\\"hiker://page/data\\\\\\\");\\\\n    let {\\\\n        wrap\\\\n    } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n    let data = load(p, MY_PARAMS.RULE.name);\\\\n    let arr = data[0].find(s, p);\\\\n    for (let it of arr) {\\\\n        it.title = wrap(it.title, s)\\\\n        d.push(it);\\\\n    }\\\\n}\\\\nsetResult(d);\\\"}]\"}","title":"达龟"}