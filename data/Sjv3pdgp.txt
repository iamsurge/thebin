const _smallCirclesIntersection = ([ aLat, aLon ], aRad, [ bLat, bLon ], bRad) => {

	// B point
	let [ x, y, z ] = [ sin(bLon)*cos(bLat), sin(bLat), cos(bLon)*cos(bLat) ];

	// Invert A coordinate rotations
	[ x, z ] = [ x*cos(aLon) - z*sin(aLon), z*cos(aLon) + x*sin(aLon) ];
	[ y, z ] = [ y*cos(aLat) - z*sin(aLat), z*cos(aLat) + y*sin(aLat) ];

	// Remove azimuth (aligning with Y axis)
	const l = sqrt(x*x + y*y);
	const sinAz = x/l;
	const cosAz = y/l;
	[ x, y ] = [ 0, l ];

	// Get center point of B circle
	const py = y*cos(bRad);
	const pz = z*cos(bRad);

	// Get line function
	const m = -z/y;
	const c = py - pz*m;

	// Get first point of intersection
	const iz = cos(aRad);
	const iy = iz*m + c;
	const ix = sqrt(sqr(sin(aRad)) - sqr(iy));

	// Apply A coordinate rotations for the two solutions
	let [ ax, ay, az ] = [ ix, iy, iz ];
	[ ax, ay ] = [ ax*cosAz + ay*sinAz, ay*cosAz - ax*sinAz ];
	[ ay, az ] = [ ay*cos(aLat) + az*sin(aLat), az*cos(aLat) - ay*sin(aLat) ];
	[ ax, az ] = [ ax*cos(aLon) + az*sin(aLon), az*cos(aLon) - ax*sin(aLon) ];
	let [ bx, by, bz ] = [ -ix, iy, iz ];
	[ bx, by ] = [ bx*cosAz + by*sinAz, by*cosAz - bx*sinAz ];
	[ by, bz ] = [ by*cos(aLat) + bz*sin(aLat), bz*cos(aLat) - by*sin(aLat) ];
	[ bx, bz ] = [ bx*cos(aLon) + bz*sin(aLon), bz*cos(aLon) - bx*sin(aLon) ];

	// Get spherical coordinates of the two solutions
	return [
		[ asin(ay), acos(az/sqrt(ax*ax + az*az))*(ax>=0?1:-1) ],
		[ asin(by), acos(bz/sqrt(bx*bx + bz*bz))*(bx>=0?1:-1) ],
	];
};

const smallCirclesIntersection = ([ aLat, aLon ], aRad, [ bLat, bLon ], bRad) => {
	const sinALat = sin(aLat), cosALat = cos(aLat);
	const sinALon = sin(aLon), cosALon = cos(aLon);
	let [ x, y, z ] = [ sin(bLon)*cos(bLat), sin(bLat), cos(bLon)*cos(bLat) ];
	[ x, z ] = [ x*cosALon - z*sinALon, z*cosALon + x*sinALon ];
	[ y, z ] = [ y*cosALat - z*sinALat, z*cosALat + y*sinALat ];
	const l = sqrt(x*x + y*y);
	const sinAz = x/l;
	const cosAz = y/l;
	const iz = cos(aRad);
	const iy = (z*cos(bRad) - iz)*z/l + l*cos(bRad);
	const ix = sqrt(sqr(sin(aRad)) - sqr(iy));
	let [ ax, ay, az ] = [ ix*cosAz + iy*sinAz, iy*cosAz - ix*sinAz, iz ];
	[ ay, az ] = [ ay*cosALat + az*sinALat, az*cosALat - ay*sinALat ];
	[ ax, az ] = [ ax*cosALon + az*sinALon, az*cosALon - ax*sinALon ];
	let [ bx, by, bz ] = [ iy*sinAz - ix*cosAz, iy*cosAz + ix*sinAz, iz ];
	[ by, bz ] = [ by*cosALat + bz*sinALat, bz*cosALat - by*sinALat ];
	[ bx, bz ] = [ bx*cosALon + bz*sinALon, bz*cosALon - bx*sinALon ];
	const c1 = [ asin(ay), acos(az/sqrt(ax*ax + az*az))*(ax>=0?1:-1) ];
	const c2 = [ asin(by), acos(bz/sqrt(bx*bx + bz*bz))*(bx>=0?1:-1) ];
	return [ c1, c2 ];
};
