# file = './example.txt'
file = './input.txt'

def parse_input(file):
    return open(file, 'r').read().splitlines()


def map_input(list):
    groups = []
    rucksacks = []
    for index, line in enumerate(list):
        rucksacks.append(map_rucksack(line))
        if index % 3 == 2:
            group = Group(rucksacks)
            groups.append(group)
            rucksacks = []

    return groups

def map_rucksack(line):
    items = map_items(line)
    return Rucksack(items)

def map_items(characters):
    items = []
    for char in characters:
        items.append(Item(char))
    return items

class Group():

    def __init__(self, rucksacks):
        self.rucksacks = rucksacks

    def common_item(self):
        common = set(self.rucksacks[0].items)
        for rucksack in self.rucksacks[1:]:
            common = common.intersection(set(rucksack.items))
        assert len(common) == 1
        return common.pop()

class Rucksack:

    def __init__(self, items):
        self.items = items

class Item:

    def __init__(self, character):
        self.character = character

    def priority(self):
        ascii_code = ord(self.character)
        if self.character.islower():
            return ascii_code - 96
        else:
            return ascii_code - 64 + 26

    def __repr__(self) -> str:
        return str(self.character)

    def __hash__(self) -> int:
        return hash(self.character)

    def __eq__(self, __o: object) -> bool:
        return isinstance(__o, Item) and __o.character == self.character


def sum_priorities_common_items(groups):
    sum = 0
    for group in groups:
        sum += group.common_item().priority()
    return sum

if __name__ == '__main__':
    list = parse_input(file)
    groups = map_input(list)
    sum = sum_priorities_common_items(groups)
    print(sum)
