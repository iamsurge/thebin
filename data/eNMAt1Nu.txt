#include <stdio.h>
#include <stdlib.h>
#include <math.h>

//#define NRMAX 10

typedef struct
{
    int nr_coeficienti;
    double *coeficientii;
} Polinom;

typedef struct{
    int nr_polinom, nr_x;
}Perechi;


Polinom citire(FILE *f)
{
    Polinom polinom_curent;
    fscanf(f, "%d", &polinom_curent.nr_coeficienti);
    polinom_curent.coeficientii = (double*)malloc(sizeof(double)
                                     * polinom_curent.nr_coeficienti);
    int i;
    for(i=0; i< polinom_curent.nr_coeficienti; i++)
    {
        fscanf(f, "%lf", &polinom_curent.coeficientii[i]);
    }
    return polinom_curent;
}

void dealocare_polinom(Polinom p){
    free(p.coeficientii);
}

void citire_toate_polinoamele(FILE *f, Polinom tabel_alocat[],
                                  int nr_polinoame){
    int i;
    for(i = 0; i < nr_polinoame; i++)
    {
        tabel_alocat[i] = citire(f);
    }
}
void citire_xuri(FILE*f, double xuri[], int n){
    int i;
    for(i=0;i<n;i++){
        fscanf(f, "%lf", &xuri[i]);
    }
}

void citire_perechi(FILE*f, Perechi perechi[], int n){
    int i;
    for(i=0;i<n;i++){
        fscanf(f, "%d", &perechi[i].nr_polinom);
        fscanf(f, "%d", &perechi[i].nr_x);
    }
}

double calculeaza_polinom(Polinom polinom, double x){
    //printf("nr coefs: %d, x: %f = ",polinom.nr_coeficienti, x);
    int i;
    double rezultat = 0;
    for(i = 0; i < polinom.nr_coeficienti;i++){
        rezultat += polinom.coeficientii[i] *
                    pow(x, polinom.nr_coeficienti - i - 1);
    }
    return rezultat;
}

int main()
{
    FILE*f = fopen("in.txt","r");
    if(f==NULL)
    {
        printf("Nu pot deschide");
        return -1;
    }

    int nr_polinoame;
    fscanf(f, "%d", &nr_polinoame);
    Polinom * polinoame;
    polinoame =(Polinom*)malloc(sizeof(Polinom) * nr_polinoame);
    citire_toate_polinoamele(f, polinoame, nr_polinoame);

    int nr_xuri;
    double* xurile;
    fscanf(f, "%d", &nr_xuri);
    xurile = (double*)malloc(sizeof(double) * nr_xuri);
    citire_xuri(f, xurile, nr_xuri);

    int nr_perechi;
    Perechi *perechi;
    fscanf(f, "%d", &nr_perechi);
    perechi = (Perechi*)malloc(sizeof(Perechi) * nr_perechi);
    citire_perechi(f, perechi, nr_perechi);

    int index_pereche;
    double rezultat;
    for(index_pereche = 0; index_pereche < nr_perechi; index_pereche++){
        Perechi pereche_curenta;
        pereche_curenta = perechi[index_pereche];
        rezultat = calculeaza_polinom(
                      polinoame[pereche_curenta.nr_polinom],
                      xurile[pereche_curenta.nr_x]);
        //afisare_frumoasa(p, x, rez)
        printf("%f\n", rezultat);
    }

    int i;
    for(i = 0; i< nr_polinoame;i++){
        dealocare_polinom(polinoame[i]);
    }
    free(polinoame);
    free(xurile);
    free(perechi);

    fclose(f);
    return 0;
}

/* in.txt
2
3 2 -3 1
2 5 -2
4
25
531
-10
8.2
2
1 0
0 0
*/

/* Out:
123.000000
1176.000000
*/
