//
// Created by catas on 10-Jan-23.
//

#ifndef TEMA5_LIST_H
#define TEMA5_LIST_H

#include <string>
#include <vector>

using namespace std;

class Lista;

class Node
{
    string Name;
    double average;
    int index;
    Node* next;
public:
    Node() {
        average = 0;
        next = NULL;
    }

    explicit Node(string _Name, double _average) {
        Name = _Name;
        average = _average;
    }

    Node *Next() {
        return next;
    }

    bool isEnd() {
        return next == NULL; // intoarce 1 daca next == NULL, 0 daca e diferit
    }

    ~Node() {

    }
    friend class Lista;
};



class Lista {
private:
    Node* head;
public:
    Lista() {
        head = new Node();
    }

    virtual ~Lista() {
        Node *tmp;
        tmp = head->next;
        while (tmp) {
            head->next = tmp->next;
            delete tmp;
            tmp = head->next;
        }
        delete head;
    }

    void adaugaStudent(std::string nume, double medie) {
        Node *newNode = new Node(nume, medie);
        newNode->next = head->next;
        head->next = newNode;
        if (newNode->next == NULL)
            newNode->index = 0;
        else
            newNode->index = newNode->next->index + 1;

    }

    Node* last_node(Node* head) {
        struct Node* temp = head;
        while (temp != NULL && temp->next != NULL) {
            temp = temp->next;
        }
        return temp;
    }

    Node* partition(Node* first, Node* last) {
        struct Node* pivot = first;
        struct Node* front = first;
        int tempIndex = 0;
        double tempAverage = 0;
        string tempName;
        while (front != NULL && front != last) {
            if (front->average > last->average) {
                pivot = first;

                tempName = first->Name;
                first->Name = front->Name;
                front->Name = tempName;
                tempAverage = first->average;
                first->average = front->average;
                front->average = tempAverage;
                tempIndex = first->index;
                first->index = front->index;
                front->index = tempIndex;

                first = first->next;
            }else if (front->average == last->average && front->Name.compare(last->Name) < 0) {
                tempName = front->Name;
                front->Name = last->Name;
                last->Name = tempName;
                tempIndex = front->index;
                front->index = last->index;
                last->index = tempIndex;
                tempAverage = front->average;
                front->average = last->average;
                last->average = tempAverage;
            }

            front = front->next;
        }

        tempName = first->Name;
        first->Name = last->Name;
        last->Name = tempName;
        tempAverage = first->average;
        first->average = last->average;
        last->average = tempAverage;
        tempIndex = first->index;
        first->index = last->index;
        last->index = tempIndex;
        return pivot;
    }

    void quick_sort(Node* first, Node* last)
    {
        if (first == last) {
            return;
        }
        struct Node* pivot = partition(first, last);

        if (pivot != NULL && pivot->next != NULL) {
            quick_sort(pivot->next, last);
        }

        if (pivot != NULL && first != pivot) {
            quick_sort(first, pivot);
        }
    }

    std::vector<int> returneazaIndecsiSortati() {
        vector<int> indecsi;
        quick_sort(head, last_node(head));
        Node *temp = head->next;
        while (temp != NULL) {
            indecsi.push_back(temp->index);
            temp = temp->next;
        }
        return indecsi;
    }
};
#endif //TEMA5_LIST_H
