def day7(s, *, part2=False):
  lines = s.strip('\n').split('\n')
  subdirs_of_dir = collections.defaultdict(list)
  filesize_of_dir = {}
  path = '/'
  index = 0
  while index < len(lines):
    line = lines[index]
    index += 1
    if line == '$ cd /':
      path = '/'
    elif line == '$ cd ..':
      path = path[:path.rindex('/')]
    elif line.startswith('$ cd '):
      path += '/' + line[5:]
    elif line == '$ ls':
      filesize = 0
      while index < len(lines) and lines[index][0] != '$':
        line = lines[index]
        index += 1
        field, name = line.split()
        if field == 'dir':
          subdirs_of_dir[path].append(f'{path}/{name}')
        else:
          filesize += int(field)
      filesize_of_dir[path] = filesize
    else:
      raise AssertionError(line)

  def dirs(dir='/'):
    yield dir
    for dir2 in subdirs_of_dir[dir]:
      yield from dirs(dir2)

  def dir_size(dir):
    return filesize_of_dir[dir] + sum(dir_size(dir2) for dir2 in subdirs_of_dir[dir])

  if not part2:
    return sum(dir_size(dir2) for dir2 in dirs() if dir_size(dir2) <= 100_000)

  needed_space = dir_size('/') - (70_000_000 - 30_000_000)
  return min(dir_size(dir) for dir in dirs() if dir_size(dir) >= needed_space)