#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define INIT_SIZE 100
#define DELTA 50

int str_comp(char const *s1, char const *s2) {
    if (strlen(s1) != strlen(s2))
        return 0;
    else {
        for (int i = 0; i < strlen(s1); i++) {
            if (s1[i] != s2[i])
                return 0;
        }
    }
    return 1;
}

char *readSentence() {
    char c;
    int size = INIT_SIZE;
    int actual_size = 0;
    char *sentence = malloc(size * sizeof(char));
    do {
        if (size == actual_size) {
            size += DELTA;
            sentence = realloc(sentence, size);
        }
        c = (char) getchar();
        sentence[actual_size++] = c;
    } while (c != '.' && c != ';' && c != '?' && c != '!');
    sentence[actual_size] = '\0';
    return sentence;
}

char *fix_of_sentence(char *sentence) {
    if (sentence[0] == '\t' || sentence[0] == ' ' || sentence[0] == '\n') {
        for (int i = 0; i <= strlen(sentence); i++)
            sentence[i] = sentence[i + 1];
    }
    //выход за границу массива
    return sentence;
}

char **readText(int *length) {
    int size = INIT_SIZE;
    int actual_size = 0;
    char *check = "Dragon flew away!";
    char *sentence;
    char **text = malloc(size * sizeof(char *));
    do {
        sentence = readSentence();
        fix_of_sentence(sentence);
        if (size <= actual_size) {
            size += DELTA;
            text = realloc(text, size);
        }
        text[*length] = sentence;
        *length += 1;
        actual_size += (int) strlen(sentence);
    } while (str_comp(sentence, check) == 0);
    return text;
}

void print_sentence(char *sentence) {
    for (int i = 0; i < strlen(sentence); i++) {
        if (i != strlen(sentence) - 2 && sentence[i + 1] == '\n' && sentence[i] != ' ') {
            printf("%c ", sentence[i]);
            continue;
        } else if (sentence[i] != '\n')
            printf("%c", sentence[i]);
    }
    printf("\n");
}

void print_txt(char **text, int txt_len) {
    for (int i = 0; i < txt_len; i++) {
        if(!str_comp(text[i], " "))
            print_sentence(text[i]);
    }
}

void free_txt(char **text, int txt_len) {
    for (int i = 0; i < txt_len; i++)
        free(text[i]);
    free(text);
}

int substr(char *str1, char *str2, int *index) {
    int i;
    int arr_size = 0;
    int *tmp_arr = index;
    for (i = 0; i < strlen(str2);) {
        int step = 0;
        if (str2[i] == str1[0]){
            for (int j = 0; j < strlen(str1); j++) {
                if (str2[i + j] == str1[j])
                    step += 1;
            }
        }
        if (step == strlen(str1)) {
            tmp_arr[arr_size] = i;
            arr_size++;
            i += step;
        } else
            i++;
    }
    return arr_size;
}

int del_numb(char *sentence, int *index){
    int arr_size = substr("555", sentence, index);
    if(arr_size != 0) {
        for (int i = 0; i < arr_size; i++) {
            if(sentence[index[i] - 1] == ' ' && sentence[index[i] + 3] == ' ')
                return 1;
        }
    } else
        return 0;
    return 0;
}

char** del_sent(char** text, int txt_len, int* new_len){
    *new_len = txt_len;
    for(int i = 0; i < txt_len; i++){
        int* index = malloc(INIT_SIZE * sizeof(int));
        int res = del_numb(text[i], index);
        if(res == 1) {
            text[i] = " ";
            *new_len -= 1;
        }
        free(index);
    }
    return text;
}

char** copy_text(char** prev_text, int prev_len, int new_len){
    int index;
    int new_index = 0;
    char** new_txt = malloc(new_len * sizeof(char*));
    for(index = 0; index < prev_len; index++){
        if(!str_comp(prev_text[index], " "))
            new_txt[new_index++] = prev_text[index];
    }
    return new_txt;
}


int main() {
    int txt_len = 0;
    char **text = readText(&txt_len);
    int new_len = txt_len;
    del_sent(text, txt_len, &new_len);
    char** new_txt = copy_text(text, txt_len, new_len);
    print_txt(new_txt, new_len);
    free_txt(text, txt_len);
    free_txt(new_txt, new_len);
//    char *s = readSentence();
//    print_sentence(s);
//    free(s);
    return 0;
}
