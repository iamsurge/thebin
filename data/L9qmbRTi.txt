// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)1e18 + 7;
const ll inf = 1e10 + 7;
const ll ONE = 1;
const ll MOD = 1e9 + 7;
const ll max_sz = 1e5 + 1;
ld EPS = 1e-6;
ld PI = 3.1415926535897932384;
mt19937_64 gen(rand() % 100);

struct SqrtDec {
    struct Node {
        vector <int> a;//Ves block
        vector <int> s;//Sorted
        int boost = 0;
        int sz;
    };
    int n, k;
    vector <Node> blocks;
    SqrtDec(int _n, int _k) {
        n = (_n + _k - 1) / _k;
        k = _k;
        blocks.resize(n);
    }
    void re_count(Node& bl) {
        int i;
        for (i = 0; i < bl.sz; i++) {
            bl.a[i] += bl.boost;
        }
        bl.boost = 0;
        bl.s = bl.a;
        sort(all(bl.s));
    }
    int query_block(Node& bl, int x) {
        int l = -1, r = bl.sz, m;
        while (r - l > 1) {
            m = (l + r) / 2;
            if (bl.s[m] + bl.boost < x) {
                l = m;
            }
            else {
                r = m;
            }
        }
        return l + 1;
    }
    int query(int l, int r, int x) {
        int L = l / k;
        int R = r / k;
        int i, j, ans = 0;
        l = l % k;
        r = r % k;
        if (L != R) {
            for (i = l; i < blocks[L].sz; i++) {
                if (blocks[L].a[i] + blocks[L].boost < x) {
                    ans++;
                }
            }
            for (i = 0; i <= r; i++) {
                if (blocks[R].a[i] + blocks[R].boost < x) {
                    ans++;
                }
            }
            for (i = L + 1; i < R; i++) {
                ans += query_block(blocks[i], x);
            }
        }
        else {
            for (i = l; i <= r; i++) {
                if (blocks[L].a[i] + blocks[L].boost < x) {
                    ans++;
                }
            }
        }
        return ans;
    }
    void update(int l, int r, int x) {
        int L = l / k;
        int R = r / k;
        int i, j;
        l %= k;
        r %= k;
        if (L != R) {
            for (i = l; i < blocks[L].sz; i++) {
                blocks[L].a[i] += x;
            }
            re_count(blocks[L]);
            for (i = 0; i <= r; i++) {
                blocks[R].a[i] += x;
            }
            re_count(blocks[R]);
            for (i = L + 1; i < R; i++) {
                blocks[i].boost += x;
            }
        }
        else {
            for (i = l; i <= r; i++) {
                blocks[L].a[i] += x;
            }
            re_count(blocks[L]);
        }
    }
    void WelcomeToHell(vector <int>& a) {
        //��� ����, � �� ������������, ������ � ...
        int i;
        for (i = 0; i < a.size(); i++) {
            blocks[i / k].a.push_back(a[i]);
            blocks[i / k].sz++;
        }
        for (i = 0; i < n; i++) {
            re_count(blocks[i]);
        }
    }
};

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, q, i, j, l, r, x, act;
        cin >> n >> q;
        vector <int> a(n);
        for (i = 0; i < n; i++) {
            cin >> a[i];
        }
        SqrtDec Q(n, 400);
        Q.WelcomeToHell(a);
        for (i = 0; i < q; i++) {
            cin >> act;
            cin >> l >> r >> x;
            if (act == 1) {
                cout << Q.query(l - 1, r - 1, x) << endl;
            }
            else {
                Q.update(l - 1, r - 1, x);
            }
        }
    }
}
//Deisgned by skimonoint fst = 0;