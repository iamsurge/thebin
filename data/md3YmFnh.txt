-- Define the building materials
local building_material = "minecraft:cobblestone"
local fuel = "minecraft:coal"

-- Check if the turtle has enough building materials and fuel
local building_material_count = turtle.getItemCount(building_material)
local fuel_count = turtle.getItemCount(fuel)
if building_material_count < 36 or fuel_count < 20 then
    print("Not enough materials or fuel! Building materials: " .. building_material_count .. ", Fuel: " .. fuel_count)
    return
end

-- Define the total number of steps
local total_steps = 4 * 9 + 9 * 9 -- 4 walls + ceiling
local current_step = 1

-- Build the walls
for i = 1, 4 do
    for j = 1, 9 do
        turtle.select(building_material)
        turtle.place()
        turtle.forward()
        print("Building wall " .. i .. ", step " .. current_step .. " of " .. total_steps .. ". ETA: " .. (total_steps - current_step) * 2 .. " seconds.")
        current_step = current_step + 1
    end
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    for j = 1, 9 do
        turtle.select(building_material)
        turtle.place()
        turtle.forward()
        print("Building wall " .. i .. ", step " .. current_step .. " of " .. total_steps .. ". ETA: " .. (total_steps - current_step) * 2 .. " seconds.")
        current_step = current_step + 1
    end
    turtle.turnRight()
end

-- Build the ceiling
for i = 1, 9 do
    for j = 1, 9 do
        turtle.select(building_material)
        turtle.placeUp()
        turtle.forward()
        print("Building ceiling, step " .. current_step .. " of " .. total_steps .. ". ETA: " .. (total_steps - current_step) * 2 .. " seconds.")
        current_step = current_step + 1
    end
    turtle.turnRight()
    turtle.forward()
    turtle.turnRight()
    for j = 1, 9 do
        turtle.select(building_material)
        turtle.placeUp()
        turtle.forward()
        print("Building ceiling, step " .. current_step .. " of " .. total_steps .. ". ETA: " .. (total_steps - current_step) * 2 .. " seconds.")
        current_step = current_step + 1
    end
    turtle.turnRight()
end
