using System;
using System.Diagnostics;
using System.Threading;

namespace competitive_programming
{
    class Program
    {
        public static void Main(string[] args)
        {
            {
                //ProcessDemo();
                ProcessAffinity();
                // PriorityClass();
                // ThreadDemo();
                // ThreadExceptionDemo(false);
                // ThreadExceptionDemo(true);
                //GlobalExceptionHandling();
            }
            //Process.Start("/System/Applications/AppStore.app/Contents/MacOS/AppStore");
        }

        private static void ProcessDemo()
        {
            var process = new Process
            {
                StartInfo = new ProcessStartInfo 
                {
                    FileName = @"/Applications/Figma.app/Contents/MacOS/Figma",
                    // Arguments = "1 2 3",
                    //WorkingDirectory = @"C:\AnotherDirectory",
                    RedirectStandardOutput = true,
                    // RedirectStandardInput = true,
                    // RedirectStandardError = true,
                    // StandardOutputEncoding = Encoding.UTF8,
                    // StandardInputEncoding = Encoding.UTF8,
                    // StandardErrorEncoding = Encoding.UTF8,
                }
            };

            process.Start();
            process.WaitForExit();
            Console.WriteLine("Output from another process:");
            Console.WriteLine(process.StandardOutput.ReadToEnd());
        }
        
        private static void ProcessAffinity()
        {
            Process.GetCurrentProcess().ProcessorAffinity = (IntPtr) (1 << 0 | 1 << 1);
            Console.WriteLine(Process.GetCurrentProcess().ProcessorAffinity);
            
        }
    }
}