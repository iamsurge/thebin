function varargout = ImgSeg(varargin)
% IMGSEG MATLAB code for ImgSeg.fig
%      IMGSEG, by itself, creates a new IMGSEG or raises the existing
%      singleton*.
%
%      H = IMGSEG returns the handle to a new IMGSEG or the handle to
%      the existing singleton*.
%
%      IMGSEG('CALLBACK',hObject,eventData,handles,...) calls the local
%      function named CALLBACK in IMGSEG.M with the given input arguments.
%
%      IMGSEG('Property','Value',...) creates a new IMGSEG or raises the
%      existing singleton*.  Starting from the left, property value pairs are
%      applied to the GUI before ImgSeg_OpeningFcn gets called.  An
%      unrecognized property name or invalid value makes property application
%      stop.  All inputs are passed to ImgSeg_OpeningFcn via varargin.
%
%      *See GUI Options on GUIDE's Tools menu.  Choose "GUI allows only one
%      instance to run (singleton)".
%
% See also: GUIDE, GUIDATA, GUIHANDLES
% Edit the above text to modify the response to help ImgSeg
% Last Modified by GUIDE v2.5 22-Dec-2022 14:48:17
% Begin initialization code - DO NOT EDIT
gui_Singleton = 1;
gui_State = struct('gui_Name',       mfilename, ...
                  'gui_Singleton',  gui_Singleton, ...
                  'gui_OpeningFcn', @ImgSeg_OpeningFcn, ...
                  'gui_OutputFcn',  @ImgSeg_OutputFcn, ...
                  'gui_LayoutFcn',  [] , ...
                  'gui_Callback',   []);
if nargin && ischar(varargin{1})
   gui_State.gui_Callback = str2func(varargin{1});
end
if nargout
   [varargout{1:nargout}] = gui_mainfcn(gui_State, varargin{:});
else
   gui_mainfcn(gui_State, varargin{:});
end
% End initialization code - DO NOT EDIT
% --- Executes just before ImgSeg is made visible.
function ImgSeg_OpeningFcn(hObject, eventdata, handles, varargin)
% This function has no output args, see OutputFcn.
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% varargin   command line arguments to ImgSeg (see VARARGIN)
% Choose default command line output for ImgSeg
handles.output = hObject;
% Update handles structure
guidata(hObject, handles);
% UIWAIT makes ImgSeg wait for user response (see UIRESUME)
% uiwait(handles.figure1);
% --- Outputs from this function are returned to the command line.
function varargout = ImgSeg_OutputFcn(hObject, eventdata, handles)
% varargout  cell array for returning output args (see VARARGOUT);
% hObject    handle to figure
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
% Get default command line output from handles structure
varargout{1} = handles.output;
% --- Executes on button press in Select_image.
function Select_image_Callback(hObject, eventdata, handles)
% hObject    handle to Select_image (see GCBO)
% eventdata  reserved - to be defined in a future version of MATLAB
% handles    structure with handles and user data (see GUIDATA)
[fileName, path] = uigetfile({'*.jpg','JPG Images';'*.jpeg', 'JPEG images';'*.png','PNG Images';'*.tif','TIF Images'},'Select an image');

if fileName == 0
   disp('User cancelled')
else
   i = imread(fullfile(path,fileName));
   j = rgb2gray(i);
  
   axes(handles.axes1)
   imshow(j)
   title('SOURCE IMAGE','color','black');
   axes(handles.axes2)
   imhist(j)
   title('SOURCE HISTOGRAM','color','black');

   %for i = 1 : size(j, 1)-2
       %for k = 1:size(j, 2)-2
           %gx = (1*j(i,k)+2*j(i, k+1)+1*j(i, k+2))-(1*j(i+2, k)+2*j(i+2, k+1)+1*j(i+2, k+2));
           %gy = (1*j(i,k)+2*j(i+1, k)+1*j(i+2, k))-(1*j(i, k+2)+2*j(i+1, k+2)+1*j(i+2, k+2));
           %filtered_image(i ,k) = sqrt(gx.^2 + gy.^2);
       %end
   %end
   %Edge detection using sobel
   % 2 mask 3*3
   h=fspecial('sobel');
   filtered_image = imfilter(j,h);
   axes(handles.axes3)
   imshow(filtered_image);
   title('SEGMENTED IMAGE BY SOBEL','color','black');
   %8 mask 3*3
   %Edge detection using prewitt
    k=fspecial('prewitt');
   filtered=imfilter(j,k);
   axes(handles.axes4)
   imshow(filtered);
   title('SEGMENTED IMAGE BY PREWITT','color','black');
   %Edge detection using LAPLACIAN OF GAUSSIAN
   n=fspecial('log');
   filtered_im=imfilter(j,n);
   axes(handles.axes5)
   imshow(filtered_im);
   title('LAPLACIAN OF GAUSSIAN','color','black');
   %Adding noise to the image
   iNoisy = imnoise(j, 'salt & pepper', 0.1);
   axes(handles.axes6)
   imshow(iNoisy);
   title('NOISY IMAGE','color','black');
   %Noise reduction using median filter
   filteredImage = medfilt2(iNoisy);
   axes(handles.axes7)
   imshow(filteredImage)
   title('NOISE REDUCTION','color','black');
  
  
 
end   

