from tkinter import *
import  json, os
from tkinter.ttk import Combobox  # импортируем только то что надо
from tkinter import messagebox
from tkinter.ttk import *
from PIL import ImageTk, Image
class CheckButton:
  def __init__(self, master, title):
    self.var = BooleanVar()
    # self.var.set(0)
    # self.title = title
    self.cb = Checkbutton(
      master, text=title, variable=self.var,
      onvalue=1, offvalue=0)
    self.cb.pack(side=LEFT)
def start(event):
    pass
def change_color(event, l1):
 pass
 # l1.destroy()
 # l1 = Label(root, background="#06c", text=name_game, width=25, relief=GROOVE)
 # l1.grid(column=0, row=0, padx=35, pady=5, sticky=NW)  # текстовое поле и кнопка для добавления в список.


def checkbutton_changed(event, var_list, count, name_games, labels, y):

 if var_list[count].get() == False:
     print("on")
     labels[count].destroy()
     labels[count]= Label(root, background="#06c", text=name_games[count], width=25, relief=GROOVE)
     labels[count].grid(column=0, row=0, padx=35, pady=y, sticky=NW)  # текстовое поле и кнопка для добавления в список
 else:
    print("off")
    labels[count].destroy()
    labels[count] = Label(root, background="white", text=name_games[count], width=25, relief=GROOVE)
    labels[count].grid(column=0, row=0, padx=35, pady=y, sticky=NW)  # текстовое поле и кнопка для добавления в список
def start(root):
 name_games=[]
 l=[]
 var_list=[]
 data = "settings.json"  # файл настроек.
 if os.path.exists(data):  # есть ли этот файл.
  with open(data) as json_file:
   res = json.load(json_file)
   d=res["games_checkmark"]
   for count, i in enumerate(d,1):  # print(count) print(i)  print(y)
    name_game = StringVar()
    name_game=i
    name_games.append(name_game)
    l.append(Label(root, background="white", text=name_games[count-1],width=25, relief =GROOVE))
    y=count*22
    l[count-1].grid(column=0, row=0, padx=35, pady=y, sticky=NW)  # текстовое поле и кнопка для добавления в список
    var_list.append(BooleanVar())
    cb = Checkbutton(root, variable=var_list[count-1],
                     onvalue=1, offvalue=0, state=ACTIVE)
    cb.bind("<Button-1>", lambda event, agr=var_list, agr1=count-1, agr2=name_games, agr3=l, agr4=y :
    checkbutton_changed(event, agr, agr1, agr2, agr3, agr4))
    cb.grid(column=0, row=0, padx=10, pady=y, sticky=NW)
 else:
 	pass
root = Tk()
f1 = Frame()
root.title("Delete profile")  # заголовок
root.geometry("500x197+750+400")  # Первые 2 определяют ширину высоту. Пос 2 x и y координаты на экране.
root.configure(bg='DimGray')  # Цвет фона окна
f1.grid(column=0, row=0, padx=10, pady=10)

container = Frame(root)
canvas = Canvas(container,width=400, height=140)
img =  Image.open("icon.png")
photo =  ImageTk.PhotoImage(img)
root.iconphoto(False, photo)


canvas.create_window((0, 0), window=f1, anchor="n")
scrollbar = Scrollbar(container, orient="vertical", command=canvas.yview)
scrollable_frame = Frame(canvas)
scrollable_frame.bind( "<Configure>",
    lambda e: canvas.configure( scrollregion=canvas.bbox("all")
    ))
canvas.configure(yscrollcommand=scrollbar.set)
scrollbar.grid(column=0, row=0,sticky=N+S+E)# полоса прокрутки.
container.grid()
canvas.grid(sticky=N+W)
scrollbar.grid(column=0, row=0,sticky=N+S+E)# полоса прокрутки.

add_button = Button(text=" Пуск", command= lambda:start1())\
    .grid(column=1, row=0, padx=10, pady=0,sticky=SE)

start(root)
root.mainloop()