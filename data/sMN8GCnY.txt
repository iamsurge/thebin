<?php

namespace App\Imports;

use App\Models\MasterTier1Model;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Carbon\Carbon;
use App\Models\SettingTier1Model;
use Illuminate\Support\Facades\Log;
use App\Models\MasterDataModel;
use Illuminate\Contracts\Queue\ShouldQueue;
use Maatwebsite\Excel\Concerns\WithChunkReading;
use Maatwebsite\Excel\Concerns\WithValidation;
use DB;
use App\Models\MasterTier2Model;
use App\Models\ProdukModel;
use App\Models\DataTempModel;

class GoodTier2Import implements ToModel, WithHeadingRow, WithValidation
{
    private $supplierId, $supplierFrom, $uploadProses;

    public function __construct($supplierId ,$supplierFrom, $uploadProses) {
        $this->supplierId = $supplierId;
        $this->supplierFrom = $supplierFrom;
        $this->uploadProses = $uploadProses;
    }

    public function model(array $rows)
    {
        // $dateNow = Carbon::now()->format('Y-m-d');
        // Log::debug($rows);
        // $setting = $this->isSettingTier1($rows['pno']);
        
        // if($setting['exists']) {

        //     $dataSetting = $setting['data'];

        //     if($this->supplierId == $dataSetting->supplier_tier_1) {

        //         if($dataSetting->status_tier_1 == _YES && $dataSetting->status_approval == _FINISH && $dateNow >= $dataSetting->active_date) {

                    // $masterData = MasterDataModel::where('master_data_pno', $rows['pno'])->where('master_data_matrix', $rows['matrix_code'])->first();
                    // $masterData->flg_tier2 = _YES;
                    // $masterData->flg_tier1 = _NO;
                    // $masterData->updated_at = Carbon::now();
                    // $masterData->update();

                //     $masterData = DB::table('master_data')
                //                 ->where('master_data_pno', $rows['pno'])
                //                 ->where('master_data_matrix', $rows['matrix_code'])
                //                 ->update([
                //                     'flg_tier2' => _YES,
                //                     'flg_tier1' => _NO,
                //                     'updated_at' => Carbon::now()
                //                 ]);
                // }else {
                    // Log::debug("line58");
                    // $masterData = MasterDataModel::where('master_data_pno', $rows['pno'])->where('master_data_matrix', $rows['matrix_code'])->first();
                    // $masterData->flg_tier2 = _YES;
                    // $masterData->flg_tier1 = _YES;
                    // $masterData->updated_at = Carbon::now();
                    // $masterData->update();

                    // $masterData = DB::table('master_data')
                    //             ->where('master_data_pno', $rows['pno'])
                    //             ->where('master_data_matrix', $rows['matrix_code'])
                    //             ->update([
                    //                 'flg_tier2' => _YES,
                    //                 'flg_tier1' => _YES,
                    //                 'updated_at' => Carbon::now()
                    //             ]);
                                // Log::debug("line73");
        //         }
        //     }
        // }else {
            // Log::debug("line76");
            // $masterData = MasterDataModel::where('master_data_pno', $rows['pno'])->where('master_data_matrix', $rows['matrix_code'])->first();
            // $masterData->flg_tier2 = _YES;
            // $masterData->flg_tier1 = _YES;
            // $masterData->updated_at = Carbon::now();
            // $masterData->update();

            // $masterData = DB::table('master_data')
            //                 ->where('master_data_pno', $rows['pno'])
            //                 ->where('master_data_matrix', $rows['matrix_code'])
            //                 ->update([
            //                     'flg_tier2' => _YES,
            //                     'flg_tier1' => _YES,
            //                     'updated_at' => Carbon::now()
            //                 ]);
                            // Log::debug("line92");
        // }

        // MasterTier1Model::create([
        //     'master_tier1_pno'      => $rows['pno'],
        //     'master_tier1_matrix'   => $rows['matrix_code'],
        //     'supplier_id'           => $this->supplierId,
        //     'flg_good'              => _EMPTY_STRING,
        //     'flg_scan'              => _NO,
        //     'created_at'            => Carbon::now(),
        // ]);
        
        // $masterTier2 = MasterTier2Model::where('master_tier2_pno', $rows['pno'])
        //                 ->where('master_tier2_matrix', $rows['matrix_code'])
        //                 ->first();
        
        // $masterTier2 = DB::table('master_tier2')
        //             ->where('master_tier2_pno', $rows['pno'])
        //             ->where('master_tier2_matrix', $rows['matrix_code'])
        //             ->update([
        //                 'flg_good' => _YES,
        //                 'flg_scan' => _YES,
        //                 'master_tier2_date' => $dateNow,
        //                 'updated_at' => Carbon::now()
        //             ]);
                    // Log::debug("line117");
        // return $masterTier2;

        return new DataTempModel([
            'upload_proses'      => $this->uploadProses,
            'supplier_id'   => $this->supplierId,
            'pno'           => $rows['pno'],
            'matrix_code'              => $rows['matrix_code'],
        ]);


    }

    private function isSettingTier1($pno) {

        $tier1 = DB::table('setting_tier_1')
                ->where('produk_pno', $pno)
                ->first();
        
        // $tier1 = SettingTier1Model::where('produk_pno', $pno)->first();

        $output = [
          "exists" => false,
          "data" => ''
        ];
  
        if (!is_null($tier1)) {
              $output = [
                "exists" => true,
                "data" => $tier1,
              ];
          }
  
        return $output;
    }

    public function rules(): array
    {
        
        return [
            'matrix_code' => [
                '1' => 'required',
                '2' => function($attribute, $value, $onFailure) {

                        $dataTier1 = DB::table('master_tier1')
                            ->where('master_tier1_matrix', $value)
                            ->first();
                        // $dataTier1 = MasterTier1Model::where('master_tier1_matrix', $value)->first();

                        if(!is_null($dataTier1)) {
                            $message = 'matrix_code must be unique';
                            $onFailure($message);
                        }
                    },
                '3' => function($attribute, $value, $onFailure) {

                        $dataTier2 = DB::table('master_tier2')
                                    ->where('master_tier2_matrix', $value)
                                    ->where('supplier_id', $this->supplierFrom)
                                    ->first();
                        // $dataTier2 = MasterTier2Model::where('master_tier2_matrix', $value)->first();

                        if(is_null($dataTier2)) {
                            $message = 'Matrix '.$value.' not found in master tier 2';
                            $onFailure($message);
                        }
                    },
            ],
            'pno' => [
                '1' => 'required',
                '2' => function($attribute, $value, $onFailure) {
                    $produk = DB::table('m_produk')
                            ->where('produk_pno', $value)
                            ->first();

                    $dataTier2 = DB::table('master_tier2')
                            ->where('master_tier2_pno', $value)
                            ->where('supplier_id', $this->supplierFrom)
                            ->first();

                    // $produk = ProdukModel::where("produk_pno", $value)->first();
                    // $dataTier2 = MasterTier2Model::where('master_tier2_pno', $value)->first();

                    if(is_null($produk)) {
                        $message = 'Pno '.$value.' not found in master produk';
                        $onFailure($message);
                    }

                    if(is_null($dataTier2)) {
                        $message = 'Pno '.$value.' not found in master tier 2';
                        $onFailure($message);
                    }
              },
            ],
        ];
    }

    public function customValidationMessages() {

        return [
            'matrix_code.required' => 'matrix code not found',
            'pno.required' => 'pno not found',
        ];
    }
}
