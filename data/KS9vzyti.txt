// Клиент
class Program
{
    static void Main(string[] args)
    {
        var developer = new Developer();
        var tester = new Tester();
        var marketer = new Marketer();
 
        var commands = new List<ICommand> 
        {
            new CodeCommand(developer),
            new TestCommand(tester),
            new AdvertizeCommand(marketer)
        };
        
        var manager = new Manager();
        manager.SetCommand(new MacroCommand(commands));
        manager.StartProject();
        manager.StopProject();
         
        Console.Read();
    }
}

// Интерфейс для реализации команд
interface ICommand
{
    void Execute();
    void Undo();
}

// Класс отправителя (инвокера) - Менеджер (ему сопостоавляется Макрокоманда)
class Manager
{
    private ICommand _command;
    public void SetCommand(ICommand command) => 
        _command = command;

    public void StartProject()
    {
        if (_command is not null)
            _command.Execute();
    }
    public void StopProject()
    {
        if (_command is not null)
            _command.Undo();
    }
}

// Класс команды - макрокоманда, которая управляет другими командами
class MacroCommand : ICommand
{
    private readonly List<ICommand> _commands;
    public MacroCommand(List<ICommand> commands) => 
        _commands = commands;

    public void Execute()
    {
        foreach(ICommand c in _commands)
            c.Execute();
    }
 
    public void Undo()
    {
        foreach (ICommand c in _commands)
            c.Undo();
    }
}

// Класс получателя - девелопер
class Developer
{
    public void StartCoding() => 
        Console.WriteLine("Программист начинает писать код");

    public void StopCoding() => 
        Console.WriteLine("Программист завершает писать код");
}
 
// Класс получателя - тестировщик
class Tester
{
    public void StartTest() =>
        Console.WriteLine("Тестировщик начинает тестирование");

    public void StopTest() =>
        Console.WriteLine("Тестировщик завершает тестирование");
}
 
// Класс получателя - маркетолог
class Marketer
{
    public void StartAdvertize() => 
        Console.WriteLine("Маркетолог начинает рекламировать продукт");

    public void StopAdvertize() => 
        Console.WriteLine("Маркетолог прекращает рекламную кампанию");
}

// класс конкретной команды - Кодинг (сопоставляется с Девом)
class CodeCommand : ICommand
{
    private readonly Developer _developer;
    public CodeCommand(Developer developer) => 
        _developer = developer;

    public void Execute() => 
        _developer.StartCoding();

    public void Undo() => 
        _developer.StopCoding();
}

// класс конкретной команды - Тестинг (сопоставляется с Тестером)
class TestCommand : ICommand
{
    private readonly Tester _tester;
    public TestCommand(Tester tester) => 
        _tester = tester;

    public void Execute() => 
        _tester.StartTest();

    public void Undo() => 
        _tester.StopTest();
}
 
// класс конкретной команды - Рекламирование (сопоставляется с Маркетологом)
class AdvertizeCommand : ICommand
{
    private readonly Marketer _marketer;
    public AdvertizeCommand(Marketer marketer) => 
        _marketer = marketer;

    public void Execute() => 
        _marketer.StartAdvertize();

    public void Undo() => 
        _marketer.StopAdvertize();
}