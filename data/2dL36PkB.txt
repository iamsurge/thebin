Uses Crt;

type
  Actors = Record
    ID_A: word;
    Name_A: string[18];
    Fam_A: string[18];
    DofB: string[8];
    Roles: byte; {1 - главная, 2 - второстепенная, 3 - массовка}
    Gender: boolean;
  end;
  
  Films = Record
    ID_F: word;
    ID_A: word;
    Name_F: string[20];
    Duration: string[6];
    Date: string[8];
  end;

var
  FV1: file of Actors;
  ActorsBP: Actors;
  
  FV2: file of Films;
  FilmsBP: Films;
  
  temp: longword;
  DelID: array of word;

const
  ActorsName = 'Actors.uwu';
  FilmsName = 'Films.uwu';
  BackupActors = 'BackupA.uwu';
  Yes = 'YyУу';
  No = 'NnНн';

procedure Open;
begin
  Assign(FV1, ActorsName);
  Assign(FV2, FilmsName);
  
  if not FileExists(ActorsName) then ReWrite(FV1)
  else ReSet(FV1);
  
  if not FileExists(FilmsName) then ReWrite(FV2)
  else ReSet(FV2);
end;

procedure Close;
begin
  Close(FV1);
  Close(FV2);
end;

procedure AddActors;
var
  input: string;
  role: integer;
begin
  begin
    if (FileSize(FV1) > 0) then
    
    begin
      Seek(FV1, FileSize(FV1) - 1);
      Read(FV1, ActorsBP);
      ActorsBP.ID_A := ActorsBP.ID_A + 1;
    end
    else ActorsBP.ID_A := 0;
    
    repeat
      Write('Имя актера: ');
      Readln(input);
    until (input.Length <= 18) and (input <> ''.ToString());
    ActorsBP.Name_A := input;
    
    repeat
      Write('Фамилия актера: ');
      Readln(input);
    until (input.Length <= 18) and (input <> ''.ToString());
    ActorsBP.Fam_A := input;
    
    repeat
      Write('Дата рождения: ');
      Readln(input);
      input.Replace('.', '')
    until (input.Length = 8) and longword.TryParse(input, temp);
    ActorsBP.DofB := input;
    
    repeat
      Write('Роль (1 - главная; 2 - второстепенная; 3 - массовка) : ');
      Readln(input);
      TryStrToInt(input, role);
    until (input.Length = 1) and (input <> ''.ToString()) and (role > 0) and (role < 4); {нужно сравнить, равен ли инпут 1/2/3}
    ActorsBP.Roles := role;
    
    repeat
      Write('Пол мужской? (Y of N) : ');
      Readln(input);
    until (Yes.Contains(input)) or (No.Contains(input));
    ActorsBP.Gender := Yes.Contains(input) ? true : false;
    
    
  end;
  Write(FV1, ActorsBP);
end;

procedure AddFilms;
begin
  var input: string;
  begin
    if FileSize(FV2) > 0 then
    begin
      Seek(FV2, FileSize(FV2) - 1);
      Read(FV2, FilmsBP);
      FilmsBP.ID_F := FilmsBP.ID_F + 1;
    end
    else FilmsBP.ID_F := 0;
    
    repeat
      Write('Название фильма: ');
      Readln(input);
    until (input.Length <= 20) and (input <> ''.ToString());
    FilmsBP.Name_F := input;
    
    repeat
      Write('Продолжительность: ');
      Readln(input);
      input.Replace(':', '')
    until (input.Length = 6) and longword.TryParse(input, temp);
    FilmsBP.Duration := input;
    
    repeat
      Write('Дата выхода: ');
      Readln(input);
      input.Replace('.', '')
    until (input.Length = 8) and longword.TryParse(input, temp);
    FilmsBP.Date := input;
  end;
  Write(FV2, FilmsBP);
end;

procedure ListActors;
begin
  Seek(FV1, 0);
  while not Eof(FV1) do
  begin
    Read(FV1, ActorsBP);
    var Role: string;
    var Gender: string;
    
    if ActorsBP.Gender = True then
      Gender := 'мужской'
    else 
      Gender := 'женский';
    
    case ActorsBP.Roles of
      1: Role := 'главная';
      2: Role := 'второстепенная';
      3: Role := 'массовка';
    end;
    WriteLn(' ID: ' + ActorsBP.ID_A + '  |   Имя: ' + ActorsBP.Name_A + '  |  Фамилия: ' + ActorsBP.Fam_A + '  |  Дата рождения: ' + ActorsBP.DofB + '  |  Пол: ' + Gender + '  |  Роль: ' + Role);
  end;
end;

procedure ListFilms;
begin
  Seek(FV2, 0);
  while not Eof(FV2) do
  begin
    Read(FV2, FilmsBP);
    WriteLn(' ID: ' + FilmsBP.ID_F + '  |   Название: ' + FilmsBP.Name_F + '  |   Продолжительность: ' + FilmsBP.Duration + '  |   Дата выхода: ' + FilmsBP.Date);
  end;
end;

function SearchByID(ID: word; var FoundActor: Actors): boolean;
begin
  result := False;
  Seek(FV1, 0); //указатель на 0 запись
  while (not Eof(FV1)) and (not result) do //пока это не конец файла и не тру 
  begin
    Read(FV1, ActorsBP); //берем по 1 записи из fv1 в акторсбп
    if ID = ActorsBP.ID_A then //если введенный id имеется в какой-либо записи
    begin
      FoundActor := ActorsBP; //присваиваем фа эту запись
      result := True; {что возвращает функция, T or F} //и возвращаем тру
    end;
  end;
end;

procedure Delete;{маркирует записи}
var
  input: string;
  ID: word;

begin
  repeat
    Write('Введите ID записи, которую хотите удалить: ');
    ReadLn(input);
  until (word.TryParse(input, ID)); {инпут конверт. в word и присваиваем это значение ID // true or false возвращает в until}
  if SearchByID(ID, ActorsBP) then 
  begin
     SetLength(DelID, DelID.Length +1); //увеличиваем длину массива
     DelID[DelID.Length - 1] := ID;
     WriteLn('Запись выделена для удаления ');
     foreach var i in DelID do
     begin
      WriteLn(i.ToString());
     end;
  end
  else 
    WriteLn('Не нашелся актер ');
end;

procedure Zap;{удаляет записи}
var FV3: file of Actors;
begin
  Assign(FV3, BackupActors);
  ReWrite(FV3);
  Seek(FV1,0);
  while not Eof(FV1) do
  begin
    Read(FV1, ActorsBP);
    if (DelID <> nil) and (not DelID.Contains(ActorsBP.ID_A)) then
      Write(FV3, ActorsBP);
  end;
  Close(FV1);
  Erase(FV1);
  Close(FV3);
  Rename(FV3, ActorsName);
  ReSet(FV1);
  DelID := nil; //new word[1];
end;

procedure Menu;
var
  input: string;
begin
  while input <> '1' do
  begin
    Write('Введите "help" для списка команд. Введите команду: ');
    ReadLn(input);
    case input of
      'help':
        WriteLn('1 - выйти' + NewLine + '2 - добавить данные в таблицу актеров'
                    + NewLine + '3 - вывести таблицу актеров' + NewLine + '4 - добавить данные в таблицу фильмов' + NewLine + '5 - вывести таблицу фильмов' + NewLine + '6 - удалить1' + NewLine + '7 - удалить2');
      '2': AddActors;
      '3': ListActors;
      '4': AddFilms;
      '5': ListFilms;
      '6': Delete;
      '7': Zap; 
      //'8': SearchByName (поиск по имени)
      //'9': Edit (изменение)
    end;
  end;
  
end;

begin
  Open;
  Menu;
  Close;
end.