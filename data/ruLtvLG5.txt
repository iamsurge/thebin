bool ProcessClientItemsXMLFiles()
{
	if (!AionInfoDB.IsOpen())
		OpenAionInfoDB();

	AionInfoDB_Updater_mutex.lock();
	printf("AionInfoDB:: - Adding ClientItems...   [ This may take some time ]");

	if (!DoDataFilesExist(DATAFILE_CLIENTITEMS))
	{
		AionInfoDB_Updater_mutex.unlock();
		ExtractDataFilesFromClient(DATAFILE_CLIENTITEMS);
		AionInfoDB_Updater_mutex.lock();
	}
	
	// Process Each ClientItems file.  The called function will unlock the mutex before returning on a 'false' return
	if (!ProcessIndividualClientItemsFile("Aion_ClientItems_armor.xml"))
		return false;
	if (!ProcessIndividualClientItemsFile("Aion_ClientItems_etc.xml"))
		return false;
	if (!ProcessIndividualClientItemsFile("Aion_ClientItems_misc.xml"))
		return false;

	printf("AionInfoDB:: - Finished with ClientItems.");
	AionInfoDB_Updater_mutex.unlock();
	return true;
}


void InitializeClientItemsMap()
{
	mClientItemsFields["id"] = ClientItems__id;
	mClientItemsFields["name"] = ClientItems__name;
	mClientItemsFields["desc"] = ClientItems__desc;
	mClientItemsFields["desc_long"] = ClientItems__desc_long;
	mClientItemsFields["item_type"] = ClientItems__item_type;
	mClientItemsFields["icon_name"] = ClientItems__icon_name;
	mClientItemsFields["desc_long"] = ClientItems__desc_long;
	mClientItemsFields["equipment_slots"] = ClientItems__equipment_slots;
	mClientItemsFields["quality"] = ClientItems__quality;
	mClientItemsFields["lore"] = ClientItems__lore;
	mClientItemsFields["can_exchange"] = ClientItems__can_exchange;
	mClientItemsFields["can_sell_to_npc"] = ClientItems__can_sell_to_npc;
	mClientItemsFields["can_deposit_to_character_warehouse"] = ClientItems__can_deposit_to_character_warehouse;
	mClientItemsFields["can_deposit_to_account_warehouse"] = ClientItems__can_deposit_to_account_warehouse;
	mClientItemsFields["can_deposit_to_guild_warehouse"] = ClientItems__can_deposit_to_guild_warehouse;
	mClientItemsFields["breakable"] = ClientItems__breakable;
	mClientItemsFields["soul_bind"] = ClientItems__soul_bind;
	mClientItemsFields["remove_when_logout"] = ClientItems__remove_when_logout;
	mClientItemsFields["gender_permitted"] = ClientItems__gender_permitted;
	mClientItemsFields["bonus_apply"] = ClientItems__bonus_apply;
	mClientItemsFields["no_enchant"] = ClientItems__no_enchant;
	mClientItemsFields["ui_sound_type"] = ClientItems__ui_sound_type;
	mClientItemsFields["can_split"] = ClientItems__can_split;
	mClientItemsFields["item_drop_permitted"] = ClientItems__item_drop_permitted;
	mClientItemsFields["can_ap_extraction"] = ClientItems__can_ap_extraction;
	mClientItemsFields["mesh"] = ClientItems__mesh;
	mClientItemsFields["race_permitted"] = ClientItems__race_permitted;
	mClientItemsFields["motion_name"] = ClientItems__motion_name;
	mClientItemsFields["craft_recipe_info"] = ClientItems__craft_recipe_info;
	mClientItemsFields["activation_mode"] = ClientItems__activation_mode;
	mClientItemsFields["activate_target"] = ClientItems__activate_target;
	mClientItemsFields["confirm_to_delete_cash_item"] = ClientItems__confirm_to_delete_cash_item;
	mClientItemsFields["ride_data_name"] = ClientItems__ride_data_name;
	mClientItemsFields["bonus_attr1"] = ClientItems__bonus_attr1;
	mClientItemsFields["bonus_attr2"] = ClientItems__bonus_attr2;
	mClientItemsFields["bonus_attr3"] = ClientItems__bonus_attr3;
	mClientItemsFields["bonus_attr4"] = ClientItems__bonus_attr4;
	mClientItemsFields["bonus_attr5"] = ClientItems__bonus_attr5;
	mClientItemsFields["bonus_attr6"] = ClientItems__bonus_attr6;
	mClientItemsFields["bonus_attr7"] = ClientItems__bonus_attr7;
	mClientItemsFields["bonus_attr8"] = ClientItems__bonus_attr8;
	mClientItemsFields["bonus_attr9"] = ClientItems__bonus_attr9;
	mClientItemsFields["bonus_attr10"] = ClientItems__bonus_attr10;
	mClientItemsFields["bonus_attr11"] = ClientItems__bonus_attr11;
	mClientItemsFields["bonus_attr12"] = ClientItems__bonus_attr12;
	mClientItemsFields["material"] = ClientItems__material;
	mClientItemsFields["disposable_trade_item"] = ClientItems__disposable_trade_item;
	mClientItemsFields["abyss_item"] = ClientItems__abyss_item;
	mClientItemsFields["attack_type"] = ClientItems__attack_type;
	mClientItemsFields["price"] = ClientItems__price;
	mClientItemsFields["max_stack_count"] = ClientItems__max_stack_count;
	mClientItemsFields["dodge"] = ClientItems__dodge;
	mClientItemsFields["level"] = ClientItems__level;
	mClientItemsFields["magical_resist"] = ClientItems__magical_resist;
	mClientItemsFields["physical_defend"] = ClientItems__physical_defend;
	mClientItemsFields["warrior"] = ClientItems__warrior;
	mClientItemsFields["scout"] = ClientItems__scout;
	mClientItemsFields["mage"] = ClientItems__mage;
	mClientItemsFields["cleric"] = ClientItems__cleric;
	mClientItemsFields["fighter"] = ClientItems__fighter;
	mClientItemsFields["knight"] = ClientItems__knight;
	mClientItemsFields["assassin"] = ClientItems__assassin;
	mClientItemsFields["ranger"] = ClientItems__ranger;
	mClientItemsFields["wizard"] = ClientItems__wizard;
	mClientItemsFields["elementalist"] = ClientItems__elementalist;
	mClientItemsFields["chanter"] = ClientItems__chanter;
	mClientItemsFields["priest"] = ClientItems__priest;
	mClientItemsFields["option_slot_value"] = ClientItems__option_slot_value;
	mClientItemsFields["special_slot_value"] = ClientItems__special_slot_value;
	mClientItemsFields["option_slot_bonus"] = ClientItems__option_slot_bonus;
	mClientItemsFields["max_enchant_value"] = ClientItems__max_enchant_value;
	mClientItemsFields["cannot_changeskin"] = ClientItems__cannot_changeskin;
	mClientItemsFields["cash_item"] = ClientItems__cash_item;
	mClientItemsFields["mesh_change"] = ClientItems__mesh_change;
	mClientItemsFields["can_dye"] = ClientItems__can_dye;
	mClientItemsFields["expire_time"] = ClientItems__expire_time;
	mClientItemsFields["cash_available_minute"] = ClientItems__cash_available_minute;
	mClientItemsFields["disassembly_item"] = ClientItems__disassembly_item;
	mClientItemsFields["quest"] = ClientItems__quest;
	mClientItemsFields["activation_count"] = ClientItems__activation_count;
	mClientItemsFields["breakdown"] = ClientItems__breakdown;
	mClientItemsFields["use_delay_type_id"] = ClientItems__use_delay_type_id;
	mClientItemsFields["use_delay"] = ClientItems__use_delay;
	mClientItemsFields["casting_delay"] = ClientItems__casting_delay;
	mClientItemsFields["warrior_max"] = ClientItems__warrior_max;
	mClientItemsFields["scout_max"] = ClientItems__scout_max;
	mClientItemsFields["mage_max"] = ClientItems__mage_max;
	mClientItemsFields["cleric_max"] = ClientItems__cleric_max;
	mClientItemsFields["fighter_max"] = ClientItems__fighter_max;
	mClientItemsFields["knight_max"] = ClientItems__knight_max;
	mClientItemsFields["assassin_max"] = ClientItems__assassin_max;
	mClientItemsFields["ranger_max"] = ClientItems__ranger_max;
	mClientItemsFields["wizard_max"] = ClientItems__wizard_max;
	mClientItemsFields["elementalist_max"] = ClientItems__elementalist_max;
	mClientItemsFields["chanter_max"] = ClientItems__chanter_max;
	mClientItemsFields["priest_max"] = ClientItems__priest_max;
	mClientItemsFields["min_damage"] = ClientItems__min_damage;
	mClientItemsFields["max_damage"] = ClientItems__max_damage;
	mClientItemsFields["str"] = ClientItems__str;
	mClientItemsFields["agi"] = ClientItems__agi;
	mClientItemsFields["kno"] = ClientItems__kno;
	mClientItemsFields["hit_accuracy"] = ClientItems__hit_accuracy;
	mClientItemsFields["critical"] = ClientItems__critical;
	mClientItemsFields["parry"] = ClientItems__parry;
	mClientItemsFields["magical_skill_boost"] = ClientItems__magical_skill_boost;
	mClientItemsFields["magical_skill_boost_resist"] = ClientItems__magical_skill_boost_resist;
	mClientItemsFields["magical_hit_accuracy"] = ClientItems__magical_hit_accuracy;
	mClientItemsFields["attack_delay"] = ClientItems__attack_delay;
	mClientItemsFields["hit_count"] = ClientItems__hit_count;
	mClientItemsFields["dmg_decal"] = ClientItems__dmg_decal;
	mClientItemsFields["disposable_trade_item_count"] = ClientItems__disposable_trade_item_count;
	mClientItemsFields["abyss_item_count"] = ClientItems__abyss_item_count;
	mClientItemsFields["abyss_point"] = ClientItems__abyss_point;
	mClientItemsFields["quest_label"] = ClientItems__quest_label;
	mClientItemsFields["extra_inventory"] = ClientItems__extra_inventory;
	mClientItemsFields["cash_social"] = ClientItems__cash_social;
	mClientItemsFields["attack_gap"] = ClientItems__attack_gap;
	mClientItemsFields["attack_range"] = ClientItems__attack_range;
	mClientItemsFields["extra_currency_item"] = ClientItems__extra_currency_item;
	mClientItemsFields["extra_currency_item_count"] = ClientItems__extra_currency_item_count;
	mClientItemsFields["tag"] = ClientItems__tag;
	mClientItemsFields["bonus_addexp_item"] = ClientItems__bonus_addexp_item;
	mClientItemsFields["default_color_m"] = ClientItems__default_color_m;
	mClientItemsFields["default_color_f"] = ClientItems__default_color_f;
}


bool ProcessIndividualClientItemsFile(std::string FileName)
{
	printf("AionInfoDB:: -- Processing: %s",FileName.c_str());

	CppSQLite3Buffer bufSQL;
	TiXmlNode* node = 0;
	TiXmlElement* element = 0;
	char buf[MAX_STRING] = {0};
	strcpy(buf,GetDecloakedString(XSTR_TO_CLIENTDATADIR));

	char ClientItemsXMLFileName[MAX_PATH];				sprintf(ClientItemsXMLFileName,buf,ModulePath,FileName.c_str());


	#pragma region Declare Variables
	int id;						string name;					string desc;					string desc_long;					string item_type;     
	string icon_name;			string equipment_slots;			string quality;					string lore;						string can_exchange;     
	string can_sell_to_npc;		string can_deposit_to_character_warehouse;						string can_deposit_to_account_warehouse;    
	string can_deposit_to_guild_warehouse;						string breakable;				string soul_bind;					string remove_when_logout;     
	string gender_permitted;    string bonus_apply;				string no_enchant;				string ui_sound_type;				string can_split;     
	string item_drop_permitted;	string can_ap_extraction;		string mesh;					string race_permitted;				string motion_name;    
	string craft_recipe_info;	string activation_mode;			string activate_target;			string activation_skill;			string confirm_to_delete_cash_item;     
	string ride_data_name;		string bonus_attr1;				string bonus_attr2;				string bonus_attr3;					string bonus_attr4;     
	string bonus_attr5;			string bonus_attr6;				string bonus_attr7;				string bonus_attr8;					string bonus_attr9;     
	string bonus_attr10;		string bonus_attr11;			string bonus_attr12;			string material;					string disposable_trade_item;    
	string abyss_item;			string attack_type;
	int price;					int max_stack_count;			int dodge;						int level;							int magical_resist; 
	int physical_defend;		int warrior;					int scout;						int mage;							int cleric;  
	int fighter;				int knight;						int assassin;					int ranger;							int wizard; 
	int elementalist;			int chanter;					int priest;						int option_slot_value;				int special_slot_value;  
	int option_slot_bonus;		int max_enchant_value;			int cannot_changeskin;			int cash_item;						int mesh_change;  
	int can_dye;				int cash_social;				int expire_time;				int cash_available_minute;			int disassembly_item;        
	int quest;					int activation_count;			int breakdown;					int use_delay_type_id;				int use_delay;  
	int casting_delay;			int warrior_max;				int scout_max;					int mage_max;						int cleric_max;  
	int fighter_max;			int knight_max;					int assassin_max;				int ranger_max;						int wizard_max;  
	int elementalist_max;		int chanter_max;				int priest_max;					int min_damage;						int max_damage;  
	int str;					int agi;						int kno;						int hit_accuracy;					int critical; 
	int parry;					int magical_skill_boost;		int magical_skill_boost_resist; int magical_hit_accuracy;			int attack_delay;  
	int hit_count;				int dmg_decal;					int disposable_trade_item_count; int abyss_item_count;				int abyss_point;  
	int quest_label;			int extra_inventory;	
	float attack_gap;			float attack_range;				string extra_currency_item;		int extra_currency_item_count;		string tag;
	string bonus_addexp_item;	string default_color_m;			string default_color_f;
	#pragma endregion

	TiXmlDocument doc(ClientItemsXMLFileName);
	bool loadOkay = doc.LoadFile();
	if ( !loadOkay )
	{
		printf( GetDecloakedString(XSTR_PROCESSGDATAXMLFILE_ERROR_1), ClientItemsXMLFileName, doc.ErrorDesc() );
		AionInfoDB_Updater_mutex.unlock();
		return false;
	}

	try 
	{
		AionInfoDB.execDML( "BEGIN TRANSACTION;" );
	}
	catch (CppSQLite3Exception& e)
	{
		printf("AionInfoDB:: Error beginning SQLite Transaction. (Error: %d:%s)",e.errorCode(),e.errorMessage());
		AionInfoDB_Updater_mutex.unlock();
		return false;
	}

	if (!gClientItemsMapInitialized)
		InitializeClientItemsMap();
	node = doc.RootElement();
	for (node = node->FirstChild(); node; node = node->NextSibling())
	{
		#pragma region Reset Variables
		id = 0;							name.clear();						desc.clear();					desc_long.clear();						item_type.clear();     
		icon_name.clear();				equipment_slots;					quality.clear();				lore.clear();							can_exchange.clear();     
		can_sell_to_npc.clear();		can_deposit_to_character_warehouse.clear();							can_deposit_to_account_warehouse.clear();    
		can_deposit_to_guild_warehouse.clear();								breakable.clear();				soul_bind.clear();						remove_when_logout.clear();     
		gender_permitted.clear();		bonus_apply.clear();				no_enchant.clear();				ui_sound_type.clear();					can_split.clear();     
		item_drop_permitted.clear();	can_ap_extraction.clear();			mesh.clear();					race_permitted.clear();					motion_name.clear();    
		craft_recipe_info.clear();		activation_mode.clear();			activate_target.clear();		activation_skill.clear();				confirm_to_delete_cash_item.clear();     
		ride_data_name.clear();			bonus_attr1.clear();				bonus_attr2.clear();			bonus_attr3.clear();					bonus_attr4.clear();     
		bonus_attr5.clear();			bonus_attr6.clear();				bonus_attr7.clear();			bonus_attr8.clear();					bonus_attr9.clear();     
		bonus_attr10.clear();			bonus_attr11.clear();				bonus_attr12.clear();			material.clear();						disposable_trade_item.clear();    
		abyss_item.clear();				attack_type.clear();
		price = 0;						max_stack_count = 0;				dodge = 0;						level = 0;								magical_resist = 0; 
		physical_defend = 0;			warrior = 0;						scout = 0;						mage = 0;								cleric = 0;  
		fighter = 0;					knight = 0;							assassin = 0;					ranger = 0;								wizard = 0; 
		elementalist = 0;				chanter = 0;						priest = 0;						option_slot_value = 0;					special_slot_value = 0;  
		option_slot_bonus = 0;			max_enchant_value = 0;				cannot_changeskin = 0;			cash_item = 0;							mesh_change = 0;  
		can_dye = 0;					cash_social = 0;					expire_time = 0;				cash_available_minute = 0;				disassembly_item = 0;        
		quest = 0;						activation_count = 0;				breakdown = 0;					use_delay_type_id = 0;					use_delay = 0;  
		casting_delay = 0;				warrior_max = 0;					scout_max = 0;					mage_max = 0;							cleric_max = 0;  
		fighter_max = 0;				knight_max = 0;						assassin_max = 0;				ranger_max = 0;							wizard_max = 0;  
		elementalist_max = 0;			chanter_max = 0;					priest_max = 0;					min_damage = 0;							max_damage = 0;  
		str = 0;						agi = 0;							kno = 0;						hit_accuracy = 0;						critical = 0; 
		parry = 0;						magical_skill_boost = 0;			magical_skill_boost_resist = 0; magical_hit_accuracy = 0;				attack_delay = 0;  
		hit_count = 0;					dmg_decal = 0;						disposable_trade_item_count = 0; abyss_item_count = 0;					abyss_point = 0;  
		quest_label = 0;				extra_inventory = 0;	
		attack_gap = 0.0f;				attack_range = 0.0f;				extra_currency_item.clear();	extra_currency_item_count = 0;			tag.clear();
		bonus_addexp_item.clear();		default_color_m.clear();			default_color_f.clear();
		#pragma endregion

		for (element = node->FirstChildElement(); element; element = element->NextSiblingElement())
		{
			if (element && element->FirstChild())
			{
				#pragma region Check Fields
				auto It = mClientItemsFields.find(element->Value());
				if (It != mClientItemsFields.end())
				{
					switch (mClientItemsFields[element->Value()])
					{
						case ClientItems__id:										id = atoi(element->FirstChild()->Value());									break;
						case ClientItems__name:										name = element->FirstChild()->Value();										break;
						case ClientItems__desc:										desc = element->FirstChild()->Value();										break;
						case ClientItems__desc_long:								desc_long = element->FirstChild()->Value();									break;
						case ClientItems__item_type:								item_type = element->FirstChild()->Value();									break;
						case ClientItems__icon_name:								icon_name = element->FirstChild()->Value();									break;
						case ClientItems__equipment_slots:							equipment_slots = element->FirstChild()->Value();							break;
						case ClientItems__quality:									quality = element->FirstChild()->Value();									break;
						case ClientItems__lore:										lore = element->FirstChild()->Value();										break;
						case ClientItems__can_exchange:								can_exchange = element->FirstChild()->Value();								break;
						case ClientItems__can_sell_to_npc:							can_sell_to_npc = element->FirstChild()->Value();							break;
						case ClientItems__can_deposit_to_character_warehouse:		can_deposit_to_character_warehouse = element->FirstChild()->Value();		break;
						case ClientItems__can_deposit_to_account_warehouse:			can_deposit_to_account_warehouse = element->FirstChild()->Value();			break;
						case ClientItems__can_deposit_to_guild_warehouse:			can_deposit_to_guild_warehouse = element->FirstChild()->Value();			break;
						case ClientItems__breakable:								breakable = element->FirstChild()->Value();									break;
						case ClientItems__soul_bind:								soul_bind = element->FirstChild()->Value();									break;
						case ClientItems__remove_when_logout:						remove_when_logout = element->FirstChild()->Value();						break;
						case ClientItems__gender_permitted:							gender_permitted = element->FirstChild()->Value();							break;
						case ClientItems__bonus_apply:								bonus_apply = element->FirstChild()->Value();								break;
						case ClientItems__no_enchant:								no_enchant = element->FirstChild()->Value();								break;
						case ClientItems__ui_sound_type:							ui_sound_type = element->FirstChild()->Value();								break;
						case ClientItems__can_split:								can_split = element->FirstChild()->Value();									break;
						case ClientItems__item_drop_permitted:						item_drop_permitted = element->FirstChild()->Value();						break;
						case ClientItems__can_ap_extraction:						can_ap_extraction = element->FirstChild()->Value();							break;
						case ClientItems__mesh:										mesh = element->FirstChild()->Value();										break;
						case ClientItems__race_permitted:							race_permitted = element->FirstChild()->Value();							break;
						case ClientItems__motion_name:								motion_name = element->FirstChild()->Value();								break;
						case ClientItems__craft_recipe_info:						craft_recipe_info = element->FirstChild()->Value();							break;
						case ClientItems__activation_mode:							activation_mode = element->FirstChild()->Value();							break;
						case ClientItems__activate_target:							activate_target = element->FirstChild()->Value();							break;
						case ClientItems__activation_skill:							activation_skill = element->FirstChild()->Value();							break;
						case ClientItems__confirm_to_delete_cash_item:				confirm_to_delete_cash_item = element->FirstChild()->Value();				break;
						case ClientItems__ride_data_name:							ride_data_name = element->FirstChild()->Value();							break;
						case ClientItems__bonus_attr1:								bonus_attr1 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr2:								bonus_attr2 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr3:								bonus_attr3 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr4:								bonus_attr4 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr5:								bonus_attr5 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr6:								bonus_attr6 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr7:								bonus_attr7 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr8:								bonus_attr8 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr9:								bonus_attr9 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr10:								bonus_attr10 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr11:								bonus_attr11 = element->FirstChild()->Value();								break;
						case ClientItems__bonus_attr12:								bonus_attr12 = element->FirstChild()->Value();								break;
						case ClientItems__material:									material = element->FirstChild()->Value();									break;
						case ClientItems__disposable_trade_item:					disposable_trade_item = element->FirstChild()->Value();						break;
						case ClientItems__abyss_item:								abyss_item = element->FirstChild()->Value();								break;
						case ClientItems__attack_type:								attack_type = element->FirstChild()->Value();								break;
						case ClientItems__price:									price = atoi(element->FirstChild()->Value());								break;
						case ClientItems__max_stack_count:							max_stack_count = atoi(element->FirstChild()->Value());						break;
						case ClientItems__dodge:									dodge = atoi(element->FirstChild()->Value());								break;
						case ClientItems__level:									level = atoi(element->FirstChild()->Value());								break;
						case ClientItems__magical_resist:							magical_resist = atoi(element->FirstChild()->Value());						break;
						case ClientItems__physical_defend:							physical_defend = atoi(element->FirstChild()->Value());						break;
						case ClientItems__warrior:									warrior = atoi(element->FirstChild()->Value());								break;
						case ClientItems__mage:										mage = atoi(element->FirstChild()->Value());								break;
						case ClientItems__cleric:									cleric = atoi(element->FirstChild()->Value());								break;
						case ClientItems__fighter:									fighter = atoi(element->FirstChild()->Value());								break;
						case ClientItems__knight:									knight = atoi(element->FirstChild()->Value());								break;
						case ClientItems__assassin:									assassin = atoi(element->FirstChild()->Value());							break;
						case ClientItems__ranger:									ranger = atoi(element->FirstChild()->Value());								break;
						case ClientItems__wizard:									wizard = atoi(element->FirstChild()->Value());								break;
						case ClientItems__elementalist:								elementalist = atoi(element->FirstChild()->Value());						break;
						case ClientItems__chanter:									chanter = atoi(element->FirstChild()->Value());								break;
						case ClientItems__option_slot_value:						option_slot_value = atoi(element->FirstChild()->Value());					break;
						case ClientItems__special_slot_value:						special_slot_value = atoi(element->FirstChild()->Value());					break;
						case ClientItems__option_slot_bonus:						option_slot_bonus = atoi(element->FirstChild()->Value());					break;
						case ClientItems__max_enchant_value:						max_enchant_value = atoi(element->FirstChild()->Value());					break;
						case ClientItems__cannot_changeskin:						cannot_changeskin = atoi(element->FirstChild()->Value());					break;
						case ClientItems__cash_item:								cash_item = atoi(element->FirstChild()->Value());							break;
						case ClientItems__mesh_change:								mesh_change = atoi(element->FirstChild()->Value());							break;
						case ClientItems__can_dye:									can_dye = atoi(element->FirstChild()->Value());								break;
						case ClientItems__expire_time:								expire_time = atoi(element->FirstChild()->Value());							break;
						case ClientItems__cash_available_minute:					cash_available_minute = atoi(element->FirstChild()->Value());				break;
						case ClientItems__disassembly_item:							disassembly_item = atoi(element->FirstChild()->Value());					break;
						case ClientItems__quest:									quest = atoi(element->FirstChild()->Value());								break;
						case ClientItems__activation_count:							activation_count = atoi(element->FirstChild()->Value());					break;
						case ClientItems__breakdown:								breakdown = atoi(element->FirstChild()->Value());							break;
						case ClientItems__use_delay_type_id:						use_delay_type_id = atoi(element->FirstChild()->Value());					break;
						case ClientItems__use_delay:								use_delay = atoi(element->FirstChild()->Value());							break;
						case ClientItems__casting_delay:							casting_delay = atoi(element->FirstChild()->Value());						break;
						case ClientItems__warrior_max:								warrior_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__scout_max:								scout_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__mage_max:									mage_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__cleric_max:								cleric_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__fighter_max:								fighter_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__knight_max:								knight_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__assassin_max:								assassin_max = atoi(element->FirstChild()->Value());						break;
						case ClientItems__ranger_max:								ranger_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__wizard_max:								wizard_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__elementalist_max:							elementalist_max = atoi(element->FirstChild()->Value());					break;
						case ClientItems__chanter_max:								chanter_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__priest_max:								priest_max = atoi(element->FirstChild()->Value());							break;
						case ClientItems__min_damage:								min_damage = atoi(element->FirstChild()->Value());							break;
						case ClientItems__max_damage:								max_damage = atoi(element->FirstChild()->Value());							break;
						case ClientItems__str:										str = atoi(element->FirstChild()->Value());									break;
						case ClientItems__agi:										agi = atoi(element->FirstChild()->Value());									break;
						case ClientItems__kno:										kno = atoi(element->FirstChild()->Value());									break;
						case ClientItems__hit_accuracy:								hit_accuracy = atoi(element->FirstChild()->Value());						break;
						case ClientItems__critical:									critical = atoi(element->FirstChild()->Value());							break;
						case ClientItems__parry:									parry = atoi(element->FirstChild()->Value());								break;
						case ClientItems__magical_skill_boost:						magical_skill_boost = atoi(element->FirstChild()->Value());					break;
						case ClientItems__magical_skill_boost_resist:				magical_skill_boost_resist = atoi(element->FirstChild()->Value());			break;
						case ClientItems__magical_hit_accuracy:						magical_hit_accuracy = atoi(element->FirstChild()->Value());				break;
						case ClientItems__attack_delay:								attack_delay = atoi(element->FirstChild()->Value());						break;
						case ClientItems__hit_count:								hit_count = atoi(element->FirstChild()->Value());							break;
						case ClientItems__dmg_decal:								dmg_decal = atoi(element->FirstChild()->Value());							break;
						case ClientItems__disposable_trade_item_count:				disposable_trade_item_count = atoi(element->FirstChild()->Value());			break;
						case ClientItems__abyss_item_count:							abyss_item_count = atoi(element->FirstChild()->Value());					break;
						case ClientItems__abyss_point:								abyss_point = atoi(element->FirstChild()->Value());							break;
						case ClientItems__quest_label:								quest_label = atoi(element->FirstChild()->Value());							break;
						case ClientItems__extra_inventory:							extra_inventory = atoi(element->FirstChild()->Value());						break;
						case ClientItems__cash_social:								cash_social = atoi(element->FirstChild()->Value());							break;
						case ClientItems__attack_gap:								attack_gap = (float)atof(element->FirstChild()->Value());					break;
						case ClientItems__attack_range:								attack_range = (float)atof(element->FirstChild()->Value());					break;
						case ClientItems__extra_currency_item:						extra_currency_item = element->FirstChild()->Value();						break;
						case ClientItems__extra_currency_item_count:				extra_currency_item_count = atoi(element->FirstChild()->Value());			break;
						case ClientItems__tag:										tag = element->FirstChild()->Value();										break;
						case ClientItems__bonus_addexp_item:						bonus_addexp_item = element->FirstChild()->Value();							break;
						case ClientItems__default_color_m:							default_color_m = element->FirstChild()->Value();							break;
						case ClientItems__default_color_f:							default_color_f = element->FirstChild()->Value();							break;
						default:
						{
							#if MYCOPY
							//DebugSpew(TOFILE,"** Unhandled ClientItems Field[%d]: %s -> %s",id, element->Value(),element->FirstChild()->Value());
							#endif
							break;
						}
					}
				}
				else
				{
					#if MYCOPY
					//DebugSpew(TOFILE,"Unhandled ClientItems Field[%d]: %s -> %s",id, element->Value(),element->FirstChild()->Value());
					#endif
				}
				#pragma endregion
			}
		}

		try 
		{
			#pragma region Add to Database
			bufSQL.format("insert into ClientItems (id,name,desc,desc_long,item_type,icon_name,equipment_slots,														\
							 quality,lore,can_exchange,can_sell_to_npc,can_deposit_to_character_warehouse,can_deposit_to_account_warehouse,							\
							 can_deposit_to_guild_warehouse,breakable,soul_bind,remove_when_logout,gender_permitted,bonus_apply,no_enchant,							\
							 ui_sound_type,can_split,item_drop_permitted,can_ap_extraction,mesh,race_permitted,motion_name,											\
							 craft_recipe_info,activation_mode,activate_target,activation_skill,confirm_to_delete_cash_item,ride_data_name,							\
							 bonus_attr1,bonus_attr2,bonus_attr3,bonus_attr4,bonus_attr5,bonus_attr6,bonus_attr7,bonus_attr8,										\
							 bonus_attr9,bonus_attr10,bonus_attr11,bonus_attr12,material,disposable_trade_item,abyss_item,attack_type,								\
							 price,max_stack_count,dodge,level,magical_resist,physical_defend,warrior,scout,														\
							 mage,cleric,fighter,knight,assassin,ranger,wizard,elementalist,chanter,																\
							 priest,option_slot_value,special_slot_value,option_slot_bonus,max_enchant_value,cannot_changeskin,										\
							 cash_item,mesh_change,can_dye,expire_time,cash_available_minute,disassembly_item,														\
							 quest,activation_count,breakdown,use_delay_type_id,use_delay,casting_delay,warrior_max,												\
							 scout_max,mage_max,cleric_max,fighter_max,knight_max,assassin_max,ranger_max,															\
							 wizard_max,elementalist_max,chanter_max,priest_max,min_damage,max_damage,str,agi,														\
							 kno,hit_accuracy,critical,parry,magical_skill_boost,magical_skill_boost_resist,														\
							 magical_hit_accuracy,attack_delay,hit_count,dmg_decal,disposable_trade_item_count,abyss_item_count,									\
							 abyss_point,quest_label,extra_inventory,cash_social,																					\
						     attack_gap,attack_range, extra_currency_item,extra_currency_item_count,tag,bonus_addexp_item,default_color_m,default_color_f) values	\
							 (%d,%Q,%Q,%Q,%Q,%Q,%Q, %Q,%Q,%Q,%Q,%Q,%Q, %Q,%Q,%Q,%Q,%Q,%Q,%Q, %Q,%Q,%Q,%Q,%Q,%Q,%Q,													\
							  %Q,%Q,%Q,%Q,%Q,%Q, %Q,%Q,%Q,%Q,%Q,%Q,%Q,%Q, %Q,%Q,%Q,%Q,%Q,%Q,%Q,%Q,																	\
							  %d,%d,%d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d,%d,                      \
							  %d,%d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d, %d,%d,%d,%d,%d,%d, %d,%d,%d,%d,                                     \
							  %1.4f,%1.4f,%Q,%d,%Q,%Q,%Q,%Q);",
							 id,name.c_str(),desc.c_str(),desc_long.c_str(),item_type.c_str(),icon_name.c_str(),equipment_slots.c_str(),
							 quality.c_str(),lore.c_str(),can_exchange.c_str(),can_sell_to_npc.c_str(),can_deposit_to_character_warehouse.c_str(),can_deposit_to_account_warehouse.c_str(),
							 can_deposit_to_guild_warehouse.c_str(),breakable.c_str(),soul_bind.c_str(),remove_when_logout.c_str(),gender_permitted.c_str(),bonus_apply.c_str(),no_enchant.c_str(),	
							 ui_sound_type.c_str(),can_split.c_str(),item_drop_permitted.c_str(),can_ap_extraction.c_str(),mesh.c_str(),race_permitted.c_str(),motion_name.c_str(),
							 craft_recipe_info.c_str(),activation_mode.c_str(),activate_target.c_str(),activation_skill.c_str(),confirm_to_delete_cash_item.c_str(),ride_data_name.c_str(),
							 bonus_attr1.c_str(),bonus_attr2.c_str(),bonus_attr3.c_str(),bonus_attr4.c_str(),bonus_attr5.c_str(),bonus_attr6.c_str(),bonus_attr7.c_str(),bonus_attr8.c_str(),
							 bonus_attr9.c_str(),bonus_attr10.c_str(),bonus_attr11.c_str(),bonus_attr12.c_str(),material.c_str(),disposable_trade_item.c_str(),abyss_item.c_str(),attack_type.c_str(),
							 price,max_stack_count,dodge,level,magical_resist,physical_defend,warrior,scout,mage,cleric,  
							 fighter,knight,assassin,ranger,wizard,elementalist,chanter,priest,option_slot_value,special_slot_value,  
							 option_slot_bonus,max_enchant_value,cannot_changeskin,cash_item,mesh_change,can_dye,expire_time,cash_available_minute,disassembly_item,
							 quest,activation_count,breakdown,use_delay_type_id,use_delay,casting_delay,warrior_max,scout_max,mage_max,cleric_max,  
							 fighter_max,knight_max,assassin_max,ranger_max,wizard_max,elementalist_max,chanter_max,priest_max,min_damage,max_damage,  
							 str,agi,kno,hit_accuracy,critical,parry,magical_skill_boost,magical_skill_boost_resist,magical_hit_accuracy,attack_delay,  
							 hit_count,dmg_decal,disposable_trade_item_count,abyss_item_count,abyss_point,quest_label,extra_inventory,cash_social,	 
							 attack_gap, attack_range, extra_currency_item.c_str(),extra_currency_item_count,tag.c_str(),bonus_addexp_item.c_str(),
							 default_color_m.c_str(),default_color_f.c_str());
			
			//DebugSpew(TOFILE,"%s",bufSQL.c_str());
			AionInfoDB.execDML(bufSQL);
			#pragma endregion
		}
		catch (CppSQLite3Exception& e)
		{
			printf("AionInfoDB:: Error inserting record into 'ClientItems' table. (Error: %s)",e.errorMessage());
		}
	}

	try 
	{
		AionInfoDB.execDML( "END TRANSACTION;" );
	}
	catch (CppSQLite3Exception& e)
	{
		printf("AionInfoDB:: Error ending SQLite Transaction. (Error: %s)",e.errorMessage());
		AionInfoDB_Updater_mutex.unlock();
		return false;
	}

	return true;
}
