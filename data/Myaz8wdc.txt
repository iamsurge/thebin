#include <iostream>
#include <bits/stdc++.h>
using namespace std;
struct monkey {
    vector<int> items;
    int d, c1, c2;
    int inspected = 0;
    function<int(int)> process;
    monkey(vector<int> _items, int _d, int _c1, int _c2, function<int(int)> f) {
        this-> items = _items;
        this-> d = _d;
        this-> c1 = _c1;
        this-> c2 = _c2;
        this-> process = f;
    }
    void pass(int item) {
        items.push_back(item);
    }
    void run(vector<monkey> &monkeys) {
        while(!items.empty()) {
            auto val = items.back();
            items.pop_back();
            inspected++;
            auto nval = process(val) / 3;
            int pos = test(nval);
            monkeys[pos].pass(nval);
        }
    }
    int test(int nval) {
        if(nval % d == 0) {
            return c1;
        } else {
            return c2;
        }
    }
    inline int get_inspected() {
        return inspected;
    }
};
int m2(int val) {
    return val * 2;
}
int sq(int val) {
    return val * val;
}
int p6(int val) {
    return val + 6;
}
int p2(int val) {
    return val + 2;
}
int m11(int val) {
    return val + 11;
}
int p7(int val) {
    return val + 7;
}
int p1(int val) {
    return val + 1;
}
int p5(int val) {
    return val + 5;
}
int main() {
    auto m0 =monkey({98, 70, 75, 80, 84, 89, 55, 98}, 11, 1, 4, &m2);
    auto m1 =monkey({59}, 19, 7, 3, &sq);
    auto m2 =monkey({77, 95, 54, 65, 89}, 7, 0, 5, &p6);
    auto m3 =monkey({71, 64, 75}, 17, 6, 2, &p2);
    auto m4 =monkey({74, 55, 87, 98}, 3, 1, 7, &m11);
    auto m5 =monkey({90, 98, 85, 52, 91, 60}, 5, 0, 4, &p7);
    auto m6 =monkey({99, 51}, 13, 5, 2, &p1);
    auto m7 =monkey({98, 94, 59, 76, 51, 65, 75}, 2, 3, 6, &p5);
    vector<monkey> monkeys = {m0, m1, m2, m3, m4, m5, m6, m7};
    for(int i = 0; i < 20; i++) {
        for(auto& j : monkeys) {
            j.run(monkeys);
        }
    }
    vector<int> t;
    for(auto& i : monkeys) {
        t.push_back(i.get_inspected());
    }
    sort(t.begin(), t.end());
    reverse(t.begin(), t.end());
    cout << t[0] * t[1] << endl;
    return 0;
}
