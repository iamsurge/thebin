#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include <string.h>
#define SIZE 10

void print_array(int arr[], int size) {
    printf("[ ");
    for(int i = 0; i < size; ++i)
        printf("%d ",arr[i]);
    printf("]\n");
}

void swap(int arr[], int i, int j) { 
    int temp = arr[i];
    arr[i] = arr[j];
    arr[j] = temp;
}

int partition(int arr[], int left, int right, int pivote) {
    while(left <= right) {
        while(arr[left] < pivote)
            left++;
    
        while(arr[right] > pivote)
            right--;

        if(left <= right) {
            swap(arr,left,right);
            left++;
            right--;
        }
    }
    
    return left;
}

void quicksort(int arr[], int left, int right) {
    if(left != right) {
        int pivote = arr[(left+right)/2];
        int index = partition(arr,left,right,pivote);
        quicksort(arr,left,index-1);
        quicksort(arr,index,right);
    }
}

int binarySearch(int arr[], int x, int left, int right) {
    
    if(right >= left) {
        int m = left + (right-left)/2;
        if(x == arr[m])
            return m;
        if(x < arr[m])
            return binarySearch(arr,x,left,m-1);
        else
            return binarySearch(arr,x,m+1,right);
    }
    return -1;
}

void problema1(int array [], int size) {
    for (int i = 0, j = (size - 1); i < (size / 2); i++) {
        printf("%d %d ", array[i], array[j - i]);
    }
}

void problema2(int array [], int size) {
    if(array[0] < array[SIZE - 1]) {
        for(int i = 1; i < (SIZE - 1); i++) {
            if(array[i] <= array[i + 1])
                continue;
            else {
                printf("arreglo desordenado");
                return;
            }
        }
        printf("arreglo ordenado de forma creciente");
        return;
    }
    for(int i = 1; i < (SIZE - 1); i++) {
        if(array[i] >= array[i + 1])
            continue;
        else {
            printf("arreglo desordenado");
            return;
        }
    }
    printf("arreglo ordenado de forma decreciente");
    return;
    
}

void problema3() {
    int array[SIZE];

    srand(time(NULL));

    for(int i = 0; i < SIZE; i++) {
        array[i] = rand() % SIZE + 1; //Numeros aleatorios entre 0 y 10
    }
    print_array(array, SIZE);
    quicksort(array,0,SIZE - 1);
    print_array(array, SIZE);

}

void problema4(int array[], int size) {
    int pares[size];
    int impares[size];
    size_t totalPares = 0;
    size_t totalImpares = 0;

    for(int i = 0, k = 0, z = 0; i < size; i++) {
        if(array[i] % 2 == 0) {
            pares[k++] = array[i];
            totalPares++;
        }
        else {
            impares[z++] = array[i];
            totalImpares++;
        }
    }
    if(totalPares > 0) {
        printf("pares: ");
        print_array(pares, totalPares);
    }
    if(totalImpares > 0) {
        printf("Impares: ");
        print_array(impares, totalImpares);
    }
}

void problema5() {
    int a[5];
    int b[5];
    int c[5];

    printf("Ingrese 5 valores para los vectores A y B\n");
    //valores para vector a
    printf("Vector A:\n");
    for(int i = 0; i < 5; i++) {
        printf("a%d: ", i+1);
        scanf("%d", &a[i]);   
    }
    //valores para vector b
    printf("Vector B:\n");
    for(int i = 0; i < 5; i++) {
        printf("b%d: ", i+1);
        scanf("%d", &b[i]);   
    }

    for(int i = 0; i < 5; i++) {
        c[i] = a[i] + b[i]; 
    }

    printf("Vector C: C = A + B\n");
    print_array(c,5);

}

void problema6(int array[], int size) {
    int pares[size];
    int impares[size];
    int suma = 0;
    int multiplicacion = 1;
    size_t totalPares = 0;
    size_t totalImpares = 0;

    for(int i = 0, k = 0, z = 0; i < size; i++) {
        if(array[i] % 2 == 0) {
            pares[k++] = array[i];
            totalPares++;
        }
        else {
            impares[z++] = array[i];
            totalImpares++;
        }
    }
    if(totalPares > 0) {
        printf("pares: ");
        print_array(pares, totalPares);
        for(size_t i = 0; i < totalPares; i++) {
            suma += pares[i];
        }
        printf("Suma pares: %d\n", suma);
    }
    if(totalImpares > 0) {
        printf("impares: ");
        print_array(impares, totalImpares);
        for(size_t i = 0; i < totalImpares; i++) {
            multiplicacion *= impares[i];
        }
        printf("Multiplicacion impares: %d\n", multiplicacion);
    }
}

void problema7(int array[], int size) {
    int n;
    int pos;
    quicksort(array, 0, size - 1);
    printf("vector ordenado: ");
    print_array(array, size);
    printf("Ingrese un valor entero: ");
    scanf("%d", &n);
    pos = binarySearch(array, n, 0, size - 1);
    if(pos != -1) {
        printf("el numero se encuentra en la posicion %d", pos);
    } else {
        printf("el numero no se encuentra en el vector");
    }
}

int main() {
    int numeros[SIZE];

    for(int i = 0; i < SIZE; i++) {
        printf("Ingrese valor %d: ", i+1);
        scanf("%d", &numeros[i]);   
    }

    problema1(numeros, SIZE);
    printf("\n\n");
    problema2(numeros, SIZE);
    printf("\n\n");
    problema3();
    printf("\n");
    problema4(numeros, SIZE);
    printf("\n");
    problema5();
    printf("\n");
    problema6(numeros, SIZE);
    printf("\n");
    problema7(numeros, SIZE);

    return 0;
}
