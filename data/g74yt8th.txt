#!/bin/bash

set -eE

lockfile=deploy/queue.lockfile
tmp_lockfile=deploy/tmp.lockfile

function wait_lock() {
  echo "[INFO] deploy.sh: Adding $$ to execution queue"
  echo "$$" >> $lockfile

  for (( i = 0; i < 30; i++ )) ; do
    first_pid=$(head -1 $lockfile)
    echo "[INFO] deploy.sh: First PID in queue: $first_pid"
    [[ $first_pid == "$$" ]] && break
    echo "[WARN] deploy.sh ($$): Cannot acquire lock ($lockfile). Waiting for another deploy to finish"
    sleep 10s
  done
}

free_queue() {
  ! [[ -f $lockfile ]] && return
  tail -n +2 "$lockfile" > "$tmp_lockfile"
  cat "$tmp_lockfile" > "$lockfile"
  rm -f "$tmp_lockfile"
}

[[ -z "$PROJECT_PATH" ]] && PROJECT_PATH="/home/projects/$PROJECT"

cd "$PROJECT_PATH"

if [[ "$1" == staging ]] ; then
  docker_compose_label=".staging"

  git reset --hard
  git remote update
  git pull origin staging
  git checkout staging

  [[ -r .env.local ]] && cat .env.local > .env

elif [[ "$1" == dev ]] ; then
  docker_compose_label=".dev"
else
  docker_compose_label=""

  git reset --hard
  git remote update
  git pull origin master
  git checkout master

  cat .env.local > .env
fi

[ -r deploy/config.sh ] && source deploy/config.sh

! [[ -f "$lockfile" ]] && touch "$lockfile"

trap 'free_queue; exit' EXIT RETURN
trap 'free_queue; exit 1' SIGINT SIGTERM SIGHUP SIGQUIT ERR

wait_lock

echo "$DOCKER_PASSWORD" | docker login --username "$DOCKER_USERNAME" --password-stdin $DOCKER_REGISTRY
docker-compose -f "docker-compose${docker_compose_label}.yml" pull --quiet
docker-compose -f "docker-compose${docker_compose_label}.yml" up --detach --quiet-pull --build --remove-orphans