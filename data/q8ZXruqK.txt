import React, {createContext, useReducer} from 'react'

// Create a default value for the context object
const defaultContext1 = {user:'John'}

// Use the createContext function to create a context object
// The default value for the context is passed as an argument
export const Context1 = createContext(defaultContext1);

// Create a reducer function to update the context state
export const Context1Reducer = (state, action)=>{
  // Destructure the type and payload properties from the action object
  const { type, payload } = action;

  // Check the type of the action and update the state accordingly
  switch (type) {
    case 'setUser':
      // Return a new object with the updated state
      return {...state, user:payload};
      
    // If the action type is not recognized, return the current state without modifying it
    default:
      return state;
  }

};

// Create a higher-order component to wrap the context provider
export  function Context1Provider({children}) {
  // Use the useReducer hook to create a reducer function and an initial state
  // The reducer function is Context1Reducer and the initial state is defaultContext1
  const [state, dispatch] = useReducer(Context1Reducer, defaultContext1)

  // Create a function to dispatch an action to the reducer function
  const setUser = ( user ) => {
    dispatch({ type: 'setUser', payload: user });
  }; 

  // Return a Context1.Provider component with the context state and setUser function as values
  return (
    <Context1.Provider value={{state, setUser}}>{children}</Context1.Provider>
  )
}
