import numpy as np
import numpy.random as rnd


def find_shortest_path(size: int, start: int, end: int, matrix1):
    dictionary = {}
    temp = []
    for i in range(0, len(matrix1)):
        for j in range(0, len(matrix1)):
            if matrix1[i, j] == 1:
                temp.append(j + 1)
                edges.append((str(i + 1), str(j + 1)))
        dictionary[i + 1] = temp
        temp = []
    print(dictionary)

    explored = []
    queue = [[start]]

    if start == end:
        print("Выбран один и тот же узел")
        return

    while queue:
        path = queue.pop(0)
        node = path[-1]
        if node == end:
            continue

        if node not in explored:
            neighbours = dictionary[node]

            for neighbour in neighbours:
                new_path = list(path)
                new_path.append(neighbour)
                queue.append(new_path)

                if neighbour == end and len(new_path) == size:
                    print("Shortest path = ", *new_path)
                    print(len(new_path))
                    return
            explored.append(node)
    print(f"Нет пути размера {size}")


n = int(input("Введите размерность матрицы: "))

nodes = [i for i in range(1, n + 1)]
edges = []

matrixtest = np.zeros((n,n), dtype=int)


for i in range(0, n):
    for j in range(0+i, n):
        matrixtest[i, j] = rnd.randint(2)
        if j == i:
            matrixtest[i,j] = 1

matrix2 = np.transpose(matrixtest).copy()

for i in range(n):
    matrix2[i,i] = 0

matrixtest = matrix2 + matrixtest

# Удачный пример матрицы.
# matrix1 = np.array([[1, 0, 0, 0, 0, 0, 1],
#                      [0, 1, 1, 1, 1, 0, 1],
#                      [0, 1, 1, 0, 1, 0, 1],
#                      [0, 1, 0, 1, 0, 1, 1],
#                      [0, 1, 1, 0, 1, 1, 0],
#                      [0, 0, 0, 1, 1, 1, 0],
#                      [1, 1, 1, 1, 0, 0, 1]])

print(matrixtest)


while(True):
    size = int(input("Введите длину желаемого кратчайшего пути: "))
    find_shortest_path(size, 1, 3, matrixtest)