class Solution:
    first_boxes_list = [0, 1, 2]
    second_boxes_list = [3, 4, 5]
    third_boxes_list = [6, 7, 8]

    def isValidSudoku(self, board: list[list[str]]) -> bool:
        columns = {index: [] for index in range(len(board))}
        boxes = {index: [] for index in range(len(board))}

        for row_index, row in enumerate(board):
            validate = self.__validate(row)
            if not validate:
                return validate

            for column_index, value in enumerate(row):
                columns[column_index].append(value)

                box_number = self.__get_box_number(row_index, column_index)
                boxes[box_number].append(value)

        for column in columns.values():
            validate = self.__validate(column)
            if not validate:
                return validate

        for box in boxes.values():
            validate = self.__validate(box)
            if not validate:
                return validate

        return True

    @staticmethod
    def __validate(sequence: list[str]) -> bool:
        for value in sequence:
            if value == '.':
                continue
            if sequence.count(value) > 1:
                return False

        return True

    def __get_box_number(self, row: int, column: int) -> int:
        shift_vector = self.__get_shift_vector_by_row(row)

        row = self.__get_number(row)
        column = self.__get_number(column)

        return row + column + shift_vector

    def __get_shift_vector_by_row(self, number: int) -> int:
        if number in self.first_boxes_list:
            return -2
        elif number in self.second_boxes_list:
            return 0
        elif number in self.third_boxes_list:
            return 2
        else:
            raise Exception(f'Wrong Number: {number}')

    def __get_number(self, number: int) -> int:
        if number in self.first_boxes_list:
            return 1
        elif number in self.second_boxes_list:
            return 2
        elif number in self.third_boxes_list:
            return 3
        else:
            raise Exception(f'Wrong Number: {number}')
