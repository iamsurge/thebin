#include <bits/stdc++.h>
#ifdef LOCAL_FLICKY
#define DEBUG(val) std::cout << #val << " = " << val << '\n'
#else
#define DEBUG(val) {}
#endif
using namespace std;
using ll = long long;

void fast() {
#ifdef LOCAL_FLICKY
    if (!freopen("input.txt", "r", stdin)) exit(1000 - 7);
    if (!freopen("output.txt", "w", stdout)) exit(1000 - 7);
#endif
    ios_base::sync_with_stdio(false);
    cout.tie(nullptr);
    cin.tie(nullptr);
}


using seg_tree_t = int;
const int MAXN = 1e5, inf = 1e9;
seg_tree_t arr[MAXN], t[4 * MAXN], neutral_element = -inf;

#define seg_tree_f(a, b) max(a, b)

void build(int u, int l, int r) {
    if (l + 1 == r) {
        t[u] = arr[l];
        return;
    }
    int m = (l + r) >> 1;
    build((u << 1) + 1, l, m);
    build((u << 1) + 2, m, r);
    t[u] = seg_tree_f(t[(u << 1) + 1], t[(u << 1) + 2]);
}

seg_tree_t get(int u, int l, int r, int L, int R) {
    if (l >= R || r <= L) return neutral_element;
    if (l >= L && r <= R) return t[u];
    int m = (l + r) >> 1;
    return seg_tree_f(
            get((u << 1) + 1, l, m, L, R),
            get((u << 1) + 2, m, r, L, R));
}


int main() {
    fast();
    set<int> ind[int(1e5) + 5];
    int n; cin >> n;
    for (int i = 0; i < n; ++i) {
        cin >> arr[i];
        ind[arr[i]].emplace(i + 1);
    }
    for (int i = 0; i < MAXN; ++i) {
        ind[i].emplace(inf);
    }
    build(0, 0, n);
    int k; cin >> k;
    while (k-->0) {
        int l, r; cin >> l >> r;
        l--;
        auto val = get(0, 0, n, l, r);
        auto it = ind[val].upper_bound(r);
        cout << *(--it) << endl;
    }
}
