from asciimatics.screen import Screen, ManagedScreen
from asciimatics.scene import Scene
from asciimatics.widgets import Layout, Label, TextBox, Frame, Widget, Button, ListBox, VerticalDivider
from asciimatics.exceptions import NextScene, StopApplication, ResizeScreenError
from asciimatics.widgets.text import Text
from asciimatics.effects import Print
from asciimatics.utilities import BoxTool
from asciimatics.renderers import BarChart, VBarChart, FigletText
from asciimatics.constants import SINGLE_LINE, DOUBLE_LINE, ASCII_LINE
from asciimatics.widgets.divider import Divider
from asciimatics.renderers import FigletText
from asciimatics.renderers import StaticRenderer
from asciimatics.effects import Background
from asciimatics.renderers import ColourImageFile, FigletText, ImageFile
import sys
from time import sleep



class Photo(Frame):
    def __init__(self, screen, x, y, file=None):
        super().__init__(screen, screen.height - 3, screen.width // 3 * 2,  title="VK.COM", x=x, y=y)
        self.add_effect(ImageFile(file, screen.height - 2))
        self.fix()







def demo(screen, scene):

    frame = Frame(screen, screen.height - 3, screen.width // 3 * 2, can_scroll=False, title="VK.COM", )
    frame.set_theme("monochrome")
    effect = Print(frame.canvas, ImageFile("photo.jpg", height=screen.height//3*2), 1, x=85) # увеличь Х и картинка
    # уедет вправо, вообщем надо поставить зависимость от координаты правого края фрейма
    frame.add_effect(effect)
    frame.fix()
    scenes = [Scene([frame])]
    screen.play(scenes, stop_on_resize=True, start_scene=scene)


last_scene = None
while True:
    try:
        Screen.wrapper(demo, arguments=[last_scene])
        sys.exit(0)
    except ResizeScreenError as e:
        last_scene = e.scene



