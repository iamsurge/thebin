import scipy.interpolate


def make_piecewise_cubic_spline(n):
    h = 2 / n
    interval_boundaries = np.linspace(0, 2, n + 1)
    assert interval_boundaries[1] - interval_boundaries[0] == h, interval_boundaries
    coefs = np.empty(shape=(4, n))
    for k in range(n):
        if k == 0:
            s_0 = 1  # y(0)
            s_1 = -1  # y'(0)
            s_2 = 1  # y''(0)
            a_k = (18 * h**2 - 36 * h + 33) / (-6 * h**3 + h + 3)
        else:
            x_0 = k * h  # for S(kh), S'(kh), S''(kh)
            s_0 = coefs[0, k - 1] + coefs[1, k - 1] * x_0 + coefs[2, k - 1] * x_0**2 + coefs[3, k - 1] * x_0**3
            s_1 =  coefs[1, k - 1] + 2 * coefs[2, k - 1] * x_0 + 3 * coefs[3, k - 1] * x_0**2
            s_2 = 2 * coefs[2, k - 1] + 6 * coefs[3, k - 1] * x_0
            x_1 = (k + 1) * h  # for differential equation
            numerator = (6 * x_1**2 - 1) * (s_0 + s_1 * x_1 + s_2 * x_1**2 / 2 - (s_1 + s_2 * x_1))
            denominator = (x_1**2 / 2 - x_1**3 / 6)
            a_k = numerator / denominator
        coefs[0, k] = s_0
        coefs[1, k] = s_1
        coefs[2, k] = s_2 / 2
        coefs[3, k] = a_k / 6
    print(coefs.T)
    return scipy.interpolate.PPoly(coefs, interval_boundaries)
