	$profileCode = $_ENV['profileActive'] ?? false;
	if ( $profileCode ) {
		try {
			$config = [
				// If defined, use specific profiler
				// otherwise use any profiler that's found
				'profiler' => Xhgui\Profiler\Profiler::PROFILER_XHPROF,

				// This allows to configure, what profiling data to capture
				'profiler.flags' => [
					Xhgui\Profiler\ProfilingFlags::CPU,
					Xhgui\Profiler\ProfilingFlags::MEMORY
				],

				// Saver to use.
				// Please note that 'pdo' and 'mongo' savers are deprecated
				// Prefer 'upload' or 'file' saver.
				'save.handler' => Xhgui\Profiler\Profiler::SAVER_FILE,

				// https://github.com/perftools/php-profiler#file-saver
				'save.handler.file' => [
					// Appends jsonlines formatted data to this path
					'filename' => __DIR__ . '/data/data.json',
				],

				// Environment variables to exclude from profiling data
				'profiler.exclude-env' => [],
				'profiler.options' => [],

				/**
				 * Determine whether the profiler should run.
				 * This default implementation just disables the profiler.
				 * Override this with your custom logic in your config
				 * @return bool
				 */
				'profiler.enable' => function () {
					return true;
				},
			];

			/**
			 * The constructor will throw an exception if the environment
			 * isn't fit for profiling (extensions missing, other problems)
			 */
			$profiler = new Xhgui\Profiler\Profiler( $config );

			// The profiler itself checks whether it should be enabled
			// for request (executes lambda function from config)
			$profiler->start();
		} catch ( Exception $e ) {
			// throw away or log error about profiling instantiation failure
			error_log( $e->getMessage() );
		}
	}
