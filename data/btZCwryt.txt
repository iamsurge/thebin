#include <fstream>
#include <stdio.h>
#include <stdlib.h>
#include <iostream> 
#include <stdlib.h> 
#include <time.h>  
#include <ctime>
#include <conio.h> 
#include <windows.h>
#include <string.h> 
#include "funciones.h"
using namespace std;

struct casilla{
	int estado;   	//0: no recorrido por el caballo, 1: recorrido por el caballo
	int caballo;	//0: no esta el caballo, 1: esta el caballo
    struct casilla *ant;
    struct casilla *sig;
    struct casilla *arriba;
    struct casilla *abajo;
    }*v[7];  
/////////////////////////////////////////////////////////////////////////////////////////////////
	int opocin;
	int turnoCaballo = 1;
	const int MAX = 50;
	int cAux=0;
	int ocupadoX[64],ocupadoY[64];
	int Xcaballo1[64], Ycaballo1[64], Xcaballo2[64], Ycaballo2[64];	//para el historial
	bool ganar = false;
/////////////////////////////////////////////////////////////////////////////////////////////////
	void ubicarCaballoEnTablero(int, int, int);
	bool movimientos(casilla *&, int &a, int &b, int mov, int mov1);
	void ubicarMovDisp(int a, int b);
	void realizarMovimiento(casilla *&, int &a, int &b, int &op, int mov, bool);
	void casillaYaOcupada(int a, int b, int mov);
	bool corroborarOpcion(int va[8], int op);
	string NumAletra(int num);
	void posicionCaballos(casilla *&, int, int);
	void turno(casilla *&, casilla *&, int, int, int, int, int, int);
	void caballoGanador(int, int); 
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void mostrar_tablero(){
	    int cont=0;
	    	colors(14);
	    gotoxy(30,1);cout<<"TABLERO DE AJEDREZ - CABALLO ";
	    gotoxy(13,3);cout<<"1        2        3        4        5        6        7        8";
	    gotoxy(7,7);
			cout<<"A";gotoxy(7,12);cout<<"B";gotoxy(7,17);cout<<"C";gotoxy(7,22);cout<<"D";
		gotoxy(7,27);
			cout<<"E";gotoxy(7,32);cout<<"F";gotoxy(7,37);cout<<"G";gotoxy(7,42);cout<<"H";
	    gotoxy(8,4);
		//BORDE SUPERIOR	
		cout<<(char)201;
		cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
	    cout<<(char)187;	
	   
	    while(cont<40){		// PARTE INTERNA
	    for(int i=0;	i<5;	i++){
		gotoxy(8,5+i+cont);cout<<(char)186;
			cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
		gotoxy(27,5+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
		gotoxy(45,5+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
		gotoxy(63,5+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
	
		gotoxy(81,5+i+cont);cout<<(char)186;
	    }
	
	    for(int i=0;i<5;i++){	
	    gotoxy(8,10+i+cont);cout<<(char)186;
	    gotoxy(18,10+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
	    gotoxy(36,10+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
	    gotoxy(54,10+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
	    gotoxy(72,10+i+cont);cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;cout<<(char)219;
	    gotoxy(81,10+i+cont);cout<<(char)186;
	    }
	    cont=cont+10;
	}   
	    //PARTE INFERIOR
	    gotoxy(8,45);
		cout<<(char)200;
			cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		    cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;cout<<(char)205;
		cout<<(char)188;
		colors(14);
	 }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	struct casilla *nuevaCasilla(){
	    struct casilla *nuevo= new casilla;
	    if(nuevo==NULL){
	        cout<<"ERROR: No hay suficiente memoria";
	        return NULL;
	    }else{
	        nuevo->ant=NULL;
	        nuevo->sig=NULL;
	        nuevo->arriba=NULL;
	        nuevo->abajo=NULL;
	        nuevo->estado= 0;
	        nuevo->caballo= 0;
	        return nuevo;
	    }
	 }
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	 void crear_tablero(){
	    struct casilla *auxInicio,*auxCasillaNueva;
	    int i,j;
	    for(i=0;i<=7;i++){		//Se esta creando la casilla en forma vertical
	        if(v[i]==NULL){
	        	v[i]=nuevaCasilla();   
	        }
	        auxInicio=v[i];
	        for(j=1;j<=7;j++){    //Se esta creando la casilla en forma horizontal
	            auxCasillaNueva=nuevaCasilla();
	            auxInicio->sig=auxCasillaNueva;
	            auxCasillaNueva->ant=auxInicio;
	            auxInicio=auxInicio->sig;
	        }
	    }
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void enlazar_tablero(){   //Con esta funci√≥n se enlazan las casillas hacia arriba y hacia abajo
	    struct casilla *aux1,*aux2;
	    int i,j;
	    for(i=0;i<7;i++){
	        aux1=v[i];
	        aux2=v[i+1];
	        for(j=0;j<8;j++){
	            aux1->abajo=aux2;
	            aux2->arriba=aux1;
	            aux1=aux1->sig;
	            aux2=aux2->sig;
	        }
	    }
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void posicionAleatoria(){
		struct casilla *aux, *aux1;
		int a, b, a1, b1, mov=0, mov1=0;
		srand(time(NULL));
		do{	fflush(stdin);
			a= rand() % 8; //Vertical
			b= rand() % 8; //Horizontal
			a1= rand() % 8; //Vertical
			b1= rand() % 8; //Horizontal
		}while((a == a1) && (b == b1));
			fflush(stdin);
				posicionCaballos(aux, a, b);
				posicionCaballos(aux1, a1, b1);
					turno(aux, aux1, a, a1, b, b1, mov, mov1);
	}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
void posicionCaballos(casilla *&aux, int a, int b){
	int num= b;
	aux=v[a];
		while(num!=0){
			aux=aux->sig;
			num--;
		}
			fflush(stdin);
				aux->caballo=1;
					aux->estado=1;
}
////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void turno(casilla *&aux, casilla *&aux1, int a, int a1, int b, int b1, int mov, int mov1){
		int ocupadoColumna[30], ocupadoFila[30]; bool caballo1=true, caballo2=true;
		do{		
			fflush(stdin); 
			ubicarCaballoEnTablero(a, b, 6);
			ubicarCaballoEnTablero(a1, b1, 3);
				gotoxy(88, 20);cout<<mov<<" movimientos realizados Caballo 1"<<endl;
				gotoxy(88, 21);cout<<mov1<<" movimientos realizados Caballo 2"<<endl;
				if(turnoCaballo==1 && caballo1){
						ocupadoColumna[mov]=b;
							ocupadoFila[mov]=a;
								caballo1= movimientos(aux, a, b, mov, mov1);
								mov++;
								turnoCaballo=2;
				}
				else if(turnoCaballo==2 && caballo2){
							ocupadoColumna[mov1]=b1;
								ocupadoFila[mov1]=a1;
									caballo2= movimientos(aux1, a1, b1, mov, mov1);
									mov1++;
									turnoCaballo=1;
				}
		}while(caballo1 || caballo2);	
			fflush(stdin); 
				if(ganador == true){								//determina el ganador
					caballoGanador(mov,mov1); 
				}
	}

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

	bool movimientos(casilla *&aux, int &a, int &b, int mov,int mov1){
		int va[8]={0, 0, 0, 0, 0, 0, 0, 0}, terminar = 0;
		gotoxy(85,5);
			colors(14);cout<<" - ESTAS EN LA POSICION: ";//<<NumAletra(a+1)<<" - "<<b+1;
			colors(9);cout<<NumAletra(a+1)<<" - "<<b+1;
		int op;
		gotoxy(85,7);	
			colors(14);	cout<<" - MENU DE MOVIMIENTOS: ";
						
		if(aux->sig != NULL ){	
			if(aux->sig->sig != NULL){	
					if(aux->sig->sig->arriba != NULL && aux->sig->sig->arriba->estado != 1 && aux->sig->sig->arriba->caballo !=1){       
						gotoxy(88,8);
							colors(2); cout<<"1. MOVIMIENTO A :     "<< NumAletra(a)<<" - "<<b+3<<endl;
								ubicarMovDisp(a-1, b+2); va[0]=1;	
					}
					else {	
							if( aux->sig->sig->arriba->estado == 1 && aux->sig->sig->arriba->caballo == 1){					//	MATAR CABALLO
									gotoxy(88,8);colors(4); cout<<"1. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,8);colors(4); cout<<"1. NO DISPONIBLE."<<endl;	 }
					}
					///////////////////////////////////////////////////////////////////////
					if(aux->sig->sig->abajo != NULL && aux->sig->sig->abajo->estado != 1 && aux->sig->sig->abajo->caballo !=1){
						gotoxy(88,9);
							colors(2); cout<<"2. MOVIMIENTO A :     "<<NumAletra(a+2)<<" - "<<b+3<<endl;
								ubicarMovDisp(a+1, b+2); va[1]=2;
					}
					else {	
							if(aux->sig->sig->abajo->estado == 1 && aux->sig->sig->abajo->caballo == 1 ){				//	MATAR CABALLO
									gotoxy(88,9);colors(4); cout<<"2. MATAR CABALLO:     "<< NumAletra(a+2)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,9);colors(4); cout<<"2. NO DISPONIBLE."<<endl;	 }
					}
			}
			else {	colors(4); gotoxy(88,8);	cout<<"5. NO DISPONIBLE."<<endl;	
					colors(4); gotoxy(88,9);	cout<<"6. NO DISPONIBLE."<<endl;
			}	
		}
		else {	colors(4); gotoxy(88,8);	cout<<"5. NO DISPONIBLE."<<endl;	
				colors(4); gotoxy(88,9);	cout<<"6. NO DISPONIBLE."<<endl;
		}
	    //////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(aux->ant != NULL){
			if(aux->ant->ant != NULL){
				if(aux->ant->ant->arriba != NULL && aux->ant->ant->arriba->estado !=1 && aux->ant->ant->arriba->caballo != 1 ){
					gotoxy(88,10);	
						colors(2); cout<<"3. MOVIMIENTO A :     "<<NumAletra(a)<<" - "<<b-1<<endl;
							ubicarMovDisp(a-1, b-2); va[2]=3;	
				}
				else {	
							if(aux->ant->ant->arriba->estado == 1 && aux->ant->ant->arriba->caballo == 1){		//	MATAR CABALLO
									gotoxy(88,10);colors(4); cout<<"3. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,10);colors(4); cout<<"3. NO DISPONIBLE."<<endl;	 }
				}
				///////////////////////////////////////////////////////////////////////
				if (aux->ant->ant->abajo != NULL && aux->ant->ant->abajo->estado !=1 && aux->ant->ant->abajo->caballo !=1){
					gotoxy(88,11); fflush(stdin); 
						colors(2); cout<<"4. MOVIMIENTO A :     ";cout<<NumAletra(a+2)<<" - "<<b-1<<endl;
							ubicarMovDisp(a+1, b-2); va[3]=4;
				}
					else {	
							if(aux->ant->ant->abajo->estado ==1 && aux->ant->ant->abajo->caballo == 1){		//	MATAR CABALLO
									gotoxy(88,11);colors(4); cout<<"4. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,11);colors(4); cout<<"4. NO DISPONIBLE."<<endl;	 }
					}
				///////////////////////////////////////////////////////////////////////	
			}	
			else {	colors(4); gotoxy(88,10);	cout<<"3. NO DISPONIBLE."<<endl;	
					colors(4); gotoxy(88,11);	cout<<"4. NO DISPONIBLE."<<endl;
			}
		}
		else {	colors(4); gotoxy(88,10);	cout<<"3. NO DISPONIBLE."<<endl;	
				colors(4); gotoxy(88,11);	cout<<"4. NO DISPONIBLE."<<endl;
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(aux->abajo != NULL){
			if(aux->abajo->abajo != NULL){
					if(aux->abajo->abajo->ant != NULL && aux->abajo->abajo->ant->estado !=1 && aux->abajo->abajo->ant->caballo !=1 ){
						gotoxy(88,12);	
							colors(2); cout<<"5. MOVIMIENTO A :     "<<NumAletra(a+3)<<" - "<<b<<endl;
						ubicarMovDisp(a+2, b-1); va[4]=5;
					}
					else {	
							if(aux->abajo->abajo->ant->estado == 1 && aux->abajo->abajo->ant->caballo ==1){						//	MATAR CABALLO
									gotoxy(88,12);colors(4); cout<<"5. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,12);colors(4); cout<<"5. NO DISPONIBLE."<<endl;	 }
					}
				///////////////////////////////////////////////////////////////////////
					if(aux->abajo->abajo->sig != NULL && aux->abajo->abajo->sig->estado != 1 && aux->abajo->abajo->sig->caballo !=1 ){
						gotoxy(88,13);	
							colors(2); cout<<"6. MOVIMIENTO A :     "<<NumAletra(a+3)<<" - "<<b+2<<endl;
						ubicarMovDisp(a+2, b+1); va[5]=6;
					}
					else {	
							if(aux->abajo->abajo->sig->estado == 1 && aux->abajo->abajo->sig->caballo == 1){			//	MATAR CABALLO
									gotoxy(88,13);colors(4); cout<<"6. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,13);colors(4); cout<<"6. NO DISPONIBLE."<<endl;	 }
					}
				///////////////////////////////////////////////////////////////////////
			}	
			else {	colors(4); gotoxy(88,12);	cout<<"5. NO DISPONIBLE."<<endl;	
					colors(4); gotoxy(88,13);	cout<<"6. NO DISPONIBLE."<<endl;
			}
		}
		else {	colors(4); gotoxy(88,12);	cout<<"5. NO DISPONIBLE."<<endl;	
				colors(4); gotoxy(88,13);	cout<<"6. NO DISPONIBLE."<<endl;
		}
		//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		if(aux->arriba != NULL){
			if(aux->arriba->arriba != NULL){
					if(aux->arriba->arriba->ant != NULL && aux->arriba->arriba->ant->estado != 1 && aux->arriba->arriba->ant->caballo !=1){
						gotoxy(88,14);
							colors(2); cout<<"7. MOVIMIENTO A :     "<<NumAletra(a-1)<<" - "<<b<<endl;
						ubicarMovDisp(a-2, b-1); va[6]=7;
					}
					else {	
							if(aux->arriba->arriba->ant->estado == 1 && aux->arriba->arriba->ant->caballo ==1 ){	//	MATAR CABALLO
									gotoxy(88,14);colors(4); cout<<"7. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,14);colors(4); cout<<"7. NO DISPONIBLE."<<endl;	 }
					}
				///////////////////////////////////////////////////////////////////////
					if(aux->arriba->arriba->sig != NULL && aux->arriba->arriba->sig->estado != 1 && aux->arriba->arriba->sig->caballo !=1){
						gotoxy(88,15); 
							colors(2); cout<<"8. MOVIMIENTO A :     "<<NumAletra(a-1)<<" - "<<b+2<<endl;
						ubicarMovDisp(a-2, b+1); va[7]=8;
					}
					else {	
							if(aux->arriba->arriba->sig->estado == 1 && aux->arriba->arriba->sig->caballo ==1){		//	MATAR CABALLO
									gotoxy(88,15);colors(4); cout<<"8. MATAR CABALLO:     "<< NumAletra(a)<<" - "<<b+3<<endl;
									ganar = true;
							}
							else{	gotoxy(88,15);colors(4); cout<<"8. NO DISPONIBLE."<<endl;	 }
						}
					}
				else {	colors(4); gotoxy(88,14);	cout<<"5. NO DISPONIBLE."<<endl;	
						colors(4); gotoxy(88,15);	cout<<"6. NO DISPONIBLE."<<endl;
				}	
		}
		else {	colors(4); gotoxy(88,14);	cout<<"5. NO DISPONIBLE."<<endl;	
				colors(4); gotoxy(88,15);	cout<<"6. NO DISPONIBLE."<<endl;
		}
		//////////////////////////////////////////////////////////////////////////////
			for(int i=0; i<8; i++){  
				if(va[i]!= 0){	terminar = 1;	}
			}	
			if(terminar==0||ganar == true){	return false;	}
			
			colors(14);	op = takeOptionGotoxy(" - SELECCIONE UN MOVIMIENTO:",1,8,85,17);			
			realizarMovimiento(aux, a, b, op, mov+mov1,moverCaballo);
	return true;}//END MOVIMIENTOS	

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void realizarMovimiento(casilla *&aux, int &a, int &b, int &op, int mov, bool moverCaballo){
		mov= mov+1; 
		gotoxy(82,18);	system("pause"); system("cls");
			switch(op){
				case 1:	aux= aux->sig->sig->arriba;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a-1; b=b+2;
						break;
				case 2: aux= aux->sig->sig->abajo;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a+1; b=b+2;
						break;
				case 3: aux= aux->ant->ant->arriba;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a-1; b=b-2;
						break;
				case 4: aux= aux->ant->ant->abajo;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a+1; b=b-2;
						break;
				case 5: aux= aux->abajo->abajo->ant;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a+2; b=b-1;
						break;
				case 6: aux= aux->abajo->abajo->sig;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a+2; b=b+1;
						break;
				case 7: aux= aux->arriba->arriba->ant;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a-2; b=b-1;
						break;
				case 8: aux= aux->arriba->arriba->sig;
						mostrar_tablero();
						casillaYaOcupada(a, b, mov);
						a=a-2; b=b+1;
			}
		aux->estado= 1;
		aux->caballo=1;
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	string NumAletra(int num){
		string letra;	
			switch(num){
				case 1: letra = "A"; break;
				case 2: letra = "B"; break;
				case 3: letra = "C"; break;
				case 4: letra = "D"; break;
				case 5: letra = "E"; break;
				case 6: letra = "F"; break;
				case 7: letra = "G"; break;
				case 8: letra = "H"; break;
			}
	return letra;	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ubicarCaballoEnTablero(int a, int b, int n){
		int x, y;
		colors(n);
		switch(a){
			case 0:y=7;break;
	        case 1:y=12;break;
	        case 2:y=17;break;
	        case 3:y=22;break;
	        case 4:y=27;break;
	        case 5:y=32;break;
	        case 6:y=37;break;
	        case 7:y=42;break;
		}
		switch(b){
				case 0:x=10;break;
	    	    case 1:x=19;break;
	    	    case 2:x=28;break;
	    	    case 3:x=37;break;
	    	    case 4:x=46;break;
	    	    case 5:x=55;break;
	    	    case 6:x=64;break;
	    	    case 7:x=73;break;
	    }
	    gotoxy(x,y);cout<<"CABALLO";//POCISIONAMIENTO: CABALLO/HORSE
	    colors(14);
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void caballoGanador(int mov, int mov1){
		gotoxy(118, 5);
			cout<<(char)186;	
			cout<<" - HISTORIAL: CABALLO GANADOR"<<endl;
				if(ganador == true){	
						if(turnoCaballo == 1){	
							for(int i=0;	i<mov;	i++	){
								gotoxy(118,6+i);	cout<<(char)186;
								gotoxy(125,6+i);	cout<<NumAletra(Ycaballo1[i]+1)<<" - "<<Xcaballo1[i]+1<<endl;
							}	
						}
						if(turnoCaballo == 2){
							for(int i=0;	i<mov1;	i++	){
								gotoxy(118,6+i);	cout<<(char)186;
								gotoxy(125,6+i);	cout<<NumAletra(Ycaballo2[i]+1)<<" - "<<Xcaballo2[i]+1<<endl;
						}	
				}
		}
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void casillaYaOcupada(int a, int b, int mov){ 
		ocupadoX[mov-1]=b;
		ocupadoY[mov-1]=a;
		gotoxy(118, 5);
			cout<<(char)186;	
			cout<<" - HISTORIAL: CABALLO "<<endl;
			for(int i=0; i<mov; i++){
				gotoxy(118,6+i);	cout<<(char)186;
				gotoxy(125,6+i);	cout<<NumAletra(ocupadoY[i]+1)<<" - "<<ocupadoX[i]+1<<endl;
			}
		int x, y;
		colors(4);
		for(int i=0; i<mov; i++){
			switch(ocupadoY[i]){
				case 0:y=7;break;	
				case 1:y=12;break;
	        	case 2:y=17;break;
	        	case 3:y=22;break;
	        	case 4:y=27;break;
	        	case 5:y=32;break;
	        	case 6:y=37;break;
	        	case 7:y=42;break;
			}
			switch(ocupadoX[i]){
				case 0:x=11;break;
		    	case 1:x=20;break;
		        case 2:x=29;break;
		        case 3:x=38;break;
		        case 4:x=47;break;
		        case 5:x=56;break;
		        case 6:x=65;break;
		        case 7:x=74;break;
	    	}
	    	gotoxy(x,y);cout<<"USADO"; //CASILLA USADA - X - USED
		}
	}
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
	void ubicarMovDisp(int a, int b){
		int x, y;
		colors(2);
		switch(a){
			case 0:y=7;break;
	        case 1:y=12;break;
	        case 2:y=17;break;
	        case 3:y=22;break;
	        case 4:y=27;break;
	        case 5:y=32;break;
	        case 6:y=37;break;
	        case 7:y=42;break;
		}
		switch(b){
			case 0:x=11;break;
	    	case 1:x=20;break;
	        case 2:x=29;break;
	        case 3:x=38;break;
	        case 4:x=47;break;
	        case 5:x=56;break;
	        case 6:x=65;break;
	        case 7:x=74;break;
	    }
	    gotoxy(x,y);cout<<"LIBRE"; // CASILLA LIBRE - FREE
	    colors(2);
	}
	    
	int main(){
			fflush(stdin);
			crear_tablero();
				enlazar_tablero();
					mostrar_tablero();
						posicionAleatoria();
	return 0;}