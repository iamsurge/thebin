海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥说明@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"home\",\"rule\":\"addListener('onClose', () => {\\r\\n    clearMyVar('nameArray');\\r\\n    clearMyVar('urlArray');\\r\\n    clearMyVar('switch');\\r\\n})\\r\\naddListener('onRefresh', () => {\\r\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n    eval('configArray=' + setFile);\\r\\n    clearMyVar('delNum');\\r\\n    clearMyVar('delArray');\\r\\n    clearMyVar('shareNum');\\r\\n    clearMyVar('shareArray');\\r\\n    for (let i = 0; i < configArray.length; i++) {\\r\\n        clearMyVar('isChoose' + i);\\r\\n    }\\r\\n})\\r\\nif (!fileExist('hiker://files/rules/cy/MyParse.json')) {\\r\\n    configArray = [];\\r\\n    saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n}\\r\\nif (!fileExist('hiker://files/rules/cy/dmSwitch.txt')) {\\r\\n    saveFile('hiker://files/rules/cy/dmSwitch.txt', '开');\\r\\n}\\r\\nvar d = [];\\r\\nd.push({\\r\\n    title: '‘‘’’<big><span style=\\\"color:#6EB897\\\">添 加 解 析</span></big>',\\r\\n    url: $('#noLoading#').lazyRule(() => {\\r\\n        if (getMyVar('switch', '关') == '开') {\\r\\n            for (let i = 0; i < 3; i++) {\\r\\n                deleteItem('add')\\r\\n            }\\r\\n            putMyVar('switch', '关');\\r\\n        } else {\\r\\n            addArray = [{\\r\\n                desc: '解析名称，一行一个',\\r\\n                col_type: 'input',\\r\\n                extra: {\\r\\n                    titleVisible: false,\\r\\n                    type: 'textarea',\\r\\n                    height: -1,\\r\\n                    highlight: true,\\r\\n                    onChange: \\\"putMyVar('nameArray',input)\\\",\\r\\n                    id: 'add'\\r\\n                }\\r\\n            }, {\\r\\n                desc: '解析，一行一个',\\r\\n                col_type: 'input',\\r\\n                extra: {\\r\\n                    titleVisible: false,\\r\\n                    type: 'textarea',\\r\\n                    height: -1,\\r\\n                    highlight: true,\\r\\n                    onChange: \\\"putMyVar('urlArray',input)\\\",\\r\\n                    id: 'add'\\r\\n                }\\r\\n            }, {\\r\\n                title: '保存',\\r\\n                url: $().lazyRule(() => {\\r\\n                    nameArray = getMyVar('nameArray').split('\\\\n');\\r\\n                    urlArray = getMyVar('urlArray').split('\\\\n');\\r\\n                    dataLength = nameArray.length > urlArray.length ? nameArray.length : urlArray.length;\\r\\n                    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n                    eval('configArray=' + setFile);\\r\\n                    for (let i = 0; i < dataLength; i++) {\\r\\n                        jiexiName = i > nameArray.length - 1 ? '未命名' : (nameArray[i] == '' ? '未命名' : nameArray[i]);\\r\\n                        jiexiUrl = i > urlArray.length - 1 ? '空解析' : (urlArray[i] == '' ? '空解析' : urlArray[i]);\\r\\n                        configArray.push({\\r\\n                            name: jiexiName,\\r\\n                            url: jiexiUrl\\r\\n                        });\\r\\n                    }\\r\\n                    saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n                    putMyVar('switch', '关');\\r\\n                    refreshPage(true);\\r\\n                    return \\\"toast://保存成功\\\"\\r\\n                }),\\r\\n                col_type: 'text_center_1',\\r\\n                extra: {\\r\\n                    id: 'add'\\r\\n                }\\r\\n            }]\\r\\n            addItemAfter('addFunction', addArray);\\r\\n            putMyVar('switch', '开');\\r\\n        }\\r\\n        return 'toast://已切换switch为:' + getMyVar('switch', '开')\\r\\n    }),\\r\\n    desc: '简单、无忧、独立的解析管理工具，养老专用',\\r\\n    col_type: 'text_center_1',\\r\\n    extra: {\\r\\n        id: 'addFunction'\\r\\n    }\\r\\n}, {\\r\\n    col_type: 'line_blank'\\r\\n}, {\\r\\n    title: '‘‘’’<font color=\\\"#6EB897\\\">说明</font>',\\r\\n    url: $().lazyRule(() => {\\r\\n        return $('hiker://empty').rule(() => {\\r\\n            let d = [];\\r\\n            d.push({\\r\\n                title: '教程文档',\\r\\n                url: 'https://www.yuque.com/chenying-k73sc/lhcvqd/bsh5e2',\\r\\n                desc: \\\"float&&100%\\\",\\r\\n                col_type: 'x5_webview_single'\\r\\n            });\\r\\n            setResult(d);\\r\\n        });\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: \\\"切换插件\\\",\\r\\n    url: $(['魔断', '助手'], 2, '请选择你要执行的操作').select(() => {\\r\\n        if (input == '魔断') {\\r\\n            writeFile(\\\"hiker://files/cache/Parse_Dn.js\\\", JSON.parse(fetch(\\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\")).rule);\\r\\n            return \\\"toast://当前是魔断模式\\\";\\r\\n        } else {\\r\\n            writeFile(\\\"hiker://files/cache/Parse_Dn.js\\\", JSON.parse(fetch(\\\"hiker://page/duan?rule=配置助手\\\")).rule);\\r\\n            return \\\"toast://当前是助手模式\\\";\\r\\n        }\\r\\n    }),\\r\\n    col_type: \\\"scroll_button\\\"\\r\\n}, {\\r\\n    title: '导入辅助',\\r\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n        html = request('https://netcut.cn/p/a5d1c8e1ecee28d3');\\r\\n        data = html.match(/{.*note_content.*updated_at.*}/)[0];\\r\\n        content = JSON.parse(data).note_content;\\r\\n        upData = JSON.parse(data).updated_at;\\r\\n        putMyVar('content', content);\\r\\n        confirm({\\r\\n            title: '是否导入',\\r\\n            content: '脚本更新日期\\\\n' + upData,\\r\\n            confirm: () => {\\r\\n                return getMyVar('content');\\r\\n            },\\r\\n            cancel: () => {\\r\\n                return 'toast://已取消导入';\\r\\n            }\\r\\n        })\\r\\n        return 'hiker://empty';\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: '解析模板',\\r\\n    url: `copy://修改★魔断通用模板★\\r\\nfunction (vipUrl) {\\r\\n    // 正常调用-弹幕开关在配置助手里自行设置是否启用\\r\\n    return $.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl);\\r\\n    /*免嗅首发模式\\r\\n    如果想要实现类似魔断的嗅探优先：免嗅加x5、Json多线路的形式，参考注释的示例代码添加免嗅代码（只是示例并不可用），并在最终返回的时候顺序多传入两个参数：一个是免嗅得到的播放地址，一个是这个解析或线路的名字\\r\\n    var parse = \\\"https://player.dxyy.cf/WndexxX.php?url=\\\";\\r\\n    bfurl = $.require(\\\"hiker://page/api?rule=API盒子\\\").parseLLQ(parse, vipUrl);\\r\\n    return $.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl, bfurl, 'llq') + \\\";{User-Agent@&&Referer@}\\\";\\r\\n    */\\r\\n}`,\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: '源码编辑',\\r\\n    url: \\\"editFile://hiker://files/rules/cy/MyParse.json\\\",\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: '导出配置',\\r\\n    url: 'share://hiker://files/rules/cy/MyParse.json',\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: '云板分享',\\r\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n        secretContent = base64Encode(base64Encode(setFile));\\r\\n        copy(\\\"助手解析导入口令¥¥\\\" + sharePaste(secretContent));\\r\\n        return 'hiker://empty';\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: '云板导入',\\r\\n    url: $('', '增量导入，请放心').input(() => {\\r\\n        if (input.match(/助手解析导入口令¥¥/)) {\\r\\n            link = input.split('¥¥')[1];\\r\\n            secretContent = parsePaste(link);\\r\\n            eval('remoteSetFile=' + base64Decode(base64Decode(secretContent)));\\r\\n            eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\r\\n            newArray = configArray.concat(remoteSetFile);\\r\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\r\\n            refreshPage(true);\\r\\n            return \\\"toast://导入成功\\\"\\r\\n        } else {\\r\\n            return \\\"toast://口令错误\\\"\\r\\n        }\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    col_type: 'line_blank'\\r\\n}, {\\r\\n    title: getMyVar('mode', '配置') == '配置' ? '““””<font color=red>配置</font>' : '配置',\\r\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n        putMyVar('mode', '配置');\\r\\n        refreshPage(true);\\r\\n        return 'hiker://empty';\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: getMyVar('mode', '配置') == '批量工具' ? '““””<font color=red>批量工具</font>' : '批量工具',\\r\\n    url: $(['删除', '分享'], 2, '请选择你要执行的操作').select(() => {\\r\\n        putMyVar('mode', '批量工具');\\r\\n        if (input == '删除') {\\r\\n            putMyVar('type', '批量删除');\\r\\n            clearMyVar('delNum');\\r\\n            clearMyVar('delArray');\\r\\n        } else {\\r\\n            putMyVar('type', '批量分享');\\r\\n            clearMyVar('shareNum');\\r\\n            clearMyVar('shareArray');\\r\\n        }\\r\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n        eval('configArray=' + setFile);\\r\\n        for (let i = 0; i < configArray.length; i++) {\\r\\n            clearMyVar('isChoose' + i);\\r\\n        }\\r\\n        refreshPage(true);\\r\\n        return 'hiker://empty';\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: getMyVar('mode', '配置') == '解析测试' ? '““””<font color=red>解析测试</font>' : '解析测试',\\r\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n        putMyVar('mode', '解析测试');\\r\\n        refreshPage(true);\\r\\n        return 'hiker://empty';\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n}, {\\r\\n    title: request('hiker://files/rules/cy/dmSwitch.txt') == 'true' ? '弹幕:开' : '弹幕:关',\\r\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n        var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\r\\n        if (dmSwitch == 'true') {\\r\\n            saveFile('hiker://files/rules/cy/dmSwitch.txt', 'false');\\r\\n        } else {\\r\\n            saveFile('hiker://files/rules/cy/dmSwitch.txt', 'true');\\r\\n        }\\r\\n        refreshPage(true);\\r\\n        return 'hiker://empty';\\r\\n    }),\\r\\n    col_type: 'scroll_button'\\r\\n});\\r\\ntry {\\r\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n    eval('configArray=' + setFile);\\r\\n    if (getMyVar('mode', '配置') == '配置') {\\r\\n        d.push({\\r\\n            col_type: 'line_blank'\\r\\n        }, {\\r\\n            title: '去重除白',\\r\\n            url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n                eval('configArray=' + setFile);\\r\\n                putMyVar('lastClean', configArray);\\r\\n                newArray = [];\\r\\n                num = 0;\\r\\n                for (let i = 0; i < configArray.length; i++) {\\r\\n                    if (getMyVar(configArray[i].url, '0') != '1' && configArray[i].url != '空解析' && configArray[i].url != undefined) {\\r\\n                        newArray.push(configArray[i]);\\r\\n                        putMyVar(configArray[i].url, '1');\\r\\n                    } else {\\r\\n                        num++;\\r\\n                    }\\r\\n                }\\r\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\r\\n                JSON.parse(getMyVar('lastClean', '[]')).forEach(item => {\\r\\n                    clearMyVar(item.url);\\r\\n                });\\r\\n                refreshPage(true);\\r\\n                return \\\"toast://本次去重数量为\\\\t\\\\t\\\\t\\\" + num;\\r\\n            }),\\r\\n            col_type: 'scroll_button'\\r\\n        }, {\\r\\n            title: '占位符处理',\\r\\n            url: $(['添加', '去除'], 2, '请选择你要执行的操作').select(() => {\\r\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n                eval('configArray=' + setFile);\\r\\n                for (let i = 0; i < configArray.length; i++) {\\r\\n                    if (input == '添加') {\\r\\n                        if (configArray[i].url.match(/\\\\?url=/)) {\\r\\n                            configArray[i].url = configArray[i].url.replace('?url=', '?placeholder=&url=');\\r\\n                        }\\r\\n                    } else {\\r\\n                        if (configArray[i].url.match(/\\\\?placeholder=&url=/)) {\\r\\n                            configArray[i].url = configArray[i].url.replace('?placeholder=&url=', '?url=');\\r\\n                        }\\r\\n                    }\\r\\n                }\\r\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n                refreshPage(true);\\r\\n                return \\\"toast://处理成功\\\";\\r\\n            }),\\r\\n            col_type: 'scroll_button'\\r\\n        });\\r\\n        for (let i = 0; i < configArray.length; i++) {\\r\\n            d.push({\\r\\n                title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + i + '</span>-' + configArray[i].name,\\r\\n                desc: configArray[i].url,\\r\\n                url: $(['编辑', '移位', '删除'], 3, '请选择你要执行的操作').select((i, configArray) => {\\r\\n                    if (input == '编辑') {\\r\\n                        config = configArray[i].name + ',' + configArray[i].url;\\r\\n                        return $(config).input((i, configArray) => {\\r\\n                            item = {\\r\\n                                name: input.split(/,|，/)[0],\\r\\n                                url: input.split(/,|，/)[1]\\r\\n                            }\\r\\n                            configArray.splice(i, 1, item);\\r\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n                            refreshPage(false);\\r\\n                            return \\\"toast://更新成功\\\"\\r\\n                        }, i, configArray)\\r\\n                    } else if (input == '移位') {\\r\\n                        return $('0', '你想排第几？序号从0开始~').input((i, configArray) => {\\r\\n                            if (input > configArray.length - 1) {\\r\\n                                input = configArray.length - 1;\\r\\n                            } else if (input < 0) {\\r\\n                                input = 0;\\r\\n                            }\\r\\n                            temp = configArray[i];\\r\\n                            if (i > input) {\\r\\n                                for (let index = i; index > input; index--) {\\r\\n                                    configArray[index] = configArray[index - 1];\\r\\n                                }\\r\\n                            } else {\\r\\n                                for (let index = i; index < input; index++) {\\r\\n                                    configArray[index] = configArray[index + 1];\\r\\n                                }\\r\\n                            }\\r\\n                            configArray[input] = temp;\\r\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n                            refreshPage(false);\\r\\n                            return \\\"toast://移位成功\\\"\\r\\n                        }, i, configArray)\\r\\n                    } else {\\r\\n                        configArray.splice(i, 1);\\r\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n                        refreshPage(false);\\r\\n                        return \\\"toast://删除成功\\\"\\r\\n                    }\\r\\n                }, i, configArray),\\r\\n                col_type: 'text_1'\\r\\n            });\\r\\n        }\\r\\n    } else if (getMyVar('mode', '配置') == '批量工具') {\\r\\n        if (getMyVar('type', '批量删除') == '批量删除') {\\r\\n            d.push({\\r\\n                title: '确认删除\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getMyVar('delNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\r\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n                    if (getMyVar('delNum', '0') == '0') {\\r\\n                        return 'toast://请先选择要删除的解析！'\\r\\n                    } else {\\r\\n                        delArray = JSON.parse(getMyVar('delArray'));\\r\\n                        log(delArray);\\r\\n                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n                        eval('configArray=' + setFile);\\r\\n                        newArray = [];\\r\\n                        for (let i = 0; i < configArray.length; i++) {\\r\\n                            if (!delArray.includes(i)) {\\r\\n                                newArray.push(configArray[i]);\\r\\n                            }\\r\\n                        }\\r\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\r\\n                        delNum=getMyVar('delNum', '0');\\r\\n                        clearMyVar('delNum');\\r\\n                        clearMyVar('delArray');\\r\\n                        for (let i = 0; i < configArray.length; i++) {\\r\\n                            clearMyVar('isChoose' + i);\\r\\n                        }\\r\\n                        refreshPage(true);\\r\\n                        return \\\"toast://共删除\\\"+delNum+'条解析';\\r\\n                    }\\r\\n                }),\\r\\n                col_type: 'text_center_1',\\r\\n                extra: {\\r\\n                    id: 'delBtn'\\r\\n                }\\r\\n            });\\r\\n            index = 0;\\r\\n            configArray.forEach(item => {\\r\\n                d.push({\\r\\n                    title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name,\\r\\n                    desc: item.url,\\r\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\r\\n                        if (getMyVar('isChoose' + index, 'no') == 'yes') {\\r\\n                            log(index);\\r\\n                            delArray = JSON.parse(getMyVar('delArray', '[]'));\\r\\n                            delNum = Number(getMyVar('delNum', '0')) - 1;\\r\\n                            delArray.pop(index);\\r\\n                            putMyVar('delArray', delArray);\\r\\n                            putMyVar('delNum', delNum);\\r\\n                            updateItem(index + '', {\\r\\n                                title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name,\\r\\n                            });\\r\\n                            updateItem('delBtn', {\\r\\n                                title: '确认删除\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getMyVar('delNum', '0') + '</span>\\\\t\\\\t\\\\t条解析'\\r\\n                            });\\r\\n                            putMyVar('isChoose' + index, 'no');\\r\\n                            return 'hiker://empty';\\r\\n                        } else {\\r\\n                            delArray = JSON.parse(getMyVar('delArray', '[]'));\\r\\n                            delNum = Number(getMyVar('delNum', '0')) + 1;\\r\\n                            delArray.push(index);\\r\\n                            log(delArray);\\r\\n                            putMyVar('delArray', delArray);\\r\\n                            putMyVar('delNum', delNum);\\r\\n                            updateItem(index + '', {\\r\\n                                title: '‘‘’’<span style=\\\"color:red\\\">' + index + '-' + item.name + '</span>',\\r\\n                            });\\r\\n                            updateItem('delBtn', {\\r\\n                                title: '确认删除\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getMyVar('delNum', '0') + '</span>\\\\t\\\\t\\\\t条解析'\\r\\n                            });\\r\\n                            putMyVar('isChoose' + index, 'yes');\\r\\n                            return 'hiker://empty';\\r\\n                        }\\r\\n                    }, index, item),\\r\\n                    col_type: 'text_1',\\r\\n                    extra: {\\r\\n                        id: index + ''\\r\\n                    }\\r\\n                });\\r\\n                index++;\\r\\n            });\\r\\n        } else {\\r\\n            d.push({\\r\\n                title: '确认分享\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getMyVar('shareNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\r\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n                    if (getMyVar('shareNum', '0') == '0') {\\r\\n                        return 'toast://请先选择要分享的解析！'\\r\\n                    } else {\\r\\n                        shareArray = JSON.parse(getMyVar('shareArray'));\\r\\n                        log(shareArray);\\r\\n                        eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\r\\n                        shareFile = [];\\r\\n                        for (let i = 0; i < configArray.length; i++) {\\r\\n                            if (shareArray.includes(i)) {\\r\\n                                shareFile.push(configArray[i]);\\r\\n                            }\\r\\n                        }\\r\\n                        secretContent = base64Encode(base64Encode(JSON.stringify(shareFile)));\\r\\n                        copy(\\\"助手解析导入口令¥¥\\\" + sharePaste(secretContent));\\r\\n                        clearMyVar('shareNum');\\r\\n                        clearMyVar('shareArray');\\r\\n                        for (let i = 0; i < configArray.length; i++) {\\r\\n                            clearMyVar('isChoose' + i);\\r\\n                        }\\r\\n                        refreshPage(true);\\r\\n                        return \\\"toast://分享成功\\\"\\r\\n                    }\\r\\n                }),\\r\\n                col_type: 'text_center_1',\\r\\n                extra: {\\r\\n                    id: 'shareBtn'\\r\\n                }\\r\\n            });\\r\\n            index = 0;\\r\\n            configArray.forEach(item => {\\r\\n                d.push({\\r\\n                    title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name,\\r\\n                    desc: item.url,\\r\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\r\\n                        if (getMyVar('isChoose' + index, 'no') == 'yes') {\\r\\n                            log(index);\\r\\n                            shareArray = JSON.parse(getMyVar('shareArray', '[]'));\\r\\n                            shareNum = Number(getMyVar('shareNum', '0')) - 1;\\r\\n                            shareArray.pop(index);\\r\\n                            putMyVar('shareArray', shareArray);\\r\\n                            putMyVar('shareNum', shareNum);\\r\\n                            updateItem(index + '', {\\r\\n                                title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name,\\r\\n                            });\\r\\n                            updateItem('shareBtn', {\\r\\n                                title: '确认分享\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getMyVar('shareNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\r\\n                            });\\r\\n                            putMyVar('isChoose' + index, 'no');\\r\\n                            return 'hiker://empty';\\r\\n                        } else {\\r\\n                            shareArray = JSON.parse(getMyVar('shareArray', '[]'));\\r\\n                            shareNum = Number(getMyVar('shareNum', '0')) + 1;\\r\\n                            shareArray.push(index);\\r\\n                            log(shareArray);\\r\\n                            putMyVar('shareArray', shareArray);\\r\\n                            putMyVar('shareNum', shareNum);\\r\\n                            updateItem(index + '', {\\r\\n                                title: '‘‘’’<span style=\\\"color:red\\\">' + index + '-' + item.name + '</span>',\\r\\n                            });\\r\\n                            updateItem('shareBtn', {\\r\\n                                title: '确认分享\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getMyVar('shareNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\r\\n                            });\\r\\n                            putMyVar('isChoose' + index, 'yes');\\r\\n                            return 'hiker://empty';\\r\\n                        }\\r\\n                    }, index, item),\\r\\n                    col_type: 'text_1',\\r\\n                    extra: {\\r\\n                        id: index + ''\\r\\n                    }\\r\\n                });\\r\\n                index++;\\r\\n            });\\r\\n        }\\r\\n    } else if (getMyVar('mode', '配置') == '解析测试') {\\r\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n        eval('configArray=' + setFile);\\r\\n        configArray.forEach(item => {\\r\\n            jiexi = item.url;\\r\\n            d.push({\\r\\n                title: item.name + '\\\\t\\\\t\\\\t‘‘’’<font color=\\\"#6EB897\\\"><small>➮前往测试</small></font>',\\r\\n                desc: item.url,\\r\\n                url: $().rule((jiexi) => {\\r\\n                    let d = [];\\r\\n                    d.push({\\r\\n                        title: '编辑测试链接',\\r\\n                        url: 'editFile://hiker://files/rules/cy/ceshi.json',\\r\\n                        col_type: 'text_2'\\r\\n                    }, {\\r\\n                        title: '弹幕:' + getMyVar('dmSwitch', '关'),\\r\\n                        url: $('hiker://empty#noLoading#').lazyRule(() => {\\r\\n                            if (getMyVar('dmSwitch', '关') == '关') {\\r\\n                                putMyVar('dmSwitch', '开');\\r\\n                            } else {\\r\\n                                putMyVar('dmSwitch', '关');\\r\\n                            }\\r\\n                            updateItem('dmSwitch', {\\r\\n                                title: '弹幕:' + getMyVar('dmSwitch', '关'),\\r\\n                            });\\r\\n                            return 'hiker://empty';\\r\\n                        }),\\r\\n                        col_type: 'text_2',\\r\\n                        extra: {\\r\\n                            id: 'dmSwitch'\\r\\n                        }\\r\\n                    });\\r\\n                    if (!fileExist('hiker://files/rules/cy/ceshi.json')) {\\r\\n                        ceshiData = {\\r\\n                            '腾讯视频': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/3/106_3a0d212e17cb95e232ffe155460385cb_con_130x130.png',\\r\\n                                url: 'https://v.qq.com/x/cover/mzc00200rmpaf40/n0036l4tntc.html'\\r\\n                            },\\r\\n                            '优酷': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/9/110_8ff06e0c237760cd57d2508fd98c8414_con_130x130.png',\\r\\n                                url: 'https://v.youku.com/v_show/id_XNDc0MDE1NTk1Mg==.html'\\r\\n                            },\\r\\n                            '爱奇艺': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/09/8/110_901f2ef37af2fea25e5d9648f551ce31_con_130x130.png',\\r\\n                                url: 'http://www.iqiyi.com/v_2ga8zts86ys.html'\\r\\n                            },\\r\\n                            '芒果TV': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/6/110_1834d296aa5b5666a7d94b1e3479ae64_con_130x130.png',\\r\\n                                url: 'http://www.mgtv.com/b/349253/10424300.html'\\r\\n                            },\\r\\n                            '哔哩哔哩': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/4/110_8e2e3d88c45025b380e69817d6fb53b1_con_130x130.png',\\r\\n                                url: 'https://m.bilibili.com/bangumi/play/ep428993'\\r\\n                            },\\r\\n                            '搜狐视频': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/9/110_532a51f8431efc377808c1ffff2da36f_con_130x130.png',\\r\\n                                url: 'https://m.tv.sohu.com/v7329441.shtml',\\r\\n                            },\\r\\n                            '西瓜视频': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/5/110_a86265882ed18c6190566e9ea25f9698_con_130x130.png',\\r\\n                                url: 'https://www.ixigua.com/6699356792905794055'\\r\\n                            },\\r\\n                            '乐视': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/8/2_35b5d4373f4bcba28f39486e4f1164d9_con_130x130.png',\\r\\n                                url: 'https://m.le.com/vplay_76954333.html?from=ajax',\\r\\n                            },\\r\\n                            '1905': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/18/4/110_5f24b1052fed4f7fc73593a8ef27276d_con_130x130.png',\\r\\n                                url: 'https://vip.1905.com/m/play/1429725.shtml'\\r\\n                            },\\r\\n                            '风行视频': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/4/110_6f6af9f99b2629e51f0b0a33cdff1d9e_con_130x130.png',\\r\\n                                url: 'http://m.fun.tv/mplay/?mid=95719'\\r\\n                            },\\r\\n                            'PPTV视频': {\\r\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/28/5/110_a455b2951227040ee62955edcfb89d72_con_130x130.png',\\r\\n                                url: 'https://v.pptv.com/show/zVn3dJXt1xV49l4.html'\\r\\n                            },\\r\\n                            '龙腾': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/4.png',\\r\\n                                url: 'LT-1ec3f6754f68586ed7f92c3e995cfca6'\\r\\n                            },\\r\\n                            '人人迷': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/6.png',\\r\\n                                url: 'renrenmi-ab924e11d2d69397'\\r\\n                            },\\r\\n                            '五毒': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/30.png',\\r\\n                                url: 'wuduyun-1649431307021'\\r\\n                            },\\r\\n                            '多多': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/49.png',\\r\\n                                url: 'https://m3u8.cache.suoyo.cc/m3u8/202203/8/aaabd92da26774c68850a023153c80f1ae6fa9be.m3u8'\\r\\n                            },\\r\\n                            '融兴': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/80.png',\\r\\n                                url: 'RongXingVR-4215645581932'\\r\\n                            },\\r\\n                            '雪人': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/q/133.png',\\r\\n                                url: 'xueren-1646823072'\\r\\n                            },\\r\\n                            '旋风云': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/54.png',\\r\\n                                url: 'xfy-529e6457953d545f'\\r\\n                            },\\r\\n                            '瑞丰资源': {\\r\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/72.png',\\r\\n                                url: 'https://1.ruifenglb.com/play/1644914595.m3u8'\\r\\n                            },\\r\\n                        };\\r\\n                        saveFile('hiker://files/rules/cy/ceshi.json', JSON.stringify(ceshiData));\\r\\n                    }\\r\\n                    ceshiData = JSON.parse(request('hiker://files/rules/cy/ceshi.json'));\\r\\n                    for (var prop in ceshiData) {\\r\\n                        d.push({\\r\\n                            title: prop,\\r\\n                            img: ceshiData[prop].pic + '@Referer=',\\r\\n                            url: $('#noLoading##noHistory#').lazyRule((ceshiData, prop, jiexi) => {\\r\\n                                vipUrl = ceshiData[prop].url;\\r\\n                                urls = [\\\"video://\\\" + jiexi + vipUrl];\\r\\n                                names = ['测试']\\r\\n                                if (getMyVar('dmSwitch', '关') == '开') {\\r\\n                                    return $.require(\\\"hiker://page/videoDm.js?rule=dm盒子\\\").getFor(vipUrl, urls, names);\\r\\n                                } else {\\r\\n                                    return \\\"video://\\\" + jiexi + vipUrl;\\r\\n                                }\\r\\n                            }, ceshiData, prop, jiexi),\\r\\n                            col_type: 'icon_4'\\r\\n                        });\\r\\n                    }\\r\\n                    d.push({\\r\\n                        title: '测试',\\r\\n                        desc: '你还可以任意输入一个视频地址测试当前解析~',\\r\\n                        url: $.toString((jiexi) => {\\r\\n                            vipUrl = getMyVar('ceshiLink');\\r\\n                            urls = [\\\"video://\\\" + jiexi + vipUrl];\\r\\n                            names = ['测试']\\r\\n                            if (getMyVar('dmSwitch', '关') == '开') {\\r\\n                                return $.require(\\\"hiker://page/videoDm.js?rule=dm盒子\\\").getFor(vipUrl, urls, names);\\r\\n                            } else {\\r\\n                                return \\\"video://\\\" + jiexi + vipUrl;\\r\\n                            }\\r\\n                        }, jiexi),\\r\\n                        col_type: 'input',\\r\\n                        extra: {\\r\\n                            type: 'textarea',\\r\\n                            height: -1,\\r\\n                            onChange: \\\"putMyVar('ceshiLink',input)\\\",\\r\\n                        }\\r\\n                    }, {\\r\\n                        title: '删除该解析',\\r\\n                        desc: '请认真考虑~',\\r\\n                        url: $('hiker://empty#noLoading#').lazyRule((jiexi) => {\\r\\n                            Array.prototype.indexOf = function (val) {\\r\\n                                for (var i = 0; i < this.length; i++) {\\r\\n                                    if (this[i].url == val) return i;\\r\\n                                }\\r\\n                                return -1;\\r\\n                            };\\r\\n                            Array.prototype.remove = function (val) {\\r\\n                                var index = this.indexOf(val);\\r\\n                                if (index > -1) {\\r\\n                                    this.splice(index, 1);\\r\\n                                }\\r\\n                            };\\r\\n                            setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n                            eval('configArray=' + setFile);\\r\\n                            configArray.remove(jiexi); \\r\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n                            // 关闭页面并刷新前一个页面\\r\\n                            back(true);\\r\\n                            return \\\"toast://删除成功~\\\";\\r\\n                        }, jiexi),\\r\\n                        col_type: 'text_center_1'\\r\\n                    });\\r\\n                    setHomeResult(d);\\r\\n                }, jiexi),\\r\\n                col_type: 'text_1'\\r\\n            });\\r\\n        });\\r\\n    }\\r\\n} catch (e) {\\r\\n    d.push({\\r\\n        title: '配置文件或已损坏~',\\r\\n        desc: '点击前去检查,自行编辑文件修复',\\r\\n        url: \\\"editFile://hiker://files/rules/cy/MyParse.json\\\",\\r\\n        col_type: 'text_center_1'\\r\\n    }, {\\r\\n        title: '一键重生~',\\r\\n        desc: '回归原初状态，将清空解析配置!!!',\\r\\n        url: $('#noLoading#').lazyRule(() => {\\r\\n            configArray = [];\\r\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n        }),\\r\\n        col_type: 'text_center_1'\\r\\n    });\\r\\n}\\r\\nsetResult(d);\\r\\n\"},{\"col_type\":\"movie_3\",\"name\":\"调用路由\",\"path\":\"mulParse\",\"rule\":\"/*\\r\\n vipUrl:官网地址;返回值JSON格式的多线路视频地址\\r\\n调用接口：$.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl);\\r\\n */\\r\\n$.exports.mulParse = function (vipUrl,bfLink,jiexiName) {\\r\\n    if (vipUrl.indexOf('douban') != -1) {\\r\\n        vipUrl=vipUrl.split('?ptag=')[0]\\r\\n    }\\r\\n    log('视频原地址：'+vipUrl);\\r\\n    if (bfLink&&jiexiName) {\\r\\n        var urls = bfLink;\\r\\n        var names = jiexiName;\\r\\n    }else{\\r\\n        var urls = [];\\r\\n        var names = [];\\r\\n    }\\r\\n    log(\\\"多线路解析开始\\\")\\r\\n    var list = JSON.parse(readFile(\\\"hiker://files/rules/cy/MyParse.json\\\"))\\r\\n    list.forEach(item => {\\r\\n        urls.push(\\\"video://\\\" + item.url + vipUrl);\\r\\n        names.push(item.name);\\r\\n    });\\r\\n    log(`当前启用解析：${urls.length}个`)\\r\\n    var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\r\\n    if (dmSwitch == 'true') {\\r\\n        return $.require(\\\"hiker://page/videoDm.js?rule=dm盒子\\\").getFor(vipUrl, urls, names);\\r\\n    } else {\\r\\n        return JSON.stringify({\\r\\n            urls: urls,\\r\\n            names: names\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\"},{\"col_type\":\"movie_3\",\"name\":\"断插插件\",\"path\":\"duan\",\"rule\":\"function aytmParse(vipUrl) {\\r\\n    return $.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl);\\r\\n}\\r\\n\"}],\"saved\":false,\"title\":\"配置助手\",\"version\":0,\"url\":\"hiker://empty;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_3\",\"find_rule\":\"js:(\\n() => {\\n    let d = [];\\n    d.push({title: \\\"\\\\u6559\\\\u7a0b\\\\u6587\\\\u6863\\\", url: \\\"https://www.yuque.com/chenying-k73sc/lhcvqd/bsh5e2\\\", desc: \\\"float&&100%\\\", col_type: \\\"x5_webview_single\\\"});\\n    setResult(d);\\n}\\n)()\",\"group\":\"工具\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"主页\\\",\\\"path\\\":\\\"home\\\",\\\"rule\\\":\\\"addListener('onClose', () => {\\\\r\\\\n    clearMyVar('nameArray');\\\\r\\\\n    clearMyVar('urlArray');\\\\r\\\\n    clearMyVar('switch');\\\\r\\\\n})\\\\r\\\\naddListener('onRefresh', () => {\\\\r\\\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n    eval('configArray=' + setFile);\\\\r\\\\n    clearMyVar('delNum');\\\\r\\\\n    clearMyVar('delArray');\\\\r\\\\n    clearMyVar('shareNum');\\\\r\\\\n    clearMyVar('shareArray');\\\\r\\\\n    for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n        clearMyVar('isChoose' + i);\\\\r\\\\n    }\\\\r\\\\n})\\\\r\\\\nif (!fileExist('hiker://files/rules/cy/MyParse.json')) {\\\\r\\\\n    configArray = [];\\\\r\\\\n    saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n}\\\\r\\\\nif (!fileExist('hiker://files/rules/cy/dmSwitch.txt')) {\\\\r\\\\n    saveFile('hiker://files/rules/cy/dmSwitch.txt', '开');\\\\r\\\\n}\\\\r\\\\nvar d = [];\\\\r\\\\nd.push({\\\\r\\\\n    title: '‘‘’’<big><span style=\\\\\\\"color:#6EB897\\\\\\\">添 加 解 析</span></big>',\\\\r\\\\n    url: $('#noLoading#').lazyRule(() => {\\\\r\\\\n        if (getMyVar('switch', '关') == '开') {\\\\r\\\\n            for (let i = 0; i < 3; i++) {\\\\r\\\\n                deleteItem('add')\\\\r\\\\n            }\\\\r\\\\n            putMyVar('switch', '关');\\\\r\\\\n        } else {\\\\r\\\\n            addArray = [{\\\\r\\\\n                desc: '解析名称，一行一个',\\\\r\\\\n                col_type: 'input',\\\\r\\\\n                extra: {\\\\r\\\\n                    titleVisible: false,\\\\r\\\\n                    type: 'textarea',\\\\r\\\\n                    height: -1,\\\\r\\\\n                    highlight: true,\\\\r\\\\n                    onChange: \\\\\\\"putMyVar('nameArray',input)\\\\\\\",\\\\r\\\\n                    id: 'add'\\\\r\\\\n                }\\\\r\\\\n            }, {\\\\r\\\\n                desc: '解析，一行一个',\\\\r\\\\n                col_type: 'input',\\\\r\\\\n                extra: {\\\\r\\\\n                    titleVisible: false,\\\\r\\\\n                    type: 'textarea',\\\\r\\\\n                    height: -1,\\\\r\\\\n                    highlight: true,\\\\r\\\\n                    onChange: \\\\\\\"putMyVar('urlArray',input)\\\\\\\",\\\\r\\\\n                    id: 'add'\\\\r\\\\n                }\\\\r\\\\n            }, {\\\\r\\\\n                title: '保存',\\\\r\\\\n                url: $().lazyRule(() => {\\\\r\\\\n                    nameArray = getMyVar('nameArray').split('\\\\\\\\n');\\\\r\\\\n                    urlArray = getMyVar('urlArray').split('\\\\\\\\n');\\\\r\\\\n                    dataLength = nameArray.length > urlArray.length ? nameArray.length : urlArray.length;\\\\r\\\\n                    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n                    eval('configArray=' + setFile);\\\\r\\\\n                    for (let i = 0; i < dataLength; i++) {\\\\r\\\\n                        jiexiName = i > nameArray.length - 1 ? '未命名' : (nameArray[i] == '' ? '未命名' : nameArray[i]);\\\\r\\\\n                        jiexiUrl = i > urlArray.length - 1 ? '空解析' : (urlArray[i] == '' ? '空解析' : urlArray[i]);\\\\r\\\\n                        configArray.push({\\\\r\\\\n                            name: jiexiName,\\\\r\\\\n                            url: jiexiUrl\\\\r\\\\n                        });\\\\r\\\\n                    }\\\\r\\\\n                    saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n                    putMyVar('switch', '关');\\\\r\\\\n                    refreshPage(true);\\\\r\\\\n                    return \\\\\\\"toast://保存成功\\\\\\\"\\\\r\\\\n                }),\\\\r\\\\n                col_type: 'text_center_1',\\\\r\\\\n                extra: {\\\\r\\\\n                    id: 'add'\\\\r\\\\n                }\\\\r\\\\n            }]\\\\r\\\\n            addItemAfter('addFunction', addArray);\\\\r\\\\n            putMyVar('switch', '开');\\\\r\\\\n        }\\\\r\\\\n        return 'toast://已切换switch为:' + getMyVar('switch', '开')\\\\r\\\\n    }),\\\\r\\\\n    desc: '简单、无忧、独立的解析管理工具，养老专用',\\\\r\\\\n    col_type: 'text_center_1',\\\\r\\\\n    extra: {\\\\r\\\\n        id: 'addFunction'\\\\r\\\\n    }\\\\r\\\\n}, {\\\\r\\\\n    col_type: 'line_blank'\\\\r\\\\n}, {\\\\r\\\\n    title: '‘‘’’<font color=\\\\\\\"#6EB897\\\\\\\">说明</font>',\\\\r\\\\n    url: $().lazyRule(() => {\\\\r\\\\n        return $('hiker://empty').rule(() => {\\\\r\\\\n            let d = [];\\\\r\\\\n            d.push({\\\\r\\\\n                title: '教程文档',\\\\r\\\\n                url: 'https://www.yuque.com/chenying-k73sc/lhcvqd/bsh5e2',\\\\r\\\\n                desc: \\\\\\\"float&&100%\\\\\\\",\\\\r\\\\n                col_type: 'x5_webview_single'\\\\r\\\\n            });\\\\r\\\\n            setResult(d);\\\\r\\\\n        });\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: \\\\\\\"切换插件\\\\\\\",\\\\r\\\\n    url: $(['魔断', '助手'], 2, '请选择你要执行的操作').select(() => {\\\\r\\\\n        if (input == '魔断') {\\\\r\\\\n            writeFile(\\\\\\\"hiker://files/cache/Parse_Dn.js\\\\\\\", JSON.parse(fetch(\\\\\\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\\\\\")).rule);\\\\r\\\\n            return \\\\\\\"toast://当前是魔断模式\\\\\\\";\\\\r\\\\n        } else {\\\\r\\\\n            writeFile(\\\\\\\"hiker://files/cache/Parse_Dn.js\\\\\\\", JSON.parse(fetch(\\\\\\\"hiker://page/duan?rule=配置助手\\\\\\\")).rule);\\\\r\\\\n            return \\\\\\\"toast://当前是助手模式\\\\\\\";\\\\r\\\\n        }\\\\r\\\\n    }),\\\\r\\\\n    col_type: \\\\\\\"scroll_button\\\\\\\"\\\\r\\\\n}, {\\\\r\\\\n    title: '导入辅助',\\\\r\\\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n        html = request('https://netcut.cn/p/a5d1c8e1ecee28d3');\\\\r\\\\n        data = html.match(/{.*note_content.*updated_at.*}/)[0];\\\\r\\\\n        content = JSON.parse(data).note_content;\\\\r\\\\n        upData = JSON.parse(data).updated_at;\\\\r\\\\n        putMyVar('content', content);\\\\r\\\\n        confirm({\\\\r\\\\n            title: '是否导入',\\\\r\\\\n            content: '脚本更新日期\\\\\\\\n' + upData,\\\\r\\\\n            confirm: () => {\\\\r\\\\n                return getMyVar('content');\\\\r\\\\n            },\\\\r\\\\n            cancel: () => {\\\\r\\\\n                return 'toast://已取消导入';\\\\r\\\\n            }\\\\r\\\\n        })\\\\r\\\\n        return 'hiker://empty';\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: '解析模板',\\\\r\\\\n    url: `copy://修改★魔断通用模板★\\\\r\\\\nfunction (vipUrl) {\\\\r\\\\n    // 正常调用-弹幕开关在配置助手里自行设置是否启用\\\\r\\\\n    return $.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl);\\\\r\\\\n    /*免嗅首发模式\\\\r\\\\n    如果想要实现类似魔断的嗅探优先：免嗅加x5、Json多线路的形式，参考注释的示例代码添加免嗅代码（只是示例并不可用），并在最终返回的时候顺序多传入两个参数：一个是免嗅得到的播放地址，一个是这个解析或线路的名字\\\\r\\\\n    var parse = \\\\\\\"https://player.dxyy.cf/WndexxX.php?url=\\\\\\\";\\\\r\\\\n    bfurl = $.require(\\\\\\\"hiker://page/api?rule=API盒子\\\\\\\").parseLLQ(parse, vipUrl);\\\\r\\\\n    return $.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl, bfurl, 'llq') + \\\\\\\";{User-Agent@&&Referer@}\\\\\\\";\\\\r\\\\n    */\\\\r\\\\n}`,\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: '源码编辑',\\\\r\\\\n    url: \\\\\\\"editFile://hiker://files/rules/cy/MyParse.json\\\\\\\",\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: '导出配置',\\\\r\\\\n    url: 'share://hiker://files/rules/cy/MyParse.json',\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: '云板分享',\\\\r\\\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n        secretContent = base64Encode(base64Encode(setFile));\\\\r\\\\n        copy(\\\\\\\"助手解析导入口令¥¥\\\\\\\" + sharePaste(secretContent));\\\\r\\\\n        return 'hiker://empty';\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: '云板导入',\\\\r\\\\n    url: $('', '增量导入，请放心').input(() => {\\\\r\\\\n        if (input.match(/助手解析导入口令¥¥/)) {\\\\r\\\\n            link = input.split('¥¥')[1];\\\\r\\\\n            secretContent = parsePaste(link);\\\\r\\\\n            eval('remoteSetFile=' + base64Decode(base64Decode(secretContent)));\\\\r\\\\n            eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\\\r\\\\n            newArray = configArray.concat(remoteSetFile);\\\\r\\\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\\\r\\\\n            refreshPage(true);\\\\r\\\\n            return \\\\\\\"toast://导入成功\\\\\\\"\\\\r\\\\n        } else {\\\\r\\\\n            return \\\\\\\"toast://口令错误\\\\\\\"\\\\r\\\\n        }\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    col_type: 'line_blank'\\\\r\\\\n}, {\\\\r\\\\n    title: getMyVar('mode', '配置') == '配置' ? '““””<font color=red>配置</font>' : '配置',\\\\r\\\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n        putMyVar('mode', '配置');\\\\r\\\\n        refreshPage(true);\\\\r\\\\n        return 'hiker://empty';\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: getMyVar('mode', '配置') == '批量工具' ? '““””<font color=red>批量工具</font>' : '批量工具',\\\\r\\\\n    url: $(['删除', '分享'], 2, '请选择你要执行的操作').select(() => {\\\\r\\\\n        putMyVar('mode', '批量工具');\\\\r\\\\n        if (input == '删除') {\\\\r\\\\n            putMyVar('type', '批量删除');\\\\r\\\\n            clearMyVar('delNum');\\\\r\\\\n            clearMyVar('delArray');\\\\r\\\\n        } else {\\\\r\\\\n            putMyVar('type', '批量分享');\\\\r\\\\n            clearMyVar('shareNum');\\\\r\\\\n            clearMyVar('shareArray');\\\\r\\\\n        }\\\\r\\\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n        eval('configArray=' + setFile);\\\\r\\\\n        for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n            clearMyVar('isChoose' + i);\\\\r\\\\n        }\\\\r\\\\n        refreshPage(true);\\\\r\\\\n        return 'hiker://empty';\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: getMyVar('mode', '配置') == '解析测试' ? '““””<font color=red>解析测试</font>' : '解析测试',\\\\r\\\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n        putMyVar('mode', '解析测试');\\\\r\\\\n        refreshPage(true);\\\\r\\\\n        return 'hiker://empty';\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n}, {\\\\r\\\\n    title: request('hiker://files/rules/cy/dmSwitch.txt') == 'true' ? '弹幕:开' : '弹幕:关',\\\\r\\\\n    url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n        var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\\\r\\\\n        if (dmSwitch == 'true') {\\\\r\\\\n            saveFile('hiker://files/rules/cy/dmSwitch.txt', 'false');\\\\r\\\\n        } else {\\\\r\\\\n            saveFile('hiker://files/rules/cy/dmSwitch.txt', 'true');\\\\r\\\\n        }\\\\r\\\\n        refreshPage(true);\\\\r\\\\n        return 'hiker://empty';\\\\r\\\\n    }),\\\\r\\\\n    col_type: 'scroll_button'\\\\r\\\\n});\\\\r\\\\ntry {\\\\r\\\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n    eval('configArray=' + setFile);\\\\r\\\\n    if (getMyVar('mode', '配置') == '配置') {\\\\r\\\\n        d.push({\\\\r\\\\n            col_type: 'line_blank'\\\\r\\\\n        }, {\\\\r\\\\n            title: '去重除白',\\\\r\\\\n            url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n                eval('configArray=' + setFile);\\\\r\\\\n                putMyVar('lastClean', configArray);\\\\r\\\\n                newArray = [];\\\\r\\\\n                num = 0;\\\\r\\\\n                for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n                    if (getMyVar(configArray[i].url, '0') != '1' && configArray[i].url != '空解析' && configArray[i].url != undefined) {\\\\r\\\\n                        newArray.push(configArray[i]);\\\\r\\\\n                        putMyVar(configArray[i].url, '1');\\\\r\\\\n                    } else {\\\\r\\\\n                        num++;\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\\\r\\\\n                JSON.parse(getMyVar('lastClean', '[]')).forEach(item => {\\\\r\\\\n                    clearMyVar(item.url);\\\\r\\\\n                });\\\\r\\\\n                refreshPage(true);\\\\r\\\\n                return \\\\\\\"toast://本次去重数量为\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\" + num;\\\\r\\\\n            }),\\\\r\\\\n            col_type: 'scroll_button'\\\\r\\\\n        }, {\\\\r\\\\n            title: '占位符处理',\\\\r\\\\n            url: $(['添加', '去除'], 2, '请选择你要执行的操作').select(() => {\\\\r\\\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n                eval('configArray=' + setFile);\\\\r\\\\n                for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n                    if (input == '添加') {\\\\r\\\\n                        if (configArray[i].url.match(/\\\\\\\\?url=/)) {\\\\r\\\\n                            configArray[i].url = configArray[i].url.replace('?url=', '?placeholder=&url=');\\\\r\\\\n                        }\\\\r\\\\n                    } else {\\\\r\\\\n                        if (configArray[i].url.match(/\\\\\\\\?placeholder=&url=/)) {\\\\r\\\\n                            configArray[i].url = configArray[i].url.replace('?placeholder=&url=', '?url=');\\\\r\\\\n                        }\\\\r\\\\n                    }\\\\r\\\\n                }\\\\r\\\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n                refreshPage(true);\\\\r\\\\n                return \\\\\\\"toast://处理成功\\\\\\\";\\\\r\\\\n            }),\\\\r\\\\n            col_type: 'scroll_button'\\\\r\\\\n        });\\\\r\\\\n        for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n            d.push({\\\\r\\\\n                title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + i + '</span>-' + configArray[i].name,\\\\r\\\\n                desc: configArray[i].url,\\\\r\\\\n                url: $(['编辑', '移位', '删除'], 3, '请选择你要执行的操作').select((i, configArray) => {\\\\r\\\\n                    if (input == '编辑') {\\\\r\\\\n                        config = configArray[i].name + ',' + configArray[i].url;\\\\r\\\\n                        return $(config).input((i, configArray) => {\\\\r\\\\n                            item = {\\\\r\\\\n                                name: input.split(/,|，/)[0],\\\\r\\\\n                                url: input.split(/,|，/)[1]\\\\r\\\\n                            }\\\\r\\\\n                            configArray.splice(i, 1, item);\\\\r\\\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n                            refreshPage(false);\\\\r\\\\n                            return \\\\\\\"toast://更新成功\\\\\\\"\\\\r\\\\n                        }, i, configArray)\\\\r\\\\n                    } else if (input == '移位') {\\\\r\\\\n                        return $('0', '你想排第几？序号从0开始~').input((i, configArray) => {\\\\r\\\\n                            if (input > configArray.length - 1) {\\\\r\\\\n                                input = configArray.length - 1;\\\\r\\\\n                            } else if (input < 0) {\\\\r\\\\n                                input = 0;\\\\r\\\\n                            }\\\\r\\\\n                            temp = configArray[i];\\\\r\\\\n                            if (i > input) {\\\\r\\\\n                                for (let index = i; index > input; index--) {\\\\r\\\\n                                    configArray[index] = configArray[index - 1];\\\\r\\\\n                                }\\\\r\\\\n                            } else {\\\\r\\\\n                                for (let index = i; index < input; index++) {\\\\r\\\\n                                    configArray[index] = configArray[index + 1];\\\\r\\\\n                                }\\\\r\\\\n                            }\\\\r\\\\n                            configArray[input] = temp;\\\\r\\\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n                            refreshPage(false);\\\\r\\\\n                            return \\\\\\\"toast://移位成功\\\\\\\"\\\\r\\\\n                        }, i, configArray)\\\\r\\\\n                    } else {\\\\r\\\\n                        configArray.splice(i, 1);\\\\r\\\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n                        refreshPage(false);\\\\r\\\\n                        return \\\\\\\"toast://删除成功\\\\\\\"\\\\r\\\\n                    }\\\\r\\\\n                }, i, configArray),\\\\r\\\\n                col_type: 'text_1'\\\\r\\\\n            });\\\\r\\\\n        }\\\\r\\\\n    } else if (getMyVar('mode', '配置') == '批量工具') {\\\\r\\\\n        if (getMyVar('type', '批量删除') == '批量删除') {\\\\r\\\\n            d.push({\\\\r\\\\n                title: '确认删除\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getMyVar('delNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\r\\\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n                    if (getMyVar('delNum', '0') == '0') {\\\\r\\\\n                        return 'toast://请先选择要删除的解析！'\\\\r\\\\n                    } else {\\\\r\\\\n                        delArray = JSON.parse(getMyVar('delArray'));\\\\r\\\\n                        log(delArray);\\\\r\\\\n                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n                        eval('configArray=' + setFile);\\\\r\\\\n                        newArray = [];\\\\r\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n                            if (!delArray.includes(i)) {\\\\r\\\\n                                newArray.push(configArray[i]);\\\\r\\\\n                            }\\\\r\\\\n                        }\\\\r\\\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\\\r\\\\n                        delNum=getMyVar('delNum', '0');\\\\r\\\\n                        clearMyVar('delNum');\\\\r\\\\n                        clearMyVar('delArray');\\\\r\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n                            clearMyVar('isChoose' + i);\\\\r\\\\n                        }\\\\r\\\\n                        refreshPage(true);\\\\r\\\\n                        return \\\\\\\"toast://共删除\\\\\\\"+delNum+'条解析';\\\\r\\\\n                    }\\\\r\\\\n                }),\\\\r\\\\n                col_type: 'text_center_1',\\\\r\\\\n                extra: {\\\\r\\\\n                    id: 'delBtn'\\\\r\\\\n                }\\\\r\\\\n            });\\\\r\\\\n            index = 0;\\\\r\\\\n            configArray.forEach(item => {\\\\r\\\\n                d.push({\\\\r\\\\n                    title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name,\\\\r\\\\n                    desc: item.url,\\\\r\\\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\\\r\\\\n                        if (getMyVar('isChoose' + index, 'no') == 'yes') {\\\\r\\\\n                            log(index);\\\\r\\\\n                            delArray = JSON.parse(getMyVar('delArray', '[]'));\\\\r\\\\n                            delNum = Number(getMyVar('delNum', '0')) - 1;\\\\r\\\\n                            delArray.pop(index);\\\\r\\\\n                            putMyVar('delArray', delArray);\\\\r\\\\n                            putMyVar('delNum', delNum);\\\\r\\\\n                            updateItem(index + '', {\\\\r\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name,\\\\r\\\\n                            });\\\\r\\\\n                            updateItem('delBtn', {\\\\r\\\\n                                title: '确认删除\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getMyVar('delNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析'\\\\r\\\\n                            });\\\\r\\\\n                            putMyVar('isChoose' + index, 'no');\\\\r\\\\n                            return 'hiker://empty';\\\\r\\\\n                        } else {\\\\r\\\\n                            delArray = JSON.parse(getMyVar('delArray', '[]'));\\\\r\\\\n                            delNum = Number(getMyVar('delNum', '0')) + 1;\\\\r\\\\n                            delArray.push(index);\\\\r\\\\n                            log(delArray);\\\\r\\\\n                            putMyVar('delArray', delArray);\\\\r\\\\n                            putMyVar('delNum', delNum);\\\\r\\\\n                            updateItem(index + '', {\\\\r\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + index + '-' + item.name + '</span>',\\\\r\\\\n                            });\\\\r\\\\n                            updateItem('delBtn', {\\\\r\\\\n                                title: '确认删除\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getMyVar('delNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析'\\\\r\\\\n                            });\\\\r\\\\n                            putMyVar('isChoose' + index, 'yes');\\\\r\\\\n                            return 'hiker://empty';\\\\r\\\\n                        }\\\\r\\\\n                    }, index, item),\\\\r\\\\n                    col_type: 'text_1',\\\\r\\\\n                    extra: {\\\\r\\\\n                        id: index + ''\\\\r\\\\n                    }\\\\r\\\\n                });\\\\r\\\\n                index++;\\\\r\\\\n            });\\\\r\\\\n        } else {\\\\r\\\\n            d.push({\\\\r\\\\n                title: '确认分享\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getMyVar('shareNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\r\\\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n                    if (getMyVar('shareNum', '0') == '0') {\\\\r\\\\n                        return 'toast://请先选择要分享的解析！'\\\\r\\\\n                    } else {\\\\r\\\\n                        shareArray = JSON.parse(getMyVar('shareArray'));\\\\r\\\\n                        log(shareArray);\\\\r\\\\n                        eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\\\r\\\\n                        shareFile = [];\\\\r\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n                            if (shareArray.includes(i)) {\\\\r\\\\n                                shareFile.push(configArray[i]);\\\\r\\\\n                            }\\\\r\\\\n                        }\\\\r\\\\n                        secretContent = base64Encode(base64Encode(JSON.stringify(shareFile)));\\\\r\\\\n                        copy(\\\\\\\"助手解析导入口令¥¥\\\\\\\" + sharePaste(secretContent));\\\\r\\\\n                        clearMyVar('shareNum');\\\\r\\\\n                        clearMyVar('shareArray');\\\\r\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\r\\\\n                            clearMyVar('isChoose' + i);\\\\r\\\\n                        }\\\\r\\\\n                        refreshPage(true);\\\\r\\\\n                        return \\\\\\\"toast://分享成功\\\\\\\"\\\\r\\\\n                    }\\\\r\\\\n                }),\\\\r\\\\n                col_type: 'text_center_1',\\\\r\\\\n                extra: {\\\\r\\\\n                    id: 'shareBtn'\\\\r\\\\n                }\\\\r\\\\n            });\\\\r\\\\n            index = 0;\\\\r\\\\n            configArray.forEach(item => {\\\\r\\\\n                d.push({\\\\r\\\\n                    title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name,\\\\r\\\\n                    desc: item.url,\\\\r\\\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\\\r\\\\n                        if (getMyVar('isChoose' + index, 'no') == 'yes') {\\\\r\\\\n                            log(index);\\\\r\\\\n                            shareArray = JSON.parse(getMyVar('shareArray', '[]'));\\\\r\\\\n                            shareNum = Number(getMyVar('shareNum', '0')) - 1;\\\\r\\\\n                            shareArray.pop(index);\\\\r\\\\n                            putMyVar('shareArray', shareArray);\\\\r\\\\n                            putMyVar('shareNum', shareNum);\\\\r\\\\n                            updateItem(index + '', {\\\\r\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name,\\\\r\\\\n                            });\\\\r\\\\n                            updateItem('shareBtn', {\\\\r\\\\n                                title: '确认分享\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getMyVar('shareNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\r\\\\n                            });\\\\r\\\\n                            putMyVar('isChoose' + index, 'no');\\\\r\\\\n                            return 'hiker://empty';\\\\r\\\\n                        } else {\\\\r\\\\n                            shareArray = JSON.parse(getMyVar('shareArray', '[]'));\\\\r\\\\n                            shareNum = Number(getMyVar('shareNum', '0')) + 1;\\\\r\\\\n                            shareArray.push(index);\\\\r\\\\n                            log(shareArray);\\\\r\\\\n                            putMyVar('shareArray', shareArray);\\\\r\\\\n                            putMyVar('shareNum', shareNum);\\\\r\\\\n                            updateItem(index + '', {\\\\r\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + index + '-' + item.name + '</span>',\\\\r\\\\n                            });\\\\r\\\\n                            updateItem('shareBtn', {\\\\r\\\\n                                title: '确认分享\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getMyVar('shareNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\r\\\\n                            });\\\\r\\\\n                            putMyVar('isChoose' + index, 'yes');\\\\r\\\\n                            return 'hiker://empty';\\\\r\\\\n                        }\\\\r\\\\n                    }, index, item),\\\\r\\\\n                    col_type: 'text_1',\\\\r\\\\n                    extra: {\\\\r\\\\n                        id: index + ''\\\\r\\\\n                    }\\\\r\\\\n                });\\\\r\\\\n                index++;\\\\r\\\\n            });\\\\r\\\\n        }\\\\r\\\\n    } else if (getMyVar('mode', '配置') == '解析测试') {\\\\r\\\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n        eval('configArray=' + setFile);\\\\r\\\\n        configArray.forEach(item => {\\\\r\\\\n            jiexi = item.url;\\\\r\\\\n            d.push({\\\\r\\\\n                title: item.name + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<font color=\\\\\\\"#6EB897\\\\\\\"><small>➮前往测试</small></font>',\\\\r\\\\n                desc: item.url,\\\\r\\\\n                url: $().rule((jiexi) => {\\\\r\\\\n                    let d = [];\\\\r\\\\n                    d.push({\\\\r\\\\n                        title: '编辑测试链接',\\\\r\\\\n                        url: 'editFile://hiker://files/rules/cy/ceshi.json',\\\\r\\\\n                        col_type: 'text_2'\\\\r\\\\n                    }, {\\\\r\\\\n                        title: '弹幕:' + getMyVar('dmSwitch', '关'),\\\\r\\\\n                        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\r\\\\n                            if (getMyVar('dmSwitch', '关') == '关') {\\\\r\\\\n                                putMyVar('dmSwitch', '开');\\\\r\\\\n                            } else {\\\\r\\\\n                                putMyVar('dmSwitch', '关');\\\\r\\\\n                            }\\\\r\\\\n                            updateItem('dmSwitch', {\\\\r\\\\n                                title: '弹幕:' + getMyVar('dmSwitch', '关'),\\\\r\\\\n                            });\\\\r\\\\n                            return 'hiker://empty';\\\\r\\\\n                        }),\\\\r\\\\n                        col_type: 'text_2',\\\\r\\\\n                        extra: {\\\\r\\\\n                            id: 'dmSwitch'\\\\r\\\\n                        }\\\\r\\\\n                    });\\\\r\\\\n                    if (!fileExist('hiker://files/rules/cy/ceshi.json')) {\\\\r\\\\n                        ceshiData = {\\\\r\\\\n                            '腾讯视频': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/3/106_3a0d212e17cb95e232ffe155460385cb_con_130x130.png',\\\\r\\\\n                                url: 'https://v.qq.com/x/cover/mzc00200rmpaf40/n0036l4tntc.html'\\\\r\\\\n                            },\\\\r\\\\n                            '优酷': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/9/110_8ff06e0c237760cd57d2508fd98c8414_con_130x130.png',\\\\r\\\\n                                url: 'https://v.youku.com/v_show/id_XNDc0MDE1NTk1Mg==.html'\\\\r\\\\n                            },\\\\r\\\\n                            '爱奇艺': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/09/8/110_901f2ef37af2fea25e5d9648f551ce31_con_130x130.png',\\\\r\\\\n                                url: 'http://www.iqiyi.com/v_2ga8zts86ys.html'\\\\r\\\\n                            },\\\\r\\\\n                            '芒果TV': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/6/110_1834d296aa5b5666a7d94b1e3479ae64_con_130x130.png',\\\\r\\\\n                                url: 'http://www.mgtv.com/b/349253/10424300.html'\\\\r\\\\n                            },\\\\r\\\\n                            '哔哩哔哩': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/4/110_8e2e3d88c45025b380e69817d6fb53b1_con_130x130.png',\\\\r\\\\n                                url: 'https://m.bilibili.com/bangumi/play/ep428993'\\\\r\\\\n                            },\\\\r\\\\n                            '搜狐视频': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/9/110_532a51f8431efc377808c1ffff2da36f_con_130x130.png',\\\\r\\\\n                                url: 'https://m.tv.sohu.com/v7329441.shtml',\\\\r\\\\n                            },\\\\r\\\\n                            '西瓜视频': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/5/110_a86265882ed18c6190566e9ea25f9698_con_130x130.png',\\\\r\\\\n                                url: 'https://www.ixigua.com/6699356792905794055'\\\\r\\\\n                            },\\\\r\\\\n                            '乐视': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/8/2_35b5d4373f4bcba28f39486e4f1164d9_con_130x130.png',\\\\r\\\\n                                url: 'https://m.le.com/vplay_76954333.html?from=ajax',\\\\r\\\\n                            },\\\\r\\\\n                            '1905': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/18/4/110_5f24b1052fed4f7fc73593a8ef27276d_con_130x130.png',\\\\r\\\\n                                url: 'https://vip.1905.com/m/play/1429725.shtml'\\\\r\\\\n                            },\\\\r\\\\n                            '风行视频': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/4/110_6f6af9f99b2629e51f0b0a33cdff1d9e_con_130x130.png',\\\\r\\\\n                                url: 'http://m.fun.tv/mplay/?mid=95719'\\\\r\\\\n                            },\\\\r\\\\n                            'PPTV视频': {\\\\r\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/28/5/110_a455b2951227040ee62955edcfb89d72_con_130x130.png',\\\\r\\\\n                                url: 'https://v.pptv.com/show/zVn3dJXt1xV49l4.html'\\\\r\\\\n                            },\\\\r\\\\n                            '龙腾': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/4.png',\\\\r\\\\n                                url: 'LT-1ec3f6754f68586ed7f92c3e995cfca6'\\\\r\\\\n                            },\\\\r\\\\n                            '人人迷': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/6.png',\\\\r\\\\n                                url: 'renrenmi-ab924e11d2d69397'\\\\r\\\\n                            },\\\\r\\\\n                            '五毒': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/30.png',\\\\r\\\\n                                url: 'wuduyun-1649431307021'\\\\r\\\\n                            },\\\\r\\\\n                            '多多': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/49.png',\\\\r\\\\n                                url: 'https://m3u8.cache.suoyo.cc/m3u8/202203/8/aaabd92da26774c68850a023153c80f1ae6fa9be.m3u8'\\\\r\\\\n                            },\\\\r\\\\n                            '融兴': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/80.png',\\\\r\\\\n                                url: 'RongXingVR-4215645581932'\\\\r\\\\n                            },\\\\r\\\\n                            '雪人': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/q/133.png',\\\\r\\\\n                                url: 'xueren-1646823072'\\\\r\\\\n                            },\\\\r\\\\n                            '旋风云': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/54.png',\\\\r\\\\n                                url: 'xfy-529e6457953d545f'\\\\r\\\\n                            },\\\\r\\\\n                            '瑞丰资源': {\\\\r\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/72.png',\\\\r\\\\n                                url: 'https://1.ruifenglb.com/play/1644914595.m3u8'\\\\r\\\\n                            },\\\\r\\\\n                        };\\\\r\\\\n                        saveFile('hiker://files/rules/cy/ceshi.json', JSON.stringify(ceshiData));\\\\r\\\\n                    }\\\\r\\\\n                    ceshiData = JSON.parse(request('hiker://files/rules/cy/ceshi.json'));\\\\r\\\\n                    for (var prop in ceshiData) {\\\\r\\\\n                        d.push({\\\\r\\\\n                            title: prop,\\\\r\\\\n                            img: ceshiData[prop].pic + '@Referer=',\\\\r\\\\n                            url: $('#noLoading##noHistory#').lazyRule((ceshiData, prop, jiexi) => {\\\\r\\\\n                                vipUrl = ceshiData[prop].url;\\\\r\\\\n                                urls = [\\\\\\\"video://\\\\\\\" + jiexi + vipUrl];\\\\r\\\\n                                names = ['测试']\\\\r\\\\n                                if (getMyVar('dmSwitch', '关') == '开') {\\\\r\\\\n                                    return $.require(\\\\\\\"hiker://page/videoDm.js?rule=dm盒子\\\\\\\").getFor(vipUrl, urls, names);\\\\r\\\\n                                } else {\\\\r\\\\n                                    return \\\\\\\"video://\\\\\\\" + jiexi + vipUrl;\\\\r\\\\n                                }\\\\r\\\\n                            }, ceshiData, prop, jiexi),\\\\r\\\\n                            col_type: 'icon_4'\\\\r\\\\n                        });\\\\r\\\\n                    }\\\\r\\\\n                    d.push({\\\\r\\\\n                        title: '测试',\\\\r\\\\n                        desc: '你还可以任意输入一个视频地址测试当前解析~',\\\\r\\\\n                        url: $.toString((jiexi) => {\\\\r\\\\n                            vipUrl = getMyVar('ceshiLink');\\\\r\\\\n                            urls = [\\\\\\\"video://\\\\\\\" + jiexi + vipUrl];\\\\r\\\\n                            names = ['测试']\\\\r\\\\n                            if (getMyVar('dmSwitch', '关') == '开') {\\\\r\\\\n                                return $.require(\\\\\\\"hiker://page/videoDm.js?rule=dm盒子\\\\\\\").getFor(vipUrl, urls, names);\\\\r\\\\n                            } else {\\\\r\\\\n                                return \\\\\\\"video://\\\\\\\" + jiexi + vipUrl;\\\\r\\\\n                            }\\\\r\\\\n                        }, jiexi),\\\\r\\\\n                        col_type: 'input',\\\\r\\\\n                        extra: {\\\\r\\\\n                            type: 'textarea',\\\\r\\\\n                            height: -1,\\\\r\\\\n                            onChange: \\\\\\\"putMyVar('ceshiLink',input)\\\\\\\",\\\\r\\\\n                        }\\\\r\\\\n                    }, {\\\\r\\\\n                        title: '删除该解析',\\\\r\\\\n                        desc: '请认真考虑~',\\\\r\\\\n                        url: $('hiker://empty#noLoading#').lazyRule((jiexi) => {\\\\r\\\\n                            Array.prototype.indexOf = function (val) {\\\\r\\\\n                                for (var i = 0; i < this.length; i++) {\\\\r\\\\n                                    if (this[i].url == val) return i;\\\\r\\\\n                                }\\\\r\\\\n                                return -1;\\\\r\\\\n                            };\\\\r\\\\n                            Array.prototype.remove = function (val) {\\\\r\\\\n                                var index = this.indexOf(val);\\\\r\\\\n                                if (index > -1) {\\\\r\\\\n                                    this.splice(index, 1);\\\\r\\\\n                                }\\\\r\\\\n                            };\\\\r\\\\n                            setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n                            eval('configArray=' + setFile);\\\\r\\\\n                            configArray.remove(jiexi); \\\\r\\\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n                            // 关闭页面并刷新前一个页面\\\\r\\\\n                            back(true);\\\\r\\\\n                            return \\\\\\\"toast://删除成功~\\\\\\\";\\\\r\\\\n                        }, jiexi),\\\\r\\\\n                        col_type: 'text_center_1'\\\\r\\\\n                    });\\\\r\\\\n                    setHomeResult(d);\\\\r\\\\n                }, jiexi),\\\\r\\\\n                col_type: 'text_1'\\\\r\\\\n            });\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n} catch (e) {\\\\r\\\\n    d.push({\\\\r\\\\n        title: '配置文件或已损坏~',\\\\r\\\\n        desc: '点击前去检查,自行编辑文件修复',\\\\r\\\\n        url: \\\\\\\"editFile://hiker://files/rules/cy/MyParse.json\\\\\\\",\\\\r\\\\n        col_type: 'text_center_1'\\\\r\\\\n    }, {\\\\r\\\\n        title: '一键重生~',\\\\r\\\\n        desc: '回归原初状态，将清空解析配置!!!',\\\\r\\\\n        url: $('#noLoading#').lazyRule(() => {\\\\r\\\\n            configArray = [];\\\\r\\\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n        }),\\\\r\\\\n        col_type: 'text_center_1'\\\\r\\\\n    });\\\\r\\\\n}\\\\r\\\\nsetResult(d);\\\\r\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"调用路由\\\",\\\"path\\\":\\\"mulParse\\\",\\\"rule\\\":\\\"/*\\\\r\\\\n vipUrl:官网地址;返回值JSON格式的多线路视频地址\\\\r\\\\n调用接口：$.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl);\\\\r\\\\n */\\\\r\\\\n$.exports.mulParse = function (vipUrl,bfLink,jiexiName) {\\\\r\\\\n    if (vipUrl.indexOf('douban') != -1) {\\\\r\\\\n        vipUrl=vipUrl.split('?ptag=')[0]\\\\r\\\\n    }\\\\r\\\\n    log('视频原地址：'+vipUrl);\\\\r\\\\n    if (bfLink&&jiexiName) {\\\\r\\\\n        var urls = bfLink;\\\\r\\\\n        var names = jiexiName;\\\\r\\\\n    }else{\\\\r\\\\n        var urls = [];\\\\r\\\\n        var names = [];\\\\r\\\\n    }\\\\r\\\\n    log(\\\\\\\"多线路解析开始\\\\\\\")\\\\r\\\\n    var list = JSON.parse(readFile(\\\\\\\"hiker://files/rules/cy/MyParse.json\\\\\\\"))\\\\r\\\\n    list.forEach(item => {\\\\r\\\\n        urls.push(\\\\\\\"video://\\\\\\\" + item.url + vipUrl);\\\\r\\\\n        names.push(item.name);\\\\r\\\\n    });\\\\r\\\\n    log(`当前启用解析：${urls.length}个`)\\\\r\\\\n    var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\\\r\\\\n    if (dmSwitch == 'true') {\\\\r\\\\n        return $.require(\\\\\\\"hiker://page/videoDm.js?rule=dm盒子\\\\\\\").getFor(vipUrl, urls, names);\\\\r\\\\n    } else {\\\\r\\\\n        return JSON.stringify({\\\\r\\\\n            urls: urls,\\\\r\\\\n            names: names\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"断插插件\\\",\\\"path\\\":\\\"duan\\\",\\\"rule\\\":\\\"function aytmParse(vipUrl) {\\\\r\\\\n    return $.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl);\\\\r\\\\n}\\\\r\\\\n\\\"}]\"}","title":"说明"}