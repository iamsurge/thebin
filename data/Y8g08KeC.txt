#include <iostream>
#include <fstream>
#include <string>
#include <vector>
#include <cassert>

using namespace std;

struct Length
{
	int minutes;							// #minutes (0..)
	int seconds;							// #seconds (0..59)
};

struct Track
{
	string artist;                          // name of artist
	string cd;                              // cd title
	int    year;                            // year of appearance (if known)
	int    track;							// track number
	string title;                           // track title
	string tags;                            // tags
	Length time;							// playing time
	string country;                         // main countr(y/ies) of artist
};

struct TrackDisplay
{
	bool showArtist;						// if true, show name of artist
	bool showAlbum;							// if true, show cd title
	bool showYear;							// if true, show year of appearance
	bool showTrack;							// if true, show track number
	bool showTitle;							// if true, show track title
	bool showTags;                          // if true, show tags
	bool showLength;						// if true, show playing time
	bool showCountry;                       // if true, show countr(y/ies) of artist
};
int size (const vector<Track>& tracks) { return static_cast<int> (tracks.size ()); }

bool match (string sub, string source)
{// Precondition:
    assert (true) ;
/*  Postcondition:
    Result is true only if sub is a literal (case sensitive) sub string of source.
*/
    return source.find(sub) != string::npos ;
}

ostream& operator<< (ostream& out, const Length length)
{// Precondition:
    assert (true) ;
/*  Postcondition:
    the value of length is shown via out in the format: minutes, ':', seconds (two digits)
*/
    out<<length.minutes<<':';

    if(length.seconds < 10)
	out<<0<<length.seconds;
    else 
	out<<length.seconds;
 
    return out;
}

istream& operator>> (istream& in, Length& length)
{// Precondition:
    assert (true) ;
/*  Postcondition:
    the value of length has been read from in: first minutes, then ':', then seconds
*/
    in>>length.minutes;
    in.ignore();
    do{
 	in>>length.seconds;
       }while(length.seconds<0 && length.seconds>59);
    
     return in;
}

Length operator+ (const Length& a, const Length& b)
{// Precondition:
    assert (0 <= a.minutes && 0 <= a.seconds && a.seconds < 60 && 0 <= b.minutes && 0 <= b.seconds && b.seconds < 60) ;
/*  Postcondition:
    Result is the sum of a and b.
*/
    Length sum={a.minutes+b.minutes+(a.seconds+b.seconds)/60, (a.seconds+b.seconds)%60};
    return sum;
}

void show_track (Track track, TrackDisplay lt, ostream& os)
{// Precondition:
    assert (true) ;
/*  Postcondition:
    only the members of track are shown for which the corresponding member in lt is true.
*/
	if(lt.showArtist) os<<track.artist<<endl;
	if(lt.showAlbum) os<<track.cd<<endl;
	if(lt.showYear) os<<track.year<<endl;
	if(lt.showTrack) os<<track.track<<endl;
	if(lt.showTitle) os<<track.title<<endl;
	if(lt.showTags) os<<track.tags<<endl;
	if(lt.showLength) os<<track.time<<endl;
	if(lt.showCountry) os<<track.country<<endl;
}

istream& operator>> (istream& in, Track& track)
{// Precondition:
    assert (true) ;
/*  Postcondition:
    the content of the first 8 lines from in have been read and are stored in the corresponding members of track.
    The following (empty) line from in has also been read.
*/
    getline(in, track.artist);
    getline(in, track.cd);
    in>>track.year;
    in>>track.track;
    in.ignore();
    getline(in, track.title);
    getline(in, track.tags);
    in>>track.time;
    in.ignore();
    getline(in, track.country);
 in.ignore();

    return in;
}

int match_tracks (const vector<Track>& tracks, string track, bool display)
{  //precondition:
    assert(track!="");
    //postcontion: the function resturns the number of tracks that match the track parameter 
    //if display is true then we are going to display all the tracks that matches 
    int no_of_tracks=0;
    for(int i=0;i<size(tracks);i++)
        if(match(track,tracks.at(i).title)) 
        { 
            if(display)  
             	show_track(tracks.at(i),{true,true,true,true,true,true,true,true}, cout);
            
	    no_of_tracks++;
        }
    return no_of_tracks;
}

int match_artists (const vector<Track>& tracks, string artist, bool display)
{   //precondition:
    assert(artist!="");
    //postcondition: the function returns the number of artists that match out parameter
      //if display is true then we are going to display all the artists that matches 
    int no_of_matches=0;
    int last=size(tracks)-1;
    for(int i=0;i<size(tracks);i++)
         if(i!=last)
            {if(match ( artist, tracks.at (i).artist ) && tracks.at(i).artist!=tracks.at(i+1).artist)
            {
                 no_of_matches++;

                if(display)
                show_track(tracks.at(i),{true,false,false,false,false,false,false,false}, cout);
            }}
         else 
        {
             if(match ( artist, tracks.at (i).artist))
            {
                 no_of_matches++;

                if(display)
                show_track(tracks.at(i),{true,false,false,false,false,false,false,false}, cout);
            }
        }
    return no_of_matches;
}

int match_cds (const vector<Track>& tracks, string artist, bool display)
{   //precondition:
    assert(artist!="");
    //postcondition: returns the number of cds title found which match our parameter asrtist 
     //if display is true then we are going to display all the artists, cd title and year 
    int no_of_matches=0;
    string name_of_cd="-1";
    for(int i=0;i<size(tracks);i++)
        if(match(artist,tracks.at(i).artist) && name_of_cd!=tracks.at(i).cd)
        {
            if(display)
            show_track(tracks.at(i),{true,true,true,false,false,false,false,false}, cout);
            
  	    name_of_cd=tracks.at(i).cd;
            no_of_matches++;
        }
    return no_of_matches;
}

int number_of_cds (const vector<Track>& tracks)
{  //precondition:
   assert(true);
   // postcondition: returns the total number of cds

    int no_of_cds=0;
     int last=size(tracks)-1;
    for(int i=0;i<size(tracks);i++)
      if(i!=last)
        {
            if(tracks.at(i).cd!="" && tracks.at (i).cd != tracks.at (i+1).cd )
            {
                no_of_cds++;
            }
        }
        else if(tracks.at(i).cd!="")
        {
            no_of_cds++;
        }
    return no_of_cds;
}

int read_tracks (string filename, vector<Track>& tracks, bool show_content)
{// Precondition:
    assert (true);
/*  Postcondition:
    tracks is a copy of the tracks that are found in the file with file name filename, and result
    is the number of tracks that have been read.
    Only if show_content, then all read tracks are shown on screen.
*/
    ifstream infile ;
    infile.open(filename);
    if(infile.fail()) return 0;
    int no_of_tracks=0;
    Track file_track;
    while(infile>>file_track)
    { 
        tracks.push_back(file_track);
    	no_of_tracks++;
        
        if(show_content)
          show_track(tracks.at(no_of_tracks),{true,true,true,true,true,true,true,true}, cout);
    }
    return no_of_tracks;
}


////////////////////////////////////////////////////////////////////////////////////
////////////////////////            BONUS                //////////////////////////

int cd_for_same_title_traks(const vector<Track>& tracks)
{
    int nr_of_cds=0;
    for(int i=0; i<size(tracks); i++)
    {
        if(tracks.at(i).cd==tracks.at(i).title)
        {
          nr_of_cds++;
          show_track(tracks.at(i), {true,true,true,false,false,false,false,false}, cout);
        }
    }
    return nr_of_cds;
}

int artist_cd(const vector<Track>& tracks)  ////mai fa l odata ca esti rupt in gura si n ai citit calumea enuntul 
{
    string cd_title;
    cout<<"please insert a CD title: ";
    cin>>cd_title;
     int nr;
     for(int i=0; i<size(tracks); i++)
     {
          if(cd_title==tracks.at(i).cd)
           {
            cout<<tracks.at(i).artist<<" "<<cd_title<<endl;
            nr++;
           }
     }
     return nr;
}


int runing_time_cd(const vector<Track>& tracks)
{
     string cd_title;
    cout<<"please insert a CD title: ";
    cin>>cd_title;
    Length total_time;

     int nr;
     for(int i=0; i<size(tracks); i++)
     {
          if(cd_title==tracks.at(i).cd)
           {
            show_track(tracks.at(i), {true, true, false, false , false, false, false, false}, cout);
            total_time=total_time + tracks.at(i).time;
            nr++;
           }
     }
     cout<<total_time;
     return nr;
}



void time(const vector<Track>& tracks)
{
    Length total_time;
    for(int i=0; i<size(tracks); i++)
    {
       total_time=total_time+tracks.at(i).time;
    }
    
    int nr_of_hours;
    while(total_time.minutes>=60) 
    {
        total_time.minutes-=60;
        nr_of_hours++;
    }
    int nr_of_days;
    while(nr_of_hours>=24)
    {
       nr_of_hours-=24;
       nr_of_days++;
    }

    cout<<"The tracks occupies: "<<nr_of_days<<" days, "<<nr_of_hours<<" hours, "<<total_time.minutes<<" minutes, "<<total_time.seconds<<" seconds.";

}

int year_y(const vector<Track>& tracks, int y)
{
    int nr_of_cds=0;
    for(int i=0; i<size(tracks); i++)
    {
        if(tracks.at(i).year==y)
        {
          nr_of_cds++;
          show_track(tracks.at(i), {true,true,false,false,false,false,false,false}, cout);
        }
    }
    return nr_of_cds;
}



bool menu_commands(string command)
{
  vector<Track> tracks; string artist, track1;

  if(command=="track_track") 
    {
        cout<<"Please insert an track: ";
        cin>>track1;
        cout<<endl<<"The number of matching tracks is: "<<match_tracks(tracks, track1, true)<<endl; 
        return true;
    }  
   else if(command=="artist_artist")
   {
       cout<<"Please insert an artist: ";
       cin>>artist;
       cout<<endl<<"The number of found artist are:"<<match_artists(tracks, artist, true)<<endl;
       return true;
   }
   else if(command=="csd_artists")
   { 
       cout<<"Please insert an artist: ";
       cin>>artist;
       cout<<endl<<"The number of found CDs is: "<<match_cds(tracks, artist, true)<<endl;
       return true;
   }
   else if(command=="#csd")
   {
       cout<<number_of_cds(tracks);
       return true;
   }
   else if(command=="cd?_track") 
   {
    cout<<cd_for_same_title_traks(tracks)<<endl;
    return true;
   }
   else if(command=="artist?_cd")
   {
     cout<<artist_cd(tracks)<<endl;
   }

   else if(command=="runningtime_cd")
   {
       runing_time_cd(tracks);
       return true;
   }
   else if(command=="time")
   {
     time(tracks);
     return true;
   }
   
   else if(command=="year_y")
   {
      int y;
      cout<<"Please insert a year:";
      cin>>y;
      cout<<year_y(tracks, y)<<endl;
      return true;
   }
   else if(command=="stop") return false;
   return false;
}


//doamne ajuta amin 







//////////////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////

#ifndef TESTING
int main()
{// Precondition:
    assert (true) ;
/*  Postcondition:
    the music database "Tracks.txt" has been read (if present and correctly formatted).
    The assignment queries have been executed and their result has been shown on screen.
    In case of the bonus assignment, the user has been able to query the database and has
    seen the results of these queries.
*/	
	//vector<Track>& tracks;
	//read_tracks("Tracks.txt", tracks, true);



    ///////bonus main//////

    /*
    vector<Track> tracks;
    string filename; 
    cout<<"Please insert filename:";
    cin>>filename;
    
    read_tracks(filename, tracks, true);
    bool ok=true;
    string command;
    do{ 
       cout<<"Please insert a command:";
       cin>>command;
       }while(menu_commands(command));
	return 0;
    */
}
#endif
