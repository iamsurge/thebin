// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)2e18;
const ll inf = 1e9 + 7;
const ll ONE = 1;
const ll MOD = 1e9;
const ll LG = 20;
ld EPS = 1e-12;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

struct Node {
    int mx = inf;
    int push = -1;
};

struct SegTree {
    int n;
    vector <Node> t;
    SegTree(int _n) {
        n = 4 * _n;
        t.resize(n);
    }
    void unite1(const Node& l, const Node& r, Node& m) {
        if (l.mx > r.mx) {
            m.mx = l.mx;
        }
        else {
            m.mx = r.mx;
        }
    }
    void push(int v) {
        if (t[v].push != -1) {
            t[v].mx = min(t[v].push, t[v].mx);
            if (2 * v + 1 < n) {
                t[2 * v].push = t[v].push;
                t[2 * v + 1].push = t[v].push;
            }
            t[v].push = -1;
        }
    }
    void build(int v, int l, int r, vector <int>& a) {
        if (l == r) {
            t[v].mx = a[l];
        }
        else {
            int m = (l + r) / 2;
            build(2 * v, l, m, a);
            build(2 * v + 1, m + 1, r, a);
            unite1(t[2 * v], t[2 * v + 1], t[v]);
        }
    }
    void update(int v, int l, int r, int L, int R, int boost) {
        push(v);
        if (R < l || L > r) {
            return;
        }
        else if (l <= L && r >= R) {
            t[v].push = boost;
            push(v);
            return;
        }
        else {
            int M = (L + R) / 2;
            update(2 * v, l, r, L, M, boost);
            update(2 * v + 1, l, r, M + 1, R, boost);
            unite1(t[2 * v], t[2 * v + 1], t[v]);
            return;
        }
    }
    Node query(int v, int l, int r, int L, int R) {
        push(v);
        if (R < l || L > r) {
            return { -inf, -1 };
        }
        else if (l <= L && r >= R) {
            return t[v];
        }
        else {
            int M = (L + R) / 2;
            Node LL = query(2 * v, l, r, L, M);
            Node RR = query(2 * v + 1, l, r, M + 1, R);
            Node MM;
            unite1(LL, RR, MM);
            unite1(t[2 * v], t[2 * v + 1], t[v]);
            return MM;
        }
    }
};

void solve() {
    int n, i, j, need = 0;
    cin >> n;
    vector <int> a(n), b(n);
    unordered_map <int, deque <int> > zxc;
    bool pzdc = false;
    for (i = 0; i < n; i++) {
        cin >> a[i];
    }
    for (i = 0; i < n; i++) {
        cin >> b[i];
        if (b[i] > a[i]) pzdc = true;
        if (b[i] < a[i]) {
            need++;
            zxc[b[i]].push_back(i);
        }
    }
    SegTree tree(n);
    Node res;
    tree.build(1, 0, n - 1, b);
    int m;
    cin >> m;
    vector <int> c(m);
    for (i = 0; i < m; i++) {
        cin >> c[i];
    }
    sort(allr(c));
    for (i = 0; i < m; i++) {
        auto& it = zxc[c[i]];
        if (it.size() > 0) {
            int l = 0, r = it.size(), md;
            while (r - l > 1) {
                md = (l + r) / 2;
                res = tree.query(1, it[0], it[md], 0, n - 1);
                if (res.mx > c[i]) {
                    r = md;
                }
                else {
                    l = md;
                }
            }
            if (l < r) {
                tree.update(1, it[0], it[l], 0, n - 1, c[i]);
            }
            j = it[l];
            while (!it.empty() && it.front() <= j) {
                if (b[it.front()] != a[it.front()]) {
                    need--;
                }
                it.pop_front();
            }
        }
    }
    if (pzdc || need > 0) {
        cout << "NO" << endl;
    }
    else {
        cout << "YES" << endl;
    }
}

 signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    //freopen("ladder.in", "r", stdin);
    //freopen("ladder.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    cin >> t;
    while (t--) solve();
}
//Deisgned by skimono