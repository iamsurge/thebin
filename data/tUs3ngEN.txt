#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <queue>
#include <set>

using namespace std;

typedef long long ll;
const int INF = 1000000000;

int n, st, f;
vector<bool> used;
vector<vector<pair<int, int>>> g;
vector<int> d, p;

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	cin >> n >> st >> f;
	g.resize(n, vector<pair<int,int>>());
	d.resize(n, INF);
	p.resize(n, INF);

	--st, --f;
	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			int c;
			cin >> c;
			if (c > 0) {
				g[i].push_back({j, c});
			}
		}
	}
	
	d[st] = 0;
	p[st] = -1;

	set<pair<int, int>> s;
	s.insert({ d[st], st });
	while (!s.empty()) {
		int v = s.begin()->second;
		s.erase(s.begin());

		for (auto& e: g[v]) {
			if (d[e.first] > d[v] + e.second) {
				s.erase({ d[e.first], e.first });
				d[e.first] = d[v] + e.second;
				p[e.first] = v;
				s.insert({ d[e.first], e.first });
			}
		}
	}
	if (d[f] == INF) {
		cout << -1;
	}
	else {
		vector<int> ans;
		int c = f;
		while (c != -1) {
			ans.push_back(c);
			c = p[c];
		}

		reverse(ans.begin(), ans.end());

		for (int i : ans) {
			cout << i + 1 << ' ';
		}
	}
}