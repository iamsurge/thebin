#!python3.9

# capture the frame from the webcam and save it as gif

# requirement :  2022_11_24 python 3.9
# pip3.9 install opencv-python


import cv2  # ⚠ this is the package opencv-python cf https://pypi.org/project/opencv-python
import imageio
import os


pathForGif = r"X:\Temp (no bkp)\Temp Python script\Gif_for_sport"
os.chdir(pathForGif)


# tuto: https://pysource.com/2021/03/25/create-an-animated-gif-in-real-time-with-opencv-and-python/
# cf la video

# 1. Get Images
cap = cv2.VideoCapture(0)  # 0 as only 1 webcam

frames = []
image_count = 0

# if everything works correctly I take the frame that the webcam is generating. Remember to insert it inside a While loop to make sure that the flow is continuous

# while True:
#     ret, frame = cap.read()
#     cv2.imshow("frame", frame)

# # Now we just have to save the images. It can be done simply by putting the images into an array, in my case frames[]. Furthermore, to decide when to save the frame, I set a command connected to the keyboard, just like a camera.
# # If I press the letter s, I finish the operation
#     rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
#     frames.append(rgb_frame)


while True:

    # Capture a frame
    ret, frame = cap.read()

    # Display the resulting frame
    cv2.imshow('p = save frame, q = quit and save as a gif', frame)

    winname = 'p = save frame, q = quit and save as a gif'
    cv2.namedWindow(winname)        # Create a named window
    cv2.moveWindow(winname, 40, 60)  # Move it to (40,30)
    cv2.imshow(winname, frame)

    # start a key event
    # if 1 = wait 1ms before the next while loop, if 0= wait indefinetly for a key (frame is frozen)
    key = cv2.waitKey(1)

    # save the current frame
    if key == ord("p"):
        # modify the color because OpenCV uses the BGR format while imageio uses the RGB format.
        frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)

        # resize image
        # https://pythonexamples.org/python-opencv-cv2-resize-image/
        scale_percent = 55  # percent of original size
        width = int(frame.shape[1] * scale_percent / 100)
        height = int(frame.shape[0] * scale_percent / 100)
        dim = (width, height)
        frame_small = cv2.resize(frame_rgb, dim, interpolation=cv2.INTER_AREA)

        # change resolution
        # https://stackoverflow.com/a/44776471/3154274
        # img = cv2.GaussianBlur(img, (15, 15), 0)  # 15 = really blur

        # # crop image :
        # cropped_image = img[80:280, 150:330]
        # cv2.imshow("cropped", cropped_image)

        # # save the frame in frames
        frames.append(frame_small)  # frame_small
        image_count += 1
        print("Adding new image:", image_count)

    # break the while loop
    elif key == ord("q"):
        cv2.destroyAllWindows()
        break


# ------------------------------------------------------ ¤¤ save the gif
# https://imageio.readthedocs.io/en/v2.8.0/format_gif-pil.html#gif-pil
# imageio is use with the  mode= “I” = the data are a sequence of images
print("Saving GIF file")

# .... * set the filename
import datetime
current_time = datetime.datetime.now().strftime(" %Y_%m_%d %H-%M-%S") + ".gif"
with imageio.get_writer(current_time, mode="I", duration=0.2) as writer:
    for idx, frame in enumerate(frames):
        print("Adding frame to GIF file: ", idx + 1)
        writer.append_data(frame)
