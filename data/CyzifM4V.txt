SystemExit                                Traceback (most recent call last)
~\AppData\Local\Temp\ipykernel_25976\1976347149.py in <module>
     15 
     16 # enter interactive view
---> 17 my_brain_viewer.show()

~\anaconda3\lib\site-packages\cerebro\cerebro_brain_viewer.py in show(self)
    558 
    559         # run the viewer window
--> 560         self.viewer.show()

~\anaconda3\lib\site-packages\cerebro\renderer.py in show(self)
    128         A method to display all rendered objects.
    129         """
--> 130         self.window.run()
    131 
    132     def draw(self):

~\anaconda3\lib\site-packages\direct\showbase\ShowBase.py in run(self)
   3328         if self.appRunner is None or self.appRunner.dummy or \
   3329            (self.appRunner.interactiveConsole and not self.appRunner.initialAppImport):
-> 3330             self.taskMgr.run()
   3331 
   3332 

~\anaconda3\lib\site-packages\direct\task\Task.py in run(self)
    551                         session.release()
    552                     else:
--> 553                         self.step()
    554                 except KeyboardInterrupt:
    555                     self.stop()

~\anaconda3\lib\site-packages\direct\task\Task.py in step(self)
    502 
    503         try:
--> 504             self.mgr.poll()
    505 
    506             # This is the spot for an internal yield function

~\anaconda3\lib\site-packages\direct\showbase\EventManager.py in eventLoopTask(self, task)
     47         Process all the events on the C++ event queue
     48         """
---> 49         self.doEvents()
     50         messenger.send("event-loop-done")
     51         return task.cont

~\anaconda3\lib\site-packages\direct\showbase\EventManager.py in doEvents(self)
     41         dequeueFunc = self.eventQueue.dequeueEvent
     42         while not isEmptyFunc():
---> 43             processFunc(dequeueFunc())
     44 
     45     def eventLoopTask(self, task):

~\anaconda3\lib\site-packages\direct\showbase\EventManager.py in processEvent(self, event)
     97             # Send the event, we used to send it with the event
     98             # name as a parameter, but now you can use extraArgs for that
---> 99             messenger.send(eventName, paramList)
    100 
    101             # Also send the event down into C++ land

~\anaconda3\lib\site-packages\direct\showbase\Messenger.py in send(self, event, sentArgs, taskChain)
    335             else:
    336                 # Handle the event immediately.
--> 337                 self.__dispatch(acceptorDict, event, sentArgs, foundWatch)
    338         finally:
    339             self.lock.release()

~\anaconda3\lib\site-packages\direct\showbase\Messenger.py in __dispatch(self, acceptorDict, event, sentArgs, foundWatch)
    420                 self.lock.release()
    421                 try:
--> 422                     result = method (*(extraArgs + sentArgs))
    423                 finally:
    424                     self.lock.acquire()

~\anaconda3\lib\site-packages\direct\showbase\ShowBase.py in windowEvent(self, win)
   2979                     if self.__autoGarbageLogging:
   2980                         GarbageReport.b_checkForGarbageLeaks()
-> 2981                 self.userExit()
   2982 
   2983             if properties.getForeground() and not self.mainWinForeground:

~\anaconda3\lib\site-packages\direct\showbase\ShowBase.py in userExit(self)
   3098             self.exitFunc()
   3099         self.notify.info("Exiting ShowBase.")
-> 3100         self.finalizeExit()
   3101 
   3102     def finalizeExit(self):

~\anaconda3\lib\site-packages\direct\showbase\ShowBase.py in finalizeExit(self)
   3105         implementation just calls `sys.exit()`.
   3106         """
-> 3107         sys.exit()
   3108 
   3109     # [gjeon] start wxPython

SystemExit: 