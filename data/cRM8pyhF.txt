

//creates a parent process and 2 child processes
//process are made using pthreads
//parent process waits for all child processes to finish

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <string.h>
#include <fcntl.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <sys/mman.h>
#include <pthread.h>
#include <sys/syscall.h>
#ifndef SYS_gettid
#error "SYS_gettid unavailable on this system"
#endif // !1
#define gettid() ((pid_t)syscall(SYS_gettid))

typedef struct subtotal
    {	
    	int subtotal;
    	pthread_t tid;
    	pthread_attr_t attr;
    }subtotal;

int *createArray(int n)
{	
    int *A = (int *)malloc(n * sizeof(int));
    FILE *fptr;
    fptr = fopen("numbers.txt", "r");
    int temp=0;
    if (fptr == NULL)
    {
        printf("Error!");
    
    }
    for (int i = 0; i < n; i++)
    {
        fscanf(fptr, "%d", &temp);
	A[i] = temp;
    }
    fclose(fptr);
    return A;
}

void *child1(void *arg)
{	
	int sumCalc = 0;
	int *A;
	int n = 15;
	A = createArray(n);
	
	subtotal *temp = (subtotal*)arg;
    printf("Child 1: %d\n", getpid());
   
    for(int i = 1 ; i < n; i+=2)
        {
            sumCalc += A[i];
        }
    return NULL;
}

void *child2(void *arg)
{	
	int sumCalc = 0;
	int n = 15;
	int *A;
	A = createArray(n);
	subtotal *temp = (subtotal*)arg;
    printf("Child 2: %d\n", getpid());
    for(int i = 0 ; i < n; i+=2)
            {
                sumCalc += A[i];
            }
    return NULL;
}


    

int main(int argc, char *argv[])
{   
    int i = 0;
   // childA *childA;
 //   childB *childB;
 	subtotal *subtotal;
    int sumtotal = 0;
    int statusA;
    int statusB;
    int n;
    int *A = NULL;
    int sumCalc = 0;
    pthread_t tid1, tid2;
    int status;
    pid_t pid;

    printf("Enter the number of elements in the array: ");
    scanf("%d", &n);
    if (n < 2)
    {
        printf("Error! Number must be greater than 0");
    }

    A = createArray(n);
    for (int i = 0; i < n; i++)
    {
        printf("%d ", A[i]);
    } 
    printf("parent process id: %d\n", getpid());
  //  (*childA).pidA = fork();
   
    	
    pthread_create(&tid1, NULL, child1, (void*)subtotal);
    pthread_join(tid1, NULL);
	int sumA = (*subtotal).subtotal;
        
        (*subtotal).subtotal = sumCalc;
        (*subtotal).tid = gettid();
        
        printf("sum of child A: %d\n", (*subtotal).subtotal);
        printf("child A process id: %ld\n", (*subtotal).tid);
        
         pthread_create(&tid2, NULL, child2, (void*)subtotal);
            pthread_join(tid2, NULL);
	int sumB = (*subtotal).subtotal;
            
		(*subtotal).subtotal = sumCalc;
       		(*subtotal).tid = gettid();
            printf("sum of child B: %d\n", (*subtotal).subtotal);
            printf("child B process id: %ld\n", (*subtotal).tid);
   
   
       
      //      waitpid((*childA).pidA, &statusA, 0);
      //      waitpid((*childB).pidB, &statusB, 0);
            sumtotal = sumA + sumB;
            printf("sum of parent: %d\n", sumtotal);
       return 0;
    }
    
