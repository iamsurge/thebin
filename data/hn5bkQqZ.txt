海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥当前未设置账号，点我设置@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"text_1\",\"name\":\"设置\",\"path\":\"settings\",\"rule\":\"js:\\n/*addListener('onClose', $.toString(() => {\\n    //saveFile(\\\"hiker://files/rules/webdav/info.json\\\", JSON.stringify([getItem(\\\"dav\\\"), getItem(\\\"username\\\"), getItem(\\\"passwd\\\")]))\\n    //clearMyVar(\\\"path\\\")\\n    //refreshPage()\\n}))*/\\nvar d = [];\\nd.push({\\n    title: \\\"webdav地址：\\\" + getItem(\\\"dav\\\", \\\"请输入WebDav地址\\\"),\\n    url: $(getItem(\\\"dav\\\", \\\"\\\"), \\\"请输入正确格式的webdav链接！！！\\\").input(() => {\\n        if (!input.startsWith(\\\"http\\\")) {\\n            return \\\"toast://请输入正确的webdav链接！！！\\\"\\n        } else {\\n            if (input[input.length - 1] == \\\"/\\\") {\\n                url = input.substring(0, input.length - 1)\\n                setItem(\\\"dav\\\", url)\\n            } else {\\n                setItem(\\\"dav\\\", input)\\n            }\\n        }\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_1\\\"\\n})\\nd.push({\\n    title: \\\"账户\\\",\\n    url: $(getItem(\\\"user\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"user\\\", input)\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_2\\\"\\n})\\nd.push({\\n    title: \\\"密码\\\",\\n    url: $(getItem(\\\"passwd\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"passwd\\\", input)\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_2\\\"\\n})\\nd.push({\\n    title: \\\"测试连接\\\",\\n    url: $().lazyRule(() => {\\n        const {\\n            getFiles\\n        } = $.require(\\\"hiker://page/code\\\")\\n        if (getFiles(getItem(\\\"dav\\\") + \\\"/\\\")) {\\n            return \\\"toast://连接成功\\\"\\n        } else {\\n            return \\\"toast://连接失败，请检查账户密码\\\"\\n        }\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nlet icon = getItem(\\\"iconStyle\\\", \\\"默认\\\")\\nlet detail = getItem(\\\"detail\\\", \\\"开\\\")\\nlet subtitle = getItem(\\\"subtitle\\\", \\\"开\\\")\\nlet timestamp = getItem(\\\"time\\\", \\\"0\\\")\\nlet newVersion;\\nlet myVersion = MY_PARAMS.version || 999;\\ntry {\\n    res = JSON.parse(fetch(\\\"http://hiker.nokia.press/hikerule/dev/getbyid?id=5210\\\"))\\n    newVersion = res.result.ver\\n} catch (e) {\\n    toast(\\\"道长仓库抽风了，本次未检测到新版信息\\\");\\n    newVersion = myVersion;\\n}\\nlet isUpdate = Number(newVersion) <= Number(myVersion);\\nlet isVer = Number(newVersion) === Number(myVersion);\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n}, {\\n    title: isUpdate ? \\\"已是最新版\\\" : \\\"🆙新版本\\\",\\n    url: \\\"rule://5rW36ZiU6KeG55WM6aaW6aG16aKR6YGT6KeE5YiZ44CQV2ViZGF244CR77+laG9tZV9ydWxlX3VybO+/pWh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUyMTAmYXV0aD1hYjIzMDUyYi1jMGQ2LTU4ZmMtOTU1NS1hMjUwMmEwMGEzODc=\\\",\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"设置图标：\\\" + icon,\\n    url: $().lazyRule((icon) => {\\n        setItem(\\\"iconStyle\\\", icon == \\\"默认\\\" ? \\\"蓝莓\\\" : \\\"默认\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, icon),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"显示详细：\\\" + detail,\\n    url: $().lazyRule((detail) => {\\n        setItem(\\\"detail\\\", detail == \\\"开\\\" ? \\\"关\\\" : \\\"开\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, detail),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"字幕功能：\\\" + subtitle,\\n    url: $().lazyRule((subtitle) => {\\n        setItem(\\\"subtitle\\\", subtitle == \\\"开\\\" ? \\\"关\\\" : \\\"开\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, subtitle),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"时间格式：\\\" + (timestamp == \\\"0\\\" ? \\\"2022/08/20 17:14:31\\\" : \\\"Sat, 20 Aug 2022 09:14:31 GMT\\\"),\\n    url: $().lazyRule((timestamp) => {\\n        setItem(\\\"time\\\", timestamp == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, timestamp),\\n    col_type: \\\"text_1\\\"\\n}, {\\n    url: $().rule(() => {\\n        setResult([{\\n            title: `\\n            <p>本篇文章只针对设置，其他的使用方法已经在规则中说明清除了</p> <p><ins><ins>前提条件：已经更新7.9版本</ins></ins></p> <p>海阔视界首页频道规则【Webdav】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=5210&amp;auth=ab23052b-c0d6-58fc-9555-a2502a00a387</p> <h1 id=\\\"webdav%E6%98%AF%E4%BB%80%E4%B9%88\\\" tabindex=\\\"-1\\\">Webdav是什么</h1> <p>webdav就是一种网盘文件传输协议，常用于小众软件的数据备份。本规则可以管理webdav的文件，支持浏览、播放、下载、上传、删除等操作</p> <h1 id=\\\"%E6%89%93%E5%BC%80%E8%AE%BE%E7%BD%AE\\\" tabindex=\\\"-1\\\">打开设置</h1> <p><img src=\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_082550_com.example.hikerview.jpg\\\" alt=\\\"Screenshot_20220821_082550_com.example.hikerview\\\" /></p> <p>将你的webdav链接和账户密码填进去（这里推荐使用坚果云，优点:稳定;缺点:容量少，价格贵。也可以自己搭建webdav系统，例如alist和cloudreve，需要一定的动手能力）</p> <h2 id=\\\"%E8%AE%BE%E7%BD%AE%E5%9B%BE%E6%A0%87\\\" tabindex=\\\"-1\\\">设置图标</h2> <p>本规则内置两种风格的图标，分别为道长的和蓝莓的，自己选择</p> <h2 id=\\\"%E6%98%BE%E7%A4%BA%E8%AF%A6%E7%BB%86\\\" tabindex=\\\"-1\\\">显示详细</h2> <p>可以列出当前文件夹或文件的创建时间。<br /> <strong><strong>问题：</strong></strong><br /> 不能自动播放下一集</p> <h2 id=\\\"%E5%AD%97%E5%B9%95\\\" tabindex=\\\"-1\\\">字幕</h2> <p>字幕功能如果打开，那么如果视频与字幕的文件名相同，那么就会自动挂载上。如果当前文件夹有这个字幕文件，但是名字不同，就会跳出选择框选择</p> <h1 id=\\\"%E8%BF%94%E5%9B%9E%E4%B8%BB%E7%95%8C%E9%9D%A2\\\" tabindex=\\\"-1\\\">返回主界面</h1> <p><img src=\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_140705_com.example.hikerview.jpg\\\" alt=\\\"Screenshot_20220821_140705_com.example.hikerview\\\" /><br /> 可以看见有操作栏，可以上传文件，新建文件夹和删除文件三个操作</p> <p>下面是你的文件，你可以像浏览文件管理器一样使用他</p> <h1 id=\\\"%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE\\\" tabindex=\\\"-1\\\">高级设置</h1> <p>点击编辑规则，划到底部的预处理<br /> <img src=\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_141135_com.example.hikerview.jpg\\\" alt=\\\"Screenshot_20220821_141135_com.example.hikerview\\\" /><br /> 根据注释修改，我写的几个文件格式已经很完整了，如果有朋友认为不好，可以自行修改<br /> 格式：[“类型1”,“类型2”]</p> <p>都完成了，enjoy💞</p>\\n            `,\\n            col_type: \\\"rich_text\\\"\\n        }])\\n    }),\\n    title: \\\"查看使用说明\\\",\\n    desc: \\\"Powered by Joe&小棉袄\\\",\\n    col_type: \\\"text_center_1\\\",\\n    extra: {\\n        lineVisible: false\\n    }\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"代码\",\"path\":\"code\",\"rule\":\"$.exports.getFiles = function(path) {\\n    try {\\n        if (!path || path == \\\"\\\") {\\n            return false\\n        }\\n        let webdav = buildWebDav(path, getItem(\\\"user\\\", \\\"\\\"), getItem(\\\"passwd\\\", \\\"\\\"))\\n        let res = webdav.list()\\n        res = JSON.parse(res)\\n        return res\\n    } catch (e) {\\n        log(e.message)\\n        return false\\n    }\\n}\\n$.exports.fetchFile = function(path) {\\n    let res = request(path, {\\n        headers: {\\n            \\\"authorization\\\": \\\"Basic \\\" + base64Encode(getItem(\\\"user\\\") + \\\":\\\" + getItem(\\\"passwd\\\"))\\n        }\\n    })\\n    return res\\n}\\n$.exports.getIcon = function(content) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let iconStyles = [{\\n        name: '默认',\\n        url: 'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型/'\\n    }, {\\n        name: '蓝莓',\\n        url: 'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/'\\n    }];\\n    let iconStyle = getItem('iconStyle', '默认');\\n    let nowStyle = iconStyles.find(x => x.name === iconStyle);\\n    let iconRoot = nowStyle ? nowStyle.url : iconStyles[0].url;\\n    let root = iconRoot;\\n    if (content.dir) {\\n        img = root + \\\"文件夹.svg\\\"\\n    } else {\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip'.split('|');\\n        let fileName = content.name\\n        let hzm = getHzm(fileName)\\n        if (files.includes(hzm)) {\\n            img = root + hzm + '.svg';\\n        } else {\\n            img = root + \\\"文件.svg\\\"\\n        }\\n    }\\n    return img\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\\n$.exports.removeExt = function(file) {\\n    return file.split('.').slice(0, -1).join('.')\\n};\\n$.exports.getSub = function(list) {\\n    const {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let s = []\\n    list.forEach(item => {\\n        if ($.subtitle.includes(getHzm(item.name))) {\\n            s.push({\\n                title: item.name,\\n                url: item.url\\n            })\\n        }\\n    })\\n    return s\\n}\\n$.exports.download = function(path, name) {\\n    let webdav = buildWebDav(path, getItem(\\\"user\\\", \\\"\\\"), getItem(\\\"passwd\\\", \\\"\\\"))\\n    let p = \\\"hiker://files/cache/_fileSelect_\\\" + name;\\n    webdav.download(name, p);\\n    return getPath(p);\\n}\\n$.exports.deleteFile = function(path, name) {\\n    let webdav = buildWebDav(path, getItem(\\\"user\\\", \\\"\\\"), getItem(\\\"passwd\\\", \\\"\\\"))\\n    webdav.delete(name)\\n}\\n$.exports.sorts = function(list, method) {\\n    if (method.includes(\\\"名称\\\")) {\\n        list.sort(function(a, b) {\\n            return a.name.localeCompare(b.name)\\n        })\\n    } else if (method.includes(\\\"时间\\\")) {\\n        list.sort(function(a, b) {\\n            return a.modifyTimestamp - b.modifyTimestamp\\n        })\\n    }\\n    if (method.includes(\\\"反\\\")) {\\n        list.reverse();\\n    }\\n    return list\\n}\\n$.exports.getInfo = function() {\\n    return JSON.parse(readFile(\\\"hiker://files/rules/webdav/info.json\\\"))\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"main\",\"rule\":\"js:\\nvar d = [];\\nconst {\\n    getFiles,\\n    download,\\n    deleteFile,\\n    getIcon,\\n    sorts\\n} = $.require(\\\"hiker://page/code\\\")\\nvar path = getMyVar(\\\"path\\\", getItem(\\\"dav\\\") + \\\"/\\\")\\nlet files = getFiles(path)\\nif (files) {\\n    let paths = getMyVar(\\\"path\\\").replace(getItem(\\\"dav\\\"), \\\"\\\")\\n    paths = paths.split(\\\"/\\\")\\n    let temp = \\\"\\\"\\n    sorts(files, getMyVar(\\\"sort\\\", \\\"默认\\\"))\\n    d.push({\\n        title: getMyVar(\\\"more\\\", \\\"0\\\") == \\\"0\\\" ? \\\"∧\\\" : \\\"∨\\\",\\n        col_type: \\\"scroll_button\\\",\\n        url: $().lazyRule((path) => {\\n            putMyVar(\\\"more\\\", getMyVar(\\\"more\\\", \\\"0\\\") == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\")\\n            refreshPage()\\n            return \\\"hiker://empty\\\"\\n        }, path)\\n    }, {\\n        title: \\\"..\\\",\\n        url: $().lazyRule((paths) => {\\n            paths.pop()\\n            putMyVar(\\\"path\\\", getItem(\\\"dav\\\") + paths.join(\\\"/\\\"))\\n            refreshPage()\\n            return \\\"hiker://empty\\\"\\n        }, paths),\\n        col_type: \\\"scroll_button\\\"\\n    }, {\\n        title: \\\"🏠\\\",\\n        url: $().lazyRule(() => {\\n            putMyVar(\\\"path\\\", getItem(\\\"dav\\\"))\\n            refreshPage()\\n            return \\\"hiker://empty\\\"\\n        }),\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    paths.forEach(item => {\\n        if (item != \\\"\\\") {\\n            temp += \\\"/\\\" + item\\n            d.push({\\n                title: decodeURIComponent(item),\\n                url: $().lazyRule((temp) => {\\n                    putMyVar(\\\"path\\\", getItem(\\\"dav\\\") + temp)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, temp),\\n                col_type: \\\"scroll_button\\\"\\n            })\\n        }\\n    });\\n    if (getMyVar(\\\"more\\\", \\\"0\\\") == \\\"1\\\") {\\n        let sorr = [\\\"默认\\\", \\\"名称\\\", \\\"时间\\\"]\\n        d.push({\\n            title: \\\"设置\\\",\\n            url: \\\"hiker://page/settings\\\",\\n            img: \\\"hiker://images/设置\\\",\\n            col_type: \\\"icon_small_4\\\",\\n            extra: {\\n                version: MY_RULE.version\\n            }\\n        }, {\\n            title: \\\"上传文件\\\",\\n            url: \\\"fileSelect://\\\" + $.toString((path) => {\\n                let webdav = buildWebDav(path, getItem(\\\"user\\\"), getItem(\\\"passwd\\\"))\\n                let s = input.split(\\\"/\\\")\\n                log(webdav.upload(s[s.length - 1].replace(\\\"_fileSelect_\\\", \\\"\\\"), input));\\n                refreshPage();\\n            }, path),\\n            img: \\\"hiker://images/home_icon_bookmark\\\",\\n            col_type: \\\"icon_small_4\\\",\\n        }, {\\n            title: \\\"新文件夹\\\",\\n            url: $(\\\"\\\", \\\"输入文件夹名称\\\").input((path) => {\\n                let webdav = buildWebDav(path, getItem(\\\"user\\\"), getItem(\\\"passwd\\\"))\\n                webdav.makeDir(input)\\n                refreshPage()\\n                return \\\"hiker://empty\\\"\\n            }, path),\\n            img: \\\"hiker://images/home_icon_fold\\\",\\n            col_type: \\\"icon_small_4\\\"\\n        }, {\\n            title: getMyVar(\\\"delete\\\", \\\"0\\\") == \\\"0\\\" ? \\\"删除文件\\\" : \\\"结束删除\\\",\\n            img: \\\"hiker://images/home_icon_item\\\",\\n            url: $().lazyRule(() => {\\n                putMyVar(\\\"delete\\\", getMyVar(\\\"delete\\\", \\\"0\\\") == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\")\\n                refreshPage()\\n                return \\\"hiker://empty\\\"\\n            }),\\n            col_type: \\\"icon_small_4\\\"\\n        })\\n        sorr.forEach(item => {\\n            var n = getMyVar(\\\"sort\\\", \\\"默认\\\")\\n            if (n == item) {\\n                var title = item + \\\"↓\\\"\\n            } else if (n.includes(\\\"反\\\") && n.includes(item)) {\\n                var title = item + \\\"↑\\\"\\n            } else {\\n                var title = item + \\\"↕\\\"\\n            }\\n            d.push({\\n                title: title,\\n                col_type: \\\"flex_button\\\",\\n                url: $().lazyRule((item) => {\\n                    if (getMyVar(\\\"sort\\\", \\\"默认\\\") == item) {\\n                        putMyVar(\\\"sort\\\", item + \\\"反\\\")\\n                    } else {\\n                        putMyVar(\\\"sort\\\", item)\\n                    }\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item)\\n            })\\n        })\\n    }\\n    files.forEach(item => {\\n        let fileName = decodeURIComponent(item.name)\\n        let len = 30;\\n        let len2 = len / 2;\\n        if (fileName.length >= len) {\\n            fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\n        }\\n        let icon = getIcon(item)\\n        if (getMyVar(\\\"delete\\\", \\\"0\\\") == \\\"0\\\") {\\n            var url = $().lazyRule((item, files) => {\\n                const {\\n                    fetchFile,\\n                    getHzm,\\n                    getSub,\\n                    removeExt,\\n                    download\\n                } = $.require(\\\"hiker://page/code\\\")\\n                if (item.dir) {\\n                    putMyVar(\\\"path\\\", item.url)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                } else if ($.movie.includes(getHzm(item.name))) {\\n                    if (getItem(\\\"subtitle\\\", \\\"开\\\") == \\\"开\\\") {\\n                        let subtitles = getSub(files)\\n                        let names = [\\\"不需要字幕\\\"]\\n                        subtitles.forEach(ds => {\\n                            names.push(ds.title)\\n                        })\\n                        if (subtitles.length != 0) {\\n                            return $(names, 1, \\\"请选择字幕\\\").select((names, subtitles, url) => {\\n                                if (input == \\\"不需要字幕\\\") {\\n                                    return JSON.stringify({\\n                                        urls: [url],\\n                                        headers: {\\n                                            \\\"Authorization\\\": \\\"Basic \\\" + base64Encode(getItem(\\\"username\\\") + \\\":\\\" + getItem(\\\"passwd\\\"))\\n                                        }\\n                                    })\\n                                } else {\\n                                    return JSON.stringify({\\n                                        urls: [url],\\n                                        subtitle: subtitles[names.indexOf(input) - 1].url,\\n                                        headers: {\\n                                            \\\"Authorization\\\": \\\"Basic \\\" + base64Encode(getItem(\\\"username\\\") + \\\":\\\" + getItem(\\\"passwd\\\"))\\n                                        }\\n                                    })\\n                                }\\n                            }, names, subtitles, item.url)\\n                        } else {\\n                            return item.playUrl + \\\"#isVideo=true#\\\"\\n                        }\\n                    } else {\\n                        return item.playUrl + \\\"#isVideo=true#\\\"\\n                    }\\n                } else if (getHzm(item.name) == \\\"md\\\") {\\n                    require(\\\"https://gitlab.com/hjdhnx/hiker/-/raw/main/js/marked.min.js\\\")\\n                    return \\\"hiker://page/preview?content=\\\" + base64Encode(marked.parse(fetchFile(item.url)))\\n                } else if ($.text.includes(getHzm(item.name))) {\\n                    return \\\"hiker://page/preview?content=\\\" + base64Encode(fetchFile(item.url))\\n                } else if ($.audio.includes(getHzm(item.name))) {\\n                    return item.playUrl + \\\"#isMusic=true#\\\"\\n                } else if ($.img.includes(getHzm(item.name))) {\\n                    let p = download(getMyVar(\\\"path\\\", getItem(\\\"dav\\\")), item.name)\\n                    return p\\n                } else {\\n                    return \\\"download://\\\" + item.playUrl\\n                }\\n            }, item, files)\\n        } else {\\n            var url = $(\\\"确认删除？\\\").confirm((url, deleteFile, path) => {\\n                deleteFile(getMyVar(\\\"path\\\", getItem(\\\"dav\\\")), path)\\n                refreshPage()\\n                return \\\"toast://删除成功\\\"\\n            }, item.url, deleteFile, item.name)\\n        }\\n        d.push({\\n            title: fileName,\\n            img: icon,\\n            url: url,\\n            col_type: \\\"avatar\\\"\\n        })\\n        if (getItem(\\\"detail\\\", \\\"开\\\") == \\\"开\\\") {\\n            d.push({\\n                title: \\\"““””<small>““””<font color='#aaaaaa'>\\\" + (getItem(\\\"time\\\", \\\"0\\\") == \\\"0\\\" ? item.modifyTimeStr : item.modifyTime) + \\\"</font></small>\\\",\\n                url: url,\\n                col_type: \\\"text_1\\\"\\n            })\\n        }\\n    })\\n} else if (getItem(\\\"dav\\\", \\\"\\\") == \\\"\\\" || getItem(\\\"username\\\", \\\"\\\") == \\\"\\\" || getItem(\\\"passwd\\\", \\\"\\\") == \\\"\\\") {\\n    d.push({\\n        title: \\\"当前未设置账号，点我设置\\\",\\n        url: \\\"hiker://page/settings\\\",\\n        col_type: \\\"text_center_1\\\"\\n    })\\n} else {\\n    let paths = getMyVar(\\\"path\\\").replace(getItem(\\\"dav\\\"), \\\"\\\")\\n    paths = paths.split(\\\"/\\\")\\n    d.push({\\n        title: \\\"设置\\\",\\n        col_type: \\\"text_1\\\",\\n        url: \\\"hiker://page/settings\\\"\\n    }, {\\n        title: \\\"出错了，点击刷新\\\",\\n        url: $().lazyRule((paths) => {\\n            refreshPage()\\n            return \\\"hiker://empty\\\"\\n        }, paths),\\n        col_type: \\\"text_center_1\\\"\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"预览\",\"path\":\"preview\",\"rule\":\"js:\\nlet content = base64Decode(getParam(\\\"content\\\"))\\nsetResult([{\\n    title: content,\\n    col_type: \\\"long_text\\\"\\n}])\"}],\"saved\":false,\"title\":\"Webdav\",\"version\":0,\"url\":\"hiker://page/settings\",\"col_type\":\"text_1\",\"find_rule\":\"js:\\n/*addListener('onClose', $.toString(() => {\\n    //saveFile(\\\"hiker://files/rules/webdav/info.json\\\", JSON.stringify([getItem(\\\"dav\\\"), getItem(\\\"username\\\"), getItem(\\\"passwd\\\")]))\\n    //clearMyVar(\\\"path\\\")\\n    //refreshPage()\\n}))*/\\nvar d = [];\\nd.push({\\n    title: \\\"webdav地址：\\\" + getItem(\\\"dav\\\", \\\"请输入WebDav地址\\\"),\\n    url: $(getItem(\\\"dav\\\", \\\"\\\"), \\\"请输入正确格式的webdav链接！！！\\\").input(() => {\\n        if (!input.startsWith(\\\"http\\\")) {\\n            return \\\"toast://请输入正确的webdav链接！！！\\\"\\n        } else {\\n            if (input[input.length - 1] == \\\"/\\\") {\\n                url = input.substring(0, input.length - 1)\\n                setItem(\\\"dav\\\", url)\\n            } else {\\n                setItem(\\\"dav\\\", input)\\n            }\\n        }\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_1\\\"\\n})\\nd.push({\\n    title: \\\"账户\\\",\\n    url: $(getItem(\\\"user\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"user\\\", input)\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_2\\\"\\n})\\nd.push({\\n    title: \\\"密码\\\",\\n    url: $(getItem(\\\"passwd\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"passwd\\\", input)\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_2\\\"\\n})\\nd.push({\\n    title: \\\"测试连接\\\",\\n    url: $().lazyRule(() => {\\n        const {\\n            getFiles\\n        } = $.require(\\\"hiker://page/code\\\")\\n        if (getFiles(getItem(\\\"dav\\\") + \\\"/\\\")) {\\n            return \\\"toast://连接成功\\\"\\n        } else {\\n            return \\\"toast://连接失败，请检查账户密码\\\"\\n        }\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nlet icon = getItem(\\\"iconStyle\\\", \\\"默认\\\")\\nlet detail = getItem(\\\"detail\\\", \\\"开\\\")\\nlet subtitle = getItem(\\\"subtitle\\\", \\\"开\\\")\\nlet timestamp = getItem(\\\"time\\\", \\\"0\\\")\\nlet newVersion;\\nlet myVersion = MY_PARAMS.version || 999;\\ntry {\\n    res = JSON.parse(fetch(\\\"http://hiker.nokia.press/hikerule/dev/getbyid?id=5210\\\"))\\n    newVersion = res.result.ver\\n} catch (e) {\\n    toast(\\\"道长仓库抽风了，本次未检测到新版信息\\\");\\n    newVersion = myVersion;\\n}\\nlet isUpdate = Number(newVersion) <= Number(myVersion);\\nlet isVer = Number(newVersion) === Number(myVersion);\\nd.push({\\n    col_type: \\\"line_blank\\\"\\n}, {\\n    title: isUpdate ? \\\"已是最新版\\\" : \\\"🆙新版本\\\",\\n    url: \\\"rule://5rW36ZiU6KeG55WM6aaW6aG16aKR6YGT6KeE5YiZ44CQV2ViZGF244CR77+laG9tZV9ydWxlX3VybO+/pWh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUyMTAmYXV0aD1hYjIzMDUyYi1jMGQ2LTU4ZmMtOTU1NS1hMjUwMmEwMGEzODc=\\\",\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"设置图标：\\\" + icon,\\n    url: $().lazyRule((icon) => {\\n        setItem(\\\"iconStyle\\\", icon == \\\"默认\\\" ? \\\"蓝莓\\\" : \\\"默认\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, icon),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"显示详细：\\\" + detail,\\n    url: $().lazyRule((detail) => {\\n        setItem(\\\"detail\\\", detail == \\\"开\\\" ? \\\"关\\\" : \\\"开\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, detail),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"字幕功能：\\\" + subtitle,\\n    url: $().lazyRule((subtitle) => {\\n        setItem(\\\"subtitle\\\", subtitle == \\\"开\\\" ? \\\"关\\\" : \\\"开\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, subtitle),\\n    col_type: \\\"text_2\\\"\\n}, {\\n    title: \\\"时间格式：\\\" + (timestamp == \\\"0\\\" ? \\\"2022/08/20 17:14:31\\\" : \\\"Sat, 20 Aug 2022 09:14:31 GMT\\\"),\\n    url: $().lazyRule((timestamp) => {\\n        setItem(\\\"time\\\", timestamp == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }, timestamp),\\n    col_type: \\\"text_1\\\"\\n}, {\\n    url: $().rule(() => {\\n        setResult([{\\n            title: `\\n            <p>本篇文章只针对设置，其他的使用方法已经在规则中说明清除了</p> <p><ins><ins>前提条件：已经更新7.9版本</ins></ins></p> <p>海阔视界首页频道规则【Webdav】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=5210&amp;auth=ab23052b-c0d6-58fc-9555-a2502a00a387</p> <h1 id=\\\"webdav%E6%98%AF%E4%BB%80%E4%B9%88\\\" tabindex=\\\"-1\\\">Webdav是什么</h1> <p>webdav就是一种网盘文件传输协议，常用于小众软件的数据备份。本规则可以管理webdav的文件，支持浏览、播放、下载、上传、删除等操作</p> <h1 id=\\\"%E6%89%93%E5%BC%80%E8%AE%BE%E7%BD%AE\\\" tabindex=\\\"-1\\\">打开设置</h1> <p><img src=\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_082550_com.example.hikerview.jpg\\\" alt=\\\"Screenshot_20220821_082550_com.example.hikerview\\\" /></p> <p>将你的webdav链接和账户密码填进去（这里推荐使用坚果云，优点:稳定;缺点:容量少，价格贵。也可以自己搭建webdav系统，例如alist和cloudreve，需要一定的动手能力）</p> <h2 id=\\\"%E8%AE%BE%E7%BD%AE%E5%9B%BE%E6%A0%87\\\" tabindex=\\\"-1\\\">设置图标</h2> <p>本规则内置两种风格的图标，分别为道长的和蓝莓的，自己选择</p> <h2 id=\\\"%E6%98%BE%E7%A4%BA%E8%AF%A6%E7%BB%86\\\" tabindex=\\\"-1\\\">显示详细</h2> <p>可以列出当前文件夹或文件的创建时间。<br /> <strong><strong>问题：</strong></strong><br /> 不能自动播放下一集</p> <h2 id=\\\"%E5%AD%97%E5%B9%95\\\" tabindex=\\\"-1\\\">字幕</h2> <p>字幕功能如果打开，那么如果视频与字幕的文件名相同，那么就会自动挂载上。如果当前文件夹有这个字幕文件，但是名字不同，就会跳出选择框选择</p> <h1 id=\\\"%E8%BF%94%E5%9B%9E%E4%B8%BB%E7%95%8C%E9%9D%A2\\\" tabindex=\\\"-1\\\">返回主界面</h1> <p><img src=\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_140705_com.example.hikerview.jpg\\\" alt=\\\"Screenshot_20220821_140705_com.example.hikerview\\\" /><br /> 可以看见有操作栏，可以上传文件，新建文件夹和删除文件三个操作</p> <p>下面是你的文件，你可以像浏览文件管理器一样使用他</p> <h1 id=\\\"%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE\\\" tabindex=\\\"-1\\\">高级设置</h1> <p>点击编辑规则，划到底部的预处理<br /> <img src=\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_141135_com.example.hikerview.jpg\\\" alt=\\\"Screenshot_20220821_141135_com.example.hikerview\\\" /><br /> 根据注释修改，我写的几个文件格式已经很完整了，如果有朋友认为不好，可以自行修改<br /> 格式：[“类型1”,“类型2”]</p> <p>都完成了，enjoy💞</p>\\n            `,\\n            col_type: \\\"rich_text\\\"\\n        }])\\n    }),\\n    title: \\\"查看使用说明\\\",\\n    desc: \\\"Powered by Joe&小棉袄\\\",\\n    col_type: \\\"text_center_1\\\",\\n    extra: {\\n        lineVisible: false\\n    }\\n})\\nsetResult(d);\",\"group\":\"①网盘\",\"ua\":\"mobile\",\"preRule\":\"/*\\n你想自定义的文件格式\\ntext：文本，自动打开，\\naudio：音频，自动播放，\\nmovie：视频，自动播放\\nimg：图片，自动预览\\nsubtitle：字幕，手动开关\\n*/\\n$.extend({\\n    text: [\\\"htm\\\", \\\"html\\\", \\\"xml\\\", \\\"java\\\", \\\"properties\\\", \\\"sql\\\", \\\"js\\\", \\\"md\\\", \\\"json\\\", \\\"conf\\\", \\\"ini\\\", \\\"vue\\\", \\\"php\\\", \\\"py\\\", \\\"bat\\\", \\\"gitignore\\\", \\\"yml\\\", \\\"go\\\", \\\"sh\\\", \\\"c\\\", \\\"cpp\\\", \\\"h\\\", \\\"hpp\\\", \\\"tsx\\\"],\\n    audio: [\\\"mp3\\\", \\\"flac\\\", \\\"ogg\\\", \\\"m4a\\\", \\\"wav\\\", \\\"opus\\\"],\\n    movie: [\\\"mp4\\\", \\\"mkv\\\", \\\"avi\\\", \\\"mov\\\", \\\"rmvb\\\", \\\"webm\\\", \\\"flv\\\", \\\"m4v\\\", \\\"m3u8\\\"],\\n    img: [\\\"jpg\\\", \\\"png\\\", \\\"jpeg\\\", \\\"gif\\\", \\\"svg\\\", \\\"raw\\\"],\\n    subtitle: [\\\"vtt\\\", \\\"srt\\\", \\\"ass\\\"]\\n})\",\"pages\":\"[{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"设置\\\",\\\"path\\\":\\\"settings\\\",\\\"rule\\\":\\\"js:\\\\n/*addListener('onClose', $.toString(() => {\\\\n    //saveFile(\\\\\\\"hiker://files/rules/webdav/info.json\\\\\\\", JSON.stringify([getItem(\\\\\\\"dav\\\\\\\"), getItem(\\\\\\\"username\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\")]))\\\\n    //clearMyVar(\\\\\\\"path\\\\\\\")\\\\n    //refreshPage()\\\\n}))*/\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"webdav地址：\\\\\\\" + getItem(\\\\\\\"dav\\\\\\\", \\\\\\\"请输入WebDav地址\\\\\\\"),\\\\n    url: $(getItem(\\\\\\\"dav\\\\\\\", \\\\\\\"\\\\\\\"), \\\\\\\"请输入正确格式的webdav链接！！！\\\\\\\").input(() => {\\\\n        if (!input.startsWith(\\\\\\\"http\\\\\\\")) {\\\\n            return \\\\\\\"toast://请输入正确的webdav链接！！！\\\\\\\"\\\\n        } else {\\\\n            if (input[input.length - 1] == \\\\\\\"/\\\\\\\") {\\\\n                url = input.substring(0, input.length - 1)\\\\n                setItem(\\\\\\\"dav\\\\\\\", url)\\\\n            } else {\\\\n                setItem(\\\\\\\"dav\\\\\\\", input)\\\\n            }\\\\n        }\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }),\\\\n    col_type: \\\\\\\"text_1\\\\\\\"\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"账户\\\\\\\",\\\\n    url: $(getItem(\\\\\\\"user\\\\\\\", \\\\\\\"\\\\\\\")).input(() => {\\\\n        setItem(\\\\\\\"user\\\\\\\", input)\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }),\\\\n    col_type: \\\\\\\"text_2\\\\\\\"\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"密码\\\\\\\",\\\\n    url: $(getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\")).input(() => {\\\\n        setItem(\\\\\\\"passwd\\\\\\\", input)\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }),\\\\n    col_type: \\\\\\\"text_2\\\\\\\"\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"测试连接\\\\\\\",\\\\n    url: $().lazyRule(() => {\\\\n        const {\\\\n            getFiles\\\\n        } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n        if (getFiles(getItem(\\\\\\\"dav\\\\\\\") + \\\\\\\"/\\\\\\\")) {\\\\n            return \\\\\\\"toast://连接成功\\\\\\\"\\\\n        } else {\\\\n            return \\\\\\\"toast://连接失败，请检查账户密码\\\\\\\"\\\\n        }\\\\n    }),\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n})\\\\nlet icon = getItem(\\\\\\\"iconStyle\\\\\\\", \\\\\\\"默认\\\\\\\")\\\\nlet detail = getItem(\\\\\\\"detail\\\\\\\", \\\\\\\"开\\\\\\\")\\\\nlet subtitle = getItem(\\\\\\\"subtitle\\\\\\\", \\\\\\\"开\\\\\\\")\\\\nlet timestamp = getItem(\\\\\\\"time\\\\\\\", \\\\\\\"0\\\\\\\")\\\\nlet newVersion;\\\\nlet myVersion = MY_PARAMS.version || 999;\\\\ntry {\\\\n    res = JSON.parse(fetch(\\\\\\\"http://hiker.nokia.press/hikerule/dev/getbyid?id=5210\\\\\\\"))\\\\n    newVersion = res.result.ver\\\\n} catch (e) {\\\\n    toast(\\\\\\\"道长仓库抽风了，本次未检测到新版信息\\\\\\\");\\\\n    newVersion = myVersion;\\\\n}\\\\nlet isUpdate = Number(newVersion) <= Number(myVersion);\\\\nlet isVer = Number(newVersion) === Number(myVersion);\\\\nd.push({\\\\n    col_type: \\\\\\\"line_blank\\\\\\\"\\\\n}, {\\\\n    title: isUpdate ? \\\\\\\"已是最新版\\\\\\\" : \\\\\\\"🆙新版本\\\\\\\",\\\\n    url: \\\\\\\"rule://5rW36ZiU6KeG55WM6aaW6aG16aKR6YGT6KeE5YiZ44CQV2ViZGF244CR77+laG9tZV9ydWxlX3VybO+/pWh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUyMTAmYXV0aD1hYjIzMDUyYi1jMGQ2LTU4ZmMtOTU1NS1hMjUwMmEwMGEzODc=\\\\\\\",\\\\n    col_type: \\\\\\\"text_2\\\\\\\"\\\\n}, {\\\\n    title: \\\\\\\"设置图标：\\\\\\\" + icon,\\\\n    url: $().lazyRule((icon) => {\\\\n        setItem(\\\\\\\"iconStyle\\\\\\\", icon == \\\\\\\"默认\\\\\\\" ? \\\\\\\"蓝莓\\\\\\\" : \\\\\\\"默认\\\\\\\")\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, icon),\\\\n    col_type: \\\\\\\"text_2\\\\\\\"\\\\n}, {\\\\n    title: \\\\\\\"显示详细：\\\\\\\" + detail,\\\\n    url: $().lazyRule((detail) => {\\\\n        setItem(\\\\\\\"detail\\\\\\\", detail == \\\\\\\"开\\\\\\\" ? \\\\\\\"关\\\\\\\" : \\\\\\\"开\\\\\\\")\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, detail),\\\\n    col_type: \\\\\\\"text_2\\\\\\\"\\\\n}, {\\\\n    title: \\\\\\\"字幕功能：\\\\\\\" + subtitle,\\\\n    url: $().lazyRule((subtitle) => {\\\\n        setItem(\\\\\\\"subtitle\\\\\\\", subtitle == \\\\\\\"开\\\\\\\" ? \\\\\\\"关\\\\\\\" : \\\\\\\"开\\\\\\\")\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, subtitle),\\\\n    col_type: \\\\\\\"text_2\\\\\\\"\\\\n}, {\\\\n    title: \\\\\\\"时间格式：\\\\\\\" + (timestamp == \\\\\\\"0\\\\\\\" ? \\\\\\\"2022/08/20 17:14:31\\\\\\\" : \\\\\\\"Sat, 20 Aug 2022 09:14:31 GMT\\\\\\\"),\\\\n    url: $().lazyRule((timestamp) => {\\\\n        setItem(\\\\\\\"time\\\\\\\", timestamp == \\\\\\\"0\\\\\\\" ? \\\\\\\"1\\\\\\\" : \\\\\\\"0\\\\\\\")\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, timestamp),\\\\n    col_type: \\\\\\\"text_1\\\\\\\"\\\\n}, {\\\\n    url: $().rule(() => {\\\\n        setResult([{\\\\n            title: `\\\\n            <p>本篇文章只针对设置，其他的使用方法已经在规则中说明清除了</p> <p><ins><ins>前提条件：已经更新7.9版本</ins></ins></p> <p>海阔视界首页频道规则【Webdav】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=5210&amp;auth=ab23052b-c0d6-58fc-9555-a2502a00a387</p> <h1 id=\\\\\\\"webdav%E6%98%AF%E4%BB%80%E4%B9%88\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">Webdav是什么</h1> <p>webdav就是一种网盘文件传输协议，常用于小众软件的数据备份。本规则可以管理webdav的文件，支持浏览、播放、下载、上传、删除等操作</p> <h1 id=\\\\\\\"%E6%89%93%E5%BC%80%E8%AE%BE%E7%BD%AE\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">打开设置</h1> <p><img src=\\\\\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_082550_com.example.hikerview.jpg\\\\\\\" alt=\\\\\\\"Screenshot_20220821_082550_com.example.hikerview\\\\\\\" /></p> <p>将你的webdav链接和账户密码填进去（这里推荐使用坚果云，优点:稳定;缺点:容量少，价格贵。也可以自己搭建webdav系统，例如alist和cloudreve，需要一定的动手能力）</p> <h2 id=\\\\\\\"%E8%AE%BE%E7%BD%AE%E5%9B%BE%E6%A0%87\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">设置图标</h2> <p>本规则内置两种风格的图标，分别为道长的和蓝莓的，自己选择</p> <h2 id=\\\\\\\"%E6%98%BE%E7%A4%BA%E8%AF%A6%E7%BB%86\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">显示详细</h2> <p>可以列出当前文件夹或文件的创建时间。<br /> <strong><strong>问题：</strong></strong><br /> 不能自动播放下一集</p> <h2 id=\\\\\\\"%E5%AD%97%E5%B9%95\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">字幕</h2> <p>字幕功能如果打开，那么如果视频与字幕的文件名相同，那么就会自动挂载上。如果当前文件夹有这个字幕文件，但是名字不同，就会跳出选择框选择</p> <h1 id=\\\\\\\"%E8%BF%94%E5%9B%9E%E4%B8%BB%E7%95%8C%E9%9D%A2\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">返回主界面</h1> <p><img src=\\\\\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_140705_com.example.hikerview.jpg\\\\\\\" alt=\\\\\\\"Screenshot_20220821_140705_com.example.hikerview\\\\\\\" /><br /> 可以看见有操作栏，可以上传文件，新建文件夹和删除文件三个操作</p> <p>下面是你的文件，你可以像浏览文件管理器一样使用他</p> <h1 id=\\\\\\\"%E9%AB%98%E7%BA%A7%E8%AE%BE%E7%BD%AE\\\\\\\" tabindex=\\\\\\\"-1\\\\\\\">高级设置</h1> <p>点击编辑规则，划到底部的预处理<br /> <img src=\\\\\\\"http://alist.joegu.tk/d/hiker/Screenshot_20220821_141135_com.example.hikerview.jpg\\\\\\\" alt=\\\\\\\"Screenshot_20220821_141135_com.example.hikerview\\\\\\\" /><br /> 根据注释修改，我写的几个文件格式已经很完整了，如果有朋友认为不好，可以自行修改<br /> 格式：[“类型1”,“类型2”]</p> <p>都完成了，enjoy💞</p>\\\\n            `,\\\\n            col_type: \\\\\\\"rich_text\\\\\\\"\\\\n        }])\\\\n    }),\\\\n    title: \\\\\\\"查看使用说明\\\\\\\",\\\\n    desc: \\\\\\\"Powered by Joe&小棉袄\\\\\\\",\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n    extra: {\\\\n        lineVisible: false\\\\n    }\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"代码\\\",\\\"path\\\":\\\"code\\\",\\\"rule\\\":\\\"$.exports.getFiles = function(path) {\\\\n    try {\\\\n        if (!path || path == \\\\\\\"\\\\\\\") {\\\\n            return false\\\\n        }\\\\n        let webdav = buildWebDav(path, getItem(\\\\\\\"user\\\\\\\", \\\\\\\"\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\"))\\\\n        let res = webdav.list()\\\\n        res = JSON.parse(res)\\\\n        return res\\\\n    } catch (e) {\\\\n        log(e.message)\\\\n        return false\\\\n    }\\\\n}\\\\n$.exports.fetchFile = function(path) {\\\\n    let res = request(path, {\\\\n        headers: {\\\\n            \\\\\\\"authorization\\\\\\\": \\\\\\\"Basic \\\\\\\" + base64Encode(getItem(\\\\\\\"user\\\\\\\") + \\\\\\\":\\\\\\\" + getItem(\\\\\\\"passwd\\\\\\\"))\\\\n        }\\\\n    })\\\\n    return res\\\\n}\\\\n$.exports.getIcon = function(content) {\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    let iconStyles = [{\\\\n        name: '默认',\\\\n        url: 'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型/'\\\\n    }, {\\\\n        name: '蓝莓',\\\\n        url: 'https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/'\\\\n    }];\\\\n    let iconStyle = getItem('iconStyle', '默认');\\\\n    let nowStyle = iconStyles.find(x => x.name === iconStyle);\\\\n    let iconRoot = nowStyle ? nowStyle.url : iconStyles[0].url;\\\\n    let root = iconRoot;\\\\n    if (content.dir) {\\\\n        img = root + \\\\\\\"文件夹.svg\\\\\\\"\\\\n    } else {\\\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip'.split('|');\\\\n        let fileName = content.name\\\\n        let hzm = getHzm(fileName)\\\\n        if (files.includes(hzm)) {\\\\n            img = root + hzm + '.svg';\\\\n        } else {\\\\n            img = root + \\\\\\\"文件.svg\\\\\\\"\\\\n        }\\\\n    }\\\\n    return img\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\\n$.exports.removeExt = function(file) {\\\\n    return file.split('.').slice(0, -1).join('.')\\\\n};\\\\n$.exports.getSub = function(list) {\\\\n    const {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    let s = []\\\\n    list.forEach(item => {\\\\n        if ($.subtitle.includes(getHzm(item.name))) {\\\\n            s.push({\\\\n                title: item.name,\\\\n                url: item.url\\\\n            })\\\\n        }\\\\n    })\\\\n    return s\\\\n}\\\\n$.exports.download = function(path, name) {\\\\n    let webdav = buildWebDav(path, getItem(\\\\\\\"user\\\\\\\", \\\\\\\"\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\"))\\\\n    let p = \\\\\\\"hiker://files/cache/_fileSelect_\\\\\\\" + name;\\\\n    webdav.download(name, p);\\\\n    return getPath(p);\\\\n}\\\\n$.exports.deleteFile = function(path, name) {\\\\n    let webdav = buildWebDav(path, getItem(\\\\\\\"user\\\\\\\", \\\\\\\"\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\"))\\\\n    webdav.delete(name)\\\\n}\\\\n$.exports.sorts = function(list, method) {\\\\n    if (method.includes(\\\\\\\"名称\\\\\\\")) {\\\\n        list.sort(function(a, b) {\\\\n            return a.name.localeCompare(b.name)\\\\n        })\\\\n    } else if (method.includes(\\\\\\\"时间\\\\\\\")) {\\\\n        list.sort(function(a, b) {\\\\n            return a.modifyTimestamp - b.modifyTimestamp\\\\n        })\\\\n    }\\\\n    if (method.includes(\\\\\\\"反\\\\\\\")) {\\\\n        list.reverse();\\\\n    }\\\\n    return list\\\\n}\\\\n$.exports.getInfo = function() {\\\\n    return JSON.parse(readFile(\\\\\\\"hiker://files/rules/webdav/info.json\\\\\\\"))\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"主页\\\",\\\"path\\\":\\\"main\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nconst {\\\\n    getFiles,\\\\n    download,\\\\n    deleteFile,\\\\n    getIcon,\\\\n    sorts\\\\n} = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\nvar path = getMyVar(\\\\\\\"path\\\\\\\", getItem(\\\\\\\"dav\\\\\\\") + \\\\\\\"/\\\\\\\")\\\\nlet files = getFiles(path)\\\\nif (files) {\\\\n    let paths = getMyVar(\\\\\\\"path\\\\\\\").replace(getItem(\\\\\\\"dav\\\\\\\"), \\\\\\\"\\\\\\\")\\\\n    paths = paths.split(\\\\\\\"/\\\\\\\")\\\\n    let temp = \\\\\\\"\\\\\\\"\\\\n    sorts(files, getMyVar(\\\\\\\"sort\\\\\\\", \\\\\\\"默认\\\\\\\"))\\\\n    d.push({\\\\n        title: getMyVar(\\\\\\\"more\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"∧\\\\\\\" : \\\\\\\"∨\\\\\\\",\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n        url: $().lazyRule((path) => {\\\\n            putMyVar(\\\\\\\"more\\\\\\\", getMyVar(\\\\\\\"more\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"1\\\\\\\" : \\\\\\\"0\\\\\\\")\\\\n            refreshPage()\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, path)\\\\n    }, {\\\\n        title: \\\\\\\"..\\\\\\\",\\\\n        url: $().lazyRule((paths) => {\\\\n            paths.pop()\\\\n            putMyVar(\\\\\\\"path\\\\\\\", getItem(\\\\\\\"dav\\\\\\\") + paths.join(\\\\\\\"/\\\\\\\"))\\\\n            refreshPage()\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, paths),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    }, {\\\\n        title: \\\\\\\"🏠\\\\\\\",\\\\n        url: $().lazyRule(() => {\\\\n            putMyVar(\\\\\\\"path\\\\\\\", getItem(\\\\\\\"dav\\\\\\\"))\\\\n            refreshPage()\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    })\\\\n    paths.forEach(item => {\\\\n        if (item != \\\\\\\"\\\\\\\") {\\\\n            temp += \\\\\\\"/\\\\\\\" + item\\\\n            d.push({\\\\n                title: decodeURIComponent(item),\\\\n                url: $().lazyRule((temp) => {\\\\n                    putMyVar(\\\\\\\"path\\\\\\\", getItem(\\\\\\\"dav\\\\\\\") + temp)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, temp),\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n            })\\\\n        }\\\\n    });\\\\n    if (getMyVar(\\\\\\\"more\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"1\\\\\\\") {\\\\n        let sorr = [\\\\\\\"默认\\\\\\\", \\\\\\\"名称\\\\\\\", \\\\\\\"时间\\\\\\\"]\\\\n        d.push({\\\\n            title: \\\\\\\"设置\\\\\\\",\\\\n            url: \\\\\\\"hiker://page/settings\\\\\\\",\\\\n            img: \\\\\\\"hiker://images/设置\\\\\\\",\\\\n            col_type: \\\\\\\"icon_small_4\\\\\\\",\\\\n            extra: {\\\\n                version: MY_RULE.version\\\\n            }\\\\n        }, {\\\\n            title: \\\\\\\"上传文件\\\\\\\",\\\\n            url: \\\\\\\"fileSelect://\\\\\\\" + $.toString((path) => {\\\\n                let webdav = buildWebDav(path, getItem(\\\\\\\"user\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\"))\\\\n                let s = input.split(\\\\\\\"/\\\\\\\")\\\\n                log(webdav.upload(s[s.length - 1].replace(\\\\\\\"_fileSelect_\\\\\\\", \\\\\\\"\\\\\\\"), input));\\\\n                refreshPage();\\\\n            }, path),\\\\n            img: \\\\\\\"hiker://images/home_icon_bookmark\\\\\\\",\\\\n            col_type: \\\\\\\"icon_small_4\\\\\\\",\\\\n        }, {\\\\n            title: \\\\\\\"新文件夹\\\\\\\",\\\\n            url: $(\\\\\\\"\\\\\\\", \\\\\\\"输入文件夹名称\\\\\\\").input((path) => {\\\\n                let webdav = buildWebDav(path, getItem(\\\\\\\"user\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\"))\\\\n                webdav.makeDir(input)\\\\n                refreshPage()\\\\n                return \\\\\\\"hiker://empty\\\\\\\"\\\\n            }, path),\\\\n            img: \\\\\\\"hiker://images/home_icon_fold\\\\\\\",\\\\n            col_type: \\\\\\\"icon_small_4\\\\\\\"\\\\n        }, {\\\\n            title: getMyVar(\\\\\\\"delete\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"删除文件\\\\\\\" : \\\\\\\"结束删除\\\\\\\",\\\\n            img: \\\\\\\"hiker://images/home_icon_item\\\\\\\",\\\\n            url: $().lazyRule(() => {\\\\n                putMyVar(\\\\\\\"delete\\\\\\\", getMyVar(\\\\\\\"delete\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"1\\\\\\\" : \\\\\\\"0\\\\\\\")\\\\n                refreshPage()\\\\n                return \\\\\\\"hiker://empty\\\\\\\"\\\\n            }),\\\\n            col_type: \\\\\\\"icon_small_4\\\\\\\"\\\\n        })\\\\n        sorr.forEach(item => {\\\\n            var n = getMyVar(\\\\\\\"sort\\\\\\\", \\\\\\\"默认\\\\\\\")\\\\n            if (n == item) {\\\\n                var title = item + \\\\\\\"↓\\\\\\\"\\\\n            } else if (n.includes(\\\\\\\"反\\\\\\\") && n.includes(item)) {\\\\n                var title = item + \\\\\\\"↑\\\\\\\"\\\\n            } else {\\\\n                var title = item + \\\\\\\"↕\\\\\\\"\\\\n            }\\\\n            d.push({\\\\n                title: title,\\\\n                col_type: \\\\\\\"flex_button\\\\\\\",\\\\n                url: $().lazyRule((item) => {\\\\n                    if (getMyVar(\\\\\\\"sort\\\\\\\", \\\\\\\"默认\\\\\\\") == item) {\\\\n                        putMyVar(\\\\\\\"sort\\\\\\\", item + \\\\\\\"反\\\\\\\")\\\\n                    } else {\\\\n                        putMyVar(\\\\\\\"sort\\\\\\\", item)\\\\n                    }\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, item)\\\\n            })\\\\n        })\\\\n    }\\\\n    files.forEach(item => {\\\\n        let fileName = decodeURIComponent(item.name)\\\\n        let len = 30;\\\\n        let len2 = len / 2;\\\\n        if (fileName.length >= len) {\\\\n            fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\\\n        }\\\\n        let icon = getIcon(item)\\\\n        if (getMyVar(\\\\\\\"delete\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\") {\\\\n            var url = $().lazyRule((item, files) => {\\\\n                const {\\\\n                    fetchFile,\\\\n                    getHzm,\\\\n                    getSub,\\\\n                    removeExt,\\\\n                    download\\\\n                } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n                if (item.dir) {\\\\n                    putMyVar(\\\\\\\"path\\\\\\\", item.url)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                } else if ($.movie.includes(getHzm(item.name))) {\\\\n                    if (getItem(\\\\\\\"subtitle\\\\\\\", \\\\\\\"开\\\\\\\") == \\\\\\\"开\\\\\\\") {\\\\n                        let subtitles = getSub(files)\\\\n                        let names = [\\\\\\\"不需要字幕\\\\\\\"]\\\\n                        subtitles.forEach(ds => {\\\\n                            names.push(ds.title)\\\\n                        })\\\\n                        if (subtitles.length != 0) {\\\\n                            return $(names, 1, \\\\\\\"请选择字幕\\\\\\\").select((names, subtitles, url) => {\\\\n                                if (input == \\\\\\\"不需要字幕\\\\\\\") {\\\\n                                    return JSON.stringify({\\\\n                                        urls: [url],\\\\n                                        headers: {\\\\n                                            \\\\\\\"Authorization\\\\\\\": \\\\\\\"Basic \\\\\\\" + base64Encode(getItem(\\\\\\\"username\\\\\\\") + \\\\\\\":\\\\\\\" + getItem(\\\\\\\"passwd\\\\\\\"))\\\\n                                        }\\\\n                                    })\\\\n                                } else {\\\\n                                    return JSON.stringify({\\\\n                                        urls: [url],\\\\n                                        subtitle: subtitles[names.indexOf(input) - 1].url,\\\\n                                        headers: {\\\\n                                            \\\\\\\"Authorization\\\\\\\": \\\\\\\"Basic \\\\\\\" + base64Encode(getItem(\\\\\\\"username\\\\\\\") + \\\\\\\":\\\\\\\" + getItem(\\\\\\\"passwd\\\\\\\"))\\\\n                                        }\\\\n                                    })\\\\n                                }\\\\n                            }, names, subtitles, item.url)\\\\n                        } else {\\\\n                            return item.playUrl + \\\\\\\"#isVideo=true#\\\\\\\"\\\\n                        }\\\\n                    } else {\\\\n                        return item.playUrl + \\\\\\\"#isVideo=true#\\\\\\\"\\\\n                    }\\\\n                } else if (getHzm(item.name) == \\\\\\\"md\\\\\\\") {\\\\n                    require(\\\\\\\"https://gitlab.com/hjdhnx/hiker/-/raw/main/js/marked.min.js\\\\\\\")\\\\n                    return \\\\\\\"hiker://page/preview?content=\\\\\\\" + base64Encode(marked.parse(fetchFile(item.url)))\\\\n                } else if ($.text.includes(getHzm(item.name))) {\\\\n                    return \\\\\\\"hiker://page/preview?content=\\\\\\\" + base64Encode(fetchFile(item.url))\\\\n                } else if ($.audio.includes(getHzm(item.name))) {\\\\n                    return item.playUrl + \\\\\\\"#isMusic=true#\\\\\\\"\\\\n                } else if ($.img.includes(getHzm(item.name))) {\\\\n                    let p = download(getMyVar(\\\\\\\"path\\\\\\\", getItem(\\\\\\\"dav\\\\\\\")), item.name)\\\\n                    return p\\\\n                } else {\\\\n                    return \\\\\\\"download://\\\\\\\" + item.playUrl\\\\n                }\\\\n            }, item, files)\\\\n        } else {\\\\n            var url = $(\\\\\\\"确认删除？\\\\\\\").confirm((url, deleteFile, path) => {\\\\n                deleteFile(getMyVar(\\\\\\\"path\\\\\\\", getItem(\\\\\\\"dav\\\\\\\")), path)\\\\n                refreshPage()\\\\n                return \\\\\\\"toast://删除成功\\\\\\\"\\\\n            }, item.url, deleteFile, item.name)\\\\n        }\\\\n        d.push({\\\\n            title: fileName,\\\\n            img: icon,\\\\n            url: url,\\\\n            col_type: \\\\\\\"avatar\\\\\\\"\\\\n        })\\\\n        if (getItem(\\\\\\\"detail\\\\\\\", \\\\\\\"开\\\\\\\") == \\\\\\\"开\\\\\\\") {\\\\n            d.push({\\\\n                title: \\\\\\\"““””<small>““””<font color='#aaaaaa'>\\\\\\\" + (getItem(\\\\\\\"time\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? item.modifyTimeStr : item.modifyTime) + \\\\\\\"</font></small>\\\\\\\",\\\\n                url: url,\\\\n                col_type: \\\\\\\"text_1\\\\\\\"\\\\n            })\\\\n        }\\\\n    })\\\\n} else if (getItem(\\\\\\\"dav\\\\\\\", \\\\\\\"\\\\\\\") == \\\\\\\"\\\\\\\" || getItem(\\\\\\\"username\\\\\\\", \\\\\\\"\\\\\\\") == \\\\\\\"\\\\\\\" || getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\") == \\\\\\\"\\\\\\\") {\\\\n    d.push({\\\\n        title: \\\\\\\"当前未设置账号，点我设置\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/settings\\\\\\\",\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n    })\\\\n} else {\\\\n    let paths = getMyVar(\\\\\\\"path\\\\\\\").replace(getItem(\\\\\\\"dav\\\\\\\"), \\\\\\\"\\\\\\\")\\\\n    paths = paths.split(\\\\\\\"/\\\\\\\")\\\\n    d.push({\\\\n        title: \\\\\\\"设置\\\\\\\",\\\\n        col_type: \\\\\\\"text_1\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/settings\\\\\\\"\\\\n    }, {\\\\n        title: \\\\\\\"出错了，点击刷新\\\\\\\",\\\\n        url: $().lazyRule((paths) => {\\\\n            refreshPage()\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, paths),\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n    })\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"预览\\\",\\\"path\\\":\\\"preview\\\",\\\"rule\\\":\\\"js:\\\\nlet content = base64Decode(getParam(\\\\\\\"content\\\\\\\"))\\\\nsetResult([{\\\\n    title: content,\\\\n    col_type: \\\\\\\"long_text\\\\\\\"\\\\n}])\\\"}]\",\"proxy\":\"\"}","title":"当前未设置账号，点我设置"}