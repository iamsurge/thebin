#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}

ll S(ll a1, ll n) {
    return (2 * a1 + n - 1) * n / 2;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    ll N, M;
    cin >> M >> N;
    if(N >= M) {
        cout << M;
        exit(0);
    }
    if (S(1, N) == M) {
        for (int i = 1; i <= N; ++i) {
            cout << i << ' ';
        }
        exit(0);
    }
    ll L = 0, R = N, med, Sn = S(1, N), Sm, now;
    while ( L + 1 < R) {
        med = (L + R) / 2;
        Sm = S(med + 1, N - med);
        now = Sn - Sm;
        if (now > M) {
            L = med;
        } else {
            R = med;
        }
    }
    ll x = Sn - S(R + 1, N - R);
    vector <ll> ans;
    ans.pb(x);
    for (int i = R + 1; i <= N; ++i) {
        ans.pb(i);
    }
    cvl(ans);
}
