package main;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

class SegmentTreeToLeft {
    static final int maxn = 50000 + 100;
    static int[] left = new int[maxn << 2];

    static int lson(int rt) {
        return rt << 1;
    }

    static int rson(int rt) {
        return rt << 1 | 1;
    }

    static void pushUp(int rt, int len) {
        int l = lson(rt);
        int r = rson(rt);
        if (left[r] == (len >> 1)) {
            left[rt] = left[r] + left[l];
        } else {
            left[rt] = left[r];
        }
    }

    static void build(int rt, int l, int r) {
        if (l == r) {
            left[rt] = 1;
            return;
        }
        int m = (l + r) >> 1;
        build(lson(rt), l, m);
        build(rson(rt), m + 1, r);
        pushUp(rt, r - l + 1);
    }

    static void update(int rt, int l, int r, int idx, int x) {
        if (l == r) {
            left[rt] = x;
            return;
        }
        int m = (l + r) >> 1;
        if (idx <= m) {
            update(lson(rt), l, m, idx, x);
        } else {
            update(rson(rt), m + 1, r, idx, x);
        }
        pushUp(rt, r - l + 1);
    }

    static int query(int rt, int l, int r, int idx) {
        if (r == idx) {
            return left[rt];
        }
        int m = (l + r) >> 1;
        int ret = 0;
        if (m < idx) {
            ret += query(rson(rt), m + 1, r, idx);
            if (ret == idx - m) {
                ret += left[lson(rt)];
            }
        } else {
            ret += query(lson(rt), l, m, idx);
        }
        return ret;
    }
};

class SegmentTreeToRight {
    static final int maxn = 50000 + 100;
    static int[] right = new int[maxn << 2];

    static int lson(int rt) {
        return rt << 1;
    }

    static int rson(int rt) {
        return rt << 1 | 1;
    }

    static void pushUp(int rt, int len) {
        int l = lson(rt);
        int r = rson(rt);
        if (right[l] == (len >> 1 | 1)) {
            right[rt] = right[l] + right[r];
        } else {
            right[rt] = right[l];
        }
    }

    static void build(int rt, int l, int r) {
        if (l == r) {
            right[rt] = 1;
            return;
        }
        int m = (l + r) >> 1;
        build(lson(rt), l, m);
        build(rson(rt), m + 1, r);
        pushUp(rt, r - l + 1);
    }

    static void update(int rt, int l, int r, int idx, int x) {
        if (l == r) {
            right[rt] = x;
            return;
        }
        int m = (l + r) >> 1;
        if (idx <= m) {
            update(lson(rt), l, m, idx, x);
        } else {
            update(rson(rt), m + 1, r, idx, x);
        }
        pushUp(rt, r - l + 1);
    }

    static int query(int rt, int l, int r, int idx) {
        if (l == idx) {
            return right[rt];
        }
        int m = (l + r) >> 1;
        int ret = 0;
        if (idx <= m) {
            ret += query(lson(rt), l, m, idx);
            if (ret == m - idx + 1) {
                ret += right[rson(rt)];
            }
        } else {
            ret += query(rson(rt), m + 1, r, idx);
        }
        return ret;
    }
};

public class Main {
    static int n, q, x;
    static String cmd;
    static List<Integer> sta = new ArrayList<>();

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            n = scanner.nextInt();
            q = scanner.nextInt();
            SegmentTreeToLeft.build(1, 1, n);
            SegmentTreeToRight.build(1, 1, n);
            for (int i = 0; i < q; ++i) {
                cmd = scanner.next();
                switch (cmd) {
                    case "D": {
                        x = scanner.nextInt();
                        sta.add(x);
                        SegmentTreeToLeft.update(1, 1, n, x, 0);
                        SegmentTreeToRight.update(1, 1, n, x, 0);
                        break;
                    }
                    case "Q": {
                        x = scanner.nextInt();
                        int l = SegmentTreeToLeft.query(1, 1, n, x);
                        int r = SegmentTreeToRight.query(1, 1, n, x);
                        System.out.println("l = " + l + " r = " + r);
                        System.out.println(Math.max(0,  + l + r - 1));
                        break;
                    }
                    case "R": {
                        if (sta.isEmpty()) {
                            break;
                        }
                        x = sta.get(sta.size() - 1);
                        sta.remove(sta.size() - 1);
                        SegmentTreeToLeft.update(1, 1, n, x, 1);
                        SegmentTreeToRight.update(1, 1, n, x, 1);
                        break;
                    }
                }
            }
        }
    }
}
