editor.component.ts

import { Component, OnInit } from '@angular/core';
declare let SquidexFormField: any;

@Component({
  selector: 'classiceditor',
  templateUrl: './classiceditor.component.html'
})

export class ClassicEditorComponent implements OnInit {

    declare tinymceOptions: any;
    declare field: any;
    declare context: any;
    initialValue: string;
    keyUpSetTimeOutIndex: any;
    keyUpDebounceTimer: number;

    constructor() {
        this.initialValue = "";
        this.keyUpSetTimeOutIndex = 0;
        this.keyUpDebounceTimer = 250;

        this.tinymceOptions = {
            height: 500,
            plugins: 'advlist anchor autolink powerpaste charmap code directionality help image lists media nonbreaking preview searchreplace table visualblocks visualchars wordcount',
            toolbar1: 'undo redo | bold italic underline strikethrough | formatpainter | alignleft aligncenter alignright alignjustify | ltr rtl removeformat preview print',
            toolbar2: 'xhr-anchorlink-button anchor image media | numlist bullist | charmap',
            menubar: 'file edit view insert format tools table help',
            menu: {
                file: {title: 'File', items: 'print'},
                edit: {title: 'Edit', items: 'undo redo | cut copy paste | selectall | searchreplace'},
                view: {title: 'View', items: 'code | visualchars visualblocks | preview'},
                insert: {title: 'Insert', items: 'anchor image media | charmap hr nonbreaking'},
                format: {title: 'Format', items: 'bold italic underline strikethrough superscript subscript | formats blockformats align | removeformat'},
                tools: {title: 'Tools', items: 'wordcount'}
            },
            external_plugins: {
                'xhr-tinymce-anchorlink-plugin': '../xhr-tinymce-anchorlink-plugin/assets/plugin.js',
            }
        };
    }

    ngOnInit(): void {
        this.field = new SquidexFormField();
        this.field.onValueChanged(this.onValueChanged.bind(this));
        this.field.onInit(this.onInit.bind(this));
        this.field.onDisabled(this.onSquidexFieldDisabled.bind(this));
    }

    onInit(context: any) {
      this.context = context;
    }

    keyUp(event: any){
        this.debounceTimeBeforeUpdating(event.editor.getContent());
    }

    onValueChanged(value: any){
        this.initialValue = value;
    }

    contentChange(event: any){
        this.field.valueChanged(event.editor.getContent());
    }

    debounceTimeBeforeUpdating(value: any) {
        if (this.keyUpSetTimeOutIndex) {
            clearTimeout(this.keyUpSetTimeOutIndex);
        }

        this.keyUpSetTimeOutIndex = setTimeout(() => {
            this.field.valueChanged(value);
        }, this.keyUpDebounceTimer);
    }

    onSquidexFieldDisabled(value: any){
        //@ts-ignore
        if(window.tinymce.activeEditor){
            //@ts-ignore
            window.tinymce.activeEditor.mode.set(value ? 'readonly' : 'design');
        }
    }
}

editor.component.html

<editor
  [init]="tinymceOptions"
  (onChange)="contentChange($event)"
  initialValue="{{initialValue}}"
  (onKeyUp)="keyUp($event)"
></editor>
