using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace _01._Easter
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string textToDecrypt = Console.ReadLine();
            StringBuilder textDecryption = new StringBuilder(textToDecrypt);

            string command = string.Empty;
            while ((command = Console.ReadLine()) != "Easter")
            {
                string[] commandArgs = command.Split(" ").ToArray();
                string action = commandArgs[0];

                if (commandArgs.Length == 3)
                {
                    if (action == "Replace")
                    {
                        string oldCharString = commandArgs[1];
                        string newCharString = commandArgs[2];
                        char oldChar = char.Parse(oldCharString);
                        char newChar = char.Parse(newCharString);
                        textDecryption.Replace(oldChar, newChar);
                        string printText = textDecryption.ToString();
                        //string printText1 = textToDecrypt.Replace(oldChar, newChar); 

                        Console.WriteLine(printText);
                        //Console.WriteLine(printText1);
                    }
                    else if (action == "Reverse")
                    {
                        int startIndex = int.Parse(commandArgs[1]);
                        int endIndex = int.Parse(commandArgs[2]);
                        string substring = textToDecrypt.Substring(startIndex, endIndex + 1);
                        string reversedString = Reverse(substring);
                        Console.WriteLine(reversedString);

                        
                    }
                    
                }
                else if (commandArgs.Length == 2)
                {
                    if (action == "Remove")
                    {
                        string key = commandArgs[1];
                        int index = textToDecrypt.IndexOf(key);
                        textDecryption = textDecryption.Remove(index, key.Length);

                        Console.WriteLine(textDecryption);
                    }
                    else if (action == "Includes")
                    {
                        string substringToCheck = commandArgs[1];
                        bool containsSubstring = false;
                        if (textToDecrypt.Contains(substringToCheck))
                        {
                            containsSubstring = true;
                        }
                        if (containsSubstring)
                        {
                            Console.WriteLine("True");
                        }
                        else if (!containsSubstring)
                        {
                            Console.WriteLine("False");
                        }
                    }
                    else if (action == "Change")
                    {
                        string rule = commandArgs[1];
                        if (rule == "Lower") // change lowercase charachters to uppercase
                        {
                            char[] stringChars = textToDecrypt.ToCharArray();
                            string changedString = string.Empty;
                            //List<string> changedStringList = new List<string>();
                            for (int j = 0; j < stringChars.Length; j++)
                            {
                                char charToChange = stringChars[j];
                                char changedChar = Char.ToUpper(charToChange);
                                changedString += changedChar.ToString();
                                //changedStringList = changedString.ToList();
                            }
                            Console.WriteLine($"{changedString}");
                            //for (int i = 0; i < textToDecrypt.Length; i++)
                            //{
                                
                            //    //foreach (var ch in stringChars)
                            //    //{
                            //    //    Char.ToUpper(ch);

                            //    //}
                            //    //char checkChar = stringChars[i];
                            //    //if (Char.IsLower(checkChar))
                            //    //{
                            //    //    Char.ToUpper(checkChar);
                            //    //}
                            //}
                        }
                        else if (rule == "Upper") //change uppercasecharachters to lowercase
                        {
                            char[] stringChars = textToDecrypt.ToCharArray();
                            string changedString = string.Empty;
                            //List<string> changedStringList = new List<string>();
                            for (int j = 0; j < stringChars.Length; j++)
                            {
                                char charToChange = stringChars[j];
                                char changedChar = Char.ToLower(charToChange);
                                changedString += changedChar.ToString();
                                //changedStringList = changedString.ToList();
                            }
                            Console.WriteLine($"{changedString}");
                        }
                    }
                }
                static string Reverse(string stringToReverse)
                {
                    char[] charArray = stringToReverse.ToCharArray();
                    Array.Reverse(charArray);
                    return new string(charArray);
                }
            }


        }
    }
}
