using System;
using System.Collections.Generic;
using System.Linq;

namespace ConsoleApplication1
{
    public class Func
    {
        public Dictionary <double, double>  Polynome { get; set; }

        public Func(Dictionary<double, double> polynomesAndCoefs) // создает словарь: степень->коэффициент при степени который является полиномом 
        {
            this.Polynome = polynomesAndCoefs;
        }
        
        public Func()
        {
            this.Polynome = new Dictionary<double, double>();
            this.Polynome.Add(0, 0); //создает полином из 0
        }

        public static Func operator +(Func a, Func b)
        {
            Dictionary<double, double> polynome = a.Polynome;
            foreach (var power in b.Polynome) //берем все ключ значения из первого паолинома и пробегаемся по каждому ключ значению из второго полинома
            {
                if (polynome.Keys.Contains(power.Key)) // если какой-то элемент второго полинома уже содержиться в первом, то просто увеличиваем коэфицент перед ним
                {
                    polynome[power.Key] += power.Value;
                }
                else
                {
                    polynome.Add(power.Key, power.Value); //если же его нет, то просто добавляем его
                }
            }

            return new Func(polynome);
        }
        
        public static Func operator -(Func a, Func b)
        {
            Dictionary<double, double> polynome = a.Polynome;
            foreach (var power in b.Polynome)
            {
                if (polynome.Keys.Contains(power.Key))
                {
                    polynome[power.Key] -= power.Value;
                }
                else
                {
                    polynome.Add(power.Key, -power.Value);
                }
            }

            return new Func(polynome);
        }

        public static Func operator *(Func a, double x)
        {
            Dictionary<double, double> polynome = a.Polynome;
            foreach (var power in a.Polynome)
            {
                polynome[power.Key] *= x;
            }

            return (new Func(polynome));
        }

        public double findValue(double x)
        {
            double resFin = 0;
            foreach (var power in Polynome)
            {
                double res= 1;
                if (power.Key>= 0)
                {
                    for (int i = 0; i < power.Key; ++i)
                    {
                        res *= x;
                    }
                }
                else
                {
                    for (int i = 0; i > power.Key; --i)
                    {
                        res /= x;
                    }
                }

                res *= power.Value;
                resFin += res;
            }

            return resFin;
        }

        public override string ToString()
        {
            string s = "";
            foreach (var power in Polynome)
            {
                s += " (" + power.Value + " * x^" + power.Key+") +";
            }

            s = s.TrimEnd('+');
            s = s.TrimStart(' ');
            return s;
        }
    }
}