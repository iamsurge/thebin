"#include<stdio.h>\r\n#include<stdbool.h>\r\n#define MAX  5\r\n\r\n/*Tipo de dado Pilha que possui um vetor de char e um inteiro que define a posição do topo da pilha*/\r\ntypedef struct pilha\r\n{\r\n     char elementos[MAX];\r\n     int topo; // posição do topo da pilha\r\n\r\n}Pilha;\r\n\r\n// define o topo da pilha como -1\r\nvoid criarP(Pilha *p)\r\n{\r\n    p->topo = -1;\r\n}\r\n// define o topo da pilha como -1 destuindo as antigas posições do topo\r\nvoid destuirP(Pilha *p)\r\n{\r\n    p->topo = -1;\r\n}\r\n// verifica se uma determinada pilha está cheia comparando a posição do topo com a constante MAX\r\nbool cheia (Pilha p)\r\n{\r\n    bool deuCerto;\r\n    if (p.topo == MAX)\r\n    {\r\n        deuCerto = true;\r\n        return deuCerto;\r\n    }  \r\n    else\r\n    {\r\n        deuCerto = false;\r\n        return deuCerto;\r\n    }\r\n}\r\n// verifica se uma determinada pilha esta vazia comparando a posição do topo com -1\r\nbool vazia(Pilha p)\r\n{\r\n    bool deuCerto;\r\n    if(p.topo == -1)\r\n    {\r\n        deuCerto = true;\r\n        return deuCerto;\r\n    }\r\n    else\r\n    {\r\n        deuCerto = false;\r\n        return deuCerto;\r\n    }\r\n}\r\n/* recebe um ponteiro para pilha e um char, verifica se a pilha esta cheia, caso sim retorna false\r\ncaso contrario incrementa o topo da pilha, e insere x na posição topo do vetor elementos e retorna true\r\n*/\r\nbool empilhar(Pilha *p, char x)\r\n{\r\n    bool deuCerto;\r\n    if(cheia(*p) == true)\r\n    {\r\n        deuCerto = false;\r\n        return deuCerto;\r\n    }\r\n    else\r\n    {\r\n        p->topo = p->topo + 1;\r\n        p->elementos[p->topo] = x;\r\n        deuCerto = true;\r\n        return deuCerto;\r\n    }\r\n}\r\n/* recebe um ponteiro para pilha e um ponteiro para char, verifica se a pilha está vazia,\r\ncaso sim retorna false, caso contrario a funçao decrementa o topo da pilha e atribui a *X o valor da posicao\r\ntopo do vetor elementos e retorna true*/\r\nbool desempilhar(Pilha *p, char *x)\r\n{\r\n    bool deuCerto;\r\n    if(vazia(*p) == true)\r\n    {\r\n        deuCerto = false;\r\n        return deuCerto;\r\n    }\r\n    else\r\n    {\r\n        *x = p->elementos[p->topo];\r\n        p ->topo = p ->topo - 1;\r\n        deuCerto = true;\r\n        return deuCerto;\r\n    }\r\n}\r\n\r\nint main ()\r\n{\r\n    Pilha stack;\r\n    char c;\r\n    criarP(&stack);\r\n    for(int i = 0;i < MAX;i++)\r\n    {\r\n        scanf(\"%c\", &c);\r\n        empilhar(&stack, c);\r\n    }\r\n    while (desempilhar(&stack, &c) == true)\r\n    {\r\n        printf(\"%c \", c);\r\n    }\r\n    return 0;\r\n}\r\n"