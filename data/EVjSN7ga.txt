<?php

namespace App\Imports;

use App\Models\MasterPuraModel;
use Maatwebsite\Excel\Concerns\ToModel;
use Maatwebsite\Excel\Concerns\WithHeadingRow;
use Illuminate\Support\Collection;
use Maatwebsite\Excel\Concerns\ToCollection;
use Carbon\Carbon;
use App\Models\SettingTier2Model;
use Illuminate\Support\Facades\Log;
use App\Models\MasterTier2Model;
use App\Models\MasterDataModel;
use Illuminate\Contracts\Queue\ShouldQueue;
use Maatwebsite\Excel\Concerns\WithChunkReading;
use Maatwebsite\Excel\Concerns\WithValidation;
use App\Models\ProdukModel;
use DB;

class ManifestImport implements ToModel, WithHeadingRow, WithValidation
{
    private $supplierId, $uploadProses;

    public function __construct($supplierId, $uploadProses) {
        $this->supplierId = $supplierId;
        $this->uploadProses = $uploadProses;
    }

    public function model(array $rows)
    {
        // Log::debug($this->supplierId);
        // Log::debug($rows);
        $dateNow = Carbon::now()->format('Y-m-d');

            $setting = $this->isSettingTier2($rows['pno'], $this->supplierId);

            // Log::debug($setting);

            if($setting['exists']) {
                // Log::debug("line39");

                $dataSetting = $setting['data'];

                if($this->supplierId == $dataSetting->supplier_tier_2) {
                    // Log::debug("masukLine42");
                    if($dataSetting->status_tier_2 == _YES) {
                        if($dataSetting->status_approval == _FINISH && $dateNow >= $dataSetting->active_date) {
                            $masterData = DB::table('master_data')->insert([
                                'master_data_pno'       => $rows['pno'],
                                'master_data_matrix'    => $rows['matrix_code'],
                                'master_data_unique'    => $rows['unique_code'],
                                'flg_pura'              => _YES,
                                'flg_tier2'             => _NO,        
                                'flg_tier1'             => _NO,
                                'created_at'            => Carbon::now()
                            ]);
                        }else {
                            $masterData = DB::table('master_data')->insert([
                                'master_data_pno'       => $rows['pno'],
                                'master_data_matrix'    => $rows['matrix_code'],
                                'master_data_unique'    => $rows['unique_code'],
                                'flg_pura'              => _YES,
                                'flg_tier2'             => _YES,        
                                'flg_tier1'             => _YES,
                                'created_at'            => Carbon::now()
                            ]);
                        }
                    }
                    
                    if($dataSetting->status_tier_2 == _NO) {
                        // Log::debug("line69");
                        if($dataSetting->status_approval == _FINISH && $dateNow >= $dataSetting->active_date) {
                            $masterData = DB::table('master_data')->insert([
                                'master_data_pno'       => $rows['pno'],
                                'master_data_matrix'    => $rows['matrix_code'],
                                'master_data_unique'    => $rows['unique_code'],
                                'flg_pura'              => _YES,
                                'flg_tier2'             => _YES,        
                                'flg_tier1'             => _NO,
                                'created_at'            => Carbon::now()
                            ]);
                        }else {
                            $masterData = DB::table('master_data')->insert([
                                'master_data_pno'       => $rows['pno'],
                                'master_data_matrix'    => $rows['matrix_code'],
                                'master_data_unique'    => $rows['unique_code'],
                                'flg_pura'              => _YES,
                                'flg_tier2'             => _NO,        
                                'flg_tier1'             => _NO,
                                'created_at'            => Carbon::now()
                            ]);
                        }
                    }
                    
                    // if($dataSetting->status_tier_2 == _YES && $dataSetting->status_approval == _FINISH && $dateNow >= $dataSetting->active_date) {
                        // Log::debug("Line41Manifest");
                        // MasterDataModel::create([
                        //     'master_data_pno'       => $rows['pno'],
                        //     'master_data_matrix'    => $rows['matrix_code'],
                        //     'master_data_unique'    => $rows['unique_code'],
                        //     'flg_pura'              => _YES,
                        //     'flg_tier2'             => _NO,        
                        //     'flg_tier1'             => _NO,
                        //     'created_at'            => Carbon::now() 
                        // ]);

                        // $masterData = DB::table('master_data')->insert([
                        //     'master_data_pno'       => $rows['pno'],
                        //     'master_data_matrix'    => $rows['matrix_code'],
                        //     'master_data_unique'    => $rows['unique_code'],
                        //     'flg_pura'              => _YES,
                        //     'flg_tier2'             => _NO,        
                        //     'flg_tier1'             => _NO,
                        //     'created_at'            => Carbon::now()
                        // ]);
                    // }else {
                        // MasterDataModel::create([
                        //     'master_data_pno'       => $rows['pno'],
                        //     'master_data_matrix'    => $rows['matrix_code'],
                        //     'master_data_unique'    => $rows['unique_code'],
                        //     'flg_pura'              => _YES,
                        //     'flg_tier2'             => _YES,        
                        //     'flg_tier1'             => _YES,
                        //     'created_at'            => Carbon::now() 
                        // ]);

                        // $masterData = DB::table('master_data')->insert([
                        //     'master_data_pno'       => $rows['pno'],
                        //     'master_data_matrix'    => $rows['matrix_code'],
                        //     'master_data_unique'    => $rows['unique_code'],
                        //     'flg_pura'              => _YES,
                        //     'flg_tier2'             => _YES,        
                        //     'flg_tier1'             => _YES,
                        //     'created_at'            => Carbon::now()
                        // ]);
                    // }
                }
            }else {
    
                // MasterDataModel::create([
                //     'master_data_pno'       => $rows['pno'],
                //     'master_data_matrix'    => $rows['matrix_code'],
                //     'master_data_unique'    => $rows['unique_code'],
                //     'flg_pura'              => _YES,
                //     'flg_tier2'             => _YES,        
                //     'flg_tier1'             => _YES,
                //     'created_at'            => Carbon::now() 
                // ]);

                $masterData = DB::table('master_data')->insert([
                    'master_data_pno'       => $rows['pno'],
                    'master_data_matrix'    => $rows['matrix_code'],
                    'master_data_unique'    => $rows['unique_code'],
                    'flg_pura'              => _YES,
                    'flg_tier2'             => _YES,        
                    'flg_tier1'             => _YES,
                    'created_at'            => Carbon::now()
                ]);
            }

            // MasterTier2Model::create([
            //     'master_tier2_pno'      => $rows['pno'],
            //     'master_tier2_matrix'   => $rows['matrix_code'],
            //     'master_tier2_unique'   => $rows['unique_code'],
            //     'supplier_id'           => $this->supplierId,
            //     'flg_good'              => _EMPTY_STRING,
            //     'flg_scan'              => _NO,
            //     'created_at'            => Carbon::now(),
            // ]);

            $masterTier2 = DB::table('master_tier2')->insert([
                'master_tier2_pno'      => $rows['pno'],
                'master_tier2_matrix'   => $rows['matrix_code'],
                'master_tier2_unique'   => $rows['unique_code'],
                'supplier_id'           => $this->supplierId,
                'flg_good'              => _EMPTY_STRING,
                'flg_scan'              => _NO,
                'created_at'            => Carbon::now(),
            ]);

            return new MasterPuraModel([
                'master_pura_unique'    => $rows['unique_code'],
                'master_pura_matrix'    => $rows['matrix_code'],
                'master_pura_pno'       => $rows['pno'],
                'upload_proses'         => $this->uploadProses,
                'supplier_id'           => $this->supplierId,
                'master_pura_date'      => Carbon::now()->format('Y-m-d'),
                'created_at'            => Carbon::now(),
            ]);
    }

    private function isSettingTier2($pno, $supplier) {
        $tier2 = DB::table('setting_tier_2')
                ->where('produk_pno', $pno)
                ->where('supplier_tier_2', $supplier)
                ->first();

        // $tier2 = SettingTier2Model::where('produk_pno', $pno)->where('status_tier_2', _YES)->first();
  
        $output = [
          "exists" => false,
          "data" => ''
        ];
  
        if (!is_null($tier2)) {
              $output = [
                "exists" => true,
                "data" => $tier2,
              ];
          }
  
        return $output;
    }
    

    public function rules(): array
    {

        return [
            '*.matrix_code' => [
                '1' => 'required',
                '2' => function($attribute, $value, $onFailure) {
                        $dataTier2 = DB::table('master_tier2')
                                ->where('master_tier2_matrix', $value)
                                ->first();

                        // $dataTier2 = MasterTier2Model::where('master_tier2_matrix', $value)->first();

                        if(!is_null($dataTier2)) {
                            $message = 'matrix_code must be unique';
                            $onFailure($message);
                        }
                    },
            ],
            '*.unique_code' => [
                '1' => 'required',
                '2' => function($attribute, $value, $onFailure) {
                        $dataTier2 = DB::table('master_tier2')
                                    ->where('master_tier2_unique', $value)
                                    ->first();

                        // $dataTier2 = MasterTier2Model::where('master_tier2_unique', $value)->first();

                        if(!is_null($dataTier2)) {
                            $message = 'unique_code must be unique';
                            $onFailure($message);
                        }
                    },
            ],
             '*.pno' => function($attribute, $value, $onFailure) {
                    $data = DB::table('m_produk')
                            ->where('produk_pno', $value)
                            ->first();
                    // $data = ProdukModel::where("produk_pno", $value)->first();

                    if(is_null($data)) {
                        $message = 'Pno '.$value.' not found in master produk';
                        $onFailure($message);
                    }
              },
        ];
    }

    public function customValidationMessages() {

        return [
            '*.unique_code.required' => 'unique code not found',
            '*.matrix_code.required' => 'matrix code not found',
        ];
    }
}