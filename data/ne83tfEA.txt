using System;
using System.Net;
using System.Net.Security;
using System.Security.Cryptography.X509Certificates;
using System.IO;

namespace TLSExample
{
    class Server
    {
        static void Main(string[] args)
        {
            // create a new server socket and bind it to the local IP address and port
            var listener = new TcpListener(IPAddress.Any, 8000);
            listener.Start();

            // wait for a client to connect
            var client = listener.AcceptTcpClient();

            // create a new SslStream to communicate with the client
            var stream = new SslStream(
                client.GetStream(),
                false,
                new RemoteCertificateValidationCallback(ValidateCertificate),
                null
            );

            // authenticate the server and the client
            stream.AuthenticateAsServer(
                new X509Certificate2("server.pfx"),
                false,
                SslProtocols.Tls12,
                true
            );

            // receive data from the client
            var reader = new StreamReader(stream);
            Console.WriteLine(reader.ReadLine());

            // send data to the client
            var writer = new StreamWriter(stream);
            writer.WriteLine("Hello from the server!");
            writer.Flush();

            // close the connections
            client.Close();
            listener.Stop();
        }

        private static bool ValidateCertificate(
            object sender,
            X509Certificate certificate,
            X509Chain chain,
            SslPolicyErrors sslPolicyErrors
        )
        {
            // validate the certificate and return true if it is valid, or false if it is not
            return true;
        }
    }

    class Client
    {
        static void Main(string[] args)
        {
            // create a new client socket and connect to the server
            var client = new TcpClient("localhost", 8000);

            // create a new SslStream to communicate with the server
            var stream = new SslStream(
                client.GetStream(),
                false,
                new RemoteCertificateValidationCallback(ValidateCertificate),
                null
            );

            // authenticate the server and the client
            stream.AuthenticateAsClient(
                "server",
                new X509CertificateCollection(),
                SslProtocols.Tls12,
                true
            );

            // send data to the server
            var writer = new StreamWriter(stream);
            writer.WriteLine("Hello from the client!");
            writer.Flush();

            // receive data from the server
            var reader = new StreamReader(stream);
            Console.WriteLine(reader.ReadLine());

            // close the connections
            client.Close();
        }

        private static bool ValidateCertificate(
            object sender,
            X509Certificate certificate,
            X509Chain chain,
            SslPolicyErrors sslPolicyErrors
        )
        {
            // validate the certificate and return true if it is valid, or false if it is not
            return true;
        }
    }
}
