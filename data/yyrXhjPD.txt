class node:
    def __init__(self, data=None, left=None, right=None):
        self.data = data
        self.left = left
        self.right = right

    def __str__(self):
        return 'Node ['+str(self.data)+']'


class Tree:
    def __init__(self, root=None):
        self.root = root

    def add_node(self, _data, _node):
        if self.root is None:
            self.root = _data
        elif _node.data < _data:
            if _node.left is None:
                _node.left = node(_data)
            else:
                self.add_node(_data, _node.left)
        else:
            if _node.right is None:
                _node.right = node(_data)
            else:
                self.add_node(_data, _node.right)

    def mirror_tree(self, _node):
        if _node.left and _node.right:
            _node.left, _node.right = _node.right, _node.left
            self.mirror_tree(_node.right)
            self.mirror_tree(_node.left)
        else:
            if _node.left is None and _node.right:
                return self.mirror_tree(_node.right)
            if _node.right is None and _node.left:
                return self.mirror_tree(_node.left)

    def mirror_to(self, tree):
        self.mirror_tree(self.root)
        if self.root is None and tree.root \
                or self.root and tree.root is None:
            return False
        if self.root is None and tree.root is None:
            return True
        return self.sub_mirror_to(tree, self.root, tree.root)

    def sub_mirror_to(self, tree, node1, node2):
        if node1.left and node2.left:
            self.sub_mirror_to(tree, node1.left, node2.left)
        elif node1.left and node2.left is None \
                or node1.left is None and node2.left:
            return False
        elif node1.right and node2.right:
            self.sub_mirror_to(tree, node1.right, node2.right)
        elif node1.right and node2.right is None \
                or node1.right is None and node2.right:
            return False
        if node1.data == self.root.data:
            return True


# Press the green button in the gutter to run the script.
if __name__ == '__main__':
    ### Пример: a1 = 1 3 4 5 8, a1_root = 5
    ###          a2 = 3 6 9 7 11, a2_root = 6
    ### --- True

    a1 = list(map(int, input("Введите элементы 1 бинарного дерева: ").split()))
    a1_root = int(input("Введите корневой элемент 1 дерева: "))
    a1.pop(a1.index(a1_root))
    a2 = list(map(int, input("Введите элементы 2 бинарного дерева: ").split()))
    a2_root = int(input("Введите корневой элемент 2 дерева: "))
    a2.pop(a2.index(a2_root))

    a1_root_node = node(a1_root)
    tree1 = Tree(a1_root_node)
    a2_root_node = node(a2_root)
    tree2 = Tree(a2_root_node)

    for a in a1:
        tree1.add_node(a, tree1.root)
    for a in a2:
        tree2.add_node(a, tree2.root)

    print()

    if tree1.mirror_to(tree2):
        print("Деревья зеркально подобны")
    else:
        print("Деревья не являются зеркально подобны")
