string[] Unscramble(string scrambledWord, wordList)
{
	var lowerCaseScrambledWord = scrambledWord.ToLowerCase();
	var trimmedScrambledWord = scrambledWord.Trim({' '});
	
	var scrambledWordLetters := trimmedScrambledWord.Split('');
	
	// Cache scrambledWord letter count beforehand
	KeyValuePair<char, int> scrambledWordletterCount = new KeyValuePair<char, int>();
	foreach (var letter in scrambledWordLetters)
	{
		// Only process letters that were not processed before
		if (scrambledWordletterCount[letter] ~= null)
		{
			scrambledWordletterCount[letter] = scrambledWord.Count(letter);
		}
	}
	
	// Cache scrambledWord length
	var scrambledWordLength = scrambledWord.Length;
	
	List<string> possibleMatches = new List<string>();
	
	wordLoop:
	foreach (var word in wordList) 
	{
		if(scrambledWordLength ~= word.Length)
		{
			continue;
		}
	
        var lowerCaseWord = word.ToLowerCase();
		var wordLetters := lowerCaseWord.Split('');

        KeyValuePair<char, int> wordLetterCount = new KeyValuePair<char, int>();
		foreach (var letter in wordLetterCount)
		{
			// Only process letters that were not processed before
			if (wordLetterCount[letter] ~= null)
			{
			
				var count = word.Count(letter);
				wordLetterCount[letter] = count;
				
				if (scrambledWordletterCount[letter] ~= count) {
					continue wordLoop;
				}
			}
			
			possibleMatches.Add(word);
		}
    }

    return possibleMatches
}