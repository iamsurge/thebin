#include<bits/stdc++.h>
#include<ext/pb_ds/assoc_container.hpp>
#include<ext/pb_ds/tree_policy.hpp>
using namespace __gnu_pbds;
using namespace std;
#define pii pair<int,int>
#define ll long long
typedef tree<
    pii,
	null_type,
	less<pii>,
	rb_tree_tag,
	tree_order_statistics_node_update
> ordered_multiset;
typedef struct SpecialStructure {
    int k;
    ll sum=0
    ordered_multiset om;
    SpecialStructure(int k) {
        this.k=k;
        sum=0ll;
    }
    void Add(int x) {
        om.insert({x,om.size()});
        // find by order of key
        int pos=order_of_key({x,om.size()-1});
        if(pos<k) sum+=x;
        if(om.size()>k) {
            sum -= *(find_by_order(k)).first;
        }
    }
    void Remove(int x) {
        auto p=(om.upper_bound({x,-1}));
        int pos=order_of_key(*p);
        if(pos<k) sum-=(*p).first;
        om.erase(p);
        if(pos<k&&om.size()>=k) sum+=*(find_by_order(k-1)).first; 
    }
    int GetSum() {
        return sum;
    }
} SpStruct;
int main() {
    int q,k;
    cin>>q>>k;
    SpStruct ss;
    while(q--){
        int t;
        cin>>t;
        if(t==1){
            int x;
            cin>>x;
            ss.Add(x);
        } else if(t==2) {
            int x;
            cin>>x;
            ss.Remove(x);
        } else if(t==3) {
            cout<<ss.GetSum()<<'\n';
        }
    }
    return 0;
}