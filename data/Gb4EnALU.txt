#include <iostream>
#include <string>
#include <stdio.h>
#include <stdlib.h>
#include <locale.h>


using namespace std;


class Log3 {
public:
	bool x1, x2, x3;

	Log3(bool _x1, bool _x2, bool _x3) { // конструктор
		x1 = _x1;
		x2 = _x2;
		x3 = _x3;

	}

	bool y1() {
		cout << (x1 + x2 + x3) << endl;
		bool result = (x1 + x2 + x3) % 2;
		return result; // x1 x2 x3 идут в элемент исключающее или
	}

	bool y2() {
		return x2 || x3; // второй и третий в элемент или
	}
};


int main()
{
	setlocale(0, "RU");
	system("chcp 1251");
	// чтобы нормально русский в консоли отображался

	// вот это R"DATA - так записываются многострочные тексты в плюсах
	const string schema_ascii = R"DATA(
          +-------+
x1--------+       |
          |       |        y1
x2----+---+ =1    +----------
      |   |       |
x3-+--+---+       |
   |  |   +-------+
   |  |
   |  |
   |  |   +-------+
   |  |   |       |
   |  |   |       |        y2
   |  +---+ 1     |----------
   |      |       |
   +------+       |
          +-------+
)DATA";
	const string datamy = R"DATAMY(
фио группа
Напишите класс log3 описывающий логическую схему с двумя входами и тремя выходами
Вход в конструктор 3 значения типа bool
выход (методы):
bool y1() -> true/false
bool y2() -> true/false
)DATAMY";

	cout << schema_ascii << endl;
	cout << datamy << endl;

	int x1, x2, x3;
	bool bx1, bx2, bx3;

	// cout << boolalpha; делает так чтобы значения типа bool в консоли отображались не как 0 и 1 а как true и false
	cout << boolalpha;
	cout << "x1 (1 или 0)=";
	cin >> x1;
	cout << "x2 (1 или 0)=";
	cin >> x2;
	cout << "x3 (1 или 0)=";
	cin >> x3;

	// конвертируем введенные 0 и 1 в true или false с помощтью тернарника
	bx1 = true ? x1 == 1 : false;
	bx2 = true ? x2 == 1 : false;
	bx3 = true ? x3 == 1 : false;


	// создаем класс и выводим результат
	Log3 scheme = Log3(bx1, bx2, bx3);
	cout << "y31211() -> " << scheme.y1() << endl;
	cout << "y2() -> " << scheme.y2() << endl;

	return 0;
}
