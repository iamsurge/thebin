
distance = 1

function Forward()
    if turtle.forward() then -- test if up is blocked or not
        return
    else
        turtle.dig()
        Forward() -- recursion against gravil
    end
end

function Up()
    if turtle.up() then -- test if up is blocked or not
        return
    else
        turtle.digUp()
        Up() -- recursion against gravil
    end
end

function Down()
    if turtle.down() then -- test if up is blocked or not
        return
    else
        turtle.digDown()
        Down() -- recursion against gravil
    end
end

if (arg[1] ~=nil) then
    if arg[1] == "help" then
        print("messure [up, down, integer]")
    elseif arg[1] == "up" then
        if (arg[2] ~=nil) then
            whished_distance =  tonumber(arg[2])
            while (distance ~= whished_distance) do
                UP()
                distance = distance + 1
            end
        else
            while turtle.up() do
                distance = distance + 1
            end
        end
    elseif arg[1] == "down" then
        if (arg[2] ~=nil) then
            whished_distance =  tonumber(arg[2])
            while (distance ~= whished_distance) do
                Down()
                distance = distance + 1
            end
        else
            while turtle.down() do
                distance = distance + 1 
            end
        end
    else
        whished_distance =  tonumber(arg[1])
        while (distance ~= whished_distance) do
            Forward()
            distance = distance + 1
        end
    end
else
    while turtle.forward() do
        distance = distance + 1
    end
end

print(string.format("Messured distance of %dm", distance))
    