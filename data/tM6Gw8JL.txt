#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}
#include <ctime>

bool sh = 1;
int N;

vector <int> gen() {
    srand(time(0));
    int n = rand() % 5 + 2;
    vector <int> a;
    for (int i = 0; i < n; ++i) {
        int x = rand() % 20 + 1;
        a.pb(x);
        N += x;
    }
    sort(a.begin(), a.end());
    reverse(a.begin(), a.end());
    //cv(a);
    return a;
}

bool check(vector <int> a) {
    for (int i = 0; i < a.size() - 1; ++i) {
        if (a[i] == a[i + 1]) {
            return 0;
        }
    }
    return 1;
}

vector <int> my(vector <int> a) {
    int dif = a[0] - a[1] - 1;
    a[0] -= dif;
    
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    auto a = gen();
    if (sh) {
        cout << "N = " << N <<"\n";
        cout << "a\n";
        cv(a);
    }
}
