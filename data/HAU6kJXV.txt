# mostly working
# did not adopt this as deadline is approaching 
# I do think it is kinda cool tho

def View_getBalanceOfEachCategory():
    """
    To print the sum of each category and the overall balance in format of financial statement

    Input: {entries} (list) -> A list from data.csv that removed the column headers and in reverse order
    Output: -

    """
    checkflag = False
    while (checkflag == False):
        try:    # type verification
            FunctionIndentLineBreakPrint("Enter the month you would like to see the balance.")
            FunctionIndentPrint("(\033[3;33mYYYY-MM\033[0;0m)")
            date = input("\t>> ")

            year = date.split("-")[0]
            month = date.split("-")[1]
            if (len(year) == 4 and int(year) > 1970 and len(month) == 2 and int(month) > 0 and int(month) < 13):
                checkflag = True

            else:
                EmojiPrint("\t\t\033[0;31m:(\033[0;0m", "Invaild input. You need to enter a date in (YYYY-MM)!")
                checkflag = True
        
        
        except:
            EmojiPrint("\t\t\033[0;31m:(\033[0;0m", "Invaild input. You need to enter a a date in (YYYY-MM)!")
            checkflag = True





    entries = Update_getEntries()
    
    #category_list = list(set([x[2] for x in entries]))        # get a list of category without duplicates  
                                                               # https://stackoverflow.com/questions/7961363/removing-duplicates-in-lists 
    income_sorted_by_category = {}
    income_value = {}
    expense_sorted_by_category = {}
    expense_value = {}

    # process entries
    for row in entries:
        if row[2] not in income_sorted_by_category or expense_sorted_by_category:        # Initialize key before append value
            income_sorted_by_category[row[2]] = []                                        # https://stackoverflow.com/questions/41970992/appending-values-to-dictionary-in-for-loop
            income_value[row[2]] = []                      # Should have same structure with above 
            expense_sorted_by_category[row[2]] = []
            expense_value[row[2]] = [] 

    for row in entries:                                                                  # Append value to keys
        #if row[2] in category_list:
            if (str(row[1]).upper() == "TRUE"):
                income_sorted_by_category[row[2]].append(row)                           
            
            elif (str(row[1]).upper() == "FALSE"):
                expense_sorted_by_category[row[2]].append(row)
    

    for key in list(income_sorted_by_category) and list(expense_sorted_by_category):    # Delete unused keys
        if income_sorted_by_category[key] == []:                                        # https://stackoverflow.com/questions/11941817/how-to-avoid-runtimeerror-dictionary-changed-size-during-iteration-error
            del income_sorted_by_category[key]
            del income_value[key]                   # Too lazy to write code to vaildate this 
    
        elif expense_sorted_by_category[key] == []:
            del expense_sorted_by_category[key]
            del expense_value[key]


    # print part
    # can use "os.get_terminal_size()" to make the content responsive 

    income_string = "\033[4;34mIncome\033[0;0m"
    expense_string = "\033[4;33mExpense\033[0;0m"

    table_width = 60
    line_width = 12




    # Append {Amount} from {income_sorted_by_category} to {income_value} <- a dict
    for key in income_sorted_by_category:
        for i in range(0, len(income_sorted_by_category[key])):
            entry_date = income_sorted_by_category[key][i][0].split("-")
            if (int(entry_date[0]) == int(year) and int(entry_date[1]) == int(month)):
                income_value[key].append(float(income_sorted_by_category[key][i][4]))   # Don't know why there are list in list but whatever
        income_value[key] = round(sum(income_value[key]), 1)   # avoid floating point error


    # Process expense
    for key in expense_sorted_by_category:
        for j in range(0, len(expense_sorted_by_category[key])):
            entry_date = expense_sorted_by_category[key][i][0].split("-")
            if (int(entry_date[0]) == int(year) and int(entry_date[1]) == int(month)):
                expense_value[key].append(float(expense_sorted_by_category[key][j][4]))
        expense_value[key] = round(sum(expense_value[key]), 1)




    for key in income_value.copy():     # avoid RuntimeError: dictionary changed size during iteration
        if (income_value[key] == 0):
            del income_value[key]

    for key in expense_value.copy():
        if (expense_value[key] == 0):
            del expense_value[key]


    # print category in income
    print(f"\n\t\t{income_string: <{table_width + 13 - 7}}", f"{year}-{month}\n", sep="")     # 13 -> len(\033[4;34m) = 7, len(\033[0;0m) = 6 
    
    try:
        for key in income_sorted_by_category: 
            FunctionIndentPrint(f"{key}{income_value[key]: >{table_width - len(key)}}")
    except:
        x = 0   # do nothing

    finally:
        print("\t\t", " " * (table_width - line_width), "-" * line_width, sep="")
        print("\t\t", " " * (table_width-len(str(sum(income_value.values())))), f"\033[0;34m{sum(income_value.values())}\033[0;0m", sep="")
        



    # print category in expense
    print(f"\t\t{expense_string: <{table_width + 13}}\n")

    try:
        for key in expense_sorted_by_category:
            FunctionIndentPrint(f"{key}{expense_value[key]: >{table_width - len(key)}}")
    except:
        y = 0   # do nothing

    finally:        
        print("\t\t", " " * (table_width - line_width), "-" * line_width, sep="")
        print("\t\t", " " * (table_width-len(str(sum(expense_value.values())))), f"\033[0;33m{sum(expense_value.values())}\033[0;0m", sep="")
        print("\t\t", " " * (table_width - line_width), "-" * line_width, sep="")



    # print balance
    balance = sum(income_value.values()) - sum(expense_value.values())
    if (balance > 0):
        print("\t\t", " " * (table_width - len(str(balance))), f"\033[1;32m{balance}\033[0;0m", sep="")

    elif (balance == 0):
        print("\t\t", " " * (table_width - len(str(balance))), f"\033[1;33m{balance}\033[0;0m", sep="")

    elif (balance < 0):
        print("\t\t", " " * (table_width - len(str(balance))), f"\033[1;31m{balance}\033[0;0m", sep="")

    print("\t\t", " " * (table_width - line_width), "=" * line_width, "\n", sep="")