#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
#include <cstring>
using namespace std;
const int maxn = 3e5 + 10;
int n, m;
vector<int> graph[maxn];
vector<int> reverse_graph[maxn];
bool visited[maxn];
stack<int> st;
void topological_sort(int node) {
    visited[node] = true;
    for(int i = 0; i < (int) graph[node].size(); i++) {
        int neigh = graph[node][i];
        if(!visited[neigh]) {
            topological_sort(neigh);
        }
    }
    st.push(node);
}
vector<int> v;
void dfs(int node) {
    visited[node] = true;
    v.push_back(node);
    for(int i = 0; i < reverse_graph[node].size(); i++) {
        int neigh = reverse_graph[node][i];
        if(!visited[neigh]) {
            dfs(neigh);
        }
    }
}
int main()
{
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >> a >> b;
        a--; b--;
        graph[a].push_back(b);
        reverse_graph[b].push_back(a);
    }
    memset(visited, false, sizeof visited);
    for(int i = 0; i < n; i++) {
        if(!visited[i]) {
            topological_sort(i);
        }
    }
    memset(visited, false, sizeof visited);
    int cycles = 0;
    vector<bool> special(n + 1, false);
    while(!st.empty()) {
        int node = st.top();
        st.pop();
        if(!visited[node]) {
            v.clear();
            dfs(node);
            if(v.size() > 1) {
                for(int x : v) {
                    special[x] = true;
                }
            }
        }
    }
    for(int i = 0; i < n; i++) {
        cout << special[i] << " ";
    }
    return 0;
}





