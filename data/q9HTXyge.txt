//main.lua

local com = require "component"
local auto = require "robot"
local gpu = com.gpu
local w, h = gpu.getResolution()
local count = auto.count
local s = auto.suck
local sel = auto.select

function setScreen(totalLoop, itemName)
    print("\n\n\n\n\n\n\n\n\n\n\n\n\n")
    gpu.fill(1, 1, w, h, " ")
    gpu.set(1, 1, "Currently crafting: ".. totalLoop .. " " .. itemName, false)
    gpu.set(1, 3, "[ ---------- ] ".. 0 .."/".. totalLoop .." (".. math.floor(0/totalLoop*10000)/100 .." %)", false)
    gpu.set(3, 3, "          ")
end

function updateScreen(currentLoop, totalLoop)
    gpu.set(1, 3, "[ ---------- ] ".. currentLoop .."/".. totalLoop .." (".. math.floor(currentLoop/totalLoop*10000)/100 .." %)", false)
    gpu.set(3, 3, "          ")
    if math.floor(currentLoop/totalLoop*10000)/100 > 9.99 then
        gpu.set(3, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 19.99 then
        gpu.set(4, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 29.99 then
        gpu.set(5, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 39.99 then
        gpu.set(6, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 49.99 then
        gpu.set(7, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 59.99 then
        gpu.set(8, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 69.99 then
        gpu.set(9, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 79.99 then
        gpu.set(10, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 89.99 then
        gpu.set(11, 3, "■", false)
    end
    if math.floor(currentLoop/totalLoop*10000)/100 > 99.99 then
        gpu.set(12, 3, "■", false)
        gpu.set(1, 5, "Successfully finished crafting "..currentLoop.." large compact machines!", false)
    end
end


print("How many machines would you like to make?")
totalLoop = io.read()

setScreen(totalLoop, "Large Compact Machines")

for loop = 1, totalLoop do
    sel(1)
    gpu.set(1, 7, "Currently making: Ender Pearl")
    dofile("/makemachine/pearl")
    sel(1)
    gpu.set(1, 7, "Currently making: Compact Machine Wall")
    dofile("/makemachine/walls")
    sel(1)
    gpu.set(1, 7, "Currently making: Large Compact Machine")
    dofile("/makemachine/machine")
    gpu.set(1, 7, "                                           ", false)
    updateScreen(loop, totalLoop)
end





//pearl.lua

local com = require "component"
local auto = require "robot"
local gpu = com.gpu
local w, h = gpu.getResolution()

local count = auto.count
local s = auto.suck
local sel = auto.select
local drop = auto.drop
local l = auto.turnLeft
local r = auto.turnRight
local p = auto.place

function f(amount) for i = 1, amount do auto.forward() end end
function d(amount) for i = 1, amount do auto.down() end end
function u(amount) for i = 1, amount do auto.up() end end
function bk(amount) for i = 1, amount do auto.back() end end
function noResources(item, loopAmount)
    gpu.set(1, 5, "You have run out of "..item, false)
    gpu.set(1,6, "to craft ender pearls!", false)
    os.exit()
end

function correctAmount(slot, totalAmount) 
    sel(slot)
    currentAmount = count()
    if currentAmount < totalAmount then
        return false
    else return true
    end
end

function placeObsidian()
    p() for i = 1, 2 do r() f(1) l() p() end bk(1)
    p() for i = 1, 2 do l() f(1) r() p() end bk(1)
    p() for i = 1, 2 do r() f(1) l() p() end
end

function returnObsidian() sel(1) drop() l() f(2) l() end
function returnRedstoneBlock() sel(2) drop() l() f(1) r() end
function returnRedstone() sel(3) drop() l() f(1) r() end

l()
f(3)
l()
u(1)
sel(16)
s(1)
if correctAmount(16, 1) == false then
    drop()
    sel(1)
    d(1)
    l()
    f(3)
    l()

    l()
    f(2)
    l()
    sel(1)
    s(26)
    if correctAmount(1, 26) == false then
        returnObsidian()
        noResources("obsidian")
    else 
        r()
        f(1)
        l()
        sel(2)
        s(1)
        if correctAmount(2, 1) == false then
            returnRedstoneBlock()
            returnObsidian()
            noResources("redstone blocks")
        else
            r()
            f(1)
            l()
            sel(3)
            s(1)
            if correctAmount(3, 1) == false then
                returnRedstone()
                returnRedstoneBlock()
                returnObsidian()
                noResources("redstone dust")
            else
                sel(1)
                r()
                f(3)
                r()
                u(1)
                f(4)
                placeObsidian()
                l()
                f(2)
                r()
                u(1)
                f(2)
                p() for i = 1, 2 do r() f(1) l() p() end bk(1)
                p() l() f(1) r() sel(2) p() sel(1) l() f(1) r() p() bk(1)
                p() for i = 1, 2 do r() f(1) l() p() end
                l()
                f(2)
                r()
                u(1)
                f(2)
                placeObsidian()
                bk(1)
                sel(3)
                drop()
                sel(1)
                d(3)
                bk(1)
                r()
                f(5)
                l()
            end
        end
    end
    os.sleep(9)
    f(5)
    l()
    f(3)
    sel(16)
    s(1)
    bk(3)
    r()
    bk(5)
    sel(1)
else 
    sel(1)
    d(1)
    l()
    f(3)
    l()
end




//walls.lua
local com = require "component"
local auto = require "robot"
local gpu = com.gpu
local w, h = gpu.getResolution()

local count = auto.count
local s = auto.suck
local sel = auto.select
local drop = auto.drop
local l = auto.turnLeft
local r = auto.turnRight
local p = auto.place

function f(amount) for i = 1, amount do auto.forward() end end
function d(amount) for i = 1, amount do auto.down() end end
function u(amount) for i = 1, amount do auto.up() end end
function bk(amount) for i = 1, amount do auto.back() end end
function noResources(item, loopAmount)
    gpu.set(1, 5, "You have run out of "..item, false)
    gpu.set(1,6, "to craft compact machine walls!", false)
    gpu.set(1, 7, "                                             ", false)
    os.exit()
end

function correctAmount(slot, totalAmount) 
    sel(slot)
    currentAmount = count()
    if currentAmount < totalAmount then
        return false
    else return true
    end
end

function checkCorrectAmount()
    s(64)
    if correctAmount(1, 64) == false then
        drop()
        return false
    else 
        sel(2)
        s(34)
        if correctAmount(2, 34) == false then
            drop()
            sel(1)
            drop()
            return false
        else
            return true
        end
    end
end

function returnRedstone() sel(1) drop() l() f(1) r() u(1) sel(16) drop() sel(1) d(1) l() f(3) l() end
function returnIronBlock() sel(2) drop() l() f(1) r() end

function makeWalls()
    sel(2)
    drop()
    sel(1)
    drop()
    d(1)
    s(2)
    if correctAmount(1, 2) == false then
        returnRedstone()
        noResources("redstone dust", loop)
    else
        r()
        f(1)
        l()
        sel(2)
        s(1)
        if correctAmount(2, 1) == false then
            returnIronBlock()
            returnRedstone()
            noResources("iron blocks", loop)
        else
            r() 
            r()
            u(1)
            f(2)
            sel(2)
            p()
            sel(1)
            u(1)
            p()
            bk(1)
            drop()
            d(2)
            bk(1)
            r()
            f(5)
            l()
            os.sleep(4)
            f(5)
            l()
            f(3)
            sel(1)
            s(16)
            bk(3)
            r()
            bk(5)
            l()
            f(4)
            l()
            u(1)
            drop()
        end
    end
end


l()
f(4)
l()
u(1)

repeat
    sel(1)
    s(64)
    if correctAmount(1, 64) == true then
        sel(2)
        s(34)
        if correctAmount(2, 34) == false then
            makeWalls()
        else
            sel(2)
            drop()
            sel(1)
            drop()
        end
    else makeWalls()
    end
until checkCorrectAmount() == true
d(1)
l()
f(4)
l()