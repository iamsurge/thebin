#pragma GCC optimize("Ofast") // ������������ ���������, �� ��� ������
#pragma GCC optimize("no-stack-protector") //�����
#pragma GCC optimize("unroll-loops") // � ���� ���� ��� �� 100 �� ������ ����� � ��������� �� ��� � 100 ��� �� ������ ��������
#pragma GCC target("sse,sse2,sse3,ssse3,popcnt,abm,mmx,tune=native") // ��� ����� ����� �� ��� 03 02 ��������� � ������ ������� �������� ��� ���� ������������
#pragma GCC optimize("fast-math") //������� � ������������� �������� �� ��� float �� ������� ����������
// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)2e18;
const ll inf = 1e9 + 7;
const ll ONE = 1;
const ll mod = 1e9 + 7;
const ll LG = 20;
ld EPS = 1e-12;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

int binpow(int a, int n) {
    int res = 1;
    while (n) {
        if (n & 1) {
            res = (1ll * res * a) % mod;
        }
        a = (1ll * a * a) % mod;
        n /= 2;
    }
    return res;
}

void solve() {
    int n, s, i, j, ans, a1, b1;
    cin >> n >> s;
    vector <bitset <6003> > dp(n + 1);
    vector <vector <short> > p(n + 1, vector <short>(6003, -1));
    vector <pair <int, pair <int, int> > > b, c, a;
    for (i = 0; i < n; i++) {
        cin >> a1 >> b1;
        if (b1 > 0) {
            b.push_back({ a1 + 2000, {b1, i} });
        }
        else {
            c.push_back({ a1 + 2000, {b1, i} });
        }
    }
    sort(all(b));
    sort(allr(c));
    for (auto it : b) {
        a.emplace_back(it);
    }
    for (auto it : c) {
        a.emplace_back(it);
    }
    dp[0][s + 2000] = 1;
    for (i = 0; i < n; i++) {
        for (j = 0; j < 6003; j++) {
            if (dp[i][j]) {
                dp[i + 1][j] = 1;
                if (j >= a[i].first) {
                    dp[i + 1][j + a[i].second.first] = 1;
                    p[i + 1][j + a[i].second.first] = i;
                }
            }
        }
    }
    for (j = 0; j < 6003; j++) {
        if (dp[n][j]) {
            ans = j - 2000;
            break;
        }
    }
    i = n;
    vector <int> path;
    while (i > 0) {
        if (p[i][j] != -1) {
            path.push_back(a[p[i][j]].second.second + 1);
            j = j - a[p[i][j]].second.first;
        }
        i--;
    }
    reverse(all(path));
    cout << ans << " " << path.size() << endl;
    for (auto it : path) {
        cout << it << " ";
    }
    cout << endl;
}

 signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    //freopen("ladder.in", "r", stdin);
    //freopen("ladder.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono