import numpy as np


class nado:
    a = list(np.zeros(1000, int))
    p = 2
    i = 0
    c = 2
    n = 0

    def get_n(self, n):
        self.n = n

    def set_n(self):
        return(self.n)

    def get_p(self, p):
        self.p = p

    def set_p(self):
        return(self.p)

    def set_a(self):
        return(self.a)

    def get_c(self, c):
        self.c = c

    def set_c(self):
        return(self.c)

    def get_i(self, i):
        self.i = i

    def set_i(self):
        return(self.i)


algoritm = nado()





def odin():
    while algoritm.set_i() < algoritm.set_n():
        algoritm.set_a()[algoritm.set_i()] = algoritm.set_i() + 2
        algoritm.get_i(algoritm.set_i()+1)

    else:
        dva()


def dva():
    while algoritm.set_p() < algoritm.set_n():
        tri()
    else:
        return algoritm.set_p()


def tri():
    while algoritm.set_a()[algoritm.set_p()] != 0:
        algoritm.get_c(2)
        chetyri()
    else:
        algoritm.get_c(algoritm.set_c()+1)
        chetyri()


def chetyri():
    while algoritm.set_p() * algoritm.set_c() < algoritm.set_n():
        algoritm.set_a()[algoritm.set_p()*algoritm.set_c()] = 0
        algoritm.get_c(algoritm.set_c()+1)
    else:
        #print(algoritm.set_p())
        algoritm.get_p(algoritm.set_p() + 1)
        algoritm.get_c(2)
        dva()


while algoritm.set_p() != 14:
    algoritm.get_n(algoritm.set_n()+1)
    odin()
print(algoritm.set_n())