#include <iostream>

bool areDigitsSortedAscending(unsigned int n) {
	int prevDigit = n % 10;
	n /= 10;
	while (n > 0) {
		int lastDigit = n % 10;
		if (lastDigit > prevDigit)
			return false;

		prevDigit = lastDigit;
		n /= 10;
	}
	return true;
}

bool areDigitsSortedDescending(unsigned int n) {
	int prevDigit = n % 10;
	n /= 10;
	while (n > 0) {
		int lastDigit = n % 10;
		if (lastDigit < prevDigit)
			return false;

		prevDigit = lastDigit;
		n /= 10;
	}
	return true;
}

bool areDigitsSorted(unsigned int n) {
	return areDigitsSortedAscending(n) || areDigitsSortedDescending(n);
}

unsigned int courses(unsigned int count, unsigned int cargo) {
	unsigned int sum = 0;
	unsigned int counter = 0;
	
	for (unsigned int i = 0; i < count; i++)
	{
		int current;
		std::cin >> current;

		if (current > cargo)
			return 0;

		sum += current;
		if (sum > cargo) {
			counter++;
			sum = current;
		}
	}
	return counter + 1;
}

int abs(int a) {
	return a > 0 ? a : -a;
}

int max(int a, int b) {
	return a > b ? a : b;
}

int max(int a, int b, int c) {
	return max(max(a, b), c);
}

int min(int a, int b) {
	return a < b ? a : b;
}

int min(int a, int b, int c) {
	return min(min(a, b), c);
}

int findMatch(int points1, int points2, int sum) {
	int maxCount = sum / points1;
	int diff = sum;
	int result = -1;
	for (int countPoints1 = 0; countPoints1 <= maxCount; countPoints1++)
	{
		int remainder = sum - countPoints1 * points1;
		if (remainder % points2 != 0) {
			continue;
		}
		
		int countPoints2 = remainder / points2;
		int currDiff = abs(countPoints1 - countPoints2);
		
		if (currDiff < diff) {
			diff = currDiff;
			result = countPoints1;
		}
	}
	return result;
}

int main() {
	int maxPoints;
	std::cin >> maxPoints;
	int points1 = 5;
	int points2 = 3;
	int points3 = 2;
	int diff = maxPoints;

	int c1, c2, c3;

	int maxCount = maxPoints / points1;
	for (int countPoints1 = 0; countPoints1 < maxCount; countPoints1++)
	{
		int remainder = maxCount - points1 * countPoints1;
		int countPoints2 = findMatch(points2, points3, remainder);
		if (countPoints2 == -1) {
			continue;
		}

		int countPoints3 = (remainder - countPoints2 * points2) / points3;
		int currDiff = max(countPoints1, countPoints2, countPoints3) - min(countPoints1, countPoints2, countPoints3);
		if (currDiff < diff) {
			diff = currDiff;
			c1 = countPoints1;
			c2 = countPoints2;
			c3 = countPoints3;
		}
	}
	std::cout << c1 << " " << c2 << " " << c3;
}
