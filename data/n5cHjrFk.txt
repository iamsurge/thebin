#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <time.h>

#define N 10 // Initial population size
#define MAX_GENERATIONS 1000 // Maximum number of generations

// Structure to represent an individual
typedef struct {
    double *x;
} individual;

// Function to optimize
double rosenbrock(double x[D]) {
    return 100*pow(x[1] - x[0]*x[0], 2) + pow(1 - x[0], 2);
}

// Differential evolution function
individual differential_evolution(individual *population, int D, double (*f)(double*), double F, double R) {
    individual trial;
    for (int i = 0; i < MAX_GENERATIONS; i++) {
        for (int j = 0; j < N; j++) {
            // Select two other individuals randomly
            int i1 = rand() % N;
            int i2 = (i1 + 1 + rand() % (N - 1)) % N;
            individual x = population[i1];
            individual y = population[i2];
            individual z = population[j];
            // Perform crossover and mutation
            for (int k = 0; k < D; k++) {
                double r = (double)rand()/RAND_MAX, fr = (double)rand()/RAND_MAX;
                trial.x[k] = y.x[k] + F * fr *(x.x[k] - y.x[k]) * (r < R);
            }
            // Select the fittest individual
            if (f(trial.x) < f(z.x)) {
                z = trial;
            }
        }
    }
    // Return the best individual
    individual best = population[0];
    for (int i = 1; i < N; i++) {
        if (f(population[i].x) < f(best.x)) {
            best = population[i];
        }
    }
    return best;
}

int main() {
    int D = 2;
    srand(time(NULL));
    // Initialize the population with random individuals
    individual *population = (individual*)malloc(sizeof(individual) * D);
    for (int i = 0; i < N; i++) {
        population[i] = malloc(D * sizeof(double));
        for (int j = 0; j < D; j++) {
            population[i].x[j] = -2 + 4*(double)rand()/RAND_MAX;
        }
    }
    // Find the global minimum of the Rosenbrock function
    individual result = differential_evolution(population, rosenbrock, 0.1, 0.2);
    printf("Result: %f %f\n", result.x[0], result.x[1]);
    return 0;
}
