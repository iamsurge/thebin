{-# LANGUAGE BangPatterns #-}
import Data.List.NonEmpty ( NonEmpty(..) )
import Data.List (foldl')


avg0 :: Fractional a => NonEmpty a -> a
avg0 (x :| xs) = let
  s = x + sum xs
  n = 1 + length xs
  in s / fromIntegral n
-- *Main  > avg0 (1:|[2..600000])
-- 300000.5
-- (0.19 secs, 130,409,848 bytes)


avg1 :: Fractional a => NonEmpty a -> a
avg1 (x :| xs) = let
  (s, n) = foldl f (x, 1) xs
  f (s, n) y = (s + y, n + 1)
  in s / n
-- *Main  > avg1 (1:|[2..600000])
-- 300000.5
-- (0.66 secs, 363,961,272 bytes)


avg2 :: Fractional a => NonEmpty a -> a
avg2 (x :| xs) = let
  (s, n) = foldl' f (x, 1) xs
  f (s, n) y = (s + y, n + 1)
  in s / n
-- *Main  > avg2 (1:|[2..600000])
-- 300000.5
-- (0.63 secs, 299,591,128 bytes)


avg3 :: Fractional a => NonEmpty a -> a
avg3 (x :| xs) = let
  (s, n) = foldl' f (x, 1) xs
  f (!s, !n) y = (s + y, n + 1)
  in s / n
-- *Main  > avg3 (1:|[2..600000])
-- 300000.5
-- (0.33 secs, 259,286,496 bytes)


avg4 :: Fractional a => NonEmpty a -> a
avg4 (x :| xs) = let
  (s, n) = foldr f (x, 1) xs
  f y (!s, !n) = (s + y, n + 1)
  in s / n
-- *Main  > avg4 (1:|[2..600000])
-- 300000.5
-- (0.47 secs, 318,856,656 bytes)

