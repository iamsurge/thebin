    def do_import_(self, action):
        pool = Pool()
        Template = pool.get('product.template')
        Identifier = pool.get('product.identifier')
        Supplier = pool.get('purchase.product_supplier')
        Product = pool.get('product.product')
        Party = pool.get('party.party')
        UOM = pool.get('product.uom')
        Config = pool.get('product.configuration')
        config = Config(1)
        transaction = Transaction()

        manufacturers = {p.name: p
            for p in Party.search([('manufacturer', '=', True)])}
        uoms = {u.symbol: u for u in UOM.search([])}

        xlsx = io.BytesIO(self.start.file)
        wb = load_workbook(xlsx, read_only=True, data_only=True)
        langs = {'es': 0, 'pt': 1, 'en': 2}
        templates = []
        identifiers = []

        for row in wb['TRYTON'].iter_rows(min_row=2):
            if not row[0].value:
                continue

            template = Template()
            template.name = row[4].value
            template.code = row[0].value
            template.default_uom = config.default_uom
            template.cost_price = row[5].value
            template.list_price = row[6].value
            template.salable = True
            template.esale_available = True
            template.sale_uom = config.default_uom
            template.purchasable = True
            template.purchase_uom = config.default_uom
            template.special_price = row[7].value
            template.weight = row[8].value
            template.weight_uom = uoms['kg']
            template.manufacturer = (manufacturers[row[9].value]
                if row[9].value in manufacturers else None)
            template.unique_variant = True if row[10].value else False
            template.save()
            for lang_string, col in langs.items():
                with transaction.set_context(lang=lang_string):
                    Template.write([template], {
                        'name': row[2 + col].value,
                        'esale_description': row[11 + col].value % {
                            'name': template.name},
                        'esale_metadescription': row[14 + col].value % {
                            'name': template.name},
                        'esale_metatitle': row[17 + col].value % {
                            'name': template.name},
                        'esale_metakeyword': row[20 + col].value % {
                            'name': template.name},
                        })
            templates.append(template.id)
            product = Product(template=template)
            product.save()
            identifier = Identifier(product=product)
            identifier.code = row[1].value
            identifiers.append(identifier)
        Identifier.save(identifiers)

        if len(templates) == 1:
            action['views'].reverse()
        return action, {
            'res_id': templates,
            }
