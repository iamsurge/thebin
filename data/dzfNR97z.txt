/*
Да се напише алгоритам кој ќе врши евалуација на израз во постфикс нотација.
На влез се чита низа од знаци за изразот (стринг), а на излез се печати вредноста на изразот по евалуацијата.
Име на класата (Java): PostFixEvaluation
*/
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.NoSuchElementException;

interface Stack<E> {

    // Elementi na stekot se objekti od proizvolen tip.

    // Metodi za pristap:

    public boolean isEmpty ();
    	// Vrakja true ako i samo ako stekot e prazen.

    public E peek ();
    	// Go vrakja elementot na vrvot od stekot.

    // Metodi za transformacija:

    public void clear ();
    	// Go prazni stekot.

    public void push (E x);
    	// Go dodava x na vrvot na stekot.

    public E pop ();
    	// Go otstranuva i vrakja elementot shto e na vrvot na stekot.
}

class ArrayStack<E> implements Stack<E> {
    private E[] elems;
    private int depth;

    @SuppressWarnings("unchecked")
    public ArrayStack (int maxDepth) {
        // Konstrukcija na nov, prazen stek.
        elems = (E[]) new Object[maxDepth];
        depth = 0;
    }


    public boolean isEmpty () {
        // Vrakja true ako i samo ako stekot e prazen.
        return (depth == 0);
    }


    public E peek () {
        // Go vrakja elementot na vrvot od stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        return elems[depth-1];
    }


    public void clear () {
        // Go prazni stekot.
        for (int i = 0; i < depth; i++)  elems[i] = null;
        depth = 0;
    }


    public void push (E x) {
        // Go dodava x na vrvot na stekot.
        elems[depth++] = x;
    }


    public E pop () {
        // Go otstranuva i vrakja elementot shto e na vrvot na stekot.
        if (depth == 0)
            throw new NoSuchElementException();
        E topmost = elems[--depth];
        elems[depth] = null;
        return topmost;
    }
}

public class PostFixEvaluation {
	
     static int evaluate(int op1, int op2, char ch) {
        switch (ch) {
            case '*': return op2 * op1;
            case '/': return op2 / op1;
            case '+': return op2 + op1;
            case '-': return op2 - op1;
            default : return 0;
        }
    }


    static int evaluatePostfix(char [] izraz, int n)
    {
        ArrayStack<String> e = new ArrayStack<String>(n);
        char ch=0;
        int op1,op2,result=0;
        int i=0;
        while(i<n)
        {
            if(izraz[i]=='+' || izraz[i]=='-' || izraz[i]=='/' || izraz[i]=='*')
            {
                ch=izraz[i];
                op1 =Integer.parseInt(e.pop());
                op2 =Integer.parseInt(e.pop());
                result=evaluate(op1,op2,ch);
                e.push(Integer.toString(result));
            }

            else
            {
                final StringBuilder number= new StringBuilder();
                if(Character.isDigit(izraz[i]))
                {
                    while (izraz[i] != ' ')
                    {
                        number.append(izraz[i]);
                        i++;
                    }

                    e.push(number.toString());
                    continue;
                }
            }
            i++;
        }


        return result;
}
	public static void main(String[] args) throws Exception{
          
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        String expression = br.readLine();
        char exp[] = expression.toCharArray();
        
        int rez = evaluatePostfix(exp, exp.length);
        System.out.println(rez);
        
        br.close();

	}

}