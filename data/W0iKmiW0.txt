#include<iostream>
#include <vector>
#include <map>
 
using namespace std;
 
void Floyd(int n, vector<vector<int>> &dist, vector<vector<int>> &next){
    for(int k = 0; k < n; k++){
        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
              if (dist[i][k] + dist[k][j] > dist[i][j]){
                dist[i][j] = dist[i][k] + dist[k][j];
                next[i][j] = k;
                }
            }
        }
    }
}
 
void Path(int u, int v, vector<int> &answ, vector<vector<int>> next){
    int c = u;
    while(c != v){
        cout << c << " " << v << endl;
        answ.push_back(c);
        
        c = next[c][v];
    }
}
 
int main()
{
    int n, m, k;
    cin >> n >> m >> k;
    vector<vector<int>> dist(n, vector<int> (n, -1e9));
    map<pair<int, int>, int> d;
    vector<vector<int>> next(n, vector<int>(n));
    for(int i = 0; i < m; i++){
        int b, e, w;
        cin >> b >> e >> w;
        dist[b - 1][e - 1] = w;
        pair <int, int> p = make_pair(b - 1, e - 1);
        d[p] = i + 1;
    }
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n; j++){
            next[i][j] = i;
        }
    }
    
    vector<int> a(k);
    for(int i = 0; i < k; i++){
        cin >> a[i];
        a[i]--;
    }
    
    Floyd(n, dist, next);
    for (int i = 0; i < n; i++){
      for (int j = 0; j < n; j++)
        cout << next[i][j] << ' ';
      cout << endl;
      }
    for(int i = 0; i < k - 1; i++){
        vector<int> answ;
        //Path(a[i], a[i + 1], answ, next);
        for(int i = 0; i < answ.size(); i++){
            cout << answ[i] << ' ';
        }
        for(int i = 0; i < answ.size() - 1; i++){
            pair <int, int> p = make_pair(answ[i], answ[i + 1]);
            cout << d[p] << ' ';
        }
    }
    return 0;
}