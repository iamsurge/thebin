import java.util.HashMap;
import java.util.Map;
import java.util.PriorityQueue;

public class Dijkstra {
  // A utility class to represent a vertex in the graph
  static class Vertex implements Comparable<Vertex> {
    public final String name;
    public Edge[] adjacencies;
    public double minDistance = Double.POSITIVE_INFINITY;
    public Vertex previous;

    public Vertex(String argName) { name = argName; }
    public String toString() { return name; }
    public int compareTo(Vertex other) {
      return Double.compare(minDistance, other.minDistance);
    }
  }

  // A utility class to represent an edge in the graph
  static class Edge {
    public final Vertex target;
    public final double weight;
    public Edge(Vertex argTarget, double argWeight) {
      target = argTarget; weight = argWeight;
    }
  }

  public static void computePaths(Vertex source) {
    source.minDistance = 0.;
    PriorityQueue<Vertex> vertexQueue = new PriorityQueue<Vertex>();
    vertexQueue.add(source);

    while (!vertexQueue.isEmpty()) {
      Vertex u = vertexQueue.poll();

      // Visit each edge exiting u
      for (Edge e : u.adjacencies) {
        Vertex v = e.target;
        double weight = e.weight;
        double distanceThroughU = u.minDistance + weight;
        if (distanceThroughU < v.minDistance) {
          vertexQueue.remove(v);
          v.minDistance = distanceThroughU;
          v.previous = u;
          vertexQueue.add(v);
        }
      }
    }
  }

  public static List<Vertex> getShortestPathTo(Vertex target) {
    List<Vertex> path = new ArrayList<Vertex>();
    for (Vertex vertex = target; vertex != null; vertex = vertex.previous)
      path.add(vertex);
    Collections.reverse(path);
    return path;
  }

  public static void main(String[] args) {
    // Create a graph with a few vertices and edges
    Vertex v0 = new Vertex("Redvile");
    Vertex v1 = new Vertex("Blueville");
    Vertex v2 = new Vertex("Greenville");
    Vertex v3 = new Vertex("Orangeville");
    Vertex v4 = new Vertex("Purpleville");

    v0.adjacencies = new Edge[]{ new Edge(v1, 5), new Edge(v2, 10), new Edge(v3, 8) };
    v1.adjacencies = new Edge[]{ new Edge(v0, 5), new Edge(v2, 3), new Edge(v4, 7) };
    v2.adjacencies = new Edge[]{ new Edge(v0, 10), new Edge(v1, 3) };
    v3.adjacencies = new Edge[]{ new Edge(v0, 8), new Edge(v4,    2) };
    v4.adjacencies = new Edge[]{ new Edge(v1, 7), new Edge(v3, 2) };
    Vertex[] vertices = { v0, v1, v2, v3, v4 };

    // Compute shortest paths
    computePaths(v0);

    // Print shortest paths
    for (Vertex v : vertices) {
      System.out.println("Distance to " + v + ": " + v.minDistance);
      List<Vertex> path = getShortestPathTo(v);
      System.out.println("Path: " + path);
    }
  }
}


This code defines a Vertex class to represent vertices in the graph, and an Edge class to represent edges. It also provides a computePaths method that uses Dijkstra's algorithm to compute the shortest path from a given source vertex to all other vertices in the graph, and a getShortestPathTo method that returns the shortest path from the source to a given target vertex.

The main method creates a graph with a few vertices and edges, and then uses the computePaths and getShortestPathTo methods to compute and print the shortest paths from the source vertex to all other vertices in the graph.

I hope this helps! Let me know if you have any questions or need further assistance.
