--Sensors -> Inputs
--x gantry start and end -> 2 Sensors
--y gantry start and end -> 2 Sensors


--links: 

--outputs:
--2 cobble = x gantry --> left
--1 cobble = y gantry --> back on 3rd rdsb
--1 log = clutch --> back
--2 log = gearshift --> right
--1 dirt = sequencedgearshift --> top
 
--sensors:

--1 brass ingo = pulley --> top
--1 acacia log = ys --> left
--2 acacia log = ye --> bottom
--1 andesite casing = xs --> right
--2 andesite casing = xe --> back





--Outputs
--clutch
--sequenced gearshift
--gearshift
--x gantry
--y gantry
--storage interface


--wrap the redstoneblocks
redsb1 = peripheral.wrap("right") --SENSORS
redsb2 = peripheral.wrap("left") --OUTPUTS
redsb3 = peripheral.wrap("redstoneIntegrator_0") --ygantry and storageinterface

timedowndrill = 200
timeup = 20
tick2 = 0.2
tick1 = 0.1
timeunload = 70
timetomvone = 3


--Sensor sides
xs = "right"
xe = "back"
ys = "left"
ye = "bottom"
pulleys = "top"

--Output sides
clutch = "back"
sqgs = "top"
gs = "right"
xgantry = "left"
ygantry = "back" --BACK OF 3rd Redstone Block
si = "right" -- Right of 3rd Redstone Block

pb = redsb1.getInput(pulleys)
ysb = redsb1.getInput(ys)
yeb = redsb1.getInput(ye)
xsb = redsb1.getInput(xs)
xeb = redsb1.getInput(xe)

row = 1

finished = false




function drill()
    print("DRILL - BOTH GANTRYS TRUE EVERYTHING ELSE FALSE")
    redsb2.setOutput(xgantry,true)
    redsb3.setOutput(ygantry,true)
    redsb3.setOutput(si,true)
    redsb2.setOutput(clutch,false)
    redsb2.setOutput(sqgs,false)
    redsb2.setOutput(gs,false)
    sleep(timedowndrill)
end

function pullup()
    pb = redsb1.getInput(pulleys)
    print("PULLUP - BOTH GANTRYS TRUE GS TRUE - EVERYTHING ELSE FALSE")
    redsb2.setOutput(xgantry,true)
    redsb3.setOutput(si,true)
    redsb3.setOutput(ygantry,true)
    redsb2.setOutput(clutch,false)
    redsb2.setOutput(sqgs,false)
    redsb2.setOutput(gs,true)
    while pb == false do
        pb = redsb1.getInput(pulleys)
        sleep(.5)
    end
end
        

function mvtonextposx()
    print("MOVETONEXTX - YGANTRY TRUE - CLUTCH TRUE - SQGS 1 SEC TRUE - EVERYTHING ELSE FALSE")
    sleep(1)
    redsb2.setOutput(clutch,true)
    redsb3.setOutput(si,true)
    redsb2.setOutput(xgantry,false)
    redsb3.setOutput(ygantry,true)
    redsb2.setOutput(gs,false)
    redsb2.setOutput(sqgs,true)
    sleep(.5)
    redsb2.setOutput(sqgs,false)
    sleep(2)
end

function mvtonextposy()
    print("MOVETONEXTY - CLUTCH TRUE - SQGS 1 SEC TRUE - EVERYTHING ELSE FALSE")
    sleep(1)
    redsb2.setOutput(clutch,true)
    redsb3.setOutput(si,true)
    redsb2.setOutput(xgantry,false)
    redsb3.setOutput(ygantry,false)
    redsb2.setOutput(gs,false)
    redsb2.setOutput(sqgs,true)
    sleep(.5)
    redsb2.setOutput(sqgs,false)
    sleep(2)
end

function startseq()
    print("STARTSEQ - CLUTCH TO TRUE -  INTERFACE TO TRUE - EVERYTHING ELSE IS FALSE")
    redsb2.setOutput(clutch,true)
    redsb3.setOutput(si,true)
    redsb2.setOutput(xgantry,false)
    redsb3.setOutput(ygantry,false)
    redsb2.setOutput(sqgs,false)
    redsb2.setOutput(gs,false)
    pullup()
    mvtoxs()
    mvtoys()
    print("WAIT FOR USER INPUT - PRESS ENTER TO START")
    check = read()
end


function mvtoxs()
    print("MOVETOXS - YGANTRY TRUE - GS TRUE - EVERYTHING ELSE FALSE")
    sleep(1)
    redsb2.setOutput(clutch,false)
    redsb3.setOutput(si,true)
    redsb2.setOutput(xgantry,false)
    redsb3.setOutput(ygantry,true)
    redsb2.setOutput(gs,true)
    redsb2.setOutput(sqgs,false)
    xsb = redsb1.getInput(xs)
    while xsb == false do
        xsb = redsb1.getInput(xs)
        sleep(.5)
    end
    redsb2.setOutput(clutch,true)
    redsb2.setOutput(gs,false)


end

function mvtoys()
    print("MOVETOYS - GS TRUE - EVERYTHING FALSE")
    sleep(1)
    redsb2.setOutput(clutch,false)
    redsb3.setOutput(si,true)
    redsb2.setOutput(xgantry,false)
    redsb3.setOutput(ygantry,false)
    redsb2.setOutput(gs,true)
    redsb2.setOutput(sqgs,false)
    while ysb == false do
        ysb = redsb1.getInput(ys)
        sleep(.5)
    end
    redsb2.setOutput(clutch,true)
    redsb2.setOutput(gs,false)
end

function unload()
    mvtoxs()
    mvtoys()
    redsb3.setOutput(si,false)
    redsb2.setOutput(xgantry,false)
    redsb3.setOutput(ygantry,true)
    redsb2.setOutput(clutch,false)
    sleep(20)
    redsb3.setOutput(si,true)
    mvtoxs()
end

--mvtoxs()
--mvtoys()
--startseq()
--mvtonextposx()
--mvtonextposy()
--drill()
--pullup()
--unload()

cmds = {"xs","ys","drill","pullup","unload","nextx","nexty"}

latestcmd = ""
startseq()
while true do
    term.clear()
    term.setCursorPos(1,1)
    print("QUARRY CMD - 'help' to see available Commands")
    if latestcmd == "" then
    else
        print(latestcmd)
    end
    input = read()
    latestcmd = input
    if input == "help" then
        for k,v in pairs(cmd) do
            print(k,v)
        end
    else if input == "xs" then
        mvtoxs()
    else if input == "ys" then
        mvtoys()
    else if input == "drill" then
        drill()
    else if input == "pullup" then
        pullup()
    else if input == "unload" then
        unload()
    else if input == "nextx" then
        mvtonextposx()
    else if input == "nexty" then
        mvtonextposy()
    end
    sleep(.5)
end


