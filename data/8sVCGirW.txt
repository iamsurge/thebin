#!/usr/bin/env python3

import datetime
from backend.companies.models import Company
from backend.projects.models import Project
from backend.data.models import QueueData, OperationDaily, OperationWeekly
from collections import defaultdict
from backend.data.constants import QueueDataStateOptions
import pprint


def collect_operations_daily():
    # time_from = datetime.date.today()-datetime.timedelta(1)
    # time_to = datetime.date.today()
    time_from = datetime.datetime.strptime('2022-12-07 00:00:00', '%Y-%m-%d %H:%M:%S')
    time_to = datetime.datetime.strptime('2022-12-08 00:00:00', '%Y-%m-%d %H:%M:%S')

    operations_records = defaultdict(dict)
    operations = QueueData.objects.filter(time_created__range=[time_from, time_to])
    object_agendas = set([record.object_agenda for record in operations])

    for operation in operations:
        if operation.conn.project.id not in operations_records[operation.conn.company.id]:
            operations_records[operation.conn.company.id][operation.conn.project.id] = {}
            for object_agenda in object_agendas:
                operations_records[operation.conn.company.id][operation.conn.project.id][object_agenda] = {
                    'failed_process_count': 0,
                    'successful_process_count': 0,
                    'process_count': 0,
                }

        if operation.state == QueueDataStateOptions.PROCESSED:
            operations_records[operation.conn.company.id][operation.conn.project.id][operation.object_agenda][
                'successful_process_count'] += 1
            operations_records[operation.conn.company.id][operation.conn.project.id][operation.object_agenda][
                'process_count'] += 1
        elif operation.state == QueueDataStateOptions.FAILED:
            operations_records[operation.conn.company.id][operation.conn.project.id][operation.object_agenda][
                'failed_process_count'] += 1
            operations_records[operation.conn.company.id][operation.conn.project.id][operation.object_agenda][
                'process_count'] += 1

    for company_id, projects in operations_records.items():
        for project_id, object_agendas in projects.items():
            for object_agenda, record in object_agendas.items():
                if record['failed_process_count'] != 0 and \
                        record['successful_process_count'] != 0 and \
                        record['process_count'] != 0:
                    obj = OperationDaily()
                    obj.time_from = time_from
                    obj.time_to = time_to
                    obj.project_id = project_id
                    obj.company_id = company_id
                    obj.object_agenda = object_agenda
                    obj.failed_process_count = record['failed_process_count']
                    obj.successful_process_count = record['successful_process_count']
                    obj.process_count = record['process_count']
                    obj.save()


def collect_operations_weekly():
    time_from = datetime.datetime.strptime('2022-12-11 00:00:00', '%Y-%m-%d %H:%M:%S')
    time_to = datetime.datetime.strptime('2022-12-12 00:00:00', '%Y-%m-%d %H:%M:%S')
    operations = OperationDaily.objects.filter(time_created__range=[time_from, time_to])
    object_agendas = set([record.object_agenda for record in operations])
    pprint.pp(operations)
    operations_weekly = defaultdict(dict)
    for operation in operations:
        if operation.project.id not in operations_weekly[operation.company.id]:
            operations_weekly[operation.company.id][operation.project.id] = {}
            for object_agenda in object_agendas:
                operations_weekly[operation.company.id][operation.project.id][object_agenda] = {
                    'week_number': time_from.isocalendar().week,
                    'failed_process_count': 0,
                    'successful_process_count': 0,
                    'process_count': 0,
                }

        operations_weekly[operation.company.id][operation.project.id][operation.object_agenda]['failed_process_count']\
            += operation.failed_process_count

        operations_weekly[operation.company.id][operation.project.id][operation.object_agenda]['successful_process_count'] \
            += operation.successful_process_count

        operations_weekly[operation.company.id][operation.project.id][operation.object_agenda]['process_count'] \
            += operation.process_count

    for company_id, projects in operations_weekly.items():
        for project_id, object_agendas in projects.items():
            for object_agenda, record in object_agendas.items():
                if record['failed_process_count'] != 0 and \
                        record['successful_process_count'] != 0 and \
                        record['process_count'] != 0:
                    obj = OperationWeekly()
                    obj.week_number = record['week_number']
                    obj.time_from = time_from
                    obj.time_to = time_to
                    obj.project_id = project_id
                    obj.company_id = company_id
                    obj.object_agenda = object_agenda
                    obj.failed_process_count = record['failed_process_count']
                    obj.successful_process_count = record['successful_process_count']
                    obj.process_count = record['process_count']
                    obj.save()

    pprint.pp(operations_weekly)


def main():
    #collect_operations_daily()
    collect_operations_weekly()


main()
