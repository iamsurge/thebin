--

local cfg = (script:getDraft():getMeta() or {})['removal group'] or {}
local groupId = cfg.id or ''
local cfgId = '375ea238-1211-4752-8b76-1c11496ec2db-'..groupId

local shared = Util.optStorage(_G, cfgId, function() return {
    pendingSet = {}
} end)

local function getStorage(x, y)
    local stg = Tile.getBuildingStorage(x, y)
    return stg and Util.optStorage(stg, cfgId)
end

local function registerBuilding(x, y)
    table.insert(shared.pendingSet, { x = x, y = y })
end

local function removeBuildingSet(x, y)
    local stg = getStorage(x, y)
    local set = stg and stg.set
    if not set then return end

    for i=1,#set do
        local xy = set[i]
        if (xy.x ~= x or xy.y ~= y) and getStorage(xy.x, xy.y) then
            Builder.remove(xy.x, xy.y)
        end
    end
end

local function removeBuilding(x, y)
    if not shared.takingAction then
        shared.takingAction = true

        removeBuildingSet(x, y)

        shared.takingAction = false
    end
end

function script:event(x, y, _, evt)
    if evt == Script.EVENT_PLACED then
        registerBuilding(x, y)
    elseif evt == Script.EVENT_REMOVE then
        removeBuilding(x, y)
    end
end

function script:update()
    local pendingSet = shared.pendingSet

    if #pendingSet >= 2 then
        for i=1,#pendingSet do
            local xy = pendingSet[i]
            local stg = getStorage(xy.x, xy.y);
            if stg then
                stg.set = pendingSet
            end
        end
    end

    if #pendingSet > 0 then
        shared.pendingSet = {}
    end
end
