海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥说明@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"主页\",\"path\":\"home\",\"rule\":\"var d = [];\\ntry {\\n    addListener('onClose', () => {\\n        clearVar('nameArray');\\n        clearVar('urlArray');\\n        clearVar('switch');\\n    })\\n    addListener('onRefresh', () => {\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n        eval('configArray=' + setFile);\\n        clearVar('delNum');\\n        clearVar('delArray');\\n        clearVar('shareNum');\\n        clearVar('shareArray');\\n        for (let i = 0; i < configArray.length; i++) {\\n            clearVar('isChoose' + i);\\n        }\\n    })\\n    if (!fileExist('hiker://files/rules/cy/MyParse.json')) {\\n        configArray = [];\\n        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n    }\\n    if (!fileExist('hiker://files/rules/cy/MyParse_selection.json')) {\\n        tagsArray = ['qq', 'mgtv', 'bili', 'qiyi', 'youku'];\\n        saveFile('hiker://files/rules/cy/MyParse_selection.json', JSON.stringify(tagsArray));\\n    }\\n    if (!fileExist('hiker://files/rules/cy/dmSwitch.txt')) {\\n        saveFile('hiker://files/rules/cy/dmSwitch.txt', '开');\\n    }\\n    if (!fileExist('hiker://files/dm盒子/settings.json')) {\\n        orgSettings = JSON.stringify({\\n            fontSize: 25,\\n            dmFrom: 'par'\\n        });\\n        saveFile('hiker://files/dm盒子/settings.json', orgSettings);\\n    }\\n    d.push({\\n        title: '‘‘’’<big><span style=\\\"color:#6EB897\\\">添 加 解 析</span></big>',\\n        url: $('#noLoading#').lazyRule(() => {\\n            if (getVar('switch', '关') == '开') {\\n                for (let i = 0; i < 3; i++) {\\n                    deleteItem('add')\\n                }\\n                putVar('switch', '关');\\n            } else {\\n                addArray = [{\\n                    desc: '解析名称，一行一个',\\n                    col_type: 'input',\\n                    extra: {\\n                        titleVisible: false,\\n                        type: 'textarea',\\n                        height: -1,\\n                        highlight: true,\\n                        onChange: \\\"putVar('nameArray',input)\\\",\\n                        id: 'add'\\n                    }\\n                }, {\\n                    desc: '解析，一行一个',\\n                    col_type: 'input',\\n                    extra: {\\n                        titleVisible: false,\\n                        type: 'textarea',\\n                        height: -1,\\n                        highlight: true,\\n                        onChange: \\\"putVar('urlArray',input)\\\",\\n                        id: 'add'\\n                    }\\n                }, {\\n                    title: '保存',\\n                    url: $().lazyRule(() => {\\n                        nameArray = getVar('nameArray').split(/\\\\r\\\\n|\\\\n|\\\\r/);\\n                        urlArray = getVar('urlArray').split(/\\\\r\\\\n|\\\\n|\\\\r/);\\n                        dataLength = nameArray.length > urlArray.length ? nameArray.length : urlArray.length;\\n                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                        eval('configArray=' + setFile);\\n                        for (let i = 0; i < dataLength; i++) {\\n                            jiexiName = i > nameArray.length - 1 ? '未命名' : (nameArray[i] == '' ? '未命名' : nameArray[i]);\\n                            jiexiUrl = i > urlArray.length - 1 ? '空解析' : (urlArray[i] == '' ? '空解析' : urlArray[i]);\\n                            configArray.unshift({\\n                                name: jiexiName,\\n                                url: jiexiUrl,\\n                                tags: '全部'\\n                            });\\n                        }\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n                        putVar('switch', '关');\\n                        refreshPage(true);\\n                        return \\\"toast://保存成功\\\"\\n                    }),\\n                    col_type: 'text_center_1',\\n                    extra: {\\n                        id: 'add'\\n                    }\\n                }]\\n                addItemAfter('addFunction', addArray);\\n                putVar('switch', '开');\\n            }\\n            return 'toast://已切换switch为:' + getVar('switch', '开')\\n        }),\\n        desc: '简单、独立的解析工具 | 不提供解析',\\n        col_type: 'text_center_1',\\n        extra: {\\n            id: 'addFunction'\\n        }\\n    }, {\\n        col_type: 'line_blank'\\n    }, {\\n        title: '‘‘’’<font color=\\\"#6EB897\\\">说明</font>',\\n        url: $().lazyRule(() => {\\n            return $('hiker://empty').rule(() => {\\n                let d = [];\\n                d.push({\\n                    title: '教程文档',\\n                    url: 'https://www.yuque.com/chenying-k73sc/lhcvqd/bsh5e2',\\n                    desc: \\\"float&&100%\\\",\\n                    col_type: 'x5_webview_single'\\n                });\\n                setResult(d);\\n            });\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        title: \\\"切换插件\\\",\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            return $(['断插复原', '接管断插'], 2, '请选择你要执行的操作').select(() => {\\n                if (input == '断插复原') {\\n                    writeFile(\\\"hiker://files/cache/Parse_Dn.js\\\", JSON.parse(fetch(\\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\")).rule);\\n                    return \\\"toast://当前是断插模式\\\";\\n                } else {\\n                    writeFile(\\\"hiker://files/cache/Parse_Dn.js\\\", JSON.parse(fetch(\\\"hiker://page/duan?rule=配置助手\\\")).rule);\\n                    return \\\"toast://当前是助手已接管解析任务\\\";\\n                }\\n            })\\n        }),\\n        col_type: \\\"scroll_button\\\"\\n    }, {\\n        title: \\\"TVbox推送:\\\" + (request('hiker://files/rules/cy/boxSwitch.txt') == \\\"开\\\" ? \\\"开\\\" : \\\"关\\\"),\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            writeFile(\\\"hiker://files/rules/cy/boxSwitch.txt\\\", (request('hiker://files/rules/cy/boxSwitch.txt') == \\\"开\\\" ? \\\"关\\\" : \\\"开\\\"))\\n            refreshPage()\\n            return \\\"toast://切换成功\\\"\\n        }),\\n        col_type: \\\"scroll_button\\\"\\n    }, {\\n        title: '导入辅助',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            html = request('https://netcut.cn/p/a5d1c8e1ecee28d3');\\n            data = html.match(/{.*note_content.*updated_at.*}/)[0];\\n            content = JSON.parse(data).note_content;\\n            upData = JSON.parse(data).updated_at;\\n            putVar('content', content);\\n            confirm({\\n                title: '是否导入',\\n                content: '脚本更新日期\\\\n' + upData,\\n                confirm: () => {\\n                    return getVar('content');\\n                },\\n                cancel: () => {\\n                    return 'toast://已取消导入';\\n                }\\n            })\\n            return 'hiker://empty';\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        title: '解析模板',\\n        url: `copy://修改★魔断通用模板★\\nfunction (vipUrl) {\\n    // 正常调用-弹幕开关在配置助手里自行设置是否启用\\n    return $.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl);\\n    /*免嗅首发模式\\n    如果想要实现类似魔断的嗅探优先：免嗅加x5、Json多线路的形式，参考注释的示例代码添加免嗅代码（只是示例并不可用），并在最终返回的时候顺序多传入两个参数：一个是免嗅得到的播放地址，一个是这个解析或线路的名字\\n    var parse = \\\"https://player.dxyy.cf/WndexxX.php?url=\\\";\\n    bfurl = $.require(\\\"hiker://page/api?rule=API盒子\\\").parseLLQ(parse, vipUrl);\\n    return $.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl, bfurl, 'llq') + \\\";{User-Agent@&&Referer@}\\\";\\n    */\\n}`,\\n        col_type: 'scroll_button'\\n    }, {\\n        title: '源码编辑',\\n        url: \\\"editFile://hiker://files/rules/cy/MyParse.json\\\",\\n        col_type: 'scroll_button'\\n    }, {\\n        title: '导出配置',\\n        url: 'share://hiker://files/rules/cy/MyParse.json',\\n        col_type: 'scroll_button'\\n    }, {\\n        title: '云板分享',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n            secretContent = base64Encode(base64Encode(setFile));\\n            copy(\\\"助手解析导入口令¥¥\\\" + sharePaste(secretContent));\\n            return 'hiker://empty';\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        title: '云板导入',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            return $('', '增量导入，请放心').input(() => {\\n                if (input.match(/助手解析导入口令¥¥/)) {\\n                    link = input.split('¥¥')[1];\\n                    secretContent = parsePaste(link);\\n                    eval('remoteSetFile=' + base64Decode(base64Decode(secretContent)));\\n                    eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\n                    newArray = configArray.concat(remoteSetFile);\\n                    saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\n                    refreshPage(true);\\n                    return \\\"toast://导入成功\\\"\\n                } else {\\n                    return \\\"toast://口令错误\\\"\\n                }\\n            })\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        col_type: 'line_blank'\\n    }, {\\n        title: getVar('mode', '配置') == '配置' ? '““””<font color=red>配置</font>' : '配置',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            putVar('mode', '配置');\\n            refreshPage(true);\\n            return 'hiker://empty';\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        title: getVar('mode', '配置') == '批量工具' ? '““””<font color=red>批量工具</font>' : '批量工具',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            return $(['删除', '分享'], 2, '请选择你要执行的操作').select(() => {\\n                putVar('mode', '批量工具');\\n                if (input == '删除') {\\n                    putVar('type', '批量删除');\\n                    clearVar('delNum');\\n                    clearVar('delArray');\\n                } else {\\n                    putVar('type', '批量分享');\\n                    clearVar('shareNum');\\n                    clearVar('shareArray');\\n                }\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                eval('configArray=' + setFile);\\n                for (let i = 0; i < configArray.length; i++) {\\n                    clearVar('isChoose' + i);\\n                }\\n                refreshPage(true);\\n                return 'hiker://empty';\\n            })\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        title: getVar('mode', '配置') == '解析测试' ? '““””<font color=red>解析测试</font>' : '解析测试',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            putVar('mode', '解析测试');\\n            refreshPage(true);\\n            return 'hiker://empty';\\n        }),\\n        col_type: 'scroll_button'\\n    }, {\\n        title: request('hiker://files/rules/cy/dmSwitch.txt') == 'true' ? '弹幕:开' : '弹幕:关',\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n            var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\n            if (dmSwitch == 'true') {\\n                saveFile('hiker://files/rules/cy/dmSwitch.txt', 'false');\\n            } else {\\n                saveFile('hiker://files/rules/cy/dmSwitch.txt', 'true');\\n            }\\n            refreshPage(true);\\n            return 'hiker://empty';\\n        }),\\n        col_type: 'scroll_button',\\n        extra: {\\n            longClick: [{\\n                title: '弹幕来源', js: $.toString(() => {\\n                    return $.require('hiker://page/api?rule=配置助手').dmSettings(0);\\n                })\\n            }, {\\n                title: '函数作用域', js: $.toString(() => {\\n                    return $.require('hiker://page/api?rule=配置助手').dmSettings(1);\\n                })\\n            }, {\\n                title: '弹幕大小', js: $.toString(() => {\\n                    return $.require('hiker://page/api?rule=配置助手').dmSettings(2);\\n                })\\n            }]\\n        }\\n    });\\n\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n    eval('configArray=' + setFile);\\n    if (getVar('mode', '配置') == '配置') {\\n        d.push({\\n            col_type: 'line_blank'\\n        }, {\\n            title: '去重除白',\\n            url: $('hiker://empty#noLoading#').lazyRule(() => {\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                eval('configArray=' + setFile);\\n                putVar('lastClean', configArray);\\n                newArray = [];\\n                num = 0;\\n                for (let i = 0; i < configArray.length; i++) {\\n                    if (getVar(configArray[i].url, '0') != '1' && configArray[i].url != '空解析' && configArray[i].url != undefined) {\\n                        newArray.push(configArray[i]);\\n                        putVar(configArray[i].url, '1');\\n                    } else {\\n                        num++;\\n                    }\\n                }\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\n                JSON.parse(getVar('lastClean', '[]')).forEach(item => {\\n                    clearVar(item.url);\\n                });\\n                refreshPage(true);\\n                return \\\"toast://本次去重数量为\\\\t\\\\t\\\\t\\\" + num;\\n            }),\\n            col_type: 'scroll_button'\\n        }, {\\n            title: '占位符处理',\\n            url: $(['添加', '去除'], 2, '请选择你要执行的操作').select(() => {\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                eval('configArray=' + setFile);\\n                for (let i = 0; i < configArray.length; i++) {\\n                    if (input == '添加') {\\n                        if (configArray[i].url.match(/\\\\?url=/)) {\\n                            configArray[i].url = configArray[i].url.replace('?url=', '?placeholder=&url=');\\n                        }\\n                    } else {\\n                        if (configArray[i].url.match(/\\\\?placeholder=&url=/)) {\\n                            configArray[i].url = configArray[i].url.replace('?placeholder=&url=', '?url=');\\n                        }\\n                    }\\n                }\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n                refreshPage(true);\\n                return \\\"toast://处理成功\\\";\\n            }),\\n            col_type: 'scroll_button'\\n        }, {\\n            col_type: 'line_blank'\\n        });\\n        tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\n        tagsArray.forEach(item => {\\n            d.push({\\n                title: item,\\n                url: $().rule((item) => {\\n                    let d = [];\\n                    d.push({\\n                        title: '返回刷新，记得点我！！！',\\n                        url: $('#noLoading#').lazyRule(() => {\\n                            back(true);\\n                            return \\\"toast://刷新成功~\\\";\\n                        }),\\n                        col_type: 'text_1'\\n                    }, {\\n                        title: '‘‘’’<big><span style=\\\"color:#6EB897\\\">添 加 解 析</span></big>',\\n                        url: $('#noLoading#').lazyRule((item) => {\\n                            if (getVar('switch2', '关') == '开') {\\n                                for (let i = 0; i < 3; i++) {\\n                                    deleteItem('add2')\\n                                }\\n                                putVar('switch2', '关');\\n                            } else {\\n                                addArray = [{\\n                                    desc: '解析名称，一行一个',\\n                                    col_type: 'input',\\n                                    extra: {\\n                                        titleVisible: false,\\n                                        type: 'textarea',\\n                                        height: -1,\\n                                        highlight: true,\\n                                        onChange: \\\"putVar('nameArray',input)\\\",\\n                                        id: 'add2'\\n                                    }\\n                                }, {\\n                                    desc: '解析，一行一个',\\n                                    col_type: 'input',\\n                                    extra: {\\n                                        titleVisible: false,\\n                                        type: 'textarea',\\n                                        height: -1,\\n                                        highlight: true,\\n                                        onChange: \\\"putVar('urlArray',input)\\\",\\n                                        id: 'add2'\\n                                    }\\n                                }, {\\n                                    title: '保存',\\n                                    url: $().lazyRule((item) => {\\n                                        nameArray = getVar('nameArray').split(/\\\\r\\\\n|\\\\n|\\\\r/);\\n                                        urlArray = getVar('urlArray').split(/\\\\r\\\\n|\\\\n|\\\\r/);\\n                                        dataLength = nameArray.length > urlArray.length ? nameArray.length : urlArray.length;\\n                                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                                        eval('configArray=' + setFile);\\n                                        for (let i = 0; i < dataLength; i++) {\\n                                            jiexiName = i > nameArray.length - 1 ? '未命名' : (nameArray[i] == '' ? '未命名' : nameArray[i]);\\n                                            jiexiUrl = i > urlArray.length - 1 ? '空解析' : (urlArray[i] == '' ? '空解析' : urlArray[i]);\\n                                            configArray.unshift({\\n                                                name: jiexiName,\\n                                                url: jiexiUrl,\\n                                                tags: item\\n                                            });\\n                                        }\\n                                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n                                        putVar('switch2', '关');\\n                                        refreshPage(true);\\n                                        return \\\"toast://保存成功\\\"\\n                                    }, item),\\n                                    col_type: 'text_center_1',\\n                                    extra: {\\n                                        id: 'add2'\\n                                    }\\n                                }]\\n                                addItemAfter('addFunction2', addArray);\\n                                putVar('switch2', '开');\\n                            }\\n                            return 'toast://已切换switch为:' + getVar('switch2', '开')\\n                        }, item),\\n                        desc: '简单、无忧、独立的解析管理工具，养老专用',\\n                        col_type: 'text_center_1',\\n                        extra: {\\n                            id: 'addFunction2'\\n                        }\\n                    });\\n                    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                    eval('var configArray=' + setFile);\\n                    eval('var reg=/' + item + '|全部/;');\\n                    // 当前线路的解析排序\\n                    index = 0;\\n                    for (let i = 0; i < configArray.length; i++) {\\n                        if (configArray[i].tags == undefined || configArray[i].tags.match(reg)) {\\n                            d.push({\\n                                title: '‘‘’’<span style=\\\"color:red\\\">' + index + '</span>-<span style=\\\"color:#6EB897\\\">' + i + '</span>-' + configArray[i].name + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:#99CCFF\\\"><small>#应用:' + configArray[i].tags + '</small></span>' + (configArray[i].js != undefined && configArray[i].js != '' ? '</small></span>' + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\"><small>#JS</small></span>' : ''),\\n                                desc: configArray[i].url,\\n                                url: $(['编辑', '移位', '删除'], 3, '请选择你要执行的操作').select((i) => {\\n                                    return $.require(\\\"hiker://page/api?rule=配置助手\\\").op_basic(i);\\n                                }, i),\\n                                col_type: 'text_1',\\n                                extra: {\\n                                    longClick: [{\\n                                        title: '注入JS,辅助嗅探', js: $.toString((i) => {\\n                                            return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + i;\\n                                        }, i),\\n                                    }]\\n                                }\\n                            });\\n                            index++;\\n                        }\\n                    }\\n                    setResult(d);\\n                }, item),\\n                col_type: 'scroll_button'\\n            });\\n        });\\n        d.push({\\n            title: '➕',\\n            url: $('#noLoading#').lazyRule(() => {\\n                return $('', '请输入需要解析的标识，比如域名').input(() => {\\n                    tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\n                    tagsArray.push(input);\\n                    saveFile('hiker://files/rules/cy/MyParse_selection.json', JSON.stringify(tagsArray));\\n                    refreshPage(true);\\n                    return 'toast://添加线路成功~'\\n                })\\n            }),\\n            col_type: 'scroll_button'\\n        }, {\\n            title: '➖',\\n            url: $('#noLoading#').lazyRule(() => {\\n                tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\n                return $(tagsArray, 3, '请选择你要删除的线路').select((tagsArray) => {\\n                    Array.prototype.indexOf = function (val) {\\n                        for (var i = 0; i < this.length; i++) {\\n                            if (this[i] == val) return i;\\n                        }\\n                        return -1;\\n                    };\\n                    Array.prototype.remove = function (val) {\\n                        var index = this.indexOf(val);\\n                        if (index > -1) {\\n                            this.splice(index, 1);\\n                        }\\n                    };\\n                    tagsArray.remove(input);\\n                    saveFile('hiker://files/rules/cy/MyParse_selection.json', JSON.stringify(tagsArray));\\n                    refreshPage(true);\\n                    return 'toast://已移除线路~'\\n                }, tagsArray)\\n            }),\\n            col_type: 'scroll_button'\\n        });\\n        for (let i = 0; i < configArray.length; i++) {\\n            if (configArray[i].tags == undefined) {\\n                configArray[i].tags = '全部'\\n            }\\n            d.push({\\n                title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + i + '</span>-' + configArray[i].name + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:#99CCFF\\\"><small>#应用:' + configArray[i].tags + (configArray[i].js != undefined && configArray[i].js != '' ? '</small></span>' + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\"><small>#JS</small></span>' : ''),\\n                desc: configArray[i].url,\\n                url: $(['编辑', '移位', '删除'], 3, '请选择你要执行的操作').select((i) => {\\n                    return $.require(\\\"hiker://page/api?rule=配置助手\\\").op_basic(i);\\n                }, i),\\n                col_type: 'text_1',\\n                extra: {\\n                    longClick: [{\\n                        title: '注入JS,辅助嗅探', js: $.toString((i) => {\\n                            return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + i;\\n                        }, i),\\n                    }]\\n                }\\n            });\\n        }\\n    } else if (getVar('mode', '配置') == '批量工具') {\\n        if (getVar('type', '批量删除') == '批量删除') {\\n            d.push({\\n                title: '确认删除\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getVar('delNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\n                    if (getVar('delNum', '0') == '0') {\\n                        return 'toast://请先选择要删除的解析！'\\n                    } else {\\n                        delArray = JSON.parse(getVar('delArray'));\\n                        log(delArray);\\n                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                        eval('configArray=' + setFile);\\n                        newArray = [];\\n                        for (let i = 0; i < configArray.length; i++) {\\n                            if (!delArray.includes(i)) {\\n                                newArray.push(configArray[i]);\\n                            }\\n                        }\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\n                        delNum = getVar('delNum', '0');\\n                        clearVar('delNum');\\n                        clearVar('delArray');\\n                        for (let i = 0; i < configArray.length; i++) {\\n                            clearVar('isChoose' + i);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"toast://共删除\\\" + delNum + '条解析';\\n                    }\\n                }),\\n                col_type: 'text_center_1',\\n                extra: {\\n                    id: 'delBtn'\\n                }\\n            });\\n            index = 0;\\n            configArray.forEach(item => {\\n                d.push({\\n                    title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name + (configArray[index].js != undefined && configArray[index].js != '' ? '</small></span>' + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\"><small>#JS</small></span>' : ''),\\n                    desc: item.url,\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\n                        if (getVar('isChoose' + index, 'no') == 'yes') {\\n                            log(index);\\n                            delArray = JSON.parse(getVar('delArray', '[]'));\\n                            delNum = Number(getVar('delNum', '0')) - 1;\\n                            delArray.pop(index);\\n                            putVar('delArray', delArray);\\n                            putVar('delNum', delNum);\\n                            updateItem(index + '', {\\n                                title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name,\\n                            });\\n                            updateItem('delBtn', {\\n                                title: '确认删除\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getVar('delNum', '0') + '</span>\\\\t\\\\t\\\\t条解析'\\n                            });\\n                            putVar('isChoose' + index, 'no');\\n                            return 'hiker://empty';\\n                        } else {\\n                            delArray = JSON.parse(getVar('delArray', '[]'));\\n                            delNum = Number(getVar('delNum', '0')) + 1;\\n                            delArray.push(index);\\n                            log(delArray);\\n                            putVar('delArray', delArray);\\n                            putVar('delNum', delNum);\\n                            updateItem(index + '', {\\n                                title: '‘‘’’<span style=\\\"color:red\\\">' + index + '-' + item.name + '</span>',\\n                            });\\n                            updateItem('delBtn', {\\n                                title: '确认删除\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getVar('delNum', '0') + '</span>\\\\t\\\\t\\\\t条解析'\\n                            });\\n                            putVar('isChoose' + index, 'yes');\\n                            return 'hiker://empty';\\n                        }\\n                    }, index, item),\\n                    col_type: 'text_1',\\n                    extra: {\\n                        id: index + '',\\n                        longClick: [{\\n                            title: '注入JS,辅助嗅探', js: $.toString((index) => {\\n                                return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + index;\\n                            }, index),\\n                        }]\\n                    }\\n                });\\n                index++;\\n            });\\n        } else {\\n            d.push({\\n                title: '确认分享\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getVar('shareNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\n                    if (getVar('shareNum', '0') == '0') {\\n                        return 'toast://请先选择要分享的解析！'\\n                    } else {\\n                        shareArray = JSON.parse(getVar('shareArray'));\\n                        log(shareArray);\\n                        eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\n                        shareFile = [];\\n                        for (let i = 0; i < configArray.length; i++) {\\n                            if (shareArray.includes(i)) {\\n                                shareFile.push(configArray[i]);\\n                            }\\n                        }\\n                        secretContent = base64Encode(base64Encode(JSON.stringify(shareFile)));\\n                        copy(\\\"助手解析导入口令¥¥\\\" + sharePaste(secretContent));\\n                        clearVar('shareNum');\\n                        clearVar('shareArray');\\n                        for (let i = 0; i < configArray.length; i++) {\\n                            clearVar('isChoose' + i);\\n                        }\\n                        refreshPage(true);\\n                        return \\\"toast://分享成功\\\"\\n                    }\\n                }),\\n                col_type: 'text_center_1',\\n                extra: {\\n                    id: 'shareBtn'\\n                }\\n            });\\n            index = 0;\\n            configArray.forEach(item => {\\n                d.push({\\n                    title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name + (configArray[index].js != undefined && configArray[index].js != '' ? '</small></span>' + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\"><small>#JS</small></span>' : ''),\\n                    desc: item.url,\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\n                        if (getVar('isChoose' + index, 'no') == 'yes') {\\n                            log(index);\\n                            shareArray = JSON.parse(getVar('shareArray', '[]'));\\n                            shareNum = Number(getVar('shareNum', '0')) - 1;\\n                            shareArray.pop(index);\\n                            putVar('shareArray', shareArray);\\n                            putVar('shareNum', shareNum);\\n                            updateItem(index + '', {\\n                                title: '‘‘’’<span style=\\\"color:#6EB897\\\">' + index + '</span>-' + item.name,\\n                            });\\n                            updateItem('shareBtn', {\\n                                title: '确认分享\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getVar('shareNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\n                            });\\n                            putVar('isChoose' + index, 'no');\\n                            return 'hiker://empty';\\n                        } else {\\n                            shareArray = JSON.parse(getVar('shareArray', '[]'));\\n                            shareNum = Number(getVar('shareNum', '0')) + 1;\\n                            shareArray.push(index);\\n                            log(shareArray);\\n                            putVar('shareArray', shareArray);\\n                            putVar('shareNum', shareNum);\\n                            updateItem(index + '', {\\n                                title: '‘‘’’<span style=\\\"color:red\\\">' + index + '-' + item.name + '</span>',\\n                            });\\n                            updateItem('shareBtn', {\\n                                title: '确认分享\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\">' + getVar('shareNum', '0') + '</span>\\\\t\\\\t\\\\t条解析',\\n                            });\\n                            putVar('isChoose' + index, 'yes');\\n                            return 'hiker://empty';\\n                        }\\n                    }, index, item),\\n                    col_type: 'text_1',\\n                    extra: {\\n                        id: index + '',\\n                        longClick: [{\\n                            title: '注入JS,辅助嗅探', js: $.toString((index) => {\\n                                return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + index;\\n                            }, index),\\n                        }]\\n                    }\\n                });\\n                index++;\\n            });\\n        }\\n    } else if (getVar('mode', '配置') == '解析测试') {\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n        eval('configArray=' + setFile);\\n        index = 0;\\n        configArray.forEach(item => {\\n            jiexi = item.url;\\n            d.push({\\n                title: item.name + (configArray[index].js != undefined && configArray[index].js != '' ? '</small></span>' + '\\\\t\\\\t\\\\t‘‘’’<span style=\\\"color:red\\\"><small>#JS</small></span>' : '') + '\\\\t\\\\t\\\\t‘‘’’<font color=\\\"#6EB897\\\"><small>➮前往测试</small></font>',\\n                desc: item.url,\\n                url: $().rule((jiexi) => {\\n                    let d = [];\\n                    d.push({\\n                        title: '编辑测试链接',\\n                        url: 'editFile://hiker://files/rules/cy/ceshi.json',\\n                        col_type: 'text_2'\\n                    }, {\\n                        title: '弹幕:' + getVar('dmSwitch', '关'),\\n                        url: $('hiker://empty#noLoading#').lazyRule(() => {\\n                            if (getVar('dmSwitch', '关') == '关') {\\n                                putVar('dmSwitch', '开');\\n                            } else {\\n                                putVar('dmSwitch', '关');\\n                            }\\n                            updateItem('dmSwitch', {\\n                                title: '弹幕:' + getVar('dmSwitch', '关'),\\n                            });\\n                            return 'hiker://empty';\\n                        }),\\n                        col_type: 'text_2',\\n                        extra: {\\n                            id: 'dmSwitch'\\n                        }\\n                    });\\n                    if (!fileExist('hiker://files/rules/cy/ceshi.json')) {\\n                        ceshiData = {\\n                            '腾讯视频': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/3/106_3a0d212e17cb95e232ffe155460385cb_con_130x130.png',\\n                                url: 'https://v.qq.com/x/cover/mzc00200rmpaf40/n0036l4tntc.html'\\n                            },\\n                            '优酷': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/9/110_8ff06e0c237760cd57d2508fd98c8414_con_130x130.png',\\n                                url: 'https://v.youku.com/v_show/id_XNDc0MDE1NTk1Mg==.html'\\n                            },\\n                            '爱奇艺': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/09/8/110_901f2ef37af2fea25e5d9648f551ce31_con_130x130.png',\\n                                url: 'http://www.iqiyi.com/v_2ga8zts86ys.html'\\n                            },\\n                            '芒果TV': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/6/110_1834d296aa5b5666a7d94b1e3479ae64_con_130x130.png',\\n                                url: 'http://www.mgtv.com/b/349253/10424300.html'\\n                            },\\n                            '哔哩哔哩': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/4/110_8e2e3d88c45025b380e69817d6fb53b1_con_130x130.png',\\n                                url: 'https://m.bilibili.com/bangumi/play/ep428993'\\n                            },\\n                            '搜狐视频': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/9/110_532a51f8431efc377808c1ffff2da36f_con_130x130.png',\\n                                url: 'https://m.tv.sohu.com/v7329441.shtml',\\n                            },\\n                            '西瓜视频': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/5/110_a86265882ed18c6190566e9ea25f9698_con_130x130.png',\\n                                url: 'https://www.ixigua.com/6699356792905794055'\\n                            },\\n                            '乐视': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/8/2_35b5d4373f4bcba28f39486e4f1164d9_con_130x130.png',\\n                                url: 'https://m.le.com/vplay_76954333.html?from=ajax',\\n                            },\\n                            '1905': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/18/4/110_5f24b1052fed4f7fc73593a8ef27276d_con_130x130.png',\\n                                url: 'https://vip.1905.com/m/play/1429725.shtml'\\n                            },\\n                            '风行视频': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/4/110_6f6af9f99b2629e51f0b0a33cdff1d9e_con_130x130.png',\\n                                url: 'http://m.fun.tv/mplay/?mid=95719'\\n                            },\\n                            'PPTV视频': {\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/28/5/110_a455b2951227040ee62955edcfb89d72_con_130x130.png',\\n                                url: 'https://v.pptv.com/show/zVn3dJXt1xV49l4.html'\\n                            },\\n                            '龙腾': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/4.png',\\n                                url: 'LT-1ec3f6754f68586ed7f92c3e995cfca6'\\n                            },\\n                            '人人迷': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/6.png',\\n                                url: 'renrenmi-ab924e11d2d69397'\\n                            },\\n                            '五毒': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/30.png',\\n                                url: 'wuduyun-1649431307021'\\n                            },\\n                            '多多': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/49.png',\\n                                url: 'https://m3u8.cache.suoyo.cc/m3u8/202203/8/aaabd92da26774c68850a023153c80f1ae6fa9be.m3u8'\\n                            },\\n                            '融兴': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/80.png',\\n                                url: 'RongXingVR-4215645581932'\\n                            },\\n                            '雪人': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/q/133.png',\\n                                url: 'xueren-1646823072'\\n                            },\\n                            '旋风云': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/54.png',\\n                                url: 'xfy-529e6457953d545f'\\n                            },\\n                            '瑞丰资源': {\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/72.png',\\n                                url: 'https://1.ruifenglb.com/play/1644914595.m3u8'\\n                            },\\n                        };\\n                        saveFile('hiker://files/rules/cy/ceshi.json', JSON.stringify(ceshiData));\\n                    }\\n                    ceshiData = JSON.parse(request('hiker://files/rules/cy/ceshi.json'));\\n                    for (var prop in ceshiData) {\\n                        d.push({\\n                            title: prop,\\n                            img: ceshiData[prop].pic + '@Referer=',\\n                            url: $('').lazyRule((ceshiData, prop, jiexi) => {\\n                                vipUrl = ceshiData[prop].url;\\n                                urls = [\\\"video://\\\" + jiexi + vipUrl];\\n                                names = ['测试']\\n                                if (getVar('dmSwitch', '关') == '开') {\\n                                    return $.require(\\\"hiker://page/lazyToJiexi?rule=dm盒子\\\").videoX5(vipUrl, urls, names, [{ \\\"User-Agent\\\": PC_UA }]);\\n                                } else {\\n                                    return \\\"video://\\\" + jiexi + vipUrl;\\n                                }\\n                            }, ceshiData, prop, jiexi),\\n                            col_type: 'icon_4'\\n                        });\\n                    }\\n                    d.push({\\n                        title: '测试',\\n                        desc: '你还可以任意输入一个视频地址测试当前解析~',\\n                        url: $.toString((jiexi) => {\\n                            vipUrl = getVar('ceshiLink');\\n                            urls = [\\\"video://\\\" + jiexi + vipUrl];\\n                            names = ['测试']\\n                            if (getVar('dmSwitch', '关') == '开') {\\n                                return $.require(\\\"hiker://page/lazyToJiexi?rule=dm盒子\\\").videoX5(vipUrl, urls, names, [{ \\\"User-Agent\\\": PC_UA }]);\\n                            } else {\\n                                return \\\"video://\\\" + jiexi + vipUrl;\\n                            }\\n                        }, jiexi),\\n                        col_type: 'input',\\n                        extra: {\\n                            type: 'textarea',\\n                            height: -1,\\n                            onChange: \\\"putVar('ceshiLink',input)\\\",\\n                        }\\n                    }, {\\n                        title: '删除该解析',\\n                        desc: '请认真考虑~',\\n                        url: $('hiker://empty#noLoading#').lazyRule((jiexi) => {\\n                            Array.prototype.indexOf = function (val) {\\n                                for (var i = 0; i < this.length; i++) {\\n                                    if (this[i].url == val) return i;\\n                                }\\n                                return -1;\\n                            };\\n                            Array.prototype.remove = function (val) {\\n                                var index = this.indexOf(val);\\n                                if (index > -1) {\\n                                    this.splice(index, 1);\\n                                }\\n                            };\\n                            setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n                            eval('configArray=' + setFile);\\n                            configArray.remove(jiexi);\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n                            // 关闭页面并刷新前一个页面\\n                            back(true);\\n                            return \\\"toast://删除成功~\\\";\\n                        }, jiexi),\\n                        col_type: 'text_center_1'\\n                    });\\n                    setHomeResult(d);\\n                }, jiexi),\\n                col_type: 'text_1',\\n                extra: {\\n                    longClick: [{\\n                        title: '注入JS,辅助嗅探', js: $.toString((index) => {\\n                            return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + index;\\n                        }, index),\\n                    }]\\n                }\\n            });\\n            index++;\\n        });\\n    }\\n    // 正常备份——若执行到此都无异常出现的话！\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\n    eval('configArray=' + setFile);\\n    saveFile('hiker://files/rules/cy/MyParse_back.json', JSON.stringify(configArray));\\n    log('文件无异常，备份成功~');\\n} catch (e) {\\n    log('文件异常，请恢复~');\\n    // 异常不备份，请恢复\\n    showLoading('配置文件异常！！！');\\n    d.push({\\n        title: '恢复备份',\\n        desc: '如果因为一些错误，数据发生了损坏了可以尝试恢复~',\\n        url: $('#noLoading#').lazyRule(() => {\\n            setFile = readFile('hiker://files/rules/cy/MyParse_back.json');\\n            eval('configArray=' + setFile);\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n            refreshPage(true);\\n            return \\\"toast://恢复成功\\\";\\n        }),\\n        col_type: 'text_center_1'\\n    });\\n    setResult(d);\\n}\\nsetResult(d);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"调用路由\",\"path\":\"mulParse\",\"rule\":\"/*\\r\\n vipUrl:官网地址;返回值JSON格式的多线路视频地址\\r\\n调用接口：$.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl);\\r\\n */\\r\\n$.exports.mulParse = function (vipUrl, bfLink, jiexiName,headers) {\\r\\n    if (vipUrl.indexOf('douban') != -1) {\\r\\n        vipUrl = vipUrl.split('?ptag=')[0]\\r\\n    }\\r\\n    log('视频原地址：' + vipUrl);\\r\\n    var extra_length = 0;\\r\\n    if (bfLink && jiexiName) {\\r\\n        var urls = bfLink;\\r\\n        var names = jiexiName;\\r\\n        if (headers) {\\r\\n            var headers=headers;\\r\\n        }else{\\r\\n            var headers=[];\\r\\n        }\\r\\n        extra_length = bfLink.length;\\r\\n    } else {\\r\\n        var urls = [];\\r\\n        var names = [];\\r\\n        var headers=[];\\r\\n    }\\r\\n    log(\\\"多线路解析开始\\\")\\r\\n    var list = JSON.parse(readFile(\\\"hiker://files/rules/cy/MyParse.json\\\"));\\r\\n    var tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\r\\n    tagsArray.forEach(item => {\\r\\n        eval('var reg1=/' + item + '/;');\\r\\n        eval('var reg2=/' + item + '|全部/;');\\r\\n        if (vipUrl.match(reg1)) {\\r\\n            log('当前线路:' + item)\\r\\n            list.forEach(item => {\\r\\n                if (item.tags == undefined || item.tags.match(reg2)) {\\r\\n                    urls.push(\\\"video://\\\" + item.url + vipUrl);\\r\\n                    names.push(item.name);\\r\\n                    headers.push({});\\r\\n                }\\r\\n            });\\r\\n        }\\r\\n    });\\r\\n    if (urls.length == 0 || urls.length == extra_length) {\\r\\n        log('当前线路:other')\\r\\n        list.forEach(item => {\\r\\n            urls.push(\\\"video://\\\" + item.url + vipUrl);\\r\\n            names.push(item.name);\\r\\n        });\\r\\n    }\\r\\n    log(`当前启用解析：${urls.length}个`)\\r\\n    var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\r\\n    var s = request('hiker://files/rules/cy/boxSwitch.txt')\\r\\n    if (s == \\\"开\\\") {\\r\\n        var u = []\\r\\n        list.forEach(item => {\\r\\n            u.push({\\r\\n                name: item.name,\\r\\n                url: item.url + vipUrl\\r\\n            })\\r\\n        });\\r\\n        require(\\\"https://hikerfans.com/Joe/TVbox.js\\\")\\r\\n        return 推送tvbox({\\r\\n            name: \\\"配置助手推送\\\",\\r\\n            vod: [{\\r\\n                //name: \\\"默认\\\",\\r\\n                urls: u\\r\\n            }]\\r\\n        })\\r\\n    } else if (dmSwitch == 'true') {\\r\\n        return $.require(\\\"hiker://page/lazyToJiexi?rule=dm盒子\\\").videoX5(vipUrl, urls, names,headers);\\r\\n    } else {\\r\\n        return JSON.stringify({\\r\\n            urls: urls,\\r\\n            names: names,\\r\\n            headers:headers\\r\\n        });\\r\\n    }\\r\\n}\\r\\n\"},{\"col_type\":\"movie_3\",\"name\":\"断插插件\",\"path\":\"duan\",\"rule\":\"function aytmParse(vipUrl) {\\r\\n    return $.require(\\\"hiker://page/mulParse?rule=配置助手\\\").mulParse(vipUrl);\\r\\n}\\r\\n\"},{\"col_type\":\"movie_3\",\"name\":\"JS注入\",\"path\":\"jsAdd_Page\",\"rule\":\"js:\\nvar d = [];\\nindex = getParam('index');\\nvar configArray = JSON.parse(request(\\\"hiker://files/rules/cy/MyParse.json\\\"));\\nshowContent=configArray[index].js!=undefined?configArray[index].js:''\\nd.push({\\n    desc: '输入正确格式内容',\\n    col_type: 'input',\\n    extra: {\\n        titleVisible: false,\\n        defaultValue: showContent,\\n        type: 'textarea',\\n        height: -1,\\n        highlight: true,\\n        onChange: \\\"putVar('jsAdd',input)\\\",\\n        id: 'jsAdd'\\n    }\\n}, {\\n    title: '‘‘’’<small><span style=\\\"color:#6EB897\\\">1、直接书写适用于x5界面的js代码即可<br>2、两种方式:重定向播放链接和返回播放链接两种形式<br>3、具体参见帮助文档',\\n    desc:'‘‘’’<big><big><span style=\\\"color:#298A08\\\">保 存',\\n    url: $().lazyRule((index) => {\\n        jsAdd = getVar('jsAdd');\\n        var configArray = JSON.parse(request(\\\"hiker://files/rules/cy/MyParse.json\\\"));\\n        configArray[index].js=jsAdd;\\n        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\n        back(true);\\n        return \\\"toast://已保存修改\\\"\\n    },index),\\n    col_type: 'text_center_1'\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"函数\",\"path\":\"api\",\"rule\":\"$.exports.op_basic = function (i) {\\r\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\r\\n    eval('var configArray=' + setFile);\\r\\n    if (configArray[i].tags == undefined) {\\r\\n        configArray[i].tags = '全部'\\r\\n    }\\r\\n    if (input == '编辑') {\\r\\n        config = configArray[i].name + ',' + configArray[i].url + '###' + configArray[i].tags;\\r\\n        return $(config).input((i, configArray) => {\\r\\n            item = {\\r\\n                name: input.split(/,|，/)[0],\\r\\n                url: input.split(/###/)[0].split(/,|，/)[1],\\r\\n                tags: input.split(/###/)[1],\\r\\n                js: configArray[i].js\\r\\n            }\\r\\n            configArray.splice(i, 1, item);\\r\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n            refreshPage(false);\\r\\n            return \\\"toast://更新成功\\\"\\r\\n        }, i, configArray)\\r\\n    } else if (input == '移位') {\\r\\n        return $('0', '你想排第几？序号从0开始~').input((i, configArray) => {\\r\\n            if (input > configArray.length - 1) {\\r\\n                input = configArray.length - 1;\\r\\n            } else if (input < 0) {\\r\\n                input = 0;\\r\\n            }\\r\\n            temp = configArray[i];\\r\\n            if (i > input) {\\r\\n                for (let index = i; index > input; index--) {\\r\\n                    configArray[index] = configArray[index - 1];\\r\\n                }\\r\\n            } else {\\r\\n                for (let index = i; index < input; index++) {\\r\\n                    configArray[index] = configArray[index + 1];\\r\\n                }\\r\\n            }\\r\\n            configArray[input] = temp;\\r\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n            refreshPage(false);\\r\\n            return \\\"toast://移位成功\\\"\\r\\n        }, i, configArray)\\r\\n    } else {\\r\\n        configArray.splice(i, 1);\\r\\n        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\r\\n        refreshPage(false);\\r\\n        return \\\"toast://删除成功\\\"\\r\\n    }\\r\\n}\\r\\n\\r\\n$.exports.dmSettings = function (tag) {\\r\\n    switch (tag) {\\r\\n        // 函数切换\\r\\n        case 0:\\r\\n            options = ['左岸官弹', 'fc官弹', '三方扶风'];\\r\\n            return $(options, 1).select(() => {\\r\\n                curSettings = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\r\\n                curSettings.dmFrom = input;\\r\\n                saveFile('hiker://files/dm盒子/settings.json', JSON.stringify(curSettings));\\r\\n                return \\\"toast://切换来源为:\\\" + input;\\r\\n            })\\r\\n            break;\\r\\n\\r\\n        // 更改函数作用域\\r\\n        case 1:\\r\\n            options = ['global', 'other'];\\r\\n            return $(options, 1).select(() => {\\r\\n                curSettings = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\r\\n                curSettings.dmScope = input;\\r\\n                saveFile('hiker://files/dm盒子/settings.json', JSON.stringify(curSettings));\\r\\n                return \\\"toast://切换作用域为:\\\" + input;\\r\\n            })\\r\\n            break;\\r\\n        case 2:\\r\\n            fontSize = JSON.parse(readFile('hiker://files/dm盒子/settings.json')).fontSize;\\r\\n            return $(fontSize, '请输入一个合适的数字').input(() => {\\r\\n                curSettings = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\r\\n                curSettings.fontSize = input;\\r\\n                saveFile('hiker://files/dm盒子/settings.json', JSON.stringify(curSettings));\\r\\n                return \\\"toast://弹幕大小已修改为\\\" + input;\\r\\n            })\\r\\n            break;    \\r\\n        default:\\r\\n            break;\\r\\n    }\\r\\n}\\r\\n\"}],\"saved\":false,\"title\":\"配置助手\",\"version\":0,\"url\":\"hiker://empty;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_3\",\"find_rule\":\"js:(\\n() => {\\n    let d = [];\\n    d.push({title: \\\"\\\\u6559\\\\u7a0b\\\\u6587\\\\u6863\\\", url: \\\"https://www.yuque.com/chenying-k73sc/lhcvqd/bsh5e2\\\", desc: \\\"float&&100%\\\", col_type: \\\"x5_webview_single\\\"});\\n    setResult(d);\\n}\\n)()\",\"group\":\"工具\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"主页\\\",\\\"path\\\":\\\"home\\\",\\\"rule\\\":\\\"var d = [];\\\\ntry {\\\\n    addListener('onClose', () => {\\\\n        clearVar('nameArray');\\\\n        clearVar('urlArray');\\\\n        clearVar('switch');\\\\n    })\\\\n    addListener('onRefresh', () => {\\\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n        eval('configArray=' + setFile);\\\\n        clearVar('delNum');\\\\n        clearVar('delArray');\\\\n        clearVar('shareNum');\\\\n        clearVar('shareArray');\\\\n        for (let i = 0; i < configArray.length; i++) {\\\\n            clearVar('isChoose' + i);\\\\n        }\\\\n    })\\\\n    if (!fileExist('hiker://files/rules/cy/MyParse.json')) {\\\\n        configArray = [];\\\\n        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n    }\\\\n    if (!fileExist('hiker://files/rules/cy/MyParse_selection.json')) {\\\\n        tagsArray = ['qq', 'mgtv', 'bili', 'qiyi', 'youku'];\\\\n        saveFile('hiker://files/rules/cy/MyParse_selection.json', JSON.stringify(tagsArray));\\\\n    }\\\\n    if (!fileExist('hiker://files/rules/cy/dmSwitch.txt')) {\\\\n        saveFile('hiker://files/rules/cy/dmSwitch.txt', '开');\\\\n    }\\\\n    if (!fileExist('hiker://files/dm盒子/settings.json')) {\\\\n        orgSettings = JSON.stringify({\\\\n            fontSize: 25,\\\\n            dmFrom: 'par'\\\\n        });\\\\n        saveFile('hiker://files/dm盒子/settings.json', orgSettings);\\\\n    }\\\\n    d.push({\\\\n        title: '‘‘’’<big><span style=\\\\\\\"color:#6EB897\\\\\\\">添 加 解 析</span></big>',\\\\n        url: $('#noLoading#').lazyRule(() => {\\\\n            if (getVar('switch', '关') == '开') {\\\\n                for (let i = 0; i < 3; i++) {\\\\n                    deleteItem('add')\\\\n                }\\\\n                putVar('switch', '关');\\\\n            } else {\\\\n                addArray = [{\\\\n                    desc: '解析名称，一行一个',\\\\n                    col_type: 'input',\\\\n                    extra: {\\\\n                        titleVisible: false,\\\\n                        type: 'textarea',\\\\n                        height: -1,\\\\n                        highlight: true,\\\\n                        onChange: \\\\\\\"putVar('nameArray',input)\\\\\\\",\\\\n                        id: 'add'\\\\n                    }\\\\n                }, {\\\\n                    desc: '解析，一行一个',\\\\n                    col_type: 'input',\\\\n                    extra: {\\\\n                        titleVisible: false,\\\\n                        type: 'textarea',\\\\n                        height: -1,\\\\n                        highlight: true,\\\\n                        onChange: \\\\\\\"putVar('urlArray',input)\\\\\\\",\\\\n                        id: 'add'\\\\n                    }\\\\n                }, {\\\\n                    title: '保存',\\\\n                    url: $().lazyRule(() => {\\\\n                        nameArray = getVar('nameArray').split(/\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\r/);\\\\n                        urlArray = getVar('urlArray').split(/\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\r/);\\\\n                        dataLength = nameArray.length > urlArray.length ? nameArray.length : urlArray.length;\\\\n                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                        eval('configArray=' + setFile);\\\\n                        for (let i = 0; i < dataLength; i++) {\\\\n                            jiexiName = i > nameArray.length - 1 ? '未命名' : (nameArray[i] == '' ? '未命名' : nameArray[i]);\\\\n                            jiexiUrl = i > urlArray.length - 1 ? '空解析' : (urlArray[i] == '' ? '空解析' : urlArray[i]);\\\\n                            configArray.unshift({\\\\n                                name: jiexiName,\\\\n                                url: jiexiUrl,\\\\n                                tags: '全部'\\\\n                            });\\\\n                        }\\\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n                        putVar('switch', '关');\\\\n                        refreshPage(true);\\\\n                        return \\\\\\\"toast://保存成功\\\\\\\"\\\\n                    }),\\\\n                    col_type: 'text_center_1',\\\\n                    extra: {\\\\n                        id: 'add'\\\\n                    }\\\\n                }]\\\\n                addItemAfter('addFunction', addArray);\\\\n                putVar('switch', '开');\\\\n            }\\\\n            return 'toast://已切换switch为:' + getVar('switch', '开')\\\\n        }),\\\\n        desc: '简单、独立的解析工具 | 不提供解析',\\\\n        col_type: 'text_center_1',\\\\n        extra: {\\\\n            id: 'addFunction'\\\\n        }\\\\n    }, {\\\\n        col_type: 'line_blank'\\\\n    }, {\\\\n        title: '‘‘’’<font color=\\\\\\\"#6EB897\\\\\\\">说明</font>',\\\\n        url: $().lazyRule(() => {\\\\n            return $('hiker://empty').rule(() => {\\\\n                let d = [];\\\\n                d.push({\\\\n                    title: '教程文档',\\\\n                    url: 'https://www.yuque.com/chenying-k73sc/lhcvqd/bsh5e2',\\\\n                    desc: \\\\\\\"float&&100%\\\\\\\",\\\\n                    col_type: 'x5_webview_single'\\\\n                });\\\\n                setResult(d);\\\\n            });\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: \\\\\\\"切换插件\\\\\\\",\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            return $(['断插复原', '接管断插'], 2, '请选择你要执行的操作').select(() => {\\\\n                if (input == '断插复原') {\\\\n                    writeFile(\\\\\\\"hiker://files/cache/Parse_Dn.js\\\\\\\", JSON.parse(fetch(\\\\\\\"hiker://page/Parse_Dn.js?rule=MyFieldᴰⁿ\\\\\\\")).rule);\\\\n                    return \\\\\\\"toast://当前是断插模式\\\\\\\";\\\\n                } else {\\\\n                    writeFile(\\\\\\\"hiker://files/cache/Parse_Dn.js\\\\\\\", JSON.parse(fetch(\\\\\\\"hiker://page/duan?rule=配置助手\\\\\\\")).rule);\\\\n                    return \\\\\\\"toast://当前是助手已接管解析任务\\\\\\\";\\\\n                }\\\\n            })\\\\n        }),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    }, {\\\\n        title: \\\\\\\"TVbox推送:\\\\\\\" + (request('hiker://files/rules/cy/boxSwitch.txt') == \\\\\\\"开\\\\\\\" ? \\\\\\\"开\\\\\\\" : \\\\\\\"关\\\\\\\"),\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            writeFile(\\\\\\\"hiker://files/rules/cy/boxSwitch.txt\\\\\\\", (request('hiker://files/rules/cy/boxSwitch.txt') == \\\\\\\"开\\\\\\\" ? \\\\\\\"关\\\\\\\" : \\\\\\\"开\\\\\\\"))\\\\n            refreshPage()\\\\n            return \\\\\\\"toast://切换成功\\\\\\\"\\\\n        }),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    }, {\\\\n        title: '导入辅助',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            html = request('https://netcut.cn/p/a5d1c8e1ecee28d3');\\\\n            data = html.match(/{.*note_content.*updated_at.*}/)[0];\\\\n            content = JSON.parse(data).note_content;\\\\n            upData = JSON.parse(data).updated_at;\\\\n            putVar('content', content);\\\\n            confirm({\\\\n                title: '是否导入',\\\\n                content: '脚本更新日期\\\\\\\\n' + upData,\\\\n                confirm: () => {\\\\n                    return getVar('content');\\\\n                },\\\\n                cancel: () => {\\\\n                    return 'toast://已取消导入';\\\\n                }\\\\n            })\\\\n            return 'hiker://empty';\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: '解析模板',\\\\n        url: `copy://修改★魔断通用模板★\\\\nfunction (vipUrl) {\\\\n    // 正常调用-弹幕开关在配置助手里自行设置是否启用\\\\n    return $.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl);\\\\n    /*免嗅首发模式\\\\n    如果想要实现类似魔断的嗅探优先：免嗅加x5、Json多线路的形式，参考注释的示例代码添加免嗅代码（只是示例并不可用），并在最终返回的时候顺序多传入两个参数：一个是免嗅得到的播放地址，一个是这个解析或线路的名字\\\\n    var parse = \\\\\\\"https://player.dxyy.cf/WndexxX.php?url=\\\\\\\";\\\\n    bfurl = $.require(\\\\\\\"hiker://page/api?rule=API盒子\\\\\\\").parseLLQ(parse, vipUrl);\\\\n    return $.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl, bfurl, 'llq') + \\\\\\\";{User-Agent@&&Referer@}\\\\\\\";\\\\n    */\\\\n}`,\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: '源码编辑',\\\\n        url: \\\\\\\"editFile://hiker://files/rules/cy/MyParse.json\\\\\\\",\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: '导出配置',\\\\n        url: 'share://hiker://files/rules/cy/MyParse.json',\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: '云板分享',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n            secretContent = base64Encode(base64Encode(setFile));\\\\n            copy(\\\\\\\"助手解析导入口令¥¥\\\\\\\" + sharePaste(secretContent));\\\\n            return 'hiker://empty';\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: '云板导入',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            return $('', '增量导入，请放心').input(() => {\\\\n                if (input.match(/助手解析导入口令¥¥/)) {\\\\n                    link = input.split('¥¥')[1];\\\\n                    secretContent = parsePaste(link);\\\\n                    eval('remoteSetFile=' + base64Decode(base64Decode(secretContent)));\\\\n                    eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\\\n                    newArray = configArray.concat(remoteSetFile);\\\\n                    saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\\\n                    refreshPage(true);\\\\n                    return \\\\\\\"toast://导入成功\\\\\\\"\\\\n                } else {\\\\n                    return \\\\\\\"toast://口令错误\\\\\\\"\\\\n                }\\\\n            })\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        col_type: 'line_blank'\\\\n    }, {\\\\n        title: getVar('mode', '配置') == '配置' ? '““””<font color=red>配置</font>' : '配置',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            putVar('mode', '配置');\\\\n            refreshPage(true);\\\\n            return 'hiker://empty';\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: getVar('mode', '配置') == '批量工具' ? '““””<font color=red>批量工具</font>' : '批量工具',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            return $(['删除', '分享'], 2, '请选择你要执行的操作').select(() => {\\\\n                putVar('mode', '批量工具');\\\\n                if (input == '删除') {\\\\n                    putVar('type', '批量删除');\\\\n                    clearVar('delNum');\\\\n                    clearVar('delArray');\\\\n                } else {\\\\n                    putVar('type', '批量分享');\\\\n                    clearVar('shareNum');\\\\n                    clearVar('shareArray');\\\\n                }\\\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                eval('configArray=' + setFile);\\\\n                for (let i = 0; i < configArray.length; i++) {\\\\n                    clearVar('isChoose' + i);\\\\n                }\\\\n                refreshPage(true);\\\\n                return 'hiker://empty';\\\\n            })\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: getVar('mode', '配置') == '解析测试' ? '““””<font color=red>解析测试</font>' : '解析测试',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            putVar('mode', '解析测试');\\\\n            refreshPage(true);\\\\n            return 'hiker://empty';\\\\n        }),\\\\n        col_type: 'scroll_button'\\\\n    }, {\\\\n        title: request('hiker://files/rules/cy/dmSwitch.txt') == 'true' ? '弹幕:开' : '弹幕:关',\\\\n        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n            var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\\\n            if (dmSwitch == 'true') {\\\\n                saveFile('hiker://files/rules/cy/dmSwitch.txt', 'false');\\\\n            } else {\\\\n                saveFile('hiker://files/rules/cy/dmSwitch.txt', 'true');\\\\n            }\\\\n            refreshPage(true);\\\\n            return 'hiker://empty';\\\\n        }),\\\\n        col_type: 'scroll_button',\\\\n        extra: {\\\\n            longClick: [{\\\\n                title: '弹幕来源', js: $.toString(() => {\\\\n                    return $.require('hiker://page/api?rule=配置助手').dmSettings(0);\\\\n                })\\\\n            }, {\\\\n                title: '函数作用域', js: $.toString(() => {\\\\n                    return $.require('hiker://page/api?rule=配置助手').dmSettings(1);\\\\n                })\\\\n            }, {\\\\n                title: '弹幕大小', js: $.toString(() => {\\\\n                    return $.require('hiker://page/api?rule=配置助手').dmSettings(2);\\\\n                })\\\\n            }]\\\\n        }\\\\n    });\\\\n\\\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n    eval('configArray=' + setFile);\\\\n    if (getVar('mode', '配置') == '配置') {\\\\n        d.push({\\\\n            col_type: 'line_blank'\\\\n        }, {\\\\n            title: '去重除白',\\\\n            url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                eval('configArray=' + setFile);\\\\n                putVar('lastClean', configArray);\\\\n                newArray = [];\\\\n                num = 0;\\\\n                for (let i = 0; i < configArray.length; i++) {\\\\n                    if (getVar(configArray[i].url, '0') != '1' && configArray[i].url != '空解析' && configArray[i].url != undefined) {\\\\n                        newArray.push(configArray[i]);\\\\n                        putVar(configArray[i].url, '1');\\\\n                    } else {\\\\n                        num++;\\\\n                    }\\\\n                }\\\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\\\n                JSON.parse(getVar('lastClean', '[]')).forEach(item => {\\\\n                    clearVar(item.url);\\\\n                });\\\\n                refreshPage(true);\\\\n                return \\\\\\\"toast://本次去重数量为\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\" + num;\\\\n            }),\\\\n            col_type: 'scroll_button'\\\\n        }, {\\\\n            title: '占位符处理',\\\\n            url: $(['添加', '去除'], 2, '请选择你要执行的操作').select(() => {\\\\n                setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                eval('configArray=' + setFile);\\\\n                for (let i = 0; i < configArray.length; i++) {\\\\n                    if (input == '添加') {\\\\n                        if (configArray[i].url.match(/\\\\\\\\?url=/)) {\\\\n                            configArray[i].url = configArray[i].url.replace('?url=', '?placeholder=&url=');\\\\n                        }\\\\n                    } else {\\\\n                        if (configArray[i].url.match(/\\\\\\\\?placeholder=&url=/)) {\\\\n                            configArray[i].url = configArray[i].url.replace('?placeholder=&url=', '?url=');\\\\n                        }\\\\n                    }\\\\n                }\\\\n                saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n                refreshPage(true);\\\\n                return \\\\\\\"toast://处理成功\\\\\\\";\\\\n            }),\\\\n            col_type: 'scroll_button'\\\\n        }, {\\\\n            col_type: 'line_blank'\\\\n        });\\\\n        tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\\\n        tagsArray.forEach(item => {\\\\n            d.push({\\\\n                title: item,\\\\n                url: $().rule((item) => {\\\\n                    let d = [];\\\\n                    d.push({\\\\n                        title: '返回刷新，记得点我！！！',\\\\n                        url: $('#noLoading#').lazyRule(() => {\\\\n                            back(true);\\\\n                            return \\\\\\\"toast://刷新成功~\\\\\\\";\\\\n                        }),\\\\n                        col_type: 'text_1'\\\\n                    }, {\\\\n                        title: '‘‘’’<big><span style=\\\\\\\"color:#6EB897\\\\\\\">添 加 解 析</span></big>',\\\\n                        url: $('#noLoading#').lazyRule((item) => {\\\\n                            if (getVar('switch2', '关') == '开') {\\\\n                                for (let i = 0; i < 3; i++) {\\\\n                                    deleteItem('add2')\\\\n                                }\\\\n                                putVar('switch2', '关');\\\\n                            } else {\\\\n                                addArray = [{\\\\n                                    desc: '解析名称，一行一个',\\\\n                                    col_type: 'input',\\\\n                                    extra: {\\\\n                                        titleVisible: false,\\\\n                                        type: 'textarea',\\\\n                                        height: -1,\\\\n                                        highlight: true,\\\\n                                        onChange: \\\\\\\"putVar('nameArray',input)\\\\\\\",\\\\n                                        id: 'add2'\\\\n                                    }\\\\n                                }, {\\\\n                                    desc: '解析，一行一个',\\\\n                                    col_type: 'input',\\\\n                                    extra: {\\\\n                                        titleVisible: false,\\\\n                                        type: 'textarea',\\\\n                                        height: -1,\\\\n                                        highlight: true,\\\\n                                        onChange: \\\\\\\"putVar('urlArray',input)\\\\\\\",\\\\n                                        id: 'add2'\\\\n                                    }\\\\n                                }, {\\\\n                                    title: '保存',\\\\n                                    url: $().lazyRule((item) => {\\\\n                                        nameArray = getVar('nameArray').split(/\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\r/);\\\\n                                        urlArray = getVar('urlArray').split(/\\\\\\\\r\\\\\\\\n|\\\\\\\\n|\\\\\\\\r/);\\\\n                                        dataLength = nameArray.length > urlArray.length ? nameArray.length : urlArray.length;\\\\n                                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                                        eval('configArray=' + setFile);\\\\n                                        for (let i = 0; i < dataLength; i++) {\\\\n                                            jiexiName = i > nameArray.length - 1 ? '未命名' : (nameArray[i] == '' ? '未命名' : nameArray[i]);\\\\n                                            jiexiUrl = i > urlArray.length - 1 ? '空解析' : (urlArray[i] == '' ? '空解析' : urlArray[i]);\\\\n                                            configArray.unshift({\\\\n                                                name: jiexiName,\\\\n                                                url: jiexiUrl,\\\\n                                                tags: item\\\\n                                            });\\\\n                                        }\\\\n                                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n                                        putVar('switch2', '关');\\\\n                                        refreshPage(true);\\\\n                                        return \\\\\\\"toast://保存成功\\\\\\\"\\\\n                                    }, item),\\\\n                                    col_type: 'text_center_1',\\\\n                                    extra: {\\\\n                                        id: 'add2'\\\\n                                    }\\\\n                                }]\\\\n                                addItemAfter('addFunction2', addArray);\\\\n                                putVar('switch2', '开');\\\\n                            }\\\\n                            return 'toast://已切换switch为:' + getVar('switch2', '开')\\\\n                        }, item),\\\\n                        desc: '简单、无忧、独立的解析管理工具，养老专用',\\\\n                        col_type: 'text_center_1',\\\\n                        extra: {\\\\n                            id: 'addFunction2'\\\\n                        }\\\\n                    });\\\\n                    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                    eval('var configArray=' + setFile);\\\\n                    eval('var reg=/' + item + '|全部/;');\\\\n                    // 当前线路的解析排序\\\\n                    index = 0;\\\\n                    for (let i = 0; i < configArray.length; i++) {\\\\n                        if (configArray[i].tags == undefined || configArray[i].tags.match(reg)) {\\\\n                            d.push({\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + index + '</span>-<span style=\\\\\\\"color:#6EB897\\\\\\\">' + i + '</span>-' + configArray[i].name + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:#99CCFF\\\\\\\"><small>#应用:' + configArray[i].tags + '</small></span>' + (configArray[i].js != undefined && configArray[i].js != '' ? '</small></span>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\"><small>#JS</small></span>' : ''),\\\\n                                desc: configArray[i].url,\\\\n                                url: $(['编辑', '移位', '删除'], 3, '请选择你要执行的操作').select((i) => {\\\\n                                    return $.require(\\\\\\\"hiker://page/api?rule=配置助手\\\\\\\").op_basic(i);\\\\n                                }, i),\\\\n                                col_type: 'text_1',\\\\n                                extra: {\\\\n                                    longClick: [{\\\\n                                        title: '注入JS,辅助嗅探', js: $.toString((i) => {\\\\n                                            return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + i;\\\\n                                        }, i),\\\\n                                    }]\\\\n                                }\\\\n                            });\\\\n                            index++;\\\\n                        }\\\\n                    }\\\\n                    setResult(d);\\\\n                }, item),\\\\n                col_type: 'scroll_button'\\\\n            });\\\\n        });\\\\n        d.push({\\\\n            title: '➕',\\\\n            url: $('#noLoading#').lazyRule(() => {\\\\n                return $('', '请输入需要解析的标识，比如域名').input(() => {\\\\n                    tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\\\n                    tagsArray.push(input);\\\\n                    saveFile('hiker://files/rules/cy/MyParse_selection.json', JSON.stringify(tagsArray));\\\\n                    refreshPage(true);\\\\n                    return 'toast://添加线路成功~'\\\\n                })\\\\n            }),\\\\n            col_type: 'scroll_button'\\\\n        }, {\\\\n            title: '➖',\\\\n            url: $('#noLoading#').lazyRule(() => {\\\\n                tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\\\n                return $(tagsArray, 3, '请选择你要删除的线路').select((tagsArray) => {\\\\n                    Array.prototype.indexOf = function (val) {\\\\n                        for (var i = 0; i < this.length; i++) {\\\\n                            if (this[i] == val) return i;\\\\n                        }\\\\n                        return -1;\\\\n                    };\\\\n                    Array.prototype.remove = function (val) {\\\\n                        var index = this.indexOf(val);\\\\n                        if (index > -1) {\\\\n                            this.splice(index, 1);\\\\n                        }\\\\n                    };\\\\n                    tagsArray.remove(input);\\\\n                    saveFile('hiker://files/rules/cy/MyParse_selection.json', JSON.stringify(tagsArray));\\\\n                    refreshPage(true);\\\\n                    return 'toast://已移除线路~'\\\\n                }, tagsArray)\\\\n            }),\\\\n            col_type: 'scroll_button'\\\\n        });\\\\n        for (let i = 0; i < configArray.length; i++) {\\\\n            if (configArray[i].tags == undefined) {\\\\n                configArray[i].tags = '全部'\\\\n            }\\\\n            d.push({\\\\n                title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + i + '</span>-' + configArray[i].name + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:#99CCFF\\\\\\\"><small>#应用:' + configArray[i].tags + (configArray[i].js != undefined && configArray[i].js != '' ? '</small></span>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\"><small>#JS</small></span>' : ''),\\\\n                desc: configArray[i].url,\\\\n                url: $(['编辑', '移位', '删除'], 3, '请选择你要执行的操作').select((i) => {\\\\n                    return $.require(\\\\\\\"hiker://page/api?rule=配置助手\\\\\\\").op_basic(i);\\\\n                }, i),\\\\n                col_type: 'text_1',\\\\n                extra: {\\\\n                    longClick: [{\\\\n                        title: '注入JS,辅助嗅探', js: $.toString((i) => {\\\\n                            return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + i;\\\\n                        }, i),\\\\n                    }]\\\\n                }\\\\n            });\\\\n        }\\\\n    } else if (getVar('mode', '配置') == '批量工具') {\\\\n        if (getVar('type', '批量删除') == '批量删除') {\\\\n            d.push({\\\\n                title: '确认删除\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getVar('delNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n                    if (getVar('delNum', '0') == '0') {\\\\n                        return 'toast://请先选择要删除的解析！'\\\\n                    } else {\\\\n                        delArray = JSON.parse(getVar('delArray'));\\\\n                        log(delArray);\\\\n                        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                        eval('configArray=' + setFile);\\\\n                        newArray = [];\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\n                            if (!delArray.includes(i)) {\\\\n                                newArray.push(configArray[i]);\\\\n                            }\\\\n                        }\\\\n                        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(newArray));\\\\n                        delNum = getVar('delNum', '0');\\\\n                        clearVar('delNum');\\\\n                        clearVar('delArray');\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\n                            clearVar('isChoose' + i);\\\\n                        }\\\\n                        refreshPage(true);\\\\n                        return \\\\\\\"toast://共删除\\\\\\\" + delNum + '条解析';\\\\n                    }\\\\n                }),\\\\n                col_type: 'text_center_1',\\\\n                extra: {\\\\n                    id: 'delBtn'\\\\n                }\\\\n            });\\\\n            index = 0;\\\\n            configArray.forEach(item => {\\\\n                d.push({\\\\n                    title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name + (configArray[index].js != undefined && configArray[index].js != '' ? '</small></span>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\"><small>#JS</small></span>' : ''),\\\\n                    desc: item.url,\\\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\\\n                        if (getVar('isChoose' + index, 'no') == 'yes') {\\\\n                            log(index);\\\\n                            delArray = JSON.parse(getVar('delArray', '[]'));\\\\n                            delNum = Number(getVar('delNum', '0')) - 1;\\\\n                            delArray.pop(index);\\\\n                            putVar('delArray', delArray);\\\\n                            putVar('delNum', delNum);\\\\n                            updateItem(index + '', {\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name,\\\\n                            });\\\\n                            updateItem('delBtn', {\\\\n                                title: '确认删除\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getVar('delNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析'\\\\n                            });\\\\n                            putVar('isChoose' + index, 'no');\\\\n                            return 'hiker://empty';\\\\n                        } else {\\\\n                            delArray = JSON.parse(getVar('delArray', '[]'));\\\\n                            delNum = Number(getVar('delNum', '0')) + 1;\\\\n                            delArray.push(index);\\\\n                            log(delArray);\\\\n                            putVar('delArray', delArray);\\\\n                            putVar('delNum', delNum);\\\\n                            updateItem(index + '', {\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + index + '-' + item.name + '</span>',\\\\n                            });\\\\n                            updateItem('delBtn', {\\\\n                                title: '确认删除\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getVar('delNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析'\\\\n                            });\\\\n                            putVar('isChoose' + index, 'yes');\\\\n                            return 'hiker://empty';\\\\n                        }\\\\n                    }, index, item),\\\\n                    col_type: 'text_1',\\\\n                    extra: {\\\\n                        id: index + '',\\\\n                        longClick: [{\\\\n                            title: '注入JS,辅助嗅探', js: $.toString((index) => {\\\\n                                return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + index;\\\\n                            }, index),\\\\n                        }]\\\\n                    }\\\\n                });\\\\n                index++;\\\\n            });\\\\n        } else {\\\\n            d.push({\\\\n                title: '确认分享\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getVar('shareNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\n                url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n                    if (getVar('shareNum', '0') == '0') {\\\\n                        return 'toast://请先选择要分享的解析！'\\\\n                    } else {\\\\n                        shareArray = JSON.parse(getVar('shareArray'));\\\\n                        log(shareArray);\\\\n                        eval('configArray=' + readFile('hiker://files/rules/cy/MyParse.json'));\\\\n                        shareFile = [];\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\n                            if (shareArray.includes(i)) {\\\\n                                shareFile.push(configArray[i]);\\\\n                            }\\\\n                        }\\\\n                        secretContent = base64Encode(base64Encode(JSON.stringify(shareFile)));\\\\n                        copy(\\\\\\\"助手解析导入口令¥¥\\\\\\\" + sharePaste(secretContent));\\\\n                        clearVar('shareNum');\\\\n                        clearVar('shareArray');\\\\n                        for (let i = 0; i < configArray.length; i++) {\\\\n                            clearVar('isChoose' + i);\\\\n                        }\\\\n                        refreshPage(true);\\\\n                        return \\\\\\\"toast://分享成功\\\\\\\"\\\\n                    }\\\\n                }),\\\\n                col_type: 'text_center_1',\\\\n                extra: {\\\\n                    id: 'shareBtn'\\\\n                }\\\\n            });\\\\n            index = 0;\\\\n            configArray.forEach(item => {\\\\n                d.push({\\\\n                    title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name + (configArray[index].js != undefined && configArray[index].js != '' ? '</small></span>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\"><small>#JS</small></span>' : ''),\\\\n                    desc: item.url,\\\\n                    url: $('hiker://empty#noLoading#').lazyRule((index, item) => {\\\\n                        if (getVar('isChoose' + index, 'no') == 'yes') {\\\\n                            log(index);\\\\n                            shareArray = JSON.parse(getVar('shareArray', '[]'));\\\\n                            shareNum = Number(getVar('shareNum', '0')) - 1;\\\\n                            shareArray.pop(index);\\\\n                            putVar('shareArray', shareArray);\\\\n                            putVar('shareNum', shareNum);\\\\n                            updateItem(index + '', {\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:#6EB897\\\\\\\">' + index + '</span>-' + item.name,\\\\n                            });\\\\n                            updateItem('shareBtn', {\\\\n                                title: '确认分享\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getVar('shareNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\n                            });\\\\n                            putVar('isChoose' + index, 'no');\\\\n                            return 'hiker://empty';\\\\n                        } else {\\\\n                            shareArray = JSON.parse(getVar('shareArray', '[]'));\\\\n                            shareNum = Number(getVar('shareNum', '0')) + 1;\\\\n                            shareArray.push(index);\\\\n                            log(shareArray);\\\\n                            putVar('shareArray', shareArray);\\\\n                            putVar('shareNum', shareNum);\\\\n                            updateItem(index + '', {\\\\n                                title: '‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + index + '-' + item.name + '</span>',\\\\n                            });\\\\n                            updateItem('shareBtn', {\\\\n                                title: '确认分享\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\">' + getVar('shareNum', '0') + '</span>\\\\\\\\t\\\\\\\\t\\\\\\\\t条解析',\\\\n                            });\\\\n                            putVar('isChoose' + index, 'yes');\\\\n                            return 'hiker://empty';\\\\n                        }\\\\n                    }, index, item),\\\\n                    col_type: 'text_1',\\\\n                    extra: {\\\\n                        id: index + '',\\\\n                        longClick: [{\\\\n                            title: '注入JS,辅助嗅探', js: $.toString((index) => {\\\\n                                return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + index;\\\\n                            }, index),\\\\n                        }]\\\\n                    }\\\\n                });\\\\n                index++;\\\\n            });\\\\n        }\\\\n    } else if (getVar('mode', '配置') == '解析测试') {\\\\n        setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n        eval('configArray=' + setFile);\\\\n        index = 0;\\\\n        configArray.forEach(item => {\\\\n            jiexi = item.url;\\\\n            d.push({\\\\n                title: item.name + (configArray[index].js != undefined && configArray[index].js != '' ? '</small></span>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<span style=\\\\\\\"color:red\\\\\\\"><small>#JS</small></span>' : '') + '\\\\\\\\t\\\\\\\\t\\\\\\\\t‘‘’’<font color=\\\\\\\"#6EB897\\\\\\\"><small>➮前往测试</small></font>',\\\\n                desc: item.url,\\\\n                url: $().rule((jiexi) => {\\\\n                    let d = [];\\\\n                    d.push({\\\\n                        title: '编辑测试链接',\\\\n                        url: 'editFile://hiker://files/rules/cy/ceshi.json',\\\\n                        col_type: 'text_2'\\\\n                    }, {\\\\n                        title: '弹幕:' + getVar('dmSwitch', '关'),\\\\n                        url: $('hiker://empty#noLoading#').lazyRule(() => {\\\\n                            if (getVar('dmSwitch', '关') == '关') {\\\\n                                putVar('dmSwitch', '开');\\\\n                            } else {\\\\n                                putVar('dmSwitch', '关');\\\\n                            }\\\\n                            updateItem('dmSwitch', {\\\\n                                title: '弹幕:' + getVar('dmSwitch', '关'),\\\\n                            });\\\\n                            return 'hiker://empty';\\\\n                        }),\\\\n                        col_type: 'text_2',\\\\n                        extra: {\\\\n                            id: 'dmSwitch'\\\\n                        }\\\\n                    });\\\\n                    if (!fileExist('hiker://files/rules/cy/ceshi.json')) {\\\\n                        ceshiData = {\\\\n                            '腾讯视频': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/3/106_3a0d212e17cb95e232ffe155460385cb_con_130x130.png',\\\\n                                url: 'https://v.qq.com/x/cover/mzc00200rmpaf40/n0036l4tntc.html'\\\\n                            },\\\\n                            '优酷': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/9/110_8ff06e0c237760cd57d2508fd98c8414_con_130x130.png',\\\\n                                url: 'https://v.youku.com/v_show/id_XNDc0MDE1NTk1Mg==.html'\\\\n                            },\\\\n                            '爱奇艺': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/09/8/110_901f2ef37af2fea25e5d9648f551ce31_con_130x130.png',\\\\n                                url: 'http://www.iqiyi.com/v_2ga8zts86ys.html'\\\\n                            },\\\\n                            '芒果TV': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/6/110_1834d296aa5b5666a7d94b1e3479ae64_con_130x130.png',\\\\n                                url: 'http://www.mgtv.com/b/349253/10424300.html'\\\\n                            },\\\\n                            '哔哩哔哩': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/4/110_8e2e3d88c45025b380e69817d6fb53b1_con_130x130.png',\\\\n                                url: 'https://m.bilibili.com/bangumi/play/ep428993'\\\\n                            },\\\\n                            '搜狐视频': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/9/110_532a51f8431efc377808c1ffff2da36f_con_130x130.png',\\\\n                                url: 'https://m.tv.sohu.com/v7329441.shtml',\\\\n                            },\\\\n                            '西瓜视频': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/27/5/110_a86265882ed18c6190566e9ea25f9698_con_130x130.png',\\\\n                                url: 'https://www.ixigua.com/6699356792905794055'\\\\n                            },\\\\n                            '乐视': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/15/8/2_35b5d4373f4bcba28f39486e4f1164d9_con_130x130.png',\\\\n                                url: 'https://m.le.com/vplay_76954333.html?from=ajax',\\\\n                            },\\\\n                            '1905': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/18/4/110_5f24b1052fed4f7fc73593a8ef27276d_con_130x130.png',\\\\n                                url: 'https://vip.1905.com/m/play/1429725.shtml'\\\\n                            },\\\\n                            '风行视频': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/16/4/110_6f6af9f99b2629e51f0b0a33cdff1d9e_con_130x130.png',\\\\n                                url: 'http://m.fun.tv/mplay/?mid=95719'\\\\n                            },\\\\n                            'PPTV视频': {\\\\n                                pic: 'https://android-artworks.25pp.com/fs08/2021/09/28/5/110_a455b2951227040ee62955edcfb89d72_con_130x130.png',\\\\n                                url: 'https://v.pptv.com/show/zVn3dJXt1xV49l4.html'\\\\n                            },\\\\n                            '龙腾': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/4.png',\\\\n                                url: 'LT-1ec3f6754f68586ed7f92c3e995cfca6'\\\\n                            },\\\\n                            '人人迷': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/6.png',\\\\n                                url: 'renrenmi-ab924e11d2d69397'\\\\n                            },\\\\n                            '五毒': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/30.png',\\\\n                                url: 'wuduyun-1649431307021'\\\\n                            },\\\\n                            '多多': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/49.png',\\\\n                                url: 'https://m3u8.cache.suoyo.cc/m3u8/202203/8/aaabd92da26774c68850a023153c80f1ae6fa9be.m3u8'\\\\n                            },\\\\n                            '融兴': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/80.png',\\\\n                                url: 'RongXingVR-4215645581932'\\\\n                            },\\\\n                            '雪人': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/q/133.png',\\\\n                                url: 'xueren-1646823072'\\\\n                            },\\\\n                            '旋风云': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/54.png',\\\\n                                url: 'xfy-529e6457953d545f'\\\\n                            },\\\\n                            '瑞丰资源': {\\\\n                                pic: 'https://lanmeiguojiang.com/tubiao/ke/72.png',\\\\n                                url: 'https://1.ruifenglb.com/play/1644914595.m3u8'\\\\n                            },\\\\n                        };\\\\n                        saveFile('hiker://files/rules/cy/ceshi.json', JSON.stringify(ceshiData));\\\\n                    }\\\\n                    ceshiData = JSON.parse(request('hiker://files/rules/cy/ceshi.json'));\\\\n                    for (var prop in ceshiData) {\\\\n                        d.push({\\\\n                            title: prop,\\\\n                            img: ceshiData[prop].pic + '@Referer=',\\\\n                            url: $('').lazyRule((ceshiData, prop, jiexi) => {\\\\n                                vipUrl = ceshiData[prop].url;\\\\n                                urls = [\\\\\\\"video://\\\\\\\" + jiexi + vipUrl];\\\\n                                names = ['测试']\\\\n                                if (getVar('dmSwitch', '关') == '开') {\\\\n                                    return $.require(\\\\\\\"hiker://page/lazyToJiexi?rule=dm盒子\\\\\\\").videoX5(vipUrl, urls, names, [{ \\\\\\\"User-Agent\\\\\\\": PC_UA }]);\\\\n                                } else {\\\\n                                    return \\\\\\\"video://\\\\\\\" + jiexi + vipUrl;\\\\n                                }\\\\n                            }, ceshiData, prop, jiexi),\\\\n                            col_type: 'icon_4'\\\\n                        });\\\\n                    }\\\\n                    d.push({\\\\n                        title: '测试',\\\\n                        desc: '你还可以任意输入一个视频地址测试当前解析~',\\\\n                        url: $.toString((jiexi) => {\\\\n                            vipUrl = getVar('ceshiLink');\\\\n                            urls = [\\\\\\\"video://\\\\\\\" + jiexi + vipUrl];\\\\n                            names = ['测试']\\\\n                            if (getVar('dmSwitch', '关') == '开') {\\\\n                                return $.require(\\\\\\\"hiker://page/lazyToJiexi?rule=dm盒子\\\\\\\").videoX5(vipUrl, urls, names, [{ \\\\\\\"User-Agent\\\\\\\": PC_UA }]);\\\\n                            } else {\\\\n                                return \\\\\\\"video://\\\\\\\" + jiexi + vipUrl;\\\\n                            }\\\\n                        }, jiexi),\\\\n                        col_type: 'input',\\\\n                        extra: {\\\\n                            type: 'textarea',\\\\n                            height: -1,\\\\n                            onChange: \\\\\\\"putVar('ceshiLink',input)\\\\\\\",\\\\n                        }\\\\n                    }, {\\\\n                        title: '删除该解析',\\\\n                        desc: '请认真考虑~',\\\\n                        url: $('hiker://empty#noLoading#').lazyRule((jiexi) => {\\\\n                            Array.prototype.indexOf = function (val) {\\\\n                                for (var i = 0; i < this.length; i++) {\\\\n                                    if (this[i].url == val) return i;\\\\n                                }\\\\n                                return -1;\\\\n                            };\\\\n                            Array.prototype.remove = function (val) {\\\\n                                var index = this.indexOf(val);\\\\n                                if (index > -1) {\\\\n                                    this.splice(index, 1);\\\\n                                }\\\\n                            };\\\\n                            setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n                            eval('configArray=' + setFile);\\\\n                            configArray.remove(jiexi);\\\\n                            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n                            // 关闭页面并刷新前一个页面\\\\n                            back(true);\\\\n                            return \\\\\\\"toast://删除成功~\\\\\\\";\\\\n                        }, jiexi),\\\\n                        col_type: 'text_center_1'\\\\n                    });\\\\n                    setHomeResult(d);\\\\n                }, jiexi),\\\\n                col_type: 'text_1',\\\\n                extra: {\\\\n                    longClick: [{\\\\n                        title: '注入JS,辅助嗅探', js: $.toString((index) => {\\\\n                            return 'hiker://page/jsAdd_Page?rule=配置助手&index=' + index;\\\\n                        }, index),\\\\n                    }]\\\\n                }\\\\n            });\\\\n            index++;\\\\n        });\\\\n    }\\\\n    // 正常备份——若执行到此都无异常出现的话！\\\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\n    eval('configArray=' + setFile);\\\\n    saveFile('hiker://files/rules/cy/MyParse_back.json', JSON.stringify(configArray));\\\\n    log('文件无异常，备份成功~');\\\\n} catch (e) {\\\\n    log('文件异常，请恢复~');\\\\n    // 异常不备份，请恢复\\\\n    showLoading('配置文件异常！！！');\\\\n    d.push({\\\\n        title: '恢复备份',\\\\n        desc: '如果因为一些错误，数据发生了损坏了可以尝试恢复~',\\\\n        url: $('#noLoading#').lazyRule(() => {\\\\n            setFile = readFile('hiker://files/rules/cy/MyParse_back.json');\\\\n            eval('configArray=' + setFile);\\\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n            refreshPage(true);\\\\n            return \\\\\\\"toast://恢复成功\\\\\\\";\\\\n        }),\\\\n        col_type: 'text_center_1'\\\\n    });\\\\n    setResult(d);\\\\n}\\\\nsetResult(d);\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"调用路由\\\",\\\"path\\\":\\\"mulParse\\\",\\\"rule\\\":\\\"/*\\\\r\\\\n vipUrl:官网地址;返回值JSON格式的多线路视频地址\\\\r\\\\n调用接口：$.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl);\\\\r\\\\n */\\\\r\\\\n$.exports.mulParse = function (vipUrl, bfLink, jiexiName,headers) {\\\\r\\\\n    if (vipUrl.indexOf('douban') != -1) {\\\\r\\\\n        vipUrl = vipUrl.split('?ptag=')[0]\\\\r\\\\n    }\\\\r\\\\n    log('视频原地址：' + vipUrl);\\\\r\\\\n    var extra_length = 0;\\\\r\\\\n    if (bfLink && jiexiName) {\\\\r\\\\n        var urls = bfLink;\\\\r\\\\n        var names = jiexiName;\\\\r\\\\n        if (headers) {\\\\r\\\\n            var headers=headers;\\\\r\\\\n        }else{\\\\r\\\\n            var headers=[];\\\\r\\\\n        }\\\\r\\\\n        extra_length = bfLink.length;\\\\r\\\\n    } else {\\\\r\\\\n        var urls = [];\\\\r\\\\n        var names = [];\\\\r\\\\n        var headers=[];\\\\r\\\\n    }\\\\r\\\\n    log(\\\\\\\"多线路解析开始\\\\\\\")\\\\r\\\\n    var list = JSON.parse(readFile(\\\\\\\"hiker://files/rules/cy/MyParse.json\\\\\\\"));\\\\r\\\\n    var tagsArray = JSON.parse(request('hiker://files/rules/cy/MyParse_selection.json'));\\\\r\\\\n    tagsArray.forEach(item => {\\\\r\\\\n        eval('var reg1=/' + item + '/;');\\\\r\\\\n        eval('var reg2=/' + item + '|全部/;');\\\\r\\\\n        if (vipUrl.match(reg1)) {\\\\r\\\\n            log('当前线路:' + item)\\\\r\\\\n            list.forEach(item => {\\\\r\\\\n                if (item.tags == undefined || item.tags.match(reg2)) {\\\\r\\\\n                    urls.push(\\\\\\\"video://\\\\\\\" + item.url + vipUrl);\\\\r\\\\n                    names.push(item.name);\\\\r\\\\n                    headers.push({});\\\\r\\\\n                }\\\\r\\\\n            });\\\\r\\\\n        }\\\\r\\\\n    });\\\\r\\\\n    if (urls.length == 0 || urls.length == extra_length) {\\\\r\\\\n        log('当前线路:other')\\\\r\\\\n        list.forEach(item => {\\\\r\\\\n            urls.push(\\\\\\\"video://\\\\\\\" + item.url + vipUrl);\\\\r\\\\n            names.push(item.name);\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n    log(`当前启用解析：${urls.length}个`)\\\\r\\\\n    var dmSwitch = request('hiker://files/rules/cy/dmSwitch.txt');\\\\r\\\\n    var s = request('hiker://files/rules/cy/boxSwitch.txt')\\\\r\\\\n    if (s == \\\\\\\"开\\\\\\\") {\\\\r\\\\n        var u = []\\\\r\\\\n        list.forEach(item => {\\\\r\\\\n            u.push({\\\\r\\\\n                name: item.name,\\\\r\\\\n                url: item.url + vipUrl\\\\r\\\\n            })\\\\r\\\\n        });\\\\r\\\\n        require(\\\\\\\"https://hikerfans.com/Joe/TVbox.js\\\\\\\")\\\\r\\\\n        return 推送tvbox({\\\\r\\\\n            name: \\\\\\\"配置助手推送\\\\\\\",\\\\r\\\\n            vod: [{\\\\r\\\\n                //name: \\\\\\\"默认\\\\\\\",\\\\r\\\\n                urls: u\\\\r\\\\n            }]\\\\r\\\\n        })\\\\r\\\\n    } else if (dmSwitch == 'true') {\\\\r\\\\n        return $.require(\\\\\\\"hiker://page/lazyToJiexi?rule=dm盒子\\\\\\\").videoX5(vipUrl, urls, names,headers);\\\\r\\\\n    } else {\\\\r\\\\n        return JSON.stringify({\\\\r\\\\n            urls: urls,\\\\r\\\\n            names: names,\\\\r\\\\n            headers:headers\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"断插插件\\\",\\\"path\\\":\\\"duan\\\",\\\"rule\\\":\\\"function aytmParse(vipUrl) {\\\\r\\\\n    return $.require(\\\\\\\"hiker://page/mulParse?rule=配置助手\\\\\\\").mulParse(vipUrl);\\\\r\\\\n}\\\\r\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"JS注入\\\",\\\"path\\\":\\\"jsAdd_Page\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nindex = getParam('index');\\\\nvar configArray = JSON.parse(request(\\\\\\\"hiker://files/rules/cy/MyParse.json\\\\\\\"));\\\\nshowContent=configArray[index].js!=undefined?configArray[index].js:''\\\\nd.push({\\\\n    desc: '输入正确格式内容',\\\\n    col_type: 'input',\\\\n    extra: {\\\\n        titleVisible: false,\\\\n        defaultValue: showContent,\\\\n        type: 'textarea',\\\\n        height: -1,\\\\n        highlight: true,\\\\n        onChange: \\\\\\\"putVar('jsAdd',input)\\\\\\\",\\\\n        id: 'jsAdd'\\\\n    }\\\\n}, {\\\\n    title: '‘‘’’<small><span style=\\\\\\\"color:#6EB897\\\\\\\">1、直接书写适用于x5界面的js代码即可<br>2、两种方式:重定向播放链接和返回播放链接两种形式<br>3、具体参见帮助文档',\\\\n    desc:'‘‘’’<big><big><span style=\\\\\\\"color:#298A08\\\\\\\">保 存',\\\\n    url: $().lazyRule((index) => {\\\\n        jsAdd = getVar('jsAdd');\\\\n        var configArray = JSON.parse(request(\\\\\\\"hiker://files/rules/cy/MyParse.json\\\\\\\"));\\\\n        configArray[index].js=jsAdd;\\\\n        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\n        back(true);\\\\n        return \\\\\\\"toast://已保存修改\\\\\\\"\\\\n    },index),\\\\n    col_type: 'text_center_1'\\\\n});\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"函数\\\",\\\"path\\\":\\\"api\\\",\\\"rule\\\":\\\"$.exports.op_basic = function (i) {\\\\r\\\\n    setFile = readFile('hiker://files/rules/cy/MyParse.json');\\\\r\\\\n    eval('var configArray=' + setFile);\\\\r\\\\n    if (configArray[i].tags == undefined) {\\\\r\\\\n        configArray[i].tags = '全部'\\\\r\\\\n    }\\\\r\\\\n    if (input == '编辑') {\\\\r\\\\n        config = configArray[i].name + ',' + configArray[i].url + '###' + configArray[i].tags;\\\\r\\\\n        return $(config).input((i, configArray) => {\\\\r\\\\n            item = {\\\\r\\\\n                name: input.split(/,|，/)[0],\\\\r\\\\n                url: input.split(/###/)[0].split(/,|，/)[1],\\\\r\\\\n                tags: input.split(/###/)[1],\\\\r\\\\n                js: configArray[i].js\\\\r\\\\n            }\\\\r\\\\n            configArray.splice(i, 1, item);\\\\r\\\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n            refreshPage(false);\\\\r\\\\n            return \\\\\\\"toast://更新成功\\\\\\\"\\\\r\\\\n        }, i, configArray)\\\\r\\\\n    } else if (input == '移位') {\\\\r\\\\n        return $('0', '你想排第几？序号从0开始~').input((i, configArray) => {\\\\r\\\\n            if (input > configArray.length - 1) {\\\\r\\\\n                input = configArray.length - 1;\\\\r\\\\n            } else if (input < 0) {\\\\r\\\\n                input = 0;\\\\r\\\\n            }\\\\r\\\\n            temp = configArray[i];\\\\r\\\\n            if (i > input) {\\\\r\\\\n                for (let index = i; index > input; index--) {\\\\r\\\\n                    configArray[index] = configArray[index - 1];\\\\r\\\\n                }\\\\r\\\\n            } else {\\\\r\\\\n                for (let index = i; index < input; index++) {\\\\r\\\\n                    configArray[index] = configArray[index + 1];\\\\r\\\\n                }\\\\r\\\\n            }\\\\r\\\\n            configArray[input] = temp;\\\\r\\\\n            saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n            refreshPage(false);\\\\r\\\\n            return \\\\\\\"toast://移位成功\\\\\\\"\\\\r\\\\n        }, i, configArray)\\\\r\\\\n    } else {\\\\r\\\\n        configArray.splice(i, 1);\\\\r\\\\n        saveFile('hiker://files/rules/cy/MyParse.json', JSON.stringify(configArray));\\\\r\\\\n        refreshPage(false);\\\\r\\\\n        return \\\\\\\"toast://删除成功\\\\\\\"\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\\r\\\\n$.exports.dmSettings = function (tag) {\\\\r\\\\n    switch (tag) {\\\\r\\\\n        // 函数切换\\\\r\\\\n        case 0:\\\\r\\\\n            options = ['左岸官弹', 'fc官弹', '三方扶风'];\\\\r\\\\n            return $(options, 1).select(() => {\\\\r\\\\n                curSettings = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\\\r\\\\n                curSettings.dmFrom = input;\\\\r\\\\n                saveFile('hiker://files/dm盒子/settings.json', JSON.stringify(curSettings));\\\\r\\\\n                return \\\\\\\"toast://切换来源为:\\\\\\\" + input;\\\\r\\\\n            })\\\\r\\\\n            break;\\\\r\\\\n\\\\r\\\\n        // 更改函数作用域\\\\r\\\\n        case 1:\\\\r\\\\n            options = ['global', 'other'];\\\\r\\\\n            return $(options, 1).select(() => {\\\\r\\\\n                curSettings = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\\\r\\\\n                curSettings.dmScope = input;\\\\r\\\\n                saveFile('hiker://files/dm盒子/settings.json', JSON.stringify(curSettings));\\\\r\\\\n                return \\\\\\\"toast://切换作用域为:\\\\\\\" + input;\\\\r\\\\n            })\\\\r\\\\n            break;\\\\r\\\\n        case 2:\\\\r\\\\n            fontSize = JSON.parse(readFile('hiker://files/dm盒子/settings.json')).fontSize;\\\\r\\\\n            return $(fontSize, '请输入一个合适的数字').input(() => {\\\\r\\\\n                curSettings = JSON.parse(readFile('hiker://files/dm盒子/settings.json'));\\\\r\\\\n                curSettings.fontSize = input;\\\\r\\\\n                saveFile('hiker://files/dm盒子/settings.json', JSON.stringify(curSettings));\\\\r\\\\n                return \\\\\\\"toast://弹幕大小已修改为\\\\\\\" + input;\\\\r\\\\n            })\\\\r\\\\n            break;    \\\\r\\\\n        default:\\\\r\\\\n            break;\\\\r\\\\n    }\\\\r\\\\n}\\\\r\\\\n\\\"}]\"}","title":"说明"}