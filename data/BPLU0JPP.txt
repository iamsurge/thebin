using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Splicer;
using Splicer.Timeline;
using Splicer.Renderer;
using System.IO;
using System.Diagnostics;

namespace CSCI4700_CaptureEnv.VideoStitcher3 {
    class VideoStitcher {
        private int numberOfVideos;
        private List<string> videos;
        private string videoDir = "";
        private string outputPath = "";
        private string outputFilename = "";

    /// /////////////////////////////////////////////////

        private string video1 = "video1.mp4";
        private string video2 = "video2.mp4";

        private string video_mod1 = "mod_video1.mp4";
        private string video_mod2 = "mod_video2.mp4";

        public VideoStitcher (List<string> video_names, string outputFName, string inputFold, string outputFold) {
            videos = video_names;
            outputFilename = outputFName;
            videoDir = inputFold;
            outputPath = outputFold;
            numberOfVideos = video_names.Count;
        }

        public List<string> Videos {
            get { return videos; }
            set { videos = value; }
        }

        public int NumberOfVideos {
            get { return numberOfVideos; }
            set { numberOfVideos = value; }
        }

        public string VideoDir {
            get { return videoDir; }
            set { videoDir = value; }
        }

        public string OutputPath {
            get { return outputPath; }
            set { outputPath = value; }
        }

        private void StartFmmpegProcess(string fn, string args) {
            ProcessStartInfo startInfo = new ProcessStartInfo();
            startInfo.CreateNoWindow = false;
            startInfo.UseShellExecute = false;
            startInfo.RedirectStandardOutput = true;
            startInfo.FileName = fn;

            startInfo.Arguments = args;
            try {
                using ( Process proc = Process.Start(startInfo) ) {
                    while ( !proc.StandardOutput.EndOfStream ) {
                        string line = proc.StandardOutput.ReadLine();
                        Debug.WriteLine(line);
                    }

                    proc.WaitForExit();
                }
            } catch ( Exception ex ) {
                Debug.WriteLine(ex.Message);
            }
        }

        private void resizeVideo (int index, ref string video, string height, string width) {
            StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video + " -vf scale=" + height + ":" + width + " " + videoDir + "mod_" + video);
            video = "mod_" + video;
        }

        private void changeFramerate (ref string video, string fps) {
            StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video_mod1 + " -filter:v fps=30 " + videoDir + "30_" + video_mod1);
        }

        private void Layout_2() {
            for(int i = 0; i < numberOfVideos; i++ ) {
                string video = videos[i];
                resizeVideo(i, ref video, "960", "-2");
                changeFramerate(ref video, "30");
            }
                


            // Resize both videos to lower resolutions
            //StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video1 + " -vf scale=960:-2 " + videoDir + video_mod1);
            //StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video2 + " -vf scale=960:-2 " + videoDir + video_mod2);

            // Change framerate to 30fps
            StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video_mod1 + " -filter:v fps=30 " + videoDir + "30_" + video_mod1);
            StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video_mod2 + " -filter:v fps=30 " + videoDir + "30_" + video_mod2);

            // Delete additional files
            File.Delete(videoDir + video_mod1);
            File.Delete(videoDir + video_mod2);

            video_mod1 = "30_" + video_mod1;
            video_mod2 = "30_" + video_mod2;

            // Generate the stitched up .mp4
            StartFmmpegProcess(@"C:\Users\calex\Downloads\CSCI4700_CaptureEnv-master\ffmpeg.exe", @"-i " + videoDir + video_mod1 + " -i " + videoDir + video_mod2 + @" -filter_complex hstack=inputs=2 -preset veryfast " + outputPath);

            // Delete additional files
            File.Delete(videoDir + video_mod1);
            File.Delete(videoDir + video_mod2);
        }

        private void Layout_3() {

        }

        private void Layout_4 () {

        }

        private void Layout_5 () {

        }

        public void StitchVideos () {
            if ( numberOfVideos == 0 || string.IsNullOrEmpty(videoDir) || string.IsNullOrEmpty(outputPath) || string.IsNullOrEmpty(outputFilename) )
                return;

            switch ( numberOfVideos ) {
                case 2:
                    Layout_2();
                break;

                case 3:
                    Layout_3();
                break;

                case 4:
                    Layout_4();
                break;

                case 5:
                    Layout_5();
                break;
            }

        }

        public string Test () {
            return "CIAO CUMETRE";
        }
    }
}
