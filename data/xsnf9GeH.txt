// Question 1
// Write a single statement to create an Vector object named stuff. This object should use the generic type parameter Number. ...
Vector<Number> list = new Vector<Number>();

// Question 2
// Write a single statement to create an HashMap object named list. This object should use the generic type parameters Short (key) and String (value). ...
HashMap<Short, String> map = new HashMap<Short, String>();

// Question 3
// Define a class/static method named toStringList. This method should take an array of Strings as a parameter and return a List of Strings. Each element in the array should be added to the list before it is returned. ...
public <T> List<T> toStringList(T[] array) {
    List<T> res = new ArrayList<T>();
    for (T v: array) res.add(v);
    return res;
} 

// Question 4
// Define a generic class/static method named swap. The method should take 3 parameters, an array of the parametrised type and two integers. The positions of the elements in the indexes represented by the parameters should be swapped. ...
public static <T> T[] swap(T[] array, int a, int b) {
    T tmp = array[a];
    array[a] = array[b];
    array[b] = tmp;
    return array;
}

// Question 5
// Modify the Queue interface so that this interfaces uses a generic type parameter instead of int. ...
interface Queue<T> {
  public void enqueue(T element);
  public T dequeue();
  public T front();
  public int size();
  public boolean isEmpty();
}

// Question 6
//  Modify the class so that this class uses a generic type parameter instead of Object. ...
class GenericExample<T> {
  private T element;
  public GenericExample(T p){
      this.element = p;
  }
  public T getElement(){
      return this.element;
  }
  public void setElement(T p){
    this.element = p;
  }
}

