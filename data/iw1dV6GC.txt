海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥豆瓣电影 Top250@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"js:\\nfunction getDoubanRes(url) {\\n    if (url.indexOf('apikey') === -1) {\\n        url += (url.indexOf('?') === -1 ? '?' : '&') + \\\"apikey=0dad551ec0f84ed02907ff5c42e8ec70\\\"\\n    }\\n    let s = fetch(url, {\\n        headers: {\\n            \\\"User-Agent\\\": \\\"Rexxar-Core/0.1.3 api-client/1 com.douban.frodo/7.9.0.beta2(215) Android/25 product/TAS-AL00 vendor/HUAWEI model/TAS-AL00  rom/android  network/wifi  platform/mobile com.douban.frodo/7.9.0.beta2(215) Rexxar/1.2.151  platform/mobile 1.2.151\\\"\\n        },\\n        method: 'POST',\\n        body: 'host=frodo.douban.com'\\n    });\\n    return JSON.parse(s);\\n}\\nlet type = getParam('type', ''),\\n    id = getParam('id', ''),\\n    title = getParam('title', '');\\nlet res = getDoubanRes(\\\"https://frodo.douban.com/api/v2/\\\" + type + \\\"/\\\" + id);\\nlet update = \\\"\\\";\\nif (title == '') {\\n    let length = res.vendors.length;\\n    update += length > 0 ? '共' + length + '个片源' : '暂无片源';\\n    if (length > 0) {\\n        let e = res.vendors[0];\\n        update += e.episodes_info ? \\\"|\\\" + e.episodes_info : \\\"\\\";\\n    }\\n} else {\\n    for (let e of res.vendors) {\\n        if (e.title == title) {\\n            update += e.episodes_info ? e.episodes_info : \\\"\\\";\\n            break;\\n        }\\n    }\\n}\\nsetResult(update);\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"配置编辑界面\",\"path\":\"setting-editor\",\"rule\":\"js:\\neval(request(getVar('qdb_file')))\\nlet d = [];\\nlet configType = getVar(\\\"input_config_type\\\")\\nif (configType === '解析插件配置') {\\n    setPageTitle(\\\"编辑解析代码\\\")\\n    analysisModeEditPage(d)\\n} else if (configType === '影片详情页面配置') {\\n    setPageTitle(\\\"编辑影片详情页面代码\\\")\\n    detailViewModeEditPage(d)\\n} else {\\n    setError('错误的配置');\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"解除被封ip\",\"path\":\"releaseIP\",\"rule\":\"js:\\nlet id = getParam('id');\\nlet d = [];\\nd.push({\\n    title: '您已被封禁IP地址或触发了人机验证，请按照以下步骤处理(如不处理您将在一段时间内无法正常获取剧集列表)',\\n    url: 'hiker://empty',\\n    col_type: 'text_1'\\n});\\nd.push({\\n    title: '1.点击此处导入自动获取Cookie插件',\\n    url: $()\\n        .lazyRule(() => {\\n            let getDoubanCookie = \\\"(function(){if(window['location']['host']=='www.douban.com'){fy_bridge_app['writeFile']('hiker://files/cache/doubancookie.txt',fy_bridge_app['getCookie']('https://www.douban.com/'));}if(window['location']['host']=='m.douban.com'){fy_bridge_app['writeFile']('hiker://files/cache/doubancookie.txt',fy_bridge_app['getCookie']('https://m.douban.com/'));}}());\\\"\\n            if (!fileExist('hiker://files/cache/global_getDoubanCookie.js')) {\\n                writeFile('hiker://files/cache/global_getDoubanCookie.js', getDoubanCookie);\\n            };\\n            return 'rule://' + base64Encode('海阔视界，网页插件￥js_url￥global_getDoubanCookie@hiker://files/cache/global_getDoubanCookie.js');\\n        }),\\n    col_type: 'text_1'\\n});\\nd.push({\\n    title: '2.点击此处进入网页进行登录或人机验证，完成后返回此页面',\\n    url: 'https://movie.douban.com/subject/' + id + '/',\\n    col_type: 'text_1'\\n});\\nd.push({\\n    title: '3.完成登录或人机验证后返回影片详情页面重新进入',\\n    url: 'hiker://empty',\\n    col_type: 'text_1'\\n});\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"抢救页面\",\"path\":\"urgencyMode\",\"rule\":\"js:\\nlet d = [];\\nd.push({\\n    title: '很明显,出了一些小问题,建议重生',\\n    col_type: 'text_center_1',\\n    url: 'hiker://empty'\\n})\\nd.push({\\n    title: '点我更新依赖',\\n    col_type: 'text_1',\\n    url: $('hiker://empty').lazyRule(() => {\\n        let file = \\\"hiker://files/rules/joker/qdb.js\\\";\\n        let gitfile = 'https://gitcode.net/qq_41846756/hiker/-/raw/master/qdb.js';\\n        let text = request(gitfile);\\n        writeFile(file, text);\\n        refreshPage();\\n        return 'toast://依赖文件更新成功'\\n    })\\n})\\nd.push({\\n    title: '点我恢复默认设置',\\n    col_type: 'text_1',\\n    url: $(\\\"确定要恢复？\\\").confirm(() => {\\n        defaultConfigs = {\\n            starColor: \\\"#ffac2d\\\",\\n            chooseColor: \\\"#FA7298\\\",\\n            quickSearchConfigs: {\\n                order: []\\n            },\\n            detailsViewConfigs: {\\n                use: \\\"默认\\\",\\n                \\\"默认\\\": {\\n                    config: \\\"eval(fetch(getVar('qdb_file')));detailsView(type, id);\\\"\\n                }\\n            },\\n            analysisConfigs: {\\n                use: \\\"不解析\\\",\\n                \\\"不解析\\\": {\\n                    config: $.toString(() => {\\n                        return input;\\n                    }),\\n                    setting: $.toString(() => {\\n                        return \\\"toast://该插件无设置页面\\\";\\n                    })\\n                },\\n                \\\"断插\\\": {\\n                    config: $.toString(() => {\\n                        let file = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\n                        let oldfile = \\\"hiker://files/cache/MyParseSet.json\\\";\\n                        if (fileExist(file)) {\\n                            eval('json=' + fetch(file));\\n                            let jsUrl = json.settings.cj;\\n                            eval(fetch(jsUrl));\\n                            return aytmParse(input);\\n                        } else if (fileExist(oldfile)) {\\n                            let jsUrl = JSON.parse(fetch(oldfile)).cj;\\n                            eval(fetch(jsUrl));\\n                            return aytmParse(input);\\n                        } else {\\n                            return 'toast://没找到断插配置文件';\\n                        }\\n                    }),\\n                    setting: $.toString(() => {\\n                        let file = \\\"hiker://files/rules/DuanNian/MyParse.json\\\";\\n                        let oldfile = \\\"hiker://files/cache/MyParseSet.json\\\";\\n                        if (fileExist(file)) {\\n                            eval('json=' + fetch(file));\\n                            let jsUrl = json.settings.cj;\\n                            eval(fetch(jsUrl));\\n                            return setUrl;\\n                        } else if (fileExist(oldfile)) {\\n                            let jsUrl = JSON.parse(fetch(oldfile)).cj;\\n                            eval(fetch(jsUrl));\\n                            return setUrl;\\n                        } else {\\n                            return \\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置\\\";\\n                        }\\n                    })\\n                }\\n            }\\n        }\\n        writeFile(getVar('qdb_config'), JSON.stringify(defaultConfigs));\\n        refreshPage();\\n        return \\\"toast://已恢复默认设置\\\";\\n    })\\n})\\nd.push({\\n    title: '若重生不起作用,点我复制错误信息提交给开发者',\\n    col_type: 'text_1',\\n    url: 'copy://' + e.message\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"顺佬专用详情页\",\"path\":\"Sdetail\",\"rule\":\"js:\\nputVar('qdb_file', 'hiker://files/rules/joker/qdb.js');\\neval(fetch(getVar(\\\"qdb_file\\\")));\\npre();\\nlet type = getParam('type', ''),\\n    id = getParam('id', '');\\ndetailsView(type, id);\"}],\"saved\":false,\"title\":\"青豆\",\"version\":0,\"url\":\"hiker://empty/$page{fypage};get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_1_vertical_pic\",\"find_rule\":\"js:(\\n(type, id, stitle) => {\\n    setPageTitle(stitle);\\n    eval(fetch(getVar(\\\"qdb_file\\\")));\\n    if (type === \\\"playlist\\\") {\\n        douList(id, getPage(), 50);\\n    } else {\\n        subjectCollectionList(getPage(), 50, id);\\n    }\\n}\\n)(\\\"chart\\\",\\\"movie_top250\\\",\\\"豆瓣电影 Top250\\\")\",\"group\":\"①推荐\",\"ua\":\"mobile\",\"preRule\":\"let file = \\\"hiker://files/rules/joker/qdb.js\\\";\\nlet gitfile = 'https://gitcode.net/qq_41846756/hiker/-/raw/master/qdb.js';\\nlet ver = getItem('newver','');\\nif (!fetch(file) || ver < MY_RULE.version) {\\n    writeFile(file, request(gitfile));\\n    setItem('newver',String(MY_RULE.version));\\n}\\nputVar({\\n    key: \\\"qdb_file\\\",\\n    value: file\\n});\\ntry {\\n    eval(fetch(file));\\n    pre();\\n} catch (e) {\\n    let rule = JSON.parse(request(\\\"hiker://page/urgencyMode\\\")).rule;\\n    eval(rule)\\n}\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"配置编辑界面\\\",\\\"path\\\":\\\"setting-editor\\\",\\\"rule\\\":\\\"js:\\\\neval(request(getVar('qdb_file')))\\\\nlet d = [];\\\\nlet configType = getVar(\\\\\\\"input_config_type\\\\\\\")\\\\nif (configType === '解析插件配置') {\\\\n    setPageTitle(\\\\\\\"编辑解析代码\\\\\\\")\\\\n    analysisModeEditPage(d)\\\\n} else if (configType === '影片详情页面配置') {\\\\n    setPageTitle(\\\\\\\"编辑影片详情页面代码\\\\\\\")\\\\n    detailViewModeEditPage(d)\\\\n} else {\\\\n    setError('错误的配置');\\\\n}\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"解除被封ip\\\",\\\"path\\\":\\\"releaseIP\\\",\\\"rule\\\":\\\"js:\\\\nlet id = getParam('id');\\\\nlet d = [];\\\\nd.push({\\\\n    title: '您已被封禁IP地址或触发了人机验证，请按照以下步骤处理(如不处理您将在一段时间内无法正常获取剧集列表)',\\\\n    url: 'hiker://empty',\\\\n    col_type: 'text_1'\\\\n});\\\\nd.push({\\\\n    title: '1.点击此处导入自动获取Cookie插件',\\\\n    url: $()\\\\n        .lazyRule(() => {\\\\n            let getDoubanCookie = \\\\\\\"(function(){if(window['location']['host']=='www.douban.com'){fy_bridge_app['writeFile']('hiker://files/cache/doubancookie.txt',fy_bridge_app['getCookie']('https://www.douban.com/'));}if(window['location']['host']=='m.douban.com'){fy_bridge_app['writeFile']('hiker://files/cache/doubancookie.txt',fy_bridge_app['getCookie']('https://m.douban.com/'));}}());\\\\\\\"\\\\n            if (!fileExist('hiker://files/cache/global_getDoubanCookie.js')) {\\\\n                writeFile('hiker://files/cache/global_getDoubanCookie.js', getDoubanCookie);\\\\n            };\\\\n            return 'rule://' + base64Encode('海阔视界，网页插件￥js_url￥global_getDoubanCookie@hiker://files/cache/global_getDoubanCookie.js');\\\\n        }),\\\\n    col_type: 'text_1'\\\\n});\\\\nd.push({\\\\n    title: '2.点击此处进入网页进行登录或人机验证，完成后返回此页面',\\\\n    url: 'https://movie.douban.com/subject/' + id + '/',\\\\n    col_type: 'text_1'\\\\n});\\\\nd.push({\\\\n    title: '3.完成登录或人机验证后返回影片详情页面重新进入',\\\\n    url: 'hiker://empty',\\\\n    col_type: 'text_1'\\\\n});\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"抢救页面\\\",\\\"path\\\":\\\"urgencyMode\\\",\\\"rule\\\":\\\"js:\\\\nlet d = [];\\\\nd.push({\\\\n    title: '很明显,出了一些小问题,建议重生',\\\\n    col_type: 'text_center_1',\\\\n    url: 'hiker://empty'\\\\n})\\\\nd.push({\\\\n    title: '点我更新依赖',\\\\n    col_type: 'text_1',\\\\n    url: $('hiker://empty').lazyRule(() => {\\\\n        let file = \\\\\\\"hiker://files/rules/joker/qdb.js\\\\\\\";\\\\n        let gitfile = 'https://gitcode.net/qq_41846756/hiker/-/raw/master/qdb.js';\\\\n        let text = request(gitfile);\\\\n        writeFile(file, text);\\\\n        refreshPage();\\\\n        return 'toast://依赖文件更新成功'\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: '点我恢复默认设置',\\\\n    col_type: 'text_1',\\\\n    url: $(\\\\\\\"确定要恢复？\\\\\\\").confirm(() => {\\\\n        defaultConfigs = {\\\\n            starColor: \\\\\\\"#ffac2d\\\\\\\",\\\\n            chooseColor: \\\\\\\"#FA7298\\\\\\\",\\\\n            quickSearchConfigs: {\\\\n                order: []\\\\n            },\\\\n            detailsViewConfigs: {\\\\n                use: \\\\\\\"默认\\\\\\\",\\\\n                \\\\\\\"默认\\\\\\\": {\\\\n                    config: \\\\\\\"eval(fetch(getVar('qdb_file')));detailsView(type, id);\\\\\\\"\\\\n                }\\\\n            },\\\\n            analysisConfigs: {\\\\n                use: \\\\\\\"不解析\\\\\\\",\\\\n                \\\\\\\"不解析\\\\\\\": {\\\\n                    config: $.toString(() => {\\\\n                        return input;\\\\n                    }),\\\\n                    setting: $.toString(() => {\\\\n                        return \\\\\\\"toast://该插件无设置页面\\\\\\\";\\\\n                    })\\\\n                },\\\\n                \\\\\\\"断插\\\\\\\": {\\\\n                    config: $.toString(() => {\\\\n                        let file = \\\\\\\"hiker://files/rules/DuanNian/MyParse.json\\\\\\\";\\\\n                        let oldfile = \\\\\\\"hiker://files/cache/MyParseSet.json\\\\\\\";\\\\n                        if (fileExist(file)) {\\\\n                            eval('json=' + fetch(file));\\\\n                            let jsUrl = json.settings.cj;\\\\n                            eval(fetch(jsUrl));\\\\n                            return aytmParse(input);\\\\n                        } else if (fileExist(oldfile)) {\\\\n                            let jsUrl = JSON.parse(fetch(oldfile)).cj;\\\\n                            eval(fetch(jsUrl));\\\\n                            return aytmParse(input);\\\\n                        } else {\\\\n                            return 'toast://没找到断插配置文件';\\\\n                        }\\\\n                    }),\\\\n                    setting: $.toString(() => {\\\\n                        let file = \\\\\\\"hiker://files/rules/DuanNian/MyParse.json\\\\\\\";\\\\n                        let oldfile = \\\\\\\"hiker://files/cache/MyParseSet.json\\\\\\\";\\\\n                        if (fileExist(file)) {\\\\n                            eval('json=' + fetch(file));\\\\n                            let jsUrl = json.settings.cj;\\\\n                            eval(fetch(jsUrl));\\\\n                            return setUrl;\\\\n                        } else if (fileExist(oldfile)) {\\\\n                            let jsUrl = JSON.parse(fetch(oldfile)).cj;\\\\n                            eval(fetch(jsUrl));\\\\n                            return setUrl;\\\\n                        } else {\\\\n                            return \\\\\\\"hiker://page/Route?rule=MyFieldᴰⁿ&type=设置\\\\\\\";\\\\n                        }\\\\n                    })\\\\n                }\\\\n            }\\\\n        }\\\\n        writeFile(getVar('qdb_config'), JSON.stringify(defaultConfigs));\\\\n        refreshPage();\\\\n        return \\\\\\\"toast://已恢复默认设置\\\\\\\";\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: '若重生不起作用,点我复制错误信息提交给开发者',\\\\n    col_type: 'text_1',\\\\n    url: 'copy://' + e.message\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"顺佬专用详情页\\\",\\\"path\\\":\\\"Sdetail\\\",\\\"rule\\\":\\\"js:\\\\nputVar('qdb_file', 'hiker://files/rules/joker/qdb.js');\\\\neval(fetch(getVar(\\\\\\\"qdb_file\\\\\\\")));\\\\npre();\\\\nlet type = getParam('type', ''),\\\\n    id = getParam('id', '');\\\\ndetailsView(type, id);\\\"}]\"}","picUrl":"https://img9.doubanio.com/img/files/file-1637044446.jpeg@Referer=https://img9.doubanio.com/img/files/file-1637044446.jpeg","title":"豆瓣电影 Top250"}