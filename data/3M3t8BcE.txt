海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥海贼王@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"二级解析\",\"path\":\"p\",\"rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlet html = request(url);\\nlet alist = pdfa(html, \\\"body&&a\\\");\\nlet arr = alist.map(it => {\\n    return {\\n        //html: it,\\n        text: pdfh(it, \\\"a&&Text\\\"),\\n        title: pdfh(it, \\\"a&&title\\\"),\\n        href: pd(it, \\\"a&&href\\\", url)\\n    }\\n});\\n//log(arr);\\nlet debug = false;\\n\\nfunction clearText(it) {\\n    return it.replace(/第|集|章/g, \\\"\\\");\\n}\\n\\nfunction isMovie(it) {\\n    if (it == null || it.text == null) {\\n        return false;\\n    }\\n    let tit = it.title || \\\"\\\";\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\" || it.length > 8) {\\n        return false;\\n    }\\n    //排除\\n    let reg = /\\\\.|高清直播|写真推荐/;\\n    if (tit != \\\"\\\" && !tit.includes(it) || reg.test(it)) {\\n        return false;\\n    }\\n    return it.match(/原画|备用|蓝光|超清|高清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\n}\\n\\nfunction notChapter(it) {\\n    if (it == null || it.text == null) {\\n        return true;\\n    }\\n    return it.text.match(/[0-9]\\\\.[0-9]分/);\\n}\\n\\nfunction isChapter(it, pre, next) {\\n    if (notChapter(it)) {\\n        //优先排除\\n        return false;\\n    }\\n    //判断是不是电影\\n    if (isMovie(it)) {\\n        return true;\\n    }\\n    return isChapter0(it, pre) || isChapter0(it, next);\\n}\\n\\nfunction getChapterNum(it) {\\n    if (it == null || it.text == null) {\\n        return -1;\\n    }\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\") {\\n        return -1;\\n    }\\n    it = clearText(it);\\n    let reg = /^[0-9]*$/;\\n    if (!reg.test(it)) {\\n        return -1;\\n    }\\n    it = parseInt(it);\\n    if (isNaN(it)) {\\n        return -1;\\n    }\\n    return it;\\n}\\n\\nfunction isChapter0(it, brother) {\\n    /*if (debug) {\\n        log({\\n            it: it,\\n            brother: brother\\n        });\\n    }*/\\n    it = getChapterNum(it);\\n    //if (debug) log(it);\\n    if (it < 0) {\\n        return false;\\n    }\\n    brother = getChapterNum(brother);\\n    //if (debug) log(brother);\\n    if (brother < 0) {\\n        return false;\\n    }\\n    return it - brother < 2 && it - brother > -2;\\n}\\n\\nlet _web = $.toString(() => {\\n    let urls = _getUrls();\\n    let reg = /\\\\.html|\\\\.css|\\\\.js/;\\n    for (let k in urls) {\\n        if (!reg.test(urls[k]) && urls[k].match(/\\\\.mp4|\\\\.m3u8/)) {\\n            fy_bridge_app.log(urls[k]);\\n            return fy_bridge_app.getHeaderUrl(urls[k].replace(/.*?url=/, \\\"\\\")) + \\\"#ignoreImg=true#\\\";\\n        }\\n    }\\n});\\n\\nlet web = getItem('web', '0') == \\\"1\\\";\\n\\nfor (let i = 0; i < arr.length; i++) {\\n    let it = arr[i];\\n    let t = it.text;\\n    if (!it.href || it.href == \\\"\\\") {\\n        continue;\\n    }\\n    let pre = i == 0 ? null : arr[i - 1];\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\n    if (isChapter(it, pre, next)) {\\n        if (web) {\\n            var urlx = \\\"webRule://\\\" + it.href + \\\"@\\\" + _web;\\n            var extrax = {\\n                jsLoadingInject: true,\\n                id: it.href,\\n                blockRules: ['.m4a', '.mp3', '.flv', '.avi', '.3gp', '.mpeg', '.wmv', '.mov', '.rmvb', '.gif', '.jpeg', '.png', '.ico', '.svg']\\n            };\\n        } else {\\n            var urlx = \\\"video://\\\" + it.href;\\n            var extrax = {\\n                id: it.href\\n            };\\n        }\\n        d.push({\\n            title: t,\\n            url: urlx,\\n            col_type: \\\"text_3\\\",\\n            extra: extrax\\n        });\\n    }\\n}\\nif (d.length == 0) {\\n    //匹配失败\\n    d.push({\\n        title: \\\"\\\",\\n        url: url,\\n        col_type: \\\"x5_webview_single\\\",\\n        desc: \\\"float&&100%\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            canBack: true\\n        }\\n    });\\n    toast(\\\"AI匹配失败，已使用X5加载\\\");\\n    setResult(d);\\n} else {\\n    //为线路加分割线\\n    let d2 = [];\\n    for (let i = 0; i < d.length; i++) {\\n        d2.push(d[i]);\\n        if (i < d.length - 1) {\\n            let it = d[i];\\n            let t1 = parseInt(clearText(it.title));\\n            let next = d[i + 1];\\n            let t2 = parseInt(clearText(next.title));\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"line_blank\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n            }\\n        }\\n    }\\n\\n    setResult(d2);\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"聚合搜索\",\"path\":\"pro\",\"rule\":\"var d = [];\\nif (MY_PAGE == 1) {\\n    d.push({\\n        title: \\\"搜索\\\",\\n        url: $.toString(() => {\\n            refreshPage();\\n            return \\\"hiker://empty\\\";\\n        }),\\n        col_type: \\\"input\\\",\\n        desc: \\\"请输入关键词，尽量少字不要多字\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            defaultValue: getMyVar(\\\"sou\\\", \\\"\\\"),\\n            onChange: $.toString(() => {\\n                putMyVar(\\\"sou\\\", input);\\n            })\\n        }\\n    });\\n    addListener(\\\"onClose\\\", $.toString(() => {\\n        clearMyVar(\\\"sou\\\");\\n    }));\\n}\\n\\nlet s = getMyVar(\\\"sou\\\", \\\"\\\");\\nlet r = \\\"\\\";\\nif (s != \\\"\\\") {\\n    let html = fetch(\\\"https://cupfox.app/s/\\\" + s);\\n    let text = pdfh(html, \\\"body&&#__NEXT_DATA__&&Html\\\");\\n    //log(text);\\n    let data = JSON.parse(text);\\n    let {\\n        wrap\\n    } = $.require(\\\"hiker://page/tool\\\");\\n\\n    for (let it of data.props.pageProps.resourceSearchResult.resources) {\\n        d.push({\\n            title: wrap(it.text, s),\\n            url: \\\"hiker://page/p?u=\\\" + base64Encode(it.url),\\n            col_type: \\\"text_1\\\",\\n            desc: it.website + \\\" \\\" + (it.tags || []).join(\\\" \\\"),\\n            pic_url: \\\"\\\"\\n        });\\n    }\\n} else {\\n    d.push({\\n        title: \\\"AI技术\\\",\\n        url: \\\"confirm://基于AI识片自动分析源码技术，代码完全开源，数据来源于原网站，软件和规则不提供任何内容.js:''\\\",\\n        col_type: \\\"flex_button\\\"\\n    }, {\\n        title: getItem('web', '0') == \\\"0\\\" ? \\\"视频嗅探\\\" : \\\"Web通免\\\",\\n        url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n            if (getItem('web', '0') == \\\"0\\\") {\\n                setItem('web', '1')\\n            } else {\\n                setItem('web', '0')\\n            }\\n            refreshPage();\\n            return 'hiker://empty'\\n        }),\\n        col_type: \\\"flex_button\\\"\\n    });\\n    d.push({\\n        title: \\\"茶杯狐\\\",\\n        url: \\\"web://https://cupfox.app\\\",\\n        col_type: \\\"flex_button\\\",\\n        desc: \\\"\\\",\\n        pic_url: \\\"\\\"\\n    });\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"工具\",\"path\":\"tool\",\"rule\":\"function wrap(text, s) {\\n    return text.includes(\\\"““””\\\") ? text : \\\"““””\\\" + text.replace(new RegExp(\\\"<em>|</em>\\\", \\\"g\\\"), \\\"\\\").replace(new RegExp(s, \\\"g\\\"), \\\"<strong><span style=\\\\\\\"color: #1E90FF\\\\\\\">\\\" + s + \\\"</span></strong>\\\")\\n}\\n$.exports = {\\n    wrap: wrap\\n}\"}],\"saved\":false,\"title\":\"AI茶杯\",\"version\":0,\"url\":\"hiker://page/p?u=aHR0cHM6Ly93d3cueWx3dDMzLmNvbS92b2RkZXRhaWwvMTAxLmh0bWw=\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\nlet url = base64Decode(getParam(\\\"u\\\"));\\nlet html = request(url);\\nlet alist = pdfa(html, \\\"body&&a\\\");\\nlet arr = alist.map(it => {\\n    return {\\n        //html: it,\\n        text: pdfh(it, \\\"a&&Text\\\"),\\n        title: pdfh(it, \\\"a&&title\\\"),\\n        href: pd(it, \\\"a&&href\\\", url)\\n    }\\n});\\n//log(arr);\\nlet debug = false;\\n\\nfunction clearText(it) {\\n    return it.replace(/第|集|章/g, \\\"\\\");\\n}\\n\\nfunction isMovie(it) {\\n    if (it == null || it.text == null) {\\n        return false;\\n    }\\n    let tit = it.title || \\\"\\\";\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\" || it.length > 8) {\\n        return false;\\n    }\\n    //排除\\n    let reg = /\\\\.|高清直播|写真推荐/;\\n    if (tit != \\\"\\\" && !tit.includes(it) || reg.test(it)) {\\n        return false;\\n    }\\n    return it.match(/原画|备用|蓝光|超清|高清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\n}\\n\\nfunction notChapter(it) {\\n    if (it == null || it.text == null) {\\n        return true;\\n    }\\n    return it.text.match(/[0-9]\\\\.[0-9]分/);\\n}\\n\\nfunction isChapter(it, pre, next) {\\n    if (notChapter(it)) {\\n        //优先排除\\n        return false;\\n    }\\n    //判断是不是电影\\n    if (isMovie(it)) {\\n        return true;\\n    }\\n    return isChapter0(it, pre) || isChapter0(it, next);\\n}\\n\\nfunction getChapterNum(it) {\\n    if (it == null || it.text == null) {\\n        return -1;\\n    }\\n    it = it.text || \\\"\\\";\\n    if (it == \\\"\\\") {\\n        return -1;\\n    }\\n    it = clearText(it);\\n    let reg = /^[0-9]*$/;\\n    if (!reg.test(it)) {\\n        return -1;\\n    }\\n    it = parseInt(it);\\n    if (isNaN(it)) {\\n        return -1;\\n    }\\n    return it;\\n}\\n\\nfunction isChapter0(it, brother) {\\n    /*if (debug) {\\n        log({\\n            it: it,\\n            brother: brother\\n        });\\n    }*/\\n    it = getChapterNum(it);\\n    //if (debug) log(it);\\n    if (it < 0) {\\n        return false;\\n    }\\n    brother = getChapterNum(brother);\\n    //if (debug) log(brother);\\n    if (brother < 0) {\\n        return false;\\n    }\\n    return it - brother < 2 && it - brother > -2;\\n}\\n\\nlet _web = $.toString(() => {\\n    let urls = _getUrls();\\n    let reg = /\\\\.html|\\\\.css|\\\\.js/;\\n    for (let k in urls) {\\n        if (!reg.test(urls[k]) && urls[k].match(/\\\\.mp4|\\\\.m3u8/)) {\\n            fy_bridge_app.log(urls[k]);\\n            return fy_bridge_app.getHeaderUrl(urls[k].replace(/.*?url=/, \\\"\\\")) + \\\"#ignoreImg=true#\\\";\\n        }\\n    }\\n});\\n\\nlet web = getItem('web', '0') == \\\"1\\\";\\n\\nfor (let i = 0; i < arr.length; i++) {\\n    let it = arr[i];\\n    let t = it.text;\\n    if (!it.href || it.href == \\\"\\\") {\\n        continue;\\n    }\\n    let pre = i == 0 ? null : arr[i - 1];\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\n    if (isChapter(it, pre, next)) {\\n        if (web) {\\n            var urlx = \\\"webRule://\\\" + it.href + \\\"@\\\" + _web;\\n            var extrax = {\\n                jsLoadingInject: true,\\n                id: it.href,\\n                blockRules: ['.m4a', '.mp3', '.flv', '.avi', '.3gp', '.mpeg', '.wmv', '.mov', '.rmvb', '.gif', '.jpeg', '.png', '.ico', '.svg']\\n            };\\n        } else {\\n            var urlx = \\\"video://\\\" + it.href;\\n            var extrax = {\\n                id: it.href\\n            };\\n        }\\n        d.push({\\n            title: t,\\n            url: urlx,\\n            col_type: \\\"text_3\\\",\\n            extra: extrax\\n        });\\n    }\\n}\\nif (d.length == 0) {\\n    //匹配失败\\n    d.push({\\n        title: \\\"\\\",\\n        url: url,\\n        col_type: \\\"x5_webview_single\\\",\\n        desc: \\\"float&&100%\\\",\\n        pic_url: \\\"\\\",\\n        extra: {\\n            canBack: true\\n        }\\n    });\\n    toast(\\\"AI匹配失败，已使用X5加载\\\");\\n    setResult(d);\\n} else {\\n    //为线路加分割线\\n    let d2 = [];\\n    for (let i = 0; i < d.length; i++) {\\n        d2.push(d[i]);\\n        if (i < d.length - 1) {\\n            let it = d[i];\\n            let t1 = parseInt(clearText(it.title));\\n            let next = d[i + 1];\\n            let t2 = parseInt(clearText(next.title));\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"line_blank\\\"\\n                });\\n                d2.push({\\n                    col_type: \\\"big_blank_block\\\"\\n                });\\n            }\\n        }\\n    }\\n\\n    setResult(d2);\\n}\",\"group\":\"①轻合集\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级解析\\\",\\\"path\\\":\\\"p\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet url = base64Decode(getParam(\\\\\\\"u\\\\\\\"));\\\\nlet html = request(url);\\\\nlet alist = pdfa(html, \\\\\\\"body&&a\\\\\\\");\\\\nlet arr = alist.map(it => {\\\\n    return {\\\\n        //html: it,\\\\n        text: pdfh(it, \\\\\\\"a&&Text\\\\\\\"),\\\\n        title: pdfh(it, \\\\\\\"a&&title\\\\\\\"),\\\\n        href: pd(it, \\\\\\\"a&&href\\\\\\\", url)\\\\n    }\\\\n});\\\\n//log(arr);\\\\nlet debug = false;\\\\n\\\\nfunction clearText(it) {\\\\n    return it.replace(/第|集|章/g, \\\\\\\"\\\\\\\");\\\\n}\\\\n\\\\nfunction isMovie(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return false;\\\\n    }\\\\n    let tit = it.title || \\\\\\\"\\\\\\\";\\\\n    it = it.text || \\\\\\\"\\\\\\\";\\\\n    if (it == \\\\\\\"\\\\\\\" || it.length > 8) {\\\\n        return false;\\\\n    }\\\\n    //排除\\\\n    let reg = /\\\\\\\\.|高清直播|写真推荐/;\\\\n    if (tit != \\\\\\\"\\\\\\\" && !tit.includes(it) || reg.test(it)) {\\\\n        return false;\\\\n    }\\\\n    return it.match(/原画|备用|蓝光|超清|高清|正片|韩版|4K|4k|1080P|720P|TC|HD|BD/)\\\\n}\\\\n\\\\nfunction notChapter(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return true;\\\\n    }\\\\n    return it.text.match(/[0-9]\\\\\\\\.[0-9]分/);\\\\n}\\\\n\\\\nfunction isChapter(it, pre, next) {\\\\n    if (notChapter(it)) {\\\\n        //优先排除\\\\n        return false;\\\\n    }\\\\n    //判断是不是电影\\\\n    if (isMovie(it)) {\\\\n        return true;\\\\n    }\\\\n    return isChapter0(it, pre) || isChapter0(it, next);\\\\n}\\\\n\\\\nfunction getChapterNum(it) {\\\\n    if (it == null || it.text == null) {\\\\n        return -1;\\\\n    }\\\\n    it = it.text || \\\\\\\"\\\\\\\";\\\\n    if (it == \\\\\\\"\\\\\\\") {\\\\n        return -1;\\\\n    }\\\\n    it = clearText(it);\\\\n    let reg = /^[0-9]*$/;\\\\n    if (!reg.test(it)) {\\\\n        return -1;\\\\n    }\\\\n    it = parseInt(it);\\\\n    if (isNaN(it)) {\\\\n        return -1;\\\\n    }\\\\n    return it;\\\\n}\\\\n\\\\nfunction isChapter0(it, brother) {\\\\n    /*if (debug) {\\\\n        log({\\\\n            it: it,\\\\n            brother: brother\\\\n        });\\\\n    }*/\\\\n    it = getChapterNum(it);\\\\n    //if (debug) log(it);\\\\n    if (it < 0) {\\\\n        return false;\\\\n    }\\\\n    brother = getChapterNum(brother);\\\\n    //if (debug) log(brother);\\\\n    if (brother < 0) {\\\\n        return false;\\\\n    }\\\\n    return it - brother < 2 && it - brother > -2;\\\\n}\\\\n\\\\nlet _web = $.toString(() => {\\\\n    let urls = _getUrls();\\\\n    let reg = /\\\\\\\\.html|\\\\\\\\.css|\\\\\\\\.js/;\\\\n    for (let k in urls) {\\\\n        if (!reg.test(urls[k]) && urls[k].match(/\\\\\\\\.mp4|\\\\\\\\.m3u8/)) {\\\\n            fy_bridge_app.log(urls[k]);\\\\n            return fy_bridge_app.getHeaderUrl(urls[k].replace(/.*?url=/, \\\\\\\"\\\\\\\")) + \\\\\\\"#ignoreImg=true#\\\\\\\";\\\\n        }\\\\n    }\\\\n});\\\\n\\\\nlet web = getItem('web', '0') == \\\\\\\"1\\\\\\\";\\\\n\\\\nfor (let i = 0; i < arr.length; i++) {\\\\n    let it = arr[i];\\\\n    let t = it.text;\\\\n    if (!it.href || it.href == \\\\\\\"\\\\\\\") {\\\\n        continue;\\\\n    }\\\\n    let pre = i == 0 ? null : arr[i - 1];\\\\n    let next = i == (arr.length - 1) ? null : arr[i + 1];\\\\n    if (isChapter(it, pre, next)) {\\\\n        if (web) {\\\\n            var urlx = \\\\\\\"webRule://\\\\\\\" + it.href + \\\\\\\"@\\\\\\\" + _web;\\\\n            var extrax = {\\\\n                jsLoadingInject: true,\\\\n                id: it.href,\\\\n                blockRules: ['.m4a', '.mp3', '.flv', '.avi', '.3gp', '.mpeg', '.wmv', '.mov', '.rmvb', '.gif', '.jpeg', '.png', '.ico', '.svg']\\\\n            };\\\\n        } else {\\\\n            var urlx = \\\\\\\"video://\\\\\\\" + it.href;\\\\n            var extrax = {\\\\n                id: it.href\\\\n            };\\\\n        }\\\\n        d.push({\\\\n            title: t,\\\\n            url: urlx,\\\\n            col_type: \\\\\\\"text_3\\\\\\\",\\\\n            extra: extrax\\\\n        });\\\\n    }\\\\n}\\\\nif (d.length == 0) {\\\\n    //匹配失败\\\\n    d.push({\\\\n        title: \\\\\\\"\\\\\\\",\\\\n        url: url,\\\\n        col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n        desc: \\\\\\\"float&&100%\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            canBack: true\\\\n        }\\\\n    });\\\\n    toast(\\\\\\\"AI匹配失败，已使用X5加载\\\\\\\");\\\\n    setResult(d);\\\\n} else {\\\\n    //为线路加分割线\\\\n    let d2 = [];\\\\n    for (let i = 0; i < d.length; i++) {\\\\n        d2.push(d[i]);\\\\n        if (i < d.length - 1) {\\\\n            let it = d[i];\\\\n            let t1 = parseInt(clearText(it.title));\\\\n            let next = d[i + 1];\\\\n            let t2 = parseInt(clearText(next.title));\\\\n            if (t2 - t1 > 1 || t1 - t2 > 1) {\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n                });\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"line_blank\\\\\\\"\\\\n                });\\\\n                d2.push({\\\\n                    col_type: \\\\\\\"big_blank_block\\\\\\\"\\\\n                });\\\\n            }\\\\n        }\\\\n    }\\\\n\\\\n    setResult(d2);\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"聚合搜索\\\",\\\"path\\\":\\\"pro\\\",\\\"rule\\\":\\\"var d = [];\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        title: \\\\\\\"搜索\\\\\\\",\\\\n        url: $.toString(() => {\\\\n            refreshPage();\\\\n            return \\\\\\\"hiker://empty\\\\\\\";\\\\n        }),\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        desc: \\\\\\\"请输入关键词，尽量少字不要多字\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\",\\\\n        extra: {\\\\n            defaultValue: getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n            onChange: $.toString(() => {\\\\n                putMyVar(\\\\\\\"sou\\\\\\\", input);\\\\n            })\\\\n        }\\\\n    });\\\\n    addListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n        clearMyVar(\\\\\\\"sou\\\\\\\");\\\\n    }));\\\\n}\\\\n\\\\nlet s = getMyVar(\\\\\\\"sou\\\\\\\", \\\\\\\"\\\\\\\");\\\\nlet r = \\\\\\\"\\\\\\\";\\\\nif (s != \\\\\\\"\\\\\\\") {\\\\n    let html = fetch(\\\\\\\"https://cupfox.app/s/\\\\\\\" + s);\\\\n    let text = pdfh(html, \\\\\\\"body&&#__NEXT_DATA__&&Html\\\\\\\");\\\\n    //log(text);\\\\n    let data = JSON.parse(text);\\\\n    let {\\\\n        wrap\\\\n    } = $.require(\\\\\\\"hiker://page/tool\\\\\\\");\\\\n\\\\n    for (let it of data.props.pageProps.resourceSearchResult.resources) {\\\\n        d.push({\\\\n            title: wrap(it.text, s),\\\\n            url: \\\\\\\"hiker://page/p?u=\\\\\\\" + base64Encode(it.url),\\\\n            col_type: \\\\\\\"text_1\\\\\\\",\\\\n            desc: it.website + \\\\\\\" \\\\\\\" + (it.tags || []).join(\\\\\\\" \\\\\\\"),\\\\n            pic_url: \\\\\\\"\\\\\\\"\\\\n        });\\\\n    }\\\\n} else {\\\\n    d.push({\\\\n        title: \\\\\\\"AI技术\\\\\\\",\\\\n        url: \\\\\\\"confirm://基于AI识片自动分析源码技术，代码完全开源，数据来源于原网站，软件和规则不提供任何内容.js:''\\\\\\\",\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    }, {\\\\n        title: getItem('web', '0') == \\\\\\\"0\\\\\\\" ? \\\\\\\"视频嗅探\\\\\\\" : \\\\\\\"Web通免\\\\\\\",\\\\n        url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n            if (getItem('web', '0') == \\\\\\\"0\\\\\\\") {\\\\n                setItem('web', '1')\\\\n            } else {\\\\n                setItem('web', '0')\\\\n            }\\\\n            refreshPage();\\\\n            return 'hiker://empty'\\\\n        }),\\\\n        col_type: \\\\\\\"flex_button\\\\\\\"\\\\n    });\\\\n    d.push({\\\\n        title: \\\\\\\"茶杯狐\\\\\\\",\\\\n        url: \\\\\\\"web://https://cupfox.app\\\\\\\",\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\n        desc: \\\\\\\"\\\\\\\",\\\\n        pic_url: \\\\\\\"\\\\\\\"\\\\n    });\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"工具\\\",\\\"path\\\":\\\"tool\\\",\\\"rule\\\":\\\"function wrap(text, s) {\\\\n    return text.includes(\\\\\\\"““””\\\\\\\") ? text : \\\\\\\"““””\\\\\\\" + text.replace(new RegExp(\\\\\\\"<em>|</em>\\\\\\\", \\\\\\\"g\\\\\\\"), \\\\\\\"\\\\\\\").replace(new RegExp(s, \\\\\\\"g\\\\\\\"), \\\\\\\"<strong><span style=\\\\\\\\\\\\\\\"color: #1E90FF\\\\\\\\\\\\\\\">\\\\\\\" + s + \\\\\\\"</span></strong>\\\\\\\")\\\\n}\\\\n$.exports = {\\\\n    wrap: wrap\\\\n}\\\"}]\",\"proxy\":\"\"}","title":"海贼王"}