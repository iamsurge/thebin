#include<bits/stdc++.h>
using namespace std;
vector<int> g[500];
int MO,cnt,q,a[100001],n,l,r;
int main(){
    ios::sync_with_stdio(0);
    cin.tie(0);
    cin>>n>>q;
    MO=sqrt(n);
    cnt++;
    for(int i=1;i<=n;i++){
        cin>>a[i];
        g[cnt].push_back(a[i]);
        if(g[cnt].size()==MO) cnt++;
    }
    if(g[cnt].size()==0) cnt--;
    for(int i=1;i<=cnt;i++){
        sort(g[i].begin(),g[i].end());
        g[i].push_back(1e9);
    }
    while(q--){
        cin>>l>>r;
        int newl=l/MO+(l%MO!=0),newr=r/MO+(r%MO!=0),L=1,R=1e5,ans=1e9,median=(r-l+1)/2+(r-l+1)%2;
        while(L<=R){
            int mid=(L+R)/2,bang=0,be=0;
            for(int i=l;i<=min(newl*MO,r);i++){
                if(a[i]<mid){be++; bang++;}
                if(a[i]==mid) bang++;
            }
            if(newl!=newr){
                for(int i=r;i>=(newr-1)*MO+1;i--){
                    if(a[i]<mid){be++; bang++;}
                    if(a[i]==mid) bang++;
                }
            }
            for(int i=newl+1;i<=newr-1;i++){
                be+=lower_bound(g[i].begin(),g[i].end(),mid)-g[i].begin();
                bang+=upper_bound(g[i].begin(),g[i].end(),mid)-g[i].begin();
            }
            if(be<=median){
                if(bang>=median){
                    R=mid-1;
                    ans=min(ans,mid);
                }
                else L=mid+1;
            }
            else R=mid-1;
        }
        cout<<ans<<"\n";
    }
}
