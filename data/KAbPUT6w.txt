package com.company;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class Automation {
    public String currentState;
    public List<String> endStatesList;

    public String startState;
    public String[] states;
    public Character[] alphabet;
    public String[] endStates;
    public Map<StateSymbol, String> map;

    public Automation(String[] states, Character[] alphabet, Map<StateSymbol, String> map, String startState, String[] endStates) {
        this.currentState = startState;

        this.startState = startState;
        this.states = states;
        this.alphabet = alphabet;
        this.endStates = endStates;
        this.map = new HashMap<>(map);

        this.endStatesList = List.of(endStates);
    }

    public void print() {
        System.out.println("Множество состояний: " + Arrays.toString(states));
        System.out.println("Множество конечных состояний: " + Arrays.toString(endStates));
        System.out.println("Начальное состояние: " + startState);

        System.out.println("Функция перехода: ");
        for (var cur : map.entrySet()) {
            System.out.println("Из состояния " + cur.getKey().getState() + " по символу " + cur.getKey().getSymbol() + " в состояние " + cur.getValue());
        }
    }

    public void print2() {
        System.out.println("Множество состояний: " + Arrays.toString(states));
        System.out.println("Множество конечных состояний: " + Arrays.toString(endStates));
        System.out.println("Начальное состояние: " + startState);

        System.out.println("Функция перехода: ");
        for (var cur : map.entrySet()) {
            System.out.println("Из состояния " + cur.getKey().getState() + " по символу " + cur.getKey().getSymbol() + " в состояние " + cur.getValue());
        }
    }
    
//    public static void checkCorrect(String[] states, Character[] alphabet, Map<StateSymbol, String> map) {
//        if (states.length == 0) {
//            throw new IllegalArgumentException("The states can't be empty");
//        }
//
//        if (map.keySet().stream().anyMatch(x -> !Arrays.stream(states).toList().contains(x.getState()))
//        || map.keySet().stream().anyMatch(x -> !Arrays.stream(alphabet).toList().contains(x.getSymbol()))
//        || map.values().stream().anyMatch(x -> !Arrays.stream(states).toList().contains(x))) {
//            throw new IllegalArgumentException("Function state, symbol -> state isn't correct");
//        }
//    }
}
