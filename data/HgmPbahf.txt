海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥夸克网盘@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"123pan\",\"path\":\"123pan\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    const {\\n        fileList,\\n        getIcon\\n    } = $.require(\\\"hiker://page/code\\\")\\n    d.push({\\n        title: \\\"⚙️设置\\\",\\n        url: \\\"hiker://page/settings\\\",\\n        col_type: \\\"scroll_button\\\"\\n    })\\n    if (getItem(\\\"token\\\", \\\"\\\") != \\\"\\\") {\\n        var paths = storage0.getMyVar(\\\"paths123\\\", [{\\n            name: \\\"根目录\\\",\\n            id: \\\"0\\\"\\n        }])\\n        if (paths.length > 1) {\\n            d.push({\\n                title: \\\"<\\\",\\n                col_type: \\\"scroll_button\\\",\\n                url: $().lazyRule((paths) => {\\n                    paths.pop()\\n                    storage0.putMyVar(\\\"paths123\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths)\\n            })\\n        }\\n        paths.forEach((item, index) => {\\n            d.push({\\n                title: item.name,\\n                col_type: \\\"scroll_button\\\",\\n                url: $().lazyRule((item, paths, index) => {\\n                    putMyVar(\\\"id\\\", item.id)\\n                    storage0.putMyVar(\\\"paths123\\\", paths.slice(0, index + 1))\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item, paths, index)\\n            })\\n        })\\n        fileList(paths[paths.length - 1].id).data.InfoList.forEach(item => {\\n            var img = getIcon(item)\\n            if (item.Type == 1) {\\n                var url = $().lazyRule((id, name, paths) => {\\n                    paths.push({\\n                        name: name,\\n                        id: id\\n                    })\\n                    storage0.putMyVar(\\\"paths123\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item.FileId, item.FileName, paths)\\n            } else {\\n                var url = item.DownloadUrl\\n            }\\n            d.push({\\n                title: item.FileName,\\n                url: url,\\n                img: img,\\n                col_type: \\\"avatar\\\"\\n            })\\n        })\\n    } else {\\n        d.push({\\n            title: \\\"未登录\\\",\\n            url: \\\"hiker://page/settings\\\",\\n            col_type: \\\"text_1\\\"\\n        })\\n    }\\n} catch (e) {\\n    log(e.message)\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"code\",\"path\":\"code\",\"rule\":\"$.exports.fileList = function(id) {\\n    let list = request(buildUrl(\\\"https://www.123pan.com/api/file/list/new\\\", {\\n        \\\"driveId\\\": 0,\\n        \\\"limit\\\": 100,\\n        \\\"orderBy\\\": \\\"fileId\\\",\\n        \\\"OrderDirection\\\": \\\"asc\\\",\\n        \\\"ParentFileId\\\": id,\\n        \\\"trashed\\\": false\\n    }), {\\n        headers: {\\n            \\\"Authorization\\\": \\\"Bearer \\\" + getItem(\\\"token\\\")\\n        }\\n    })\\n    return JSON.parse(list)\\n}\\n$.exports.getIcon = function(content) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let root = \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\";\\n    if (content.Type == 1) {\\n        img = root + \\\"文件夹.svg\\\"\\n    } else {\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\n        let fileName = content.FileName\\n        let hzm = getHzm(fileName)\\n        if (files.includes(hzm)) {\\n            img = root + hzm + '.svg';\\n        } else {\\n            img = root + \\\"文件.svg\\\"\\n        }\\n    }\\n    return img\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\"},{\"col_type\":\"text_2\",\"name\":\"settings\",\"path\":\"settings\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"账号(手机号)\\\",\\n    url: $(getItem(\\\"username\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"username\\\", input)\\n    })\\n})\\nd.push({\\n    title: \\\"密码\\\",\\n    url: $(getItem(\\\"passwd\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"passwd\\\", input)\\n    })\\n})\\nd.push({\\n    title: \\\"登陆\\\",\\n    url: $().lazyRule(() => {\\n        let res = JSON.parse(post(\\\"https://www.123pan.com/api/user/sign_in\\\", {\\n            body: {\\n                \\\"passport\\\": getItem(\\\"username\\\", \\\"\\\"),\\n                \\\"password\\\": getItem(\\\"passwd\\\", \\\"\\\")\\n            }\\n        }))\\n        if (res.message == \\\"success\\\") {\\n            setItem(\\\"token\\\", res.data.token)\\n            back()\\n            return \\\"toast://登陆成功\\\"\\n        } else {\\n            return \\\"toast://\\\" + res.message\\n        }\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"百度网盘\",\"path\":\"百度网盘\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"设置\\\",\\n    url: \\\"hiker://page/login1\\\",\\n    col_type: \\\"text_1\\\"\\n})\\nif (getItem(\\\"access_token\\\", \\\"\\\") != \\\"\\\") {\\n    try {\\n        const {\\n            getIcon,\\n            getHzm,\\n            getLink\\n        } = $.require(\\\"hiker://page/code1\\\")\\n        let paths = storage0.getMyVar(\\\"pathsbaidu\\\", [{\\n            path: \\\"/\\\",\\n            name: \\\"家\\\"\\n        }])\\n        paths.forEach((item, i) => {\\n            d.push({\\n                title: item.name,\\n                url: $().lazyRule((paths, i) => {\\n                    storage0.putMyVar(\\\"pathsbaidu\\\", paths.slice(0, i + 1))\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, i),\\n                col_type: \\\"scroll_button\\\"\\n            })\\n        })\\n        let res = JSON.parse(request(buildUrl(\\\"https://pan.baidu.com/rest/2.0/xpan/file\\\", {\\n            \\\"access_token\\\": getItem(\\\"access_tokenbaidu\\\"),\\n            \\\"method\\\": \\\"list\\\",\\n            \\\"dir\\\": paths[paths.length - 1].path,\\n            \\\"web\\\": \\\"web\\\",\\n            \\\"limit\\\": 0,\\n            \\\"limit\\\": 200\\n        })))\\n        res.list.forEach(item => {\\n            if (item.isdir == 1) {\\n                var url = $().lazyRule((item, paths) => {\\n                    paths.push({\\n                        path: item.path,\\n                        name: item.server_filename\\n                    })\\n                    storage0.putMyVar(\\\"pathsbaidu\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item, paths)\\n            } else if ($.movie.includes(getHzm(item.server_filename))) {\\n                var url = getLink(\\\"movie\\\", item.fs_id, item.path)\\n            } else if ($.audio.includes(getHzm(item.server_filename))) {\\n                var url = getLink(\\\"audio\\\", item.fs_id, item.path)\\n            } else if ($.img.includes(getHzm(item.server_filename))) {\\n                var url = getLink(\\\"img\\\", item.fs_id, item.path)\\n            } else {\\n                var url = getLink(\\\"\\\", item.fs_id, item.path)\\n            }\\n            d.push({\\n                title: item.server_filename,\\n                img: getIcon(item),\\n                url: url,\\n                col_type: \\\"avatar\\\"\\n            })\\n        })\\n    } catch (e) {\\n        log(e.message)\\n        toast(\\\"出现错误，请查看日志\\\")        \\n    }\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"code1\",\"path\":\"code1\",\"rule\":\"$.exports.getIcon = function(content) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let root = \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\";\\n    if (content.isdir == 1) {\\n        img = root + \\\"文件夹.svg\\\"\\n    } else {\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\n        let fileName = content.server_filename\\n        let hzm = getHzm(fileName)\\n        if (files.includes(hzm)) {\\n            img = root + hzm + '.svg';\\n        } else {\\n            img = root + \\\"文件.svg\\\"\\n        }\\n    }\\n    return img\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\\n$.exports.getLink = function(ext, id, path) {\\n    return $().lazyRule((ext, id, path) => {\\n        if (getItem(\\\"jk\\\", \\\"0\\\") == \\\"1\\\") {\\n            var res = JSON.parse(request(buildUrl(\\\"https://pan.baidu.com/api/filemetas\\\", {\\n                \\\"access_token\\\": getItem(\\\"access_token\\\"),\\n                \\\"dlink\\\": \\\"1\\\",\\n                \\\"web\\\": \\\"5\\\",\\n                \\\"origin\\\": \\\"dlna\\\",\\n                \\\"target\\\": `[\\\\\\\"${path}\\\\\\\"]`\\n            }))).info[0].dlink\\n        } else {\\n            var res = JSON.parse(request(buildUrl(\\\"https://pan.baidu.com/rest/2.0/xpan/multimedia\\\", {\\n                \\\"access_token\\\": getItem(\\\"access_token\\\"),\\n                \\\"method\\\": \\\"filemetas\\\",\\n                \\\"fsids\\\": `[${id}]`,\\n                \\\"dlink\\\": \\\"1\\\"\\n            }), {\\n                headers: {\\n                    \\\"User-Agent\\\": \\\"pan.baidu.com\\\"\\n                }\\n            })).list[0].dlink + \\\"&access_token=\\\" + getItem(\\\"access_token\\\")\\n        }\\n        if (ext == \\\"movie\\\") {\\n            return JSON.stringify({\\n                urls: [res + \\\"#isVideo=true#\\\"],\\n                headers: {\\n                    \\\"User-Agent\\\": \\\"pan.baidu.com\\\"\\n                }\\n            })\\n        } else if (ext == \\\"audio\\\") {\\n            return JSON.stringify({\\n                urls: [res + \\\"#isMusic=true#\\\"],\\n                headers: {\\n                    \\\"User-Agent\\\": \\\"pan.baidu.com\\\"\\n                }\\n            })\\n        } else if (ext == \\\"img\\\") {\\n            return res + `#.jpg;{User-Agent@pan.baidu.com}`\\n        } else {\\n            return \\\"download://\\\" + res + `;{User-Agent@pan.baidu.com}`\\n        }\\n    }, ext, id, path)\\n}\"},{\"col_type\":\"text_2\",\"name\":\"login1\",\"path\":\"login1\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"获取token\\\",\\n    url: \\\"https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=iYCeC9g08h5vuP9UqvPHKKSVrKFXGa1v&redirect_uri=https://tool.nn.ci/baidu/callback&scope=basic,netdisk&qrcode=1\\\"\\n})\\nd.push({\\n    title: \\\"登陆\\\",\\n    url: $(\\\"\\\", \\\"填写获取到的token\\\").input(() => {\\n        let res = JSON.parse(request(buildUrl(\\\"https://openapi.baidu.com/oauth/2.0/token\\\", {\\n            \\\"grant_type\\\": \\\"refresh_token\\\",\\n            \\\"refresh_token\\\": input,\\n            \\\"client_id\\\": \\\"iYCeC9g08h5vuP9UqvPHKKSVrKFXGa1v\\\",\\n            \\\"client_secret\\\": \\\"jXiFMOPVPCWlO2M5CwWQzffpNPaGTRBG\\\"\\n        })))\\n        if (!res.access_token) {\\n            log(res)\\n            return \\\"toast://错误！！！\\\"\\n        } else {\\n            setItem(\\\"access_tokenbaidu\\\", res.access_token)\\n           // setItem(\\\"refresh_token\\\", res.refresh_token)\\n            back()\\n        }\\n    })\\n})\\nd.push({\\n    title: getItem(\\\"jk\\\", \\\"0\\\") == \\\"0\\\" ? \\\"官方接口：不是vip会限速，稳定\\\" : \\\"非官方接口：可能不限速，不稳定\\\",\\n    url: $().lazyRule(() => {\\n        setItem(\\\"jk\\\", getItem(\\\"jk\\\", \\\"0\\\") == \\\"0\\\" ? \\\"1\\\" : \\\"0\\\")\\n        refreshPage()\\n        return \\\"hiker://empty\\\"\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"Pikpak\",\"path\":\"Pikpak\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"登陆\\\",\\n    col_type: \\\"text_2\\\",\\n    url: \\\"hiker://page/settings2\\\"\\n})\\nif (getItem(\\\"access_token\\\", \\\"\\\") != \\\"\\\") {\\n    try {\\n        const {\\n            getHzm\\n        } = $.require(\\\"hiker://page/code2\\\")\\n        let paths = storage0.getMyVar(\\\"pathspikpak\\\", [{\\n            \\\"id\\\": \\\"\\\",\\n            \\\"name\\\": \\\"家\\\"\\n        }])\\n        d.push({\\n            title: \\\"添加磁链\\\",\\n            col_type: \\\"text_2\\\",\\n            url: $(\\\"\\\", \\\"输入磁力链接\\\").input(() => {\\n                return \\\"pikpakapp://mypikpak.com/xpan/main_tab?tab=1&add_url=\\\" + encodeURIComponent(input)\\n            })\\n        })\\n        paths.forEach((item, i) => {\\n            d.push({\\n                title: item.name,\\n                col_type: \\\"scroll_button\\\",\\n                url: $().lazyRule((paths, i) => {\\n                    storage0.putMyVar(\\\"pathspikpak\\\", paths.slice(0, i + 1))\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, i)\\n            })\\n        })\\n        let list = JSON.parse(request(buildUrl(\\\"https://api-drive.mypikpak.com/drive/v1/files\\\", {\\n            \\\"parent_id\\\": paths[paths.length - 1].id,\\n            \\\"thumbnail_size\\\": \\\"SIZE_LARGE\\\",\\n            \\\"with_audit\\\": \\\"true\\\",\\n            \\\"limit\\\": \\\"1000\\\",\\n            \\\"filters\\\": '{\\\"phase\\\":{\\\"eq\\\":\\\"PHASE_TYPE_COMPLETE\\\"},\\\"trashed\\\":{\\\"eq\\\":false}}',\\n            \\\"page_token\\\": \\\"\\\"\\n        }), {\\n            headers: {\\n                \\\"Authorization\\\": \\\"Bearer \\\" + getItem(\\\"access_token\\\")\\n            }\\n        }))\\n        list.files.forEach(item => {\\n            if (item.kind == \\\"drive#folder\\\") {\\n                var urll = $().lazyRule((paths, item) => {\\n                    paths.push({\\n                        id: item.id,\\n                        name: item.name\\n                    })\\n                    storage0.putMyVar(\\\"pathspikpak\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, item)\\n            } else if ($.movie.includes(getHzm(item.name))) {\\n\\n                var ext = \\\"#isVideo=true#\\\"\\n            } else if ($.audio.includes(getHzm(item.name))) {\\n                var ext = \\\"#isMusic=true#\\\"\\n            } else if ($.img.includes(getHzm(item.name))) {\\n                var ext = \\\"#.jpg\\\"\\n            } else {\\n                var ext = \\\"\\\"\\n            }\\n            var url = $().lazyRule((item, ext) => {\\n                let u = `https://api-drive.mypikpak.com/drive/v1/files/${item.id}?_magic=2021&thumbnail_size=SIZE_LARGE`\\n                let res = JSON.parse(request(u, {\\n                    headers: {\\n                        \\\"Authorization\\\": \\\"Bearer \\\" + getItem(\\\"access_token\\\")\\n                    }\\n                }))\\n                for (item of res.medias) {\\n                    try {\\n                        let tmp = item.link\\n                        if (tmp.url) {\\n                            return tmp.url + ext\\n                            break\\n                        }\\n                    } catch (e) {}\\n                }\\n            }, item, ext)\\n            d.push({\\n                title: item.name,\\n                img: item.icon_link,\\n                col_type: \\\"avatar\\\",\\n                url: item.kind == \\\"drive#folder\\\" ? urll : url\\n            })\\n        })\\n    } catch (e) {\\n        toast(\\\"检测到错误\\\")\\n        log(e.message)\\n    }\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"code2\",\"path\":\"code2\",\"rule\":\"$.exports.login = function(username, password) {\\n    let res = JSON.parse(post(\\\"https://user.mypikpak.com/v1/auth/signin\\\", {\\n        body: {\\n            \\\"captcha_token\\\": \\\"\\\",\\n            \\\"client_id\\\": \\\"YNxT9w7GMdWvEOKa\\\",\\n            \\\"client_secret\\\": \\\"dbw2OtmVEeuUvIptb1Coyg\\\",\\n            \\\"username\\\": username,\\n            \\\"password\\\": password\\n        }\\n    }))\\n    if (res.access_token) {\\n        setItem(\\\"access_token\\\", res.access_token)\\n        setItem(\\\"refresh_token\\\", res.refresh_token)\\n        return true\\n    } else {\\n        log(res)\\n        return false\\n    }\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\"},{\"col_type\":\"text_2\",\"name\":\"settings2\",\"path\":\"settings2\",\"rule\":\"js:\\nvar d = [];\\nd.push({\\n    title: \\\"账号(邮箱)\\\",\\n    url: $(getItem(\\\"username\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"username\\\", input)\\n        refreshPage()\\n    })\\n})\\nd.push({\\n    title: \\\"密码\\\",\\n    url: $(getItem(\\\"passwd\\\", \\\"\\\")).input(() => {\\n        setItem(\\\"passwd\\\", input)\\n        refreshPage()\\n    })\\n})\\nd.push({\\n    title: \\\"登陆\\\",\\n    url: $().lazyRule(() => {\\n        const {\\n            login\\n        } = $.require(\\\"hiker://page/code2\\\")\\n        log(getItem(\\\"username\\\"))\\n        if (login(getItem(\\\"username\\\"), getItem(\\\"passwd\\\"))) {\\n            back()\\n            return \\\"toast://登陆成功\\\"\\n        } else {\\n            return \\\"toast://登陆失败\\\"\\n        }\\n    }),\\n    col_type: \\\"text_center_1\\\"\\n})\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"天翼云盘\",\"path\":\"天翼云盘\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    if (fileExist(\\\"189.txt\\\")) {\\n        const {\\n            getFiles,\\n            getIcon\\n        } = $.require(\\\"hiker://page/code3\\\")\\n        var paths = storage0.getMyVar(\\\"pathsty\\\", [{\\n            \\\"id\\\": -11,\\n            \\\"name\\\": \\\"家\\\"\\n        }])\\n        paths.forEach((item, i) => {\\n            d.push({\\n                title: item.name,\\n                col_type: \\\"scroll_button\\\",\\n                url: $().lazyRule((paths, i) => {\\n                    storage0.putMyVar(\\\"pathsty\\\", paths.slice(0, i + 1))\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, i)\\n            })\\n        })\\n        let list = getFiles(paths[paths.length - 1].id)\\n        list.fileListAO.folderList.forEach(item => {\\n            d.push({\\n                title: item.name,\\n                col_type: \\\"avatar\\\",\\n                img: \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\",\\n                url: $().lazyRule((paths, id, name) => {\\n                    paths.push({\\n                        id: id,\\n                        name: name\\n                    })\\n                    storage0.putMyVar(\\\"pathsty\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, item.id, item.name)\\n            })\\n        })\\n        list.fileListAO.fileList.forEach(item => {\\n            var img = getIcon(item.name)\\n            d.push({\\n                title: item.name,\\n                col_type: \\\"avatar\\\",\\n                img: img,\\n                url: $().lazyRule((id, name) => {\\n                    const {\\n                        getHzm\\n                    } = $.require(\\\"hiker://page/code\\\")\\n                    let cookie = readFile(\\\"189.txt\\\")\\n                    let u = \\\"https://cloud.189.cn/api/portal/getFileInfo.action\\\"\\n                    let res = JSON.parse(request(buildUrl(u, {\\n                        \\\"fileId\\\": id\\n                    }), {\\n                        headers: {\\n                            \\\"Cookie\\\": cookie,\\n                            \\\"Accept\\\": \\\"application/json;charset=UTF-8\\\",\\n                            \\\"User-Agent\\\": PC_UA\\n                        }\\n                    }))\\n                    if ($.movie.includes(getHzm(name))) {\\n                        return JSON.stringify({\\n                            urls: [\\\"https:\\\" + res.downloadUrl + \\\"#isVideo=true#\\\"],\\n                            headers: {\\n                                \\\"Cookie\\\": cookie.replace(/;/g, \\\"；；\\\"),\\n                                \\\"User-Agent\\\": PC_UA.replace(/;/g, \\\"；；\\\")\\n                            }\\n                        })\\n                    } else if ($.audio.includes(getHzm(name))) {\\n                        return JSON.stringify({\\n                            urls: [\\\"https:\\\" + res.downloadUrl + \\\"#isVideo=true#\\\"],\\n                            headers: {\\n                                \\\"Cookie\\\": cookie.replace(/;/g, \\\"；；\\\"),\\n                                \\\"User-Agent\\\": PC_UA.replace(/;/g, \\\"；；\\\")\\n                            }\\n                        })\\n                    } else if ($.img.includes(getHzm(name))) {\\n                        return \\\"https:\\\" + res.downloadUrl + `#.jpg@User-Agent=${PC_UA}@Cookie=${cookie}`\\n                    } else {\\n                        return \\\"download://https:\\\" + res.downloadUrl + `@User-Agent=${PC_UA}@Cookie=${cookie}`\\n                    }\\n                }, item.id, item.name)\\n            })\\n        })\\n    } else {\\n        d.unshift({\\n            title: \\\"登陆\\\",\\n            url: \\\"hiker://page/login3\\\",\\n            col_type: \\\"text_center_1\\\"\\n        })\\n    }\\n} catch (e) {\\n    d.unshift({\\n        title: \\\"登陆\\\",\\n        url: \\\"hiker://page/login3\\\",\\n        col_type: \\\"text_center_1\\\"\\n    })\\n    log(e.message)\\n    toast(\\\"程序可能出错了，请查看日志\\\")\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"code3\",\"path\":\"code3\",\"rule\":\"$.exports.getFiles = function(id) {\\n    let u = \\\"https://cloud.189.cn/api/open/file/listFiles.action\\\"\\n    let res = request(buildUrl(u, {\\n        \\\"pageSize\\\": 1000,\\n        \\\"pageNum\\\": 1,\\n        \\\"mediaType\\\": 0,\\n        \\\"folderId\\\": id,\\n        \\\"iconOption\\\": 5,\\n        \\\"orderBy\\\": \\\"lastOpTime\\\",\\n        \\\"descending\\\": \\\"true\\\",\\n    }), {\\n        headers: {\\n            \\\"Cookie\\\": readFile(\\\"189.txt\\\"),\\n            \\\"Accept\\\": \\\"application/json;charset=UTF-8\\\",\\n            \\\"User-Agent\\\": PC_UA\\n        }\\n    })\\n    var json = res.replace(/\\\\\\\"id\\\\\\\":(\\\\d+)/g, '\\\"id\\\":\\\"$1\\\"') //解决js的精度问题\\n    return JSON.parse(json)\\n}\\n$.exports.getIcon = function(fileName) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let root = \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\";\\n    let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\n    let hzm = getHzm(fileName)\\n    if (files.includes(hzm)) {\\n        img = root + hzm + '.svg';\\n    } else {\\n        img = root + \\\"文件.svg\\\"\\n    }\\n    return img\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"login3\",\"path\":\"login3\",\"rule\":\"js:\\nvar d = [];\\naddListener('onClose', () => {\\n    let c = getVar(\\\"https://cloud.189.cn/web/main\\\");\\n    log(c);\\n    saveFile(\\\"189.txt\\\", c);\\n    clearVar(\\\"https://cloud.189.cn/web/main\\\");\\n})\\nd.push({\\n    url: \\\"https://cloud.189.cn/web/login.html\\\",\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"100%&&float\\\",\\n    extra: {\\n        js: $.toString(() => {\\n            var url = location.href\\n            if (url.includes(\\\"https://cloud.189.cn/web/main\\\")) {\\n                let cookie = fba.getCookie(url);\\n                if (cookie != null && cookie.length > 0) {\\n                    fba.putVar(\\\"https://cloud.189.cn/web/main\\\", cookie);\\n                    alert(\\\"已获取到cookie\\\");\\n                    fba.back();                  \\n                }\\n            }\\n        }),\\n        ua: PC_UA,\\n        canBack: true\\n    }\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"夸克网盘\",\"path\":\"夸克网盘\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    if (fileExist(\\\"quark.txt\\\")) {\\n        const {\\n            getIcon,\\n            getHzm,\\n            getLink\\n        } = $.require(\\\"hiker://page/code4\\\")\\n        var cookie = readFile(\\\"quark.txt\\\")\\n        let userinfo = JSON.parse(request(\\\"https://pan.quark.cn/account/info\\\", {\\n            headers: {\\n                \\\"Cookie\\\": cookie\\n            }\\n        }))\\n        let paths = storage0.getMyVar(\\\"paths\\\", [{\\n            \\\"id\\\": \\\"0\\\",\\n            \\\"name\\\": \\\"根目录\\\"\\n        }])\\n        if (MY_PAGE == 1) {\\n            d.push({\\n                title: userinfo.data.nickname,\\n                img: userinfo.data.avatarUri,\\n                url: \\\"hiker://page/settings4\\\",\\n                col_type: \\\"avatar\\\"\\n            })\\n            paths.forEach((item, i) => {\\n                d.push({\\n                    title: item.name,\\n                    col_type: \\\"scroll_button\\\",\\n                    url: $().lazyRule((paths, i) => {\\n                        storage0.putMyVar(\\\"paths\\\", paths.slice(0, i + 1))\\n                        refreshPage()\\n                        return \\\"hiker://empty\\\"\\n                    }, paths, i)\\n                })\\n            })\\n        }\\n        let res = JSON.parse(request(buildUrl(\\\"https://drive.quark.cn/1/clouddrive/file/sort\\\", {\\n            \\\"pdir_fid\\\": paths[paths.length - 1].id,\\n            \\\"fr\\\": \\\"pc\\\",\\n            \\\"pr\\\": \\\"ucpro\\\",\\n            \\\"_size\\\": 10,\\n            \\\"_fetch_total\\\": \\\"1\\\",\\n            \\\"_sort\\\": \\\"file_type:asc,file_name:asc\\\",\\n            \\\"_page\\\": getParam(\\\"page\\\")\\n        }), {\\n            headers: {\\n                \\\"Cookie\\\": cookie,\\n                \\\"Accept\\\": \\\"application/json, text/plain, */*\\\",\\n                \\\"Referer\\\": \\\"https://pan.quark.cn/\\\"\\n            }\\n        }))\\n        res.data.list.forEach(item => {\\n            if (!item.file) {\\n                var url = $().lazyRule((item, paths) => {\\n                    paths.push({\\n                        id: item.fid,\\n                        name: item.file_name\\n                    })\\n                    storage0.putMyVar(\\\"paths\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item, paths)\\n            } else if ($.movie.includes(getHzm(item.file_name))) {\\n                var url = getLink(item, cookie, \\\"movie\\\")\\n            } else if ($.audio.includes(getHzm(item.file_name))) {\\n                var url = getLink(item, cookie, \\\"audio\\\")\\n            } else if ($.img.includes(getHzm(item.file_name))) {\\n                var url = getLink(item, cookie, \\\"img\\\")\\n            } else {\\n                var url = getLink(item, cookie)\\n            }\\n            d.push({\\n                title: item.file_name,\\n                img: getIcon(item),\\n                url: url,\\n                col_type: \\\"avatar\\\"\\n            })\\n        })\\n    } else {\\n        if (MY_PAGE == 1) {\\n            d.push({\\n                title: \\\"登陆\\\",\\n                col_type: \\\"text_1\\\",\\n                url: \\\"hiker://page/settings4\\\"\\n            })\\n        }\\n    }\\n} catch (e) {\\n    log(e.message)\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"code4\",\"path\":\"code4\",\"rule\":\"$.exports.getIcon = function(content) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/code\\\")\\n    let root = \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\";\\n    if (!content.file) {\\n        img = root + \\\"文件夹.svg\\\"\\n    } else {\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\n        let fileName = content.file_name\\n        let hzm = getHzm(fileName)\\n        if (files.includes(hzm)) {\\n            img = root + hzm + '.svg';\\n        } else {\\n            img = root + \\\"文件.svg\\\"\\n        }\\n    }\\n    return img\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\\n$.exports.getLink = function(item, cookie, ext) {\\n    var url = $().lazyRule((fid, cookie, ext) => {\\n        let res = JSON.parse(post(\\\"https://drive.quark.cn/1/clouddrive/file/download?pr=ucpro&fr=pc\\\", {\\n            headers: {\\n                \\\"Cookie\\\": cookie,\\n                \\\"Accept\\\": \\\"application/json, text/plain, */*\\\",\\n                \\\"Referer\\\": \\\"https://pan.quark.cn/\\\"\\n            },\\n            body: JSON.stringify({\\n                \\\"fids\\\": [fid]\\n            })\\n        }))\\n        if (ext == \\\"movie\\\") {\\n            return JSON.stringify({\\n                urls: [res.data[0].download_url + \\\"#isVideo=true#\\\"],\\n                headers: {\\n                    \\\"Cookie\\\": cookie.replace(/;/g, \\\"；；\\\"),\\n                    \\\"Referer\\\": \\\"https://pan.quark.cn/\\\"\\n                }\\n            })\\n        } else if (ext == \\\"audio\\\") {\\n            return JSON.stringify({\\n                urls: [res.data[0].download_url + \\\"#isMusic=true#\\\"],\\n                headers: {\\n                    \\\"Cookie\\\": cookie.replace(/;/g, \\\"；；\\\"),\\n                    \\\"Referer\\\": \\\"https://pan.quark.cn/\\\"\\n                }\\n            })\\n        } else if (ext == \\\"img\\\") {\\n            return res.data[0].download_url + `@Referer=https://pan.quark.cn/@Cookie=${cookie}`\\n        } else {\\n            return \\\"download://\\\" + res.data[0].download_url + `@Referer=https://pan.quark.cn/@Cookie=${cookie}`\\n        }\\n    }, item.fid, cookie, ext)\\n    return url\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"settings4\",\"path\":\"settings4\",\"rule\":\"js:\\nvar d = [];\\naddListener('onClose', () => {\\n    saveFile(\\\"quark.txt\\\", getVar(\\\"https://pan.quark.cn/list#/list/all\\\"))\\n    clearVar(\\\"https://pan.quark.cn/list#/list/all\\\");\\n})\\nd.push({\\n    url: \\\"https://pan.quark.cn/\\\",\\n    col_type: \\\"x5_webview_single\\\",\\n    desc: \\\"100%&&float\\\",\\n    extra: {\\n        js: $.toString(() => {\\n            var url = location.href\\n            if (url == \\\"https://pan.quark.cn/list#/list/all\\\") {\\n                let cookie = fba.getCookie(url);\\n                if (cookie != null && cookie.length > 0) {\\n                    fba.putVar(url, cookie);\\n                    alert(\\\"已获取到cookie\\\");\\n                    fba.back();\\n                }\\n            }\\n        }),\\n        ua: PC_UA,\\n        canBack: true\\n    }\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"关于\",\"path\":\"about\",\"rule\":\"js:\\nvar d = [];\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"c\\\");\\n}));\\nd.push($.require(\\\"hiker://page/about2\\\"));\\nd.push({\\n    title: \\\"\\\",\\n    url: $(\\\"#noLoading#\\\").lazyRule(() => {\\n        let c = parseInt(getMyVar(\\\"c\\\", \\\"1\\\"))\\n        if (c >= 5) {\\n            confirm({\\n                title: \\\"温馨提示\\\",\\n                content: \\\"确定要开启开发者模式吗？注意开启该模式则表示后续您的所有操作均为主观能动操作，所产生的一切问题与责任均由您自己承担\\\",\\n                confirm: $.toString(() => {\\n                    setItem(\\\"dev\\\", \\\"1\\\");\\n                    return \\\"toast://已开启开发者模式\\\"\\n                })\\n            });\\n            return \\\"hiker://empty\\\"\\n        } else {\\n            putMyVar(\\\"c\\\", c + 1 + \\\"\\\");\\n            return \\\"hiker://empty\\\";\\n        }\\n    }),\\n    col_type: \\\"text_center_1\\\",\\n    desc: \\\"\\\",\\n    pic_url: \\\"\\\",\\n    extra: {\\n        lineVisible: false\\n    }\\n});\\n\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"关于2\",\"path\":\"about2\",\"rule\":\"$.exports = {\\n    title: \\\"本规则基于开源项目：<a href=\\\\\\\"https://github.com/alist-org/alist\\\\\\\">Alist</a>，探索不使用服务器实现Alist逻辑，本规则所有代码全部开源，仅限个人使用，仅供研究、学习和测试，禁止转载分享到第三方平台\\\",\\n    url: \\\"hiker://empty\\\",\\n    col_type: \\\"rich_text\\\",\\n    desc: \\\"\\\",\\n    pic_url: \\\"\\\"\\n}\"}],\"params\":\"{\\\"newWindow\\\":true}\",\"saved\":false,\"title\":\"网盘合集\",\"version\":0,\"url\":\"hiker://page/夸克网盘?page=fypage\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\ntry {\\n    if (fileExist(\\\"quark.txt\\\")) {\\n        const {\\n            getIcon,\\n            getHzm,\\n            getLink\\n        } = $.require(\\\"hiker://page/code4\\\")\\n        var cookie = readFile(\\\"quark.txt\\\")\\n        let userinfo = JSON.parse(request(\\\"https://pan.quark.cn/account/info\\\", {\\n            headers: {\\n                \\\"Cookie\\\": cookie\\n            }\\n        }))\\n        let paths = storage0.getMyVar(\\\"paths\\\", [{\\n            \\\"id\\\": \\\"0\\\",\\n            \\\"name\\\": \\\"根目录\\\"\\n        }])\\n        if (MY_PAGE == 1) {\\n            d.push({\\n                title: userinfo.data.nickname,\\n                img: userinfo.data.avatarUri,\\n                url: \\\"hiker://page/settings4\\\",\\n                col_type: \\\"avatar\\\"\\n            })\\n            paths.forEach((item, i) => {\\n                d.push({\\n                    title: item.name,\\n                    col_type: \\\"scroll_button\\\",\\n                    url: $().lazyRule((paths, i) => {\\n                        storage0.putMyVar(\\\"paths\\\", paths.slice(0, i + 1))\\n                        refreshPage()\\n                        return \\\"hiker://empty\\\"\\n                    }, paths, i)\\n                })\\n            })\\n        }\\n        let res = JSON.parse(request(buildUrl(\\\"https://drive.quark.cn/1/clouddrive/file/sort\\\", {\\n            \\\"pdir_fid\\\": paths[paths.length - 1].id,\\n            \\\"fr\\\": \\\"pc\\\",\\n            \\\"pr\\\": \\\"ucpro\\\",\\n            \\\"_size\\\": 10,\\n            \\\"_fetch_total\\\": \\\"1\\\",\\n            \\\"_sort\\\": \\\"file_type:asc,file_name:asc\\\",\\n            \\\"_page\\\": getParam(\\\"page\\\")\\n        }), {\\n            headers: {\\n                \\\"Cookie\\\": cookie,\\n                \\\"Accept\\\": \\\"application/json, text/plain, */*\\\",\\n                \\\"Referer\\\": \\\"https://pan.quark.cn/\\\"\\n            }\\n        }))\\n        res.data.list.forEach(item => {\\n            if (!item.file) {\\n                var url = $().lazyRule((item, paths) => {\\n                    paths.push({\\n                        id: item.fid,\\n                        name: item.file_name\\n                    })\\n                    storage0.putMyVar(\\\"paths\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, item, paths)\\n            } else if ($.movie.includes(getHzm(item.file_name))) {\\n                var url = getLink(item, cookie, \\\"movie\\\")\\n            } else if ($.audio.includes(getHzm(item.file_name))) {\\n                var url = getLink(item, cookie, \\\"audio\\\")\\n            } else if ($.img.includes(getHzm(item.file_name))) {\\n                var url = getLink(item, cookie, \\\"img\\\")\\n            } else {\\n                var url = getLink(item, cookie)\\n            }\\n            d.push({\\n                title: item.file_name,\\n                img: getIcon(item),\\n                url: url,\\n                col_type: \\\"avatar\\\"\\n            })\\n        })\\n    } else {\\n        if (MY_PAGE == 1) {\\n            d.push({\\n                title: \\\"登陆\\\",\\n                col_type: \\\"text_1\\\",\\n                url: \\\"hiker://page/settings4\\\"\\n            })\\n        }\\n    }\\n} catch (e) {\\n    log(e.message)\\n}\\nsetResult(d);\",\"group\":\"网盘\",\"ua\":\"mobile\",\"preRule\":\"$.extend({\\n    audio: [\\\"mp3\\\", \\\"flac\\\", \\\"ogg\\\", \\\"m4a\\\", \\\"wav\\\", \\\"opus\\\"],\\n    movie: [\\\"mp4\\\", \\\"mkv\\\", \\\"avi\\\", \\\"mov\\\", \\\"rmvb\\\", \\\"webm\\\", \\\"flv\\\", \\\"m4v\\\", \\\"m3u8\\\", \\\"ts\\\"],\\n    img: [\\\"jpg\\\", \\\"png\\\", \\\"jpeg\\\", \\\"gif\\\", \\\"svg\\\", \\\"raw\\\"]\\n})\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"123pan\\\",\\\"path\\\":\\\"123pan\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\ntry {\\\\n    const {\\\\n        fileList,\\\\n        getIcon\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    d.push({\\\\n        title: \\\\\\\"⚙️设置\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/settings\\\\\\\",\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    })\\\\n    if (getItem(\\\\\\\"token\\\\\\\", \\\\\\\"\\\\\\\") != \\\\\\\"\\\\\\\") {\\\\n        var paths = storage0.getMyVar(\\\\\\\"paths123\\\\\\\", [{\\\\n            name: \\\\\\\"根目录\\\\\\\",\\\\n            id: \\\\\\\"0\\\\\\\"\\\\n        }])\\\\n        if (paths.length > 1) {\\\\n            d.push({\\\\n                title: \\\\\\\"<\\\\\\\",\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                url: $().lazyRule((paths) => {\\\\n                    paths.pop()\\\\n                    storage0.putMyVar(\\\\\\\"paths123\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths)\\\\n            })\\\\n        }\\\\n        paths.forEach((item, index) => {\\\\n            d.push({\\\\n                title: item.name,\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                url: $().lazyRule((item, paths, index) => {\\\\n                    putMyVar(\\\\\\\"id\\\\\\\", item.id)\\\\n                    storage0.putMyVar(\\\\\\\"paths123\\\\\\\", paths.slice(0, index + 1))\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, item, paths, index)\\\\n            })\\\\n        })\\\\n        fileList(paths[paths.length - 1].id).data.InfoList.forEach(item => {\\\\n            var img = getIcon(item)\\\\n            if (item.Type == 1) {\\\\n                var url = $().lazyRule((id, name, paths) => {\\\\n                    paths.push({\\\\n                        name: name,\\\\n                        id: id\\\\n                    })\\\\n                    storage0.putMyVar(\\\\\\\"paths123\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, item.FileId, item.FileName, paths)\\\\n            } else {\\\\n                var url = item.DownloadUrl\\\\n            }\\\\n            d.push({\\\\n                title: item.FileName,\\\\n                url: url,\\\\n                img: img,\\\\n                col_type: \\\\\\\"avatar\\\\\\\"\\\\n            })\\\\n        })\\\\n    } else {\\\\n        d.push({\\\\n            title: \\\\\\\"未登录\\\\\\\",\\\\n            url: \\\\\\\"hiker://page/settings\\\\\\\",\\\\n            col_type: \\\\\\\"text_1\\\\\\\"\\\\n        })\\\\n    }\\\\n} catch (e) {\\\\n    log(e.message)\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"code\\\",\\\"path\\\":\\\"code\\\",\\\"rule\\\":\\\"$.exports.fileList = function(id) {\\\\n    let list = request(buildUrl(\\\\\\\"https://www.123pan.com/api/file/list/new\\\\\\\", {\\\\n        \\\\\\\"driveId\\\\\\\": 0,\\\\n        \\\\\\\"limit\\\\\\\": 100,\\\\n        \\\\\\\"orderBy\\\\\\\": \\\\\\\"fileId\\\\\\\",\\\\n        \\\\\\\"OrderDirection\\\\\\\": \\\\\\\"asc\\\\\\\",\\\\n        \\\\\\\"ParentFileId\\\\\\\": id,\\\\n        \\\\\\\"trashed\\\\\\\": false\\\\n    }), {\\\\n        headers: {\\\\n            \\\\\\\"Authorization\\\\\\\": \\\\\\\"Bearer \\\\\\\" + getItem(\\\\\\\"token\\\\\\\")\\\\n        }\\\\n    })\\\\n    return JSON.parse(list)\\\\n}\\\\n$.exports.getIcon = function(content) {\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    let root = \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\\\\\";\\\\n    if (content.Type == 1) {\\\\n        img = root + \\\\\\\"文件夹.svg\\\\\\\"\\\\n    } else {\\\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\\\n        let fileName = content.FileName\\\\n        let hzm = getHzm(fileName)\\\\n        if (files.includes(hzm)) {\\\\n            img = root + hzm + '.svg';\\\\n        } else {\\\\n            img = root + \\\\\\\"文件.svg\\\\\\\"\\\\n        }\\\\n    }\\\\n    return img\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\"},{\\\"col_type\\\":\\\"text_2\\\",\\\"name\\\":\\\"settings\\\",\\\"path\\\":\\\"settings\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"账号(手机号)\\\\\\\",\\\\n    url: $(getItem(\\\\\\\"username\\\\\\\", \\\\\\\"\\\\\\\")).input(() => {\\\\n        setItem(\\\\\\\"username\\\\\\\", input)\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"密码\\\\\\\",\\\\n    url: $(getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\")).input(() => {\\\\n        setItem(\\\\\\\"passwd\\\\\\\", input)\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"登陆\\\\\\\",\\\\n    url: $().lazyRule(() => {\\\\n        let res = JSON.parse(post(\\\\\\\"https://www.123pan.com/api/user/sign_in\\\\\\\", {\\\\n            body: {\\\\n                \\\\\\\"passport\\\\\\\": getItem(\\\\\\\"username\\\\\\\", \\\\\\\"\\\\\\\"),\\\\n                \\\\\\\"password\\\\\\\": getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\")\\\\n            }\\\\n        }))\\\\n        if (res.message == \\\\\\\"success\\\\\\\") {\\\\n            setItem(\\\\\\\"token\\\\\\\", res.data.token)\\\\n            back()\\\\n            return \\\\\\\"toast://登陆成功\\\\\\\"\\\\n        } else {\\\\n            return \\\\\\\"toast://\\\\\\\" + res.message\\\\n        }\\\\n    }),\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n})\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"百度网盘\\\",\\\"path\\\":\\\"百度网盘\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"设置\\\\\\\",\\\\n    url: \\\\\\\"hiker://page/login1\\\\\\\",\\\\n    col_type: \\\\\\\"text_1\\\\\\\"\\\\n})\\\\nif (getItem(\\\\\\\"access_token\\\\\\\", \\\\\\\"\\\\\\\") != \\\\\\\"\\\\\\\") {\\\\n    try {\\\\n        const {\\\\n            getIcon,\\\\n            getHzm,\\\\n            getLink\\\\n        } = $.require(\\\\\\\"hiker://page/code1\\\\\\\")\\\\n        let paths = storage0.getMyVar(\\\\\\\"pathsbaidu\\\\\\\", [{\\\\n            path: \\\\\\\"/\\\\\\\",\\\\n            name: \\\\\\\"家\\\\\\\"\\\\n        }])\\\\n        paths.forEach((item, i) => {\\\\n            d.push({\\\\n                title: item.name,\\\\n                url: $().lazyRule((paths, i) => {\\\\n                    storage0.putMyVar(\\\\\\\"pathsbaidu\\\\\\\", paths.slice(0, i + 1))\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths, i),\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n            })\\\\n        })\\\\n        let res = JSON.parse(request(buildUrl(\\\\\\\"https://pan.baidu.com/rest/2.0/xpan/file\\\\\\\", {\\\\n            \\\\\\\"access_token\\\\\\\": getItem(\\\\\\\"access_tokenbaidu\\\\\\\"),\\\\n            \\\\\\\"method\\\\\\\": \\\\\\\"list\\\\\\\",\\\\n            \\\\\\\"dir\\\\\\\": paths[paths.length - 1].path,\\\\n            \\\\\\\"web\\\\\\\": \\\\\\\"web\\\\\\\",\\\\n            \\\\\\\"limit\\\\\\\": 0,\\\\n            \\\\\\\"limit\\\\\\\": 200\\\\n        })))\\\\n        res.list.forEach(item => {\\\\n            if (item.isdir == 1) {\\\\n                var url = $().lazyRule((item, paths) => {\\\\n                    paths.push({\\\\n                        path: item.path,\\\\n                        name: item.server_filename\\\\n                    })\\\\n                    storage0.putMyVar(\\\\\\\"pathsbaidu\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, item, paths)\\\\n            } else if ($.movie.includes(getHzm(item.server_filename))) {\\\\n                var url = getLink(\\\\\\\"movie\\\\\\\", item.fs_id, item.path)\\\\n            } else if ($.audio.includes(getHzm(item.server_filename))) {\\\\n                var url = getLink(\\\\\\\"audio\\\\\\\", item.fs_id, item.path)\\\\n            } else if ($.img.includes(getHzm(item.server_filename))) {\\\\n                var url = getLink(\\\\\\\"img\\\\\\\", item.fs_id, item.path)\\\\n            } else {\\\\n                var url = getLink(\\\\\\\"\\\\\\\", item.fs_id, item.path)\\\\n            }\\\\n            d.push({\\\\n                title: item.server_filename,\\\\n                img: getIcon(item),\\\\n                url: url,\\\\n                col_type: \\\\\\\"avatar\\\\\\\"\\\\n            })\\\\n        })\\\\n    } catch (e) {\\\\n        log(e.message)\\\\n        toast(\\\\\\\"出现错误，请查看日志\\\\\\\")        \\\\n    }\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"code1\\\",\\\"path\\\":\\\"code1\\\",\\\"rule\\\":\\\"$.exports.getIcon = function(content) {\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    let root = \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\\\\\";\\\\n    if (content.isdir == 1) {\\\\n        img = root + \\\\\\\"文件夹.svg\\\\\\\"\\\\n    } else {\\\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\\\n        let fileName = content.server_filename\\\\n        let hzm = getHzm(fileName)\\\\n        if (files.includes(hzm)) {\\\\n            img = root + hzm + '.svg';\\\\n        } else {\\\\n            img = root + \\\\\\\"文件.svg\\\\\\\"\\\\n        }\\\\n    }\\\\n    return img\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\\n$.exports.getLink = function(ext, id, path) {\\\\n    return $().lazyRule((ext, id, path) => {\\\\n        if (getItem(\\\\\\\"jk\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"1\\\\\\\") {\\\\n            var res = JSON.parse(request(buildUrl(\\\\\\\"https://pan.baidu.com/api/filemetas\\\\\\\", {\\\\n                \\\\\\\"access_token\\\\\\\": getItem(\\\\\\\"access_token\\\\\\\"),\\\\n                \\\\\\\"dlink\\\\\\\": \\\\\\\"1\\\\\\\",\\\\n                \\\\\\\"web\\\\\\\": \\\\\\\"5\\\\\\\",\\\\n                \\\\\\\"origin\\\\\\\": \\\\\\\"dlna\\\\\\\",\\\\n                \\\\\\\"target\\\\\\\": `[\\\\\\\\\\\\\\\"${path}\\\\\\\\\\\\\\\"]`\\\\n            }))).info[0].dlink\\\\n        } else {\\\\n            var res = JSON.parse(request(buildUrl(\\\\\\\"https://pan.baidu.com/rest/2.0/xpan/multimedia\\\\\\\", {\\\\n                \\\\\\\"access_token\\\\\\\": getItem(\\\\\\\"access_token\\\\\\\"),\\\\n                \\\\\\\"method\\\\\\\": \\\\\\\"filemetas\\\\\\\",\\\\n                \\\\\\\"fsids\\\\\\\": `[${id}]`,\\\\n                \\\\\\\"dlink\\\\\\\": \\\\\\\"1\\\\\\\"\\\\n            }), {\\\\n                headers: {\\\\n                    \\\\\\\"User-Agent\\\\\\\": \\\\\\\"pan.baidu.com\\\\\\\"\\\\n                }\\\\n            })).list[0].dlink + \\\\\\\"&access_token=\\\\\\\" + getItem(\\\\\\\"access_token\\\\\\\")\\\\n        }\\\\n        if (ext == \\\\\\\"movie\\\\\\\") {\\\\n            return JSON.stringify({\\\\n                urls: [res + \\\\\\\"#isVideo=true#\\\\\\\"],\\\\n                headers: {\\\\n                    \\\\\\\"User-Agent\\\\\\\": \\\\\\\"pan.baidu.com\\\\\\\"\\\\n                }\\\\n            })\\\\n        } else if (ext == \\\\\\\"audio\\\\\\\") {\\\\n            return JSON.stringify({\\\\n                urls: [res + \\\\\\\"#isMusic=true#\\\\\\\"],\\\\n                headers: {\\\\n                    \\\\\\\"User-Agent\\\\\\\": \\\\\\\"pan.baidu.com\\\\\\\"\\\\n                }\\\\n            })\\\\n        } else if (ext == \\\\\\\"img\\\\\\\") {\\\\n            return res + `#.jpg;{User-Agent@pan.baidu.com}`\\\\n        } else {\\\\n            return \\\\\\\"download://\\\\\\\" + res + `;{User-Agent@pan.baidu.com}`\\\\n        }\\\\n    }, ext, id, path)\\\\n}\\\"},{\\\"col_type\\\":\\\"text_2\\\",\\\"name\\\":\\\"login1\\\",\\\"path\\\":\\\"login1\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"获取token\\\\\\\",\\\\n    url: \\\\\\\"https://openapi.baidu.com/oauth/2.0/authorize?response_type=code&client_id=iYCeC9g08h5vuP9UqvPHKKSVrKFXGa1v&redirect_uri=https://tool.nn.ci/baidu/callback&scope=basic,netdisk&qrcode=1\\\\\\\"\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"登陆\\\\\\\",\\\\n    url: $(\\\\\\\"\\\\\\\", \\\\\\\"填写获取到的token\\\\\\\").input(() => {\\\\n        let res = JSON.parse(request(buildUrl(\\\\\\\"https://openapi.baidu.com/oauth/2.0/token\\\\\\\", {\\\\n            \\\\\\\"grant_type\\\\\\\": \\\\\\\"refresh_token\\\\\\\",\\\\n            \\\\\\\"refresh_token\\\\\\\": input,\\\\n            \\\\\\\"client_id\\\\\\\": \\\\\\\"iYCeC9g08h5vuP9UqvPHKKSVrKFXGa1v\\\\\\\",\\\\n            \\\\\\\"client_secret\\\\\\\": \\\\\\\"jXiFMOPVPCWlO2M5CwWQzffpNPaGTRBG\\\\\\\"\\\\n        })))\\\\n        if (!res.access_token) {\\\\n            log(res)\\\\n            return \\\\\\\"toast://错误！！！\\\\\\\"\\\\n        } else {\\\\n            setItem(\\\\\\\"access_tokenbaidu\\\\\\\", res.access_token)\\\\n           // setItem(\\\\\\\"refresh_token\\\\\\\", res.refresh_token)\\\\n            back()\\\\n        }\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: getItem(\\\\\\\"jk\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"官方接口：不是vip会限速，稳定\\\\\\\" : \\\\\\\"非官方接口：可能不限速，不稳定\\\\\\\",\\\\n    url: $().lazyRule(() => {\\\\n        setItem(\\\\\\\"jk\\\\\\\", getItem(\\\\\\\"jk\\\\\\\", \\\\\\\"0\\\\\\\") == \\\\\\\"0\\\\\\\" ? \\\\\\\"1\\\\\\\" : \\\\\\\"0\\\\\\\")\\\\n        refreshPage()\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }),\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"Pikpak\\\",\\\"path\\\":\\\"Pikpak\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"登陆\\\\\\\",\\\\n    col_type: \\\\\\\"text_2\\\\\\\",\\\\n    url: \\\\\\\"hiker://page/settings2\\\\\\\"\\\\n})\\\\nif (getItem(\\\\\\\"access_token\\\\\\\", \\\\\\\"\\\\\\\") != \\\\\\\"\\\\\\\") {\\\\n    try {\\\\n        const {\\\\n            getHzm\\\\n        } = $.require(\\\\\\\"hiker://page/code2\\\\\\\")\\\\n        let paths = storage0.getMyVar(\\\\\\\"pathspikpak\\\\\\\", [{\\\\n            \\\\\\\"id\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"name\\\\\\\": \\\\\\\"家\\\\\\\"\\\\n        }])\\\\n        d.push({\\\\n            title: \\\\\\\"添加磁链\\\\\\\",\\\\n            col_type: \\\\\\\"text_2\\\\\\\",\\\\n            url: $(\\\\\\\"\\\\\\\", \\\\\\\"输入磁力链接\\\\\\\").input(() => {\\\\n                return \\\\\\\"pikpakapp://mypikpak.com/xpan/main_tab?tab=1&add_url=\\\\\\\" + encodeURIComponent(input)\\\\n            })\\\\n        })\\\\n        paths.forEach((item, i) => {\\\\n            d.push({\\\\n                title: item.name,\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                url: $().lazyRule((paths, i) => {\\\\n                    storage0.putMyVar(\\\\\\\"pathspikpak\\\\\\\", paths.slice(0, i + 1))\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths, i)\\\\n            })\\\\n        })\\\\n        let list = JSON.parse(request(buildUrl(\\\\\\\"https://api-drive.mypikpak.com/drive/v1/files\\\\\\\", {\\\\n            \\\\\\\"parent_id\\\\\\\": paths[paths.length - 1].id,\\\\n            \\\\\\\"thumbnail_size\\\\\\\": \\\\\\\"SIZE_LARGE\\\\\\\",\\\\n            \\\\\\\"with_audit\\\\\\\": \\\\\\\"true\\\\\\\",\\\\n            \\\\\\\"limit\\\\\\\": \\\\\\\"1000\\\\\\\",\\\\n            \\\\\\\"filters\\\\\\\": '{\\\\\\\"phase\\\\\\\":{\\\\\\\"eq\\\\\\\":\\\\\\\"PHASE_TYPE_COMPLETE\\\\\\\"},\\\\\\\"trashed\\\\\\\":{\\\\\\\"eq\\\\\\\":false}}',\\\\n            \\\\\\\"page_token\\\\\\\": \\\\\\\"\\\\\\\"\\\\n        }), {\\\\n            headers: {\\\\n                \\\\\\\"Authorization\\\\\\\": \\\\\\\"Bearer \\\\\\\" + getItem(\\\\\\\"access_token\\\\\\\")\\\\n            }\\\\n        }))\\\\n        list.files.forEach(item => {\\\\n            if (item.kind == \\\\\\\"drive#folder\\\\\\\") {\\\\n                var urll = $().lazyRule((paths, item) => {\\\\n                    paths.push({\\\\n                        id: item.id,\\\\n                        name: item.name\\\\n                    })\\\\n                    storage0.putMyVar(\\\\\\\"pathspikpak\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths, item)\\\\n            } else if ($.movie.includes(getHzm(item.name))) {\\\\n\\\\n                var ext = \\\\\\\"#isVideo=true#\\\\\\\"\\\\n            } else if ($.audio.includes(getHzm(item.name))) {\\\\n                var ext = \\\\\\\"#isMusic=true#\\\\\\\"\\\\n            } else if ($.img.includes(getHzm(item.name))) {\\\\n                var ext = \\\\\\\"#.jpg\\\\\\\"\\\\n            } else {\\\\n                var ext = \\\\\\\"\\\\\\\"\\\\n            }\\\\n            var url = $().lazyRule((item, ext) => {\\\\n                let u = `https://api-drive.mypikpak.com/drive/v1/files/${item.id}?_magic=2021&thumbnail_size=SIZE_LARGE`\\\\n                let res = JSON.parse(request(u, {\\\\n                    headers: {\\\\n                        \\\\\\\"Authorization\\\\\\\": \\\\\\\"Bearer \\\\\\\" + getItem(\\\\\\\"access_token\\\\\\\")\\\\n                    }\\\\n                }))\\\\n                for (item of res.medias) {\\\\n                    try {\\\\n                        let tmp = item.link\\\\n                        if (tmp.url) {\\\\n                            return tmp.url + ext\\\\n                            break\\\\n                        }\\\\n                    } catch (e) {}\\\\n                }\\\\n            }, item, ext)\\\\n            d.push({\\\\n                title: item.name,\\\\n                img: item.icon_link,\\\\n                col_type: \\\\\\\"avatar\\\\\\\",\\\\n                url: item.kind == \\\\\\\"drive#folder\\\\\\\" ? urll : url\\\\n            })\\\\n        })\\\\n    } catch (e) {\\\\n        toast(\\\\\\\"检测到错误\\\\\\\")\\\\n        log(e.message)\\\\n    }\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"code2\\\",\\\"path\\\":\\\"code2\\\",\\\"rule\\\":\\\"$.exports.login = function(username, password) {\\\\n    let res = JSON.parse(post(\\\\\\\"https://user.mypikpak.com/v1/auth/signin\\\\\\\", {\\\\n        body: {\\\\n            \\\\\\\"captcha_token\\\\\\\": \\\\\\\"\\\\\\\",\\\\n            \\\\\\\"client_id\\\\\\\": \\\\\\\"YNxT9w7GMdWvEOKa\\\\\\\",\\\\n            \\\\\\\"client_secret\\\\\\\": \\\\\\\"dbw2OtmVEeuUvIptb1Coyg\\\\\\\",\\\\n            \\\\\\\"username\\\\\\\": username,\\\\n            \\\\\\\"password\\\\\\\": password\\\\n        }\\\\n    }))\\\\n    if (res.access_token) {\\\\n        setItem(\\\\\\\"access_token\\\\\\\", res.access_token)\\\\n        setItem(\\\\\\\"refresh_token\\\\\\\", res.refresh_token)\\\\n        return true\\\\n    } else {\\\\n        log(res)\\\\n        return false\\\\n    }\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\"},{\\\"col_type\\\":\\\"text_2\\\",\\\"name\\\":\\\"settings2\\\",\\\"path\\\":\\\"settings2\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nd.push({\\\\n    title: \\\\\\\"账号(邮箱)\\\\\\\",\\\\n    url: $(getItem(\\\\\\\"username\\\\\\\", \\\\\\\"\\\\\\\")).input(() => {\\\\n        setItem(\\\\\\\"username\\\\\\\", input)\\\\n        refreshPage()\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"密码\\\\\\\",\\\\n    url: $(getItem(\\\\\\\"passwd\\\\\\\", \\\\\\\"\\\\\\\")).input(() => {\\\\n        setItem(\\\\\\\"passwd\\\\\\\", input)\\\\n        refreshPage()\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: \\\\\\\"登陆\\\\\\\",\\\\n    url: $().lazyRule(() => {\\\\n        const {\\\\n            login\\\\n        } = $.require(\\\\\\\"hiker://page/code2\\\\\\\")\\\\n        log(getItem(\\\\\\\"username\\\\\\\"))\\\\n        if (login(getItem(\\\\\\\"username\\\\\\\"), getItem(\\\\\\\"passwd\\\\\\\"))) {\\\\n            back()\\\\n            return \\\\\\\"toast://登陆成功\\\\\\\"\\\\n        } else {\\\\n            return \\\\\\\"toast://登陆失败\\\\\\\"\\\\n        }\\\\n    }),\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n})\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"天翼云盘\\\",\\\"path\\\":\\\"天翼云盘\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\ntry {\\\\n    if (fileExist(\\\\\\\"189.txt\\\\\\\")) {\\\\n        const {\\\\n            getFiles,\\\\n            getIcon\\\\n        } = $.require(\\\\\\\"hiker://page/code3\\\\\\\")\\\\n        var paths = storage0.getMyVar(\\\\\\\"pathsty\\\\\\\", [{\\\\n            \\\\\\\"id\\\\\\\": -11,\\\\n            \\\\\\\"name\\\\\\\": \\\\\\\"家\\\\\\\"\\\\n        }])\\\\n        paths.forEach((item, i) => {\\\\n            d.push({\\\\n                title: item.name,\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                url: $().lazyRule((paths, i) => {\\\\n                    storage0.putMyVar(\\\\\\\"pathsty\\\\\\\", paths.slice(0, i + 1))\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths, i)\\\\n            })\\\\n        })\\\\n        let list = getFiles(paths[paths.length - 1].id)\\\\n        list.fileListAO.folderList.forEach(item => {\\\\n            d.push({\\\\n                title: item.name,\\\\n                col_type: \\\\\\\"avatar\\\\\\\",\\\\n                img: \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\\\\\",\\\\n                url: $().lazyRule((paths, id, name) => {\\\\n                    paths.push({\\\\n                        id: id,\\\\n                        name: name\\\\n                    })\\\\n                    storage0.putMyVar(\\\\\\\"pathsty\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths, item.id, item.name)\\\\n            })\\\\n        })\\\\n        list.fileListAO.fileList.forEach(item => {\\\\n            var img = getIcon(item.name)\\\\n            d.push({\\\\n                title: item.name,\\\\n                col_type: \\\\\\\"avatar\\\\\\\",\\\\n                img: img,\\\\n                url: $().lazyRule((id, name) => {\\\\n                    const {\\\\n                        getHzm\\\\n                    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n                    let cookie = readFile(\\\\\\\"189.txt\\\\\\\")\\\\n                    let u = \\\\\\\"https://cloud.189.cn/api/portal/getFileInfo.action\\\\\\\"\\\\n                    let res = JSON.parse(request(buildUrl(u, {\\\\n                        \\\\\\\"fileId\\\\\\\": id\\\\n                    }), {\\\\n                        headers: {\\\\n                            \\\\\\\"Cookie\\\\\\\": cookie,\\\\n                            \\\\\\\"Accept\\\\\\\": \\\\\\\"application/json;charset=UTF-8\\\\\\\",\\\\n                            \\\\\\\"User-Agent\\\\\\\": PC_UA\\\\n                        }\\\\n                    }))\\\\n                    if ($.movie.includes(getHzm(name))) {\\\\n                        return JSON.stringify({\\\\n                            urls: [\\\\\\\"https:\\\\\\\" + res.downloadUrl + \\\\\\\"#isVideo=true#\\\\\\\"],\\\\n                            headers: {\\\\n                                \\\\\\\"Cookie\\\\\\\": cookie.replace(/;/g, \\\\\\\"；；\\\\\\\"),\\\\n                                \\\\\\\"User-Agent\\\\\\\": PC_UA.replace(/;/g, \\\\\\\"；；\\\\\\\")\\\\n                            }\\\\n                        })\\\\n                    } else if ($.audio.includes(getHzm(name))) {\\\\n                        return JSON.stringify({\\\\n                            urls: [\\\\\\\"https:\\\\\\\" + res.downloadUrl + \\\\\\\"#isVideo=true#\\\\\\\"],\\\\n                            headers: {\\\\n                                \\\\\\\"Cookie\\\\\\\": cookie.replace(/;/g, \\\\\\\"；；\\\\\\\"),\\\\n                                \\\\\\\"User-Agent\\\\\\\": PC_UA.replace(/;/g, \\\\\\\"；；\\\\\\\")\\\\n                            }\\\\n                        })\\\\n                    } else if ($.img.includes(getHzm(name))) {\\\\n                        return \\\\\\\"https:\\\\\\\" + res.downloadUrl + `#.jpg@User-Agent=${PC_UA}@Cookie=${cookie}`\\\\n                    } else {\\\\n                        return \\\\\\\"download://https:\\\\\\\" + res.downloadUrl + `@User-Agent=${PC_UA}@Cookie=${cookie}`\\\\n                    }\\\\n                }, item.id, item.name)\\\\n            })\\\\n        })\\\\n    } else {\\\\n        d.unshift({\\\\n            title: \\\\\\\"登陆\\\\\\\",\\\\n            url: \\\\\\\"hiker://page/login3\\\\\\\",\\\\n            col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n        })\\\\n    }\\\\n} catch (e) {\\\\n    d.unshift({\\\\n        title: \\\\\\\"登陆\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/login3\\\\\\\",\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n    })\\\\n    log(e.message)\\\\n    toast(\\\\\\\"程序可能出错了，请查看日志\\\\\\\")\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"code3\\\",\\\"path\\\":\\\"code3\\\",\\\"rule\\\":\\\"$.exports.getFiles = function(id) {\\\\n    let u = \\\\\\\"https://cloud.189.cn/api/open/file/listFiles.action\\\\\\\"\\\\n    let res = request(buildUrl(u, {\\\\n        \\\\\\\"pageSize\\\\\\\": 1000,\\\\n        \\\\\\\"pageNum\\\\\\\": 1,\\\\n        \\\\\\\"mediaType\\\\\\\": 0,\\\\n        \\\\\\\"folderId\\\\\\\": id,\\\\n        \\\\\\\"iconOption\\\\\\\": 5,\\\\n        \\\\\\\"orderBy\\\\\\\": \\\\\\\"lastOpTime\\\\\\\",\\\\n        \\\\\\\"descending\\\\\\\": \\\\\\\"true\\\\\\\",\\\\n    }), {\\\\n        headers: {\\\\n            \\\\\\\"Cookie\\\\\\\": readFile(\\\\\\\"189.txt\\\\\\\"),\\\\n            \\\\\\\"Accept\\\\\\\": \\\\\\\"application/json;charset=UTF-8\\\\\\\",\\\\n            \\\\\\\"User-Agent\\\\\\\": PC_UA\\\\n        }\\\\n    })\\\\n    var json = res.replace(/\\\\\\\\\\\\\\\"id\\\\\\\\\\\\\\\":(\\\\\\\\d+)/g, '\\\\\\\"id\\\\\\\":\\\\\\\"$1\\\\\\\"') //解决js的精度问题\\\\n    return JSON.parse(json)\\\\n}\\\\n$.exports.getIcon = function(fileName) {\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    let root = \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\\\\\";\\\\n    let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\\\n    let hzm = getHzm(fileName)\\\\n    if (files.includes(hzm)) {\\\\n        img = root + hzm + '.svg';\\\\n    } else {\\\\n        img = root + \\\\\\\"文件.svg\\\\\\\"\\\\n    }\\\\n    return img\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"login3\\\",\\\"path\\\":\\\"login3\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\naddListener('onClose', () => {\\\\n    let c = getVar(\\\\\\\"https://cloud.189.cn/web/main\\\\\\\");\\\\n    log(c);\\\\n    saveFile(\\\\\\\"189.txt\\\\\\\", c);\\\\n    clearVar(\\\\\\\"https://cloud.189.cn/web/main\\\\\\\");\\\\n})\\\\nd.push({\\\\n    url: \\\\\\\"https://cloud.189.cn/web/login.html\\\\\\\",\\\\n    col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n    desc: \\\\\\\"100%&&float\\\\\\\",\\\\n    extra: {\\\\n        js: $.toString(() => {\\\\n            var url = location.href\\\\n            if (url.includes(\\\\\\\"https://cloud.189.cn/web/main\\\\\\\")) {\\\\n                let cookie = fba.getCookie(url);\\\\n                if (cookie != null && cookie.length > 0) {\\\\n                    fba.putVar(\\\\\\\"https://cloud.189.cn/web/main\\\\\\\", cookie);\\\\n                    alert(\\\\\\\"已获取到cookie\\\\\\\");\\\\n                    fba.back();                  \\\\n                }\\\\n            }\\\\n        }),\\\\n        ua: PC_UA,\\\\n        canBack: true\\\\n    }\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"夸克网盘\\\",\\\"path\\\":\\\"夸克网盘\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\ntry {\\\\n    if (fileExist(\\\\\\\"quark.txt\\\\\\\")) {\\\\n        const {\\\\n            getIcon,\\\\n            getHzm,\\\\n            getLink\\\\n        } = $.require(\\\\\\\"hiker://page/code4\\\\\\\")\\\\n        var cookie = readFile(\\\\\\\"quark.txt\\\\\\\")\\\\n        let userinfo = JSON.parse(request(\\\\\\\"https://pan.quark.cn/account/info\\\\\\\", {\\\\n            headers: {\\\\n                \\\\\\\"Cookie\\\\\\\": cookie\\\\n            }\\\\n        }))\\\\n        let paths = storage0.getMyVar(\\\\\\\"paths\\\\\\\", [{\\\\n            \\\\\\\"id\\\\\\\": \\\\\\\"0\\\\\\\",\\\\n            \\\\\\\"name\\\\\\\": \\\\\\\"根目录\\\\\\\"\\\\n        }])\\\\n        if (MY_PAGE == 1) {\\\\n            d.push({\\\\n                title: userinfo.data.nickname,\\\\n                img: userinfo.data.avatarUri,\\\\n                url: \\\\\\\"hiker://page/settings4\\\\\\\",\\\\n                col_type: \\\\\\\"avatar\\\\\\\"\\\\n            })\\\\n            paths.forEach((item, i) => {\\\\n                d.push({\\\\n                    title: item.name,\\\\n                    col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                    url: $().lazyRule((paths, i) => {\\\\n                        storage0.putMyVar(\\\\\\\"paths\\\\\\\", paths.slice(0, i + 1))\\\\n                        refreshPage()\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, paths, i)\\\\n                })\\\\n            })\\\\n        }\\\\n        let res = JSON.parse(request(buildUrl(\\\\\\\"https://drive.quark.cn/1/clouddrive/file/sort\\\\\\\", {\\\\n            \\\\\\\"pdir_fid\\\\\\\": paths[paths.length - 1].id,\\\\n            \\\\\\\"fr\\\\\\\": \\\\\\\"pc\\\\\\\",\\\\n            \\\\\\\"pr\\\\\\\": \\\\\\\"ucpro\\\\\\\",\\\\n            \\\\\\\"_size\\\\\\\": 10,\\\\n            \\\\\\\"_fetch_total\\\\\\\": \\\\\\\"1\\\\\\\",\\\\n            \\\\\\\"_sort\\\\\\\": \\\\\\\"file_type:asc,file_name:asc\\\\\\\",\\\\n            \\\\\\\"_page\\\\\\\": getParam(\\\\\\\"page\\\\\\\")\\\\n        }), {\\\\n            headers: {\\\\n                \\\\\\\"Cookie\\\\\\\": cookie,\\\\n                \\\\\\\"Accept\\\\\\\": \\\\\\\"application/json, text/plain, */*\\\\\\\",\\\\n                \\\\\\\"Referer\\\\\\\": \\\\\\\"https://pan.quark.cn/\\\\\\\"\\\\n            }\\\\n        }))\\\\n        res.data.list.forEach(item => {\\\\n            if (!item.file) {\\\\n                var url = $().lazyRule((item, paths) => {\\\\n                    paths.push({\\\\n                        id: item.fid,\\\\n                        name: item.file_name\\\\n                    })\\\\n                    storage0.putMyVar(\\\\\\\"paths\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, item, paths)\\\\n            } else if ($.movie.includes(getHzm(item.file_name))) {\\\\n                var url = getLink(item, cookie, \\\\\\\"movie\\\\\\\")\\\\n            } else if ($.audio.includes(getHzm(item.file_name))) {\\\\n                var url = getLink(item, cookie, \\\\\\\"audio\\\\\\\")\\\\n            } else if ($.img.includes(getHzm(item.file_name))) {\\\\n                var url = getLink(item, cookie, \\\\\\\"img\\\\\\\")\\\\n            } else {\\\\n                var url = getLink(item, cookie)\\\\n            }\\\\n            d.push({\\\\n                title: item.file_name,\\\\n                img: getIcon(item),\\\\n                url: url,\\\\n                col_type: \\\\\\\"avatar\\\\\\\"\\\\n            })\\\\n        })\\\\n    } else {\\\\n        if (MY_PAGE == 1) {\\\\n            d.push({\\\\n                title: \\\\\\\"登陆\\\\\\\",\\\\n                col_type: \\\\\\\"text_1\\\\\\\",\\\\n                url: \\\\\\\"hiker://page/settings4\\\\\\\"\\\\n            })\\\\n        }\\\\n    }\\\\n} catch (e) {\\\\n    log(e.message)\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"code4\\\",\\\"path\\\":\\\"code4\\\",\\\"rule\\\":\\\"$.exports.getIcon = function(content) {\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/code\\\\\\\")\\\\n    let root = \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\\\\\";\\\\n    if (!content.file) {\\\\n        img = root + \\\\\\\"文件夹.svg\\\\\\\"\\\\n    } else {\\\\n        let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\\\n        let fileName = content.file_name\\\\n        let hzm = getHzm(fileName)\\\\n        if (files.includes(hzm)) {\\\\n            img = root + hzm + '.svg';\\\\n        } else {\\\\n            img = root + \\\\\\\"文件.svg\\\\\\\"\\\\n        }\\\\n    }\\\\n    return img\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\\n$.exports.getLink = function(item, cookie, ext) {\\\\n    var url = $().lazyRule((fid, cookie, ext) => {\\\\n        let res = JSON.parse(post(\\\\\\\"https://drive.quark.cn/1/clouddrive/file/download?pr=ucpro&fr=pc\\\\\\\", {\\\\n            headers: {\\\\n                \\\\\\\"Cookie\\\\\\\": cookie,\\\\n                \\\\\\\"Accept\\\\\\\": \\\\\\\"application/json, text/plain, */*\\\\\\\",\\\\n                \\\\\\\"Referer\\\\\\\": \\\\\\\"https://pan.quark.cn/\\\\\\\"\\\\n            },\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"fids\\\\\\\": [fid]\\\\n            })\\\\n        }))\\\\n        if (ext == \\\\\\\"movie\\\\\\\") {\\\\n            return JSON.stringify({\\\\n                urls: [res.data[0].download_url + \\\\\\\"#isVideo=true#\\\\\\\"],\\\\n                headers: {\\\\n                    \\\\\\\"Cookie\\\\\\\": cookie.replace(/;/g, \\\\\\\"；；\\\\\\\"),\\\\n                    \\\\\\\"Referer\\\\\\\": \\\\\\\"https://pan.quark.cn/\\\\\\\"\\\\n                }\\\\n            })\\\\n        } else if (ext == \\\\\\\"audio\\\\\\\") {\\\\n            return JSON.stringify({\\\\n                urls: [res.data[0].download_url + \\\\\\\"#isMusic=true#\\\\\\\"],\\\\n                headers: {\\\\n                    \\\\\\\"Cookie\\\\\\\": cookie.replace(/;/g, \\\\\\\"；；\\\\\\\"),\\\\n                    \\\\\\\"Referer\\\\\\\": \\\\\\\"https://pan.quark.cn/\\\\\\\"\\\\n                }\\\\n            })\\\\n        } else if (ext == \\\\\\\"img\\\\\\\") {\\\\n            return res.data[0].download_url + `@Referer=https://pan.quark.cn/@Cookie=${cookie}`\\\\n        } else {\\\\n            return \\\\\\\"download://\\\\\\\" + res.data[0].download_url + `@Referer=https://pan.quark.cn/@Cookie=${cookie}`\\\\n        }\\\\n    }, item.fid, cookie, ext)\\\\n    return url\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"settings4\\\",\\\"path\\\":\\\"settings4\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\naddListener('onClose', () => {\\\\n    saveFile(\\\\\\\"quark.txt\\\\\\\", getVar(\\\\\\\"https://pan.quark.cn/list#/list/all\\\\\\\"))\\\\n    clearVar(\\\\\\\"https://pan.quark.cn/list#/list/all\\\\\\\");\\\\n})\\\\nd.push({\\\\n    url: \\\\\\\"https://pan.quark.cn/\\\\\\\",\\\\n    col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n    desc: \\\\\\\"100%&&float\\\\\\\",\\\\n    extra: {\\\\n        js: $.toString(() => {\\\\n            var url = location.href\\\\n            if (url == \\\\\\\"https://pan.quark.cn/list#/list/all\\\\\\\") {\\\\n                let cookie = fba.getCookie(url);\\\\n                if (cookie != null && cookie.length > 0) {\\\\n                    fba.putVar(url, cookie);\\\\n                    alert(\\\\\\\"已获取到cookie\\\\\\\");\\\\n                    fba.back();\\\\n                }\\\\n            }\\\\n        }),\\\\n        ua: PC_UA,\\\\n        canBack: true\\\\n    }\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"关于\\\",\\\"path\\\":\\\"about\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\naddListener(\\\\\\\"onClose\\\\\\\", $.toString(() => {\\\\n    clearMyVar(\\\\\\\"c\\\\\\\");\\\\n}));\\\\nd.push($.require(\\\\\\\"hiker://page/about2\\\\\\\"));\\\\nd.push({\\\\n    title: \\\\\\\"\\\\\\\",\\\\n    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule(() => {\\\\n        let c = parseInt(getMyVar(\\\\\\\"c\\\\\\\", \\\\\\\"1\\\\\\\"))\\\\n        if (c >= 5) {\\\\n            confirm({\\\\n                title: \\\\\\\"温馨提示\\\\\\\",\\\\n                content: \\\\\\\"确定要开启开发者模式吗？注意开启该模式则表示后续您的所有操作均为主观能动操作，所产生的一切问题与责任均由您自己承担\\\\\\\",\\\\n                confirm: $.toString(() => {\\\\n                    setItem(\\\\\\\"dev\\\\\\\", \\\\\\\"1\\\\\\\");\\\\n                    return \\\\\\\"toast://已开启开发者模式\\\\\\\"\\\\n                })\\\\n            });\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        } else {\\\\n            putMyVar(\\\\\\\"c\\\\\\\", c + 1 + \\\\\\\"\\\\\\\");\\\\n            return \\\\\\\"hiker://empty\\\\\\\";\\\\n        }\\\\n    }),\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n    desc: \\\\\\\"\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\",\\\\n    extra: {\\\\n        lineVisible: false\\\\n    }\\\\n});\\\\n\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"关于2\\\",\\\"path\\\":\\\"about2\\\",\\\"rule\\\":\\\"$.exports = {\\\\n    title: \\\\\\\"本规则基于开源项目：<a href=\\\\\\\\\\\\\\\"https://github.com/alist-org/alist\\\\\\\\\\\\\\\">Alist</a>，探索不使用服务器实现Alist逻辑，本规则所有代码全部开源，仅限个人使用，仅供研究、学习和测试，禁止转载分享到第三方平台\\\\\\\",\\\\n    url: \\\\\\\"hiker://empty\\\\\\\",\\\\n    col_type: \\\\\\\"rich_text\\\\\\\",\\\\n    desc: \\\\\\\"\\\\\\\",\\\\n    pic_url: \\\\\\\"\\\\\\\"\\\\n}\\\"}]\",\"proxy\":\"\"}","picUrl":"http://alist.joegu.tk/d/rules/%E5%A4%B8%E5%85%8B_5.8.6.223.png","title":"夸克网盘"}