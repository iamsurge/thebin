class Program
{
    static void Main(string[] args)
    {
        Pizza pizza1 = new ItalianPizza();
        pizza1 = new TomatoPizza(pizza1); // итальянская пицца с томатами
        Console.WriteLine("Название: {0}", pizza1.Name);
        Console.WriteLine("Цена: {0}", pizza1.GetCost());
 
        Pizza pizza2 = new ItalianPizza();
        pizza2 = new CheesePizza(pizza2);// итальянская пиццы с сыром
        Console.WriteLine("Название: {0}", pizza2.Name);
        Console.WriteLine("Цена: {0}", pizza2.GetCost());
 
        Pizza pizza3 = new BulgarianPizza();
        pizza3 = new TomatoPizza(pizza3);
        pizza3 = new CheesePizza(pizza3);// болгарская пиццы с томатами и сыром
        Console.WriteLine("Название: {0}", pizza3.Name);
        Console.WriteLine("Цена: {0}", pizza3.GetCost());
 
        Console.ReadLine();
    }
}
 
// В качестве компонента здесь выступает абстрактный класс Pizza,
// который определяет базовую функциональность в виде свойства Name и метода GetCost()
abstract class Pizza
{
    protected Pizza(string name) => 
        Name = name;
    
    public string Name { get; }
    public abstract int GetCost();
}

// Компонента Pizza реализуется ItalianPizza (конкретная компонента) 
class ItalianPizza : Pizza
{
    public ItalianPizza() : base("Итальянская пицца")
    { }
    public override int GetCost() => 10;
}
// Компонента Pizza реализуется BulgarianPizza (конкретная компонента) 
class BulgarianPizza : Pizza
{
    public BulgarianPizza()
        : base("Болгарская пицца")
    { }
    public override int GetCost() => 8;
}

// Декоратором является абстрактный класс PizzaDecorator,
// который унаследован от класса Pizza и содержит ссылку на декорируемый объект Pizza.
// В отличие от формальной схемы здесь установка декорируемого объекта происходит не в методе SetComponent, а в конструкторе.
abstract class PizzaDecorator : Pizza
{
    protected readonly Pizza Pizza;

    protected PizzaDecorator(string name, Pizza pizza) : base(name) => 
        Pizza = pizza;
}

// Отдельные функциональности - добавление томатов и сыры к пиццам реализованы через классы TomatoPizza и CheesePizza,
// которые обертывают объект Pizza и добавляют к его имени название добавки,
// а к цене - стоимость добавки, то есть переопределяя метод GetCost и изменяя значение свойства Name.
class TomatoPizza : PizzaDecorator
{
    public TomatoPizza(Pizza pizza) 
        : base(pizza.Name + ", с томатами", pizza)
    { }
 
    public override int GetCost() => 
        Pizza.GetCost() + 3;
}
 
class CheesePizza : PizzaDecorator
{
    public CheesePizza(Pizza pizza)
        : base(pizza.Name + ", с сыром", pizza)
    { }
 
    public override int GetCost() => 
        Pizza.GetCost() + 5;
}