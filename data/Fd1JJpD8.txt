#include <filesystem>
#include <fstream>
#include <string>
#include <vector>

namespace gllang
{
	namespace fs  = std::filesystem;
	using namespace std;
	
	vector<string> read_lines(fs::path straightPath)		 // Чтение файла по линиям
	{														//
		if (straightPath.empty()) return vector<string>{}; // Проверка на пустоту файла
		vector<string> lines;							  // Массив Линий 
		string		   line;							 // Получение Линии
		ifstream	   file;							// Чтение Файла
													   // 
		file.open(straightPath);					  // Открытие Файла
													 //	
		while (std::getline(file, line, '\n'))		// Чтение Строк
		{										   //
			lines.push_back(line);				  // Заполнение Массива линиями
		}										 //
		file.close();							// Закрытие Файла
											   //
		return lines;						  // Возращение массива линий
	}

	vector<string> read_directory(fs::path directory, bool fullpath) // Получение файлов в директории
	{
		if (directory.empty()) return vector<string>{}; // проверка если директория пуста

		vector<string> files_in_directory{};
		if (fullpath)	// Проверка на запрос полного пути или же нет
			for (auto& value : fs::directory_iterator(directory))
				files_in_directory.push_back(value.path().string());	
		else
			for (auto& value : fs::directory_iterator(directory))
				files_in_directory.push_back(value.path().filename().string());

		return files_in_directory;
	}

	vector<string> read_recursive_directory(fs::path directory)
	{
		if (directory.empty()) return vector<string>{}; // проверка если директория пуста
		
		vector<string> files_in_directores{};

		for (auto& value : fs::recursive_directory_iterator(directory))
			files_in_directores.push_back(value.path().string());

		return files_in_directores;
	}
	
}