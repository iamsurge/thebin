class Solution {
public:
    string dfs(int count, unordered_map<int, string>& memo) {
        if(count == 1) return "1";
        if(memo.find(count) != memo.end()) return memo[count];
        string curr = dfs(count - 1, memo);
        int n = curr.size();
        string ans = "";
        for(int i = 0; i < n; i++) {
            int count = 1;
            char curr_char = curr[i];
            while(i < n and curr[i] == curr[i + 1]) {
                count++;
                i++;
            }
            ans += to_string(count) + curr_char;
        }
        memo[count] = ans;
        return ans;
    }
    string countAndSay(int n) {
        unordered_map<int, string> memo;
        return dfs(n, memo);
    }
};