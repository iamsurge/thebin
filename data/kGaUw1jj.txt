#Credit to TechSkylander1518 and Maruno! (I used the debug code as a base for most of this)

def fillPokedex
    GameData::Species.each do |species_data|
      sp = species_data.species
      f = species_data.form
      # Record each form of each species as seen and owned
      if f == 0
        if species_data.single_gendered?
          g = (species_data.gender_ratio == :AlwaysFemale) ? 1 : 0
          $player.pokedex.register(sp, g, f, 0, false)
          $player.pokedex.register(sp, g, f, 1, false)
        else   # Both male and female
          $player.pokedex.register(sp, 0, f, 0, false)
          $player.pokedex.register(sp, 0, f, 1, false)
          $player.pokedex.register(sp, 1, f, 0, false)
          $player.pokedex.register(sp, 1, f, 1, false)
        end
        $player.pokedex.set_owned(sp, false)
      elsif species_data.real_form_name && !species_data.real_form_name.empty?
        g = (species_data.gender_ratio == :AlwaysFemale) ? 1 : 0
        $player.pokedex.register(sp, g, f, 0, false)
        $player.pokedex.register(sp, g, f, 1, false)
      end
    end
end
 
MenuHandlers.add(:debug_menu, :fill_pokedex, {
  "name"        => _INTL("Fill Pokédex"),
  "parent"      => :player_menu,
  "description" => _INTL("Register all species and forms in the Pokédex."),
  "effect"      => proc { fillPokedex
  }
})

def pokeDex
  $player.has_pokedex = true
  $player.pokedex.unlock(-1)
  pbFadeOutIn {
    scene = PokemonPokedex_Scene.new
    screen = PokemonPokedexScreen.new(scene)
    screen.pbStartScreen
    menu.pbRefresh
  }
  $player.has_pokedex = false
end