#include <stdio.h>
#include <stdlib.h>
#include <sys/socket.h>
#include <sys/types.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <netdb.h>
#include <unistd.h>
#include <fcntl.h>
#include <string.h>
#include <signal.h>
#include <time.h>

#define PORT 9091

int sock_d,client_d;

void signal_handler(int);


int main(){
    signal(SIGINT,signal_handler);
    struct sockaddr_in serv_addr,cli_addr;
    int opt_val = 1;
    char buffer[50] = {0},temp[20] = {0};
    time_t rawtime;

    time(&rawtime);

    bzero(&serv_addr,sizeof(serv_addr));
    bzero(&cli_addr,sizeof(cli_addr));

    printf("Creating server...\n");

    if((sock_d = socket(AF_INET,SOCK_DGRAM,0)) == -1){
        perror("Error creating server socket");
        exit(EXIT_FAILURE);
    }

    sleep(2);
    printf("Server created. Setting options...\n");
    
    if(setsockopt(sock_d,SOL_SOCKET,SO_REUSEADDR | SO_REUSEPORT | SO_BROADCAST,&opt_val,sizeof(opt_val)) == -1){
        perror("Error setting socket option");
        
        if(close(sock_d) == -1){
            perror("Error closing socket in set options");
            exit(EXIT_FAILURE);
        }
        exit(EXIT_FAILURE);
    }

    sleep(2);
    printf("Options set. Binding port and address...\n");

    serv_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    serv_addr.sin_family = AF_INET;
    serv_addr.sin_port = htonl(PORT);

    // cli_addr.sin_addr.s_addr = inet_addr("127.0.0.1");
    // cli_addr.sin_family = AF_INET;
    // cli_addr.sin_port = htonl(PORT);

    if(bind(sock_d,(struct sockaddr *) &serv_addr,sizeof(serv_addr)) == -1){
        perror("Error binding server socket");

        if(close(sock_d) == -1){
            perror("Error closing server socket in bind");
            exit(EXIT_FAILURE);
        }
        exit(EXIT_FAILURE);
    }

    sleep(2);
    printf("Sending time to client...\n");

    strcpy(buffer,ctime(&rawtime));

    int cli_len = sizeof(cli_addr);

    int sent_bytes = sendto(sock_d,buffer,sizeof(buffer),0,(struct sockaddr *) &cli_addr,sizeof(cli_addr));

    sleep(2);
    printf("Sent %d bytes\n",sent_bytes);
    printf("Time sent\n");

}

void signal_handler(int sig){
    if(close(sock_d) == -1){
        perror("Error closing server socket with SIGINT");
        exit(EXIT_FAILURE);
    }

    if(close(client_d) == -1){
        perror("Error closing client socket with SIGINT");
        exit(EXIT_FAILURE);
    }

    exit(EXIT_SUCCESS);
}