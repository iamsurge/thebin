#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}

int px, py;

struct v {
    int x, y, id;
};

bool cmp (v a, v b) {
    int da = pow(a.x - px, 2) + pow(a.y - py, 2);
    int db = pow(b.x - px, 2) + pow(b.y - py, 2);
    return da < db || da == db && a.id < b.id;
}

int main() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    int d;
    cin >> d >> px >> py;

    if (px >= 0 && px <= d && py >= 0 && py <= d - px) {
        cout << 0 ;
        exit(0);
    }


    v a, b, c;
    a = {0, 0, 1};
    b = {d, 0, 2};
    c = {0, d, 3};
    vector <v> al = {a, b, c};
    sort(al.begin(), al.end(), cmp);
    cout << al[0].id;
}
