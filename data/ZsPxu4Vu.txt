from random import shuffle

class Card:
    
    """Данный класс моделирует карты."""
    
    suits = ['пикей',
             'червей',
             'бубей',
             'треф']
    
    """В values первые два элемента содержат None, чтобы значения
                совападали с их индесными позициями."""
    values = [None, None, '2', '3',
              '4', '5', '6', '7',
              '8', '9', '10',
              'валета', 'даму',
              'короля', 'туза']
    
    def __init__(self, v, s):
        """suit и value - целые числа."""
        self.value = v
        self.suit = s
        
    def __lt__(self, c2):
        """Магический метод __lt__ используется для сравнения экземпляров
                                в меньшую сторону."""
        if self.value < c2.value:
            return True
        if self.value == c2.value:
            if self.suit < c2.value:
                return True
            else:
                return False
    
    def __gt__(self, c2):
        """Магический метод __lt__ используется для сравнения экземпляров
                                в большую сторону."""
        if self.value > c2.value:
            return True
        if self.value == c2.value:
            if self.suit > c2.value:
                return True
            else:
                return False
    
    def __repr__(self):
        """Магический метод __repr__ вернет строкое представление экземпляра."""
        v = self.values[self.value] + ' ' \
            + self.suits[self.suit]
        return v

class Deck:
    
    """Данный класс олицетворяет колоду карт."""
    
    def __init__(self):
        self.cards = []
        
        """Создание колоды карт, как экземляров класса Card."""
        for i in range(2, 15):
            for j in range(4):
                self.cards.append(Card(i, j))
            shuffle(self.cards)
    
    def rm_card(self):
        if len(self.cards) == 0:
            return None
        return self.cards.pop()

class Player:
    
    """Данный класс олицетовряет игроков."""
    
    def __init__(self, name):
        self.wins = 0
        self.card = None
        self.name = name

class Game:
    def __init__(self):
        name1 = input('Имя игрока 1: ')
        name2 = input('Имя игрока 2: ')
        self.deck = Deck()
        self.p1 = Player(name1)
        self.p2 = Player(name2)
    
    def wins(self, winner):
        print(f'{winner} забирает карты')
    
    def draw(self, p1n, p1c, p2n, p2c):
        print(f'{p1n} кладет {p1c}, а {p2n} кладет {p2c}')
    
    def play_game(self):
        cards = self.deck.cards
        print('Поехал!')
        while len(cards) >= 2:
            m = 'Нажмите Х для выхода. Нажмите любую другую клавишу для начала игры '
            response = input(m)
            if response == 'Х':
                break
            p1c = self.deck.rm_card()
            p2c = self.deck.rm_card()
            p1n = self.p1.name
            p2n = self.p2.name
            self.draw(p1n, p1c, p2n, p2c)
            if p1c > p2c:
                self.p1.wins += 1
                self.wins(self.p1.name)
            else:
                self.p2.wins += 1
                self.wins(self.p2.name)
        
        win = self.winner(self.p1, self.p2)
        print(f'Игра окончена. {win} выиграл!')
    
    def winner(self, p1, p2):
        if p1.wins > p2.wins:
            return p1.name
        if p1.wins < p2.wins:
            return p2.name
        return 'Ничья!'
    
game = Game()
game.play_game()