#include <iostream>

template <class KeyType, class ValueType>
struct Node {
    KeyType key_;
    ValueType value_;
    Node *next_ = nullptr;
};

template <class KeyType, class ValueType, class Func = std::hash<KeyType>>
class HashTable {
public:
    HashTable();

    explicit HashTable(Func fun);

    HashTable(size_t max_size, double coeff, Func fun = std::hash<KeyType>());

    ~HashTable();

    void insert(KeyType key, ValueType data);

    ValueType *find(KeyType key);

    void erase(KeyType key);

    Node<KeyType, ValueType> &operator[](uint64_t index) const;

    Node<KeyType, ValueType> at(uint64_t index);

    [[nodiscard]] size_t size() const;

    [[nodiscard]] size_t capacity() const;
private:
};
