import csv
from enum import Enum
import datetime
import os


class Commands(Enum):
    DELETE_NOTE = 1
    ADD_NOTE = 2
    CHANGE_NOTE = 3
    GET_NOTE_INFO = 4
    SORT_BOOKS_YEAR_OF_PUBLISHING = 5
    SORT_BOOKS_NAME = 6
    SORT_BOOKS_AUTHOR = 7
    SAVE_IN_CSV_FILE = 8
    LOAD_FROM_CSV_FILE = 9
    PRINT_BOOKS = 10
    EXIT = 0


class Book:
    number_of_racks = 100  # количество стеллажей
    number_of_shelves = 10  # количество полок

    def __init__(self):
        self.__cipher: str = ''             # шифр книги
        self.__author: str = ''             # автор книги
        self.__name: str = ''               # название книги
        self.__year_of_publishing: int = 0  # год издания
        self.__rack_number: int = 1         # номер стеллажа
        self.__shelf_number: int = 1        # номер полки

    def print_book(self):
        print(f'Шифр: {self.cipher}\n'
              f'Автор: {self.author}\n'
              f'Название: {self.name}\n'
              f'Год издания: {self.year_of_publishing}\n'
              f'Номер стеллажа: {self.rack_number}\n'
              f'Номер полки: {self.shelf_number}')

    @property
    def cipher(self):
        return self.__cipher

    @cipher.setter
    def cipher(self, cipher: str):
        self.__cipher = cipher

    @property
    def author(self):
        return self.__author

    @author.setter
    def author(self, author: str):
        self.__author = author

    @property
    def name(self):
        return self.__name

    @name.setter
    def name(self, name: str):
        self.__name = name

    @property
    def year_of_publishing(self):
        return self.__year_of_publishing

    @year_of_publishing.setter
    def year_of_publishing(self, year_of_publishing: int):
        if not 1 <= year_of_publishing <= datetime.datetime.now().year:
            raise ValueError('Number out of range!')
        self.__year_of_publishing = year_of_publishing

    @property
    def rack_number(self):
        return self.__rack_number

    @rack_number.setter
    def rack_number(self, rack_number: int):
        if not 1 <= rack_number <= self.number_of_racks:
            raise ValueError('Number out of range!')
        else:
            self.__rack_number = rack_number

    @property
    def shelf_number(self):
        return self.__shelf_number

    @shelf_number.setter
    def shelf_number(self, shelf_number: int):
        if not 1 <= shelf_number <= self.number_of_shelves:
            raise ValueError('Number out of range!')
        self.__shelf_number = shelf_number


def input_int(message: str, start: int, end: int) -> int:
    valid = False
    n = 0
    while not valid:
        try:
            n = int(input(message))
        except ValueError:
            print('Вы ввели не число. Попробуйте снова.')
        else:
            if start <= n <= end:
                valid = True
            else:
                print('Введённое число вне диапазона!')
    return n


def input_book(data: list[Book]) -> Book:
    new_book = Book()
    new_cipher, valid_cipher = '', False
    while not valid_cipher:
        new_cipher = input('Введите шифр книги: ')
        valid_cipher = new_cipher not in list(i.cipher for i in data)
        if not valid_cipher:
            print('Шифр должен быть уникальным!')
    new_book.cipher = new_cipher
    new_book.author = input('Введите автора книги: ')
    new_book.name = input('Введите название книги: ')
    new_book.year_of_publishing = input_int('Введите год издания книги: ', 1, datetime.datetime.now().year)
    new_book.rack_number = input_int('Введите номер стеллажа: ', 1, Book.number_of_racks)
    new_book.shelf_number = input_int('Введите номер полки: ', 1, Book.number_of_shelves)
    return new_book


def m_print_books(data: list[Book]):
    if not data:
        print('Список пустой!')
    else:
        print('Книги:')
        for i in data:
            i.print_book()
            print()


def m_delete_note(data: list[Book]):
    if not data:
        print('Список пустой!')
    else:
        cipher = input('Введите шифр книги, которую хотите удалить: ')
        index = -1
        for i in range(len(data)):
            if data[i].cipher == cipher:
                index = i
                break
        if index != -1:
            data.pop(index)
            print(f'Элемент с шифром {cipher} удален')
        else:
            print('Книги с таким шифром не существует!')


def m_add_note(data: list[Book]):
    if not data:
        print('Список пустой!')
    else:
        data.append(input_book(data))


def m_change_note(data: list[Book]):
    if not data:
        print('Список пустой!')
    else:
        cipher = input('Введите шифр книги, которую хотите изменить: ')
        index = -1
        for i in range(len(data)):
            if data[i].cipher == cipher:
                index = i
                break
        if index != -1:
            data[index] = input_book(data)
        else:
            print('Книги с таким шифром не существует!')


def m_get_note_info(data: list[Book]):
    if not data:
        print('Список пустой!')
    else:
        cipher = input('Введите шифр книги, информацию о которой вы хотите получить: ')
        find_book = False
        for i in data:
            if i.cipher == cipher:
                find_book = True
                i.print_book()
        if not find_book:
            print('Не существует книги с таким шифром!')


def m_sort_books_year_of_publishing(data: list[Book]):
    data.sort(key=lambda x: x.year_of_publishing)
    print('Книги отсортированы по году издания')


def m_sort_books_name(data: list[Book]):
    data.sort(key=lambda x: x.name)
    print('Книги отсортированы по названию')


def m_sort_books_author(data: list[Book]):
    data.sort(key=lambda x: x.author)
    print('Книги отсортированы по автору')


def m_save_in_csv_file(data: list[Book], data_file: str):
    with open(data_file, 'w', encoding='utf-8',newline='') as file:
        writer = csv.writer(file)
        for i in data:
            if i:
                writer.writerow([i.cipher, i.author, i.name, i.year_of_publishing, i.rack_number, i.shelf_number])
    print('Книги сохранены в файл')


def m_load_from_csv_file(data: list[Book], data_file: str):
    with open(data_file, 'r', encoding='utf-8') as file:
        reader = csv.reader(file)
        for curr_book in reader:
            if curr_book:
                book = Book()
                print(curr_book)
                book.cipher = curr_book[0]
                book.author = curr_book[1]
                book.name = curr_book[2]
                book.year_of_publishing = int(curr_book[3])
                book.rack_number = int(curr_book[4])
                book.shelf_number = int(curr_book[5])
                data.append(book)
    print('Данные успешно считаны из файла!')


def print_menu():
    print(f' 1. Удалить записать по шифру (по шифру)\n'
          f' 2. Добавить новую запись\n'
          f' 3. Изменить запись (по шифру)\n'
          f' 4. Получить информацию о книге (по шифру)\n'
          f' 5. Отсортировать книги по году издания\n'
          f' 6. Отсортировать книги по названию\n'
          f' 7. Отсортировать книги по автору\n'
          f' 8. Сохранить книги в файл\n'
          f' 9. Загрузить книги из файла\n'
          f'10. Вывести книги\n'
          f' 0. Выход')


def main():
    _exit = False
    data_file = 'data.csv'
    data = []
    while not _exit:
        os.system('cls')
        print_menu()
        command = input_int('Введите команду: ', 0, 10)
        #  os.system('cls')
        if command == Commands.DELETE_NOTE.value:
            m_delete_note(data)
        elif command == Commands.ADD_NOTE.value:
            m_add_note(data)
        elif command == Commands.CHANGE_NOTE.value:
            m_change_note(data)
        elif command == Commands.GET_NOTE_INFO.value:
            m_get_note_info(data)
        elif command == Commands.SORT_BOOKS_YEAR_OF_PUBLISHING.value:
            m_sort_books_year_of_publishing(data)
        elif command == Commands.SORT_BOOKS_NAME.value:
            m_sort_books_name(data)
        elif command == Commands.SORT_BOOKS_AUTHOR.value:
            m_sort_books_author(data)
        elif command == Commands.SAVE_IN_CSV_FILE.value:
            m_save_in_csv_file(data, data_file)
        elif command == Commands.LOAD_FROM_CSV_FILE.value:
            data = []
            m_load_from_csv_file(data, data_file)
        elif command == Commands.PRINT_BOOKS.value:
            m_print_books(data)
        elif command == Commands.EXIT.value:
            _exit = True
        if not _exit:
            os.system('pause')


if __name__ == '__main__':
    main()


'''
code1,Харпер Ли,Убить пересмешника,1960,4,7
code2,Джейн Остен,Гордость и предубеждение,1813,5,8
code3,Джордж Оруэлл,1984,1948,31,5
code4,Джоан Роулинг,Гарри Поттер и философский камень,1995,1,8
code5,Дж. Р. Р. Толкиен,Властелин колец,1954,7,2
'''