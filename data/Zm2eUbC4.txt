import seaborn as sns
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import math
from pprint import pprint

nums = """(  0.03;  1.53)  ( -2.11; -1.39)  ( -0.37; -3.73)  (  0.65; -1.58)  ( -2.14; -1.95)  (  0.39; -1.83)  (  0.97; -3.08)  ( -2.82; -3.87) ( -2.42; -1.00)  (  1.15; -2.24)  ( -2.45; -3.32)  ( -2.47; -1.95)  ( -0.54; -2.84)  ( -4.91; -3.61)  ( -4.46;  0.66)  ( -1.54; -0.71)  ( -1.45; -1.78)  ( -2.00; -1.55)  ( -5.25;  0.81)  ( -4.19; -2.11)  ( -5.52; -0.60)  ( -0.18; -2.91)  ( -4.01; -0.08)  ( -3.18; -0.94)  (  1.84; -6.09)  ( -6.67; -1.00)  ( -2.43;  1.19)  ( -4.11;  0.66)  ( -3.85; -2.03)  ( -6.53; -0.56)  ( -2.75; -2.99)  ( -1.09; -2.08)  ( -2.40; -4.30)  ( -1.33; -3.43)  (  1.09; -2.37)  ( -0.97; -3.12)  ( -4.02; -0.43)  ( -3.26; -2.21)  ( -3.90; -0.69)  ( -1.58; -1.70)  ( -5.69; -1.58)  (  1.42; -3.70)  ( -2.68; -1.36)  ( -2.21; -3.20)  ( -3.12; -3.25)  ( -3.83; -0.63)  ( -1.29;  0.74)  ( -0.83; -1.62)  (  1.96; -5.95)  (  0.09; -6.90)  """

nums = nums.split('(')
del nums[0]
nums = [x.replace(' ', '') for x in nums]
nums = [x.replace(')', '') for x in nums]
nums = [x.split(';') for x in nums]
for x in range(len(nums)):
    nums[x] = [float(y) for y in nums[x]]
# pprint(nums)

n = len(nums)

print("n:", n)

x_vals = [float(x[0]) for x in nums]
y_vals = [float(y[1]) for y in nums]
matx = round(sum(x_vals) / n, 4)
maty = round(sum(y_vals) / n, 4)

print("\n\tМат ожидание по x:", matx, "\tМат ожидание по y:", maty)

dispx = round(1 / (n - 1) * sum([(x - matx) ** 2 for x in x_vals]), 4)
dispy = round(1 / (n - 1) * sum([(y - maty) ** 2 for y in y_vals]), 4)

print("\tДисперсия по x:", dispx, "\tДисперсия по y:", dispy)

Kxy = round(1 / (n - 1) * sum([(j[0] - matx) * (j[1] - maty) for j in nums]), 4)

print("\tОценка корреляционного момента:", Kxy)

Rxy = round(Kxy / (math.sqrt(dispx) * math.sqrt(dispy)), 4)

print("\tОценка коэффициента корреляции:", Rxy, '\n')

z = 1.96

a = round(0.5 * math.log((1 + Rxy) / (1 - Rxy)) - z / (math.sqrt(n - 3)), 3)

b = round(0.5 * math.log((1 + Rxy) / (1 - Rxy)) + z / (math.sqrt(n - 3)), 3)

print("a:", a, "b:", b, "z:", z)

I = [(math.exp(2 * a) - 1) / (math.exp(2 * a) + 1), (math.exp(2 * b) - 1) / (math.exp(2 * b) + 1)]

print("\n\tДоверительный интервал:", I, '\n')

Z = (abs(Rxy) * math.sqrt(n)) / (1 - Rxy ** 2)

print("Z:", z)

argF = 1.96

print("Za", argF)

a1 = round(Kxy / (dispx ** 2), 3)

a0 = round(maty - a1 * matx, 3)

print("a1:", a1, "a0", a0)

print(f"Уравнение регрессии - y(x) = {a0} + {a1} * x")

x = np.linspace(min(x_vals), max(x_vals), 1000)

print(min(x_vals), max(x_vals))

y = a1 * x + a0

plt.grid(which='major', linewidth=1)
plt.xlabel("X")
plt.ylabel("Y")

plt.plot(x, y, 'r')
plt.plot(x_vals, y_vals, 'o')
plt.show()