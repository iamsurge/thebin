use tide::Request;
use tide::prelude::*;
use std::env;

#[derive(Debug, Deserialize)]
struct Participant {
    login: String,
    group: i64,
    is_admin: bool,
    santa_for: String,
}
#[derive(Debug, Deserialize)]
struct Token_serv{
    token_to_do: String
}

#[async_std::main]
async fn main() -> tide::Result<()> {
    let args: Vec<String> = env::args().collect();

    let address = &args[1];
    let port = &args[2];

    let listen = format!("{}:{}", address, port);
    let mut server = tide::new();
    tide::log::start();

    let mut temp_token = String::new();

    server.at("/newMemb").post(new_member);
    server.at("/newMemb").get(|_| async { Ok("Member added") });
    server.at("/test").post(new_member);
    server.at("/test").get(|_| async { Ok("test") });

    server.listen(listen).await?;
    Ok(())
}

async fn new_member(mut req: Request<()>) -> tide::Result {
    let Participant {login, group, is_admin, santa_for, } = req.body_json().await?;
    println!("Fokin {}", login);
    Ok(format!("Fokin {}!", login   ).into())
}
