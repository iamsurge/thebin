// Task 1
// На каком пуле будет выполнен onNext

Flowable.just("Hello")
            .subscribeOn(Schedulers.io())
            .subscribeOn(Schedulers.computation())
            .subscribeBy(
                onNext = {
                    println(it)
                },
                onError = {}
            )


// Task 2
// На каком пуле будет выполнен onNext
val stream = PublishProcessor.create<String>()
stream
    .subscribeOn(Schedulers.io())
    .subscribeOn(Schedulers.computation())
    .subscribeBy(
        onNext = {
            println(it)
        },
        onError = {}
    )

stream.onNext("Hello")

// Task 3
// На каком пуле будет выполнен onNext
val stream = PublishProcessor.create<String>()
stream
    .observeOn(Schedulers.io())
    .observeOn(Schedulers.computation())
    .subscribeBy(
        onNext = {
            println(it)
        },
        onError = {}
    )

stream.onNext("Hello")

// Task 4
// На каком пуле будет выполнен onNext
val first = Flowable.just("Hello").delay(10, TimeUnit.SECONDS)
val second = Flowable.just("Test").observeOn(AndroidSchedulers.mainThread())

Flowable.zip(
    first,
    second,
    { f, s -> f + s }
).subscribeBy(
    onNext = {
        println(it)
    },
    onError = {}
)