### Eclipse Workspace Patch 1.0
#P L2J_Mobius_Essence_6.3_Crusader
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTablePane.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTablePane.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTablePane.java	(working copy)
@@ -0,0 +1,174 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Dimension;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseEvent;
+
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import javax.swing.JTable;
+import javax.swing.ListSelectionModel;
+import javax.swing.SwingUtilities;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.l2jmobius.commons.threads.ThreadPool;
+
+public class PlayerTablePane extends JPanel
+{
+	private static Logger log = LoggerFactory.getLogger(PlayerTablePane.class.getName());
+	
+	private static final long serialVersionUID = 1L;
+	
+	public class ButtonListeners implements ActionListener
+	{
+		@Override
+		public void actionPerformed(ActionEvent evt)
+		{
+			// String cmd = evt.getActionCommand();
+		}
+	}
+	
+	private final GridBagLayout layout = new GridBagLayout();
+	
+	// Npc Table
+	private final PlayerTableModel playerTableModel;
+	private final JTable playerTable;
+	
+	private int currentSelectedPlayer = -1;
+	
+	public PlayerTablePane()
+	{
+		setLayout(layout);
+		
+		GridBagConstraints cons = new GridBagConstraints();
+		cons.insets = new Insets(5, 5, 5, 5);
+		
+		JPanel smallPane = new JPanel();
+		smallPane.setLayout(layout);
+		
+		/*
+		 * ButtonListeners buttonListeners = new ButtonListeners(); JButton analyze = new JButton("Check Targeting"); analyze.addActionListener(buttonListeners); analyze.setActionCommand("CheckTargeting"); smallPane.add(analyze, cons); cons.weightx = 0.5; cons.weighty = 0.1; cons.gridx = 0;
+		 * cons.gridy = 0; cons.gridheight = 1; cons.anchor = GridBagConstraints.WEST; cons.fill = GridBagConstraints.HORIZONTAL; add(smallPane, cons);
+		 */
+		
+		playerTableModel = new PlayerTableModel();
+		playerTable = new JTable(playerTableModel);
+		playerTable.addMouseListener(new PlayerTableMouseListener(this));
+		playerTable.setDefaultRenderer(Object.class, new PlayerTableRenderer(playerTableModel));
+		playerTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+		playerTable.getSelectionModel().addListSelectionListener(new PlayerSelectionListener());
+		playerTable.getColumnModel().getColumn(0).setMaxWidth(100);
+		JScrollPane scrollPane = new JScrollPane(playerTable);
+		scrollPane.setMinimumSize(new Dimension(250, 500));
+		cons.weightx = 0.5;
+		cons.weighty = 0.95;
+		cons.gridx = 0;
+		cons.gridy = 0;
+		cons.gridheight = 1;
+		cons.fill = GridBagConstraints.BOTH;
+		add(scrollPane, cons);
+		ThreadPool.scheduleAtFixedRate(this::updateTable, 10000, 1000);
+	}
+	
+	public void setSelectedPlayer(int startIndex, int endIndex)
+	{
+		getPlayerTable().setAutoscrolls(true);
+		getPlayerTable().getSelectionModel().setSelectionInterval(startIndex, endIndex);
+		getPlayerTable().scrollRectToVisible(getPlayerTable().getCellRect(startIndex, 0, true));
+	}
+	
+	public void updateTable()
+	{
+		SwingUtilities.invokeLater(() ->
+		{
+			if (playerTableModel.updateData())
+			{
+				getPlayerTable().updateUI();
+			}
+		});
+	}
+	
+	public JTable getPlayerTable()
+	{
+		return playerTable;
+	}
+	
+	public PlayerTableModel getPlayerTableModel()
+	{
+		return playerTableModel;
+	}
+	
+	public void updateCurrentPlayer()
+	{
+		updateCurrentPlayer(false);
+	}
+	
+	public void updateCurrentPlayer(boolean forced)
+	{
+		if (!forced && (currentSelectedPlayer == playerTable.getSelectedRow()))
+		{
+		}
+		else
+		{
+			currentSelectedPlayer = playerTable.getSelectedRow();
+		}
+		
+		// Player player = World.getInstance().getPlayer((Integer)playerTableModel.getValueAt(playerTable.getSelectedRow(), 0));
+	}
+	
+	public void setTableSelectByMouseEvent(MouseEvent e)
+	{
+		int rowNumber = playerTable.rowAtPoint(e.getPoint());
+		playerTable.getSelectionModel().setSelectionInterval(rowNumber, rowNumber);
+	}
+	
+	public class PlayerSelectionListener implements ListSelectionListener
+	{
+		@Override
+		public void valueChanged(ListSelectionEvent e)
+		{
+			PlayerTablePane view = PlayerTablePane.this;
+			// If cell selection is enabled, both row and column change events are fired
+			if (e.getSource() == view.getPlayerTable().getSelectionModel())
+			{
+				view.updateCurrentPlayer();
+			}
+		}
+	}
+	
+	@Override
+	public void finalize() throws Throwable
+	{
+		super.finalize();
+		log.info("Finalized: " + getClass().getSimpleName());
+	}
+}
\ No newline at end of file
Index: java/org/slf4j/IMarkerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/IMarkerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTableModel.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTableModel.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTableModel.java	(working copy)
@@ -0,0 +1,114 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import javax.swing.table.AbstractTableModel;
+
+/**
+* @author Puppyrawr
+*/
+
+import org.l2jmobius.gameserver.gui.ServerGui;
+import org.l2jmobius.gameserver.model.World;
+import org.l2jmobius.gameserver.model.actor.Player;
+
+class PlayerTableModel extends AbstractTableModel
+{
+	private static final long serialVersionUID = 1L;
+	
+	private static final String[] columnNames =
+	{
+		"Id",
+		"Name",
+		"Level"
+	};
+	
+	private Player[] players = new Player[] {};
+	
+	public PlayerTableModel()
+	{
+	}
+	
+	@Override
+	public int getColumnCount()
+	{
+		return columnNames.length;
+	}
+	
+	@Override
+	public int getRowCount()
+	{
+		return players.length;
+	}
+	
+	@Override
+	public String getColumnName(int col)
+	{
+		return columnNames[col];
+	}
+	
+	@Override
+	public Object getValueAt(int row, int col)
+	{
+		switch (col)
+		{
+			case 0:
+				return players[row].getObjectId();
+			case 1:
+				return players[row].getName();
+			case 2:
+				return players[row].getLevel();
+		}
+		return "";
+	}
+	
+	public synchronized boolean updateData()
+	{
+		Player[] players = new Player[World.getInstance().getPlayers().size()];
+		World.getInstance().getPlayers().toArray(players);
+		int playerCount = 0;
+		int shopCount = 0;
+		for (Player player : players)
+		{
+			if ((player != null) && player.isOnline())
+			{
+				if ((player.getClient() == null) || player.getClient().isDetached())
+				{
+					shopCount++;
+				}
+				else
+				{
+					playerCount++;
+				}
+			}
+		}
+		
+		ServerGui.getMainFrame().setTitle("L2 AquaSage [ L2J Mobius ] | Players online: " + playerCount + " | Offline shops: " + shopCount + " | Total: " + (playerCount + shopCount));
+		if ((players.length == players.length) && !((players.length > 0) && (players[0] == players[0])))
+		{
+			return false;
+		}
+		
+		this.players = players;
+		return true;
+	}
+}
\ No newline at end of file
Index: java/org/slf4j/helpers/SubstituteLoggerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/SubstituteLoggerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/spi/LoggerFactoryBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/LoggerFactoryBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTableMouseListener.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTableMouseListener.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTableMouseListener.java	(working copy)
@@ -0,0 +1,124 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+
+/**
+* @author Puppyrawr
+*/
+import javax.swing.JPopupMenu;
+
+public class PlayerTableMouseListener implements MouseListener, ActionListener
+{
+	private final JPopupMenu popupMenu;
+	private final PlayerTablePane parent;
+	
+	public PlayerTableMouseListener(PlayerTablePane parent)
+	{
+		this.parent = parent;
+		popupMenu = new JPopupMenu();
+		
+		/*
+		 * JMenuItem itemOpenGo = new JMenuItem("Do not show this"); itemOpenGo.setActionCommand("mark"); itemOpenGo.addActionListener(this); popupMenu.add(itemOpenGo); JMenuItem itemOpen = new JMenuItem("Mark Yellow (What is this for??)"); itemOpen.setActionCommand("yellow");
+		 * itemOpen.addActionListener(this); popupMenu.add(itemOpen);
+		 */
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseReleased(MouseEvent e)
+	{
+		checkPopup(e);
+		/*
+		 * if (e.isPopupTrigger()) { showPopupMenu(e); }
+		 */
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
+	 */
+	@Override
+	public void actionPerformed(ActionEvent e)
+	{
+		/*
+		 * if (e.getActionCommand().equals("yellow")) { JTable table = parent.getPlayerTable(); /*int row = parent.getSelectedPacketindex(); //int col = table.columnAtPoint(e.getPoint()); boolean val = !((PacketTableModel) table.getModel()).getIsMarked(row); ((PacketTableModel)
+		 * table.getModel()).setIsMarked(row, val); table.repaint(); }
+		 */
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseClicked(MouseEvent e)
+	{
+		checkPopup(e);
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseEntered(MouseEvent e)
+	{
+		
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseExited(MouseEvent e)
+	{
+		
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mousePressed(MouseEvent e)
+	{
+		checkPopup(e);
+	}
+	
+	private void checkPopup(MouseEvent e)
+	{
+		parent.setTableSelectByMouseEvent(e);
+		if (e.isPopupTrigger())
+		{
+			popupMenu.show(parent.getPlayerTable(), e.getX(), e.getY());
+		}
+	}
+}
\ No newline at end of file
Index: dist/game/data/scripts/handlers/chathandlers/ChatAlliance.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatAlliance.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatAlliance.java	(working copy)
@@ -19,6 +19,7 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.model.actor.Player;
 import org.l2jmobius.gameserver.model.itemcontainer.Inventory;
@@ -56,6 +57,9 @@
 			return;
 		}
 		
+		String allyName = activeChar.getClan().getAllyName();
+		ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.AllyChat, "[" + allyName + "] " + activeChar.getName() + ": " + text, allyName, activeChar.getName());
+		
 		if (shareLocation)
 		{
 			if (activeChar.getInventory().getInventoryItemCount(Inventory.LCOIN_ID, -1) < Config.SHARING_LOCATION_COST)
Index: dist/game/data/scripts/handlers/chathandlers/ChatWorld.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatWorld.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatWorld.java	(working copy)
@@ -24,6 +24,7 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.model.World;
 import org.l2jmobius.gameserver.model.actor.Player;
@@ -108,6 +109,7 @@
 				activeChar.destroyItemByItemId("Shared Location", Inventory.LCOIN_ID, Config.SHARING_LOCATION_COST, activeChar, true);
 			}
 			
+			ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.GlobalChat, activeChar.getName() + ": " + text);
 			final CreatureSay cs = new CreatureSay(activeChar, type, activeChar.getName(), text, shareLocation);
 			if (Config.FACTION_SYSTEM_ENABLED && Config.FACTION_SPECIFIC_CHAT)
 			{
Index: java/org/slf4j/spi/MDCAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/MDCAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: dist/game/data/scripts/handlers/chathandlers/ChatPartyRoomAll.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatPartyRoomAll.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatPartyRoomAll.java	(working copy)
@@ -19,7 +19,9 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
+import org.l2jmobius.gameserver.instancemanager.MapRegionManager;
 import org.l2jmobius.gameserver.model.actor.Player;
 import org.l2jmobius.gameserver.network.SystemMessageId;
 import org.l2jmobius.gameserver.network.serverpackets.CreatureSay;
@@ -50,6 +52,9 @@
 				activeChar.sendPacket(SystemMessageId.CHATTING_IS_CURRENTLY_PROHIBITED);
 				return;
 			}
+			
+			String nearTown = MapRegionManager.getInstance().getClosestTownName(activeChar);
+			ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.AllChat, "[Somewhere near " + nearTown + "] " + activeChar.getName() + ": " + text, nearTown, activeChar.getName());
 			activeChar.getParty().getCommandChannel().broadcastCreatureSay(new CreatureSay(activeChar, type, activeChar.getName(), text, shareLocation), activeChar);
 		}
 	}
Index: java/org/slf4j/helpers/NamedLoggerBase.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/NamedLoggerBase.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/MessageFormatter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/MessageFormatter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/LoggerFactory.java
===================================================================
--- java/org/slf4j/LoggerFactory.java	(nonexistent)
+++ java/org/slf4j/LoggerFactory.java	(working copy)
@@ -0,0 +1,35 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.slf4j;
+
+/**
+ * @author Puppyrawr
+ */
+public class LoggerFactory
+{
+	
+	/**
+	 * @param name
+	 * @return
+	 */
+	public static Logger getLogger(String name)
+	{
+		// TODO Auto-generated method stub
+		return null;
+	}
+	
+}
Index: java/org/slf4j/ILoggerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/ILoggerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/IMarkerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/IMarkerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/Logger.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/Logger.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/Logger.java
===================================================================
--- java/org/slf4j/Logger.java	(nonexistent)
+++ java/org/slf4j/Logger.java	(working copy)
@@ -0,0 +1,34 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.slf4j;
+
+/**
+ * @author Puppyrawr
+ */
+public class Logger
+{
+	
+	/**
+	 * @param string
+	 */
+	public void info(String string)
+	{
+		// TODO Auto-generated method stub
+		
+	}
+	
+}
Index: java/org/slf4j/LoggerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/LoggerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/LoggerFactory.java
===================================================================
--- java/org/slf4j/LoggerFactory.java	(nonexistent)
+++ java/org/slf4j/LoggerFactory.java	(working copy)
@@ -0,0 +1,35 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.slf4j;
+
+/**
+ * @author Puppyrawr
+ */
+public class LoggerFactory
+{
+	
+	/**
+	 * @param name
+	 * @return
+	 */
+	public static Logger getLogger(String name)
+	{
+		// TODO Auto-generated method stub
+		return null;
+	}
+	
+}
Index: java/org/slf4j/MDC.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/MDC.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/Marker.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/Marker.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/MarkerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/MarkerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/BasicMDCAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/BasicMDCAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/BasicMarker.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/BasicMarker.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/BasicMarkerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/BasicMarkerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/MarkerIgnoringBase.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/MarkerIgnoringBase.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/MessageFormatter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/MessageFormatter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/NOPLogger.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/NOPLogger.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/NOPMakerAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/NOPMakerAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/NamedLoggerBase.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/NamedLoggerBase.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/SubstituteLoggerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/SubstituteLoggerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/Util.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/Util.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/CopyOnInheritThreadLocal.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/CopyOnInheritThreadLocal.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/LogbackMDCAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/LogbackMDCAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/StaticLoggerBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/StaticLoggerBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/StaticMDCBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/StaticMDCBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/StaticMarkerBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/StaticMarkerBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/spi/LocationAwareLogger.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/LocationAwareLogger.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/spi/LoggerFactoryBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/LoggerFactoryBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/spi/MDCAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/MDCAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/spi/MarkerFactoryBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/MarkerFactoryBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/MarkerIgnoringBase.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/MarkerIgnoringBase.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/AdminTab.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/AdminTab.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/AdminTab.java	(working copy)
@@ -0,0 +1,82 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Dimension;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+
+import javax.swing.JButton;
+import javax.swing.JPanel;
+import javax.swing.JSplitPane;
+import javax.swing.JTextArea;
+
+/**
+ * @author Puppyrawr
+ */
+
+import org.l2jmobius.gameserver.gui.playertable.PlayerTablePane;
+import org.l2jmobius.gameserver.util.Broadcast;
+
+public class AdminTab extends JPanel
+{
+	private static final long serialVersionUID = 1L;
+	private final GridBagConstraints cons = new GridBagConstraints();
+	private final GridBagLayout layout = new GridBagLayout();
+	private final JPanel listPanel = new PlayerTablePane();
+	private final JPanel infoPanel = new JPanel();
+	
+	public AdminTab()
+	{
+		
+		JTextArea talkadmin = new JTextArea();
+		JButton bouton = new JButton("Send");
+		bouton.addActionListener(e -> Broadcast.toAllOnlinePlayers(talkadmin.getText()));
+		setLayout(layout);
+		cons.fill = GridBagConstraints.HORIZONTAL;
+		
+		infoPanel.setLayout(layout);
+		
+		cons.insets = new Insets(5, 5, 5, 5);
+		cons.gridwidth = 3;
+		cons.gridheight = 20;
+		cons.weightx = 1;
+		cons.weighty = 1;
+		cons.gridx = 0;
+		cons.gridy = 2;
+		
+		infoPanel.add(bouton, cons);
+		
+		infoPanel.setPreferredSize(new Dimension(235, infoPanel.getHeight()));
+		
+		cons.fill = GridBagConstraints.BOTH;
+		cons.weightx = 1;
+		cons.weighty = 1;
+		
+		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, listPanel, infoPanel);
+		splitPane.setResizeWeight(0.3);
+		splitPane.setDividerLocation(535);
+		add(splitPane, cons);
+		listPanel.add(talkadmin, cons);
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/CommandTab.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/CommandTab.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/CommandTab.java	(working copy)
@@ -0,0 +1,103 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+/**
+ * @author Puppyrawr
+ */
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+
+import org.l2jmobius.gameserver.model.World;
+import org.l2jmobius.gameserver.model.actor.Player;
+import org.l2jmobius.gameserver.util.Broadcast;
+
+public class CommandTab extends JPanel
+{
+	private static final long serialVersionUID = 1L;
+	
+	public CommandTab()
+	{
+		
+		JLabel labelSendMessage = new JLabel("Send Message: ");
+		JTextField textAuthor = new JTextField("Admin", 15);
+		JTextField textMessage = new JTextField("", 15);
+		JButton sendButton = new JButton("Send");
+		
+		sendButton.addActionListener(e ->
+		{
+			Broadcast.toAllOnlinePlayers(textAuthor.getText() + ": " + textMessage.getText());
+			textMessage.setText("");
+		});
+		
+		GridBagLayout layout = new GridBagLayout();
+		this.setLayout(layout);
+		GridBagConstraints gbc = new GridBagConstraints();
+		
+		// Put constraints on different buttons
+		gbc.fill = GridBagConstraints.HORIZONTAL;
+		gbc.gridx = 0;
+		gbc.gridy = 0;
+		
+		this.add(labelSendMessage, gbc);
+		gbc.gridx = 1;
+		this.add(textAuthor, gbc);
+		gbc.gridx = 2;
+		this.add(textMessage, gbc);
+		gbc.gridx = 3;
+		this.add(sendButton, gbc);
+		
+		JLabel labelGiveItems = new JLabel("give items");
+		JTextField textItemId = new JTextField("item id", 15);
+		JTextField textAmount = new JTextField("item amount", 15);
+		JTextField textPlayer = new JTextField("player", 15);
+		JButton sendItemButton = new JButton("Send");
+		sendItemButton.addActionListener(e ->
+		{
+			int itemId = Integer.parseInt(textItemId.getText());
+			int itemAmount = Integer.parseInt(textAmount.getText());
+			String playerName = textPlayer.getText();
+			Player player = World.getInstance().getPlayer(playerName);
+			if (player != null)
+			{
+				player.addItem("admin", itemId, itemAmount, player, true);
+			}
+		});
+		
+		gbc.gridx = 0;
+		gbc.gridy = 2;
+		this.add(labelGiveItems, gbc);
+		gbc.gridx = 1;
+		this.add(textItemId, gbc);
+		gbc.gridx = 2;
+		this.add(textAmount, gbc);
+		gbc.gridx = 3;
+		this.add(textPlayer, gbc);
+		gbc.gridx = 4;
+		this.add(sendItemButton, gbc);
+		
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/ConsoleTab.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/ConsoleTab.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/ConsoleTab.java	(working copy)
@@ -0,0 +1,482 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.Rectangle;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @author Puppyrawr
+ */
+import javax.swing.BorderFactory;
+import javax.swing.JButton;
+import javax.swing.JCheckBox;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import javax.swing.JSplitPane;
+import javax.swing.JTextField;
+import javax.swing.JTextPane;
+import javax.swing.ScrollPaneConstants;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+import javax.swing.text.AttributeSet;
+import javax.swing.text.Document;
+import javax.swing.text.Element;
+import javax.swing.text.SimpleAttributeSet;
+import javax.swing.text.StyleConstants;
+import javax.swing.text.StyleContext;
+
+public class ConsoleTab extends JPanel
+{
+	private static final long serialVersionUID = 1L;
+	private static final int MSG_STORAGE_LIMIT = 5000;
+	private static final int MSG_DISPLAY_LIMIT = 500;
+	
+	public enum ConsoleFilter
+	{
+		Console(null, Color.red, true),
+		Errors(Console, new Color(220, 50, 50), true),
+		Warnings(Console, new Color(220, 220, 50), true),
+		Info(Console, new Color(50, 220, 50), true),
+		Chat(null, Color.white, true),
+		Announcements(Chat, Color.cyan, true),
+		GlobalChat(Chat, new Color(255, 100, 100), true),
+		HeroChat(Chat, new Color(63, 137, 249), true),
+		ShoutChat(Chat, new Color(255, 130, 0), true, "Region"),
+		TradeChat(Chat, new Color(234, 165, 245), true, "Region"),
+		AllChat(Chat, Color.white, false, "Region", "Talker"),
+		AllyChat(Chat, new Color(120, 255, 120), false, "Ally Name", "Talker"),
+		ClanChat(Chat, new Color(120, 120, 255), false, "Clan Name", "Talker"),
+		PartyChat(Chat, Color.green, false, "Party Leader", "Talker"),
+		WhisperChat(Chat, Color.magenta, false, "Talker", "Listener");
+		
+		public final ConsoleFilter parent;
+		public final List<ConsoleFilter> children = new ArrayList<>();
+		public final Color textColor;
+		public final boolean startEnabled;
+		public final String[] subFilters;
+		
+		ConsoleFilter(ConsoleFilter p, Color tc, boolean se, String... sf)
+		{
+			parent = p;
+			if (parent != null)
+			{
+				parent.children.add(this);
+			}
+			textColor = tc;
+			startEnabled = se;
+			subFilters = sf;
+		}
+	}
+	
+	private static class ConsoleLine
+	{
+		public final ConsoleFilter filter;
+		public final String text;
+		public final String[] extra;
+		
+		public ConsoleLine(ConsoleFilter f, String t, String... e)
+		{
+			filter = f;
+			text = t;
+			extra = e;
+		}
+	}
+	
+	private static int instanceId = 0;
+	private static List<ConsoleTab> instances = new ArrayList<>();
+	private static List<ConsoleLine> messages = new ArrayList<>();
+	
+	private class ConsoleFilterInstance
+	{
+		public JCheckBox checkBox;
+		public JTextField[] textFields;
+		
+		public boolean isEnabled()
+		{
+			return checkBox.isSelected();
+		}
+	}
+	
+	private final ConsoleFilterInstance[] filters = new ConsoleFilterInstance[ConsoleFilter.values().length];
+	private final JTextPane textPane;
+	
+	public ConsoleTab(boolean main)
+	{
+		setLayout(new GridBagLayout());
+		JPanel leftPanel = new JPanel();
+		leftPanel.setLayout(new GridBagLayout());
+		
+		JPanel checkBoxes = new JPanel();
+		checkBoxes.setLayout(new GridBagLayout());
+		checkBoxes.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Show:"), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
+		
+		GridBagConstraints cons = new GridBagConstraints();
+		cons.anchor = GridBagConstraints.FIRST_LINE_START;
+		cons.fill = GridBagConstraints.HORIZONTAL;
+		cons.gridy = 0;
+		cons.weighty = 1;
+		int checkBoxesGridWidth = 20;
+		ConsoleActionListener listener = new ConsoleActionListener();
+		ConsoleSubFilterListener filterListener = new ConsoleSubFilterListener();
+		for (ConsoleFilter f : ConsoleFilter.values())
+		{
+			filters[f.ordinal()] = new ConsoleFilterInstance();
+			ConsoleFilterInstance fi = filters[f.ordinal()];
+			int depthLevel = 0;
+			ConsoleFilter child = f.parent;
+			while (child != null)
+			{
+				depthLevel++;
+				child = child.parent;
+			}
+			
+			cons.gridx = depthLevel;
+			cons.weightx = 1;
+			cons.gridwidth = 1;
+			fi.checkBox = new JCheckBox();
+			fi.checkBox.setActionCommand(f.name());
+			fi.checkBox.setSelected(f.startEnabled);
+			fi.checkBox.addActionListener(listener);
+			checkBoxes.add(fi.checkBox, cons);
+			cons.gridx = depthLevel + 1;
+			cons.weightx = 10;
+			cons.gridwidth = checkBoxesGridWidth - depthLevel - 1;
+			checkBoxes.add(new JLabel(f.name()), cons);
+			cons.gridy++;
+			fi.textFields = new JTextField[f.subFilters.length];
+			for (int i = 0; i < f.subFilters.length; i++)
+			{
+				cons.gridx = depthLevel + 2;
+				cons.weightx = 1;
+				cons.gridwidth = 1;
+				checkBoxes.add(new JLabel(f.subFilters[i] + ":"), cons);
+				cons.gridx = depthLevel + 3;
+				cons.weightx = 10;
+				cons.gridwidth = checkBoxesGridWidth - depthLevel - 3;
+				fi.textFields[i] = new JTextField();
+				fi.textFields[i].getDocument().addDocumentListener(filterListener);
+				checkBoxes.add(fi.textFields[i], cons);
+				cons.gridy++;
+			}
+		}
+		
+		// Add checkboxes to the left panel
+		cons.anchor = GridBagConstraints.FIRST_LINE_START;
+		cons.fill = GridBagConstraints.HORIZONTAL;
+		cons.insets = new Insets(5, 5, 5, 5);
+		cons.gridy = 0;
+		cons.gridx = 0;
+		leftPanel.add(checkBoxes, cons);
+		
+		cons.fill = GridBagConstraints.BOTH;
+		cons.weightx = 1;
+		cons.weighty = 1;
+		textPane = new JTextPane();
+		textPane.setBackground(new Color(30, 30, 30));
+		JScrollPane console = new JScrollPane(textPane, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
+		
+		cons.weightx = 1;
+		cons.weighty = 1;
+		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPanel, console);
+		splitPane.setResizeWeight(0.3);
+		splitPane.setDividerLocation(230);
+		add(splitPane, cons);
+		
+		instances.add(this);
+		if (main)
+		{
+			// Add new console window button
+			JButton button = new JButton("New Console Window");
+			button.setActionCommand("newConsoleWindow");
+			button.addActionListener(listener);
+			cons.anchor = GridBagConstraints.FIRST_LINE_START;
+			cons.fill = GridBagConstraints.HORIZONTAL;
+			cons.insets = new Insets(5, 5, 5, 5);
+			cons.gridy = 1;
+			cons.gridx = 0;
+			leftPanel.add(button, cons);
+		}
+		
+		reloadDoc();
+	}
+	
+	public synchronized static void appendMessage(ConsoleFilter f, String msg, String... extra)
+	{
+		try
+		{
+			messages.add(new ConsoleLine(f, msg, extra));
+			while (messages.size() > MSG_STORAGE_LIMIT)
+			{
+				messages.remove(0);
+			}
+			
+			for (ConsoleTab tab : instances)
+			{
+				tab.onAppendMessage(f, msg, extra);
+			}
+		}
+		catch (Exception e)
+		{
+			e.printStackTrace();
+		}
+	}
+	
+	public synchronized void onAppendMessage(ConsoleFilter f, String msg, String... extra)
+	{
+		ConsoleFilterInstance fi = filters[f.ordinal()];
+		if (!fi.isEnabled())
+		{
+			return;
+		}
+		
+		int emptySubFields = 0;
+		boolean pass = false;
+		for (int i = 0; i < fi.textFields.length; i++)
+		{
+			if (fi.textFields[i].getText().isEmpty())
+			{
+				emptySubFields++;
+				continue;
+			}
+			
+			if (extra[i].toLowerCase().contains(fi.textFields[i].getText()))
+			{
+				pass = true;
+			}
+		}
+		
+		if (!pass && (emptySubFields < f.subFilters.length))
+		{
+			return;
+		}
+		
+		msg += "\n";
+		StyleContext sc = StyleContext.getDefaultStyleContext();
+		AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, f.textColor);
+		
+		// aset = sc.addAttribute(aset, StyleConstants.Background, new Color(0, 100, 250));
+		if ((f == ConsoleFilter.Console) || ((f.parent != null) && (f.parent == ConsoleFilter.Console)))
+		{
+			aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
+			aset = sc.addAttribute(aset, StyleConstants.FontSize, 14);
+		}
+		else
+		{
+			aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Verdana");
+			aset = sc.addAttribute(aset, StyleConstants.FontSize, 12);
+		}
+		aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
+		
+		Document document = textPane.getDocument();
+		Element root = document.getDefaultRootElement();
+		while (root.getElementCount() > MSG_DISPLAY_LIMIT)
+		{
+			Element line = root.getElement(0);
+			int end = line.getEndOffset();
+			try
+			{
+				document.remove(0, end);
+			}
+			catch (Exception e)
+			{
+				e.printStackTrace();
+			}
+		}
+		
+		int len = document.getLength();
+		textPane.setCaretPosition(len);
+		textPane.setCharacterAttributes(aset, false);
+		textPane.replaceSelection(msg);
+		
+		EventQueue.invokeLater(() ->
+		{
+			Rectangle visibleRect = textPane.getVisibleRect();
+			if ((visibleRect.y + 100) > (textPane.getHeight() - visibleRect.height))
+			{
+				visibleRect.y = textPane.getHeight() - visibleRect.height;
+				textPane.scrollRectToVisible(visibleRect);
+			}
+		});
+	}
+	
+	public synchronized void reloadDoc()
+	{
+		textPane.setText("");
+		
+		for (ConsoleLine line : messages)
+		{
+			ConsoleFilter f = line.filter;
+			ConsoleFilterInstance fi = filters[f.ordinal()];
+			if (!fi.isEnabled())
+			{
+				continue;
+			}
+			
+			int emptySubFields = 0;
+			boolean pass = false;
+			for (int i = 0; i < fi.textFields.length; i++)
+			{
+				JTextField textField = fi.textFields[i];
+				if (textField.getText().isEmpty())
+				{
+					emptySubFields++;
+					continue;
+				}
+				
+				if (line.extra[i].toLowerCase().contains(textField.getText()))
+				{
+					pass = true;
+				}
+			}
+			
+			if (!pass && (emptySubFields < fi.textFields.length))
+			{
+				continue;
+			}
+			
+			String msg = line.text + "\n";
+			StyleContext sc = StyleContext.getDefaultStyleContext();
+			AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, f.textColor);
+			
+			// aset = sc.addAttribute(aset, StyleConstants.Background, new Color(0, 100, 250));
+			if ((f == ConsoleFilter.Console) || ((f.parent != null) && (f.parent == ConsoleFilter.Console)))
+			{
+				aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
+				aset = sc.addAttribute(aset, StyleConstants.FontSize, 14);
+			}
+			else
+			{
+				aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Verdana");
+				aset = sc.addAttribute(aset, StyleConstants.FontSize, 12);
+			}
+			aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
+			
+			Document document = textPane.getDocument();
+			Element root = document.getDefaultRootElement();
+			while (root.getElementCount() > MSG_DISPLAY_LIMIT)
+			{
+				Element elem = root.getElement(0);
+				int end = elem.getEndOffset();
+				try
+				{
+					document.remove(0, end);
+				}
+				catch (Exception e)
+				{
+					e.printStackTrace();
+				}
+			}
+			
+			int len = document.getLength();
+			textPane.setCaretPosition(len);
+			textPane.setCharacterAttributes(aset, false);
+			textPane.replaceSelection(msg);
+		}
+	}
+	
+	private class ConsoleActionListener implements ActionListener
+	{
+		@Override
+		public void actionPerformed(ActionEvent ae)
+		{
+			if (ae.getActionCommand().equalsIgnoreCase("newConsoleWindow"))
+			{
+				instanceId++;
+				JFrame extra = new JFrame("Console View #" + instanceId);
+				final ConsoleTab tab = new ConsoleTab(false);
+				extra.add(tab);
+				extra.addWindowListener(new WindowAdapter()
+				{
+					@Override
+					public void windowClosing(WindowEvent arg0)
+					{
+						instances.remove(tab);
+					}
+				});
+				extra.setMinimumSize(new Dimension(900, 600));
+				extra.setLocation(100, 100);
+				extra.setVisible(true);
+				tab.reloadDoc();
+				return;
+			}
+			
+			ConsoleFilter f = ConsoleFilter.valueOf(ae.getActionCommand());
+			if (f == null)
+			{
+				return;
+			}
+			
+			if (filters[f.ordinal()].isEnabled())
+			{
+				for (ConsoleFilter child : f.children)
+				{
+					filters[child.ordinal()].checkBox.setEnabled(true);
+				}
+			}
+			else
+			{
+				for (ConsoleFilter child : f.children)
+				{
+					filters[child.ordinal()].checkBox.setSelected(false);
+					filters[child.ordinal()].checkBox.setEnabled(false);
+				}
+			}
+			
+			reloadDoc();
+		}
+	}
+	
+	private class ConsoleSubFilterListener implements DocumentListener
+	{
+		@Override
+		public void changedUpdate(DocumentEvent e)
+		{
+			reloadDoc();
+		}
+		
+		@Override
+		public void insertUpdate(DocumentEvent e)
+		{
+			reloadDoc();
+		}
+		
+		@Override
+		public void removeUpdate(DocumentEvent e)
+		{
+			reloadDoc();
+		}
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/JTableButtonMouseListener.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/JTableButtonMouseListener.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/JTableButtonMouseListener.java	(working copy)
@@ -0,0 +1,112 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+
+/**
+ * @author Puppyrawr
+ */
+import javax.swing.JButton;
+import javax.swing.JComponent;
+import javax.swing.JTable;
+import javax.swing.table.TableColumnModel;
+
+public class JTableButtonMouseListener implements MouseListener
+{
+	private final JTable table;
+	
+	private void forwardEvent(MouseEvent e)
+	{
+		TableColumnModel columnModel = table.getColumnModel();
+		int column = columnModel.getColumnIndexAtX(e.getX());
+		int row = e.getY() / table.getRowHeight();
+		Object value;
+		JComponent c;
+		
+		if ((row >= table.getRowCount()) || (row < 0) || (column >= table.getColumnCount()) || (column < 0))
+		{
+			return;
+		}
+		
+		value = table.getValueAt(row, column);
+		
+		if (!(value instanceof JComponent))
+		{
+			return;
+		}
+		
+		c = (JComponent) value;
+		
+		if (c instanceof JButton)
+		{
+			JButton b = (JButton) c;
+			if (e.getID() == MouseEvent.MOUSE_PRESSED)
+			{
+				b.doClick(100);
+			}
+		}
+		c.dispatchEvent(new MouseEvent(c, e.getID(), e.getWhen(), e.getModifiers(), 0, 0, 1, e.isPopupTrigger(), e.getButton()));
+	}
+	
+	public JTableButtonMouseListener(JTable table)
+	{
+		this.table = table;
+	}
+	
+	@Override
+	public void mouseEntered(MouseEvent e)
+	{
+		forwardEvent(e);
+	}
+	
+	@Override
+	public void mouseExited(MouseEvent e)
+	{
+		forwardEvent(e);
+	}
+	
+	@Override
+	public void mousePressed(MouseEvent e)
+	{
+		forwardEvent(e);
+	}
+	
+	@Override
+	public void mouseClicked(MouseEvent e)
+	{
+		if (e.getSource() instanceof JButton)
+		{
+			forwardEvent(e);
+		}
+	}
+	
+	@Override
+	public void mouseReleased(MouseEvent e)
+	{
+		if (e.getSource() instanceof JButton)
+		{
+			forwardEvent(e);
+		}
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/ServerGui.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/ServerGui.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/ServerGui.java	(working copy)
@@ -0,0 +1,120 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.BorderLayout;
+import java.awt.Dimension;
+
+/**
+ * @author Puppyrawr
+ */
+import javax.swing.JFrame;
+import javax.swing.JTabbedPane;
+import javax.swing.WindowConstants;
+
+public class ServerGui
+{
+	private static JFrame frame;
+	
+	// private JMenuBar menuBar = new JMenuBar();
+	
+	// private JMenu fileMenu = new JMenu("File");
+	// private JMenu helpMenu = new JMenu("Help");
+	
+	// private ActionListener menuListener = new MenuActionListener();
+	
+	private static JTabbedPane tabPane = new JTabbedPane();
+	
+	private static ConsoleTab consoleTab;
+	
+	private static AdminTab adminTab;
+	
+	private static CommandTab commandTab;
+	
+	public void init()
+	{
+		frame = new JFrame("L2 Server");
+		
+		// Menu Bar Items
+		// File Menu
+		/*
+		 * JMenuItem itemExit = new JMenuItem("Exit"); itemExit.setActionCommand("Exit"); itemExit.addActionListener(menuListener); fileMenu.add(itemExit); //Help JMenuItem itemAbout = new JMenuItem("About"); itemAbout.setActionCommand("About"); itemAbout.addActionListener(menuListener);
+		 * helpMenu.add(itemAbout); menuBar.add(fileMenu); menuBar.add(helpMenu); frame.setJMenuBar(menuBar);
+		 */
+		
+		// Console Tab
+		consoleTab = new ConsoleTab(true);
+		adminTab = new AdminTab();
+		commandTab = new CommandTab();
+		
+		frame.setLayout(new BorderLayout());
+		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+		
+		tabPane.add("Console", consoleTab);
+		tabPane.add("Admin", adminTab);
+		tabPane.add("Command", commandTab);
+		
+		// build the frame
+		frame.add(tabPane, BorderLayout.CENTER);
+		
+		// add the window listeners
+		addListeners();
+		
+		frame.setLocation(50, 50);
+		frame.setMinimumSize(new Dimension(930, 700));
+		// frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
+		frame.setVisible(true);
+	}
+	
+	public JTabbedPane getTabPane()
+	{
+		return tabPane;
+	}
+	
+	private void addListeners()
+	{
+		// Window Closing
+		/*
+		 * frame.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent event) { close(); } });
+		 */
+	}
+	
+	// MenuActions
+	/*
+	 * public class MenuActionListener implements ActionListener { public void actionPerformed(ActionEvent ev) { String actionCmd = ev.getActionCommand(); if (actionCmd.equals("Exit")) { System.exit(0); } } }
+	 */
+	
+	public static JFrame getMainFrame()
+	{
+		return frame;
+	}
+	
+	public static ConsoleTab getConsoleTab()
+	{
+		return consoleTab;
+	}
+	
+	public static AdminTab getAdminTab()
+	{
+		return adminTab;
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/playertable/Logger.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/Logger.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/Logger.java	(working copy)
@@ -0,0 +1,25 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+public class Logger
+{
+	
+}
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTableModel.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTableModel.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTableModel.java	(working copy)
@@ -0,0 +1,114 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import javax.swing.table.AbstractTableModel;
+
+/**
+* @author Puppyrawr
+*/
+
+import org.l2jmobius.gameserver.gui.ServerGui;
+import org.l2jmobius.gameserver.model.World;
+import org.l2jmobius.gameserver.model.actor.Player;
+
+class PlayerTableModel extends AbstractTableModel
+{
+	private static final long serialVersionUID = 1L;
+	
+	private static final String[] columnNames =
+	{
+		"Id",
+		"Name",
+		"Level"
+	};
+	
+	private Player[] players = new Player[] {};
+	
+	public PlayerTableModel()
+	{
+	}
+	
+	@Override
+	public int getColumnCount()
+	{
+		return columnNames.length;
+	}
+	
+	@Override
+	public int getRowCount()
+	{
+		return players.length;
+	}
+	
+	@Override
+	public String getColumnName(int col)
+	{
+		return columnNames[col];
+	}
+	
+	@Override
+	public Object getValueAt(int row, int col)
+	{
+		switch (col)
+		{
+			case 0:
+				return players[row].getObjectId();
+			case 1:
+				return players[row].getName();
+			case 2:
+				return players[row].getLevel();
+		}
+		return "";
+	}
+	
+	public synchronized boolean updateData()
+	{
+		Player[] players = new Player[World.getInstance().getPlayers().size()];
+		World.getInstance().getPlayers().toArray(players);
+		int playerCount = 0;
+		int shopCount = 0;
+		for (Player player : players)
+		{
+			if ((player != null) && player.isOnline())
+			{
+				if ((player.getClient() == null) || player.getClient().isDetached())
+				{
+					shopCount++;
+				}
+				else
+				{
+					playerCount++;
+				}
+			}
+		}
+		
+		ServerGui.getMainFrame().setTitle("L2 AquaSage [ L2J Mobius ] | Players online: " + playerCount + " | Offline shops: " + shopCount + " | Total: " + (playerCount + shopCount));
+		if ((players.length == players.length) && !((players.length > 0) && (players[0] == players[0])))
+		{
+			return false;
+		}
+		
+		this.players = players;
+		return true;
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTableMouseListener.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTableMouseListener.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTableMouseListener.java	(working copy)
@@ -0,0 +1,124 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+
+/**
+* @author Puppyrawr
+*/
+import javax.swing.JPopupMenu;
+
+public class PlayerTableMouseListener implements MouseListener, ActionListener
+{
+	private final JPopupMenu popupMenu;
+	private final PlayerTablePane parent;
+	
+	public PlayerTableMouseListener(PlayerTablePane parent)
+	{
+		this.parent = parent;
+		popupMenu = new JPopupMenu();
+		
+		/*
+		 * JMenuItem itemOpenGo = new JMenuItem("Do not show this"); itemOpenGo.setActionCommand("mark"); itemOpenGo.addActionListener(this); popupMenu.add(itemOpenGo); JMenuItem itemOpen = new JMenuItem("Mark Yellow (What is this for??)"); itemOpen.setActionCommand("yellow");
+		 * itemOpen.addActionListener(this); popupMenu.add(itemOpen);
+		 */
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseReleased(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseReleased(MouseEvent e)
+	{
+		checkPopup(e);
+		/*
+		 * if (e.isPopupTrigger()) { showPopupMenu(e); }
+		 */
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.ActionListener#actionPerformed(java.awt.event.ActionEvent)
+	 */
+	@Override
+	public void actionPerformed(ActionEvent e)
+	{
+		/*
+		 * if (e.getActionCommand().equals("yellow")) { JTable table = parent.getPlayerTable(); /*int row = parent.getSelectedPacketindex(); //int col = table.columnAtPoint(e.getPoint()); boolean val = !((PacketTableModel) table.getModel()).getIsMarked(row); ((PacketTableModel)
+		 * table.getModel()).setIsMarked(row, val); table.repaint(); }
+		 */
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseClicked(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseClicked(MouseEvent e)
+	{
+		checkPopup(e);
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseEntered(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseEntered(MouseEvent e)
+	{
+		
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mouseExited(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mouseExited(MouseEvent e)
+	{
+		
+	}
+	
+	/*
+	 * (non-Javadoc)
+	 * @see java.awt.event.MouseListener#mousePressed(java.awt.event.MouseEvent)
+	 */
+	@Override
+	public void mousePressed(MouseEvent e)
+	{
+		checkPopup(e);
+	}
+	
+	private void checkPopup(MouseEvent e)
+	{
+		parent.setTableSelectByMouseEvent(e);
+		if (e.isPopupTrigger())
+		{
+			popupMenu.show(parent.getPlayerTable(), e.getX(), e.getY());
+		}
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTablePane.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTablePane.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTablePane.java	(working copy)
@@ -0,0 +1,174 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Dimension;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.MouseEvent;
+
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import javax.swing.JTable;
+import javax.swing.ListSelectionModel;
+import javax.swing.SwingUtilities;
+import javax.swing.event.ListSelectionEvent;
+import javax.swing.event.ListSelectionListener;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import org.l2jmobius.commons.threads.ThreadPool;
+
+public class PlayerTablePane extends JPanel
+{
+	private static Logger log = LoggerFactory.getLogger(PlayerTablePane.class.getName());
+	
+	private static final long serialVersionUID = 1L;
+	
+	public class ButtonListeners implements ActionListener
+	{
+		@Override
+		public void actionPerformed(ActionEvent evt)
+		{
+			// String cmd = evt.getActionCommand();
+		}
+	}
+	
+	private final GridBagLayout layout = new GridBagLayout();
+	
+	// Npc Table
+	private final PlayerTableModel playerTableModel;
+	private final JTable playerTable;
+	
+	private int currentSelectedPlayer = -1;
+	
+	public PlayerTablePane()
+	{
+		setLayout(layout);
+		
+		GridBagConstraints cons = new GridBagConstraints();
+		cons.insets = new Insets(5, 5, 5, 5);
+		
+		JPanel smallPane = new JPanel();
+		smallPane.setLayout(layout);
+		
+		/*
+		 * ButtonListeners buttonListeners = new ButtonListeners(); JButton analyze = new JButton("Check Targeting"); analyze.addActionListener(buttonListeners); analyze.setActionCommand("CheckTargeting"); smallPane.add(analyze, cons); cons.weightx = 0.5; cons.weighty = 0.1; cons.gridx = 0;
+		 * cons.gridy = 0; cons.gridheight = 1; cons.anchor = GridBagConstraints.WEST; cons.fill = GridBagConstraints.HORIZONTAL; add(smallPane, cons);
+		 */
+		
+		playerTableModel = new PlayerTableModel();
+		playerTable = new JTable(playerTableModel);
+		playerTable.addMouseListener(new PlayerTableMouseListener(this));
+		playerTable.setDefaultRenderer(Object.class, new PlayerTableRenderer(playerTableModel));
+		playerTable.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
+		playerTable.getSelectionModel().addListSelectionListener(new PlayerSelectionListener());
+		playerTable.getColumnModel().getColumn(0).setMaxWidth(100);
+		JScrollPane scrollPane = new JScrollPane(playerTable);
+		scrollPane.setMinimumSize(new Dimension(250, 500));
+		cons.weightx = 0.5;
+		cons.weighty = 0.95;
+		cons.gridx = 0;
+		cons.gridy = 0;
+		cons.gridheight = 1;
+		cons.fill = GridBagConstraints.BOTH;
+		add(scrollPane, cons);
+		ThreadPool.scheduleAtFixedRate(this::updateTable, 10000, 1000);
+	}
+	
+	public void setSelectedPlayer(int startIndex, int endIndex)
+	{
+		getPlayerTable().setAutoscrolls(true);
+		getPlayerTable().getSelectionModel().setSelectionInterval(startIndex, endIndex);
+		getPlayerTable().scrollRectToVisible(getPlayerTable().getCellRect(startIndex, 0, true));
+	}
+	
+	public void updateTable()
+	{
+		SwingUtilities.invokeLater(() ->
+		{
+			if (playerTableModel.updateData())
+			{
+				getPlayerTable().updateUI();
+			}
+		});
+	}
+	
+	public JTable getPlayerTable()
+	{
+		return playerTable;
+	}
+	
+	public PlayerTableModel getPlayerTableModel()
+	{
+		return playerTableModel;
+	}
+	
+	public void updateCurrentPlayer()
+	{
+		updateCurrentPlayer(false);
+	}
+	
+	public void updateCurrentPlayer(boolean forced)
+	{
+		if (!forced && (currentSelectedPlayer == playerTable.getSelectedRow()))
+		{
+		}
+		else
+		{
+			currentSelectedPlayer = playerTable.getSelectedRow();
+		}
+		
+		// Player player = World.getInstance().getPlayer((Integer)playerTableModel.getValueAt(playerTable.getSelectedRow(), 0));
+	}
+	
+	public void setTableSelectByMouseEvent(MouseEvent e)
+	{
+		int rowNumber = playerTable.rowAtPoint(e.getPoint());
+		playerTable.getSelectionModel().setSelectionInterval(rowNumber, rowNumber);
+	}
+	
+	public class PlayerSelectionListener implements ListSelectionListener
+	{
+		@Override
+		public void valueChanged(ListSelectionEvent e)
+		{
+			PlayerTablePane view = PlayerTablePane.this;
+			// If cell selection is enabled, both row and column change events are fired
+			if (e.getSource() == view.getPlayerTable().getSelectionModel())
+			{
+				view.updateCurrentPlayer();
+			}
+		}
+	}
+	
+	@Override
+	public void finalize() throws Throwable
+	{
+		super.finalize();
+		log.info("Finalized: " + getClass().getSimpleName());
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTableRenderer.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTableRenderer.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTableRenderer.java	(working copy)
@@ -0,0 +1,76 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Component;
+
+/**
+* @author Puppyrawr
+*/
+import javax.swing.JTable;
+import javax.swing.table.DefaultTableCellRenderer;
+import javax.swing.table.TableCellRenderer;
+
+public class PlayerTableRenderer extends DefaultTableCellRenderer implements TableCellRenderer
+{
+	private static final long serialVersionUID = 1L;
+	@SuppressWarnings("unused")
+	private final PlayerTableModel table;
+	
+	public PlayerTableRenderer(PlayerTableModel table)
+	{
+		this.table = table;
+	}
+	
+	@Override
+	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col)
+	{
+		Component c;
+		if (value instanceof Component)
+		{
+			c = (Component) value;
+			if (isSelected)
+			{
+				c.setForeground(table.getSelectionForeground());
+				c.setBackground(table.getSelectionBackground());
+			}
+		}
+		else
+		{
+			c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
+		}
+		
+		if (!isSelected)
+		{
+			c.setBackground(table.getBackground());
+		}
+		
+		return c;
+	}
+	
+	public interface TooltipTable
+	{
+		String getToolTip(int row, int col);
+		
+		boolean getIsMarked(int row);
+	}
+}
\ No newline at end of file
Index: java/org/slf4j/Logger.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/Logger.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/BasicMarkerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/BasicMarkerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/NOPMakerAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/NOPMakerAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/MarkerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/MarkerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/playertable/Logger.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/Logger.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/Logger.java	(working copy)
@@ -0,0 +1,25 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+public class Logger
+{
+	
+}
Index: java/org/slf4j/impl/StaticLoggerBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/StaticLoggerBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/playertable/PlayerTableRenderer.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/playertable/PlayerTableRenderer.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/playertable/PlayerTableRenderer.java	(working copy)
@@ -0,0 +1,76 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui.playertable;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Component;
+
+/**
+* @author Puppyrawr
+*/
+import javax.swing.JTable;
+import javax.swing.table.DefaultTableCellRenderer;
+import javax.swing.table.TableCellRenderer;
+
+public class PlayerTableRenderer extends DefaultTableCellRenderer implements TableCellRenderer
+{
+	private static final long serialVersionUID = 1L;
+	@SuppressWarnings("unused")
+	private final PlayerTableModel table;
+	
+	public PlayerTableRenderer(PlayerTableModel table)
+	{
+		this.table = table;
+	}
+	
+	@Override
+	public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int col)
+	{
+		Component c;
+		if (value instanceof Component)
+		{
+			c = (Component) value;
+			if (isSelected)
+			{
+				c.setForeground(table.getSelectionForeground());
+				c.setBackground(table.getSelectionBackground());
+			}
+		}
+		else
+		{
+			c = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, col);
+		}
+		
+		if (!isSelected)
+		{
+			c.setBackground(table.getBackground());
+		}
+		
+		return c;
+	}
+	
+	public interface TooltipTable
+	{
+		String getToolTip(int row, int col);
+		
+		boolean getIsMarked(int row);
+	}
+}
\ No newline at end of file
Index: dist/game/data/scripts/handlers/chathandlers/ChatGeneral.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatGeneral.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatGeneral.java	(working copy)
@@ -21,9 +21,11 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.handler.IVoicedCommandHandler;
 import org.l2jmobius.gameserver.handler.VoicedCommandHandler;
+import org.l2jmobius.gameserver.instancemanager.MapRegionManager;
 import org.l2jmobius.gameserver.model.BlockList;
 import org.l2jmobius.gameserver.model.World;
 import org.l2jmobius.gameserver.model.actor.Player;
@@ -109,6 +111,8 @@
 			final CreatureSay cs = new CreatureSay(activeChar, type, activeChar.getAppearance().getVisibleName(), text, shareLocation);
 			final CreatureSay csRandom = new CreatureSay(activeChar, type, activeChar.getAppearance().getVisibleName(), ChatRandomizer.randomize(text), shareLocation);
 			
+			String nearTown = MapRegionManager.getInstance().getClosestTownName(activeChar);
+			ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.AllChat, "[Somewhere near " + nearTown + "] " + activeChar.getName() + ": " + text, nearTown, activeChar.getName());
 			World.getInstance().forEachVisibleObjectInRange(activeChar, Player.class, 1250, player ->
 			{
 				if ((player != null) && !BlockList.isBlocked(player, activeChar))
Index: java/org/slf4j/Logger.java
===================================================================
--- java/org/slf4j/Logger.java	(nonexistent)
+++ java/org/slf4j/Logger.java	(working copy)
@@ -0,0 +1,34 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+package org.slf4j;
+
+/**
+ * @author Puppyrawr
+ */
+public class Logger
+{
+	
+	/**
+	 * @param string
+	 */
+	public void info(String string)
+	{
+		// TODO Auto-generated method stub
+		
+	}
+	
+}
Index: java/org/slf4j/spi/MarkerFactoryBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/MarkerFactoryBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/ui/Gui.java
===================================================================
--- java/org/l2jmobius/gameserver/ui/Gui.java	(revision 11281)
+++ java/org/l2jmobius/gameserver/ui/Gui.java	(working copy)
@@ -17,6 +17,7 @@
 package org.l2jmobius.gameserver.ui;
 
 import java.awt.BorderLayout;
+import java.awt.Color;
 import java.awt.Dimension;
 import java.awt.Font;
 import java.awt.Image;
@@ -100,6 +101,8 @@
 		txtrConsole.setDropMode(DropMode.INSERT);
 		txtrConsole.setFont(new Font("Monospaced", Font.PLAIN, 16));
 		txtrConsole.getDocument().addDocumentListener(new LimitLinesDocumentListener(500));
+		txtrConsole.setBackground(new Color(30, 30, 30));
+		txtrConsole.setForeground(Color.WHITE);
 		
 		// Initialize menu items.
 		final JMenuBar menuBar = new JMenuBar();
Index: java/org/l2jmobius/gameserver/GameServer.java
===================================================================
--- java/org/l2jmobius/gameserver/GameServer.java	(revision 11281)
+++ java/org/l2jmobius/gameserver/GameServer.java	(working copy)
@@ -123,6 +123,7 @@
 import org.l2jmobius.gameserver.data.xml.VariationData;
 import org.l2jmobius.gameserver.data.xml.VipData;
 import org.l2jmobius.gameserver.geoengine.GeoEngine;
+import org.l2jmobius.gameserver.gui.ServerGui;
 import org.l2jmobius.gameserver.handler.ConditionHandler;
 import org.l2jmobius.gameserver.handler.DailyMissionHandler;
 import org.l2jmobius.gameserver.handler.EffectHandler;
@@ -235,6 +236,9 @@
 		// Initialize config
 		Config.load(ServerMode.GAME);
 		
+		ServerGui gui = new ServerGui();
+		gui.init();
+		
 		printSection("Database");
 		DatabaseFactory.init();
 		
Index: dist/game/data/scripts/handlers/chathandlers/ChatWhisper.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatWhisper.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatWhisper.java	(working copy)
@@ -20,6 +20,7 @@
 import org.l2jmobius.gameserver.data.xml.FakePlayerData;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.instancemanager.FakePlayerChatManager;
 import org.l2jmobius.gameserver.model.BlockList;
@@ -119,6 +120,7 @@
 					activeChar.addSilenceModeExcluded(receiver.getObjectId());
 				}
 				
+				ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.WhisperChat, activeChar.getName() + "->" + receiver.getName() + ": " + text, activeChar.getName(), receiver.getName());
 				receiver.getWhisperers().add(activeChar.getObjectId());
 				receiver.sendPacket(new CreatureSay(activeChar, receiver, activeChar.getName(), type, text));
 				activeChar.sendPacket(new CreatureSay(activeChar, receiver, "->" + receiver.getName(), type, text));
Index: java/org/slf4j/helpers/BasicMDCAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/BasicMDCAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/MDC.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/MDC.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/helpers/BasicMarker.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/BasicMarker.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/spi/LocationAwareLogger.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/spi/LocationAwareLogger.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: dist/game/data/scripts/handlers/chathandlers/ChatParty.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatParty.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatParty.java	(working copy)
@@ -19,6 +19,7 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.model.actor.Player;
 import org.l2jmobius.gameserver.model.itemcontainer.Inventory;
@@ -57,6 +58,9 @@
 			return;
 		}
 		
+		String leaderName = activeChar.getParty().getLeader().getName();
+		ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.PartyChat, "[" + leaderName + "'s party] " + activeChar.getName() + ": " + text, leaderName, activeChar.getName());
+		
 		if (shareLocation)
 		{
 			if (activeChar.getInventory().getInventoryItemCount(Inventory.LCOIN_ID, -1) < Config.SHARING_LOCATION_COST)
Index: java/org/slf4j/LoggerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/LoggerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/LogbackMDCAdapter.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/LogbackMDCAdapter.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/ConsoleTab.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/ConsoleTab.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/ConsoleTab.java	(working copy)
@@ -0,0 +1,482 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Color;
+import java.awt.Dimension;
+import java.awt.EventQueue;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+import java.awt.Rectangle;
+import java.awt.event.ActionEvent;
+import java.awt.event.ActionListener;
+import java.awt.event.WindowAdapter;
+import java.awt.event.WindowEvent;
+import java.util.ArrayList;
+import java.util.List;
+
+/**
+ * @author Puppyrawr
+ */
+import javax.swing.BorderFactory;
+import javax.swing.JButton;
+import javax.swing.JCheckBox;
+import javax.swing.JFrame;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JScrollPane;
+import javax.swing.JSplitPane;
+import javax.swing.JTextField;
+import javax.swing.JTextPane;
+import javax.swing.ScrollPaneConstants;
+import javax.swing.event.DocumentEvent;
+import javax.swing.event.DocumentListener;
+import javax.swing.text.AttributeSet;
+import javax.swing.text.Document;
+import javax.swing.text.Element;
+import javax.swing.text.SimpleAttributeSet;
+import javax.swing.text.StyleConstants;
+import javax.swing.text.StyleContext;
+
+public class ConsoleTab extends JPanel
+{
+	private static final long serialVersionUID = 1L;
+	private static final int MSG_STORAGE_LIMIT = 5000;
+	private static final int MSG_DISPLAY_LIMIT = 500;
+	
+	public enum ConsoleFilter
+	{
+		Console(null, Color.red, true),
+		Errors(Console, new Color(220, 50, 50), true),
+		Warnings(Console, new Color(220, 220, 50), true),
+		Info(Console, new Color(50, 220, 50), true),
+		Chat(null, Color.white, true),
+		Announcements(Chat, Color.cyan, true),
+		GlobalChat(Chat, new Color(255, 100, 100), true),
+		HeroChat(Chat, new Color(63, 137, 249), true),
+		ShoutChat(Chat, new Color(255, 130, 0), true, "Region"),
+		TradeChat(Chat, new Color(234, 165, 245), true, "Region"),
+		AllChat(Chat, Color.white, false, "Region", "Talker"),
+		AllyChat(Chat, new Color(120, 255, 120), false, "Ally Name", "Talker"),
+		ClanChat(Chat, new Color(120, 120, 255), false, "Clan Name", "Talker"),
+		PartyChat(Chat, Color.green, false, "Party Leader", "Talker"),
+		WhisperChat(Chat, Color.magenta, false, "Talker", "Listener");
+		
+		public final ConsoleFilter parent;
+		public final List<ConsoleFilter> children = new ArrayList<>();
+		public final Color textColor;
+		public final boolean startEnabled;
+		public final String[] subFilters;
+		
+		ConsoleFilter(ConsoleFilter p, Color tc, boolean se, String... sf)
+		{
+			parent = p;
+			if (parent != null)
+			{
+				parent.children.add(this);
+			}
+			textColor = tc;
+			startEnabled = se;
+			subFilters = sf;
+		}
+	}
+	
+	private static class ConsoleLine
+	{
+		public final ConsoleFilter filter;
+		public final String text;
+		public final String[] extra;
+		
+		public ConsoleLine(ConsoleFilter f, String t, String... e)
+		{
+			filter = f;
+			text = t;
+			extra = e;
+		}
+	}
+	
+	private static int instanceId = 0;
+	private static List<ConsoleTab> instances = new ArrayList<>();
+	private static List<ConsoleLine> messages = new ArrayList<>();
+	
+	private class ConsoleFilterInstance
+	{
+		public JCheckBox checkBox;
+		public JTextField[] textFields;
+		
+		public boolean isEnabled()
+		{
+			return checkBox.isSelected();
+		}
+	}
+	
+	private final ConsoleFilterInstance[] filters = new ConsoleFilterInstance[ConsoleFilter.values().length];
+	private final JTextPane textPane;
+	
+	public ConsoleTab(boolean main)
+	{
+		setLayout(new GridBagLayout());
+		JPanel leftPanel = new JPanel();
+		leftPanel.setLayout(new GridBagLayout());
+		
+		JPanel checkBoxes = new JPanel();
+		checkBoxes.setLayout(new GridBagLayout());
+		checkBoxes.setBorder(BorderFactory.createCompoundBorder(BorderFactory.createTitledBorder("Show:"), BorderFactory.createEmptyBorder(5, 5, 5, 5)));
+		
+		GridBagConstraints cons = new GridBagConstraints();
+		cons.anchor = GridBagConstraints.FIRST_LINE_START;
+		cons.fill = GridBagConstraints.HORIZONTAL;
+		cons.gridy = 0;
+		cons.weighty = 1;
+		int checkBoxesGridWidth = 20;
+		ConsoleActionListener listener = new ConsoleActionListener();
+		ConsoleSubFilterListener filterListener = new ConsoleSubFilterListener();
+		for (ConsoleFilter f : ConsoleFilter.values())
+		{
+			filters[f.ordinal()] = new ConsoleFilterInstance();
+			ConsoleFilterInstance fi = filters[f.ordinal()];
+			int depthLevel = 0;
+			ConsoleFilter child = f.parent;
+			while (child != null)
+			{
+				depthLevel++;
+				child = child.parent;
+			}
+			
+			cons.gridx = depthLevel;
+			cons.weightx = 1;
+			cons.gridwidth = 1;
+			fi.checkBox = new JCheckBox();
+			fi.checkBox.setActionCommand(f.name());
+			fi.checkBox.setSelected(f.startEnabled);
+			fi.checkBox.addActionListener(listener);
+			checkBoxes.add(fi.checkBox, cons);
+			cons.gridx = depthLevel + 1;
+			cons.weightx = 10;
+			cons.gridwidth = checkBoxesGridWidth - depthLevel - 1;
+			checkBoxes.add(new JLabel(f.name()), cons);
+			cons.gridy++;
+			fi.textFields = new JTextField[f.subFilters.length];
+			for (int i = 0; i < f.subFilters.length; i++)
+			{
+				cons.gridx = depthLevel + 2;
+				cons.weightx = 1;
+				cons.gridwidth = 1;
+				checkBoxes.add(new JLabel(f.subFilters[i] + ":"), cons);
+				cons.gridx = depthLevel + 3;
+				cons.weightx = 10;
+				cons.gridwidth = checkBoxesGridWidth - depthLevel - 3;
+				fi.textFields[i] = new JTextField();
+				fi.textFields[i].getDocument().addDocumentListener(filterListener);
+				checkBoxes.add(fi.textFields[i], cons);
+				cons.gridy++;
+			}
+		}
+		
+		// Add checkboxes to the left panel
+		cons.anchor = GridBagConstraints.FIRST_LINE_START;
+		cons.fill = GridBagConstraints.HORIZONTAL;
+		cons.insets = new Insets(5, 5, 5, 5);
+		cons.gridy = 0;
+		cons.gridx = 0;
+		leftPanel.add(checkBoxes, cons);
+		
+		cons.fill = GridBagConstraints.BOTH;
+		cons.weightx = 1;
+		cons.weighty = 1;
+		textPane = new JTextPane();
+		textPane.setBackground(new Color(30, 30, 30));
+		JScrollPane console = new JScrollPane(textPane, ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS, ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);
+		
+		cons.weightx = 1;
+		cons.weighty = 1;
+		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, leftPanel, console);
+		splitPane.setResizeWeight(0.3);
+		splitPane.setDividerLocation(230);
+		add(splitPane, cons);
+		
+		instances.add(this);
+		if (main)
+		{
+			// Add new console window button
+			JButton button = new JButton("New Console Window");
+			button.setActionCommand("newConsoleWindow");
+			button.addActionListener(listener);
+			cons.anchor = GridBagConstraints.FIRST_LINE_START;
+			cons.fill = GridBagConstraints.HORIZONTAL;
+			cons.insets = new Insets(5, 5, 5, 5);
+			cons.gridy = 1;
+			cons.gridx = 0;
+			leftPanel.add(button, cons);
+		}
+		
+		reloadDoc();
+	}
+	
+	public synchronized static void appendMessage(ConsoleFilter f, String msg, String... extra)
+	{
+		try
+		{
+			messages.add(new ConsoleLine(f, msg, extra));
+			while (messages.size() > MSG_STORAGE_LIMIT)
+			{
+				messages.remove(0);
+			}
+			
+			for (ConsoleTab tab : instances)
+			{
+				tab.onAppendMessage(f, msg, extra);
+			}
+		}
+		catch (Exception e)
+		{
+			e.printStackTrace();
+		}
+	}
+	
+	public synchronized void onAppendMessage(ConsoleFilter f, String msg, String... extra)
+	{
+		ConsoleFilterInstance fi = filters[f.ordinal()];
+		if (!fi.isEnabled())
+		{
+			return;
+		}
+		
+		int emptySubFields = 0;
+		boolean pass = false;
+		for (int i = 0; i < fi.textFields.length; i++)
+		{
+			if (fi.textFields[i].getText().isEmpty())
+			{
+				emptySubFields++;
+				continue;
+			}
+			
+			if (extra[i].toLowerCase().contains(fi.textFields[i].getText()))
+			{
+				pass = true;
+			}
+		}
+		
+		if (!pass && (emptySubFields < f.subFilters.length))
+		{
+			return;
+		}
+		
+		msg += "\n";
+		StyleContext sc = StyleContext.getDefaultStyleContext();
+		AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, f.textColor);
+		
+		// aset = sc.addAttribute(aset, StyleConstants.Background, new Color(0, 100, 250));
+		if ((f == ConsoleFilter.Console) || ((f.parent != null) && (f.parent == ConsoleFilter.Console)))
+		{
+			aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
+			aset = sc.addAttribute(aset, StyleConstants.FontSize, 14);
+		}
+		else
+		{
+			aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Verdana");
+			aset = sc.addAttribute(aset, StyleConstants.FontSize, 12);
+		}
+		aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
+		
+		Document document = textPane.getDocument();
+		Element root = document.getDefaultRootElement();
+		while (root.getElementCount() > MSG_DISPLAY_LIMIT)
+		{
+			Element line = root.getElement(0);
+			int end = line.getEndOffset();
+			try
+			{
+				document.remove(0, end);
+			}
+			catch (Exception e)
+			{
+				e.printStackTrace();
+			}
+		}
+		
+		int len = document.getLength();
+		textPane.setCaretPosition(len);
+		textPane.setCharacterAttributes(aset, false);
+		textPane.replaceSelection(msg);
+		
+		EventQueue.invokeLater(() ->
+		{
+			Rectangle visibleRect = textPane.getVisibleRect();
+			if ((visibleRect.y + 100) > (textPane.getHeight() - visibleRect.height))
+			{
+				visibleRect.y = textPane.getHeight() - visibleRect.height;
+				textPane.scrollRectToVisible(visibleRect);
+			}
+		});
+	}
+	
+	public synchronized void reloadDoc()
+	{
+		textPane.setText("");
+		
+		for (ConsoleLine line : messages)
+		{
+			ConsoleFilter f = line.filter;
+			ConsoleFilterInstance fi = filters[f.ordinal()];
+			if (!fi.isEnabled())
+			{
+				continue;
+			}
+			
+			int emptySubFields = 0;
+			boolean pass = false;
+			for (int i = 0; i < fi.textFields.length; i++)
+			{
+				JTextField textField = fi.textFields[i];
+				if (textField.getText().isEmpty())
+				{
+					emptySubFields++;
+					continue;
+				}
+				
+				if (line.extra[i].toLowerCase().contains(textField.getText()))
+				{
+					pass = true;
+				}
+			}
+			
+			if (!pass && (emptySubFields < fi.textFields.length))
+			{
+				continue;
+			}
+			
+			String msg = line.text + "\n";
+			StyleContext sc = StyleContext.getDefaultStyleContext();
+			AttributeSet aset = sc.addAttribute(SimpleAttributeSet.EMPTY, StyleConstants.Foreground, f.textColor);
+			
+			// aset = sc.addAttribute(aset, StyleConstants.Background, new Color(0, 100, 250));
+			if ((f == ConsoleFilter.Console) || ((f.parent != null) && (f.parent == ConsoleFilter.Console)))
+			{
+				aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Lucida Console");
+				aset = sc.addAttribute(aset, StyleConstants.FontSize, 14);
+			}
+			else
+			{
+				aset = sc.addAttribute(aset, StyleConstants.FontFamily, "Verdana");
+				aset = sc.addAttribute(aset, StyleConstants.FontSize, 12);
+			}
+			aset = sc.addAttribute(aset, StyleConstants.Alignment, StyleConstants.ALIGN_JUSTIFIED);
+			
+			Document document = textPane.getDocument();
+			Element root = document.getDefaultRootElement();
+			while (root.getElementCount() > MSG_DISPLAY_LIMIT)
+			{
+				Element elem = root.getElement(0);
+				int end = elem.getEndOffset();
+				try
+				{
+					document.remove(0, end);
+				}
+				catch (Exception e)
+				{
+					e.printStackTrace();
+				}
+			}
+			
+			int len = document.getLength();
+			textPane.setCaretPosition(len);
+			textPane.setCharacterAttributes(aset, false);
+			textPane.replaceSelection(msg);
+		}
+	}
+	
+	private class ConsoleActionListener implements ActionListener
+	{
+		@Override
+		public void actionPerformed(ActionEvent ae)
+		{
+			if (ae.getActionCommand().equalsIgnoreCase("newConsoleWindow"))
+			{
+				instanceId++;
+				JFrame extra = new JFrame("Console View #" + instanceId);
+				final ConsoleTab tab = new ConsoleTab(false);
+				extra.add(tab);
+				extra.addWindowListener(new WindowAdapter()
+				{
+					@Override
+					public void windowClosing(WindowEvent arg0)
+					{
+						instances.remove(tab);
+					}
+				});
+				extra.setMinimumSize(new Dimension(900, 600));
+				extra.setLocation(100, 100);
+				extra.setVisible(true);
+				tab.reloadDoc();
+				return;
+			}
+			
+			ConsoleFilter f = ConsoleFilter.valueOf(ae.getActionCommand());
+			if (f == null)
+			{
+				return;
+			}
+			
+			if (filters[f.ordinal()].isEnabled())
+			{
+				for (ConsoleFilter child : f.children)
+				{
+					filters[child.ordinal()].checkBox.setEnabled(true);
+				}
+			}
+			else
+			{
+				for (ConsoleFilter child : f.children)
+				{
+					filters[child.ordinal()].checkBox.setSelected(false);
+					filters[child.ordinal()].checkBox.setEnabled(false);
+				}
+			}
+			
+			reloadDoc();
+		}
+	}
+	
+	private class ConsoleSubFilterListener implements DocumentListener
+	{
+		@Override
+		public void changedUpdate(DocumentEvent e)
+		{
+			reloadDoc();
+		}
+		
+		@Override
+		public void insertUpdate(DocumentEvent e)
+		{
+			reloadDoc();
+		}
+		
+		@Override
+		public void removeUpdate(DocumentEvent e)
+		{
+			reloadDoc();
+		}
+	}
+}
\ No newline at end of file
Index: java/org/slf4j/helpers/Util.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/Util.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: dist/game/data/scripts/handlers/chathandlers/ChatShout.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatShout.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatShout.java	(working copy)
@@ -1,16 +1,16 @@
 /*
  * This file is part of the L2J Mobius project.
- * 
+ *
  * This program is free software: you can redistribute it and/or modify
  * it under the terms of the GNU General Public License as published by
  * the Free Software Foundation, either version 3 of the License, or
  * (at your option) any later version.
- * 
+ *
  * This program is distributed in the hope that it will be useful,
  * but WITHOUT ANY WARRANTY; without even the implied warranty of
  * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
  * General Public License for more details.
- * 
+ *
  * You should have received a copy of the GNU General Public License
  * along with this program. If not, see <http://www.gnu.org/licenses/>.
  */
@@ -18,6 +18,7 @@
 
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.instancemanager.MapRegionManager;
Index: java/org/slf4j/Marker.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/Marker.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: dist/game/data/scripts/handlers/chathandlers/ChatHeroVoice.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatHeroVoice.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatHeroVoice.java	(working copy)
@@ -19,6 +19,7 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.model.BlockList;
 import org.l2jmobius.gameserver.model.World;
@@ -62,6 +63,7 @@
 			return;
 		}
 		
+		ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.HeroChat, activeChar.getName() + ": " + text);
 		final CreatureSay cs = new CreatureSay(activeChar, type, activeChar.getName(), text, shareLocation);
 		for (Player player : World.getInstance().getPlayers())
 		{
Index: java/org/slf4j/ILoggerFactory.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/ILoggerFactory.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/l2jmobius/gameserver/gui/JTableButtonMouseListener.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/JTableButtonMouseListener.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/JTableButtonMouseListener.java	(working copy)
@@ -0,0 +1,112 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.event.MouseEvent;
+import java.awt.event.MouseListener;
+
+/**
+ * @author Puppyrawr
+ */
+import javax.swing.JButton;
+import javax.swing.JComponent;
+import javax.swing.JTable;
+import javax.swing.table.TableColumnModel;
+
+public class JTableButtonMouseListener implements MouseListener
+{
+	private final JTable table;
+	
+	private void forwardEvent(MouseEvent e)
+	{
+		TableColumnModel columnModel = table.getColumnModel();
+		int column = columnModel.getColumnIndexAtX(e.getX());
+		int row = e.getY() / table.getRowHeight();
+		Object value;
+		JComponent c;
+		
+		if ((row >= table.getRowCount()) || (row < 0) || (column >= table.getColumnCount()) || (column < 0))
+		{
+			return;
+		}
+		
+		value = table.getValueAt(row, column);
+		
+		if (!(value instanceof JComponent))
+		{
+			return;
+		}
+		
+		c = (JComponent) value;
+		
+		if (c instanceof JButton)
+		{
+			JButton b = (JButton) c;
+			if (e.getID() == MouseEvent.MOUSE_PRESSED)
+			{
+				b.doClick(100);
+			}
+		}
+		c.dispatchEvent(new MouseEvent(c, e.getID(), e.getWhen(), e.getModifiers(), 0, 0, 1, e.isPopupTrigger(), e.getButton()));
+	}
+	
+	public JTableButtonMouseListener(JTable table)
+	{
+		this.table = table;
+	}
+	
+	@Override
+	public void mouseEntered(MouseEvent e)
+	{
+		forwardEvent(e);
+	}
+	
+	@Override
+	public void mouseExited(MouseEvent e)
+	{
+		forwardEvent(e);
+	}
+	
+	@Override
+	public void mousePressed(MouseEvent e)
+	{
+		forwardEvent(e);
+	}
+	
+	@Override
+	public void mouseClicked(MouseEvent e)
+	{
+		if (e.getSource() instanceof JButton)
+		{
+			forwardEvent(e);
+		}
+	}
+	
+	@Override
+	public void mouseReleased(MouseEvent e)
+	{
+		if (e.getSource() instanceof JButton)
+		{
+			forwardEvent(e);
+		}
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/CommandTab.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/CommandTab.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/CommandTab.java	(working copy)
@@ -0,0 +1,103 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+/**
+ * @author Puppyrawr
+ */
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+
+import javax.swing.JButton;
+import javax.swing.JLabel;
+import javax.swing.JPanel;
+import javax.swing.JTextField;
+
+import org.l2jmobius.gameserver.model.World;
+import org.l2jmobius.gameserver.model.actor.Player;
+import org.l2jmobius.gameserver.util.Broadcast;
+
+public class CommandTab extends JPanel
+{
+	private static final long serialVersionUID = 1L;
+	
+	public CommandTab()
+	{
+		
+		JLabel labelSendMessage = new JLabel("Send Message: ");
+		JTextField textAuthor = new JTextField("Admin", 15);
+		JTextField textMessage = new JTextField("", 15);
+		JButton sendButton = new JButton("Send");
+		
+		sendButton.addActionListener(e ->
+		{
+			Broadcast.toAllOnlinePlayers(textAuthor.getText() + ": " + textMessage.getText());
+			textMessage.setText("");
+		});
+		
+		GridBagLayout layout = new GridBagLayout();
+		this.setLayout(layout);
+		GridBagConstraints gbc = new GridBagConstraints();
+		
+		// Put constraints on different buttons
+		gbc.fill = GridBagConstraints.HORIZONTAL;
+		gbc.gridx = 0;
+		gbc.gridy = 0;
+		
+		this.add(labelSendMessage, gbc);
+		gbc.gridx = 1;
+		this.add(textAuthor, gbc);
+		gbc.gridx = 2;
+		this.add(textMessage, gbc);
+		gbc.gridx = 3;
+		this.add(sendButton, gbc);
+		
+		JLabel labelGiveItems = new JLabel("give items");
+		JTextField textItemId = new JTextField("item id", 15);
+		JTextField textAmount = new JTextField("item amount", 15);
+		JTextField textPlayer = new JTextField("player", 15);
+		JButton sendItemButton = new JButton("Send");
+		sendItemButton.addActionListener(e ->
+		{
+			int itemId = Integer.parseInt(textItemId.getText());
+			int itemAmount = Integer.parseInt(textAmount.getText());
+			String playerName = textPlayer.getText();
+			Player player = World.getInstance().getPlayer(playerName);
+			if (player != null)
+			{
+				player.addItem("admin", itemId, itemAmount, player, true);
+			}
+		});
+		
+		gbc.gridx = 0;
+		gbc.gridy = 2;
+		this.add(labelGiveItems, gbc);
+		gbc.gridx = 1;
+		this.add(textItemId, gbc);
+		gbc.gridx = 2;
+		this.add(textAmount, gbc);
+		gbc.gridx = 3;
+		this.add(textPlayer, gbc);
+		gbc.gridx = 4;
+		this.add(sendItemButton, gbc);
+		
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/ServerGui.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/ServerGui.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/ServerGui.java	(working copy)
@@ -0,0 +1,120 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.BorderLayout;
+import java.awt.Dimension;
+
+/**
+ * @author Puppyrawr
+ */
+import javax.swing.JFrame;
+import javax.swing.JTabbedPane;
+import javax.swing.WindowConstants;
+
+public class ServerGui
+{
+	private static JFrame frame;
+	
+	// private JMenuBar menuBar = new JMenuBar();
+	
+	// private JMenu fileMenu = new JMenu("File");
+	// private JMenu helpMenu = new JMenu("Help");
+	
+	// private ActionListener menuListener = new MenuActionListener();
+	
+	private static JTabbedPane tabPane = new JTabbedPane();
+	
+	private static ConsoleTab consoleTab;
+	
+	private static AdminTab adminTab;
+	
+	private static CommandTab commandTab;
+	
+	public void init()
+	{
+		frame = new JFrame("L2 Server");
+		
+		// Menu Bar Items
+		// File Menu
+		/*
+		 * JMenuItem itemExit = new JMenuItem("Exit"); itemExit.setActionCommand("Exit"); itemExit.addActionListener(menuListener); fileMenu.add(itemExit); //Help JMenuItem itemAbout = new JMenuItem("About"); itemAbout.setActionCommand("About"); itemAbout.addActionListener(menuListener);
+		 * helpMenu.add(itemAbout); menuBar.add(fileMenu); menuBar.add(helpMenu); frame.setJMenuBar(menuBar);
+		 */
+		
+		// Console Tab
+		consoleTab = new ConsoleTab(true);
+		adminTab = new AdminTab();
+		commandTab = new CommandTab();
+		
+		frame.setLayout(new BorderLayout());
+		frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
+		
+		tabPane.add("Console", consoleTab);
+		tabPane.add("Admin", adminTab);
+		tabPane.add("Command", commandTab);
+		
+		// build the frame
+		frame.add(tabPane, BorderLayout.CENTER);
+		
+		// add the window listeners
+		addListeners();
+		
+		frame.setLocation(50, 50);
+		frame.setMinimumSize(new Dimension(930, 700));
+		// frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
+		frame.setVisible(true);
+	}
+	
+	public JTabbedPane getTabPane()
+	{
+		return tabPane;
+	}
+	
+	private void addListeners()
+	{
+		// Window Closing
+		/*
+		 * frame.addWindowListener(new WindowAdapter() { public void windowClosing(WindowEvent event) { close(); } });
+		 */
+	}
+	
+	// MenuActions
+	/*
+	 * public class MenuActionListener implements ActionListener { public void actionPerformed(ActionEvent ev) { String actionCmd = ev.getActionCommand(); if (actionCmd.equals("Exit")) { System.exit(0); } } }
+	 */
+	
+	public static JFrame getMainFrame()
+	{
+		return frame;
+	}
+	
+	public static ConsoleTab getConsoleTab()
+	{
+		return consoleTab;
+	}
+	
+	public static AdminTab getAdminTab()
+	{
+		return adminTab;
+	}
+}
\ No newline at end of file
Index: java/org/l2jmobius/gameserver/gui/AdminTab.java
===================================================================
--- java/org/l2jmobius/gameserver/gui/AdminTab.java	(nonexistent)
+++ java/org/l2jmobius/gameserver/gui/AdminTab.java	(working copy)
@@ -0,0 +1,82 @@
+/*
+ * This file is part of the L2J Mobius project.
+ * 
+ * This program is free software: you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation, either version 3 of the License, or
+ * (at your option) any later version.
+ * 
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
+ * General Public License for more details.
+ * 
+ * You should have received a copy of the GNU General Public License
+ * along with this program. If not, see <http://www.gnu.org/licenses/>.
+ */
+
+package org.l2jmobius.gameserver.gui;
+
+/**
+ * @author Puppyrawr
+ */
+
+import java.awt.Dimension;
+import java.awt.GridBagConstraints;
+import java.awt.GridBagLayout;
+import java.awt.Insets;
+
+import javax.swing.JButton;
+import javax.swing.JPanel;
+import javax.swing.JSplitPane;
+import javax.swing.JTextArea;
+
+/**
+ * @author Puppyrawr
+ */
+
+import org.l2jmobius.gameserver.gui.playertable.PlayerTablePane;
+import org.l2jmobius.gameserver.util.Broadcast;
+
+public class AdminTab extends JPanel
+{
+	private static final long serialVersionUID = 1L;
+	private final GridBagConstraints cons = new GridBagConstraints();
+	private final GridBagLayout layout = new GridBagLayout();
+	private final JPanel listPanel = new PlayerTablePane();
+	private final JPanel infoPanel = new JPanel();
+	
+	public AdminTab()
+	{
+		
+		JTextArea talkadmin = new JTextArea();
+		JButton bouton = new JButton("Send");
+		bouton.addActionListener(e -> Broadcast.toAllOnlinePlayers(talkadmin.getText()));
+		setLayout(layout);
+		cons.fill = GridBagConstraints.HORIZONTAL;
+		
+		infoPanel.setLayout(layout);
+		
+		cons.insets = new Insets(5, 5, 5, 5);
+		cons.gridwidth = 3;
+		cons.gridheight = 20;
+		cons.weightx = 1;
+		cons.weighty = 1;
+		cons.gridx = 0;
+		cons.gridy = 2;
+		
+		infoPanel.add(bouton, cons);
+		
+		infoPanel.setPreferredSize(new Dimension(235, infoPanel.getHeight()));
+		
+		cons.fill = GridBagConstraints.BOTH;
+		cons.weightx = 1;
+		cons.weighty = 1;
+		
+		JSplitPane splitPane = new JSplitPane(JSplitPane.HORIZONTAL_SPLIT, listPanel, infoPanel);
+		splitPane.setResizeWeight(0.3);
+		splitPane.setDividerLocation(535);
+		add(splitPane, cons);
+		listPanel.add(talkadmin, cons);
+	}
+}
\ No newline at end of file
Index: java/org/slf4j/impl/CopyOnInheritThreadLocal.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/CopyOnInheritThreadLocal.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/StaticMarkerBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/StaticMarkerBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: java/org/slf4j/impl/StaticMDCBinder.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/impl/StaticMDCBinder.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: dist/game/data/scripts/handlers/chathandlers/ChatTrade.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatTrade.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatTrade.java	(working copy)
@@ -19,6 +19,7 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.instancemanager.MapRegionManager;
 import org.l2jmobius.gameserver.model.BlockList;
@@ -77,6 +78,13 @@
 			activeChar.destroyItemByItemId("Shared Location", Inventory.LCOIN_ID, Config.SHARING_LOCATION_COST, activeChar, true);
 		}
 		
+		String nearTown = MapRegionManager.getInstance().getClosestTownName(activeChar);
+		if (!Config.DEFAULT_TRADE_CHAT.equalsIgnoreCase("global"))
+		{
+			text = "[" + nearTown + "]" + text;
+		}
+		
+		ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.TradeChat, activeChar.getName() + ": " + text, nearTown);
 		final CreatureSay cs = new CreatureSay(activeChar, type, activeChar.getName(), text, shareLocation);
 		if (Config.DEFAULT_TRADE_CHAT.equalsIgnoreCase("on") || (Config.DEFAULT_TRADE_CHAT.equalsIgnoreCase("gm") && activeChar.canOverrideCond(PlayerCondOverride.CHAT_CONDITIONS)))
 		{
Index: java/org/slf4j/helpers/NOPLogger.class
===================================================================
Cannot display: file marked as a binary type.
svn:mime-type = application/octet-stream

Property changes on: java/org/slf4j/helpers/NOPLogger.class
___________________________________________________________________
Added: svn:mime-type
## -0,0 +1 ##
+application/octet-stream
\ No newline at end of property
Index: dist/game/data/scripts/handlers/chathandlers/ChatClan.java
===================================================================
--- dist/game/data/scripts/handlers/chathandlers/ChatClan.java	(revision 11281)
+++ dist/game/data/scripts/handlers/chathandlers/ChatClan.java	(working copy)
@@ -19,6 +19,7 @@
 import org.l2jmobius.Config;
 import org.l2jmobius.gameserver.enums.ChatType;
 import org.l2jmobius.gameserver.enums.PlayerCondOverride;
+import org.l2jmobius.gameserver.gui.ConsoleTab;
 import org.l2jmobius.gameserver.handler.IChatHandler;
 import org.l2jmobius.gameserver.model.actor.Player;
 import org.l2jmobius.gameserver.model.itemcontainer.Inventory;
@@ -56,7 +57,8 @@
 			activeChar.sendPacket(SystemMessageId.CHATTING_IS_CURRENTLY_PROHIBITED);
 			return;
 		}
-		
+		String clanName = activeChar.getClan().getName();
+		ConsoleTab.appendMessage(ConsoleTab.ConsoleFilter.ClanChat, "[" + clanName + "] " + activeChar.getName() + ": " + text, clanName, activeChar.getName());
 		if (shareLocation)
 		{
 			if (activeChar.getInventory().getInventoryItemCount(Inventory.LCOIN_ID, -1) < Config.SHARING_LOCATION_COST)
