struct Demographics {
    void ReadPeople(istream& input)
    {
        int count;
        input >> count;

        vector<Person> data(count);
        for (Person& p : data) {
            char gender;
            input >> p.name >> p.age >> p.income >> gender;
            p.is_male = (gender == 'M');
            int count = 0;
            if (p.is_male) {
                count = ++data_popular_name_m_[p.name];
                if (man_.count < count) {
                    man_.name = p.name;
                    man_.count = count;
                }
            } else {
                count = ++data_popular_name_w_[p.name];
                if (woman_.count < count) {
                    woman_.name = p.name;
                    woman_.count = count;
                }
            }
            top_income_.insert(p.income);
        }
        sort(data.begin(), data.end(), [](const Person& lhs, const Person& rhs) {
            return lhs.age < rhs.age;
        });
    }
    int Age(int age) const
    {
        auto it = lower_bound(data_.begin(), data_.end(), age, [age](const Person& p) {
            return p.age < age;
        });
        return data_.end() - data_.begin() - it;
    }

private:
    struct PopName {
        string name;
        int count;
    };

    vector<Person> data_;
    unordered_map<string, int> data_popular_name_m_;
    unordered_map<string, int> data_popular_name_w_;
    set<int> top_income_;
    PopName man_;
    PopName woman_;
};