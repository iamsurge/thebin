POWER = 200
SOURCE = ''
DESTINATION = ''

print('Please enter SOURCE and DESTINATION coordinates.\n\n'
      'SOURCE coordinates should be in the format x, y D\n'
      'where x and y can be between 0 and 6 and D is the Direction\n'
      'that G-man is facing. It can be either [N]orth, [S]outh, [E]ast or [W]est.\n\n'
      'DESTINATION coordinates should be in the format x, y\n'
      'where x and y can be between 0 and 6.\n')

while len(SOURCE) != 3:
    sourceInput = input('SOURCE?>').lower()
    for i in sourceInput:
        if int(i.isdigit()) and int(i) in range(7):
            SOURCE += i
        if i.isalpha() and i in 'nsew':
            SOURCE += i
    coordinates = [i for i in SOURCE if i.isdigit()]
    if len(SOURCE) == 3 and len(coordinates) == 2 and SOURCE[-1].isalpha():
        break
    else:
        print('Please enter valid coordinates e.g. 3, 3 N.\n')
        SOURCE = ''

while len(DESTINATION) != 2:
    DESTINATION = ''
    destinationInput = input('DESTINATION?>')
    for i in destinationInput:
        if int(i.isdigit()) and int(i) in range(7):
            DESTINATION += i
    if len(DESTINATION) != 2:
        print('Please enter a valid destination e.g 3, 3.')

movesX = abs(int(SOURCE[0]) - int(DESTINATION[0]))
movesY = abs(int(SOURCE[1]) - int(DESTINATION[1]))
moves = movesX + movesY
initialDirection = SOURCE[-1]
dx, sx = int(DESTINATION[0]), int(SOURCE[0])
dy, sy = int(DESTINATION[1]), int(SOURCE[1])
travelDirection = {dx > sx and dy > sy: 'ne',
                   dx < sx and dy < sy: 'sw',
                   dx > sx and dy < sy: 'se',
                   dx < sx and dy > sy: 'nw',
                   dx == sx and dy > sy: 'n',
                   dx == sx and dy < sy: 's',
                   dx > sx and dy == sy: 'e',
                   dx < sx and dy == sy: 'w'}.get(True)

if travelDirection is None:
    print()
    print('SOURCE = DESTINATION')
    print('POWER:', POWER)
else:
    if not initialDirection in travelDirection:
        travelDirection += initialDirection
    sortedDirection = ''.join(sorted(travelDirection))
    turns = 0
    if len(sortedDirection) == 1:
        turns = 0
    elif sortedDirection == 'ns' or sortedDirection == 'ew':
        turns = 2
    elif len(sortedDirection) == 2:
        turns = 1
    else:
        turns = 2

    POWER = POWER - (moves * 10 + turns * 5)
    print('POWER:', POWER)
