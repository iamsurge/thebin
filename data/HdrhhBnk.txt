const ranges = [
  { start: '192.168.0.0', end: '192.168.0.255' },
  { start: '192.168.1.0', end: '192.168.1.255' },
  { start: '192.168.2.0', end: '192.168.2.255' },
];

function isInRange(ip) {
  return function(range) {
    const start = range.start.split('.').map(Number);
    const end = range.end.split('.').map(Number);
    const ipNum = ip.split('.').map(Number);
    return start.every((v, i) => v <= ipNum[i] && ipNum[i] <= end[i]);
  };
}

const search = '192.168.1.100';
const range = ranges.find(isInRange(search));

console.log(range);
// Output: { start: '192.168.1.0', end: '192.168.1.255' }





function binarySearch(array, value) {
  let low = 0;
  let high = array.length - 1;

  while (low <= high) {
    const mid = Math.floor((low + high) / 2);
    const current = array[mid];
    if (current === value) {
      return mid;
    } else if (current < value) {
      low = mid + 1;
    } else {
      high = mid - 1;
    }
  }

  return -1;
}

const values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10];
console.log(binarySearch(values, 5)); // Output: 4
console.log(binarySearch(values, 11)); // Output: -1


const ranges = [
  { start: 3232235520, end: 3232235783 }, // 192.168.0.0 - 192.168.0.255
  { start: 3232236032, end: 3232236095 }, // 192.168.1.0 - 192.168.1.255
  { start: 3232236352, end: 3232236367 }, // 192.168.2.0 - 192.168.2.255
];

const ipAddresses = [];
for (const range of ranges) {
  for (let i = range.start; i <= range.end; i++) {
    ipAddresses.push(int2ip(i));
  }
}

console.log(binarySearch(ipAddresses, '192.168.1.0')); // Output: 256
console.log(binarySearch(ipAddresses, '192.168.3.0')); // Output: -1



function ip2int(ip) {
  return ip.split('.').reduce((int, oct) => (int << 8) + parseInt(oct, 10), 0) >>> 0;
}


function int2ip(int) {
  return (int >>> 24) + '.' + (int >> 16 & 255) + '.' + (int >> 8 & 255) + '.' + (int & 255);
}





