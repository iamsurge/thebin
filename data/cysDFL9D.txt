use std::collections::HashMap;
use std::env;
use tokio::io;
use tokio::io::{AsyncBufReadExt, AsyncReadExt};

#[tokio::main]
async fn main() -> Result<(), Box<dyn std::error::Error>> {
    let args: Vec<String> = env::args().collect();
    let address = &args[1];
    let port = &args[2];

    let mut map = HashMap::new();
    let mut token_to_do = String::new();
    let mut login = String::new();
    let mut group = String::new();

    std::io::stdin().read_line(&mut token_to_do).unwrap();

    if token_to_do.trim_end() == ("newMemb") {
        println!("Enter your login");
        std::io::stdin().read_line(&mut login).unwrap();
        println!("Enter your group");
        std::io::stdin().read_line(&mut group).unwrap();
        map.insert("token_to_do",&token_to_do);
        map.insert("login",&login);
        map.insert("group",&group);

        let client = reqwest::Client::new();
        let link = format!("http://{}:{}/newMemb", address, port);
        let res = client.post(link)
            .json(&map)
            .send()
            .await?;
        let link = format!("http://{}:{}/newMemb", address, port);
        let resp = reqwest::get(link)
            .await?
            .text()
            .await?;
        println!("{:#?}", resp);
        map.clear();
    }
    else if token_to_do.trim_end() == ("exit") {
        println!("end of the program");
        map.insert("token_to_do",&token_to_do);

        let client = reqwest::Client::new();
        let link = format!("http://{}:{}/santas", address, port);
        let res = client.post(link)
            .json(&map)
            .send()
            .await?;
        let link = format!("http://{}:{}/santas", address, port);
        let resp = reqwest::get(link)
            .await?
            .text()
            .await?;
        println!("{:#?}", resp);
        map.clear();
    }
    else {
        println!("Err: Bad request");
    }
    Ok(())
}