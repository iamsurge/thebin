local starterGui = game:GetService('StarterGui')

wait(1)
starterGui:SetCore("SendNotification", {
    Title = "Credits",
    Text = "Made By Tully#2697, Henry1887#6969, And Many Others"
});


local Noclip = nil
local Clip = nil

function noclip()
	Clip = false
	local function Nocl()
		if Clip == false and game.Players.LocalPlayer.Character ~= nil then
			for _,v in pairs(game.Players.LocalPlayer.Character:GetDescendants()) do
				if v:IsA('BasePart') and v.CanCollide and v.Name ~= floatName then
					v.CanCollide = false
				end
			end
		end
		wait(0.21)
	end
	Noclip = game:GetService('RunService').Stepped:Connect(Nocl)
end

function clip()
	if Noclip then Noclip:Disconnect() end
	Clip = true
end

noclip()
--// Services \\--
local Players = game:GetService("Players")
local Workspace = game:GetService("Workspace")
local ReplicatedStorage = game:GetService("ReplicatedStorage")

--// Variables \\--
local Player = Players.LocalPlayer
local Boosts = Workspace:WaitForChild("Map"):WaitForChild("Stages"):WaitForChild("Boosts")
local World = Player:WaitForChild("leaderstats"):WaitForChild("WORLD")
local RemoteEvent = ReplicatedStorage:WaitForChild("RemoteEvent")

--// Loop! \\--
while wait(Delay) do
    --// Get Highest Value Target \\--
    local Current_World = Boosts[World.Value]
    local Collectable = nil
    local Highest = 0
    for _, A_1 in next, Current_World:GetChildren() do
        local A_2 = A_1.Name
        local Number = tonumber(A_2:sub(#A_2, #A_2))
        if Number > Highest then
            Highest = Number
            Collectable = A_1
        end
    end
    --// Collect Highest Value \\--
    if Collectable ~= nil then
        pcall(function()
            game.Players.LocalPlayer.Character.Humanoid:MoveTo(Collectable.PrimaryPart.Position)
        end)
    end
end