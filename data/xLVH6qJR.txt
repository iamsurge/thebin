local RunService = game:GetService("RunService")

local module = {}



-- !== ================================================================================||>
-- !==									Remote Events
-- !== ================================================================================||>
-- =============================== Server API ===============================||>
if RunService:IsServer() then
	local EventsFolder: Folder = Instance.new("Folder")
	EventsFolder.Name   = "RemoteEvents"
	EventsFolder.Parent = script

	---* Constructor ||>
	function module:Event(name: string): RemoteEvent
		local Event = EventsFolder:FindFirstChild(name)
		
		if Event then
			return Event
	
		else
			local newEvent: RemoteEvent = Instance.new("RemoteEvent")
			newEvent.Name = name
			newEvent.Parent = EventsFolder
			
			return newEvent
		end
	end


	---* Mirrored Functions (for consistency) ||>
	function module:Connect(name: string, handler:(player: Player, ...any) -> nil): nil
		local Event = EventsFolder:FindFirstChild(name)
		if Event then
			Event.OnServerEvent:Connect(handler)
			return
		end

		error("Attempted to index Connect with nil, ".. name.. " Remote Event does no exist! Did you forgot to create it?")
	end

	
		
	function module:FireClient(eventName: string, player: Player, ...:any)
		local Event: RemoteEvent = EventsFolder:FindFirstChild(eventName)
		if Event then
			Event:FireClient(player, ...)
			return
		end

		warn(eventName, "Remote Event does no exist! Did you forgot to create it?")
		return
	end

	
	function module:FireAllClients(eventName: string, ...:any)
		local Event: RemoteEvent = EventsFolder:FindFirstChild(eventName)
		if Event then
			Event:FireAllClients(...)
			return
		end

		warn(eventName, "Remote Event does no exist! Did you forgot to create it?")
		return
	end



	---* Filtered FireEvent functions ||>
	--## To fire to an specific group of players if a predicate return true


	function module:FireForSomeClients(eventName: string, playersArray: {Player}, ...:any)
		local Event: RemoteEvent = EventsFolder:FindFirstChild(eventName)
		if Event then
			for _, player in playersArray do
				Event:FireClient(player, ...)
			end
			return
		end

		warn(eventName, "Remote Event does no exist! Did you forgot to create it?")
		return
	end
	
	function module:FireForSomeClientsIfTrue(eventName: string, playersArray: {Player}, predicate: () -> boolean, ...:any)
		local Event: RemoteEvent = EventsFolder:FindFirstChild(eventName)
		if Event then
			for _, player in playersArray do
				if predicate() then
					Event:FireClient(player, ...)
				end
			end		

			return
		end

		warn(eventName, "Remote Event does no exist! Did you forgot to create it?")
		return
	end
	



	
	function module:FireClientIfTrue(eventName: string, player, predicate: () -> nil, ...:any)
		local Event: RemoteEvent = EventsFolder:FindFirstChild(eventName)
		if Event then
			if predicate() then
				Event:FireClient(player, ...)
				return
			end
		end

		warn(eventName, "Remote Event does no exist! Did you forgot to create it?")
		return
	end



	function module:FireAllClientsIfTrue(eventName: string, predicate:() -> boolean, ...:any)
		local Event: RemoteEvent = EventsFolder:FindFirstChild(eventName)
		if Event then
			if predicate() then
				Event:FireAllClients(...)
			end
			return
		end

		warn(eventName, "Remote Event does no exist! Did you forgot to create it?")
		return
	end

end



-- =============================== Client API ===============================||>
if RunService:IsClient() then
	function module:Event(name: string, timeout: number?): RemoteEvent
		local elapsedTime = 0
		local timeoutAt   = timeout or 5
		local Event       = script.RemoteEvents:FindFirstChild(name)
		
		if Event then 
			print("found", name)
			return Event 
		end 
		
		print("did not found", name, "waiting")
		
		repeat
			local Event = script.RemoteEvents:FindFirstChild(name) 
			
			if Event then 
				print("found", name, "after waiting")
				return Event 
			end
			print("waiting")

			elapsedTime += 1
			task.wait(1)

		until elapsedTime > timeoutAt
		
		warn("Infinite yield on", name, ", the event was not found on time! Are you sure it was created?")
		return nil
	end


	function FireServer()
		
	end

end






-- !== ================================================================================||>
-- !==									Remote Functions
-- !== ================================================================================||>
module.Functions = {}

function module:Function()
end



-- !== ================================================================================||>
-- !==									Object Values
-- !== ================================================================================||>
module.BaseValues = {}
function module:BaseValue()
end


return module