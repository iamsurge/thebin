const child = useProfileStore.getState().getUserChilds()[0];
    const cid = child?.cid;
    const isTimerLate = state.overtime;
    const stateToSave = isTimerLate ? TimerEndState.LATE : TimerEndState.EARLY;

    let usageState;
    
    try {
      usageState = await firestore()
        .collection(USAGE_COLLECTION)
        .doc(cid)
        .get()
        .then((documentSnapshot) => {
          return documentSnapshot.get(`timerEnd.${currentDate}.state`);
        });
    } catch (error) {
      console.error(error);
    }

    if (usageState === TimerEndState.EARLY) return;
    else if (usageState === TimerEndState.LATE && stateToSave === TimerEndState.LATE) return;

    const data = {
      [`${currentDate}`]: {
        state: stateToSave,
      },
    };

    try {
      await firestore().collection(USAGE_COLLECTION).doc(cid).set(
        {
          timerEnd: data,
        },
        { merge: true },
      );
    } catch (error) {
      console.error(error);
    }