#include <iostream>
#include <vector>
#include <string>
using namespace std;

void sieve_down(vector<pair<int, int>>& vec, int i) {
    int l = i * 2 + 1, r = i * 2 + 2, k = i;
    if (l < vec.size() && vec[l].second < vec[k].second) {
        k = l;
    }
    if (r < vec.size() && vec[r].second < vec[k].second)
        k = r;
    if (k != i) {
        swap(vec[i], vec[k]);
        sieve_down(vec, k);
    }
}

void extract(vector <pair<int, int>>& vec) {
    if (vec.size() == 0) {
        cout << "*";
        return;
    }
    cout << vec[0].second;
    swap(vec[0], vec[vec.size() - 1]);
    vec.pop_back();
    sieve_down(vec, 0);
}

void sieve_up(vector <pair<int, int>>& vec, int i) {
    while (i > 0 && vec[(i - 1) / 2].second > vec[i].second) {
        swap(vec[(i - 1) / 2], vec[i]);
        i = (i - 1) / 2;
    }
}

void decrease(vector <pair<int, int>>& vec, int x, int y) {

    for (int i = 0; i < vec.size(); ++i) {
        if (vec[i].first == x) {
            vec[i].second = y;
            sieve_up(vec, i);
            break;
        }
    }
}

void push(vector <pair<int, int>>& vec, int num, int count) {

    vec.push_back(pair<int, int>(count, num));
    sieve_up(vec, vec.size() - 1);
}

int main() {
    vector <pair<int, int>> vec;
    string s;
    int count = 1;
    int num, num2;
    while (cin >> s) {
        if (s[0] == 'e') {
            extract(vec);
        }
        else if (s[0] == 'p') {
            cin >> num;
            push(vec, num, count);
        }
        else if (s[0] == 'd') {
            cin >> num >> num2;
            decrease(vec, num, num2);
        }
        count++;
    }

    return 0;
}