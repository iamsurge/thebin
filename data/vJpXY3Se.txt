#ifndef COMMON_BLOOM_FILTER_HH
#define COMMON_BLOOM_FILTER_HH
#include <algorithm>
#include <cassert>
#include <cmath>
#include <cstdint>
#include <cstring>
#include <iterator>
#include <string>
#include <string_view>
#include <type_traits>
#include <vector>
#include "xxhash.hh"

template <typename T, typename U, typename = void>
struct is_type_sequence : std::false_type {};

template <typename T, typename U>
struct is_type_sequence<T, U, std::void_t<
       std::enable_if_t<std::is_convertible_v<
       decltype(std::declval<T>().data()), const U *>>,
       decltype(std::declval<T>().size())>> : std::true_type {};

template <typename T>
inline constexpr bool is_char_sequence_v = is_type_sequence<T, char>::value;

template <typename T, template <typename...> typename U>
struct is_specialization_of : std::false_type {};

template <template <typename...> class T, typename... Args>
struct is_specialization_of<T<Args...>, T> : std::true_type {};

template <typename T, template <typename...> typename U>
inline constexpr bool is_specialization_of_v = is_specialization_of<T, U>::value;

template <typename Key> class BloomFilter {
public:
  // If this constructor is used, then it is
  // mandatory to call .resize() before usage.
  // The 42 number is just to make 
  // correct overload resolution
  template <typename T, std::enable_if_t<std::is_same_v<T, double>, int> = 42>
  BloomFilter(T false_positive_probability)
      : m_false_positive_probability{ false_positive_probability }
      , m_num_hashes{ calcOptimalNumHashes() }
      , m_size{} {}

  BloomFilter(size_t elements_count, double false_positive_probability = 0.0001)
      : m_false_positive_probability{ false_positive_probability }
      , m_num_hashes{ calcOptimalNumHashes() } 
  {
    resize(elements_count);
  }

  // Deserializing constuctor. Constructs filter from a sequence of uint8_t
  template <typename T,
            typename = std::enable_if_t<is_type_sequence<T, uint8_t>::value>>
  BloomFilter(T bytes)
      : m_bits{ [bytes = std::move(bytes)]() mutable {
                assert((bytes.size() >= (sizeof(double) + sizeof(size_t))) &&
                        "Invalid buffer to deserialize");
                if constexpr (is_specialization_of_v<decltype(bytes), std::vector>) {
                  return std::move(bytes);
                } else {
                  return std::vector(bytes.begin(), bytes.end());
                }
            }() } 
  {
    size_t info_pos = m_bits.size() - (sizeof(double) + sizeof(size_t));
    std::memcpy(&m_false_positive_probability, m_bits.data() + info_pos, sizeof(double));
    std::memcpy(&m_size, m_bits.data() + info_pos + sizeof(double), sizeof(size_t));

    m_bits.erase(m_bits.begin() + info_pos, m_bits.end());
    m_num_hashes = calcOptimalNumHashes();
  }

  void resize(size_t elements_count) 
  {
    m_bits.resize(calcOptimalNumBits(elements_count), 0);
    m_size = elements_count;
  }

private:
  size_t calcOptimalNumBits(size_t elem_size) const;
  size_t calcOptimalNumHashes() const;

public:
  // For detail description of insert/contains
  // routine for bloom filter please visit
  // https://en.wikipedia.org/wiki/Bloom_filter#Algorithm_description

  void insert(const Key& elem);
  template<typename T, typename = std::enable_if_t<std::is_convertible_v<Key, T>>>
  bool contains(const T& elem) const;

private:
  // Calculates hash and returns position
  // in the m_bits for some element
  size_t calcCharIdx(XXHash& xxh, std::string_view data, size_t bits) const;

  // Returns a view to element bytes for
  // trivially copyable and sequential char data
  template<typename T>
  std::string_view toBytes(const T& elem) const;

public:
  std::vector<uint8_t> serialize() const;
  size_t size() const { return m_size; }

private:
  static inline constexpr size_t uint8_t_bits = 8;
  static inline constexpr uint8_t bit_mask[uint8_t_bits] = {
      1, 1 << 1, 1 << 2, 1 << 3, 1 << 4, 1 << 5, 1 << 6, 1 << 7};

  size_t m_size;
  double m_false_positive_probability;
  size_t m_num_hashes;
  std::vector<uint8_t> m_bits;
};

template <typename Key>
size_t BloomFilter<Key>::calcOptimalNumBits(size_t elements_count) const 
{
  // m = -(n * ln p)/(ln 2)^2, where m is number of bits,
  // n is number of elements and p is false positive probability
  return static_cast<size_t>(
      std::ceil(
        -((elements_count * std::log(m_false_positive_probability))
          / (std::log(2) * std::log(2))) / uint8_t_bits
      )
    );
}

template <typename Key> size_t BloomFilter<Key>::calcOptimalNumHashes() const 
{
  // k = (m/n)* ln 2, where k is hash functions number.
  // If we substitute this formula into one that for
  // bits number, we will get k = -(ln p)/(ln 2)
  return static_cast<size_t>(
      std::round(
        -(std::log(m_false_positive_probability) / std::log(2))
      )
    );
}

template <typename Key>
size_t BloomFilter<Key>::calcCharIdx(XXHash& xxh, std::string_view data, size_t bits) const 
{
  xxh.update(data.data(), data.size());
  return xxh.digest() % bits;
}

template <typename Key>
template<typename T>
std::string_view BloomFilter<Key>::toBytes(const T& elem) const 
{
  std::string_view data;

  if constexpr (is_char_sequence_v<T>) {
    data = {elem.data(), elem.size()};
  } else {
    static_assert(std::is_trivially_copyable_v<T>,
                  "Type is required to be trivially copyable to read it as "
                  "byte sequence");
    data = {reinterpret_cast<const char *>(&elem), sizeof(elem)};
  }

  return data;
}

template<typename Key>
void BloomFilter<Key>::insert(const Key& elem) 
{
  XXHash xxh{};
  auto data = toBytes(elem);
  size_t bits = m_bits.size() * uint8_t_bits;

  for (size_t i = 0; i < m_num_hashes; i++) {
    xxh.reset(i);
    size_t char_idx = calcCharIdx(xxh, data, bits);
    m_bits[char_idx >> 3] |= bit_mask[char_idx & (uint8_t_bits - 1)];
  }
}

template <typename Key>
template<typename T, typename>
bool BloomFilter<Key>::contains(const T& elem) const 
{
  XXHash xxh{};
  auto data = toBytes(elem);
  size_t bits = m_bits.size() * uint8_t_bits;

  for (size_t i = 0; i < m_num_hashes; i++) {
    xxh.reset(i);
    size_t char_idx = calcCharIdx(xxh, data, bits);
    auto mask = bit_mask[char_idx & (uint8_t_bits - 1)];
    if ((m_bits[char_idx >> 3] & mask) != mask) {
      return false;
    }
  }

  return true;
}

template <typename Key>
std::vector<uint8_t> BloomFilter<Key>::serialize() const 
{
  constexpr size_t offset = sizeof(double) + sizeof(size_t);
  std::array<uint8_t, offset> info_bytes{};
  std::memcpy(info_bytes.data(), &m_false_positive_probability, sizeof(double));
  std::memcpy(info_bytes.data() + sizeof(double), &m_size, sizeof(size_t));

  std::vector<uint8_t> ret;
  ret.reserve(m_bits.size() + offset);
  std::copy(m_bits.begin(), m_bits.end(), std::back_inserter(ret));
  std::copy(info_bytes.begin(), info_bytes.end(), std::back_inserter(ret));
  return ret;
}

#endif // COMMON_BLOOM_FILTER_HH