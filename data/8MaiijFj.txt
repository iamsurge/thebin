	char* m_zenith_patch;
	char* m_zenith_transition_patch;
	char* m_east_azimuth_patch;
	char* m_west_azimuth_patch;
	char* m_azimuth_transition_patch;
	char* m_cloud_base_patch;
	PVOID shitter_crash;
	float* red_zenith;
	float* green_zenith;
	float* blue_zenith;
	float* red_transition;
	float* green_transition;
	float* blue_transition;
	float* red_cloud;
	float* green_cloud;
	float* blue_cloud;
	float* m_azimuth_west_red;
	float* m_azimuth_west_green;
	float* m_azimuth_west_blue;
	float* m_azimuth_est_red;
	float* m_azimuth_est_green;
	float* m_azimuth_est_blue;

	m_zenith_patch(Signature("0F 29 A2 B0 00 00 00 8B 81 58 03 00 00").Scan().As<decltype(m_zenith_patch)>()),//GTA5.exe+E3FF77
	m_zenith_transition_patch(Signature("0F 29 A2 E0 00 00 00").Scan().As<decltype(m_zenith_transition_patch)>()),//GTA5.exe+E3FFB1
	m_east_azimuth_patch(Signature("0F 29 62 20").Scan().As<decltype(m_east_azimuth_patch)>()),//GTA5.exe+E3FEC9
	m_west_azimuth_patch(Signature("0F 29 62 50 8B 81 9C 03 00 00").Scan().As<decltype(m_west_azimuth_patch)>()),//GTA5.exe+E3FEFD
	m_azimuth_transition_patch(Signature("0F 29 A2 80 00 00 00").Scan().As<decltype(m_azimuth_transition_patch)>()),//GTA5.exe+E3FF31
	m_cloud_base_patch(Signature("0F 29 A2 80 03 00 00").Scan().As<decltype(m_cloud_base_patch)>()),//GTA5.exe+E402F1
	red_zenith(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 28 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3D ? ? ? 3D ? E0 B0 3C ? ? 80 3F ? ? ? 3E ? ? ? 3F ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3E ? ? ? ? ? ? ? 3F ? ? ? 3F 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? C0 35 3F ? C0 35 3F ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 80 42 ? ? ? 43 ? ? 80 3C ? ? ? ? 24 ?").Scan().As<float*>()),//GTA5.exe+26BB960
	green_zenith(Signature("? ? ? ? ? ? ? ? ? E0 B0 3C ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 28 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3D ? ? ? 3D ? E0 B0 3C ? ? 80 3F ? ? ? 3E ? ? ? 3F ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3E ? ? ? ? ? ? ? 3F ? ? ? 3F 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? C0 35 3F ? C0 35 3F ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 80 42 ? ? ? 43 ? ? 80 3C ? ? ? ? 24 ?").Scan().As<float*>()),//GTA5.exe+26BB964
	blue_zenith(Signature("? ? ? ? ? E0 B0 3C ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 28 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3D ? ? ? 3D ? E0 B0 3C ? ? 80 3F ? ? ? 3E ? ? ? 3F ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3E ? ? ? ? ? ? ? 3F ? ? ? 3F 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? C0 35 3F ? C0 35 3F ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 80 42 ? ? ? 43 ? ? 80 3C ? ? ? ? 24 ?").Scan().As<float*>()),//GTA5.exe+26BB968
	red_transition(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB990
	green_transition(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB994
	blue_transition(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 27 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 26 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 44 ? ? 80 42 ? ? ? 43 ? ? ? ? 25").Scan().As<float*>()),//GTA5.exe+26BB998
	red_cloud(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 1B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? B8 ? ? ? ? ? ? ? 40 ? ? ? ? ? ? ? 3F ? ? ? ? 17 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 40 ? ? ? ? ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3C 16 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3C ?").Scan().As<float*>()),//GTA5.exe+26BBC30
	green_cloud(Signature("? ? ? ? ? ? ? ? ? ? ? ? 1B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? B8 ? ? ? ? ? ? ? 40 ? ? ? ? ? ? ? 3F ? ? ? ? 17 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 40 ? ? ? ? ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3C 16 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3C ?").Scan().As<float*>()),//GTA5.exe+26BBC34
	blue_cloud(Signature("? ? ? ? ? ? ? ? 1B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? B8 ? ? ? ? ? ? ? 40 ? ? ? ? ? ? ? 3F ? ? ? ? 17 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 40 ? ? ? ? ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3C 16 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3C ?").Scan().As<float*>()),//GTA5.exe+26BBC38
	m_azimuth_west_red(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 2B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3E ? ? ? ? ? ? 80 3F 2A ? ? ? ? ? ? 3F ? ? ? ? 29 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3D ? ? ? 3D ? E0 B0 3C ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 28").Scan().As<float*>()),//GTA5.exe+26BB900
	m_azimuth_west_green(Signature("? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 2B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3E ? ? ? ? ? ? 80 3F 2A ? ? ? ? ? ? 3F ? ? ? ? 29 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3D ? ? ? 3D ? E0 B0 3C ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 28").Scan().As<float*>()),//GTA5.exe+26BB904
	m_azimuth_west_blue(Signature("? ? ? ? ? ? ? 3D ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 2B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3E ? ? ? ? ? ? 80 3F 2A ? ? ? ? ? ? 3F ? ? ? ? 29 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3D ? ? ? 3D ? E0 B0 3C ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 28").Scan().As<float*>()),//GTA5.exe+26BB908
	m_azimuth_est_red(Signature("? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 2C ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 2B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 29 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 28").Scan().As<float*>()),//GTA5.exe+26BB8D0
	m_azimuth_est_green(Signature("? ? ? ? ? ? ? ? ? ? ? 3D ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 2C ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 2B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 29 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 28").Scan().As<float*>()),//GTA5.exe+26BB8D4
	m_azimuth_est_blue(Signature("? ? ? ? ? ? ? 3D ? ? 80 3F ? ? ? ? ? ? ? ? ? ? ? ? 2C ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 3D ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 2B ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? 29 ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? ? E0 B0 3C ? ? ? 3F ? ? ? ? ? ? ? ? ? ? ? ? 28").Scan().As<float*>()),//GTA5.exe+26BB8D8
	
#pragma region azimuthz
		case azimuthz:
		{
			Menu::Title("Change Color");
			headers::thunderheaders();
			Menu::Float("zenith_red value", g_Settings.zenith_red, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_green value", g_Settings.zenith_green, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_blue value", g_Settings.zenith_blue, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_intensity value", m_vars.m_zenith_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("Color Pattern1"))
			{
				std::fill_n(g_GameVariables->m_zenith_patch, 7, '\x90');
				*(float*)g_GameVariables->red_zenith = (g_Settings.zenith_red / 255.f) * m_vars.m_azimuth_transition_intensity;
				*(float*)g_GameVariables->green_zenith = (g_Settings.zenith_green / 255.f) * m_vars.m_azimuth_transition_intensity;
				*(float*)g_GameVariables->blue_zenith = (g_Settings.zenith_blue / 255.f) * m_vars.m_azimuth_transition_intensity;
			}
			if (Menu::Option("Color Pattern2"))
			{
				std::fill_n(g_GameVariables->m_zenith_patch, 7, '\x90');
				DWORD hash_code = (((int)m_vars.m_zenith_intensity & 0xFF) << 24) + (((int)g_Settings.zenith_red & 0xFF) << 16) + (((int)g_Settings.zenith_green & 0xFF) << 8) + ((int)g_Settings.zenith_blue & 0xFF);
				g_Settings.m_SkyAlpha = (hash_code & 0xFF000000) >> 24;
				g_Settings.m_SkyRed = (hash_code & 0x00FF0000) >> 16;
				g_Settings.m_SkyGreen = (hash_code & 0x0000FF00) >> 8;
				g_Settings.m_SkyBlue = (hash_code & 0x000000FF);
				*(float*)g_GameVariables->red_zenith = (g_Settings.m_SkyRed / 255.f) * g_Settings.m_SkyAlpha;
				*(float*)g_GameVariables->green_zenith = (g_Settings.m_SkyGreen / 255.f) * g_Settings.m_SkyAlpha;
				*(float*)g_GameVariables->blue_zenith = (g_Settings.m_SkyBlue / 255.f) * g_Settings.m_SkyAlpha;
			}
			if (Menu::Option("Color Pattern3"))
			{
				std::fill_n(g_GameVariables->m_zenith_patch, 7, '\x90');
				DWORD hash_code = (((int)m_vars.m_zenith_intensity & 0xFF) << 24) + (((int)g_Settings.zenith_red & 0xFF) << 16) + (((int)g_Settings.zenith_green & 0xFF) << 8) + ((int)g_Settings.zenith_blue & 0xFF);
				g_Settings.m_SkyAlpha = (hash_code & 0xFF000000) >> 24;
				g_Settings.m_SkyRed = (hash_code & 0x00FF0000) >> 16;
				g_Settings.m_SkyGreen = (hash_code & 0x0000FF00) >> 8;
				g_Settings.m_SkyBlue = (hash_code & 0x000000FF);
				*(float*)g_GameVariables->red_zenith = g_Settings.m_SkyRed;
				*(float*)g_GameVariables->green_zenith = g_Settings.m_SkyGreen;
				*(float*)g_GameVariables->blue_zenith = g_Settings.m_SkyBlue;
			}
			Menu::Float("m_zenith_transition_red value", m_vars.m_zenith_transition_red, 0.f, 255.0f, 1.f);
			Menu::Float("m_zenith_transition_green value", m_vars.m_zenith_transition_green, 0.f, 255.0f, 1.f);
			Menu::Float("m_zenith_transition_blue value", m_vars.m_zenith_transition_blue, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_intensity value", m_vars.m_zenith_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("Color Transition"))
			{
				std::fill_n(g_GameVariables->m_zenith_transition_patch, 7, '\x90');
				uintptr_t base_address = uintptr_t(GetModuleHandleA(nullptr));
				uintptr_t zenith_transition_red = engine::scan_address(base_address + 0x26BB990, {});
				uintptr_t zenith_transition_green = engine::scan_address(base_address + 0x26BB994, {});
				uintptr_t zenith_transition_blue = engine::scan_address(base_address + 0x26BB998, {});

				*(float*)zenith_transition_red = (m_vars.m_zenith_transition_red / 255.f) * m_vars.m_zenith_transition_intensity;
				*(float*)zenith_transition_green = (m_vars.m_zenith_transition_green / 255.f) * m_vars.m_zenith_transition_intensity;
				*(float*)zenith_transition_blue = (m_vars.m_zenith_transition_blue / 255.f) * m_vars.m_zenith_transition_intensity;
			}
			if (Menu::Option("Color Transition Pattern"))
			{
				std::fill_n(g_GameVariables->m_zenith_transition_patch, 7, '\x90');
				DWORD hash_code = (((int)m_vars.m_zenith_intensity & 0xFF) << 24) + (((int)g_Settings.zenith_red & 0xFF) << 16) + (((int)g_Settings.zenith_green & 0xFF) << 8) + ((int)g_Settings.zenith_blue & 0xFF);
				g_Settings.m_SkyAlpha = (hash_code & 0xFF000000) >> 24;
				g_Settings.m_SkyRed = (hash_code & 0x00FF0000) >> 16;
				g_Settings.m_SkyGreen = (hash_code & 0x0000FF00) >> 8;
				g_Settings.m_SkyBlue = (hash_code & 0x000000FF);
				*(float*)g_GameVariables->red_transition = g_Settings.m_SkyRed;
				*(float*)g_GameVariables->green_transition = g_Settings.m_SkyGreen;
				*(float*)g_GameVariables->blue_transition = g_Settings.m_SkyBlue;
			}
			if (Menu::Option("Reset"))
			{
				std::copy_n("\x0F\x29\xA2\xE0", 7, g_GameVariables->m_zenith_transition_patch);
			}
			headers::thunderbackgrounds();
			backgrounds::casefourteen();
		}
		break;
#pragma endregion
#pragma region azimuthwest
		case azimuthwest:
		{
			Menu::Title("Change Color");
			headers::thunderheaders();
			Menu::Float("m_azimuth_west_red value", m_vars.m_azimuth_west_red, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_west_green value", m_vars.m_azimuth_west_green, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_west_blue value", m_vars.m_azimuth_west_blue, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_west_intensity value", m_vars.m_azimuth_west_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("m_azimuth_west"))
			{
				std::fill_n(g_GameVariables->m_west_azimuth_patch, 4, '\x90');
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				uintptr_t west_red = engine::scan_address(g_base_address + 0x26BB900, {});
				uintptr_t west_green = engine::scan_address(g_base_address + 0x26BB904, {});
				uintptr_t west_blue = engine::scan_address(g_base_address + 0x26BB908, {});
				*(float*)west_red = (m_vars.m_azimuth_west_red / 255.f) * m_vars.m_azimuth_west_intensity;
				*(float*)west_green = (m_vars.m_azimuth_west_green / 255.f) * m_vars.m_azimuth_west_intensity;
				*(float*)west_blue = (m_vars.m_azimuth_west_blue / 255.f) * m_vars.m_azimuth_west_intensity;
			}
			if (Menu::Option("m_azimuth_west Pattern"))
			{
				std::fill_n(g_GameVariables->m_west_azimuth_patch, 4, '\x90');
				*(float*)g_GameVariables->m_azimuth_west_red = (m_vars.m_azimuth_west_red / 255.f) * m_vars.m_azimuth_west_intensity;
				*(float*)g_GameVariables->m_azimuth_west_green = (m_vars.m_azimuth_west_green / 255.f) * m_vars.m_azimuth_west_intensity;
				*(float*)g_GameVariables->m_azimuth_west_blue = (m_vars.m_azimuth_west_blue / 255.f) * m_vars.m_azimuth_west_intensity;
			}
			if (Menu::Option("Reset"))
			{
				std::copy_n("\x0F\x29\x62\x50", 4, g_GameVariables->m_west_azimuth_patch);
			}
			headers::thunderbackgrounds();
			backgrounds::caseseven();
		}
		break;
#pragma endregion
#pragma region azimuthtransition
		case azimuthtransition:
		{			
			Menu::Title("Change Color");
			headers::thunderheaders();
			Menu::Float("m_azimuth_transition_red value", m_vars.m_azimuth_transition_red, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_transition_green value", m_vars.m_azimuth_transition_green, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_transition_blue value", m_vars.m_azimuth_transition_blue, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_transition_intensity value", m_vars.m_azimuth_transition_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("m_azimuth_transition"))
			{
				std::fill_n(g_GameVariables->m_azimuth_transition_patch, 7, '\x90');
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				uintptr_t azi_trans_red = engine::scan_address(g_base_address + 0x26BB930, {});
				uintptr_t azi_trans_green = engine::scan_address(g_base_address + 0x26BB934, {});
				uintptr_t azi_trans_blue = engine::scan_address(g_base_address + 0x26BB938, {});
				*(float*)azi_trans_red = (m_vars.m_azimuth_transition_red / 255.f) * m_vars.m_azimuth_transition_intensity;
				*(float*)azi_trans_green = (m_vars.m_azimuth_transition_green / 255.f) * m_vars.m_azimuth_transition_intensity;
				*(float*)azi_trans_blue = (m_vars.m_azimuth_transition_blue / 255.f) * m_vars.m_azimuth_transition_intensity;
			}
			if (Menu::Option("Reset"))
			{
				std::copy_n("\x0F\x29\xA2\x80", 7, g_GameVariables->m_azimuth_transition_patch);
			}
			headers::thunderbackgrounds();
			backgrounds::casesix();
		}
		break;
#pragma endregion
#pragma region zenith
		case zenith:
		{
			Menu::Title("Change Color");
			headers::thunderheaders();
			Menu::Float("zenith_red value", m_vars.m_zenith_red, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_green value", m_vars.m_zenith_green, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_blue value", m_vars.m_zenith_blue, 0.f, 255.0f, 1.f);
			Menu::Float("zenith_intensity value", m_vars.m_zenith_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("Clouds Color"))
			{
				std::fill_n(g_GameVariables->m_zenith_patch, 7, '\x90');
				uintptr_t base_address = uintptr_t(GetModuleHandleA(nullptr));
				uintptr_t zenith_red = engine::scan_address(base_address + 0x26BB960, {});
				uintptr_t zenith_green = engine::scan_address(base_address + 0x26BB964, {});
				uintptr_t zenith_blue = engine::scan_address(base_address + 0x26BB968, {});
				*(float*)zenith_red = (m_vars.m_zenith_red / 255.f) * m_vars.m_zenith_intensity;
				*(float*)zenith_green = (m_vars.m_zenith_green / 255.f) * m_vars.m_zenith_intensity;
				*(float*)zenith_blue = (m_vars.m_zenith_blue / 255.f) * m_vars.m_zenith_intensity;
			}
			headers::thunderbackgrounds();
			backgrounds::caseseven();
		}
		break;
#pragma endregion
#pragma region azimutheast
		case azimutheast:
		{
			Menu::Title("Change Color");
			headers::thunderheaders();
			Menu::Float("m_azimuth_east_red value", m_vars.m_azimuth_east_red, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_east_green value", m_vars.m_azimuth_east_green, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_east_blue value", m_vars.m_azimuth_east_blue, 0.f, 255.0f, 1.f);
			Menu::Float("m_azimuth_east_intensity value", m_vars.m_azimuth_east_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("m_azimuth_east "))
			{
				std::fill_n(g_GameVariables->m_east_azimuth_patch, 4, '\x90');
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				uintptr_t east_red = engine::scan_address(g_base_address + 0x26BB8D0, {});
				uintptr_t east_green = engine::scan_address(g_base_address + 0x26BB8D4, {});
				uintptr_t east_blue = engine::scan_address(g_base_address + 0x26BB8D8, {});
				*(float*)east_red = (m_vars.m_azimuth_east_red / 255.f) * m_vars.m_azimuth_east_intensity;
				*(float*)east_green = (m_vars.m_azimuth_east_green / 255.f) * m_vars.m_azimuth_east_intensity;
				*(float*)east_blue = (m_vars.m_azimuth_east_blue / 255.f) * m_vars.m_azimuth_east_intensity;
			}
			if (Menu::Option("m_azimuth_east Pattern"))
			{
				std::fill_n(g_GameVariables->m_east_azimuth_patch, 4, '\x90');
				*(float*)g_GameVariables->m_azimuth_est_red = (m_vars.m_azimuth_east_red / 255.f) * m_vars.m_azimuth_east_intensity;
				*(float*)g_GameVariables->m_azimuth_est_green = (m_vars.m_azimuth_east_green / 255.f) * m_vars.m_azimuth_east_intensity;
				*(float*)g_GameVariables->m_azimuth_est_blue = (m_vars.m_azimuth_east_blue / 255.f) * m_vars.m_azimuth_east_intensity;
			}
			if (Menu::Option("Reset "))
			{
				std::copy_n("\x0F\x29\x62\x20", 4, g_GameVariables->m_east_azimuth_patch);
			}
			headers::thunderbackgrounds();
			backgrounds::caseseven();
		}
		break;
#pragma endregion
#pragma region azimutheast
		case cloudbase:
		{
			Menu::Title("Change Color");
			headers::thunderheaders();
			Menu::Float("m_cloud_base_red value", m_vars.m_cloud_base_red, 0.f, 255.0f, 1.f);
			Menu::Float("m_cloud_base_green value", m_vars.m_cloud_base_green, 0.f, 255.0f, 1.f);
			Menu::Float("m_cloud_base_blue value", m_vars.m_cloud_base_blue, 0.f, 255.0f, 1.f);
			Menu::Float("m_cloud_base_intensity value", m_vars.m_cloud_base_intensity, 0.f, 255.0f, 1.f);
			if (Menu::Option("cloud_base "))
			{
				std::fill_n(g_GameVariables->m_cloud_base_patch, 7, '\x90');
				uintptr_t g_base_address = uintptr_t(GetModuleHandleA(nullptr));
				uintptr_t cloud_base_red = engine::scan_address(g_base_address + 0x26BBC30, {});
				uintptr_t cloud_base_green = engine::scan_address(g_base_address + 0x26BBC34, {});
				uintptr_t cloud_base_blue = engine::scan_address(g_base_address + 0x26BBC38, {});
				*(float*)cloud_base_red = (m_vars.m_cloud_base_red / 255.f) * m_vars.m_cloud_base_intensity;
				*(float*)cloud_base_green = (m_vars.m_cloud_base_green / 255.f) * m_vars.m_cloud_base_intensity;
				*(float*)cloud_base_blue = (m_vars.m_cloud_base_blue / 255.f) * m_vars.m_cloud_base_intensity;
			}
			if (Menu::Option("cloud_base Pattern"))
			{
				std::fill_n(g_GameVariables->m_cloud_base_patch, 7, '\x90');
				*(float*)g_GameVariables->red_cloud = (m_vars.m_cloud_base_red / 255.f) * m_vars.m_cloud_base_intensity;
				*(float*)g_GameVariables->green_cloud = (m_vars.m_cloud_base_green / 255.f) * m_vars.m_cloud_base_intensity;
				*(float*)g_GameVariables->blue_cloud = (m_vars.m_cloud_base_blue / 255.f) * m_vars.m_cloud_base_intensity;
			}
			if (Menu::Option("Reset"))
			{
				std::copy_n("\x0F\x29\xA2\x80\x03", 7, g_GameVariables->m_cloud_base_patch);
			}
			headers::thunderbackgrounds();
			backgrounds::caseseven();
		}
		break;
#pragma endregion

			bool getwaterpointer;
				if (Menu::Option("Get Water Pointer")) {
					auto WaterPtr2 = Memory::pattern("48 8B D9 48 6B DB 1C 48 2B F9 48 8B 05 ? ? ? ?");
					DWORD64* d_location = nullptr;
					d_location = (DWORD64*)WaterPtr2.count(1).get(0).get<DWORD64*>(0);
					std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
					DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
					Log::Msg((char*)datar.c_str());
					Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
					std::stringstream myStrm(datar);
					DWORD64 x;
					myStrm >> x;
					std::string address2;
					stringstream addrs2;
					addrs2 << hex << "0x" << x;
					address2 = addrs2.str();
					Log::Msg((char*)address2.c_str());

					std::string address;
					stringstream addrs;
					addrs << hex << "0x" << base_address;
					address = addrs.str();
					Log::Msg((char*)address.c_str());
					std::stringstream myStrm1;
					myStrm1 << base_address;
					DWORD64 x1;
					myStrm1 >> x1;
					std::stringstream myStrm2(datar);
					DWORD64 x2;
					myStrm2 >> x2;
					DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
					Log::Msg((char*)std::string(std::to_string(in2)).c_str());
					std::string address3;
					stringstream addrs3;
					addrs3 << hex << "0x" << in2;
					address3 = addrs3.str();
					Log::Msg((char*)address3.c_str());
					Addresss::AddressPTR2 = new char[address3.size() + 1];
					strcpy(Addresss::AddressPTR2, address3.c_str());
					Addresss::AddressPTR1 = in2;
					getwaterpointer = 1;
				}
				if (getwaterpointer)
				{
					Menu::Toggle("Swim Anywhere", anywhere::swimbool);
	
				Menu::Float("m_WaterOpacity value", g_Settings.m_WaterOpacity, 0.f, 255.0f, 1.f);
				Menu::Int("m_WaterLevel value", g_Settings.m_WaterLevel, -1000, 1000, 1);
				Menu::Int("m_WaterLevel Height value", g_Settings.m_WaterLevel, -1000, 1000, 10);
				if (Menu::Option("Water Level From Address")) {
					static DWORD64 water_address, water_pointer = 0;
					DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
					if (water_address == 0)
						water_address = engine::scan_address(base_address + 0x58a695, {}) + 0xA;
					Log::Msg((char*)std::string(std::to_string(water_address)).c_str());
					if (water_pointer == 0 && water_address != 0)
						water_pointer = ((water_address + *(DWORD*)(water_address + 0x3)) + 0x7);
					for (int i = 0; i < 821; i++)
					{
						CWaterDataItem* Water = (CWaterDataItem*)(*(DWORD64*)water_pointer + (i * 0x1c));
						Water->fHeight = g_Settings.m_WaterLevel;
						Water->iAlphaNE = g_Settings.m_WaterOpacity;
						Water->iAlphaNW = g_Settings.m_WaterOpacity;
						Water->iAlphaSE = g_Settings.m_WaterOpacity;
						Water->iAlphaSW = g_Settings.m_WaterOpacity;
					}
				}
				if (Menu::Option("Change Water Level From GetPointer")) {
					static DWORD64 water_address, water_pointer = 0;
					DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
					if (water_address == 0)
						water_address = engine::scan_address(base_address + Addresss::AddressPTR1, {}) + 0xA;
					Log::Msg((char*)std::string(std::to_string(water_address)).c_str());
					if (water_pointer == 0 && water_address != 0)
						water_pointer = ((water_address + *(DWORD*)(water_address + 0x3)) + 0x7);
					for (int i = 0; i < 821; i++)
					{
						CWaterDataItem* Water = (CWaterDataItem*)(*(DWORD64*)water_pointer + (i * 0x1c));
						Water->fHeight = g_Settings.m_WaterLevel;
						Water->iAlphaNE = g_Settings.m_WaterOpacity;
						Water->iAlphaNW = g_Settings.m_WaterOpacity;
						Water->iAlphaSE = g_Settings.m_WaterOpacity;
						Water->iAlphaSW = g_Settings.m_WaterOpacity;
					}
				}










				bool watertunes;
				if (Menu::Option("WaterTunes GetPointer")) {
					Log::Msg("Water Tune");
					auto WaterPtr2 = Memory::pattern("0F B6 05 ? ? ? ? 0F 28 4C 24 ?");
					DWORD64* d_location = nullptr;
					d_location = (DWORD64*)WaterPtr2.count(1).get(0).get<DWORD64*>(0);
					std::string datar = std::string(std::to_string(reinterpret_cast<DWORD64>(d_location)));
					DWORD64 base_address = DWORD64(GetModuleHandleA(nullptr));
					Log::Msg((char*)datar.c_str());
					Log::Msg((char*)std::string(std::to_string(base_address)).c_str());
					std::stringstream myStrm(datar);
					DWORD64 x;
					myStrm >> x;
					std::string address2;
					stringstream addrs2;
					addrs2 << hex << "0x" << x;
					address2 = addrs2.str();
					Log::Msg((char*)address2.c_str());

					std::string address;
					stringstream addrs;
					addrs << hex << "0x" << base_address;
					address = addrs.str();
					Log::Msg((char*)address.c_str());
					std::stringstream myStrm1;
					myStrm1 << base_address;
					DWORD64 x1;
					myStrm1 >> x1;
					std::stringstream myStrm2(datar);
					DWORD64 x2;
					myStrm2 >> x2;
					DWORD64 in2 = ((DWORD64)x2 - (DWORD64)x1);
					Log::Msg((char*)std::string(std::to_string(in2)).c_str());
					std::string address3;
					stringstream addrs3;
					addrs3 << hex << "0x" << in2;
					address3 = addrs3.str();
					Log::Msg((char*)address3.c_str());
					Addresss::AddressPTR01 = in2;
					watertunes = 1;
				}
				if (watertunes)
				{
					Menu::Float("spec value", g_Settings.spec, -255.0f, 255.0f, 1.f);
					if (Menu::Option("fSpecularFalloff from address")) {
						static DWORD64 water_address, water_pointer = 0;
						uintptr_t base_address = uintptr_t(GetModuleHandleA(nullptr));
						water_address = engine::scan_address(base_address + 0x585C28, {});
						water_pointer = ((water_address + *(DWORD*)(water_address + 0x3)) + 0x4);
						CWaterTune* WaterTune = (CWaterTune*)water_pointer;
						WaterTune->fSpecularFalloff = g_Settings.spec;
					}
					if (Menu::Option("fSpecularFalloff from getpointer")) {
						static DWORD64 water_address, water_pointer = 0;
						uintptr_t base_address = uintptr_t(GetModuleHandleA(nullptr));
						water_address = engine::scan_address(base_address + Addresss::AddressPTR01, {});
						water_pointer = ((water_address + *(DWORD*)(water_address + 0x3)) + 0x4);
						CWaterTune* WaterTune = reinterpret_cast<CWaterTune*>(water_pointer);
						WaterTune->fSpecularFalloff = g_Settings.spec;
					}

				Menu::Int("red value water", g_Settings.red, 0, 255, 1);
				Menu::Int("green value", g_Settings.green, 0, 255, 1);
				Menu::Int("blue value", g_Settings.blue, 0, 255, 1);
				Menu::Int("alpha value", g_Settings.alpha, 0, 255, 1);



				if (Menu::Option("m_Water Color")) {
					static DWORD64 water_address, water_pointer = 0;
					uintptr_t base_address = uintptr_t(GetModuleHandleA(nullptr));
					if (water_address == 0)
						water_address = engine::scan_address(base_address + 0x585C28, {});
					if (water_pointer == 0 && water_address != 0)
						water_pointer = ((water_address + *(DWORD*)(water_address + 0x3)) + 0x4);
					std::string watercolor;
					DWORD value = ((g_Settings.red & 0xFF) << 24) + ((g_Settings.green & 0xFF) << 16) + ((g_Settings.blue & 0xFF) << 8) + (g_Settings.alpha & 0xFF);
					stringstream hcolor;
					hcolor << hex << value;
					watercolor = hcolor.str();
					std::stringstream myStrm2(watercolor);
					/*std::stringstream myStrm2;

					myStrm2 << "0x" << value;*/
					DWORD64 x2;
					myStrm2 >> x2;

					CWaterTune* water = (CWaterTune*)water_pointer;
					water->dwWaterColor = x2;
				}

				}
				 }












bool antispamming[32] = { 0 };

int GiveVehicle::transactionerror()
{
	DWORD ticks10 = GetTickCount64();
	DWORD milliseconds10 = ticks10 % 1000;
	ticks10 /= 1000;
	DWORD seconds10 = ticks10 % 60;
	int getTimer10 = seconds10;
	if (getTimer10 % 1 == 0)
	{
		for (int i = 0; i < 32; i++)
		{
			if (Features::errorsend[i])
			{
				if (ENTITY::DOES_ENTITY_EXIST(Hooking::get_player_ped(i)))
				{
					unsigned int playerBit = (1 << i);
					auto var0 = globalHandle(1894573 + 1 + i * 608 + 510).As<std::uint64_t>();
					auto var1 = globalHandle(1923597 + 9).As<std::uint64_t>();
					int ssplay = PLAYER::GET_PLAYER_PED_SCRIPT_INDEX(i);
					int zero0 = -492741651;
					int numberzero = 0;
					int tenk = 10000;
					uint64_t zerofoo = (uint64_t)numberzero;
					uint64_t kten = (uint64_t)tenk;
					uint64_t sssplay = (uint64_t)ssplay;
					uint64_t foozero = (uint64_t)zero0;
					uint64_t errortransaction[8] = { foozero, sssplay, kten, zerofoo, zerofoo, var0, var1, var1 };
					RtlSecureZeroMemory(errortransaction, sizeof(errortransaction));
					errortransaction[0] = foozero;
					errortransaction[1] = sssplay;
					errortransaction[2] = kten;
					errortransaction[3] = zerofoo;
					errortransaction[4] = zerofoo;
					errortransaction[5] = var0;
					errortransaction[6] = var1;
					errortransaction[7] = var1;
					Hooking::trigger_script_event(1, &errortransaction[0], 8, playerBit);
				}
				else {
					Features::errorsend[i] = 0;
				}
			}
		}
	}
	return 0;
}
bool GiveVehicle::antispambool = 0;
int GiveVehicle::antispam()
{
	std::uint64_t args_1[3] = { -904555865, net_playerm_player_id, 1 };
	std::uint64_t args_2[3] = { 879177392, net_playerm_player_id, 1 };
	std::uint64_t args_3[3] = { -168599209, net_playerm_player_id, 1 };
	std::uint64_t args_4[3] = { 1192608757, net_playerm_player_id, 1 };
	std::uint64_t args_5[3] = { 1124104301, net_playerm_player_id, 1 };
	std::uint64_t args_6[3] = { -904555865, net_playerm_player_id, 1 };
	std::uint64_t args_7[10] = { -904555865, net_playerm_player_id, 0,  1229879414 , 1742796505 , -1794944145 , -480124848 , 439776191 , -2062014584 , 2120444344 };
	std::uint64_t args_8[12] = { 879177392, net_playerm_player_id, -72614, 63007, 59027, -12012, -26996, 33398, 33398, 63007, -72614, 59027 };
	std::uint64_t args_9[46] = { -904555865, net_playerm_player_id, -2147483647, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534 };
	std::uint64_t args_10[46] = { 879177392, net_playerm_player_id, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 65534, 2147483647, 65534, 65534,65534, 65534, 65534, 65534, 2147483647, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, 65534, -2147483647, 65534, 65534, 65534, -2147483647 };
	std::uint64_t args_11[46] = { 548471420, net_playerm_player_id, -904555865, -989654618, 879177392, -2113023004, 548471420, 1249026189, 1033875141, 315658550, 1124104301, -601625146 - 2043109205, -989654618, 879177392, -2113023004, 548471420, 1249026189, 1033875141, 315658550, -877212109, -601625146 - 2043109205, -989654618, 879177392, -2113023004, 548471420, 1249026189, 1033875141, 315658550, 1124104301, -601625146 - 2043109205, -989654618, 879177392, -1881357102, 548471420, 1249026189, 1033875141, 315658550, 1124104301, -601625146 };
	std::uint64_t args_12[46] = { 879177392, net_playerm_player_id, 868904806, 262276366, -747991709, 1545080914, -51510646, 1790326295, 389113600, -617567498, -601391132, -564503258, -601625146 - 2043109205, -989654618, 879177392, -2113023004, 548471420, 1249026189, 1033875141, 315658550, -601625146 - 2043109205, -989654618, 879177392, -2113023004, 548471420, 1249026189, 1033875141, 315658550 };
	Hooking::trigger_script_event(1, args_1, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_2, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_3, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_4, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_5, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_6, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_6, 3, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_7, 10, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_8, 12, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_9, 46, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_10, 46, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_11, 46, 1 << net_playerm_player_id);
	Hooking::trigger_script_event(1, args_12, 46, 1 << net_playerm_player_id);
	GiveVehicle::antispambool = 0;
	Log::Msg("Anti Spam");
	if (!Features::errorsend[net_playerm_player_id])
	Features::errorsend[net_playerm_player_id] = !Features::errorsend[net_playerm_player_id];
	GiveVehicle::transactionerror();
	Log::Msg("Event Send Complet");
	return 0;
}

string convertToString(char* a, int size)
{
	int i;
	string s = "";
	for (i = 0; i < size; i++) {
		s = s + a[i];
	}
	return s;
}
#pragma execution_character_set("utf-8")
int cleanrepeat()
{
	StopRepeat01 = "";
	StopRepeat02 = "";
	StopRepeat03 = "";
	StopRepeat04 = "";
	StopRepeat001 = "";
	StopRepeat002 = "";
	StopRepeat003 = "";
	StopRepeat004 = "";
	StopRepeat1 = "";
	StopRepeat2 = "";
	StopRepeat3 = "";
	StopRepeat4 = "";
	return 0;
}
std::vector<std::string> splitText(const std::string& s, char delimiter)
{
	std::vector<std::string> tokens;
	std::string token;
	std::istringstream tokenStream(s);
	while (std::getline(tokenStream, token, delimiter))
	{
		tokens.push_back(token);
	}
	return tokens;
}

	if (GiveVehicle::norepeat)
		{

			net_playerm_player_id = net_player->m_player_id;
			numrepeat = numrepeat + 1;
			bool checkword = 1;
			if (numrepeat == 1)
			{
			SpamRepeatint1 = net_playerm_player_id;
			char a[] = { (char)msg };
			int a_size = sizeof(a) / sizeof(char);
			string cs = convertToString(a, a_size);
				std::string sprogram = " ";
				std::string::size_type ig = cs.find(sprogram);
				if (ig != std::string::npos)
				{
				std::vector<std::string> words = splitText(msg, ' ');
					if (words[0] != "")
					{
						StopRepeat1 = words[0];
					}
					if (words[1] != "")
					{
						StopRepeat2 = words[1];
					}
					if (words[1] == "")
					{
						checkword = 0;
						goto endantispam;
					}
					if (checkword)
					{
						if (words[2] != "")
						{
							StopRepeat3 = words[2];
						}
						if (words[2] == "")
						{
							checkword = 0;
							goto endantispam;
						}
						if (words[3] != "")
						{
							StopRepeat4 = words[3];
						}
						if (words[3] == "")
						{
							checkword = 0;
							goto endantispam;
						}
					}
				}
				else
				{
					checkword = 0;
					goto endantispam;
				}
				}
			if (numrepeat == 2)
			{
				SpamRepeatint2 = net_playerm_player_id;
				if (SpamRepeatint1 == SpamRepeatint2)
				{
					char a[] = { (char)msg };
					int a_size = sizeof(a) / sizeof(char);
					string cs = convertToString(a, a_size);
					std::string sprogram = " ";
					std::string::size_type ig = cs.find(sprogram);
					if (ig != std::string::npos)
					{
						std::vector<std::string> words = splitText(msg, ' ');
						if (words[0] != "")
						{
							StopRepeat01 = words[0];
						}
						if (words[1] != "")
						{
							StopRepeat02 = words[1];
						}
						if (words[1] == "")
						{
							checkword = 0;
							goto endantispam;
						}
						if (checkword)
						{
							if (words[2] != "")
							{
								StopRepeat03 = words[2];
							}
							if (words[2] == "")
							{
								goto endantispam;
							}
							if (words[3] != "")
							{
								StopRepeat04 = words[3];
							}
							if (words[3] == "")
							{
								goto endantispam;
							}
						}
					}
					else
					{
						checkword = 0;
						goto endantispam;
					}
				}
				if (SpamRepeatint1 != SpamRepeatint2)
				{
					checkword = 0;
					goto endantispam;
				}
			}
			if (numrepeat == 3)
			{
				SpamRepeatint2 = net_playerm_player_id;
				if (SpamRepeatint1 == SpamRepeatint2)
				{
					char a[] = { (char)msg };
					int a_size = sizeof(a) / sizeof(char);
					string cs = convertToString(a, a_size);
					std::string sprogram = " ";
					std::string::size_type ig = cs.find(sprogram);
					if (ig != std::string::npos)
					{
					std::vector<std::string> words = splitText(msg, ' ');
					if (words[0] != "")
					{
						StopRepeat001 = words[0];
						if ((char*)StopRepeat001.c_str() != (char*)StopRepeat01.c_str())
						{
							goto endantispam;
						}
					}
					if (words[1] != "")
					{
						StopRepeat002 = words[1];
						if ((char*)StopRepeat002.c_str() != (char*)StopRepeat02.c_str())
						{
							goto endantispam;
						}
					}
					if ((char*)StopRepeat002.c_str() == "")
					{
						goto endantispam;
					}
					if (words[1] == "")
					{
						checkword = 0;
						goto endantispam;
					}
					if (checkword)
					{
						if (words[2] != "")
						{
							StopRepeat003 = words[3];
							if ((char*)StopRepeat003.c_str() != (char*)StopRepeat03.c_str())
							{
								goto endantispam;
							}
						}
						if (words[2] == "")
						{
							checkword = 0;
							goto endantispam;
						}
						if (words[3] != "")
						{
							StopRepeat004 = words[4];
							if ((char*)StopRepeat004.c_str() != (char*)StopRepeat04.c_str())
							{
								goto endantispam;
							}
							if ((char*)StopRepeat004.c_str() == (char*)StopRepeat04.c_str())
							{
								activeantispam();
								goto endantispam;
							}
						}
						if (words[3] == "")
						{
							checkword = 0;
							goto endantispam;
						}
					}
					}
					else
					{
						checkword = 0;
						goto endantispam;
					}
				}
				if (SpamRepeatint1 != SpamRepeatint2)
				{ 
					goto endantispam;
				}
			}
			endantispam:
			{
				cleanrepeat();
				numrepeat = 0;
			}
		}