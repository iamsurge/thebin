#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

vector<int> used;
vector<vector<int> > path;
vector<vector<int> > dp;
vector<int> weight;
vector<int> ancestor;
int answer;

void dfs(int v){
    dp[v][0] = dp[ancestor[v]][1];
    dp[v][1] = dp[ancestor[v]][0] + weight[v];
    
    used[v] = 1;
    for(int u:path[v])
    {
        if(used[u]) continue;
        dfs(u);
    }
}

int dfs1(int v){

  used[v] = 1;
  int curr = 0;
  for (int u:path[v]){
    if (used[u]) continue;
    curr += dfs1(u);
  }
  answer = max(answer, curr + weight[v]);
  cout << answer << endl;
  if (v == 0)
    return answer;
  return max(dp[v][0], dp[v][1]);
  
}

int main() {
  int n;
  cin >> n;

  used.resize(n + 1, 0);
  path.resize(n + 1, vector<int>(n + 1));
  ancestor.resize(n + 1);
  ancestor[0] = 0;
  
  weight.resize(n + 1);
  dp.resize(n + 1, vector<int>(2));
  weight[0] = 0;

  for(int i = 1; i < n + 1; i++){
    int p, q;
    cin >> p >> q;
    ancestor[i] = p;
    path[p].push_back(i);
    weight[i] = q;
  }

  dfs(0);
  
  for (int i = 0; i < n + 1; i++)
    used[i] = 0;
  
  cout << dfs1(0) << '\n';

  
  return 0;
}