class Solution {
public:
    bool isValid(int i, int j, vector<vector<char>>& grid) {
        return i >= 0 and i < grid.size() and j >= 0  and j < grid[0].size() and grid[i][j] == '1';
    }
    void dfs(int i, int j, vector<vector<char>>& grid) {
        if(!isValid(i, j, grid)) return;
        vector<pair<int, int>> dirs = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        grid[i][j] = '0';
        for(auto dir : dirs) {
            int dx = i + dir.first;
            int dy = j + dir.second;
            dfs(dx, dy, grid);
        }
    }
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;
        for(int i = 0; i < n; i++) {
            for(int j = 0; j  < m; j++) {
                if(grid[i][j] == '1') {
                    ans++;
                    dfs(i, j, grid);
                    
                }
            }
        }
        return ans;
    }
};