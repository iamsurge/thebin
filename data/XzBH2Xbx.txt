// Setup API
const serverUrl = process.env.SERVER_URL || 'http://localhost:7071';
const baseUrl = serverUrl + '/api/boltricsapi/ODataV4/Company(%27ShipRelay%27)/';

const api = require('./test-api')(baseUrl);

// Setup entity
const entity = 'ShippingAgent';

// Setup input data
const dataManager = require('./data-manager.js');
const boltricsPostData = dataManager.post(entity);
const boltricsPatchData = dataManager.patch(entity);

// Setup entity endpoint, e.g. ShippingAgent('DHL-test')
const entityEndpoint = entity + `('${boltricsPostData.Code}')`;

// Mock for testing DELETE/GET FAIL
const notFoundObject = {
	error: {
      code: 'BadRequest_ResourceNotFound',
	}
};

const xSrForward = false;

describe(`BoltricsApi xSrForward=${xSrForward}`, () => {  
	jest.setTimeout(12000) 

  test("Clean", async () => {
console.log(`Before, test("Clean", async () => {`)
    await api.delete(entityEndpoint, {xSrForward});
console.log(`After, test("Clean", async () => {`)
console.log(`Before, await api.delete(entityEndpoint, {xSrForward});`)
    const result = await api.get(entityEndpoint)
console.log(`After, await api.delete(entityEndpoint, {xSrForward});`)
    expect(result.body)
    	.toMatchObject(notFoundObject);
  });

  test("Create", async () => {
console.log(`Before, test("Create", async () => {`)
  	const result = await api.post(entity, boltricsPostData, {xSrForward});
console.log(`After, test("Create", async () => {`)
    expect(result.body).toMatchObject(boltricsPostData);
  });

  test("Get", async () => {
console.log(`Before, test("Get", async () => {`)
  	const result = await api.get(entityEndpoint);
console.log(`After, test("Get", async () => {`)
    expect(result.body).toMatchObject(boltricsPostData);
  });

  if(boltricsPatchData) {
	  test("Patch", async () => {
console.log(`Before, test("Patch", async () => {`)
	  	const result = await api.patch(entity, boltricsPatchData, {xSrForward})
console.log(`After, test("Patch", async () => {`)
	    expect(result.body)
	      .toMatchObject(boltricsPostData);
	  });

	  test("Get Patched", async () => {
console.log(`Before, test("Get Patched", async () => {`)
	  	const result = await api.get(entityEndpoint)
console.log(`After, test("Get Patched", async () => {`)
	    expect(result.body)
	      .toMatchObject(boltricsPatchData);
	  });
  }

  test("Delete", async () => {
console.log(`Before, test("Delete", async () => {`)
  	const result = await api.delete(entityEndpoint, {xSrForward})
console.log(`After, test("Delete", async () => {`)
    expect(result).toMatchObject({status:204 });
    
console.log('Before, const result2 = await api.get(entityEndpoint)')
    const result2 = await api.get(entityEndpoint)
console.log('After, const result2 = await api.get(entityEndpoint)')
    expect(result2.body).toMatchObject(notFoundObject);
  });

});
