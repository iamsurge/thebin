from os import access
from rest_framework.response import Response
from users import serializers
from users.models import userCastem
from rest_framework.views import APIView
from django.contrib.auth.hashers import make_password
from rest_framework.permissions import IsAuthenticated,AllowAny,IsAuthenticatedOrReadOnly
from users.serializers import UserSerializer
from rest_framework_simplejwt.tokens import RefreshToken
from rest_framework import status
from django.conf import settings
from pilkashop24.settings import SECRET_KEY
from django.middleware import csrf
from django.contrib.auth import authenticate
from rest_framework_simplejwt.views import TokenViewBase
from rest_framework_simplejwt.exceptions import InvalidToken,TokenError

import jwt


class addUser(APIView): 
    def post(self, request):
          TelInput= request.data.get('TelInput')
          username =request.data.get('username')
          eMail =request.data.get('eMail')
          passwordReg =request.data.get('passwordReg')
          userCastem.objects.create(telephon=TelInput,username=username,email=eMail,password=make_password(passwordReg))
          return Response('yes')


class UserProf(APIView):
    permission_classes = [AllowAny]
    def post(self, request):
        data = request.data
        print(data)
        id = data.get('idUser')
        user = userCastem.objects.get(id=id)
        serializer= UserSerializer(user,many=True)
        return Response(serializer.data)   


def get_tokens_for_user(user):
    refresh = RefreshToken.for_user(user)
    return {
         'access': str(refresh.access_token),
         'refresh': str(refresh),
    }

class LoginView(APIView):
     permission_classes = [AllowAny]
     def post(self, request,format=None):
        data = request.data     
        response = Response() 
        telephon = data.get('telephon', None)
        password = data.get('password', None)
        user = authenticate(telephon=telephon, password=password)
        if user is not None:
            if user.is_active:
                tokens = get_tokens_for_user(user)
                print(tokens["refresh"])
                response.set_cookie(
                    value = tokens["refresh"],
                    key = settings.SIMPLE_JWT['AUTH_COOKIE'], 
                    expires = settings.SIMPLE_JWT['ACCESS_TOKEN_LIFETIME'],
                    secure = settings.SIMPLE_JWT['AUTH_COOKIE_SECURE'],
                    httponly = settings.SIMPLE_JWT['AUTH_COOKIE_HTTP_ONLY'],
                    samesite = settings.SIMPLE_JWT['AUTH_COOKIE_SAMESITE'],
                )
                print(request.COOKIES)
                decodeJTW = jwt.decode(str(tokens["access"]),SECRET_KEY,algorithms=["HS256"])
                # add payload here!!
                # decodeJTW['user'] ='Артур'
                encoded = jwt.encode(decodeJTW, SECRET_KEY,algorithm="HS256")
                csrf.get_token(request)
                
                response.data = {
                    'access': str(encoded),
                }
                
                return response(response.data)
        else:
            return Response({"Invalid" : "Не правильный пароль"}, status=status.HTTP_404_NOT_FOUND)