#include <iostream>
#include <cmath>
#include <vector>
#include <queue>
#include <algorithm>
#include <string>
#include <stack>
#include <set>
#include <map>
#define pii pair <int, int>
#define pb(x) push_back(x)
using namespace std;
using ll = long long;
using ld = long double;
using db = double;
void cv(vector <int> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}

void cvl(vector <ll> &v) {
    for (auto x : v) cout << x << ' ';
    cout << "\n";
}


void cvv(vector <vector <int> > &v) {
    for (auto x : v) cv(x);
    cout << "\n";
}

void cvb(vector <bool> v) {
    for (bool x : v) cout << x << ' ';
    cout << "\n";
}

void cvs(vector <string>  v) {
    for (auto a : v) {
        cout << a << "\n";
    }
}

void cvp(vector <pii> a) {
    for (auto p : a) {
        cout << p.first << ' ' << p.second << "\n";
    }
    cout << "\n";
}

bool sh = 2;

void slv() {
    int n; cin >> n;
    vector <ll> a(n), b(n), rawb(n), l(n, -1), r(n, -1);
    set <pii> s;
    for (int i = 0; i < n; ++i) {
        cin >> a[i];
        cin >> rawb[i];
        b[i] = rawb[i];
        if (i > 0) {
            l[i] = i - 1;
        }
        if (i < n - 1) {
            r[i] = i + 1;
        }
        if (i > 0 && i < n - 1) {
            b[i] *= 2;
        }
        s.insert({b[i], i});
    }
    int kl = 0;
    ll ans = 0;
    while (kl < n) {
        kl++;
        pii prey = *s.begin();
        int j = prey.second;
        ans += a[j];
        int tol = l[j], tor = r[j];
        if (tol != -1) {
            a[tol] += rawb[j]; //именно rawb!!!
            r[tol] = tor;
        }
        if (tor != -1) {
            a[tor] += rawb[j];
            l[tor] = tol;
        }
        if (tor != -1 && tol != -1) {
            continue;
        }
        if (tor == -1 && tol == -1) {
            continue;
        }
        ll k, newbk;
        if (tor == -1) {
            k = tol;
            newbk = b[k] - rawb[k];
            auto delit = s.find({b[k], k});
            s.erase(delit);
            b[k] = newbk;
            s.insert({newbk, k});
            continue;
        }
        //if tol == -1
        k = tor;
        newbk = b[k] - rawb[k];
        auto delit = s.find({b[k], k});
        s.erase(delit);
        b[k] = newbk;
        s.insert({b[k], k});
    }
    cout << ans << "\n";
}

/*
3
100 1 100
1 100 1
*/

int main() {
    if (!sh) {
        ios::sync_with_stdio(0);
        cin.tie(0);
        cout.tie(0);
    }
    int t = 1;
    if (!sh) cin >> t;
    for (int go = 0 ; go < t; ++go) {
        slv();
    }
}
