海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥飙升榜@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"text_icon\",\"name\":\"歌单二级\",\"path\":\"gd\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\nvar pic = JSON.parse(html).playlist.coverImgUrl;\\nd.push({      \\n        img: pic,\\n        url: pic,\\ncol_type: 'pic_1_full'\\n})\\nvar list = JSON.parse(html).playlist.tracks;\\nfor (var j in list) {\\n    d.push({\\n        title: list[j].name,\\n        desc: list[j].ar[0].name,\\n        img: list[j].al.picUrl,\\n        url: 'http://121.4.78.106:4001/song/url?id='+list[j].id+$('').lazyRule(() => {\\nvar url = JSON.parse(request(input)).data[0].url\\ninput = input.replace('song/url','lyric')\\nlog(input)\\nvar lrc = JSON.parse(request(input)).lrc.lyric\\n\\nreturn JSON.stringify({\\n                    urls: [url+'#isMusic=true#'],\\n                    lyric: lrc\\n                })\\n}),\\ncol_type: 'icon_2'\\n    });\\n}\\nsetResult(d)\"},{\"col_type\":\"text_icon\",\"name\":\"排行二级\",\"path\":\"phxq\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\nvar list = JSON.parse(html).playlist.tracks;\\nfor (var j in list) {\\n    d.push({\\n        title: list[j].name,\\n        desc: list[j].ar[0].name,\\n        img: list[j].al.picUrl+ '@Referer=',\\n        url: 'http://121.4.78.106:4001/song/url?id='+list[j].id+$('').lazyRule(() => {\\nlog(input)\\nvar url = JSON.parse(request(input)).data[0].url\\ninput = input.replace('song/url','lyric')\\nvar lrc = JSON.parse(request(input)).lrc.lyric\\n\\nreturn JSON.stringify({\\n                    urls: [url+'#isMusic=true##noLoading#'],\\n                    lyric: lrc\\n                })\\n}),\\ncol_type: 'icon_2',\\n    });\\n}\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"h5排行\",\"path\":\"ph\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\nvar list = JSON.parse(html).playlist.tracks;\\n\\nlet 传输列表 = []\\nlet xd = JSON.stringify(list) == JSON.stringify(storage0.getVar('数据校对', []));\\nif (xd == false) {\\nfor (let j = 0; j < list.length; j++) {   \\n    let title = list[j].name;\\n    let first = list[0].name;\\n    let desc = list[j].ar[0].name;\\n    let img = list[j].al.picUrl;\\n    let url = 'http://121.4.78.106:4001/song/url?id=' + list[j].id + $('').lazyRule(() => {\\n        var url = JSON.parse(request(input)).data[0].url\\n        return url + '#isMusic=true#';\\n    });\\n    /* 快速告诉x5列表样式，很重要 */\\n    let col_type = 'avatar'\\n    putVar('样式', col_type)\\n    putVar('选中颜色', '#3CE68E');\\n    if (col_type == 'text_1')\\n        xy = '““””<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\n    else\\n        xy = '<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\n    d.push({\\n        title: title == getVar('索引', first) && MY_PAGE == 1 ? xy : title,\\n        desc: desc,\\n        img: img,\\n        col_type: col_type,\\n        url: $('#noHistory##noLoading#').lazyRule((title, first, xy) => {\\n            if (getVar('索引') != title) {\\n                refreshX5WebView(getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html'))\\n                updateItem(getVar('索引', first), {\\n                    title: getVar('索引', first)\\n                })\\n                updateItem(title, {\\n                    title: xy\\n                })\\n                putVar('索引', title)\\n            } else {\\n                return 'download://' + getVar('播放链接');\\n            }\\n            return 'hiker://empty';\\n        }, title, first, xy),\\n        extra: {\\n            id: title\\n        },\\n    });\\n\\n    传输列表.push({\\n        封面: img,\\n        曲名: title,\\n        歌手: desc,\\n        地址: url,\\n    })\\n}\\n\\n    传输列表 = storage0.getVar('缓存数据', []).concat(传输列表)\\n    storage0.putVar('缓存数据', 传输列表)\\n    storage0.putVar('数据校对', list)\\n}\\naddListener('onClose', $.toString(() => {\\n    clearVar('样式');\\n    clearVar('索引');\\n    clearVar('播放链接');\\n    clearVar('数据校对');\\n    clearVar('缓存数据');\\n}))\\n传输列表 = storage0.getVar('缓存数据')\\nputVar('音乐数据', JSON.stringify(传输列表))\\nif (MY_PAGE == 1) {\\n    d.push({\\n        col_type: 'x5_webview_single',\\n        desc: '300&&float',\\n        extra: {\\n            ua: MOBILE_UA,\\n            autoPlay: true\\n        },\\n        url: getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html')\\n    });\\n}\\n\\nsetResult(d)\"},{\"col_type\":\"movie_3\",\"name\":\"h5歌单\",\"path\":\"hgd\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\nlet 传输列表 = []\\nlet list = JSON.parse(html).playlist.tracks;\\nlet xd = JSON.stringify(list) == JSON.stringify(storage0.getVar('数据校对', []));\\nif (xd == false) {\\n    for (let j = 0; j < list.length; j++) {\\n        let title = list[j].name;\\n        let first = list[0].name;\\n        let desc = list[j].ar[0].name;\\n        let img = list[j].al.picUrl;\\n        let url = 'http://121.4.78.106:4001/song/url?id=' + list[j].id + $('').lazyRule(() => {\\n            var url = JSON.parse(request(input)).data[0].url\\n            return url + '#isMusic=true#';\\n        });\\n        /* 快速告诉x5列表样式，很重要 */\\n        let col_type = 'avatar'\\n        putVar('样式', col_type)\\n        putVar('选中颜色', '#3CE68E');\\n        if (col_type == 'text_1')\\n            xy = '““””<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\n        else\\n            xy = '<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\n        d.push({\\n            title: title == getVar('索引', first) && MY_PAGE == 1 ? xy : title,\\n            desc: desc,\\n            img: img,\\n            col_type: col_type,\\n            url: $('#noHistory##noLoading#').lazyRule((title, first, xy) => {\\n                if (getVar('索引') != title) {\\n                    refreshX5WebView(getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html'))\\n                    updateItem(getVar('索引', first), {\\n                        title: getVar('索引', first)\\n                    })\\n                    updateItem(title, {\\n                        title: xy\\n                    })\\n                    putVar('索引', title)\\n                } else {\\n                    return 'download://' + getVar('播放链接');\\n                }\\n                return 'hiker://empty';\\n            }, title, first, xy),\\n            extra: {\\n                id: title\\n            },\\n        });\\n\\n        传输列表.push({\\n            封面: img,\\n            曲名: title,\\n            歌手: desc,\\n            地址: url,\\n        })\\n    }\\n\\n    传输列表 = storage0.getVar('缓存数据', []).concat(传输列表)\\n    storage0.putVar('缓存数据', 传输列表)\\n    storage0.putVar('数据校对', list)\\n}\\naddListener('onClose', $.toString(() => {\\n    clearVar('样式');\\n    clearVar('索引');\\n    clearVar('播放链接');\\n    clearVar('数据校对');\\n    clearVar('缓存数据');\\n}))\\n传输列表 = storage0.getVar('缓存数据')\\nputVar('音乐数据', JSON.stringify(传输列表))\\nif (MY_PAGE == 1) {\\n    d.push({\\n        col_type: 'x5_webview_single',\\n        desc: '300&&float',\\n        extra: {\\n            ua: MOBILE_UA,\\n            autoPlay: true\\n        },\\n        url: getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html')\\n    });\\n}\\n\\n\\nsetResult(d)\"}],\"params\":\"{\\\"newWindow\\\":true,\\\"windowId\\\":\\\"云音乐\\\"}\",\"saved\":false,\"title\":\"云音乐\",\"version\":0,\"url\":\"http://121.4.78.106:4001/playlist/detail?id=19723756#noRefresh##gameTheme##background##noLoading#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"card_pic_3\",\"find_rule\":\"js:(\\n() => {\\n    eval(JSON.parse(fetch(\\\"hiker://page/ph\\\")).rule);\\n}\\n)()\",\"group\":\"②音乐\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"text_icon\\\",\\\"name\\\":\\\"歌单二级\\\",\\\"path\\\":\\\"gd\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\nvar pic = JSON.parse(html).playlist.coverImgUrl;\\\\nd.push({      \\\\n        img: pic,\\\\n        url: pic,\\\\ncol_type: 'pic_1_full'\\\\n})\\\\nvar list = JSON.parse(html).playlist.tracks;\\\\nfor (var j in list) {\\\\n    d.push({\\\\n        title: list[j].name,\\\\n        desc: list[j].ar[0].name,\\\\n        img: list[j].al.picUrl,\\\\n        url: 'http://121.4.78.106:4001/song/url?id='+list[j].id+$('').lazyRule(() => {\\\\nvar url = JSON.parse(request(input)).data[0].url\\\\ninput = input.replace('song/url','lyric')\\\\nlog(input)\\\\nvar lrc = JSON.parse(request(input)).lrc.lyric\\\\n\\\\nreturn JSON.stringify({\\\\n                    urls: [url+'#isMusic=true#'],\\\\n                    lyric: lrc\\\\n                })\\\\n}),\\\\ncol_type: 'icon_2'\\\\n    });\\\\n}\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"text_icon\\\",\\\"name\\\":\\\"排行二级\\\",\\\"path\\\":\\\"phxq\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\nvar list = JSON.parse(html).playlist.tracks;\\\\nfor (var j in list) {\\\\n    d.push({\\\\n        title: list[j].name,\\\\n        desc: list[j].ar[0].name,\\\\n        img: list[j].al.picUrl+ '@Referer=',\\\\n        url: 'http://121.4.78.106:4001/song/url?id='+list[j].id+$('').lazyRule(() => {\\\\nlog(input)\\\\nvar url = JSON.parse(request(input)).data[0].url\\\\ninput = input.replace('song/url','lyric')\\\\nvar lrc = JSON.parse(request(input)).lrc.lyric\\\\n\\\\nreturn JSON.stringify({\\\\n                    urls: [url+'#isMusic=true##noLoading#'],\\\\n                    lyric: lrc\\\\n                })\\\\n}),\\\\ncol_type: 'icon_2',\\\\n    });\\\\n}\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"h5排行\\\",\\\"path\\\":\\\"ph\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\nvar list = JSON.parse(html).playlist.tracks;\\\\n\\\\nlet 传输列表 = []\\\\nlet xd = JSON.stringify(list) == JSON.stringify(storage0.getVar('数据校对', []));\\\\nif (xd == false) {\\\\nfor (let j = 0; j < list.length; j++) {   \\\\n    let title = list[j].name;\\\\n    let first = list[0].name;\\\\n    let desc = list[j].ar[0].name;\\\\n    let img = list[j].al.picUrl;\\\\n    let url = 'http://121.4.78.106:4001/song/url?id=' + list[j].id + $('').lazyRule(() => {\\\\n        var url = JSON.parse(request(input)).data[0].url\\\\n        return url + '#isMusic=true#';\\\\n    });\\\\n    /* 快速告诉x5列表样式，很重要 */\\\\n    let col_type = 'avatar'\\\\n    putVar('样式', col_type)\\\\n    putVar('选中颜色', '#3CE68E');\\\\n    if (col_type == 'text_1')\\\\n        xy = '““””<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\\\n    else\\\\n        xy = '<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\\\n    d.push({\\\\n        title: title == getVar('索引', first) && MY_PAGE == 1 ? xy : title,\\\\n        desc: desc,\\\\n        img: img,\\\\n        col_type: col_type,\\\\n        url: $('#noHistory##noLoading#').lazyRule((title, first, xy) => {\\\\n            if (getVar('索引') != title) {\\\\n                refreshX5WebView(getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html'))\\\\n                updateItem(getVar('索引', first), {\\\\n                    title: getVar('索引', first)\\\\n                })\\\\n                updateItem(title, {\\\\n                    title: xy\\\\n                })\\\\n                putVar('索引', title)\\\\n            } else {\\\\n                return 'download://' + getVar('播放链接');\\\\n            }\\\\n            return 'hiker://empty';\\\\n        }, title, first, xy),\\\\n        extra: {\\\\n            id: title\\\\n        },\\\\n    });\\\\n\\\\n    传输列表.push({\\\\n        封面: img,\\\\n        曲名: title,\\\\n        歌手: desc,\\\\n        地址: url,\\\\n    })\\\\n}\\\\n\\\\n    传输列表 = storage0.getVar('缓存数据', []).concat(传输列表)\\\\n    storage0.putVar('缓存数据', 传输列表)\\\\n    storage0.putVar('数据校对', list)\\\\n}\\\\naddListener('onClose', $.toString(() => {\\\\n    clearVar('样式');\\\\n    clearVar('索引');\\\\n    clearVar('播放链接');\\\\n    clearVar('数据校对');\\\\n    clearVar('缓存数据');\\\\n}))\\\\n传输列表 = storage0.getVar('缓存数据')\\\\nputVar('音乐数据', JSON.stringify(传输列表))\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        col_type: 'x5_webview_single',\\\\n        desc: '300&&float',\\\\n        extra: {\\\\n            ua: MOBILE_UA,\\\\n            autoPlay: true\\\\n        },\\\\n        url: getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html')\\\\n    });\\\\n}\\\\n\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"h5歌单\\\",\\\"path\\\":\\\"hgd\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\nlet 传输列表 = []\\\\nlet list = JSON.parse(html).playlist.tracks;\\\\nlet xd = JSON.stringify(list) == JSON.stringify(storage0.getVar('数据校对', []));\\\\nif (xd == false) {\\\\n    for (let j = 0; j < list.length; j++) {\\\\n        let title = list[j].name;\\\\n        let first = list[0].name;\\\\n        let desc = list[j].ar[0].name;\\\\n        let img = list[j].al.picUrl;\\\\n        let url = 'http://121.4.78.106:4001/song/url?id=' + list[j].id + $('').lazyRule(() => {\\\\n            var url = JSON.parse(request(input)).data[0].url\\\\n            return url + '#isMusic=true#';\\\\n        });\\\\n        /* 快速告诉x5列表样式，很重要 */\\\\n        let col_type = 'avatar'\\\\n        putVar('样式', col_type)\\\\n        putVar('选中颜色', '#3CE68E');\\\\n        if (col_type == 'text_1')\\\\n            xy = '““””<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\\\n        else\\\\n            xy = '<b><font color=' + getVar('选中颜色') + '>' + title + '</font></b>';\\\\n        d.push({\\\\n            title: title == getVar('索引', first) && MY_PAGE == 1 ? xy : title,\\\\n            desc: desc,\\\\n            img: img,\\\\n            col_type: col_type,\\\\n            url: $('#noHistory##noLoading#').lazyRule((title, first, xy) => {\\\\n                if (getVar('索引') != title) {\\\\n                    refreshX5WebView(getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html'))\\\\n                    updateItem(getVar('索引', first), {\\\\n                        title: getVar('索引', first)\\\\n                    })\\\\n                    updateItem(title, {\\\\n                        title: xy\\\\n                    })\\\\n                    putVar('索引', title)\\\\n                } else {\\\\n                    return 'download://' + getVar('播放链接');\\\\n                }\\\\n                return 'hiker://empty';\\\\n            }, title, first, xy),\\\\n            extra: {\\\\n                id: title\\\\n            },\\\\n        });\\\\n\\\\n        传输列表.push({\\\\n            封面: img,\\\\n            曲名: title,\\\\n            歌手: desc,\\\\n            地址: url,\\\\n        })\\\\n    }\\\\n\\\\n    传输列表 = storage0.getVar('缓存数据', []).concat(传输列表)\\\\n    storage0.putVar('缓存数据', 传输列表)\\\\n    storage0.putVar('数据校对', list)\\\\n}\\\\naddListener('onClose', $.toString(() => {\\\\n    clearVar('样式');\\\\n    clearVar('索引');\\\\n    clearVar('播放链接');\\\\n    clearVar('数据校对');\\\\n    clearVar('缓存数据');\\\\n}))\\\\n传输列表 = storage0.getVar('缓存数据')\\\\nputVar('音乐数据', JSON.stringify(传输列表))\\\\nif (MY_PAGE == 1) {\\\\n    d.push({\\\\n        col_type: 'x5_webview_single',\\\\n        desc: '300&&float',\\\\n        extra: {\\\\n            ua: MOBILE_UA,\\\\n            autoPlay: true\\\\n        },\\\\n        url: getPath('hiker://files/rules/dzHouse/html/h5音乐播放器.html')\\\\n    });\\\\n}\\\\n\\\\n\\\\nsetResult(d)\\\"}]\"}","picUrl":"https://p1.music.126.net/pcYHpMkdC69VVvWiynNklA==/109951166952713766.jpg","title":"飙升榜"}