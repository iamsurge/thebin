local Rayfield = loadstring(game:HttpGet('https://raw.githubusercontent.com/shlexware/Rayfield/main/source'))()

local Window = Rayfield:CreateWindow({
	Name = "AndreiTools",
	LoadingTitle = "AndreiTools",
	LoadingSubtitle = "by Lunar",
	ConfigurationSaving = {
		Enabled = false,
		FolderName = nil, -- Create a custom folder for your hub/game
		FileName = "Big Hub"
	},
        Discord = {
        	Enabled = false,
        	Invite = "sirius", -- The Discord invite code, do not include discord.gg/
        	RememberJoins = true -- Set this to false to make them join the discord every time they load it up
        },
	KeySystem = false, -- Set this to true to use our key system
	KeySettings = {
		Title = "Sirius Hub",
		Subtitle = "Key System",
		Note = "Join the discord (discord.gg/sirius)",
		FileName = "SiriusKey",
		SaveKey = true,
		GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
		Key = "Hello"
	}
})

--

--//AIMBOT//--

--

local Aim = Window:CreateTab("Aimbot", 4483362458)

local Text1 = Aim:CreateLabel("Aimbot Toggles")

local AimEnable = Aim:CreateToggle({
	Name = "Enable",
	CurrentValue = false,
	Flag = "AimEnableFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local AimSilent = Aim:CreateToggle({
	Name = "Silent",
	CurrentValue = false,
	Flag = "SilentFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local Text2 = Aim:CreateLabel("Aimbot Settings")

local AimbotCirc = Aim:CreateToggle({
	Name = "Fov Circle",
	CurrentValue = false,
	Flag = "FOVCircFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local AimbotHit = Aim:CreateSlider({
	Name = "HitChance",
	Range = {0, 100},
	Increment = 10,
	Suffix = "%",
	CurrentValue = 100,
	Flag = "HitChanceFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the slider changes
    		-- The variable (Value) is a number which correlates to the value the slider is currently at
	end,
})

local AimParts = Aim:CreateDropdown({
	Name = "AimPart",
	Options = {"HumanoidRootPart","Head"},
	CurrentOption = "HumanoidRootPart",
	Flag = "AimPartFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Option)
	  	  -- The function that takes place when the selected option is changed
    	  -- The variable (Option) is a string for the value that the dropdown was changed to
	end,
})

--

--//VISUALS//--

--

local Vis = Window:CreateTab("Visuals", 4483362458)

local Text3 = Vis:CreateLabel("Visual Toggles")

local VisualEnabled = Vis:CreateToggle({
	Name = "Enabled",
	CurrentValue = false,
	Flag = "VisFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local Text4 = Vis:CreateLabel("Visual Settings")

local BoxEn = Vis:CreateToggle({
	Name = "Box",
	CurrentValue = false,
	Flag = "BoxFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local HealthEn = Vis:CreateToggle({
	Name = "Health Bar",
	CurrentValue = false,
	Flag = "HealthFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local NameEn = Vis:CreateToggle({
	Name = "Name",
	CurrentValue = false,
	Flag = "NameFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local TeamEn = Vis:CreateToggle({
	Name = "Show Team  ",
	CurrentValue = false,
	Flag = "TeamFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local TracersEn = Vis:CreateToggle({
	Name = "Tracers",
	CurrentValue = false,
	Flag = "TracersFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})

local ChamsEn = Vis:CreateToggle({
	Name = "Chams",
	CurrentValue = false,
	Flag = "ChamsFlag", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
	Callback = function(Value)
		-- The function that takes place when the toggle is pressed
    		-- The variable (Value) is a boolean on whether the toggle is true or false
	end,
})



--

--//GUN MODS//--

--

local Main = Window:CreateTab("GM", 4483362458)

local Ammo = Main:CreateButton({
	Name = "Infinite Ammo",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local infa = require(v)
         
         infa.Ammo = 9999999999999
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local Damage = Main:CreateButton({
	Name = "Insta-Kill",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local kill = require(v)
         
         kill.Damage = 999
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local Range = Main:CreateButton({
	Name = "Infinite Range",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local rangea = require(v)
         
         rangea.Range = 20000
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local NoSpread = Main:CreateButton({
	Name = "No Spread",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local spreada = require(v)
         
         spreada.Spread = 0
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local NoRecoil = Main:CreateButton({
	Name = "No Recoil",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local recoilno = require(v)
         
         recoilno.CameraRecoilingEnabled = false
         recoilno.Recoil = 0
         recoilno.Intensity = 0
         recoilno.RecoilSpeed = 0
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local ReloadTimeThing = Main:CreateButton({
	Name = "Fast Reload",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local timereload = require(v)
         
         timereload.ReloadTime = 0
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local Label = Main:CreateLabel("Gun Visuals")

local Neon = Main:CreateButton({
	Name = "Neon Gun",
	Callback = function()
		-- The function that takes place when the button is pressed
	end,
})

local RedNeon = Main:CreateButton({
	Name = "Red Neon Gun",
	Callback = function()
		-- The function that takes place when the button is pressed
	end,
})

local Transparent = Main:CreateButton({
	Name = "Transparent Gun",
	Callback = function()
		-- The function that takes place when the button is pressed
	end,
})

--

--//PRESETS//--

--

local Presets = Window:CreateTab("Presets", 4483362458) -- Title, Image

local Andrei = Presets:CreateButton({
	Name = "AndreiSchons Preset",
	Callback = function()
        if v:IsA("ModuleScript") and v.Name == "config" then
            local S = require(v)
            
            S.Ammo = 999999999
            S.Range = 2000000
            S.Recoil = 0
            S.RecoilSpeed = 0
            S.FireRate = 0.0001
            S.Damage = 99999999999999999
            
           
            for i,v in pairs(a) do print(i,v) end end
	end,
})

local CRAM = Presets:CreateButton({
	Name = "C-RAM Preset",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local C = require(v)
         
         C.Ammo = 99999999999
         C.FireRate = 0.000001
         C.Range = 99999999999
         C.Raycolor = Color3.fromRGB(255,0,0)
         C.BulletTransparency = 0
         C.RayThickness = 5
         C.Recoil = 0
         C.RecoilSpeed = 0
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

local Nec = Presets:CreateButton({
	Name = "Necessities Preset",
	Callback = function()
        for i,v in pairs(game:GetService("Players").LocalPlayer.Backpack:GetDescendants()) do
            if v:IsA("ModuleScript") and v.Name == "config" then
         local m = require(v)
         
         m.Range = 20000
         m.Ammo = 999999
         m.Recoil = 0
         m.RecoilSpeed = 0
         m.Mode = "Automatic"
        
         for i,v in pairs(a) do print(i,v) end end end
	end,
})

--

--//MISC//--

--

local Misc = Window:CreateTab("Misc", 4483362458) -- Title, Image

local Bank =
    Misc:CreateButton(
    {
        Name = "Auto Cash",
        Callback = function()
            local ss1 = game:GetService("Workspace").pontos.ponto1
            local f = game:GetService("ReplicatedStorage").SystemRemotes.Crate
            local prompt = game.Workspace.Pegar.ProximityPrompt
            prompt.MaxActivationDistance = 9999999
            prompt.RequiresLineOfSight = false

            wait(0.1)

            prompt:InputHoldBegin()
            wait()
            prompt:InputHoldEnd()
            f:FireServer(ss1)

            while wait(5.2) do
                prompt:InputHoldBegin()
                wait()
                prompt:InputHoldEnd()
                f:FireServer(ss1)
            end
        end
    }
)

local TankP = Misc:CreateButton({
	Name = "Collect Tank Parts",
	Callback = function()
		-- The function that takes place when the button is pressed
	end,
})

local IY = Misc:CreateButton({
	Name = "Infinite Yield",
	Callback = function()
        loadstring(game:HttpGet('https://raw.githubusercontent.com/EdgeIY/infiniteyield/master/source', true))()
	end,
})

local Spy = Misc:CreateButton({
	Name = "SpyChat",
	Callback = function()
        loadstring(game:HttpGet('https://pastebin.com/raw/JALQnaLJ', true))()
	end,
})

local Translator = Misc:CreateButton({
	Name = "Translator",
	Callback = function()
        loadstring(game:HttpGetAsync('https://i.qts.life/r/ChatInlineTranslator.lua', true))()
	end,
})

local HBE = Misc:CreateButton({
	Name = "HitBox Expander",
	Callback = function()
        loadstring(game:HttpGet('https://pastebin.com/raw/2p3h8Gg3'))()
	end,
})