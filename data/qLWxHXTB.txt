/* Labarotor 13 Modelare si Simulare
Retele Petri
Pascal Dragos */

#include <stdio.h>
#include <stdlib.h>
#include <math.h>
#include <float.h>

double genExp(double lambda)
{
	double u, x;
	u = (double)rand() / ((double)RAND_MAX + 1);
	x = -1 / lambda * log(1 - u);
	return x;
}

int main(void)
{
	/* Parametri VA */
	const double lambda = 27;
	const double miu[4] = { 0, 10.0, 10.0, 10.0 };

	/* Parametri sistem */
	const int S = 3;

	/* Parametri simulare */
	const int MAX_Q = 301;
	const double NS = 1000000;
	double ceas = 0, DS = NS / lambda, pas;
	double Q[MAX_Q];
	double STS = 0, Sq = 0;
	int CT = 0;

	/* Reteaua Petri */
	const int np = 8;
	const int nt = 7;

	// prima linie si prima coloana adaugate pentru a pastra notatiile
	const int I[np + 1][nt + 1] =
	{
		{0,0,0,0,0,0,0,0},
		{0,1,0,0,0,0,0,0},
		{0,0,1,1,1,0,0,0},
		{0,0,0,0,0,1,0,0},
		{0,0,0,0,0,0,1,0},
		{0,0,0,0,0,0,0,1},
		{0,0,1,0,0,0,0,0},
		{0,0,0,1,0,0,0,0},
		{0,0,0,0,1,0,0,0}
	};
	const int O[nt + 1][np + 1] =
	{
		{0,0,0,0,0,0,0,0,0},
		{0,0,1,0,0,0,0,0,0},
		{0,0,0,1,0,0,0,0,0},
		{0,0,0,0,1,0,0,0,0},
		{0,0,0,0,0,1,0,0,0},
		{0,1,0,0,0,0,1,0,0},
		{0,1,0,0,0,0,0,1,0},
		{0,1,0,0,0,0,0,0,1}
	};

	// Primul element din array-uri e adaugat pentru a pastra notatiile
	int M[np + 1] = { 0, 300, 0, 0, 0, 0, 1, 1, 1 };

	// D[i] = -1 <=> tranzitia nu este executabila
	double D[nt + 1] = { 0, genExp(lambda), -1, -1, -1, -1, -1, -1 };

	double de;
	int te;


	while (ceas < DS)
	{
		/* Determina urmatoarea tranzitie de executat te */
			// cauta te pentru care de = min{D[t]}
			// cauta doar printre tranzitiile executabile, i.e. D[t] != -1


		/* Actualizare ceas */


		/* Executa tranzitia te */

			/* {Actualizare marcaj} */
	
			/* {Actualizare D[t]} */
		
			/* {Actualizare statistici si variabile de stare} */
		
	}

	printf("lambda = %.2lf\t\t", lambda);
	for (int i = 1; i <= S; ++i)
	{
		printf("u[%d] = %.2lf\t", i, miu[i]);
	}
	printf("\n");
	printf("\tTSm = %.2lf\n", STS / CT);
	printf("\tqm  = %.2lf\n", Sq / NS);


	return 0;
}