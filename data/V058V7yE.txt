--DEF:  Direction:   0 = +x, 1 = +z, 2 = -x, 3 = -z


--DEF: END


--BASIC FUNCTIONS--

--safe mining (gravel)
function Mine()
    while turtle.detect() do
        turtle.dig()
    end
end

--safe mining (gravel)
function MineUp()
    while turtle.detectUp() do
        turtle.digUp()
    end
end

--safe mining (gravel)
function MineDown()
    while turtle.detectDown() do
        turtle.digDown()
    end
end

--locate turtle via gps
function GetLocation()
    local x, y, z = gps.locate(3, false)
return x, y, z 
end

function TurnRight()
    turtle.turnRight()
    SetDirection(GetDirection() + 1)
end

function TurnLeft()
    turtle.turnLeft()
    SetDirection(GetDirection() - 1)
end

function GetDirection()
    return GetV("Direction")
end

function SetDirection(value)
    if value > 4 then 
        SetV("Direction", value % 4)
    end

    if value < 0 then 
        SetV("Direction", (4 + (value % (-4))))
    end
end

--save variable in storage (line1 = type; line2 = content), can overwrite
function SetV(name, content)
    local file = fs.open("vars/" .. name, "w")
    file.writeLine(type(content))
    file.writeLine(content)
    file.close()
end

--read variable from storage and converts to stored type (line 1)
function GetV(name)
    path = "vars/" .. name

    if fs.exists(path, "r") then 
        local file = fs.open(path, "r")
        local type = file.readLine()
        local content = file.readLine()
        file.close()

        --convert to needed type
        if (type == "number") then
            return tonumber(content)
        elseif (type == "string") then
            return content
        elseif (type == "boolean") then
            if content == "true" then
                return true
            else
                return false
            end
        else 
            return nil
        end
    else
        return nil
    end
end

--check if variable exists
function Vexst(name)
    if fs.exists("vars/" .. name) then
        return true
    else
        return false
    end 
end

--saves new variable, cannot overwrite
function SetVifNew(name, content)
    if fs.exists("vars/" .. name) == false then
        SetV(name, content)
    end
end

--delete variable out of storage
function RemV(name)
    if fs.exists("vars/" .. name) then
        fs.delete("vars/" .. name)
    end
end

--adds 1 to variable ONLY USE NUMBERS
function Vpp(name)
    SetV(name, GetV(name) + 1)
end

--subtracts 1 from variable ONLY USE NUMBERS
function Vmm(name)
    SetV(name, GetV(name) - 1)
end

--delete all variables
function PURGEVARS()
    if fs.exists("vars/")  then
        if fs.isDir("vars/") then 
            fs.delete("vars/")
        end
    end
end

--save location to storage
function SaveLocation(name, x, y, z)
    SetV(name .. "/xValue", x)
    SetV(name .. "/yValue", y)
    SetV(name .. "/zValue", z)
end

--read location form storage
function ReadLocation(name)
    local x = GetV(name .. "/xValue")
    local y = GetV(name .. "/yValue")
    local z = GetV(name .. "/zValue")
return x, y, z
end

--END OF BASIC FUNCTIONS--





--BASIC+ FUNCTIONS--
--check if height equals 2 (bottom)
function VGarbageCollector()
    if fs.exists("vars/temp") then
        fs.delete("vars/temp")
    end
end

--check if height equals (bottom)
function ReachedBottom()
    local botttomReached = false;
    local x, y, z = GetLocation()
    if (y > 2) then
        return false
    else
        return true
    end
end

--check if height equals maxheight (top)
function ReachedTop()
    local topReached = true;
    local xCurrent, yCurrent, zCurrent = GetLocation()
    local xMax, yMax, zMax = ReadLocation("EndPosition")
    if (yCurrent < yMax) then
        return false
    else
        return true
    end
end

function IsInXBounds()
    local xC, yC, zC = GetLocation()
    local xE, yE, zE = ReadLocation("EndPosition")
    local xS, yS, zS = ReadLocation("StartPosition")
    if((xE < xC) and (xC < xS)) or ((xE > xC) and (xC > xS)) then
        return true
    else 
        return false
    end
end

function IsInYBounds()
    local xC, yC, zC = GetLocation()
    local xE, yE, zE = ReadLocation("EndPosition")
    local xS, yS, zS = ReadLocation("StartPosition")
    if((yE < yC) and (yC < yS)) or ((yE > yC) and (yC > yS)) then
        return true
    else 
        return false
    end
end

function IsInZBounds()
    local xC, yC, zC = GetLocation()
    local xE, yE, zE = ReadLocation("EndPosition")
    local xS, yS, zS = ReadLocation("StartPosition")
    if((zE < zC) and (zC < zS)) or ((zE > zC) and (zC > zS)) then
        return true
    else 
        return false
    end
end

function InInAllBounds()
    if(IsInXBounds() and IsInYBounds() and IsInZBounds()) then
        return true
    else
        return true
    end
end

function SaveCurrentLocation(name)
    local x
    local y
    local z
    x, y, z = GetLocation()
    SaveLocation(name, x, y, z)
end

function SaveCurrentlocationIfNew(name)
    if fs.exists("vars/" .. name) == false then
        SaveCurrentLocation(name)
    end
end
--END OF BASIC+ FUNCTIONS--





--SUBEXTENDED FUNCTIONS--
function MoveToBottom()
    while ReachedBottom() == false do
        MineDown()
        turtle.down()
    end
end

function MoveToTop()
    while ReachedTop() == false do
        MineUp()
        turtle.up()
    end
end
--END OF SUBEXTENDED FUNCTIONS--





--EXTENDED FUNCTIONS--

--create and set booleans for sequencing
function CreateRequiredVars()
    SetVifNew("Direction", 0)
    SetVifNew("XFactor", 1)
    SetVifNew("ZFactor", 1)
end


--move Turtle into start position
function GoToStart()
    SaveCurrentlocationIfNew("temp/calcDir1")
    while GetV("BlocksTillStartPosition") > 0 do
        Mine()
        turtle.forward()
        Vmm("BlocksTillStartPosition")
    end
    SaveCurrentLocation("StartPosition")
end

--calculates direction of turtle while it is moving into its start position
function CalculateInitialDirection(v1, v2)
    local result
    local x1, y1, z1 = ReadLocation(v1)
    local x2, y2, z2 = ReadLocation(v2)
    local xMove = x1 - x2
    local yMove = y1 - y2
    local diffMove = xMove
    
    if diffMove < 0 then
        result =  0               -- x+
    elseif diffMove > 0 then
        result = 1                -- x-
    else
        diffMove = yMove
        if diffMove < 0 then
            result = 2            -- z+
        elseif diffMove > 0 then
            result = 3            -- z-
        else
            result = nil
        end
    end
    SetV("Direction", result)
end

--sets the factors with wich x and z need to be multiplied
function SetFactors()
--DEF:  Direction:   0 = +x, 1 = +z, 2 = -x, 3 = -z
    if (GetV("Direction") == 0) then
        SetV("XFactor", 1)
        SetV("ZFactor", -1)

    elseif (GetV("Direction") == 1) then
        SetV("XFactor", 1)
        SetV("ZFactor", 1)

    elseif (GetV("Direction") == 2) then
        SetV("XFactor", -1)
        SetV("ZFactor", 1)

    elseif (GetV("Direction") == 3) then
        SetV("XFactor", -1)
        SetV("ZFactor", -1)
    end
end

--sets the endpoint of mining operations and therefore the limits on each axis
function SetEndPosition()
    local x, y, z = ReadLocation("StartPosition")
    SaveLocation("EndPosition", x + (XFactor * GetV("Width")), y, z + (ZFactor * GetV("Depth")))        -- * 1 needs to be changed!
end


--END OF EXTENDED FUNCTIONS--

--MAIN FUNCTION--
function Main()
    SetVifNew("DigDirection", GetV"Direction")

end

--END OF MAIN FUNCTION--




--ACTUAL PROGRAM--
CreateRequiredVars()
SaveCurrentlocationIfNew("StartPosition")
SetVifNew("Direction", 1)
SetVifNew("Width", 5)
SetVifNew("Depth", 5)
Main()
print(GetV("Direction"))
print(type(GetV("Direction")))
print(ReadLocation("StartPosition"))
print(type(ReadLocation("StartPosition")))

print("- - - - - - - - - - - -")
print(GetLocation())




--END OF ACTUAL PROGRAM--







