/* This is a matrix manipulation exercise, where we are tying to find a spot with recursive function */

#include <stdio.h>
#include <time.h>
#include <stdlib.h>
#include "../includes/functions.h"

int main() {

    // since the starting position is (1,1)
    int current_position_row = 1;
    int current_position_col = 1;
    int row_size = 0;
    int col_size = 0;
    my_cell** map = NULL;

    struct map_data function_returned_data;

    srand(time(NULL));

    function_returned_data = map_init();

    map = function_returned_data.map;
    row_size = function_returned_data.row_size;    // for better readability
    col_size = function_returned_data.col_size;    // for better readability

    printf("This is the matrix at the start\n");
    print_maze(map, row_size, col_size);

    int result = DFS(map, current_position_row, current_position_col, row_size, col_size);


    if (result == 1) {  // minotaur_found
        printf("The minotaur was found! Here is the maze:\n");
        print_maze(map, row_size, col_size);
    }
    else {
        printf("The minotaur was not found, here is the maze:\n");
        print_maze(map, row_size, col_size);
    }

    map_free(map, row_size, col_size);   // to free the memory used by our map array

    return 0;
}