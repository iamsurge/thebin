//Да се намери най-дългата поредица от еднакви елементи в целочислен масив. Поредицата трябва да е непрекъсната. Като изход да се //изпише дължината на поредицата и цифрата, която се съдържа в тази поредица. Ако са повече от една се изписва последната.

import java.util.HashMap;
import java.util.Map;

public class Main {

    public static void main(String[] args) {
        int[] arr1 = new int[]{1, 1, 1, 2, 2, 3, 3, 3, 3, 5, 5};
        int[] arr2 = new int[]{1, 1, 2, 2, 2, 2, 3, 3, 3, 3, 5, 5, 5};
        int[] oneElementArr = new int[]{5};
        int[] twoElementsArr = new int[]{8, 7};
        int[] emptyArr = new int[]{};

        try {
            EqualsElementInArray(arr1).forEach((key, value) -> System.out.println("Count: " + key + ", Value: " + value));
            EqualsElementInArray(arr2).forEach((key, value) -> System.out.println("Count: " + key + ", Value: " + value));
            EqualsElementInArray(oneElementArr).forEach((key, value) -> System.out.println("Count: " + key + ", Value: " + value));
            EqualsElementInArray(twoElementsArr).forEach((key, value) -> System.out.println("Count: " + key + ", Value: " + value));
            EqualsElementInArray(emptyArr).forEach((key, value) -> System.out.println("Count: " + key + ", Value: " + value));
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }
    }

    public static Map<Integer, Integer> EqualsElementInArray(int[] arr) {

        if (arr.length == 0) {
            throw new IllegalArgumentException("Empty Array");
        }

        int count = 1;
        int equalElement = arr[0];
        int maxSequence = 1;
        Map<Integer, Integer> equalsElementCount = new HashMap<>();
        equalsElementCount.put(maxSequence, equalElement);

        for (int i = 1; i < arr.length; i++) {

            if (arr[i] == equalElement) {
                count++;
                if (count >= maxSequence) {
                    maxSequence = count;
                    equalsElementCount.clear();
                    equalsElementCount.put(maxSequence, equalElement);
                }
            } else {
                count = 1;
                equalElement = arr[i];
                if (maxSequence == 1) {
                    equalsElementCount.clear();
                    equalsElementCount.put(maxSequence, equalElement);
                }
            }
        }
        return equalsElementCount;
    }
}