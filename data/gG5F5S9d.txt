class Heap:
    def __init__(self, length, array):
        self.length = length
        self.array = array

    def heapify(self, ind):
        maxn = ind
        l = ind * 2 + 1
        r = ind * 2 + 2
        if ind < self.length and l < self.length and self.array[l] > self.array[maxn]:
            maxn = l
        if ind < self.length and r < self.length and self.array[r] > self.array[maxn]:
            maxn = r
        if maxn is not ind:
            self.array[ind], self.array[maxn] = self.array[maxn], self.array[ind]
            self.heapify(maxn)

    def process(self):
        for i in range(self.length//2-1, -1, -1):
            self.heapify(i)

    def delete(self, digit):
        self.array[digit], self.array[self.length-1] = self.array[self.length-1], self.array[digit]
        self.length -= 1
        self.process()


tree = list(map(int, input().split()))
heap = Heap(len(tree), tree)
to_delete = list(map(int, input().split()))
for el in to_delete:
    heap.delete(el)
    print("[", end="")
    for i in range(heap.length-1):
        print(heap.array[i], end=", ")
    print(heap.array[heap.length-1], "]", sep='')