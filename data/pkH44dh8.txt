//
// Created by catas on 13-Dec-22.
//

#ifndef SDATEMA3_BST_ARBORE_H
#define SDATEMA3_BST_ARBORE_H

using namespace std;

template <class T>
class ArboreBST {
private:
    ArboreBST<T> *root;
    ArboreBST<T> *st;
    ArboreBST<T> *dr;
    T data;
public:
    ArboreBST() {
        st = NULL;
        dr = NULL;
        root = NULL;
    }

    explicit ArboreBST(T _data) {
        st = NULL;
        dr = NULL;
        data = _data;
    }
    void adauga(T const & val) {
        if (val == data)
            return;
        if (val < data) {
            if (st == NULL) {
                st = new ArboreBST<T>(val);
                return;
            }
            st->adauga(val);
            return;
        }
        if (dr == NULL) {
            dr = new ArboreBST<T>(val);
            return;
        }
        dr->adauga(val);
        return;
    }

    void afisarePreordine() {
        cout << data << " ";
        if (dr != NULL)
            dr->afisarePreordine();
        if (st != NULL)
            st->afisarePreordine();
        return;
    }

    int calculeazaAdancime() {
        if (dr == NULL && st == NULL)
            return 0;
        if (dr == NULL)
            return 1 + st->calculeazaAdancime();
        if (st == NULL)
            return 1 + dr->calculeazaAdancime();
        return 1 + max(st->calculeazaAdancime(), dr->calculeazaAdancime());
    }

    bool esteEchilibrat() {
        int stH, drH;
        if (st != NULL && dr != NULL) {
            stH = st->calculeazaAdancime() + 1;
            drH = dr->calculeazaAdancime() + 1;
            if (abs(stH - drH) <= 1 && st->esteEchilibrat() && dr->esteEchilibrat())
                return true;
            return false;
//            stH = st->calculeazaAdancime() + 1;
//            drH = dr->calculeazaAdancime() + 1;
//            if (abs (stH - drH) <= 1)
//                return true;
//            if (st->esteEchilibrat() == false || dr->esteEchilibrat() == false)
//                return false;
//            return true;
        }
        if (st == NULL) {
            stH = 1;
            drH = dr->calculeazaAdancime() + 1;
            if (abs(stH - drH) <= 1 && dr->esteEchilibrat())
                return true;
            return false;
        }
        if (dr == NULL) {
            stH = st->calculeazaAdancime() + 1;
            drH = 1;
            if (abs(stH - drH) <= 1 && st->esteEchilibrat())
                return true;
            return false;
        }
        return false;
    }
};
#endif //SDATEMA3_BST_ARBORE_H
