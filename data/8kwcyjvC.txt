#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;
const int INF = 0x3f3f3f3f;
struct Node {
    int pos;
    int dis;
    Node() {}
    Node(int p, int d) {
        pos = p;
        dis = d;
    }
};

bool operator<(const Node &a, const Node &b) {
    return a.dis < b.dis;
}

int n, m, s, u, v, w;
int dis[maxn];
vector<Node> G[maxn];
priority_queue<Node> que;

void dij(int s) {
    memset(dis + 1, -1, sizeof(int) * n);
    dis[s] = INF;
    que.push(Node(s, INF));
    while(!que.empty()) {
        Node tmp = que.top();
        que.pop();
        int len = G[tmp.pos].size();
        for(int i = 0; i < len; ++i) {
            int pos = G[tmp.pos][i].pos;
            int d = G[tmp.pos][i].dis;
            if(dis[pos] < min(tmp.dis, d)) {
                dis[pos] = min(tmp.dis, d);
                que.push(Node(pos, dis[pos]));
            }
        }
    }
    dis[s] = -1;
}

int main() {
#ifdef ExRoc
    freopen("test.txt", "r", stdin);
#endif // Dmaxiya
    ios::sync_with_stdio(false);

    while (scanf("%d%d%d", &n, &m, &s) != EOF) {
        for (int i = 1; i <= n; ++i) {
            G[i].clear();
        }
        for (int i = 0; i < m; ++i) {
            scanf("%d%d%d", &u, &v, &w);
            G[u].push_back(Node(v, w));
        }
        dij(s);
        for (int i = 1; i <= n; ++i) {
            if (i != 1) {
                printf(" ");
            }
            printf("%d", dis[i]);
        }
        printf("\n");
    }

    return 0;
}
