// Sort.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
// Microsoft Visual Studio Community 2022 Version 17.4.1
//
#include <iostream>
#include <string>
#include <vector>
using namespace std;
//
// container class holds integers and methods for intergers
// this is the "document"
class cContainer {
private:
    // iIntegers is a dynamic array containing integer values
    // that's why this class is name cContainer
    vector <int> iIntegers;  
protected:
public:
    cContainer() {}
    ~cContainer() {}
    void Add() {  // not working BUGS
        cout << "Add - insert an integer in sorted order.  What integer do you want to include? : ";
        int iIntegerToAdd;
        cin >> iIntegerToAdd;
        if (cin.fail()) {
            cout << "Invalid input detected, datim ignored.\n";
            cin.clear();
            cin.ignore();
            return;
        }
        else {
            int iNumOfIndicies = iIntegers.size();
            if (iNumOfIndicies == 0) {// nothing inside of iIntegers. so just add
                iIntegers.push_back(iIntegerToAdd);
                return; // no need to do anything else
                /*
                // special case, if iIntegerToAdd is zero, just add to begining *** not working ***
                if (iIntegerToAdd == 0) {
                    iIntegers.insert(iIntegers.begin(), iIntegerToAdd, 1);
                    return; // no need to do anything else
                }
                */
            }
            else
            {
                // determine where to add
                for (int iIndex = 0; iIndex < iNumOfIndicies; iIndex++) {                    
                    if (iIntegers[iIndex] == iIntegerToAdd) {
                        // insert at iIndex
                        iIntegers.insert(iIntegers.begin()+iIndex, iIntegerToAdd, 1);
                        return; // no need to do anything else
                    }
                    else {
                        // is iIndex location where to insert iIntegerToAdd?
                        if (iIndex == 0) {
                            //can't compare to before first position because there isn't any
                            if (iIntegers[iIndex] > iIntegerToAdd) {
                                //then add to begining of iIntegers
                                iIntegers.insert(iIntegers.begin(), iIntegerToAdd, 1);
                                return; // no need to do anything else
                            }
                        }
                        else {
                            // not first position
                            // if iIntegerToAdd is less then values, then add here
                            if (  iIntegerToAdd < iIntegers[iIndex]) {
                                iIntegers.insert(iIntegers.begin()+iIndex, iIntegerToAdd, 1);
                                return; // no need to do anything else
                            }
                        }
                    }
                }
            }
        }
        // if method gets to this point, location not found so add to end
        iIntegers.push_back(iIntegerToAdd);
    }
    void Display() {
        int iMaxElements = iIntegers.size();
        if (iMaxElements == 0) {
            cout << "\n***No Data***\n";
        }
        else {
            for (int iIndex = 0; iIndex < iMaxElements; iIndex++) {
                cout << "Element " << iIndex << "    contains : " << iIntegers[iIndex] << "\n";
            }
        }
        cout << "\n";
    }
    void Sort() { // Bubble sort the integers - ************** need to sort by insertion instead **************
        int iMaxElements = iIntegers.size();
        int iOneLess = iMaxElements - 1;
        for (int iOuter = 0; iOuter < iMaxElements; iOuter++) {
            for (int iInner = 0; iInner < iOneLess; iInner++) {
                if (iIntegers[iInner] > iIntegers[iInner + 1]) {
                    // swap the element with next element
                    int iTemp = iIntegers[iInner];
                    iIntegers[iInner] = iIntegers[iInner + 1];
                    iIntegers[iInner + 1] = iTemp;
                }
            }
        }
    }
    void BinarySearch() {  //  ************* not working ***************
        //
        // might not be necessary but would add to complexity to have
        // flag variable to indicate sorted or non-sorted.
       // cout << "Sorting the integers\n"; // not necessary with insert sort
       // Sort(); // not necessary with insert sort
        int iSearch;
        cout << "What interger value to search for? : ";
        cin >> iSearch;
        if (cin.fail()) {
            cout << "Invalid integer entry, returing to user menu.\n";
            cin.clear();
            cin.ignore();
            return;
        }
        int iIndex = (int)iIntegers.size()/2;
        while (iIndex > -1) {
            if (iIntegers[iIndex] == iSearch) {
                cout << "Value found in position : " << iIndex << "\n";
                return;
            }
            if (iIntegers[iIndex] > iSearch) {
                iIndex = iIndex - iIndex / 2.0;
            }
            else iIndex = iIndex + (iIndex / 2.0);
            if ((iIndex < 0) || (iIndex > iIntegers.size())) {
                cout << "Value not found.\n";
                return;
            }
        }
        cout << "Value not found.\n";
    }
};
//
 // Main user interface
class cMenu {
private:
    cContainer myContainer;
protected:
public:
    cMenu() { Go(); }
    ~cMenu() {}
    void Go() {        
        string sCommand = "";
        while (sCommand != "Quit") {                        
            cout << "Help for help.  Your command? : ";
            cin >> sCommand;
            if (sCommand == "Add") Add();
            if (sCommand == "Display") Display();
            if (sCommand == "Help") Help();
            if (sCommand == "Quit") return;
            if (sCommand == "Sort") Sort(); // not necessary with insert sort
            if (sCommand == "Search") Search();
            sCommand = "";
            cin.clear();
            cin.ignore();
        }   
    }
    void Add() { myContainer.Add(); }
    void Display() { myContainer.Display(); }
    void Help() {
        cout << "\n";
        cout << "Add - Insert integer in assended sort ordcr.\n";
        cout << "Display - display the integers.\n";
        cout << "Help - this list.\n";
        cout << "Quit - exit application";
        cout << "Search - sort and perform binary search.\n";
        cout << "\n";
    }
    void Search() { myContainer.BinarySearch(); }
    void Sort() { myContainer.Sort(); }
};
class cApplication {
private:
protected:
public:
    cApplication() {  Go();  };
    ~cApplication() {}
    void Go() {cMenu myMenu; };
};
int main()
{
    cout << "For Mimi Da Blessed-wan\n";
    cout << "Write a c++ program that accepts integer numbers from the user in any order, \n";
    cout << "sorts the list of the numbers by insertion sort algorithm using a user defined \n";
    cout << "function insert sort(), displays the sorted integers using a user defined function \n";
    cout << "display(), accepts a search key from userand search the sorted list using binary \n";
    cout << "search algorithm using user defined function Binary search() and displays the \n";
    cout << "search message(Display the match index if found otherwise display no match)!\n\n";
    //
    cApplication myApplication;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
