# problem 4 jgvjgv
class Wavelet_Tree:
    def __init__(self , A):
        self.A = A
        self.l = None
        self.r = None
        self.count = list()
        self.encoded = ''
        self.level = 0
        
        
    def build_tree(self):
        
        if len(self.A)==1:
            return None
        self.count = [0 for i in range(len(self.A)+1)]
        min_num = min(self.A)
        max_num = max(self.A)
        
        p = min_num
        p += (max_num-min_num)//2
        
        
        more = list()
        for i in range(len(self.A)):
            if self.A[i] > p:
                more.append(self.A[i])
                self.count[i+1] = self.count[i]
        less = []
        for i in range(len(self.A)):
            if self.A[i]<=p:
                less.append(self.A[i])
                self.count[i+1] = self.count[i]+1
        for i in range(len(self.A)):
            if self.A[i] > p:
                self.count[i+1] = self.count[i]
            else:
                self.count[i+1] = self.count[i]+1
                
            
                
        for i in self.A:
            if i <= p:
                self.encoded+='0'
            else:
                self.encoded+='1'
        
                
        left_tree = Wavelet_Tree(less)
        left_tree.level = self.level+1
        left_tree.build_tree()
        
        right_tree = Wavelet_Tree(more)
        right_tree.level = self.level+1
        right_tree.build_tree()
        
        
        self.l = left_tree
        self.r = right_tree
        
    def print(self):
        q = list()
        current_node = self
        q.append(current_node)
        temp = 0
        while q:
            print("Level "+str(temp)+":", end = " ")
            size = len(q)
            while size:
                size-=1
                front = q[0]
                q = q[1:]
                encoded_str = front.encoded
                if len(encoded_str)==0:
                    print("X", end = " ")
                else:
                    print(encoded_str, end = " ")
                if front.l:
                    q.append(front.l)
                if front.r:
                    q.append(front.r)

                
            print()
            temp = temp + 1
            
    def RQQ(self, k:int , left:int , right:int):

        print("Level "+ str(self.level)+":",k, left, right)
        count_list = self.count
        if left == right:
            return self.A[0]
        p = count_list[right]
        q = count_list[left-1]
        
        diff = p-q
        
        if k > diff:
            level_down = self.r
            result = level_down.RQQ(k-diff, left-q, right-p)
            return result
        else:
            level_down = self.l
            result = level_down.RQQ(k, q+1, p)
            return result
    
        
        
            

wv_tree = Wavelet_Tree([6, 2, 0, 7, 9, 3, 1, 8, 5, 4])
wv_tree.build_tree()
wv_tree.print()

wv_tree.RQQ(5, 3, 9)
    

        
