import Foundation

// MARK: - SearchDataModel
struct SearchDataModel: Codable {
    let resultCount: Int?
    let results: [ResponseResult]
}

// MARK: - Result
struct ResponseResult: Codable {
    let wrapperType: ItunesObjectOptions.WrapperType
    let kind: ItunesObjectOptions.Kind
    let artistID, collectionID, trackID: Int?
    let trackName: String
    let artistName: String
    let collectionName, collectionCensoredName: String
    let trackCensoredName: String?
    let artistViewURL, collectionViewURL, trackViewURL: String?
    let previewURL: String?
    let artworkUrl30, artworkUrl60, artworkUrl100: String?
    let collectionPrice, trackPrice: Double?
    let releaseDate: Date?
    let collectionExplicitness, trackExplicitness: ItunesObjectOptions.Explicitness
    let discCount, discNumber, trackCount, trackNumber: Int?
    let trackTimeMillis: Int?
    let country: ItunesObjectOptions.Country?
    let currency: ItunesObjectOptions.Currency?
    let primaryGenreName: String?
    let isStreamable: Bool?
    let collectionArtistID: Int?
    let collectionArtistName, contentAdvisoryRating: String?
    
    enum CodingKeys: String, CodingKey {
        case wrapperType
        case kind
        case artistID
        case collectionID
        case trackID
        case trackName
        case artistName
        case collectionName
        case collectionCensoredName
        case trackCensoredName
        case artistViewURL = "artistViewURL"
        case collectionViewURL
        case trackViewURL = "trackViewURL"
        case previewURL
        case artworkUrl30
        case artworkUrl60
        case artworkUrl100
        case collectionPrice
        case trackPrice
        case releaseDate
        case collectionExplicitness
        case trackExplicitness
        case discCount
        case discNumber
        case trackCount
        case trackNumber
        case trackTimeMillis
        case country
        case currency
        case primaryGenreName
        case isStreamable
        case collectionArtistID
        case collectionArtistName
        case contentAdvisoryRating
    }
}

struct ItunesObjectOptions {
    enum Explicitness: String, Codable {
        case explicit
        case notExplicit
        case cleaned
    }
    
    
    enum Country: String, Codable {
        case rus = "RUS"
        case usa = "USA"
    }
    
    enum Currency: String, Codable {
        case rub = "RUB"
        case usd = "USD"
    }
    
    enum Kind: String, Codable {
        case song
        case book
        case album
        case coachedAudio = "coached-audio"
        case featureMovie = "feature-movie"
        case interactiveBooklet = "interactive-booklet"
        case musicVideo = "music-video"
        case pdfPodcast = "pdf podcast"
        case podcastEpisode = "podcast-episode"
        case softwarePackage = "software-package"
        case tvEpisode = "tv-episode"
        case artist
    }
    
    enum WrapperType: String, Codable {
        case track
    }
}