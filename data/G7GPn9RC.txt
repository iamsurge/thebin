海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥2022年12月推荐@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcInBpY1wiLFwicGF0aFwiOlwicGljXCIsXCJydWxlXCI6XCJqczpcXG52YXIgZCA9IFtdO1xcbmxldCB4ID0gZ2V0SXRlbShcXFwieFxcXCIsIFxcXCLlkKZcXFwiKTtcXG5sZXQgZGVzYyA9IHggPT0gXFxcIuaYr1xcXCIgPyBcXFwiZmxvYXQmJjMwMFxcXCIgOiBcXFwiZmxvYXQmJjFcXFwiO1xcbmQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwieDVfd2Vidmlld19zaW5nbGVcXFwiLFxcbiAgICB1cmw6IFxcXCJcXFwiLFxcbiAgICBkZXNjOiBkZXNjLFxcbiAgICB0aXRsZTogXFxcIlxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBqczogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0aW1ncygpIHtcXG4gICAgICAgICAgICAgICAgdmFyIHZpZGVvRWxlbWVudHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcXFwiaW1nXFxcIik7XFxuICAgICAgICAgICAgICAgIGlmICh2aWRlb0VsZW1lbnRzID09IG51bGwpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBbXTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBsZXQgdXJscyA9IFtdO1xcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZpZGVvRWxlbWVudHMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh2aWRlb0VsZW1lbnRzW2ldLndpZHRoID4gNzAgJiYgdmlkZW9FbGVtZW50c1tpXS5oZWlnaHQgPiA3MCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNyYyA9IHZpZGVvRWxlbWVudHNbaV0uc3JjO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChzcmMgPT0gbnVsbCB8fCBzcmMubGVuZ3RoIDwgNSB8fCB1cmxzLmluY2x1ZGVzKHNyYykgfHwgc3JjLmluZGV4T2YoXFxcImRhdGE6XFxcIikgPT0gMCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9sb2coc3JjKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxzLnB1c2gobmV3IFVSTChzcmMpLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJldHVybiB1cmxzO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVjaygpIHtcXG4gICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCB1cmxzID0gZ2V0aW1ncygpO1xcbiAgICAgICAgICAgICAgICAgICAgLy9mYmEubG9nKFxcXCJnZXRpbWdz77yaXFxcIiArIHVybHMubGVuZ3RoKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICh3aW5kb3cuY2hlY2tlZFVybHMgPT0gbnVsbCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jaGVja2VkVXJscyA9IFtdO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNoZWNrZWRVcmxzID0gd2luZG93LmNoZWNrZWRVcmxzO1xcbiAgICAgICAgICAgICAgICAgICAgdXJscyA9IHVybHMuZmlsdGVyKGl0ID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gIWNoZWNrZWRVcmxzLmluY2x1ZGVzKGl0KVxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICBpZiAodXJscy5sZW5ndGggPiAwKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBpY3MgPSB1cmxzLmZpbHRlcihpdCA9PiBpdCAhPSBudWxsICYmIGl0ICE9IFxcXCJcXFwiKVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKGl0ID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1ID0gZmJhLmdldEhlYWRlclVybChpdCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXUgPSB1LnNwbGl0KFxcXCI7XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgcGljID0gdTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dS5sZW5ndGggPiAxKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUxID0gdXVbMF07XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHUyID0gdXVbMV0uc2xpY2UoMSwgLTEpLnNwbGl0KFxcXCImJlxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCByZWZlcmVyID0gbnVsbDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdWEgPSBudWxsO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb29raWUwID0gbnVsbDtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBmb3IgKGxldCBpaSBvZiB1Mikge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgaXQyID0gaWkuc3BsaXQoXFxcIkBcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0MlswXSA9PSBcXFwiUmVmZXJlclxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZXIgPSBpdDJbMV0ucmVwbGFjZSgv77yb77ybL2csIFxcXCI7XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0MlswXSA9PSBcXFwiVXNlci1BZ2VudFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHVhID0gaXQyWzFdLnJlcGxhY2UoL++8m++8my9nLCBcXFwiO1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChpdDJbMF0gPT0gXFxcIkNvb2tpZVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvb2tpZTAgPSBpdDJbMV0ucmVwbGFjZSgv77yb77ybL2csIFxcXCI7XFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljID0gdTE7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZmVyZXIpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljID0gcGljICsgXFxcIkBSZWZlcmVyPVxcXCIgKyByZWZlcmVyO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAodWEpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljID0gcGljICsgXFxcIkBVc2VyLUFnZW50PVxcXCIgKyB1YTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNvb2tpZTApIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljID0gcGljICsgXFxcIkBDb29raWU9XFxcIiArIGNvb2tpZTBcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYyA9IGl0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWM6IHBpYyxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZmJhLmxvZyhwaWNzLmxlbmd0aCArIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBmYmEucGFyc2VMYXp5UnVsZUFzeW5jKCQkJCgpLmxhenlSdWxlKCh1cmxzKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9nKHVybHMpO1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgYXJyID0gdXJscy5tYXAoaXQgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpdC5waWMsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljX3VybDogaXQucGljLFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwiY2FyZF9waWNfM1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY2xzOiBcXFwicGljc1xcXCJcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRJdGVtQmVmb3JlKFxcXCJwaWNfbGluZVxcXCIsIGFycik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGljcyksIGZ1bmN0aW9uKCkge1xcblxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGl0IG9mIHVybHMpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgd2luZG93LmNoZWNrZWRVcmxzLnB1c2goaXQpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICAgICAgZmJhLmxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoY2hlY2ssIDMwMCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNoZWNrKCk7XFxuICAgICAgICB9KVxcbiAgICB9XFxufSk7XFxuXFxuXFxuZC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLmj5Dlj5ZcXFwiLFxcbiAgICB1cmw6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgcHV0TXlWYXIoXFxcImlcXFwiLCBpbnB1dCk7XFxuICAgICAgICBkZWxldGVJdGVtQnlDbHMoXFxcInBpY3NcXFwiKTtcXG4gICAgICAgIHJlZnJlc2hYNVdlYlZpZXcoaW5wdXQpO1xcbiAgICB9KSxcXG4gICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgIGRlc2M6IFxcXCLor7fovpPlhaXnvZHpobXlnLDlnYBcXFwiLFxcbiAgICBwaWNfdXJsOiBcXFwiXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcImlcXFwiLCBcXFwiXFxcIilcXG4gICAgfVxcbn0pO1xcbmQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5pi+56S6572R6aG157uE5Lu277yaXFxcIiArIHgsXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICBsZXQgeCA9IGdldEl0ZW0oXFxcInhcXFwiLCBcXFwi5ZCmXFxcIik7XFxuICAgICAgICBsZXQgbmV4dCA9IHggPT0gXFxcIuWQplxcXCIgPyBcXFwi5pivXFxcIiA6IFxcXCLlkKZcXFwiO1xcbiAgICAgICAgc2V0SXRlbShcXFwieFxcXCIsIG5leHQpO1xcbiAgICAgICAgbGV0IGRlc2MgPSB4ID09IFxcXCLlkKZcXFwiID8gXFxcImZsb2F0JiYzMDBcXFwiIDogXFxcImZsb2F0JiYxXFxcIjtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oXFxcInBpY190aXBcXFwiLCB7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLmmL7npLrnvZHpobXnu4Tku7bvvJpcXFwiICsgbmV4dFxcbiAgICAgICAgfSk7XFxuICAgICAgICByZWZyZXNoWDVEZXNjKGRlc2MpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICB9KSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICBkZXNjOiBcXFwiXFxcIixcXG4gICAgcGljX3VybDogXFxcIlxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBpZDogXFxcInBpY190aXBcXFwiXFxuICAgIH1cXG59KTtcXG5cXG5kLnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgaWQ6IFxcXCJwaWNfbGluZVxcXCJcXG4gICAgfVxcbn0pO1xcblxcbnNldFJlc3VsdChkKTtcIn1dLFwic2F2ZWRcIjpmYWxzZSxcInRpdGxlXCI6XCLlpYflppnlt6XlhbfnrrFcIixcInZlcnNpb25cIjowLFwidXJsXCI6XCJoaWtlcjovL2VtcHR5XCIsXCJjb2xfdHlwZVwiOlwieDVfd2Vidmlld19zaW5nbGVcIixcImZpbmRfcnVsZVwiOlwianM6c2V0UmVzdWx0KFt7XFxuICAgIHVybDpcXFwiaHR0cHM6Ly9oYWlrdW9zaGlqaWUuY24vYXJjaGl2ZXMvMjAyMm5pYW4tMTJ5dWUtdHVpLWppYW5cXFwiLFxcbmRlc2M6XFxcIjEwMCUmJmZsb2F0XFxcIixcXG5leHRyYTp7Y2FuQmFjazogdHJ1ZX1cXG59XSk7XCIsXCJncm91cFwiOlwi4pGg5o6o6I2QXCIsXCJwYWdlc1wiOlwiW3tcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcInBpY1xcXCIsXFxcInBhdGhcXFwiOlxcXCJwaWNcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG52YXIgZCA9IFtdO1xcXFxubGV0IHggPSBnZXRJdGVtKFxcXFxcXFwieFxcXFxcXFwiLCBcXFxcXFxcIuWQplxcXFxcXFwiKTtcXFxcbmxldCBkZXNjID0geCA9PSBcXFxcXFxcIuaYr1xcXFxcXFwiID8gXFxcXFxcXCJmbG9hdCYmMzAwXFxcXFxcXCIgOiBcXFxcXFxcImZsb2F0JiYxXFxcXFxcXCI7XFxcXG5kLnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcIng1X3dlYnZpZXdfc2luZ2xlXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgIGRlc2M6IGRlc2MsXFxcXG4gICAgdGl0bGU6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAganM6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgZnVuY3Rpb24gZ2V0aW1ncygpIHtcXFxcbiAgICAgICAgICAgICAgICB2YXIgdmlkZW9FbGVtZW50cyA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKFxcXFxcXFwiaW1nXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGlmICh2aWRlb0VsZW1lbnRzID09IG51bGwpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFtdO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBsZXQgdXJscyA9IFtdO1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdmlkZW9FbGVtZW50cy5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAodmlkZW9FbGVtZW50c1tpXS53aWR0aCA+IDcwICYmIHZpZGVvRWxlbWVudHNbaV0uaGVpZ2h0ID4gNzApIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHNyYyA9IHZpZGVvRWxlbWVudHNbaV0uc3JjO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHNyYyA9PSBudWxsIHx8IHNyYy5sZW5ndGggPCA1IHx8IHVybHMuaW5jbHVkZXMoc3JjKSB8fCBzcmMuaW5kZXhPZihcXFxcXFxcImRhdGE6XFxcXFxcXCIpID09IDApIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9nKHNyYyk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cmxzLnB1c2gobmV3IFVSTChzcmMpLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHJldHVybiB1cmxzO1xcXFxuICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICBmdW5jdGlvbiBjaGVjaygpIHtcXFxcbiAgICAgICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdXJscyA9IGdldGltZ3MoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgLy9mYmEubG9nKFxcXFxcXFwiZ2V0aW1nc++8mlxcXFxcXFwiICsgdXJscy5sZW5ndGgpO1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAod2luZG93LmNoZWNrZWRVcmxzID09IG51bGwpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHdpbmRvdy5jaGVja2VkVXJscyA9IFtdO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBjaGVja2VkVXJscyA9IHdpbmRvdy5jaGVja2VkVXJscztcXFxcbiAgICAgICAgICAgICAgICAgICAgdXJscyA9IHVybHMuZmlsdGVyKGl0ID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAhY2hlY2tlZFVybHMuaW5jbHVkZXMoaXQpXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICh1cmxzLmxlbmd0aCA+IDApIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBwaWNzID0gdXJscy5maWx0ZXIoaXQgPT4gaXQgIT0gbnVsbCAmJiBpdCAhPSBcXFxcXFxcIlxcXFxcXFwiKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoaXQgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdSA9IGZiYS5nZXRIZWFkZXJVcmwoaXQpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdXUgPSB1LnNwbGl0KFxcXFxcXFwiO1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBpYyA9IHU7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1dS5sZW5ndGggPiAxKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsZXQgdTEgPSB1dVswXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCB1MiA9IHV1WzFdLnNsaWNlKDEsIC0xKS5zcGxpdChcXFxcXFxcIiYmXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHJlZmVyZXIgPSBudWxsO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHVhID0gbnVsbDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBjb29raWUwID0gbnVsbDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGlpIG9mIHUyKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGl0MiA9IGlpLnNwbGl0KFxcXFxcXFwiQFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXQyWzBdID09IFxcXFxcXFwiUmVmZXJlclxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZmVyZXIgPSBpdDJbMV0ucmVwbGFjZSgv77yb77ybL2csIFxcXFxcXFwiO1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGl0MlswXSA9PSBcXFxcXFxcIlVzZXItQWdlbnRcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1YSA9IGl0MlsxXS5yZXBsYWNlKC/vvJvvvJsvZywgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoaXQyWzBdID09IFxcXFxcXFwiQ29va2llXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29va2llMCA9IGl0MlsxXS5yZXBsYWNlKC/vvJvvvJsvZywgXFxcXFxcXCI7XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYyA9IHUxO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlZmVyZXIpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWMgPSBwaWMgKyBcXFxcXFxcIkBSZWZlcmVyPVxcXFxcXFwiICsgcmVmZXJlcjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICh1YSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBpYyA9IHBpYyArIFxcXFxcXFwiQFVzZXItQWdlbnQ9XFxcXFxcXCIgKyB1YTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChjb29raWUwKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljID0gcGljICsgXFxcXFxcXCJAQ29va2llPVxcXFxcXFwiICsgY29va2llMFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWMgPSBpdDtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGljOiBwaWMsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB1cmw6IHVcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmJhLmxvZyhwaWNzLmxlbmd0aCArIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmJhLnBhcnNlTGF6eVJ1bGVBc3luYygkJCQoKS5sYXp5UnVsZSgodXJscykgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vbG9nKHVybHMpO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGFyciA9IHVybHMubWFwKGl0ID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgdXJsOiBpdC5waWMsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwaWNfdXJsOiBpdC5waWMsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJjYXJkX3BpY18zXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsczogXFxcXFxcXCJwaWNzXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFkZEl0ZW1CZWZvcmUoXFxcXFxcXCJwaWNfbGluZVxcXFxcXFwiLCBhcnIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSwgcGljcyksIGZ1bmN0aW9uKCkge1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAobGV0IGl0IG9mIHVybHMpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3aW5kb3cuY2hlY2tlZFVybHMucHVzaChpdCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZmJhLmxvZyhlLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNoZWNrLCAzMDApO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgY2hlY2soKTtcXFxcbiAgICAgICAgfSlcXFxcbiAgICB9XFxcXG59KTtcXFxcblxcXFxuXFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaPkOWPllxcXFxcXFwiLFxcXFxuICAgIHVybDogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgIHB1dE15VmFyKFxcXFxcXFwiaVxcXFxcXFwiLCBpbnB1dCk7XFxcXG4gICAgICAgIGRlbGV0ZUl0ZW1CeUNscyhcXFxcXFxcInBpY3NcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hYNVdlYlZpZXcoaW5wdXQpO1xcXFxuICAgIH0pLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImlucHV0XFxcXFxcXCIsXFxcXG4gICAgZGVzYzogXFxcXFxcXCLor7fovpPlhaXnvZHpobXlnLDlnYBcXFxcXFxcIixcXFxcbiAgICBwaWNfdXJsOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcXFxcXCJpXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpXFxcXG4gICAgfVxcXFxufSk7XFxcXG5kLnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaYvuekuue9kemhtee7hOS7tu+8mlxcXFxcXFwiICsgeCxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxcXG4gICAgICAgIGxldCB4ID0gZ2V0SXRlbShcXFxcXFxcInhcXFxcXFxcIiwgXFxcXFxcXCLlkKZcXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBuZXh0ID0geCA9PSBcXFxcXFxcIuWQplxcXFxcXFwiID8gXFxcXFxcXCLmmK9cXFxcXFxcIiA6IFxcXFxcXFwi5ZCmXFxcXFxcXCI7XFxcXG4gICAgICAgIHNldEl0ZW0oXFxcXFxcXCJ4XFxcXFxcXCIsIG5leHQpO1xcXFxuICAgICAgICBsZXQgZGVzYyA9IHggPT0gXFxcXFxcXCLlkKZcXFxcXFxcIiA/IFxcXFxcXFwiZmxvYXQmJjMwMFxcXFxcXFwiIDogXFxcXFxcXCJmbG9hdCYmMVxcXFxcXFwiO1xcXFxuICAgICAgICB1cGRhdGVJdGVtKFxcXFxcXFwicGljX3RpcFxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmmL7npLrnvZHpobXnu4Tku7bvvJpcXFxcXFxcIiArIG5leHRcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJlZnJlc2hYNURlc2MoZGVzYyk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgIH0pLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgIGRlc2M6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgcGljX3VybDogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBpZDogXFxcXFxcXCJwaWNfdGlwXFxcXFxcXCJcXFxcbiAgICB9XFxcXG59KTtcXFxcblxcXFxuZC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6IFxcXFxcXFwicGljX2xpbmVcXFxcXFxcIlxcXFxuICAgIH1cXFxcbn0pO1xcXFxuXFxcXG5zZXRSZXN1bHQoZCk7XFxcIn1dXCJ9IiwidGl0bGUiOiIyMDIy5bm0MTLmnIjmjqjojZAifQ==