Promise.all = function promiseAllRecursive(values) {
    // Base case.
    if (values.length === 0) {
        return Promise.resolve([]);
    }
    
    const [first, ...rest] = values;
    
    // Calling Promise.resolve on the first value because it could
    // be either a Promise or an actual value.
    return Promise.resolve(first).then(firstResult => {
        return promiseAllRecursive(rest).then(restResults => {
            return [firstResult, ...restResults];
        });
    });
}

const A = Promise.resolve(1);
const B = Promise.resolve(2);
const C = Promise.resolve(3);

const promises = [A, B, C];

Promise.all(promises).then(res => console.log(res))

// [ 1st call ]
function promiseAllRecursive(values /* [A, B, C] */) {
    if (values.length === 0) {
        return Promise.resolve([]);
    }
    
    const [first, ...rest] = values;
    
    return Promise.resolve(first /* A */).then(firstResult /* resultA */ => {
        return promiseAllRecursive(rest /* [B, C] - 2nd call */).then(restResults /* [resultB, resultC] */ => {
            return [firstResult, ...restResults]; // /* [resultA, resultB, resultC] */
        });
    });
}

// [ 2nd call ]
function promiseAllRecursive(values /* [B, C] */) {
    if (values.length === 0) {
        return Promise.resolve([]);
    }
    
    const [first, ...rest] = values;
    
    return Promise.resolve(first /* B */).then(firstResult /* resultB */ => {
        return promiseAllRecursive(rest /* [C] - 3rd call */).then(restResults /* [resultC] */ => {
            return [firstResult, ...restResults];
        });
    });
}

// [ 3rd call ]
function promiseAllRecursive(values /* [C] */) {
    if (values.length === 0) {
        return Promise.resolve([]);
    }
    
    const [first, ...rest] = values;
    
    return Promise.resolve(first /* C */).then(firstResult /* resultC */ => {
        return promiseAllRecursive(rest /* [] - 4th call */).then(restResults /* [] */ => {
            return [firstResult, ...restResults];
        });
    });
}

// [ 4th call ]
function promiseAllRecursive(values /* [] */) {
    if (values.length === 0) {
        return Promise.resolve([]);
    }
    
//    const [first, ...rest] = values;
    
//    return Promise.resolve(first /* c */).then(firstResult /* resultC */ => {
//        return promiseAllRecursive(rest /* [] */).then(restResults /* [] */ => {
//            return [firstResult, ...restResults];
//        });
//    });
}