<!DOCTYPE html>
<html>

<head>
  <title>Moving Gradient</title>
</head>

<body>
  <canvas id="c"></canvas>
  <script>
    const COLORS = [{
        r: 45,
        g: 74,
        b: 227
      }, // blue
      {
        r: 250,
        g: 255,
        b: 89
      }, // yellow
      {
        r: 255,
        g: 104,
        b: 248
      }, // purple
      {
        r: 44,
        g: 209,
        b: 252
      }, // skyblue
      {
        r: 54,
        g: 233,
        b: 84
      }, // green
    ];
    class App {
      constructor() {
        this.canvas = document.getElementById('c');
        document.body.appendChild(this.canvas);
        this.ctx = this.canvas.getContext('2d');
        this.pixelRatio = (window.devicePixelRatio > 1) ? 2 : 1;
        this.totalParticles = 1;
        this.particles = [];
        this.maxRadius = 90;
        this.minRadius = 40;
        window.addEventListener('resize', this.resize.bind(this), false);
        this.resize();
        window.requestAnimationFrame(this.animate.bind(this));
      }
      resize() {
        this.stagewidth = document.body.clientWidth;
        this.stageHeight = document.body.clientHeight;
        this.canvas.width = this.stagewidth * this.pixelRatio;
        this.canvas.height = this.stageHeight * this.pixelRatio;
        this.ctx.scale(this.pixelRatio, this.pixelRatio);
        this.createParticles();
      }
      createParticles() {
        let curColor = 0;
        this.particles = [];
        for (let i = 0; i < this.totalParticles; i++) {
          const item = {
            x: this.stagewidth / 2,
            y: this.stageHeight / 2,
            radius: this.minRadius + Math.random() * (this.maxRadius - this.minRadius),
            color: COLORS[curColor],
            vx: Math.random() * 4,
            vy: Math.random() * 4,
            sinValue: Math.random(),
          };
          curColor = (curColor + 1) % COLORS.length;
          this.particles.push(item);
        }
      }
      animate() {
        this.ctx.clearRect(0, 0, this.stagewidth, this.stageHeight);
        for (const particle of this.particles) {
          particle.sinValue += 0.01;
          particle.radius += Math.sin(particle.sinValue);
          particle.x += particle.vx;
          particle.y += particle.vy;
          if (particle.x < 0) {
            particle.vx += -1;
            particle.x += 10;
          } else if (particle.x > this.stagewidth) {
            particle.vx += -1;
            particle.x -= 10;
          }
          if (particle.y < 0) {
            particle.vy += -1;
            particle.y += 10;
          } else if (particle.y > this.stageHeight) {
            particle.vy += -1;
            particle.y -= 10;
          }
          this.ctx.beginPath();
          this.ctx.arc(particle.x, particle.y, particle.radius, 0, Math.PI * 2, false);
          this.ctx.fillStyle = `rgb(${particle.color.r}, ${particle.color.g}, ${particle.color.b})`;
          this.ctx.fill();
          this.ctx.closePath();
        }
        window.requestAnimationFrame(this.animate.bind(this));
      }
      window.onload = () => {
        new App();
      };
  </script>
</body>

</html>