-- Testing number two!
print("counting!")
monitor = peripheral.wrap("top")
modem = peripheral.wrap("back")

term.redirect(monitor)
term.clear()
term.setCursorPos(1,1)
screenX, screenY = term.getSize()
--print(screenX)
--print(screenY)

modem.open(8650)
modem.open(8651)
chan0 = 36600
chan1 = 36601
counting = 1
counts = {}
averages = {}
trueaverage = 0
total = 0
items = 0
local function countingf ()
while true do
    if counting <= 2 then
        a, b, c, d, e = os.pullEvent("modem_message")
        --print(counting)
        --print(e .. " " .. counting)
        table.insert(counts, counting, e)
        if counting == 2 then
            sleep(0.5)
            --print("sleep1")
        else
            sleep(10)
            --print("sleep10")
        end
        counting = counting + 1
    else
    
    --term.setCursorPos(screenX/2, screenY/2)
    
    total = total + counts[1] + counts[2]
    --print(total)
    total = total / 2
    --print(total)
    total = total - counts[1]
    --print(total)
    --print(total)
    --sleep(2)
    table.insert(averages, #averages, total)
    items = #averages
    trueaverage = 0
    while items > 0 do
        trueaverage = trueaverage + averages[items]
        --print("true for " .. items .. " is " .. trueaverage)
        --trueaverage = trueaverage / #averages
        --print(tostring(items) .. " ")
        --sleep(0.5)
        items = items - 1
    end
    trueaverage = trueaverage / #averages
    --term.setCursorPos(1, screenY/2 + 1)
    term.clear()
    print("Average Yeild/Minute : " .. math.ceil(trueaverage * 6) .. " Rods")
    print("Average EMC/Minute : " .. math.ceil(trueaverage * 6 * 1536 / 1000) .. "K")
    print("Current Total : " .. e .. " Rods")
    print("Current EMC : " .. (math.ceil(((e * 1536)/100000)))/10 .. "M EMC")
    term.setCursorPos(1,1)
    
    
    counting = 1
    counts = {}
    total = 0
    
    --sleep(1)
    end
    
    
    --if counting < 10 then
        --a, b, c, d, e = os.pullEvent("modem_message")
        --print(counting)
        --print(e)
        --table.insert(counts, counting, e)
        --print(counts[counting])
        --counting = counting + 1
    --else
    --term.setCursorPos(screenX/2, screenY/2)
        
    --total = total + counts[2] + counts[3] + counts[4] + counts[5] + counts[6]
    --total = total / 5
    --total = total - counts[1]
    --print(total)
    --term.setCursorPos(1,1)
    
    --counting = 1
    --counts = {}
    --sleep(1)
    --total = 0
    --end
end
end
----------- end counting function

local function onOff ()


    toggle = 0
    while true do
        while redstone.getInput("top") do
            --sleep(1)
           if toggle == 0 then
               modem.transmit(chan1, chan1, "turnOn")
               --sleep(1) 
               toggle = 1
               print("toggle")
               sleep(1)
           else
           
           if toggle == 1 then
               modem.transmit(chan1, chan1, "turnOff")
               --sleep(1) 
               toggle = 0
               print("toggle")
               sleep(1)
           end
           end
           --sleep(2)
        end
        sleep(0.25)
    end    






end

------------ Run Both Functions
parallel.waitForAll(countingf, onOff)


