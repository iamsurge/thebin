#include <stdio.h>  // for printf, scanf and perror
#include <stdlib.h>  // for atoi
#include <unistd.h> // for pipe
#include <sys/types.h> // for pid_t


// function to calculate sum of array
int summation(int n, int* arr){
    int sum = 0;
    for(int i = 0; i < n; i++)
        sum += arr[i];
    return sum;
}


// function to sort array using bubble sort
void Bubble_Sort(int n, int* arr){
    for(int i = 0; i < n; i++){
        for(int j = 0; j < n - i - 1; j++){
            if(arr[j] > arr[j + 1]){
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
            }
        }
    }
}


// function to check for error in pipe
void checkerror(int err, char* msg){
    /*
        Print a message describing the meaning of the value of errno.
        This function is a possible cancellation point and therefore not marked with __THROW.
    */
    if(err == -1){
        perror(msg);
        exit(-1);
    }
}


int main(int argc, char* argv[]){
    
    // declare pipe
    int pipefds[2];
    pid_t childpid;

    // create pipe
    childpid = pipe(pipefds);

    // check for error
    checkerror(childpid, "Unable to create pipe");

    // getting n from command line
    int n = atoi(argv[1]);

    // declare input and output array of size n
    int input[n], output[n];

    // get input array
    printf("Enter %d numbers seperated by spaces: ", n);
    for(int i = 0; i < n; i++)
        scanf("%d", &input[i]);

    // 0 for read  (child process will read from pipe)
    // 1 for write (parent process will write to pipe)

    // parent process will write to pipe
    write(pipefds[1], input, sizeof(input));

    // child process will read from pipe
    read(pipefds[0], output, sizeof(output));

    // calculate sum
    int sum = summation(n, output);

    // sort array
    Bubble_Sort(n, output);
    
    // print output array
    printf("\nSorted Array: ");
    for(int i = 0; i < n; i++)
        printf("%d ", output[i]);

    // print sum of array
    printf("\nSum of arr is %d\n", sum);
}