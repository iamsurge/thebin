class Point
{
private:
	int X, Y; //declaring the points
public:
	Point() { X = 0; Y = 0; } // default constructor setting them equal to 0
	Point(int x, int y) // Overloaded constructor set function to set x and y equal to the given points
	{
		X = x;
		Y = y;
	}
	Point(int a) // conversion constructor
	{
		//yyxx
		if (log10(a) + 1 < 3) //checking if the number of digits of the number is less than 3
		{
			Y = 0; // if yes then setting Y equal to  0
			X = a % 100;
		}
		else
		{
			X = a % 100;
			Y = (a / 100) % 100;
		}
	}


	int getX(void) // return function to get the X
	{
		return X;
	}
	int getY(void) // return function to get the Y
	{
		return Y;
	}

	void set_coordinates(int x, int y)
	{
		X = x;
		Y = y;
	}


	double calc_distance(int a, int b) //calculating distance between the origin and the point
	{
		double result;
		result = sqrt(a * a + b * b); // using cmath library
		return result;
	}

	bool operator > (Point pt) // overloading the > operator to check if point 1 is farther from origin than point 2
	{
		double res1, res2;
		res1 = calc_distance(X, Y); // calculating the distance from origin for point 1 and 2
		res2 = calc_distance(pt.getX(), pt.getY());

		if (res1 > res2) // comparing them
			return true;
		return false;
	}

	bool operator > (int a) // > operator between point and value
	{
		double res1;
		res1 = calc_distance(X, Y);

		if (res1 > a) // comparing them
			return true;
		return false;
	}

	double operator -(Point pt) // overloading - operator to calculate distance
	{
		double res;
		res = sqrt(pow(2, X - pt.getX()) + pow(2, X - pt.getY())); // using cmath library and default formula to calculate it 
		return res;
	}

	friend ostream& operator <<(ostream& os, const Point& pt);

};


//oveloading << operator to print it in pair and useing ir as a friend function
ostream& operator <<(ostream& os, const Point& pt)
{
	os << "(" << pt.X << ", " << pt.Y << ")";
	return os;
}
