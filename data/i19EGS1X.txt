#include <iostream>
#include <algorithm>

struct TreeElem {
public:
    int data = 0;
    struct TreeElem *left;
    struct TreeElem *right;

    explicit TreeElem(int val) {
        left = nullptr;
        right = nullptr;
        data = val;
    }
};

class Tree {
public:
    TreeElem *root;

    Tree() {
        root = nullptr;
    }

    TreeElem *insert(TreeElem *tree_elem, int value) {
        if (tree_elem == nullptr) {
            return new TreeElem(value);
        } else {
            if (value < tree_elem->data) {
                tree_elem->left = insert(tree_elem->left, value);
            } else {
                tree_elem->right = insert(tree_elem->right, value);
            }
            return tree_elem;
        }
    }

    void *insert(int value) {
        root = insert(root, value);
    }

    int isBalance(TreeElem *rt) {
        if (rt == nullptr) {
            return 0;
        }
        int left_size = isBalance(rt->left);
        if (left_size == -1) {
            return -1;
        }
        int right_size = isBalance(rt->right);
        if (right_size == -1) {
            return -1;
        }
        if (abs(left_size - right_size) > 1) {
            return -1;
        } else {
            return std::max(left_size, right_size) + 1;
        }
    }
};

int main() {
    int k;
    Tree *tree = new Tree();
    while (std::cin >> k) {
        if (k == 0) {
            break;
        }
        tree->insert(k);
    }

    int ans = tree->isBalance(tree->root);
    if (ans < 0) {
        std::cout << "NO";
    } else {
        std::cout << "YES";
    }
    return 0;
}