import React, { useEffect, useState } from "react";
import axios from "axios";
import { Book, Users } from "react-feather";
import {
  Box,
  Button,
  Dialog,
  DialogActions,
  DialogContent,
  DialogTitle,
  FormControl,
  FormGroup,
  Icon,
  Input,
  InputLabel,
  MenuItem,
  Select,
  TextField,
} from "@mui/material";
import Classroomlistclassitem from "./ClassroomListClassItem";
import { getInstructorLiveClass } from "../../../actions/liveClassAction";
import { BaseApiUrl } from "../../../constants/apiRoutes";
import CloseIcon from "@mui/icons-material/Close";
import { TextValidator, ValidatorForm } from "react-material-ui-form-validator";
import ReactSelect from "react-select";

//Select
import { useTheme } from "@mui/material/styles";
import OutlinedInput from "@mui/material/OutlinedInput";
import Chip from "@mui/material/Chip";
import ValidatedDatePicker from "@clientApp/components/common/validatorComponent/ValidatedDatePicker";
const ITEM_HEIGHT = 48;
const ITEM_PADDING_TOP = 8;
const MenuProps = {
  PaperProps: {
    style: {
      maxHeight: ITEM_HEIGHT * 4.5 + ITEM_PADDING_TOP,
      width: 250,
    },
  },
};

const names = [
  "Oliver Hansen",
  "Van Henry",
  "April Tucker",
  "Ralph Hubbard",
  "Omar Alexander",
  "Carlos Abbott",
  "Miriam Wagner",
  "Bradley Wilkerson",
  "Virginia Andrews",
  "Kelly Snyder",
];

function getStyles(name, personName, theme) {
  return {
    fontWeight:
      personName.indexOf(name) === -1
        ? theme.typography.fontWeightRegular
        : theme.typography.fontWeightMedium,
  };
}

//------

function ClassRoomList() {
  const [isTeacher, setisTeacher] = useState(true);
  const [classrooms, setClassrooms] = useState([]);

  //Create Classroom states
  const [createClassRoomData, setCreateClassRoomData] = useState({
    SectionName: "",
    CourseTypeID: "",
    GradeID: [],
    CategoryID: [],
    CourseID: [],
    Duration: "",
    NoOfEnrollment: "",
    Tags: "",
  });

  const [levels, setLevels] = useState([]); //Also refered as CourseType
  const [selectedLevel, setSelectedLevel] = useState("");
  //e.target.value
  const [grades, setGrades] = useState([]);
  const [selectedGrades, setSelectedGrades] = useState([]);
  const [subjects, setSubjects] = useState([]); //Also refered as Categories
  const [selectedSubjects, setSelectedSubjects] = useState([]);
  const [courses, setCourses] = useState([]);
  const [selectedCourses, setSelectedCourses] = useState([]);

  // const [courseTypeID, setCourseTypeID] = useState(30);

  const [showCreateClassRoomDialog, setCreateClassRoomDialog] = useState(false);
  const [showStartEnrollmentDialog, setShowStartEnrollmentDialog] =
    useState(false);
    const [showShareClaassroomDialog,setShowShareClassroomDialog ] =
    useState(true);

  let gradeoptions = [];
  if (grades && grades.length) {
    gradeoptions = grades.map((std) => {
      return {
        value: std.GradeID,
        label: std.GradeName,
      };
    });
  }

  let subjectsoptions = [];
  if (subjects && subjects.length) {
    subjectsoptions = subjects.map((std) => {
      return {
        value: std.CategoryID,
        label: std.CategoryName,
      };
    });
  }

  let courseoptions = [];
  if (courses && courses.length) {
    courseoptions = courses.map((std) => {
      return {
        value: std.CourseID,
        label: std.CourseName,
      };
    });
  }

  //for Select
  const theme = useTheme();
  //---------

  const handleToCloseCreateClassRoomDialog = () => {
    setCreateClassRoomDialog(false);
  };

  const handleToCloseStartEnrollmentDialog = () => {
    setShowStartEnrollmentDialog(false);
  };

  const handleToCloseShareClaassroomDialog = () => {
    setShowShareClassroomDialog(false);
  };

  const openCreateClassRoomDialog = () => {
    setCreateClassRoomDialog(true);
  };

  const openStartEnrollmentDialog = () => {
    setShowStartEnrollmentDialog(true);
  };

  const handleClassroomNameChange = (e) => {
    setCreateClassRoomData({
      ...createClassRoomData,
      SectionName: e.target.value,
    });
    console.log("classroom name:", e.target.value);
  };

  const handleLevelChange = (e) => {
    setSelectedLevel(e.target.value);

    setCreateClassRoomData({
      ...createClassRoomData,
      CourseTypeID: e.target.value,
    });

    axios
      .get(
        BaseApiUrl +
          `CourseType/GetCourseCatoryGradeByCourseTypeTeachSpace?courseTypeID=${selectedLevel}`
      )
      .then((response) => {
        console.log("response.data.Result.Grades", response.data.Result.Grades);
        console.log(
          "response.data.Result.Categories",
          response.data.Result.Categories
        );
        setGrades(response.data.Result.Grades);
        setSubjects(response.data.Result.Categories);
      })
      .catch((error) => console.log(error));
  };

  const handleGradeChange = (array) => {
    setSelectedGrades(array);

    let selectedGradeIDs = array.map((a) => a.value);

    setCreateClassRoomData({
      ...createClassRoomData,
      GradeID: selectedGradeIDs,
    });

    console.log("createClassRoomData:", createClassRoomData);
  };

  const handleSubjectChange = (array) => {
    setSelectedSubjects(array);

    let selectedCategoryIDs = array.map((a) => a.value);

    setCreateClassRoomData({
      ...createClassRoomData,
      CategoryID: selectedCategoryIDs,
    });

    console.log("createClassRoomData:", createClassRoomData);
  };

  const handleCourseChange = (array) => {
    setSelectedCourses(array);

    let selectedCourseIDs = array.map((a) => a.value);

    setCreateClassRoomData({
      ...createClassRoomData,
      CourseID: selectedCourseIDs,
    });

    console.log("createClassRoomData:", createClassRoomData);
  };

  //Duration

  const handleDurationChange = (e) => {
    setCreateClassRoomData({
      ...createClassRoomData,
      Duration: e.target.value,
    });
    console.log("duration:", e.target.value);
  };
  const handleNoOfEnrollmentChange = (e) => {
    setCreateClassRoomData({
      ...createClassRoomData,
      NoOfEnrollment: e.target.value,
    });
    console.log("noOfenr:", e.target.value);
  };
  const handleTagsChange = (e) => {
    setCreateClassRoomData({
      ...createClassRoomData,
      Tags: e.target.value,
    });

    console.log("Tag:", e.target.value);
  };

  const handleCreateClassRoomSubmit = (event) => {
    event.preventDefault();
    axios
      .post(BaseApiUrl + `ClassRoom/CreateClassroom`, createClassRoomData)
      .then(function (response) {
        console.log(response);
        window.location.href = "/neema/classroomlist";
      })
      .catch(function (error) {
        console.log(error);
      });
  };

  React.useEffect(() => {
    console.log("BaseApiUrl test: ", BaseApiUrl);

    // let classRoomID = 143;
    // let isCurrentUserSchoolTeacher = true;
    // let sDate = "2022-11-07";

    //Load ClassRoomList
    axios
      .get(BaseApiUrl + `ClassRoom/GetClassRoomList`)
      .then((response) => {
        console.log("response of GetClassRoomList:", response);
        setClassrooms(response.data.Result);
      })
      .catch((error) => console.log(error));

    //Load Levels
    axios
      .get(BaseApiUrl + `CourseType/GetCourseTypeForDropDownList`)
      .then((response) => {
        console.log("response", response.data.Result);
        setLevels(response.data.Result);
      })
      .catch((error) => console.log(error));

    //Load Courses
    axios
      .get(
        BaseApiUrl +
          `Course/GetAllMyCreatedCourses?pageNumber=1&pageSize=12&statusId=0&searchTerm=&gradeId=0`
      )
      .then((response) => {
        console.log(
          "response.data.Result.Courses",
          response.data.Result.Courses
        );
        setCourses(response.data.Result.Courses);
      })
      .catch((error) => console.log(error));

    return () => {
      console.log("createClassRoomData state:", createClassRoomData);
    };
  }, []);

  return (
    <div>
      <Dialog open={showCreateClassRoomDialog} className="dialog-lg">
        <DialogTitle className="form-dialog-title">
          {/* {string.password} */}
          Create Classroom
        </DialogTitle>
        <Button
          onClick={handleToCloseCreateClassRoomDialog}
          className="btn-media-close"
        >
          <Icon>close</Icon>
        </Button>

        <DialogContent>
          <ValidatorForm onSubmit={handleCreateClassRoomSubmit}>
            <div className="form-group ">
              <label>
                Classroom Name<span className="text-danger">*</span>
              </label>

              <TextValidator
                onChange={handleClassroomNameChange}
                name="SectionName"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["Classroom Name is required"]}
                value={createClassRoomData.SectionName}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Level</label>
              <Select
                onChange={handleLevelChange}
                inputProps={{
                  name: "CourseTypeID",
                  id: "CourseTypeID",
                }}
                variant="outlined"
                className="custom-input-box"
                value={selectedLevel}
              >
                <MenuItem value="0" id={"coursetype_" + 0}>
                  None
                </MenuItem>
                {levels &&
                  levels.map((level) => {
                    return (
                      <MenuItem
                        key={level.CourseTypeID}
                        value={level.CourseTypeID}
                        id={"coursetype_" + level.CourseTypeID}
                      >
                        {level.CourseTypeName}
                      </MenuItem>
                    );
                  })}
              </Select>
            </div>

            <div className="form-group ">
              <label>Grade</label>
              <ReactSelect
                className="message-select-wrapper"
                closeMenuOnSelect={false}
                //defaultValue={gradeoptions}
                isMulti
                menuPlacement="auto"
                options={gradeoptions}
                onChange={handleGradeChange}
                value={selectedGrades}
                showNewOptionAtTop={false}
                placeholder="Select Grade"
              />
            </div>

            <div className="form-group">
              <label>Subject</label>
              <ReactSelect
                className="message-select-wrapper"
                closeMenuOnSelect={false}
                isMulti
                menuPlacement="auto"
                options={subjectsoptions}
                onChange={handleSubjectChange}
                value={selectedSubjects}
                showNewOptionAtTop={false}
                placeholder="Select Subject"
              />
            </div>

            <div className="form-group ">
              <label>
                Class Duration (days)<span className="text-danger">*</span>
              </label>

              <TextValidator
                onChange={handleDurationChange}
                name="classDurationDays"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["Class Duration Days is required"]}
                value={createClassRoomData.Duration}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>
                No of Enrollment (days)<span className="text-danger">*</span>
              </label>

              <TextValidator
                onChange={handleNoOfEnrollmentChange}
                name="noOfEnrollment"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["No Of Enrollment is required"]}
                value={createClassRoomData.NoOfEnrollment}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Tags</label>

              <TextValidator
                onChange={handleTagsChange}
                name="tags"
                type="text"
                inputProps={{ maxLength: 100 }}
                value={createClassRoomData.Tags}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Select Course</label>

              {/* <Select
                // value={this.props.categoryID ? this.props.categoryID : "0"}
                onChange={handleCourseChange}
                inputProps={{
                  name: "CourseID",
                  id: "CourseID",
                }}
                variant="outlined"
                className="custom-input-box"
              >
                <MenuItem value="0" id={"course_" + 0}>
                  None
                </MenuItem>
                {courses &&
                  courses.map((course) => {
                    return (
                      <MenuItem
                        key={course.CourseID}
                        value={course.CourseID}
                        id={"course_" + course.CategoryID}
                      >
                        {course.CourseName}
                      </MenuItem>
                    );
                  })}
              </Select> */}
              <ReactSelect
                className="message-select-wrapper"
                closeMenuOnSelect={false}
                isMulti
                menuPlacement="auto"
                options={courseoptions}
                onChange={handleCourseChange}
                value={selectedCourses}
                showNewOptionAtTop={false}
                placeholder="Select Course"
              />
            </div>

            <Button
              type="submit"
              className={"btn btn-primary mb-2"}
              variant="outlined"
              color="primary"
            >
              Create
            </Button>
            {/* <div className="form-group ">
                <label>
                  Grade <span className="text-danger">*</span>
                </label>
                <ReactSelect
                  className="message-select-wrapper"
                  closeMenuOnSelect={false}
                  defaultValue={gradeoptions}
                  isMulti
                  menuPlacement="auto"
                  options={gradeoptions}
                  onChange={this.handleOnGradeChange.bind(this)}
                  value={this.state.selectedLiveClassgrades}
                  showNewOptionAtTop={false}
                  placeholder="Select Grade"
                />
              </div>
              <div className="form-group ">
                <label>
                  Subject <span className="text-danger">*</span>
                </label>
                <SelectValidator
                  value={SubjectID}
                  onChange={this.handleChange}
                  name="SubjectID"
                  id="SubjectID"
                  // label={"Class"}
                  validators={["isSelected"]}
                  errorMessages={["Subject is required"]}
                  inputProps={{
                    name: "SubjectID",
                    id: "SubjectID",
                  }}
                  // InputLabelProps={{ shrink: true }}
                  className="custom-input-box"
                  variant="outlined"
                >
                  {SubjectList && SubjectList.length > 0 ? (
                    SubjectList.map((s, index) => {
                      return (
                        <MenuItem key={"sub" + s.SubjectID} value={s.SubjectID}>
                          {s.SubjectName}
                        </MenuItem>
                      );
                    })
                  ) : (
                    <MenuItem value={0} key={"grade1546"}>
                      <em>None</em>
                    </MenuItem>
                  )}
                </SelectValidator>
              </div>

              <div className="form-group form-transform">
                <FormControlLabel
                  control={
                    <Switch
                      size="small"
                      name="IsSchedulable"
                      checked={IsSchedulable}
                      onChange={(e) =>
                        this.setState({
                          IsSchedulable: !IsSchedulable,
                        })
                      }
                    />
                  }
                  label="Schedule?"
                />
              </div>

              {!IsSchedulable && (
                <React.Fragment>
                  <div className="form-group ">
                    <label>
                      Duration <span className="text-danger">*</span>
                    </label>
                    <TextValidator
                      onChange={this.handleChange}
                      disabled={IsSchedulable}
                      name="Duration"
                      type="number"
                      validators={["required", "minNumber:1"]}
                      errorMessages={[
                        "Duration is required",
                        "Value cannot be less than 1",
                      ]}
                      value={Duration}
                      className={"custom-input-box "}
                      variant="outlined"
                      autoComplete="off"
                    />
                  </div>
                </React.Fragment>
              )}

              {IsSchedulable && (
                <React.Fragment>
                  <div className="form-group form-transform">
                    <label>Start Time</label>
                    <ValidatedDatePicker
                      //selected={StartTime ? moment(StartTime).toDate() : null}
                      selected={StartTime ? new Date(StartTime) : null}
                      label="date"
                      onChange={this.handleStartTimeChange}
                      name="date"
                      value={StartTime}
                      dateFormat="YYYY/MM/DD hh:mm A"
                      peekNextMonth
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      minDate={new Date()}
                      autoComplete="off"
                      variant="outlined"
                      showTimeSelect={true}
                      className="custom-input-box"
                      filterTime={this.filterPassedStartTime}
                    />
                  </div>
                  <div className="form-group form-transform">
                    <label>End Time</label>
                    <ValidatedDatePicker
                      selected={EndTime ? moment(EndTime).toDate() : null}
                      label="date"
                      onChange={this.handleEndTimeChange}
                      name="date"
                      value={EndTime}
                      validators={["isTimeToValid"]}
                      errorMessages={[
                        "End time must be greater than Start time",
                      ]}
                      dateFormat="YYYY/MM/DD hh:mm A"
                      peekNextMonth
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      minDate={new Date()}
                      autoComplete="off"
                      variant="outlined"
                      showTimeSelect={true}
                      className="custom-input-box"
                      filterTime={this.filterPassedTime}
                    />
                  </div>
                </React.Fragment>
              )}

              {!UpdateMode && (
                <div>
                  <label>
                    Event Type <small> (Can only be set once)</small>
                  </label>
                  <RadioGroup
                    aria-label="liveEventType"
                    name="liveEventType"
                    value={LiveEventType}
                    onChange={(e) => {
                      this.setState({ LiveEventType: parseInt(e.target.value) });
                    }}
                    className="form-radio-group"
                  >
                    <FormControlLabel
                      value={1}
                      control={<Radio />}
                      label="Zoom Meeting"
                    />
                    <FormControlLabel
                      value={2}
                      control={<Radio />}
                      label="Live Event"
                    />
                    <FormControlLabel
                      value={3}
                      control={<Radio />}
                      label="Video Conference"
                    />
                    <FormControlLabel
                      value={4}
                      control={<Radio />}
                      label="Google Meet"
                    />
                    <FormControlLabel
                      value={5}
                      control={<Radio />}
                      label="MS Teams"
                    />
                  </RadioGroup>
                </div>
              )}

              <div className="btn-wrapper text-right">
                <Button
                  className="btn btn-primary"
                  variant="outlined"
                  type="submit"
                >
                  {UpdateMode ? "Update" : "Save"}
                </Button>
                <Button
                  onClick={() => this.props.onCancel()}
                  className="btn-media-close"
                  color="primary"
                >
                  <Icon>close</Icon>
                </Button>
              </div> */}
          </ValidatorForm>
        </DialogContent>
      </Dialog>

      <Dialog open={showStartEnrollmentDialog} className="dialog-lg">
        <DialogTitle className="form-dialog-title">
          Start Enrollment
        </DialogTitle>
        <Button
          onClick={handleToCloseStartEnrollmentDialog}
          className="btn-media-close"
        >
          <Icon>close</Icon>
        </Button>

        <DialogContent>
          <ValidatorForm onSubmit={handleCreateClassRoomSubmit}>
            <div className="form-group ">
              <label>Class Start Date</label>

              <TextValidator
                // onChange={handleDurationChange}
                name="classDurationDays"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["Class Duration Days is required"]}
                value={createClassRoomData.Duration}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Class End Date</label>

              <TextValidator
                // onChange={handleNoOfEnrollmentChange}
                name="noOfEnrollment"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["No Of Enrollment is required"]}
                // value={createClassRoomData.NoOfEnrollment}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Start Time</label>

              <TextValidator
                // onChange={handleTagsChange}
                name="tags"
                type="text"
                inputProps={{ maxLength: 100 }}
                // value={createClassRoomData.Tags}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>End Time</label>
              <ValidatedDatePicker
                //selected={StartTime ? moment(StartTime).toDate() : null}
                // selected={StartTime ? new Date(StartTime) : null}
                label="date"
                // onChange={this.handleStartTimeChange}
                name="date"
                // value={StartTime}
                dateFormat="YYYY/MM/DD hh:mm A"
                peekNextMonth
                showMonthDropdown
                showYearDropdown
                dropdownMode="select"
                minDate={new Date()}
                autoComplete="off"
                variant="outlined"
                showTimeSelect={true}
                className="custom-input-box"
                //filterTime={this.filterPassedStartTime}
              />
            </div>

            <div className="form-group ">
              <label>Enroll End Date</label>
              <ValidatedDatePicker
                //selected={StartTime ? moment(StartTime).toDate() : null}
                // selected={StartTime ? new Date(StartTime) : null}
                label="date"
                // onChange={this.handleStartTimeChange}
                name="date"
                // value={StartTime}
                dateFormat="YYYY/MM/DD hh:mm A"
                peekNextMonth
                showMonthDropdown
                showYearDropdown
                dropdownMode="select"
                minDate={new Date()}
                autoComplete="off"
                variant="outlined"
                showTimeSelect={true}
                className="custom-input-box"
                //filterTime={this.filterPassedStartTime}
              />
            </div>

            <Button
              type="submit"
              className={"btn btn-primary mb-2"}
              variant="outlined"
              color="primary"
            >
              Create
            </Button>
            {/* <div className="form-group ">
                <label>
                  Grade <span className="text-danger">*</span>
                </label>
                <ReactSelect
                  className="message-select-wrapper"
                  closeMenuOnSelect={false}
                  defaultValue={gradeoptions}
                  isMulti
                  menuPlacement="auto"
                  options={gradeoptions}
                  onChange={this.handleOnGradeChange.bind(this)}
                  value={this.state.selectedLiveClassgrades}
                  showNewOptionAtTop={false}
                  placeholder="Select Grade"
                />
              </div>
              <div className="form-group ">
                <label>
                  Subject <span className="text-danger">*</span>
                </label>
                <SelectValidator
                  value={SubjectID}
                  onChange={this.handleChange}
                  name="SubjectID"
                  id="SubjectID"
                  // label={"Class"}
                  validators={["isSelected"]}
                  errorMessages={["Subject is required"]}
                  inputProps={{
                    name: "SubjectID",
                    id: "SubjectID",
                  }}
                  // InputLabelProps={{ shrink: true }}
                  className="custom-input-box"
                  variant="outlined"
                >
                  {SubjectList && SubjectList.length > 0 ? (
                    SubjectList.map((s, index) => {
                      return (
                        <MenuItem key={"sub" + s.SubjectID} value={s.SubjectID}>
                          {s.SubjectName}
                        </MenuItem>
                      );
                    })
                  ) : (
                    <MenuItem value={0} key={"grade1546"}>
                      <em>None</em>
                    </MenuItem>
                  )}
                </SelectValidator>
              </div>

              <div className="form-group form-transform">
                <FormControlLabel
                  control={
                    <Switch
                      size="small"
                      name="IsSchedulable"
                      checked={IsSchedulable}
                      onChange={(e) =>
                        this.setState({
                          IsSchedulable: !IsSchedulable,
                        })
                      }
                    />
                  }
                  label="Schedule?"
                />
              </div>

              {!IsSchedulable && (
                <React.Fragment>
                  <div className="form-group ">
                    <label>
                      Duration <span className="text-danger">*</span>
                    </label>
                    <TextValidator
                      onChange={this.handleChange}
                      disabled={IsSchedulable}
                      name="Duration"
                      type="number"
                      validators={["required", "minNumber:1"]}
                      errorMessages={[
                        "Duration is required",
                        "Value cannot be less than 1",
                      ]}
                      value={Duration}
                      className={"custom-input-box "}
                      variant="outlined"
                      autoComplete="off"
                    />
                  </div>
                </React.Fragment>
              )}

              {IsSchedulable && (
                <React.Fragment>
                  <div className="form-group form-transform">
                    <label>Start Time</label>
                    <ValidatedDatePicker
                      //selected={StartTime ? moment(StartTime).toDate() : null}
                      selected={StartTime ? new Date(StartTime) : null}
                      label="date"
                      onChange={this.handleStartTimeChange}
                      name="date"
                      value={StartTime}
                      dateFormat="YYYY/MM/DD hh:mm A"
                      peekNextMonth
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      minDate={new Date()}
                      autoComplete="off"
                      variant="outlined"
                      showTimeSelect={true}
                      className="custom-input-box"
                      filterTime={this.filterPassedStartTime}
                    />
                  </div>
                  <div className="form-group form-transform">
                    <label>End Time</label>
                    <ValidatedDatePicker
                      selected={EndTime ? moment(EndTime).toDate() : null}
                      label="date"
                      onChange={this.handleEndTimeChange}
                      name="date"
                      value={EndTime}
                      validators={["isTimeToValid"]}
                      errorMessages={[
                        "End time must be greater than Start time",
                      ]}
                      dateFormat="YYYY/MM/DD hh:mm A"
                      peekNextMonth
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      minDate={new Date()}
                      autoComplete="off"
                      variant="outlined"
                      showTimeSelect={true}
                      className="custom-input-box"
                      filterTime={this.filterPassedTime}
                    />
                  </div>
                </React.Fragment>
              )}

              {!UpdateMode && (
                <div>
                  <label>
                    Event Type <small> (Can only be set once)</small>
                  </label>
                  <RadioGroup
                    aria-label="liveEventType"
                    name="liveEventType"
                    value={LiveEventType}
                    onChange={(e) => {
                      this.setState({ LiveEventType: parseInt(e.target.value) });
                    }}
                    className="form-radio-group"
                  >
                    <FormControlLabel
                      value={1}
                      control={<Radio />}
                      label="Zoom Meeting"
                    />
                    <FormControlLabel
                      value={2}
                      control={<Radio />}
                      label="Live Event"
                    />
                    <FormControlLabel
                      value={3}
                      control={<Radio />}
                      label="Video Conference"
                    />
                    <FormControlLabel
                      value={4}
                      control={<Radio />}
                      label="Google Meet"
                    />
                    <FormControlLabel
                      value={5}
                      control={<Radio />}
                      label="MS Teams"
                    />
                  </RadioGroup>
                </div>
              )}

              <div className="btn-wrapper text-right">
                <Button
                  className="btn btn-primary"
                  variant="outlined"
                  type="submit"
                >
                  {UpdateMode ? "Update" : "Save"}
                </Button>
                <Button
                  onClick={() => this.props.onCancel()}
                  className="btn-media-close"
                  color="primary"
                >
                  <Icon>close</Icon>
                </Button>
              </div> */}
          </ValidatorForm>
        </DialogContent>
      </Dialog>

      <Dialog open={showStartEnrollmentDialog} className="dialog-lg">
        <DialogTitle className="form-dialog-title">
          Start Enrollment
        </DialogTitle>
        <Button
          onClick={handleToCloseStartEnrollmentDialog}
          className="btn-media-close"
        >
          <Icon>close</Icon>
        </Button>

        <DialogContent>
          <ValidatorForm onSubmit={handleCreateClassRoomSubmit}>
            <div className="form-group ">
              <label>Class Start Date</label>

              <TextValidator
                // onChange={handleDurationChange}
                name="classDurationDays"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["Class Duration Days is required"]}
                value={createClassRoomData.Duration}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Class End Date</label>

              <TextValidator
                // onChange={handleNoOfEnrollmentChange}
                name="noOfEnrollment"
                type="text"
                inputProps={{ maxLength: 100 }}
                validators={["required"]}
                errorMessages={["No Of Enrollment is required"]}
                // value={createClassRoomData.NoOfEnrollment}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>Start Time</label>

              <TextValidator
                // onChange={handleTagsChange}
                name="tags"
                type="text"
                inputProps={{ maxLength: 100 }}
                // value={createClassRoomData.Tags}
                className={"custom-input-box "}
                variant="outlined"
                autoComplete="off"
              />
            </div>

            <div className="form-group ">
              <label>End Time</label>
              <ValidatedDatePicker
                //selected={StartTime ? moment(StartTime).toDate() : null}
                // selected={StartTime ? new Date(StartTime) : null}
                label="date"
                // onChange={this.handleStartTimeChange}
                name="date"
                // value={StartTime}
                dateFormat="YYYY/MM/DD hh:mm A"
                peekNextMonth
                showMonthDropdown
                showYearDropdown
                dropdownMode="select"
                minDate={new Date()}
                autoComplete="off"
                variant="outlined"
                showTimeSelect={true}
                className="custom-input-box"
                //filterTime={this.filterPassedStartTime}
              />
            </div>

            <div className="form-group ">
              <label>Enroll End Date</label>
              <ValidatedDatePicker
                //selected={StartTime ? moment(StartTime).toDate() : null}
                // selected={StartTime ? new Date(StartTime) : null}
                label="date"
                // onChange={this.handleStartTimeChange}
                name="date"
                // value={StartTime}
                dateFormat="YYYY/MM/DD hh:mm A"
                peekNextMonth
                showMonthDropdown
                showYearDropdown
                dropdownMode="select"
                minDate={new Date()}
                autoComplete="off"
                variant="outlined"
                showTimeSelect={true}
                className="custom-input-box"
                //filterTime={this.filterPassedStartTime}
              />
            </div>

            <Button
              type="submit"
              className={"btn btn-primary mb-2"}
              variant="outlined"
              color="primary"
            >
              Create
            </Button>
            {/* <div className="form-group ">
                <label>
                  Grade <span className="text-danger">*</span>
                </label>
                <ReactSelect
                  className="message-select-wrapper"
                  closeMenuOnSelect={false}
                  defaultValue={gradeoptions}
                  isMulti
                  menuPlacement="auto"
                  options={gradeoptions}
                  onChange={this.handleOnGradeChange.bind(this)}
                  value={this.state.selectedLiveClassgrades}
                  showNewOptionAtTop={false}
                  placeholder="Select Grade"
                />
              </div>
              <div className="form-group ">
                <label>
                  Subject <span className="text-danger">*</span>
                </label>
                <SelectValidator
                  value={SubjectID}
                  onChange={this.handleChange}
                  name="SubjectID"
                  id="SubjectID"
                  // label={"Class"}
                  validators={["isSelected"]}
                  errorMessages={["Subject is required"]}
                  inputProps={{
                    name: "SubjectID",
                    id: "SubjectID",
                  }}
                  // InputLabelProps={{ shrink: true }}
                  className="custom-input-box"
                  variant="outlined"
                >
                  {SubjectList && SubjectList.length > 0 ? (
                    SubjectList.map((s, index) => {
                      return (
                        <MenuItem key={"sub" + s.SubjectID} value={s.SubjectID}>
                          {s.SubjectName}
                        </MenuItem>
                      );
                    })
                  ) : (
                    <MenuItem value={0} key={"grade1546"}>
                      <em>None</em>
                    </MenuItem>
                  )}
                </SelectValidator>
              </div>

              <div className="form-group form-transform">
                <FormControlLabel
                  control={
                    <Switch
                      size="small"
                      name="IsSchedulable"
                      checked={IsSchedulable}
                      onChange={(e) =>
                        this.setState({
                          IsSchedulable: !IsSchedulable,
                        })
                      }
                    />
                  }
                  label="Schedule?"
                />
              </div>

              {!IsSchedulable && (
                <React.Fragment>
                  <div className="form-group ">
                    <label>
                      Duration <span className="text-danger">*</span>
                    </label>
                    <TextValidator
                      onChange={this.handleChange}
                      disabled={IsSchedulable}
                      name="Duration"
                      type="number"
                      validators={["required", "minNumber:1"]}
                      errorMessages={[
                        "Duration is required",
                        "Value cannot be less than 1",
                      ]}
                      value={Duration}
                      className={"custom-input-box "}
                      variant="outlined"
                      autoComplete="off"
                    />
                  </div>
                </React.Fragment>
              )}

              {IsSchedulable && (
                <React.Fragment>
                  <div className="form-group form-transform">
                    <label>Start Time</label>
                    <ValidatedDatePicker
                      //selected={StartTime ? moment(StartTime).toDate() : null}
                      selected={StartTime ? new Date(StartTime) : null}
                      label="date"
                      onChange={this.handleStartTimeChange}
                      name="date"
                      value={StartTime}
                      dateFormat="YYYY/MM/DD hh:mm A"
                      peekNextMonth
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      minDate={new Date()}
                      autoComplete="off"
                      variant="outlined"
                      showTimeSelect={true}
                      className="custom-input-box"
                      filterTime={this.filterPassedStartTime}
                    />
                  </div>
                  <div className="form-group form-transform">
                    <label>End Time</label>
                    <ValidatedDatePicker
                      selected={EndTime ? moment(EndTime).toDate() : null}
                      label="date"
                      onChange={this.handleEndTimeChange}
                      name="date"
                      value={EndTime}
                      validators={["isTimeToValid"]}
                      errorMessages={[
                        "End time must be greater than Start time",
                      ]}
                      dateFormat="YYYY/MM/DD hh:mm A"
                      peekNextMonth
                      showMonthDropdown
                      showYearDropdown
                      dropdownMode="select"
                      minDate={new Date()}
                      autoComplete="off"
                      variant="outlined"
                      showTimeSelect={true}
                      className="custom-input-box"
                      filterTime={this.filterPassedTime}
                    />
                  </div>
                </React.Fragment>
              )}

              {!UpdateMode && (
                <div>
                  <label>
                    Event Type <small> (Can only be set once)</small>
                  </label>
                  <RadioGroup
                    aria-label="liveEventType"
                    name="liveEventType"
                    value={LiveEventType}
                    onChange={(e) => {
                      this.setState({ LiveEventType: parseInt(e.target.value) });
                    }}
                    className="form-radio-group"
                  >
                    <FormControlLabel
                      value={1}
                      control={<Radio />}
                      label="Zoom Meeting"
                    />
                    <FormControlLabel
                      value={2}
                      control={<Radio />}
                      label="Live Event"
                    />
                    <FormControlLabel
                      value={3}
                      control={<Radio />}
                      label="Video Conference"
                    />
                    <FormControlLabel
                      value={4}
                      control={<Radio />}
                      label="Google Meet"
                    />
                    <FormControlLabel
                      value={5}
                      control={<Radio />}
                      label="MS Teams"
                    />
                  </RadioGroup>
                </div>
              )}

              <div className="btn-wrapper text-right">
                <Button
                  className="btn btn-primary"
                  variant="outlined"
                  type="submit"
                >
                  {UpdateMode ? "Update" : "Save"}
                </Button>
                <Button
                  onClick={() => this.props.onCancel()}
                  className="btn-media-close"
                  color="primary"
                >
                  <Icon>close</Icon>
                </Button>
              </div> */}
          </ValidatorForm>
        </DialogContent>
      </Dialog>     <Dialog open={true} className="dialog-lg">
        <DialogTitle className="form-dialog-title">
          Share  Classroom
        </DialogTitle>
        <Button
          onClick={handleToCloseShareClaassroomDialog}
          className="btn-media-close"
        >
          <Icon>close</Icon>
        </Button>

        <DialogContent>
        <div className={`classroom-item is-${'teacher'}`}>
        <div className="classroom-item-header">
          <div
            className="classroom-item-brief"
            onClick={() => navigation.navigate("/neema/classroomdetails")}
          >
           
            <p className="classroom-item-meta">{'status'}</p>
            <p className="classroom-item-title">{topic}</p>
            <p className="classroom-item-icon-list">
              <Book size="16" />
              <span>2 Courses Covered</span>
            </p>
            <p className="classroom-item-icon-list">
              <Users size="16" />
              <span>0/{noOfEnrollment} Enrolled....</span>
            </p>
            <p className="classroom-item-icon-list">
              <Clock size="16" />
              <span>1:30PM - 2:30PM, until 1 Oct, 2021</span>
            </p>
          </div>
          <div className="classroom-action-sec">
            <IconButton
              aria-label="more"
              id="long-button"
              aria-controls={open ? "long-menu" : undefined}
              aria-expanded={open ? "true" : undefined}
              aria-haspopup="true"
              //onClick={handleClick}
            >
              <MoreVertIcon />
            </IconButton>
            <Menu
              id="long-menu"
              MenuListProps={{
                "aria-labelledby": "long-button",
              }}
              anchorEl={anchorEl}
              open={open}
              onClose={handleClose}
              anchorOrigin={{
                vertical: "bottom",
                horizontal: "right",
              }}
              transformOrigin={{
                vertical: "top",
                horizontal: "right",
              }}
            >
              <MenuItem>
                <EmailIcon className="mr10" fontSize="small" />
                <span>Invite</span>
              </MenuItem>
              <MenuItem>
                <EditIcon className="mr10" fontSize="small" />
                Edit
              </MenuItem>
              <MenuItem className="text-danger">
                <DeleteIcon className="mr10" fontSize="small" />
                Delete
              </MenuItem>
            </Menu>
          </div>
        </div>

        <div className={`classroom-item-action is-${template}`}>
          {role === "teacher" ? (
            <span>Code: MATHS30</span>
          ) : (
            <span>Next Live Class: 20 Jan, 2022</span>
          )}
          {role === "teacher" ? (
            <Button
              onClick={StartEnrollmentDialogHandler}
              className={
                template === "menu-head"
                  ? "btn btn-primary w-100 mb10"
                  : "btn btn-outline-secondary"
              }
            >
              Start Enrollment
            </Button>
          ) : (
            <Button
              className={
                template === "menu-head"
                  ? "btn btn-primary w-100 mb10"
                  : "btn btn-primary"
              }
            >
              Enroll
            </Button>
          )}
        </div>
      </div>     <div className={`classroom-item is-${status}`}>
        <div className="classroom-item-header">
          <div
            className="classroom-item-brief"
            onClick={() => navigation.navigate("/neema/classroomdetails")}
          >
            {role === "student" ? (
              <img
                className="classroom-item-avatar"
                alt="Remy Sharp"
                src="https://faces-img.xcdn.link/thumb-lorem-face-6255_thumb.jpg"
              />
            ) : (
              ""
            )}
            <p className="classroom-item-meta">{status}</p>
            <p className="classroom-item-title">{topic}</p>
            <p className="classroom-item-icon-list">
              <Book size="16" />
              <span>2 Courses Covered</span>
            </p>
            <p className="classroom-item-icon-list">
              <Users size="16" />
              <span>0/{noOfEnrollment} Enrolled....</span>
            </p>
            <p className="classroom-item-icon-list">
              <Clock size="16" />
              <span>1:30PM - 2:30PM, until 1 Oct, 2021</span>
            </p>
          </div>
          
        </div>

        <div className={`classroom-item-action is-${template}`}>
          {role === "teacher" ? (
            <span>Code: MATHS30</span>
          ) : (
            <span>Next Live Class: 20 Jan, 2022</span>
          )}
          {role === "teacher" ? (
            <Button
              onClick={StartEnrollmentDialogHandler}
              className={
                template === "menu-head"
                  ? "btn btn-primary w-100 mb10"
                  : "btn btn-outline-secondary"
              }
            >
              Start Enrollment
            </Button>
          ) : (
            <Button
              className={
                template === "menu-head"
                  ? "btn btn-primary w-100 mb10"
                  : "btn btn-primary"
              }
            >
              Enroll
            </Button>
          )}
        </div>
      </div>     <div className={`classroom-item is-${'newclass'}`}>
        <div className="classroom-item-header">
          <div
            className="classroom-item-brief"
            onClick={() => navigation.navigate("/neema/classroomdetails")}
          >
            {role === "student" ? (
              <img
                className="classroom-item-avatar"
                alt="Remy Sharp"
                src="https://faces-img.xcdn.link/thumb-lorem-face-6255_thumb.jpg"
              />
            ) : (
              ""
            )}
            <p className="classroom-item-meta">{status}</p>
            <p className="classroom-item-title">{topic}</p>
            <p className="classroom-item-icon-list">
              <Book size="16" />
              <span>2 Courses Covered</span>
            </p>
            <p className="classroom-item-icon-list">
              <Users size="16" />
              <span>0/{noOfEnrollment} Enrolled....</span>
            </p>
            <p className="classroom-item-icon-list">
              <Clock size="16" />
              <span>1:30PM - 2:30PM, until 1 Oct, 2021</span>
            </p>
          </div>
        
        </div>

        <div className={`classroom-item-action is-${template}`}>
          {role === "teacher" ? (
            <span>Code: MATHS30</span>
          ) : (
            <span>Next Live Class: 20 Jan, 2022</span>
          )}
          {role === "teacher" ? (
            <Button
              onClick={StartEnrollmentDialogHandler}
              className={
                template === "menu-head"
                  ? "btn btn-primary w-100 mb10"
                  : "btn btn-outline-secondary"
              }
            >
              Start Enrollment
            </Button>
          ) : (
            <Button
              className={
                template === "menu-head"
                  ? "btn btn-primary w-100 mb10"
                  : "btn btn-primary"
              }
            >
              Enroll
            </Button>
          )}
        </div>
      </div>
        </DialogContent>
      </Dialog>

 

      <div className="page-head">
        <h2 className="page-title  mt30  mb10">Classroom</h2>
        {isTeacher && (
          <Button
            onClick={openCreateClassRoomDialog}
            className="btn btn-primary"
          >
            Create New Classroom
          </Button>
        )}
        {!isTeacher && (
          <Button className="btn btn-primary">Join New Classroom</Button>
        )}
      </div>

      <div>
        <FormControl sx={{ m: 1, width: 300 }}>
          {/* <InputLabel id="demo-multiple-chip-label">Chip changed</InputLabel> */}

          {/* <Select
            // labelId="demo-multiple-chip-label"
            id="demo-multiple-chip"
            multiple
            value={selectedGrades}
            onChange={handleChange}
            input={<OutlinedInput id="select-multiple-chip" label="Chip" />}
            renderValue={(selected) => (
              <Box sx={{ display: "flex", flexWrap: "wrap", gap: 0.5 }}>
                {selected.map((value) => (
                  <Chip key={value} label={value} />
                ))}
              </Box>
            )}
            MenuProps={MenuProps}
            variant="outlined"
            className="custom-input-box"
          >
            {names.map((name) => (
              <MenuItem
                key={name}
                value={name}
                style={getStyles(name, selectedGrades, theme)}
              >
                {name}
              </MenuItem>
            ))}
          </Select> */}
        </FormControl>
      </div>

      <div className="classroomlist-wrapper na-grid">
        {classrooms != null && classrooms.length ? (
          classrooms.map((classroom, index) => {
            // <div key={post.id}>{post.title}</div>
            console.log("classroom:", classroom);
            return (
              <Classroomlistclassitem
                key={index}
                status="newclass"
                role="teacher"
                topic={classroom.SectionName}
                noOfEnrollment={classroom.NoOfEnrollment}
                StartEnrollmentDialogHandler={openStartEnrollmentDialog}
              />
            );
          })
        ) : (
          <div>No classroom available..</div>
        )}
        {/* <Classroomlistclassitem
          status="running"
          role={isTeacher ? "teacher" : "student"}
        />
        <Classroomlistclassitem status="enrolling" role="student" />
        <Classroomlistclassitem status="new classroom" />
        <Classroomlistclassitem status="completed" /> */}
      </div>
    </div>
  );
}

export default ClassRoomList;
