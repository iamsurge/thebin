#include <stdio.h>
#include <limits.h>
int r=0;
typedef struct zeton{
    char arrName;
    int pos;
    int value;
}ZETON;

ZETON minimax(int arrS[], int arrW[], int arrE[], int arrN[], int xN, int xS, int xW, int xE, char playerOnTurn, int iN, int iS, int iW, int iE) {
    ZETON zeton;
    zeton.value=0;
    zeton.arrName='p';
    zeton.pos=0;
    ZETON eval;
    ZETON maxEval, minEval;

    if (playerOnTurn == 'A') {

        maxEval.value = INT_MIN;
        if (xN > iN) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', (iN+1), iS, iW, iE);
//            printf("A-> N value: %d, maxValue: %d\n", eval.value ,maxEval.value);
            if (maxEval.value < eval.value) {
                maxEval.value = eval.value;
                zeton.pos = iN;
                zeton.arrName = 'N';
                zeton.value = arrN[iN];
            }
        }
        if (xS > iS) {
             eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', iN, (iS+1), iW, iE);
//            printf("A-> S value: %d, maxValue: %d\n", eval.value ,maxEval.value);
            if (maxEval.value < eval.value) {
                maxEval.value = eval.value;
                zeton.pos = iS;
                zeton.arrName = 'S';
                zeton.value = arrS[iS];
            }
        }
        if (xW > iW) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', iN, iS, (iW+1), iE);
//            printf("A-> W value: %d, maxValue: %d\n", eval.value ,maxEval.value);
            if (maxEval.value < eval.value) {
                maxEval.value = eval.value;
                zeton.pos = iW;
                zeton.arrName = 'W';
                zeton.value = arrW[iW];
            }
        }
        if (xE > iE) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE , 'B', iN, iS, iW, (iE+1));
//            printf("A-> E value: %d, maxValue: %d\n", eval.value ,maxEval.value);
            if (maxEval.value < eval.value) {
                maxEval.value = eval.value;
                zeton.pos = iE;
                zeton.arrName = 'E';
                zeton.value = arrE[iE];
            }
        }
        r++;
        //if(maxEval.value!=INT_MIN)
        //printf("maxEval A: %d\n", maxEval.value);
        if (xN == iN && xE == iE && xS == iS && xW == iW) {

            minEval.value= INT_MAX;
        }
        //return maxEval;
    } else {
        minEval.value = INT_MAX;
        if (xN > iN) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN+1, iS, iW, iE);
//            printf("B-> N value: %d, minValue: %d\n", eval.value ,minEval.value);
            if (minEval.value > eval.value) {
                minEval.value = eval.value;
                zeton.pos = iN;
                zeton.arrName = 'N';
                zeton.value = arrN[iN];
            }
        }
        if (xS > iS) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS+1, iW, iE);
//            printf("B-> S value: %d, minValue: %d\n", eval.value ,minEval.value);
            if (minEval.value > eval.value) {
                minEval.value = eval.value;
                zeton.pos = iS;
                zeton.arrName = 'S';
                zeton.value = arrS[iS];
            }
        }
        if (xW > iW) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS, iW+1, iE);
//            printf("B-> W value: %d, minValue: %d\n", eval.value ,minEval.value);
            if (minEval.value > eval.value) {
                minEval.value = eval.value;
                zeton.pos = iW;
                zeton.arrName = 'W';
                zeton.value = arrW[iW];
            }
        }
        if (xE > iE) {
            eval = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS, iW, iE+1);
//            printf("B-> E value: %d, minValue: %d\n", eval.value ,minEval.value);
            if (minEval.value > eval.value) {
                minEval.value = eval.value;
                zeton.pos = iE;
                zeton.arrName = 'E';
                zeton.value = arrE[iE];
            }
        }
        r++;
        //if(minEval.value!=INT_MAX)
//        printf("minEval B: %d\n", minEval.value);
        if (iN == xN && iE == xE && iS == xS && iW == xW) {
            maxEval.value= INT_MIN;
        }
       // return maxEval;
    }
    //printf("ZETON VYSLEDOK %c: %c[%d]= %d\n", zeton.arrName, zeton.arrName, zeton.pos, zeton.value);
    return zeton;
}

int main() {
    int xN=2, xW=1, xS=3, xE=2, zeton, pocetZetonov=8, skoreA, skoreB;
    int arrN[32]={1, 2};
    int arrS[32]={5};
    int arrW[32]={1,1,1};
    int arrE[32]={1,7};
//    int arrN[32]={2,5};
//    int arrS[32]={1};
//    int arrW[32]={};
//    int arrE[32]={};
    char smer, zatvorka1, zatvorka2;
    int iN=0, iS=0, iW=0, iE=0;

    for(int i=0; i<pocetZetonov; i++){
        if(pocetZetonov%2==1){
            ZETON a = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'A', iN, iS, iW, iE);
            skoreA=skoreA+a.value;
            printf("A berie: %c[%d]= %d\n", a.arrName, a.pos, a.value);
            switch (a.arrName) {
                case 'N':
                    iN++;
                    break;
                case 'S':
                    iS++;
                    break;
                case 'W':
                    iW++;
                    break;
                case 'E':
                    iE++;
                    break;
            }
            printf("Skore A: %d\n", skoreA);

        } else{
            ZETON b = minimax(arrS, arrW, arrE, arrN, xN, xS, xW, xE, 'B', iN, iS, iW, iE);
            skoreB=skoreB+b.value;
            printf("B berie: %c[%d]= %d\n", b.arrName, b.pos, b.value);
            switch (b.arrName) {
                case 'N':
                    iN++;
                    break;
                case 'S':
                    iS++;
                    break;
                case 'W':
                    iW++;
                    break;
                case 'E':
                    iE++;
                    break;
            }
            printf("Skore B: %d\n", skoreB);
        }
    }
    printf("Skore A / skore B: %d / %d\n", skoreA, skoreB);






    //--------------------------------------------NACITANI VSTUPU
    /*for (int i = 0; i < 4; ++i) {
        printf("new cycle\n");
        scanf("%c: %c", &smer, &zatvorka1);
        do {(scanf("%d %c",&zeton, &zatvorka2));
            switch (smer) {
            case 'N':

                if(zatvorka2==','){
                    if (xN>32){ printf("Nespravny vstup 1.\n");}
                    arrN[xN]=zeton;
                    xN++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr n:%d\n", arrN[xN]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 2.\n");}
                break;
            case 'S':

                if(zatvorka2==','){
                    if (xS>32){ printf("Nespravny vstup 3.\n");}
                    arrS[xS]=zeton;
                    xS++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr s:%d\n", arrS[xS]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 4.\n");}
                    break;
            case 'E':

                if(zatvorka2==','){
                    if (xE>32){ printf("Nespravny vstup 5.\n");}
                    arrE[xE]=zeton;
                    xE++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr e:%d\n", arrE[xE]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 6.\n");}
                break;
            case 'W':
                if(zatvorka2==','){
                    if (xW>32){ printf("Nespravny vstup 7.\n");}
                    arrW[xW]=zeton;
                    xW++;}
                else if(zatvorka2=='}'){ break;}
                printf("arr w:%d\n", arrW[xW]);
                if(zatvorka2!=',' && zatvorka2!='}'){ printf("Nespravny vstup 8.\n");}
                    break;
            default:
                printf("Nespravny vstup 9.\n");return 0;
            }
        }
        while (zatvorka2!='}');}
    //if(flagS==0 || flagE==0 || flagN==0 || flagW==0){printf("Nespravny vstup.\n");return 0;}
    for (int i = 0; i < xS; ++i) {
        printf("array S:%d\n", arrS[i]);
    }
    for (int i = 0; i < xN; ++i) {
        printf("array N:%d\n", arrN[i]);
    }
    for (int i = 0; i < xW; ++i) {
        printf("array W:%d\n", arrW[i]);
    }
    for (int i = 0; i < xE; ++i) {
        printf("array E:%d\n", arrE[i]);
    }
*/
    return 0;
}
