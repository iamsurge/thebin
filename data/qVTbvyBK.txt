// Order.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
// Microsoft Visual Studio Community 2022 Version 
#include <iostream>
#include <string>
using namespace std;
class cOrder {
private:
    string sItem[10];
    string sSize[10];
    float fPrice[10];
    int iQuantity[10];
    float fSubTotal[10];
protected:
    void SetUp() {
        sItem[0] = "Coffee";
        sSize[0] = "Small";
        fPrice[0] = 50.00;
        iQuantity[0] = 0;
        fSubTotal[0] = 0.0;
        //
        sItem[1] = "Coffee";
        sSize[1] = "Medium";
        fPrice[1] = 70.00;
        iQuantity[1] = 0;
        fSubTotal[1] = 0.0;
        //
        sItem[2] = "Coffee";
        sSize[2] = "Large";
        fPrice[2] = 50.00;
        iQuantity[2] = 0;
        fSubTotal[2] = 0.0;
        //
        sItem[3] = "MilkTea";
        sSize[3] = "Small";
        fPrice[3] = 40.00;
        iQuantity[3] = 0;
        fSubTotal[3] = 0.0;
        //
        sItem[4] = "MilkTea";
        sSize[4] = "Medium";
        fPrice[4] = 50.00;
        iQuantity[4] = 0;
        fSubTotal[4] = 0.0;
        //
        sItem[5] = "MilkTea";
        sSize[5] = "Large";
        fPrice[5] = 60.00;
        iQuantity[5] = 0;
        fSubTotal[5] = 0.0;
        //
        sItem[6] = "FruitTea";
        sSize[6] = "Small";
        fPrice[6] = 35.00;
        iQuantity[6] = 0;
        fSubTotal[6] = 0.0;
        //
        sItem[7] = "FruitTea";
        sSize[7] = "Medium";
        fPrice[7] = 45.00;
        iQuantity[7] = 0;
        fSubTotal[7] = 0.0;
        //
        sItem[8] = "FruitTea";
        sSize[8] = "Large";
        fPrice[8] = 55.00;
        iQuantity[8] = 0;
        fSubTotal[8] = 0.0;
        //
    };
public:
    cOrder() { SetUp(); };
    ~cOrder() {};
    void ShowOrder() {
        system("cls"); // clear display
        cout.setf(ios::fixed); // for display formatting
        cout.precision(2);  // for display formatting
        cout << "Item# \tMenu \t\t\tSize \tPrice \tQty Ordered \tSub-total\n";
        for (int iIndex = 0; iIndex < 9; iIndex++) {
            cout << iIndex << "\t";
            cout << sItem[iIndex];
            //
            // Since FruitTea is longer then rest, only need two tabs to
            // format corectly
            if (iIndex > 5) cout << "\t\t";
            else cout << "\t\t\t";
            cout << sSize[iIndex] << "\t";
            cout << fPrice[iIndex] << "\t";
            cout << iQuantity[iIndex] << "\t\t";
            cout << fSubTotal[iIndex];
            cout << "\n";
        }
    }
    void MakeOrder() {
        cout << "Which item to order (0-8) ? : ";
        int iItemNumber;
        cin >> iItemNumber;
        if ((iItemNumber < 0) || (iItemNumber > 8) ) {
            cout << " *** invalid item number *** ";
            return;
        }
        else {
            int iAmount;
            cout << "How many? : ";
            cin >> iAmount;
            iQuantity[iItemNumber] = iAmount;
            fSubTotal[iItemNumber] = iQuantity[iItemNumber] * fPrice[iItemNumber];
        }
    }
    float GetSubtotal(int iIndex) {
        return fSubTotal[iIndex];
    }
};
class cMenu {
private:
    cOrder MyOrder;
protected:
public:
    cMenu() { Do(); }
    ~cMenu() {};
    void Do() {
        string MyCommand = "???";
        while (MyCommand != "Quit") {
            cout << "Help for list of commands.  Your command? : ";
            cin >> MyCommand;
            if (MyCommand == "Help") Help();
            if (MyCommand == "Finish") Finish();
            if (MyCommand == "Order") Order();
            if (MyCommand == "Quit") exit(0);
            if (MyCommand == "Show") ShowOrder();
            cin.ignore();  // clear cin for next command
            cin.clear();
        }
    }
    void Help() {
        cout << "Help - show this list.\n";
        cout << "Finish - finish order.\n";
        cout << "Order - order an item.\n";
        cout << "Quit - exit application.\n";
        cout << "Show - show the order.\n";
    }
    void Finish() {
        float fGrandTotal = 0;
        for (int iIndex = 0; iIndex < 9; iIndex++) {
            fGrandTotal += MyOrder.GetSubtotal(iIndex);
       }
        float fPayment;
        cin.ignore();
        cin.clear();
        cout << "Your payment? : ";
        cin >> fPayment;
        if (fPayment >= fGrandTotal) {
            cout << "Your change is : " << fPayment - fGrandTotal << "\n\n";
        }
        else {
            cout << "Not enough payment you are short : " << fPayment - fGrandTotal << "\n\n";
        }
    }
    void Order() {
        MyOrder.MakeOrder();
    }
    void ShowOrder() {
        MyOrder.ShowOrder();
    }
};
int main()
{
    cout << "Kier Reyes - order\n\n";
    cMenu MyMenu;
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file
