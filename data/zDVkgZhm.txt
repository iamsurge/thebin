sub_1421D8240(*(_QWORD *)(a1 + 464), *(float *)&dword_1438701DC); - Gravity

48 8B C4 55 53 56 57 41 54 41 55 41 56 41 57 48 8D 6C 24 98 48 81 EC 68 01 00 00 48 C7 45 A0

void __fastcall sub_141B4C900(__int64 a1, __int64 a2)
{
  __m128i si128; // xmm1
  __m128i v5; // xmm2
  __m128i v6; // xmm1
  __m128i v7; // xmm2
  __m128i v8; // xmm1
  __m128i v9; // xmm2
  __m128i v10; // xmm3
  __int64 v11; // rax
  __int64 v12; // rax
  int v13; // edi
  __int64 v14; // rax
  __int64 v15; // rcx
  _BYTE *v16; // rdi
  _DWORD *v17; // r8
  _QWORD *v18; // rdx
  __int64 v19; // rax
  __m128i *v20; // rcx
  __int64 v21; // r9
  __m128i v22; // xmm1
  __m128i v23; // xmm2
  __m128i v24; // xmm1
  __m128i v25; // xmm2
  __m128i v26; // xmm1
  __m128i v27; // xmm2
  __m128i v28; // xmm1
  __m128i v29; // xmm2
  __m128i v30; // xmm3
  __m128i v31; // xmm1
  __m128i v32; // xmm2
  __m128i v33; // xmm3
  __int64 v34; // r14
  __int64 v35; // rbx
  int v36; // edx
  int v37; // ecx
  int v38; // er8
  int v39; // er9
  __int64 v40; // rax
  __int64 v41; // rax
  int v42; // edx
  int v43; // ecx
  int v44; // er8
  int v45; // er9
  __int64 v46; // rdi
  __int64 v47; // rbx
  __int64 v48; // rax
  __int64 v49; // rax
  __int64 v50; // rdi
  __int64 v51; // rax
  __int64 v52; // rax
  __int64 v53; // rax
  void *v54; // rax
  void *v55; // rdi
  __int64 v56; // rax
  __int64 v57; // rbx
  __int64 v58; // rax
  __int64 v59; // rax
  __int64 v60; // rax
  __int64 v61; // rax
  unsigned int v62; // ecx
  int v63; // eax
  __int64 v64; // rax
  __int64 v65; // rax
  int v66; // eax
  __int64 v67; // rax
  unsigned int v68; // ecx
  int v69; // eax
  __int64 v70; // rax
  __int64 v71; // rax
  __m128 *v72; // rbx
  __int64 v73; // rax
  int v74; // er9
  __int64 v75; // rdi
  int v76; // er8
  __int64 v77; // rax
  __int64 v78; // rdi
  __m128 v79; // xmm9
  __m128 v80; // xmm8
  __m128 v81; // xmm0
  __m128 v82; // xmm6
  __m128 v83; // xmm0
  __m128 v84; // xmm7
  __m128 v85; // xmm0
  __m128 v86; // xmm3
  __m128 v87; // xmm0
  __m128 v88; // xmm3
  __m128 v89; // xmm9
  int v90; // eax
  int v91; // eax
  int v92; // er9
  unsigned __int64 i; // rdx
  char v94; // cl
  int v95; // er9
  unsigned __int64 j; // rdx
  char v97; // di
  int v98; // er9
  unsigned __int64 k; // rdx
  char v100; // di
  int v101; // er9
  unsigned __int64 m; // rdx
  char v103; // di
  float v104; // xmm1_4
  __int64 v105; // rcx
  __m128 *v106; // rax
  __m128 v107; // xmm2
  __int64 v108; // rcx
  int v109; // eax
  int jj; // er14
  __int64 v111; // rdi
  __int64 *v112; // r12
  __int64 v113; // rax
  __int64 v114; // rdx
  int kk; // er14
  __int64 v116; // rdi
  __int64 *v117; // r12
  __int64 v118; // rax
  __int64 v119; // rdx
  __int64 v120; // r14
  __int64 *v121; // r12
  __int64 v122; // rdx
  __int64 v123; // rax
  __int64 v124; // r14
  __int64 *v125; // r12
  __int64 v126; // rcx
  __int64 v127; // rax
  unsigned __int64 n; // rdx
  char v129; // cl
  unsigned __int64 ii; // rdx
  char v131; // cl
  __m128 v132; // [rsp+40h] [rbp-C0h] BYREF
  __int128 v133; // [rsp+50h] [rbp-B0h] BYREF
  __int128 v134; // [rsp+60h] [rbp-A0h] BYREF
  __int128 v135; // [rsp+70h] [rbp-90h]
  __int128 v136; // [rsp+80h] [rbp-80h]
  __int128 v137; // [rsp+90h] [rbp-70h]
  __int64 v138; // [rsp+A0h] [rbp-60h]
  __int64 v139; // [rsp+1B0h] [rbp+B0h] BYREF
  int v140; // [rsp+1B8h] [rbp+B8h] BYREF
  int v141; // [rsp+1C0h] [rbp+C0h] BYREF
  __int64 v142; // [rsp+1C8h] [rbp+C8h] BYREF

  v138 = -2i64;
  *(_DWORD *)(a1 + 396) = -1082130432;
  *(_DWORD *)(a1 + 392) = 0;
  si128 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
  v5 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
  *(__m128i *)(a1 + 528) = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
  *(__m128i *)(a1 + 544) = si128;
  *(__m128i *)(a1 + 560) = v5;
  *(_OWORD *)(a1 + 576) = *(_OWORD *)&xmmword_1429E8520;
  *(_OWORD *)(a1 + 592) = *(_OWORD *)&xmmword_1429E8520;
  v6 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
  v7 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
  *(__m128i *)(a1 + 23520) = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
  *(__m128i *)(a1 + 23536) = v6;
  *(__m128i *)(a1 + 23552) = v7;
  *(_OWORD *)(a1 + 23568) = *(_OWORD *)&xmmword_1429E8520;
  *(_OWORD *)(a1 + 23584) = *(_OWORD *)&xmmword_1429E8520;
  v8 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
  v9 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
  v10 = _mm_load_si128((const __m128i *)&xmmword_143FAB920);
  *(__m128i *)(a1 + 21408) = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
  *(__m128i *)(a1 + 21424) = v8;
  *(__m128i *)(a1 + 21440) = v9;
  *(__m128i *)(a1 + 21456) = v10;
  v11 = sub_14031D970(&unk_143891890);
  *(_DWORD *)(a1 + 304) = *(_DWORD *)sub_1424D0CA0(&v139, *(unsigned int *)(v11 + 2487876), "CharacterRoot");
  v12 = sub_14031D970(&unk_143891890);
  *(_DWORD *)(a1 + 648) = *(_DWORD *)sub_1424D0CA0(&v139, *(unsigned int *)(v12 + 2487876), "CharacterEquipment");
  v134 = xmmword_143FAB8F0;
  v135 = xmmword_143FAB900;
  v136 = xmmword_143FAB910;
  v137 = xmmword_143FAB920;
  v13 = *(_DWORD *)(a1 + 21304);
  v14 = sub_14031D970(&unk_143891890);
  v15 = *(unsigned int *)sub_1422CFD00((unsigned int)&v139, *(_DWORD *)(v14 + 2487876), v13, (unsigned int)&v134, 0);
  *(_DWORD *)(a1 + 21308) = v15;
  *(_QWORD *)(a1 + 21312) = sub_140B83500(v15, 0i64);
  *(_WORD *)(a1 + 13150) = 0;
  *(_WORD *)(a1 + 12908) = 0;
  *(_BYTE *)(a1 + 21666) = 0;
  *(_BYTE *)(a1 + 21664) = 0;
  *(_BYTE *)(a1 + 13152) = 0;
  *(_BYTE *)(a1 + 21662) = 0;
  *(_BYTE *)(a1 + 21660) = 0;
  *(_BYTE *)(a1 + 12281) = 0;
  *(_DWORD *)(a1 + 12912) = 0;
  sub_141C08A90(a1 + 11840);
  v16 = (_BYTE *)(a1 + 11714);
  v17 = (_DWORD *)(a1 + 22696);
  v18 = (_QWORD *)(a1 + 23424);
  v19 = a1 + 11136;
  v20 = (__m128i *)(a1 + 11328);
  v21 = 2i64;
  do
  {
    v22 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
    v23 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
    *(__m128i *)(v19 - 160) = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
    *(__m128i *)(v19 - 144) = v22;
    *(__m128i *)(v19 - 128) = v23;
    *(_OWORD *)(v19 - 112) = *(_OWORD *)&xmmword_1429E8520;
    *(_OWORD *)(v19 - 96) = *(_OWORD *)&xmmword_1429E8520;
    v24 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
    v25 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
    *(__m128i *)v19 = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
    *(__m128i *)(v19 + 16) = v24;
    *(__m128i *)(v19 + 32) = v25;
    *(_OWORD *)(v19 + 48) = *(_OWORD *)&xmmword_1429E8520;
    *(_OWORD *)(v19 + 64) = *(_OWORD *)&xmmword_1429E8520;
    v26 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
    v27 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
    *(__m128i *)(v19 + 288) = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
    *(__m128i *)(v19 + 304) = v26;
    *(__m128i *)(v19 + 320) = v27;
    *(_OWORD *)(v19 + 336) = *(_OWORD *)&xmmword_1429E8520;
    *(_OWORD *)(v19 + 352) = *(_OWORD *)&xmmword_1429E8520;
    v28 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
    v29 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
    v30 = _mm_load_si128((const __m128i *)&xmmword_143FAB920);
    v20[-2] = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
    v20[-1] = v28;
    *v20 = v29;
    v20[1] = v30;
    v31 = _mm_load_si128((const __m128i *)&xmmword_143FAB900);
    v32 = _mm_load_si128((const __m128i *)&xmmword_143FAB910);
    v33 = _mm_load_si128((const __m128i *)&xmmword_143FAB920);
    v20[16] = _mm_load_si128((const __m128i *)&xmmword_143FAB8F0);
    v20[17] = v31;
    v20[18] = v32;
    v20[19] = v33;
    *(v16 - 2) = 0;
    *v16 = 0;
    *v18 = 0i64;
    v18[2] = 0i64;
    *(v18 - 94) = 0i64;
    *(v17 - 2) = 0x3FFFF;
    *v17 = 0x3FFFF;
    v17[122] = -1054867456;
    v16[11478] = 0;
    ++v18;
    ++v17;
    v19 += 80i64;
    v20 += 4;
    ++v16;
    --v21;
  }
  while ( v21 );
  *(_BYTE *)(a1 + 11826) = 1;
  v34 = *((_QWORD *)NtCurrentTeb()->ThreadLocalStoragePointer + (unsigned int)TlsIndex);
  if ( dword_143C96438 > *(_DWORD *)(v34 + 140) )
  {
    Init_thread_header(&dword_143C96438);
    if ( dword_143C96438 == -1 )
    {
      sub_140301870(&unk_14389A3F0);
      atexit(sub_1429B1110);
      Init_thread_footer(&dword_143C96438);
    }
  }
  sub_14210AB70(*(unsigned int *)(a1 + 304), 0i64, v17);
  if ( dword_143C96438 > *(_DWORD *)(v34 + 140) )
  {
    Init_thread_header(&dword_143C96438);
    if ( dword_143C96438 == -1 )
    {
      sub_140301870(&unk_14389A3F0);
      atexit(sub_1429B1110);
      Init_thread_footer(&dword_143C96438);
    }
  }
  v35 = sub_140DAA1E0(*(unsigned int *)(a1 + 304));
  *(_QWORD *)(a1 + 21296) = v35;
  v40 = sub_1402E8890(v37, v36, v38, v39);
  v41 = sub_1407747C0(v40, "cGcPlayerComponent");
  v46 = v41;
  if ( v41 )
  {
    sub_142128B90(v35, v41);
    if ( !*(_BYTE *)(v46 + 44) )
    {
      (*(void (__fastcall **)(__int64))(*(_QWORD *)v46 + 120i64))(v46);
      *(_BYTE *)(v46 + 44) = 1;
    }
    *(_QWORD *)(v46 + 80) = a1;
    *(_BYTE *)(v46 + 47) = 1;
  }
  v47 = *(_QWORD *)(a1 + 21296);
  v48 = sub_1402E8890(v43, v42, v44, v45);
  v49 = sub_1407747C0(v48, "cGcRepairTechComponent");
  v50 = v49;
  if ( v49 )
  {
    sub_142128B90(v47, v49);
    *(_BYTE *)(v50 + 47) = 1;
  }
  v51 = sub_14031CF50(&unk_143891890);
  sub_141FD6710(v51, &v139, a1, "Player");
  *(_QWORD *)(a1 + 728) = v139;
  *(_DWORD *)(a1 + 336) = 0;
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
  *(_QWORD *)(a1 + 456) = a2;
  sub_14210A980(&v139, 0i64);
  *(_QWORD *)(a1 + 472) = v139;
  *(_DWORD *)(a1 + 21920) = 0;
  *(_QWORD *)(a1 + 21904) = *(_QWORD *)(a1 + 21896);
  *(_BYTE *)(a1 + 21288) = 0;
  sub_141C08C30(a1 + 22000);
  sub_141BD14D0(a1 + 12560, *(_QWORD *)(a1 + 456), (unsigned int)&xmmword_14386FD90 + 12, 126, 127, 1);
  v52 = sub_14031CFE0(&unk_143891890);
  v53 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v52 + 184i64))(v52, 4i64);
  *(_QWORD *)(a1 + 448) = v53;
  sub_140B8B630(v53, a1);
  v54 = (void *)sub_142213210(496i64, &Src, 0i64, &Src);
  v55 = v54;
  v139 = (__int64)v54;
  if ( v54 )
  {
    memset(v54, 0, 0x1F0ui64);
    v56 = sub_141B198D0(v55);
  }
  else
  {
    v56 = 0i64;
  }
  *(_QWORD *)(a1 + 440) = v56;
  *(_QWORD *)(v56 + 8) = a1;
  *(_DWORD *)(v56 + 52) = 0x3FFFF;
  *(_DWORD *)(v56 + 56) = 0x3FFFF;
  *(_DWORD *)(v56 + 60) = 0x3FFFF;
  *(_DWORD *)(v56 + 64) = 0x3FFFF;
  *(_DWORD *)(v56 + 68) = 0x3FFFF;
  *(_QWORD *)(v56 + 416) = 0i64;
  v57 = *(_QWORD *)(a1 + 440);
  v58 = sub_14031CFE0(&unk_143891890);
  v59 = (*(__int64 (__fastcall **)(__int64, __int64))(*(_QWORD *)v58 + 184i64))(v58, 3i64);
  *(_QWORD *)(v57 + 16) = v59;
  *(_QWORD *)(v59 + 16) = *(_QWORD *)(v57 + 8);
  *(_OWORD *)(v57 + 320) = *(_OWORD *)&xmmword_1429E8520;
  *(_OWORD *)(v57 + 192) = xmmword_143FAB8F0;
  *(_OWORD *)(v57 + 208) = xmmword_143FAB900;
  *(_OWORD *)(v57 + 224) = xmmword_143FAB910;
  *(_OWORD *)(v57 + 240) = xmmword_143FAB920;
  *(_BYTE *)(v57 + 352) = 0;
  *(_DWORD *)(v57 + 160) = 0x3FFFF;
  *(_DWORD *)(v57 + 176) = 0x3FFFF;
  *(_OWORD *)(v57 + 336) = *(_OWORD *)&xmmword_1429E8520;
  *(_OWORD *)(v57 + 256) = xmmword_143FAB8F0;
  *(_OWORD *)(v57 + 272) = xmmword_143FAB900;
  *(_OWORD *)(v57 + 288) = xmmword_143FAB910;
  *(_OWORD *)(v57 + 304) = xmmword_143FAB920;
  *(_DWORD *)(v57 + 353) = 0;
  *(_DWORD *)(v57 + 164) = 0x3FFFF;
  *(_DWORD *)(v57 + 180) = 0x3FFFF;
  *(_DWORD *)(v57 + 72) = 0x3FFFF;
  *(_QWORD *)(v57 + 24) = 0i64;
  *(_QWORD *)(v57 + 32) = 0i64;
  *(_BYTE *)(v57 + 364) = 1;
  *(_DWORD *)(v57 + 360) = 4;
  *(_DWORD *)(v57 + 444) = 1065353216;
  *(_DWORD *)(v57 + 440) = 0;
  sub_141B3F3C0(v57);
  *(_QWORD *)(v57 + 464) = 0i64;
  *(_QWORD *)(v57 + 472) = 0i64;
  v60 = sub_14031D220((__int64)&unk_143891890);
  if ( (unsigned __int8)sub_1407F4FD0(v60 + 32) )
  {
    v67 = sub_14031D970(&unk_143891890);
    if ( !*(_DWORD *)(v67 + 2457096)
      || (v68 = *(_DWORD *)(v67 + 2458148), v68 <= 0xC) && (v69 = 7138, _bittest(&v69, v68)) )
    {
      v70 = sub_14031D970(&unk_143891890);
      if ( !*(_DWORD *)(v70 + 2457096)
        || ((*(_DWORD *)(v70 + 2458148) - 9) & 0xFFFFFFFD) != 0
        || (unsigned __int8)sub_14031DD90(&unk_143891890) )
      {
        v71 = sub_14031CFE0(&unk_143891890);
        sub_140B89060(v71, 6i64);
      }
    }
    *(_DWORD *)(a1 + 22368) = 1;
    v66 = 1;
  }
  else
  {
    v61 = sub_14031D970(&unk_143891890);
    if ( !*(_DWORD *)(v61 + 2457096)
      || (v62 = *(_DWORD *)(v61 + 2458148), v62 <= 0xC) && (v63 = 7138, _bittest(&v63, v62)) )
    {
      v64 = sub_14031D970(&unk_143891890);
      if ( !*(_DWORD *)(v64 + 2457096)
        || ((*(_DWORD *)(v64 + 2458148) - 9) & 0xFFFFFFFD) != 0
        || (unsigned __int8)sub_14031DD90(&unk_143891890) )
      {
        v65 = sub_14031CFE0(&unk_143891890);
        sub_140B89060(v65, 4i64);
      }
    }
    *(_DWORD *)(a1 + 22368) = 0;
    v66 = 0;
  }
  *(_DWORD *)(a1 + 22372) = v66;
  v72 = (__m128 *)sub_14031D220((__int64)&unk_143891890);
  v139 = 240i64;
  v73 = xmmword_1451B2A90(0i64, &v139, 0i64);
  v75 = v73;
  v76 = (int)qword_1451B2AA0;
  if ( qword_1451B2AA0 )
    qword_1451B2AA0(v73, "cTkHavokCharacterController");
  v142 = v75;
  if ( v75 )
  {
    memset((void *)(v75 + 24), 0, 0xD8ui64);
    *(_QWORD *)v75 = &hkReferencedObject::`vftable';
    *(_QWORD *)(v75 + 8) = 0xFFFFFFFFi64;
    *(_QWORD *)(v75 + 16) = 1i64;
    *(_QWORD *)v75 = &hknpAction::`vftable';
    *(_QWORD *)(v75 + 24) = 0i64;
    *(_QWORD *)v75 = &cTkHavokCharacterController::`vftable';
    v132.m128_u64[0] = v75 + 32;
    *(_QWORD *)(v75 + 112) = 0i64;
    *(_DWORD *)(v75 + 120) = 0;
    *(_DWORD *)(v75 + 124) = 0x80000000;
    *(_QWORD *)(v75 + 160) = 0i64;
    *(_OWORD *)(v75 + 176) = *(_OWORD *)&xmmword_1429E8520;
    *(_OWORD *)(v75 + 192) = *(_OWORD *)&xmmword_1429E8520;
    *(_BYTE *)(v75 + 238) = 0;
  }
  else
  {
    v75 = 0i64;
  }
  *(_QWORD *)(a1 + 464) = v75;
  sub_1421CF220(v75, *(_DWORD *)(a1 + 304), v76, v74, dword_143870178, 1, 0);
  v132 = _mm_unpacklo_ps(
           _mm_unpacklo_ps(v72[30799], _mm_shuffle_ps(v72[30799], v72[30799], 170)),
           _mm_unpacklo_ps(_mm_shuffle_ps(v72[30799], v72[30799], 85), (__m128)0x3F800000u));
  sub_1421D7B00(*(_QWORD *)(a1 + 464), &v132);
  v77 = sub_1421D5580(*(_QWORD *)(a1 + 464));
  sub_1421ABE90(v77, 128i64, 49143i64);
  sub_1421D1750(*(_QWORD *)(a1 + 464), 0);
  *(_QWORD *)(a1 + 480) = 0i64;
  sub_14210A980(&v139, 0i64);
  *(_QWORD *)(a1 + 400) = v139;
  sub_14210A980(&v139, 0i64);
  *(_QWORD *)(a1 + 488) = v139;
  v78 = *(_QWORD *)sub_14210A980(&v139, *(_QWORD *)(a1 + 21296));
  sub_141B07190(a1 + 16, a1);
  *(_BYTE *)(a1 + 104) = 1;
  *(_QWORD *)(a1 + 96) = v78;
  v79 = _mm_unpacklo_ps(
          _mm_unpacklo_ps(v72[30799], _mm_shuffle_ps(v72[30799], v72[30799], 170)),
          _mm_unpacklo_ps(_mm_shuffle_ps(v72[30799], v72[30799], 85), (__m128)0x3F800000u));
  v80 = _mm_mul_ps((__m128)xmmword_1429FE210, v79);
  v81 = v80;
  v81.m128_f32[0] = floorf(v80.m128_f32[0]);
  v82 = _mm_unpacklo_ps(
          _mm_unpacklo_ps(v81, _mm_shuffle_ps(*(__m128 *)&xmmword_1429E8520, *(__m128 *)&xmmword_1429E8520, 170)),
          _mm_unpacklo_ps(
            _mm_shuffle_ps(*(__m128 *)&xmmword_1429E8520, *(__m128 *)&xmmword_1429E8520, 85),
            (__m128)0x3F800000u));
  v83 = _mm_shuffle_ps(v80, v80, 85);
  v83.m128_f32[0] = floorf(v83.m128_f32[0]);
  v84 = _mm_unpacklo_ps(_mm_unpacklo_ps(v82, _mm_shuffle_ps(v82, v82, 170)), _mm_unpacklo_ps(v83, (__m128)0x3F800000u));
  v85 = _mm_shuffle_ps(v80, v80, 170);
  v85.m128_f32[0] = floorf(v85.m128_f32[0]);
  v86 = _mm_unpacklo_ps(v84, v85);
  v87 = _mm_unpacklo_ps(_mm_shuffle_ps(v84, v84, 85), (__m128)0x3F800000u);
  v88 = _mm_mul_ps(_mm_unpacklo_ps(v86, v87), (__m128)xmmword_1429FE240);
  v89 = _mm_sub_ps(v79, v88);
  *(__m128 *)(a1 + 12928) = v89;
  *(__m128 *)(a1 + 12944) = v88;
  *(__m128 *)(a1 + 12784) = v89;
  *(__m128 *)(a1 + 12800) = v88;
  *(_BYTE *)(a1 + 12272) = 0;
  *(_BYTE *)(a1 + 21500) = 0;
  *(_BYTE *)(a1 + 12274) = 0;
  *(_BYTE *)(a1 + 12280) = 0;
  *(_QWORD *)(a1 + 10752) = 0i64;
  *(_QWORD *)(a1 + 21632) = 0i64;
  *(_DWORD *)(a1 + 21640) = 0;
  *(_DWORD *)(a1 + 21280) = 1065353216;
  v90 = sub_14031D220((__int64)&unk_143891890);
  sub_1407EC670(v90 + 32, 97, 0, 0, 0, 0, 0i64, 0i64);
  if ( v87.m128_f32[0] <= 0.0 )
  {
    v87.m128_i32[0] = 0;
  }
  else
  {
    v91 = sub_14031D220((__int64)&unk_143891890);
    sub_1407EC670(v91 + 32, 98, 0, 0, 0, 0, 0i64, 0i64);
  }
  *(_DWORD *)(a1 + 13044) = v87.m128_i32[0];
  *(_DWORD *)(a1 + 12720) = -8388609;
  *(_DWORD *)(a1 + 12752) = -8388609;
  *(_DWORD *)(a1 + 12816) = -8388609;
  *(_DWORD *)(a1 + 496) = -8388609;
  *(_DWORD *)(a1 + 500) = -8388609;
  *(_DWORD *)(a1 + 13052) = dword_14386F760;
  *(_DWORD *)(a1 + 13056) = dword_14386F74C;
  *(_DWORD *)(a1 + 13060) = dword_14386F764;
  *(_BYTE *)(a1 + 13084) = 0;
  *(_QWORD *)(a1 + 13064) = 0i64;
  *(_QWORD *)(a1 + 13072) = 0i64;
  *(_DWORD *)(a1 + 13080) = 0;
  *(_BYTE *)(a1 + 13100) = 0;
  *(_QWORD *)(a1 + 13092) = 0i64;
  sub_141BD01B0(a1 + 12304, a1);
  *(_DWORD *)(a1 + 13144) = 0;
  *(_BYTE *)(a1 + 13148) = 0;
  *(_BYTE *)(a1 + 13150) = 0;
  *(_DWORD *)(a1 + 12876) = 0;
  *(__m128 *)(a1 + 12880) = _mm_unpacklo_ps(
                              _mm_unpacklo_ps(v72[30800], _mm_shuffle_ps(v72[30800], v72[30800], 170)),
                              _mm_unpacklo_ps(_mm_shuffle_ps(v72[30800], v72[30800], 85), (__m128)0x3F800000u));
  *(_OWORD *)(a1 + 12960) = *(_OWORD *)&xmmword_1429E8520;
  *(_QWORD *)(a1 + 12976) = *(_QWORD *)(a1 + 12960);
  *(_QWORD *)(a1 + 12984) = *(_QWORD *)(a1 + 12968);
  *(_QWORD *)(a1 + 12992) = *(_QWORD *)(a1 + 12976);
  *(_QWORD *)(a1 + 13000) = *(_QWORD *)(a1 + 12984);
  *(_QWORD *)(a1 + 13008) = *(_QWORD *)(a1 + 12992);
  *(_QWORD *)(a1 + 13016) = *(_QWORD *)(a1 + 13000);
  *(_DWORD *)(a1 + 12900) = 0;
  *(_BYTE *)(a1 + 12273) = 1;
  *(_DWORD *)(a1 + 13032) = -1;
  *(_QWORD *)(a1 + 21472) = 0i64;
  *(_DWORD *)(a1 + 21480) = -1082130432;
  *(_QWORD *)(a1 + 21488) = 0i64;
  *(_DWORD *)(a1 + 21484) = 1065353216;
  *(_DWORD *)(a1 + 21496) = 0;
  *(_DWORD *)(a1 + 10960) = 0;
  *(_WORD *)(a1 + 21662) = 0;
  v92 = sub_14031CFE0(&unk_143891890);
  v133 = xmmword_1429E8540;
  v132 = 0ui64;
  for ( i = 0i64; i < 8; ++i )
  {
    v94 = aJetpack_0[i];
    v132.m128_i8[i] = v94;
    if ( (unsigned __int8)(v94 - 97) <= 0x19u )
      v132.m128_i8[i] = v94 - 32;
  }
  if ( i < 0x10 )
    memset((char *)&v132 + i, 0, 16 - i);
  *(_QWORD *)(a1 + 13112) = *(_QWORD *)sub_140B8BD00(v92, (unsigned int)&v139, (unsigned int)&v132, v92, (__int64)&v133);
  v95 = sub_14031CFE0(&unk_143891890);
  v133 = xmmword_1429E8540;
  v132 = 0ui64;
  for ( j = 0i64; j < 8; ++j )
  {
    v97 = aRunning_0[j];
    v132.m128_i8[j] = v97;
    if ( (unsigned __int8)(v97 - 97) <= 0x19u )
      v132.m128_i8[j] = v97 - 32;
  }
  if ( j < 0x10 )
    memset((char *)&v132 + j, 0, 16 - j);
  *(_QWORD *)(a1 + 13128) = *(_QWORD *)sub_140B8BD00(v95, (unsigned int)&v139, (unsigned int)&v132, v95, (__int64)&v133);
  v98 = sub_14031CFE0(&unk_143891890);
  v133 = xmmword_1429E8540;
  v132 = 0ui64;
  for ( k = 0i64; k < 0xC; ++k )
  {
    v100 = aRocketboots[k];
    v132.m128_i8[k] = v100;
    if ( (unsigned __int8)(v100 - 97) <= 0x19u )
      v132.m128_i8[k] = v100 - 32;
  }
  if ( k < 0x10 )
    memset((char *)&v132 + k, 0, 16 - k);
  *(_QWORD *)(a1 + 13120) = *(_QWORD *)sub_140B8BD00(v98, (unsigned int)&v139, (unsigned int)&v132, v98, (__int64)&v133);
  v101 = sub_14031CFE0(&unk_143891890);
  v133 = xmmword_1429E8540;
  v132 = 0ui64;
  for ( m = 0i64; m < 0xF; ++m )
  {
    v103 = aTeleportatlass[m];
    v132.m128_i8[m] = v103;
    if ( (unsigned __int8)(v103 - 97) <= 0x19u )
      v132.m128_i8[m] = v103 - 32;
  }
  if ( m < 0x10 )
    memset((char *)&v132 + m, 0, 16 - m);
  *(_QWORD *)(a1 + 13136) = *(_QWORD *)sub_140B8BD00(
                                         v101,
                                         (unsigned int)&v139,
                                         (unsigned int)&v132,
                                         v101,
                                         (__int64)&v133);
  *(_QWORD *)(a1 + 21784) = 0i64;
  *(_QWORD *)(a1 + 21792) = 0i64;
  *(_QWORD *)(a1 + 21800) = 0i64;
  *(_QWORD *)(a1 + 21808) = 0i64;
  *(_DWORD *)(a1 + 13088) = 0;
  *(_BYTE *)(a1 + 21828) = 0;
  *(_DWORD *)(a1 + 21824) = 0;
  sub_1421D8240(*(_QWORD *)(a1 + 464), *(float *)&dword_1438701DC);
  sub_141BD1580(a1 + 112, a1);
  sub_141C09C30(a1 + 13168);
  sub_141BD1250(a1 + 13600, a1);
  sub_141BD14B0(a1 + 20768, a1);
  *(_DWORD *)(a1 + 21264) = -1082130432;
  *(_DWORD *)(a1 + 21268) = 0;
  *(float *)(a1 + 21268) = dword_14389A2A4;
  *(_DWORD *)(a1 + 21264) = 0;
  v104 = *(float *)&dword_14386DFE8;
  *(_DWORD *)(a1 + 21968) = dword_14386DFE8;
  *(float *)(a1 + 21972) = v104 * v104;
  *(_WORD *)(a1 + 21976) = 1;
  if ( dword_143FABF18 > *(_DWORD *)(v34 + 140) )
  {
    Init_thread_header(&dword_143FABF18);
    if ( dword_143FABF18 == -1 )
    {
      qword_143FABF08 = 0i64;
      qword_143FABF10 = 0i64;
      for ( n = 0i64; n < 9; ++n )
      {
        v129 = aLighting[n];
        *((_BYTE *)&qword_143FABF08 + n) = v129;
        if ( (unsigned __int8)(v129 - 97) <= 0x19u )
          *((_BYTE *)&qword_143FABF08 + n) = v129 - 32;
      }
      if ( n < 0x10 )
        memset((char *)&qword_143FABF08 + n, 0, 16 - n);
      Init_thread_footer(&dword_143FABF18);
    }
  }
  if ( dword_143FABF30 > *(_DWORD *)(v34 + 140) )
  {
    Init_thread_header(&dword_143FABF30);
    if ( dword_143FABF30 == -1 )
    {
      qword_143FABF20 = 0i64;
      qword_143FABF28 = 0i64;
      for ( ii = 0i64; ii < 7; ++ii )
      {
        v131 = aShadow[ii];
        *((_BYTE *)&qword_143FABF20 + ii) = v131;
        if ( (unsigned __int8)(v131 - 97) <= 0x19u )
          *((_BYTE *)&qword_143FABF20 + ii) = v131 - 32;
      }
      if ( ii < 0x10 )
        memset((char *)&qword_143FABF20 + ii, 0, 16 - ii);
      Init_thread_footer(&dword_143FABF30);
    }
  }
  sub_1424D1590((unsigned int)&v139, 4, (unsigned int)"MATERIALS/LIGHT.MATERIAL.MBIN", 0, 0i64);
  sub_1424C01A0(0i64);
  v105 = *(unsigned int *)sub_1424D0D90(
                            (unsigned int)&v142,
                            *(_DWORD *)(a1 + 304),
                            (unsigned int)"PLAYER_TORCH",
                            v139,
                            0,
                            (__int64)&qword_143FABF08,
                            (__int64)&qword_143FABF20);
  *(_DWORD *)(a1 + 21668) = v105;
  v134 = xmmword_143FAB8F0;
  v135 = xmmword_143FAB900;
  v137 = xmmword_143FAB920;
  v136 = xmmword_1429E8590;
  if ( (v105 & 0xFFFC0000) != 0 && (v105 & 0x3FFFF) != 0x3FFFF && (v105 & 0x3FFFF) != 0 )
    sub_1424DEBD0(v105, &v134);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21668), 501i64, 0i64);
  sub_1424DE950(*(unsigned int *)(a1 + 21668), 509i64, 1i64);
  sub_1424DE950(*(unsigned int *)(a1 + 21668), 510i64, (unsigned int)dword_143878578);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21668), 503i64, 0i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21668), 506i64, 0i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21668), 506i64, 1i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21668), 506i64, 2i64);
  v106 = *(__m128 **)(*(_QWORD *)(*(_QWORD *)(a1 + 464) + 144i64) + 176i64);
  if ( v106 )
    v107 = v106[2];
  else
    v107 = (__m128)_mm_load_si128((const __m128i *)&xmmword_143FAB910);
  *(__m128 *)(a1 + 21696) = _mm_xor_ps((__m128)_mm_load_si128((const __m128i *)&xmmword_1429E7B40), v107);
  *(_OWORD *)(a1 + 21680) = *(_OWORD *)&xmmword_1429E8520;
  v108 = *(unsigned int *)sub_1424D0D90(
                            (unsigned int)&v142,
                            *(_DWORD *)(a1 + 304),
                            (unsigned int)"PLAYER_AMBIENT",
                            v139,
                            0,
                            (__int64)&qword_143FABF08,
                            (__int64)&qword_143FABF20);
  *(_DWORD *)(a1 + 21712) = v108;
  sub_1424DE8D0(v108, 501i64, 0i64);
  sub_1424DE950(*(unsigned int *)(a1 + 21712), 509i64, 3i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21712), 503i64, 0i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21712), 506i64, 0i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21712), 506i64, 1i64);
  sub_1424DE8D0(*(unsigned int *)(a1 + 21712), 506i64, 2i64);
  sub_1420B3460(&v139);
  AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v139);
  LODWORD(v139) = 0;
  AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v139);
  v109 = sub_14031D220((__int64)&unk_143891890);
  sub_141BC4EF0(a1 + 736, v109 + 85872, *(_QWORD *)(a1 + 728), *(_DWORD *)(a1 + 648), a1 + 16);
  *(_DWORD *)(a1 + 21984) = 0;
  *(_DWORD *)(a1 + 23500) = 0;
  for ( jj = 0; jj < dword_143874350; ++jj )
  {
    sub_1424D1590((unsigned int)&v139, 1, 160 * jj + qword_143874348 + 16, 0, 0i64);
    v111 = **(_QWORD **)(a1 + 664);
    v112 = *(__int64 **)(v111 + 8);
    v113 = sub_141B16810((int)a1 + 664, v111, (_DWORD)v112, 160 * jj + (int)qword_143874348, (__int64)&v139);
    v114 = *(_QWORD *)(a1 + 672);
    if ( v114 == 0x666666666666665i64 )
      std::_Xlength_error("list<T> too long");
    *(_QWORD *)(a1 + 672) = v114 + 1;
    *(_QWORD *)(v111 + 8) = v113;
    *v112 = v113;
    sub_141B177E0(a1 + 656, &v133, **(_QWORD **)(a1 + 664) + 16i64);
    sub_1420B3460(&v139);
    AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v139);
    LODWORD(v139) = 0;
    AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v139);
  }
  for ( kk = 0; kk < dword_143874340; ++kk )
  {
    sub_1424D1590((unsigned int)&v139, 1, 160 * kk + qword_143874338 + 16, 0, 0i64);
    v116 = **(_QWORD **)(a1 + 664);
    v117 = *(__int64 **)(v116 + 8);
    v118 = sub_141B16810((int)a1 + 664, v116, (_DWORD)v117, 160 * kk + (int)qword_143874338, (__int64)&v139);
    v119 = *(_QWORD *)(a1 + 672);
    if ( v119 == 0x666666666666665i64 )
      std::_Xlength_error("list<T> too long");
    *(_QWORD *)(a1 + 672) = v119 + 1;
    *(_QWORD *)(v116 + 8) = v118;
    *v117 = v118;
    sub_141B177E0(a1 + 656, &v133, **(_QWORD **)(a1 + 664) + 16i64);
    sub_1420B3460(&v139);
    AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v139);
    LODWORD(v139) = 0;
    AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v139);
  }
  sub_1424D1590((unsigned int)&v141, 1, (unsigned int)"MODELS\\EFFECTS\\CREATURES\\CREATUREFOOD.SCENE.MBIN", 0, 0i64);
  v120 = **(_QWORD **)(a1 + 664);
  v121 = *(__int64 **)(v120 + 8);
  v122 = sub_141B16810((int)a1 + 664, v120, (_DWORD)v121, (unsigned int)&xmmword_143874310, (__int64)&v141);
  v123 = *(_QWORD *)(a1 + 672);
  if ( v123 == 0x666666666666665i64 )
    std::_Xlength_error("list<T> too long");
  *(_QWORD *)(a1 + 672) = v123 + 1;
  *(_QWORD *)(v120 + 8) = v122;
  *v121 = v122;
  sub_141B177E0(a1 + 656, &v133, **(_QWORD **)(a1 + 664) + 16i64);
  sub_1424D1590((unsigned int)&v140, 1, (unsigned int)"MODELS\\EFFECTS\\CREATURES\\ROBOTFOOD.SCENE.MBIN", 0, 0i64);
  v124 = **(_QWORD **)(a1 + 664);
  v125 = *(__int64 **)(v124 + 8);
  v126 = sub_141B16810((int)a1 + 664, v124, (_DWORD)v125, (unsigned int)&xmmword_143874320, (__int64)&v140);
  v127 = *(_QWORD *)(a1 + 672);
  if ( 0x666666666666665i64 == v127 )
    std::_Xlength_error("list<T> too long");
  *(_QWORD *)(a1 + 672) = v127 + 1;
  *(_QWORD *)(v124 + 8) = v126;
  *v125 = v126;
  sub_141B177E0(a1 + 656, &v133, **(_QWORD **)(a1 + 664) + 16i64);
  *(_DWORD *)(a1 + 720) = 0;
  *(_DWORD *)(a1 + 23600) = 0;
  *(_DWORD *)(a1 + 23604) = -1082130432;
  *(_QWORD *)(a1 + 23608) = xmmword_143C96AE0;
  sub_1420B3460(&v140);
  AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v140);
  v140 = 0;
  AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v140);
  sub_1420B3460(&v141);
  AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v141);
  v141 = 0;
  AK::MemoryMgr::StartProfileThreadUsage((AK::MemoryMgr *)&v141);
}