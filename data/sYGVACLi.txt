struct Edge {
    int u, v, w;
};

struct dsu {
    vector <int> sz, p;
    dsu(int n) {
        sz.resize(n, 1);
        p.resize(n);
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
    }
    int get(int v) {
        while (p[v] != v) {
            v = p[v];
        }
        return v;
    }
    bool unite(int u, int v) {
        u = get(u), v = get(v);
        if (u == v) return false;
        if (sz[v] > sz[u]) {
            swap(u, v);
        }
        sz[u] += sz[v];
        p[v] = u;
    }
};

void solve() {
    int n, m, x, i, j, ans = 0, a, b;
    cin >> n >> m >> x;
    vector <Edge> e(m);
    dsu d(n);
    for (i = 0; i < m; i++) {
        cin >> e[i].u >> e[i].v >> e[i].w;
        e[i].u--, e[i].v--;
        if (e[i].w < x) {
            d.unite(e[i].u, e[i].v);
        }
    }
    for (i = 0; i < m; i++) {
        if (e[i].w == x) {
            a = d.get(e[i].u);
            b = d.get(e[i].v);
            if (a != b) {
                ans += d.sz[a] * d.sz[b];
                d.unite(a, b);
            }
        }
    }
    cout << ans << endl;
}