normalize_const = cauchy.cdf(sample['windspeedKmph'].max(), loc=loc, scale=scale)-cauchy.cdf(0, loc=loc, scale=scale)

def cdf_ws(x):
    if isinstance(x, float):
        return 0 if x<0 else (cauchy.cdf(x, loc=loc, scale=scale)-cauchy.cdf(0, loc=loc, scale=scale))/normalize_const if x < sample['windspeedKmph'].max() else 1
    val = np.zeros(len(x))
    val[x > sample['windspeedKmph'].max()] = 1
    mask = (0<x) & (x<sample['windspeedKmph'].max())
    leftover = cauchy.cdf(0, loc=loc, scale=scale)
    val[mask] = (cauchy.cdf(x[mask], loc=loc, scale=scale)-leftover)/normalize_const
    return val

#find zero of the monotonic function
def dichotomy_method(func, left=0, right=1, eps=1e-3):
    niters, fcalcs = 0, 0
    while right - left > 2 * eps:
        niters += 1
        m = (left + right) / 2

        if func(left)*func(m) > 0:
            left = m
        else:
            right = m
        fcalcs += 2
    fcalcs += 1
    xzero = (left + right) / 2
    return xzero

# the code to plot QQ-plot for the distribution
N = 1000
quants = [dichotomy_method(lambda x: cdf_ws(x)-i/(N+2), 0., 35.) for i in range(1,N+1)]

plt.scatter(y=sample['windspeedKmph'].sort_values(), x=quants)
plt.axline((0,0),(1,1))
plt.xlabel("Theoretical quantiles")
plt.ylabel("Empirical quantiles")
plt.title("QQ plot for windspeedKmph vs cauchy")
plt.grid(True)