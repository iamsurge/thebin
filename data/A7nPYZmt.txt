海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥详情页面@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"页面\",\"path\":\"config.html\",\"rule\":\"const empty = 'hiker://empty'\\nconst page = MY_PAGE;\\n\\nconst Color = (test) => {\\n    return '<font color=\\\"#FA7298\\\">' + test + '</front>';\\n}\\n\\nconst SpringGreen = (test) => {\\n    return '<font color=\\\"#3CB371\\\">' + test + '</front>';\\n}\\n\\nconst Strong = (test) => {\\n    return '<strong>' + test + '</strong>';\\n}\\n\\nconst Small = (test) => {\\n    return '<small>' + test + '</small>';\\n}\\n\\nconst Center = (test) => {\\n    return \\\"<h4 style='text-align:center'>\\\" + test + \\\"</h4>\\\"\\n}\\n\\nconst Big = (test) => {\\n    return '<b><font color=#000>' + test + '</font></b>'\\n}\\n\\nconst Gray = (test) => {\\n    return \\\"<font color='gray'>\\\" + test + \\\"</font>\\\";\\n}\\n\\nconst Rich = (test) => {\\n    return \\\"‘‘’’\\\" + test;\\n}\\n\\nconst getFormat = (oldTime) => {\\n    const add0 = (m) => {\\n        return m < 10 ? '0' + m : m\\n    }\\n    let time = new Date(oldTime);\\n    let y = time.getFullYear();\\n    let m = time.getMonth() + 1;\\n    let d = time.getDate();\\n    let h = time.getHours();\\n    let mm = time.getMinutes();\\n    let s = time.getSeconds();\\n    return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s);\\n}\\n\\nif (!getMyVar('UUID')) {\\n    const generateUUID = () => {\\n        let d = new Date().getTime()\\n        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\\n            let r = (d + Math.random() * 16) % 16 | 0 d = Math.floor(d / 16)\\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(36)\\n        })\\n        return uuid\\n    }\\n    putMyVar('UUID', generateUUID())\\n}\\n\\nconst getSearchUrl = (kw, empty) => {\\n    let mem = storage0.getItem(\\\"葫芦侠\\\", []);\\n    mem = mem.filter(it => it != kw);\\n    if (mem.length >= 10) {\\n        mem = mem.slice(1);\\n    }\\n    mem.push(kw);\\n    storage0.setItem(\\\"葫芦侠\\\", mem);\\n    return empty;\\n};\\n\\nif (!getMyVar('域名')) {\\n    域名 = 'http://floor.huluxia.com'\\n    putMyVar('域名', 域名)\\n}\\n\\nconst getConfigUrl = (path, body) => {\\n    path = getMyVar('域名') + path\\n    body = '?platform=2&gkey=000000&app_version=4.2.0.1&versioncode=20141465&market_id=floor_baidu&_key=' + getItem('葫芦侠TOKEN', '') + '&device_code=%5Bw%5D02%3A00%3A00%3A00%3A00%3A00-%5Bi%5DA00000A49D3B6A-%5Bs%5D898602A51317F3030582&phone_brand_type=OP' + body\\n    return JSON.parse(request(path + body, {\\n        headers: {\\n            'User-Agent': 'okhttp/3.8.1'\\n        }\\n    }))\\n}\\n\\nconst loginConfigUrl = (path, body) => {\\n    path = getMyVar('域名') + path + '?platform=2&gkey=000000&app_version=4.2.0.1&versioncode=20141465&market_id=floor_baidu&_key=&device_code=%5Bd%5D' + getMyVar('UUID') + '&phone_brand_type=UN'\\n    return JSON.parse(request(path, {\\n        headers: {\\n            'User-Agent': 'okhttp/3.8.1'\\n        },\\n        body: body,\\n        method: 'POST'\\n    }))\\n}\\n\\nconst RegExpParse = (text) => {\\n    centers = text\\n        .replace(/<text>|<\\\\/text>/g, '')\\n        .replace(/\\\\n/g, '<br>')\\n        .replace(/<image>(.*?),.*?<\\\\/image>/g, '<img src=\\\"$1\\\">')\\n        .replace(/([^\\\"])(http[^<\\\\s\\\"]+)/g, '$1<a href=\\\"$2\\\">$2</a>')\\n    return centers\\n}\\n\\nconst getConfirm = () => {\\n    confirm({\\n        title: \\\"清除记录\\\",\\n        content: \\\"确定好了吗？记录将会不复存在~\\\",\\n        confirm: () => {\\n            clearItem(\\\"葫芦侠\\\");\\n            refreshPage();\\n            toast('清除成功~');\\n        }\\n    })\\n}\\n\\nconst getIconSearch = (d) => {\\n    d.push({\\n        title: \\\"请输入帖子名称/关键词\\\",\\n        url: $(empty + 'fypage' + '#noHistory##noRecordHistory#').rule(() => {\\n            const d = [];\\n            require(\\\"hiker://page/config.html\\\")\\n            if (getItem('葫芦侠TOKEN', '') == '') {\\n                getLoginParse(d)\\n            } else {\\n                getSearchParse(d)\\n            }\\n            setResult(d)\\n        }),\\n        col_type: \\\"icon_1_search\\\"\\n    })\\n}\\n\\nconst time = new Date().getTime()\\n\\nif (Number(time - getItem('葫芦侠TOKEN-Time', '0')) > 259200000) {\\n    setItem('葫芦侠TOKEN-Time', '' + time + '')\\n    clearItem('葫芦侠TOKEN')\\n}\\n\\nconst getLoginUrl = () => {\\n    account = getItem('葫芦侠账号')\\n    password = md5(getItem('葫芦侠密码'))\\n    sign = 'account' + account + 'device_code[d]' + getMyVar('UUID') + 'password' + password + 'voice_codefa1c28a5b62e79c3e63d9030b6142e4b'\\n    path = '/account/login/ANDROID/4.1.8'\\n    body = 'account=' + account + '&login_type=2&password=' + password + '&sign=' + md5(sign).toUpperCase()\\n    data = loginConfigUrl(path, body)\\n    if (data._key != null) {\\n        avatar = data.user.avatar\\n        nick = data.user.nick\\n        setItem('葫芦侠avatar', avatar)\\n        setItem('葫芦侠nick', nick)\\n        token = data._key\\n        setItem('葫芦侠TOKEN', token)\\n        refreshPage()\\n        toast(\\\"登录成功\\\")\\n    } else {\\n        clearItem(\\\"葫芦侠账号\\\")\\n        clearItem(\\\"葫芦侠密码\\\")\\n        toast(data.msg)\\n    }\\n    return empty\\n}\\n\\nconst getBaseParse = () => {\\n    let iTag = getMyVar(\\\":iTag\\\", \\\"\\\");\\n    if (iTag) {\\n        iTag = JSON.parse(iTag);\\n    } else {\\n        try {\\n            path = '/category/list/ANDROID/2.0'\\n            body = '&is_hidden=1'\\n            iTag = getConfigUrl(path, body).categories\\n            putMyVar(\\\":iTag\\\", JSON.stringify(iTag));\\n        } catch (e) {\\n            iTag = [];\\n        }\\n    }\\n    const d = []\\n    const contlist = [];\\n    const tabs = iTag.slice(3, iTag.length - 3)\\n    tabs.forEach((tab, i) => {\\n        if (page == 1) {\\n            name = tab.title\\n            id = tab.categoryID\\n            d.push({\\n                title: getMyVar('分类', '0') == i ? Rich(Strong(Color(name))) : name,\\n                url: $('#noLoading#').lazyRule((empty, i, id) => {\\n                    clearMyVar('Page')\\n                    putMyVar('分类', i);\\n                    putMyVar('类ID', id);\\n                    refreshPage()\\n                    return empty;\\n                }, empty, i, id),\\n                col_type: 'scroll_button'\\n            });\\n        }\\n        contlist[i] = [];\\n        conts = tab.tags;\\n        conts.forEach(cont => {\\n            contlist[i].push({\\n                title: cont.name,\\n                url: cont.ID\\n            });\\n        })\\n    })\\n    const category = getMyVar('类ID', '' + tabs[0].categoryID + '')\\n    const index = getMyVar('分类', '0')\\n    if (contlist[index].length) {\\n        if (page == 1) {\\n            d.push({\\n                col_type: 'blank_block'\\n            })\\n            contlist[index].forEach((contslist, i) => {\\n                d.push({\\n                    title: getMyVar(index, '0') == i ? Rich(Strong(Color(contslist.title))) : contslist.title,\\n                    url: $('#noLoading#').lazyRule((index, empty, i) => {\\n                        clearMyVar('Page')\\n                        putMyVar(index, i);\\n                        refreshPage();\\n                        return empty;\\n                    }, index, empty, i),\\n                    col_type: 'scroll_button'\\n                });\\n            })\\n        }\\n        id = contlist[index][getMyVar(index, '0')].url\\n    } else {\\n        id = ''\\n    }\\n    sortTypeParse(d)\\n    if (page == 1) {\\n        getIconSearch(d)\\n        path = '/post/list/ANDROID/4.1.8'\\n        body = '&start=0&count=20&cat_id=' + category + '&tag_id=' + id + '&sort_by=' + sortType\\n        date = getConfigUrl(path, body)\\n        layoutParse(d, date, id, sortType, category)\\n    }\\n    setResult(d)\\n}\\n\\nconst sortTypeParse = (d) => {\\n    排序 = ['按回复时间', '按本版精华', '按发布时间'];\\n    if (page == 1) {\\n        d.push({\\n            col_type: 'blank_block'\\n        })\\n        排序.forEach(item => {\\n            d.push({\\n                title: item == getMyVar('排序', 排序[0]) ? Rich(Strong(Color(item))) : item,\\n                url: $('#noLoading#').lazyRule((item, empty) => {\\n                    clearMyVar('Page')\\n                    putMyVar('排序', item);\\n                    refreshPage();\\n                    return empty;\\n                }, item, empty),\\n                col_type: 'scroll_button'\\n            })\\n        })\\n    }\\n    switch (getMyVar('排序', 排序[0])) {\\n        case 排序[0]:\\n            sortType = 0\\n            break;\\n        case 排序[1]:\\n            sortType = 2\\n            break;\\n        case 排序[2]:\\n            sortType = 1\\n            break;\\n    }\\n}\\n\\nconst layoutParse = (d, data, id, sortType, category) => {\\n    addListener('onRefresh', () => {\\n        clearMyVar('Page')\\n    })\\n    if (data.posts.length) {\\n        data.posts.forEach(date => {\\n            userID = date.user.userID\\n            nick = date.user.nick\\n            d.push({\\n                title: nick + '\\\\t\\\\t' + Small(Color(getFormat(date.createTime))),\\n                pic_url: date.user.avatar,\\n                url: $(empty).rule((userID, nick) => {\\n                    MY_PAGE = 1\\n                    sortType = ''\\n                    category = ''\\n                    clearMyVar('Page')\\n                    setPageTitle(nick)\\n                    require('hiker://page/config.html')\\n                    path = '/post/create/list/ANDROID/4.1.8'\\n                    body = '&start=0&count=20&user_id=' + userID\\n                    date = getConfigUrl(path, body)\\n                    const d = []\\n                    layoutParse(d, date, userID, sortType, category)\\n                    setResult(d)\\n                }, userID, nick),\\n                col_type: 'avatar'\\n            })\\n            postID = date.postID\\n            d.push({\\n                title: Rich(Gray(date.title)),\\n                url: $(empty + 'fypage' + '#autoCache##gameTheme#').rule((postID) => {\\n                    require('hiker://page/config.html')\\n                    const d = []\\n                    playUrlParse(d, postID)\\n                    setResult(d)\\n                }, postID),\\n                col_type: 'text_1',\\n                extra: {\\n                    lineVisible: false\\n                }\\n            })\\n            try {\\n                images = date.detail.match(/<image>(.*?)<\\\\/image>/g)\\n                images = images.map(item => item.match(/<image>(.*?),.*?<\\\\/image>/)[1])\\n            } catch (e) {\\n                images = date.images\\n            }\\n            if (images.length) {\\n                for (let i = 0; i < 3; i++) {\\n                    if (images[i] != null) {\\n                        d.push({\\n                            pic_url: images[i],\\n                            url: images[i],\\n                            col_type: 'card_pic_3'\\n                        })\\n                    }\\n                }\\n            }\\n            d.push({\\n                col_type: 'line_blank'\\n            })\\n        })\\n        if (getMyVar('Page', '') == '') {\\n            d.push({\\n                title: Rich(Small(SpringGreen('～～～加载更多～～～'))),\\n                url: $(\\\"#noLoading#\\\").lazyRule((data, id, sortType, category) => {\\n                    MY_PAGE = 1\\n                    require('hiker://page/config.html')\\n                    if (sortType == '' && category == '') {\\n                        path = '/post/create/list/ANDROID/4.1.8'\\n                        body = '&start=' + getMyVar('Page', data.start) + '&count=20&user_id=' + id\\n                        date = getConfigUrl(path, body)\\n                    } else {\\n                        path = '/post/list/ANDROID/4.1.8'\\n                        body = '&start=' + getMyVar('Page', data.start) + '&count=20&cat_id=' + category + '&tag_id=' + id + '&sort_by=' + sortType\\n                        date = getConfigUrl(path, body)\\n                    }\\n                    putMyVar('Page', date.start)\\n                    const d = []\\n                    layoutParse(d, date, id, sortType, category)\\n                    addItemBefore('Page' + id, d);\\n                    if (!date.posts.length) {\\n                        deleteItemByCls('PageCls' + id)\\n                    }\\n                    return empty\\n                }, data, id, sortType, category),\\n                col_type: 'text_center_1',\\n                extra: {\\n                    id: 'Page' + id,\\n                    cls: 'PageCls' + id,\\n                    lineVisible: false\\n                }\\n            })\\n        }\\n    } else {\\n        d.push({\\n            title: Rich(Small(Gray('～～～我是有底线的～～～'))),\\n            url: empty,\\n            col_type: 'text_center_1',\\n            extra: {\\n                lineVisible: false\\n            }\\n        })\\n    }\\n}\\n\\nconst layoutSearchParse = (d, data) => {\\n    if (data.length) {\\n        data.forEach(date => {\\n            userID = date.user.userID\\n            nick = date.user.nick\\n            d.push({\\n                title: nick + '\\\\t\\\\t' + Small(Color(getFormat(date.createTime))),\\n                pic_url: date.user.avatar,\\n                url: $(empty).rule((userID, nick) => {\\n                    MY_PAGE = 1\\n                    sortType = ''\\n                    category = ''\\n                    clearMyVar('Page')\\n                    setPageTitle(nick)\\n                    require('hiker://page/config.html')\\n                    path = '/post/create/list/ANDROID/4.1.8'\\n                    body = '&start=0&count=20&user_id=' + userID\\n                    date = getConfigUrl(path, body)\\n                    const d = []\\n                    layoutParse(d, date, userID, sortType, category)\\n                    setResult(d)\\n                }, userID, nick),\\n                col_type: 'avatar'\\n            })\\n            postID = date.postID\\n            d.push({\\n                title: Rich(Gray(date.title)),\\n                url: $(empty + 'fypage' + '#autoCache##gameTheme#').rule((postID) => {\\n                    require('hiker://page/config.html')\\n                    const d = []\\n                    playUrlParse(d, postID)\\n                    setResult(d)\\n                }, postID),\\n                col_type: 'text_1',\\n                extra: {\\n                    lineVisible: false\\n                }\\n            })\\n            try {\\n                images = date.detail.match(/<image>(.*?)<\\\\/image>/g)\\n                images = images.map(item => item.match(/<image>(.*?),.*?<\\\\/image>/)[1])\\n            } catch (e) {\\n                images = date.images\\n            }\\n            if (images.length) {\\n                for (let i = 0; i < 3; i++) {\\n                    if (images[i] != null) {\\n                        d.push({\\n                            pic_url: images[i],\\n                            url: images[i],\\n                            col_type: 'card_pic_3'\\n                        })\\n                    }\\n                }\\n            }\\n            d.push({\\n                col_type: 'line_blank'\\n            })\\n        })\\n    } else {\\n        d.push({\\n            title: Rich(Small(Gray('～～～我是有底线的～～～'))),\\n            url: empty,\\n            col_type: 'text_center_1',\\n            extra: {\\n                lineVisible: false\\n            }\\n        })\\n    }\\n}\\n\\nconst playUrlParse = (d, postID) => {\\n    setPageTitle('详情页面')\\n    path = '/post/detail/ANDROID/4.1.8'\\n    body = '&post_id=' + postID + '&page_no=' + page + '&page_size=20&doc=1'\\n    data = getConfigUrl(path, body)\\n    if (page == 1) {\\n        for (let i = 0; i < 60; i++) {\\n            d.push({\\n                col_type: 'blank_block'\\n            })\\n        }\\n        centers = RegExpParse(data.post.detail)\\n        d.push({\\n            title: '<h1>' + data.post.title + '</h1>' + Small(Gray(centers)),\\n            col_type: 'rich_text'\\n        })\\n        voice = data.post.voice\\n        if (voice.length) {\\n            voice = JSON.parse(voice)\\n            video = voice.videohost + voice.videofid\\n            d.push({\\n                title: '<p><a href=\\\"' + video + '#isVideo=true#\\\">[点击查看视频]</a></p>',\\n                col_type: 'rich_text'\\n            })\\n        }\\n        images = data.post.images\\n        if (images.length) {\\n            images.forEach(image => {\\n                d.push({\\n                    pic_url: image,\\n                    url: image,\\n                    col_type: 'pic_1_full'\\n                })\\n            })\\n        }\\n        for (let i = 0; i < 20; i++) {\\n            d.push({\\n                col_type: 'blank_block'\\n            })\\n        }\\n    }\\n    if (data.comments.length) {\\n        if (page == 1) {\\n            d.push({\\n                title: Rich(Strong(Big('全部评论#' + data.post.commentCount + '条'))),\\n                url: empty,\\n                col_type: 'text_1',\\n                extra: {\\n                    lineVisible: false\\n                }\\n            })\\n        }\\n        data.comments.forEach(date => {\\n            refComment = date.refComment\\n            if (refComment != null) {\\n                nickComment = refComment.nick\\n                refComment = '回复\\\\t' + nickComment + '：<br>' + RegExpParse(refComment.text)\\n                refComment = \\\"<blockquote>\\\" + Small(Gray(refComment)) + \\\"</blockquote>\\\"\\n            } else {\\n                refComment = ''\\n            }\\n            isTop = '顶置'\\n            if (date.isTop != 1) isTop = date.seq + '楼'\\n            centers = RegExpParse(date.text)\\n            userID = date.user.userID\\n            nick = date.user.nick\\n            d.push({\\n                title: nick + '\\\\t\\\\t' + Small(SpringGreen(isTop)) + '\\\\t\\\\t' + Small(Color(getFormat(date.createTime))),\\n                pic_url: date.user.avatar,\\n                url: $(empty).rule((userID, nick) => {\\n                    MY_PAGE = 1\\n                    sortType = ''\\n                    category = ''\\n                    clearMyVar('Page')\\n                    setPageTitle(nick)\\n                    require('hiker://page/config.html')\\n                    path = '/post/create/list/ANDROID/4.1.8'\\n                    body = '&start=0&count=20&user_id=' + userID\\n                    date = getConfigUrl(path, body)\\n                    const d = []\\n                    layoutParse(d, date, userID, sortType, category)\\n                    setResult(d)\\n                }, userID, nick),\\n                col_type: 'avatar'\\n            }, {\\n                title: refComment + Small(Gray(centers)),\\n                url: empty,\\n                col_type: 'rich_text',\\n                extra: {\\n                    lineVisible: false\\n                }\\n            })\\n            if (date.images.length) {\\n                date.images.forEach(image => {\\n                    d.push({\\n                        pic_url: image,\\n                        url: image,\\n                        col_type: 'pic_1_full'\\n                    })\\n                })\\n            }\\n            d.push({\\n                col_type: 'line_blank'\\n            })\\n        })\\n    } else {\\n        d.push({\\n            title: Rich(Small(Gray('～～～我是有底线的～～～'))),\\n            url: empty,\\n            col_type: 'text_center_1',\\n            extra: {\\n                lineVisible: false\\n            }\\n        })\\n    }\\n}\\n\\nconst getLoginParse = (d) => {\\n    setPageTitle('葫芦侠·登录')\\n    d.push({\\n        desc: \\\"请输入您的手机号/邮箱\\\",\\n        col_type: \\\"input\\\",\\n        extra: {\\n            onChange: \\\"setItem('葫芦侠账号', input)\\\",\\n            titleVisible: false\\n        }\\n    }, {\\n        desc: \\\"请输入您的密码\\\",\\n        col_type: \\\"input\\\",\\n        extra: {\\n            onChange: \\\"setItem('葫芦侠密码', input)\\\",\\n            type: \\\"password\\\",\\n            titleVisible: false\\n        }\\n    }, {\\n        title: Rich(Center(\\\"登录账号\\\")),\\n        url: $(empty).lazyRule(() => {\\n            MY_PAGE = 1\\n            require('hiker://page/config.html')\\n            return getLoginUrl()\\n        }),\\n        col_type: \\\"text_center_1\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n}\\n\\nconst getSearchParse = (d) => {\\n    setPageTitle('葫芦侠·搜索')\\n    addListener('onClose', () => {\\n        clearMyVar(\\\"搜索关键词\\\")\\n    })\\n    if (page == 1) {\\n        d.push({\\n            title: getItem('葫芦侠nick'),\\n            pic_url: getItem('葫芦侠avatar'),\\n            url: $(empty).lazyRule(() => {\\n                confirm({\\n                    title: \\\"退出登录\\\",\\n                    content: \\\"确定好了吗？当前账号将会退出~\\\",\\n                    confirm: () => {\\n                        clearItem('葫芦侠TOKEN');\\n                        refreshPage();\\n                        toast('退出成功~');\\n                    }\\n                })\\n                return input\\n            }),\\n            col_type: 'avatar'\\n        }, {\\n            title: '🔍',\\n            desc: '请输入帖子名称/关键词',\\n            url: $.toString((getSearchUrl, empty) => {\\n                putMyVar('搜索关键词', input);\\n                if (input != '') getSearchUrl(input);\\n                refreshPage();\\n                return empty;\\n            }, getSearchUrl, empty),\\n            col_type: 'input',\\n            extra: {\\n                defaultValue: getMyVar('搜索关键词')\\n            }\\n        })\\n    }\\n    if (getMyVar('搜索关键词') == '') {\\n        if (page == 1) {\\n            let mem = storage0.getItem(\\\"葫芦侠\\\", []);\\n            if (mem.length > 0) {\\n                d.push({\\n                    title: Rich(Big('📝 搜索历史')),\\n                    url: $(\\\"#noLoading#\\\").lazyRule((empty, getConfirm) => {\\n                        getConfirm()\\n                        return empty;\\n                    }, empty, getConfirm),\\n                    col_type: 'text_1',\\n                    extra: {\\n                        lineVisible: false\\n                    }\\n                })\\n            } else {\\n                d.push({\\n                    title: Rich(Center(\\\"喂喂~还没搜索呢～(￣▽￣～)~\\\")),\\n                    url: empty,\\n                    col_type: 'text_1',\\n                    extra: {\\n                        lineVisible: false\\n                    }\\n                })\\n            }\\n            for (let i = mem.length - 1; i >= 0; i--) {\\n                let it = mem[i];\\n                d.push({\\n                    title: it,\\n                    url: $(\\\"#noLoading#\\\").lazyRule((it, getSearchUrl, empty) => {\\n                        putMyVar('搜索关键词', it);\\n                        getSearchUrl(it)\\n                        refreshPage();\\n                        return empty;\\n                    }, it, getSearchUrl, empty),\\n                    col_type: \\\"flex_button\\\"\\n                })\\n            }\\n        }\\n    } else {\\n        path = '/post/search/ANDROID/4.1.8'\\n        body = '&start=' + (page - 1) * 20 + '&count=20&cat_id=43&keyword=' + getMyVar('搜索关键词') + '&flag=0'\\n        date = getConfigUrl(path, body)\\n        try {\\n            layoutSearchParse(d, date.posts)\\n        } catch (e) {\\n            if (page == 1) {\\n                d.push({\\n                    title: Rich(Center(date.msg)),\\n                    url: empty,\\n                    col_type: 'text_1',\\n                    extra: {\\n                        lineVisible: false\\n                    }\\n                })\\n            }\\n        }\\n    }\\n}\"}],\"params\":\"{\\\"lineVisible\\\":false}\",\"saved\":false,\"title\":\"葫芦侠\",\"version\":0,\"url\":\"hiker://emptyfypage#autoCache##gameTheme#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_3\",\"find_rule\":\"js:(\\n(postID) => {\\n    require(\\\"hiker://page/config.html\\\");\\n    const d = [];\\n    playUrlParse(d, postID);\\n    setResult(d);\\n}\\n)(51481511)\",\"group\":\"①推荐\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"页面\\\",\\\"path\\\":\\\"config.html\\\",\\\"rule\\\":\\\"const empty = 'hiker://empty'\\\\nconst page = MY_PAGE;\\\\n\\\\nconst Color = (test) => {\\\\n    return '<font color=\\\\\\\"#FA7298\\\\\\\">' + test + '</front>';\\\\n}\\\\n\\\\nconst SpringGreen = (test) => {\\\\n    return '<font color=\\\\\\\"#3CB371\\\\\\\">' + test + '</front>';\\\\n}\\\\n\\\\nconst Strong = (test) => {\\\\n    return '<strong>' + test + '</strong>';\\\\n}\\\\n\\\\nconst Small = (test) => {\\\\n    return '<small>' + test + '</small>';\\\\n}\\\\n\\\\nconst Center = (test) => {\\\\n    return \\\\\\\"<h4 style='text-align:center'>\\\\\\\" + test + \\\\\\\"</h4>\\\\\\\"\\\\n}\\\\n\\\\nconst Big = (test) => {\\\\n    return '<b><font color=#000>' + test + '</font></b>'\\\\n}\\\\n\\\\nconst Gray = (test) => {\\\\n    return \\\\\\\"<font color='gray'>\\\\\\\" + test + \\\\\\\"</font>\\\\\\\";\\\\n}\\\\n\\\\nconst Rich = (test) => {\\\\n    return \\\\\\\"‘‘’’\\\\\\\" + test;\\\\n}\\\\n\\\\nconst getFormat = (oldTime) => {\\\\n    const add0 = (m) => {\\\\n        return m < 10 ? '0' + m : m\\\\n    }\\\\n    let time = new Date(oldTime);\\\\n    let y = time.getFullYear();\\\\n    let m = time.getMonth() + 1;\\\\n    let d = time.getDate();\\\\n    let h = time.getHours();\\\\n    let mm = time.getMinutes();\\\\n    let s = time.getSeconds();\\\\n    return y + '-' + add0(m) + '-' + add0(d) + ' ' + add0(h) + ':' + add0(mm) + ':' + add0(s);\\\\n}\\\\n\\\\nif (!getMyVar('UUID')) {\\\\n    const generateUUID = () => {\\\\n        let d = new Date().getTime()\\\\n        let uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\\\\n            let r = (d + Math.random() * 16) % 16 | 0 d = Math.floor(d / 16)\\\\n            return (c == 'x' ? r : (r & 0x3 | 0x8)).toString(36)\\\\n        })\\\\n        return uuid\\\\n    }\\\\n    putMyVar('UUID', generateUUID())\\\\n}\\\\n\\\\nconst getSearchUrl = (kw, empty) => {\\\\n    let mem = storage0.getItem(\\\\\\\"葫芦侠\\\\\\\", []);\\\\n    mem = mem.filter(it => it != kw);\\\\n    if (mem.length >= 10) {\\\\n        mem = mem.slice(1);\\\\n    }\\\\n    mem.push(kw);\\\\n    storage0.setItem(\\\\\\\"葫芦侠\\\\\\\", mem);\\\\n    return empty;\\\\n};\\\\n\\\\nif (!getMyVar('域名')) {\\\\n    域名 = 'http://floor.huluxia.com'\\\\n    putMyVar('域名', 域名)\\\\n}\\\\n\\\\nconst getConfigUrl = (path, body) => {\\\\n    path = getMyVar('域名') + path\\\\n    body = '?platform=2&gkey=000000&app_version=4.2.0.1&versioncode=20141465&market_id=floor_baidu&_key=' + getItem('葫芦侠TOKEN', '') + '&device_code=%5Bw%5D02%3A00%3A00%3A00%3A00%3A00-%5Bi%5DA00000A49D3B6A-%5Bs%5D898602A51317F3030582&phone_brand_type=OP' + body\\\\n    return JSON.parse(request(path + body, {\\\\n        headers: {\\\\n            'User-Agent': 'okhttp/3.8.1'\\\\n        }\\\\n    }))\\\\n}\\\\n\\\\nconst loginConfigUrl = (path, body) => {\\\\n    path = getMyVar('域名') + path + '?platform=2&gkey=000000&app_version=4.2.0.1&versioncode=20141465&market_id=floor_baidu&_key=&device_code=%5Bd%5D' + getMyVar('UUID') + '&phone_brand_type=UN'\\\\n    return JSON.parse(request(path, {\\\\n        headers: {\\\\n            'User-Agent': 'okhttp/3.8.1'\\\\n        },\\\\n        body: body,\\\\n        method: 'POST'\\\\n    }))\\\\n}\\\\n\\\\nconst RegExpParse = (text) => {\\\\n    centers = text\\\\n        .replace(/<text>|<\\\\\\\\/text>/g, '')\\\\n        .replace(/\\\\\\\\n/g, '<br>')\\\\n        .replace(/<image>(.*?),.*?<\\\\\\\\/image>/g, '<img src=\\\\\\\"$1\\\\\\\">')\\\\n        .replace(/([^\\\\\\\"])(http[^<\\\\\\\\s\\\\\\\"]+)/g, '$1<a href=\\\\\\\"$2\\\\\\\">$2</a>')\\\\n    return centers\\\\n}\\\\n\\\\nconst getConfirm = () => {\\\\n    confirm({\\\\n        title: \\\\\\\"清除记录\\\\\\\",\\\\n        content: \\\\\\\"确定好了吗？记录将会不复存在~\\\\\\\",\\\\n        confirm: () => {\\\\n            clearItem(\\\\\\\"葫芦侠\\\\\\\");\\\\n            refreshPage();\\\\n            toast('清除成功~');\\\\n        }\\\\n    })\\\\n}\\\\n\\\\nconst getIconSearch = (d) => {\\\\n    d.push({\\\\n        title: \\\\\\\"请输入帖子名称/关键词\\\\\\\",\\\\n        url: $(empty + 'fypage' + '#noHistory##noRecordHistory#').rule(() => {\\\\n            const d = [];\\\\n            require(\\\\\\\"hiker://page/config.html\\\\\\\")\\\\n            if (getItem('葫芦侠TOKEN', '') == '') {\\\\n                getLoginParse(d)\\\\n            } else {\\\\n                getSearchParse(d)\\\\n            }\\\\n            setResult(d)\\\\n        }),\\\\n        col_type: \\\\\\\"icon_1_search\\\\\\\"\\\\n    })\\\\n}\\\\n\\\\nconst time = new Date().getTime()\\\\n\\\\nif (Number(time - getItem('葫芦侠TOKEN-Time', '0')) > 259200000) {\\\\n    setItem('葫芦侠TOKEN-Time', '' + time + '')\\\\n    clearItem('葫芦侠TOKEN')\\\\n}\\\\n\\\\nconst getLoginUrl = () => {\\\\n    account = getItem('葫芦侠账号')\\\\n    password = md5(getItem('葫芦侠密码'))\\\\n    sign = 'account' + account + 'device_code[d]' + getMyVar('UUID') + 'password' + password + 'voice_codefa1c28a5b62e79c3e63d9030b6142e4b'\\\\n    path = '/account/login/ANDROID/4.1.8'\\\\n    body = 'account=' + account + '&login_type=2&password=' + password + '&sign=' + md5(sign).toUpperCase()\\\\n    data = loginConfigUrl(path, body)\\\\n    if (data._key != null) {\\\\n        avatar = data.user.avatar\\\\n        nick = data.user.nick\\\\n        setItem('葫芦侠avatar', avatar)\\\\n        setItem('葫芦侠nick', nick)\\\\n        token = data._key\\\\n        setItem('葫芦侠TOKEN', token)\\\\n        refreshPage()\\\\n        toast(\\\\\\\"登录成功\\\\\\\")\\\\n    } else {\\\\n        clearItem(\\\\\\\"葫芦侠账号\\\\\\\")\\\\n        clearItem(\\\\\\\"葫芦侠密码\\\\\\\")\\\\n        toast(data.msg)\\\\n    }\\\\n    return empty\\\\n}\\\\n\\\\nconst getBaseParse = () => {\\\\n    let iTag = getMyVar(\\\\\\\":iTag\\\\\\\", \\\\\\\"\\\\\\\");\\\\n    if (iTag) {\\\\n        iTag = JSON.parse(iTag);\\\\n    } else {\\\\n        try {\\\\n            path = '/category/list/ANDROID/2.0'\\\\n            body = '&is_hidden=1'\\\\n            iTag = getConfigUrl(path, body).categories\\\\n            putMyVar(\\\\\\\":iTag\\\\\\\", JSON.stringify(iTag));\\\\n        } catch (e) {\\\\n            iTag = [];\\\\n        }\\\\n    }\\\\n    const d = []\\\\n    const contlist = [];\\\\n    const tabs = iTag.slice(3, iTag.length - 3)\\\\n    tabs.forEach((tab, i) => {\\\\n        if (page == 1) {\\\\n            name = tab.title\\\\n            id = tab.categoryID\\\\n            d.push({\\\\n                title: getMyVar('分类', '0') == i ? Rich(Strong(Color(name))) : name,\\\\n                url: $('#noLoading#').lazyRule((empty, i, id) => {\\\\n                    clearMyVar('Page')\\\\n                    putMyVar('分类', i);\\\\n                    putMyVar('类ID', id);\\\\n                    refreshPage()\\\\n                    return empty;\\\\n                }, empty, i, id),\\\\n                col_type: 'scroll_button'\\\\n            });\\\\n        }\\\\n        contlist[i] = [];\\\\n        conts = tab.tags;\\\\n        conts.forEach(cont => {\\\\n            contlist[i].push({\\\\n                title: cont.name,\\\\n                url: cont.ID\\\\n            });\\\\n        })\\\\n    })\\\\n    const category = getMyVar('类ID', '' + tabs[0].categoryID + '')\\\\n    const index = getMyVar('分类', '0')\\\\n    if (contlist[index].length) {\\\\n        if (page == 1) {\\\\n            d.push({\\\\n                col_type: 'blank_block'\\\\n            })\\\\n            contlist[index].forEach((contslist, i) => {\\\\n                d.push({\\\\n                    title: getMyVar(index, '0') == i ? Rich(Strong(Color(contslist.title))) : contslist.title,\\\\n                    url: $('#noLoading#').lazyRule((index, empty, i) => {\\\\n                        clearMyVar('Page')\\\\n                        putMyVar(index, i);\\\\n                        refreshPage();\\\\n                        return empty;\\\\n                    }, index, empty, i),\\\\n                    col_type: 'scroll_button'\\\\n                });\\\\n            })\\\\n        }\\\\n        id = contlist[index][getMyVar(index, '0')].url\\\\n    } else {\\\\n        id = ''\\\\n    }\\\\n    sortTypeParse(d)\\\\n    if (page == 1) {\\\\n        getIconSearch(d)\\\\n        path = '/post/list/ANDROID/4.1.8'\\\\n        body = '&start=0&count=20&cat_id=' + category + '&tag_id=' + id + '&sort_by=' + sortType\\\\n        date = getConfigUrl(path, body)\\\\n        layoutParse(d, date, id, sortType, category)\\\\n    }\\\\n    setResult(d)\\\\n}\\\\n\\\\nconst sortTypeParse = (d) => {\\\\n    排序 = ['按回复时间', '按本版精华', '按发布时间'];\\\\n    if (page == 1) {\\\\n        d.push({\\\\n            col_type: 'blank_block'\\\\n        })\\\\n        排序.forEach(item => {\\\\n            d.push({\\\\n                title: item == getMyVar('排序', 排序[0]) ? Rich(Strong(Color(item))) : item,\\\\n                url: $('#noLoading#').lazyRule((item, empty) => {\\\\n                    clearMyVar('Page')\\\\n                    putMyVar('排序', item);\\\\n                    refreshPage();\\\\n                    return empty;\\\\n                }, item, empty),\\\\n                col_type: 'scroll_button'\\\\n            })\\\\n        })\\\\n    }\\\\n    switch (getMyVar('排序', 排序[0])) {\\\\n        case 排序[0]:\\\\n            sortType = 0\\\\n            break;\\\\n        case 排序[1]:\\\\n            sortType = 2\\\\n            break;\\\\n        case 排序[2]:\\\\n            sortType = 1\\\\n            break;\\\\n    }\\\\n}\\\\n\\\\nconst layoutParse = (d, data, id, sortType, category) => {\\\\n    addListener('onRefresh', () => {\\\\n        clearMyVar('Page')\\\\n    })\\\\n    if (data.posts.length) {\\\\n        data.posts.forEach(date => {\\\\n            userID = date.user.userID\\\\n            nick = date.user.nick\\\\n            d.push({\\\\n                title: nick + '\\\\\\\\t\\\\\\\\t' + Small(Color(getFormat(date.createTime))),\\\\n                pic_url: date.user.avatar,\\\\n                url: $(empty).rule((userID, nick) => {\\\\n                    MY_PAGE = 1\\\\n                    sortType = ''\\\\n                    category = ''\\\\n                    clearMyVar('Page')\\\\n                    setPageTitle(nick)\\\\n                    require('hiker://page/config.html')\\\\n                    path = '/post/create/list/ANDROID/4.1.8'\\\\n                    body = '&start=0&count=20&user_id=' + userID\\\\n                    date = getConfigUrl(path, body)\\\\n                    const d = []\\\\n                    layoutParse(d, date, userID, sortType, category)\\\\n                    setResult(d)\\\\n                }, userID, nick),\\\\n                col_type: 'avatar'\\\\n            })\\\\n            postID = date.postID\\\\n            d.push({\\\\n                title: Rich(Gray(date.title)),\\\\n                url: $(empty + 'fypage' + '#autoCache##gameTheme#').rule((postID) => {\\\\n                    require('hiker://page/config.html')\\\\n                    const d = []\\\\n                    playUrlParse(d, postID)\\\\n                    setResult(d)\\\\n                }, postID),\\\\n                col_type: 'text_1',\\\\n                extra: {\\\\n                    lineVisible: false\\\\n                }\\\\n            })\\\\n            try {\\\\n                images = date.detail.match(/<image>(.*?)<\\\\\\\\/image>/g)\\\\n                images = images.map(item => item.match(/<image>(.*?),.*?<\\\\\\\\/image>/)[1])\\\\n            } catch (e) {\\\\n                images = date.images\\\\n            }\\\\n            if (images.length) {\\\\n                for (let i = 0; i < 3; i++) {\\\\n                    if (images[i] != null) {\\\\n                        d.push({\\\\n                            pic_url: images[i],\\\\n                            url: images[i],\\\\n                            col_type: 'card_pic_3'\\\\n                        })\\\\n                    }\\\\n                }\\\\n            }\\\\n            d.push({\\\\n                col_type: 'line_blank'\\\\n            })\\\\n        })\\\\n        if (getMyVar('Page', '') == '') {\\\\n            d.push({\\\\n                title: Rich(Small(SpringGreen('～～～加载更多～～～'))),\\\\n                url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((data, id, sortType, category) => {\\\\n                    MY_PAGE = 1\\\\n                    require('hiker://page/config.html')\\\\n                    if (sortType == '' && category == '') {\\\\n                        path = '/post/create/list/ANDROID/4.1.8'\\\\n                        body = '&start=' + getMyVar('Page', data.start) + '&count=20&user_id=' + id\\\\n                        date = getConfigUrl(path, body)\\\\n                    } else {\\\\n                        path = '/post/list/ANDROID/4.1.8'\\\\n                        body = '&start=' + getMyVar('Page', data.start) + '&count=20&cat_id=' + category + '&tag_id=' + id + '&sort_by=' + sortType\\\\n                        date = getConfigUrl(path, body)\\\\n                    }\\\\n                    putMyVar('Page', date.start)\\\\n                    const d = []\\\\n                    layoutParse(d, date, id, sortType, category)\\\\n                    addItemBefore('Page' + id, d);\\\\n                    if (!date.posts.length) {\\\\n                        deleteItemByCls('PageCls' + id)\\\\n                    }\\\\n                    return empty\\\\n                }, data, id, sortType, category),\\\\n                col_type: 'text_center_1',\\\\n                extra: {\\\\n                    id: 'Page' + id,\\\\n                    cls: 'PageCls' + id,\\\\n                    lineVisible: false\\\\n                }\\\\n            })\\\\n        }\\\\n    } else {\\\\n        d.push({\\\\n            title: Rich(Small(Gray('～～～我是有底线的～～～'))),\\\\n            url: empty,\\\\n            col_type: 'text_center_1',\\\\n            extra: {\\\\n                lineVisible: false\\\\n            }\\\\n        })\\\\n    }\\\\n}\\\\n\\\\nconst layoutSearchParse = (d, data) => {\\\\n    if (data.length) {\\\\n        data.forEach(date => {\\\\n            userID = date.user.userID\\\\n            nick = date.user.nick\\\\n            d.push({\\\\n                title: nick + '\\\\\\\\t\\\\\\\\t' + Small(Color(getFormat(date.createTime))),\\\\n                pic_url: date.user.avatar,\\\\n                url: $(empty).rule((userID, nick) => {\\\\n                    MY_PAGE = 1\\\\n                    sortType = ''\\\\n                    category = ''\\\\n                    clearMyVar('Page')\\\\n                    setPageTitle(nick)\\\\n                    require('hiker://page/config.html')\\\\n                    path = '/post/create/list/ANDROID/4.1.8'\\\\n                    body = '&start=0&count=20&user_id=' + userID\\\\n                    date = getConfigUrl(path, body)\\\\n                    const d = []\\\\n                    layoutParse(d, date, userID, sortType, category)\\\\n                    setResult(d)\\\\n                }, userID, nick),\\\\n                col_type: 'avatar'\\\\n            })\\\\n            postID = date.postID\\\\n            d.push({\\\\n                title: Rich(Gray(date.title)),\\\\n                url: $(empty + 'fypage' + '#autoCache##gameTheme#').rule((postID) => {\\\\n                    require('hiker://page/config.html')\\\\n                    const d = []\\\\n                    playUrlParse(d, postID)\\\\n                    setResult(d)\\\\n                }, postID),\\\\n                col_type: 'text_1',\\\\n                extra: {\\\\n                    lineVisible: false\\\\n                }\\\\n            })\\\\n            try {\\\\n                images = date.detail.match(/<image>(.*?)<\\\\\\\\/image>/g)\\\\n                images = images.map(item => item.match(/<image>(.*?),.*?<\\\\\\\\/image>/)[1])\\\\n            } catch (e) {\\\\n                images = date.images\\\\n            }\\\\n            if (images.length) {\\\\n                for (let i = 0; i < 3; i++) {\\\\n                    if (images[i] != null) {\\\\n                        d.push({\\\\n                            pic_url: images[i],\\\\n                            url: images[i],\\\\n                            col_type: 'card_pic_3'\\\\n                        })\\\\n                    }\\\\n                }\\\\n            }\\\\n            d.push({\\\\n                col_type: 'line_blank'\\\\n            })\\\\n        })\\\\n    } else {\\\\n        d.push({\\\\n            title: Rich(Small(Gray('～～～我是有底线的～～～'))),\\\\n            url: empty,\\\\n            col_type: 'text_center_1',\\\\n            extra: {\\\\n                lineVisible: false\\\\n            }\\\\n        })\\\\n    }\\\\n}\\\\n\\\\nconst playUrlParse = (d, postID) => {\\\\n    setPageTitle('详情页面')\\\\n    path = '/post/detail/ANDROID/4.1.8'\\\\n    body = '&post_id=' + postID + '&page_no=' + page + '&page_size=20&doc=1'\\\\n    data = getConfigUrl(path, body)\\\\n    if (page == 1) {\\\\n        for (let i = 0; i < 60; i++) {\\\\n            d.push({\\\\n                col_type: 'blank_block'\\\\n            })\\\\n        }\\\\n        centers = RegExpParse(data.post.detail)\\\\n        d.push({\\\\n            title: '<h1>' + data.post.title + '</h1>' + Small(Gray(centers)),\\\\n            col_type: 'rich_text'\\\\n        })\\\\n        voice = data.post.voice\\\\n        if (voice.length) {\\\\n            voice = JSON.parse(voice)\\\\n            video = voice.videohost + voice.videofid\\\\n            d.push({\\\\n                title: '<p><a href=\\\\\\\"' + video + '#isVideo=true#\\\\\\\">[点击查看视频]</a></p>',\\\\n                col_type: 'rich_text'\\\\n            })\\\\n        }\\\\n        images = data.post.images\\\\n        if (images.length) {\\\\n            images.forEach(image => {\\\\n                d.push({\\\\n                    pic_url: image,\\\\n                    url: image,\\\\n                    col_type: 'pic_1_full'\\\\n                })\\\\n            })\\\\n        }\\\\n        for (let i = 0; i < 20; i++) {\\\\n            d.push({\\\\n                col_type: 'blank_block'\\\\n            })\\\\n        }\\\\n    }\\\\n    if (data.comments.length) {\\\\n        if (page == 1) {\\\\n            d.push({\\\\n                title: Rich(Strong(Big('全部评论#' + data.post.commentCount + '条'))),\\\\n                url: empty,\\\\n                col_type: 'text_1',\\\\n                extra: {\\\\n                    lineVisible: false\\\\n                }\\\\n            })\\\\n        }\\\\n        data.comments.forEach(date => {\\\\n            refComment = date.refComment\\\\n            if (refComment != null) {\\\\n                nickComment = refComment.nick\\\\n                refComment = '回复\\\\\\\\t' + nickComment + '：<br>' + RegExpParse(refComment.text)\\\\n                refComment = \\\\\\\"<blockquote>\\\\\\\" + Small(Gray(refComment)) + \\\\\\\"</blockquote>\\\\\\\"\\\\n            } else {\\\\n                refComment = ''\\\\n            }\\\\n            isTop = '顶置'\\\\n            if (date.isTop != 1) isTop = date.seq + '楼'\\\\n            centers = RegExpParse(date.text)\\\\n            userID = date.user.userID\\\\n            nick = date.user.nick\\\\n            d.push({\\\\n                title: nick + '\\\\\\\\t\\\\\\\\t' + Small(SpringGreen(isTop)) + '\\\\\\\\t\\\\\\\\t' + Small(Color(getFormat(date.createTime))),\\\\n                pic_url: date.user.avatar,\\\\n                url: $(empty).rule((userID, nick) => {\\\\n                    MY_PAGE = 1\\\\n                    sortType = ''\\\\n                    category = ''\\\\n                    clearMyVar('Page')\\\\n                    setPageTitle(nick)\\\\n                    require('hiker://page/config.html')\\\\n                    path = '/post/create/list/ANDROID/4.1.8'\\\\n                    body = '&start=0&count=20&user_id=' + userID\\\\n                    date = getConfigUrl(path, body)\\\\n                    const d = []\\\\n                    layoutParse(d, date, userID, sortType, category)\\\\n                    setResult(d)\\\\n                }, userID, nick),\\\\n                col_type: 'avatar'\\\\n            }, {\\\\n                title: refComment + Small(Gray(centers)),\\\\n                url: empty,\\\\n                col_type: 'rich_text',\\\\n                extra: {\\\\n                    lineVisible: false\\\\n                }\\\\n            })\\\\n            if (date.images.length) {\\\\n                date.images.forEach(image => {\\\\n                    d.push({\\\\n                        pic_url: image,\\\\n                        url: image,\\\\n                        col_type: 'pic_1_full'\\\\n                    })\\\\n                })\\\\n            }\\\\n            d.push({\\\\n                col_type: 'line_blank'\\\\n            })\\\\n        })\\\\n    } else {\\\\n        d.push({\\\\n            title: Rich(Small(Gray('～～～我是有底线的～～～'))),\\\\n            url: empty,\\\\n            col_type: 'text_center_1',\\\\n            extra: {\\\\n                lineVisible: false\\\\n            }\\\\n        })\\\\n    }\\\\n}\\\\n\\\\nconst getLoginParse = (d) => {\\\\n    setPageTitle('葫芦侠·登录')\\\\n    d.push({\\\\n        desc: \\\\\\\"请输入您的手机号/邮箱\\\\\\\",\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        extra: {\\\\n            onChange: \\\\\\\"setItem('葫芦侠账号', input)\\\\\\\",\\\\n            titleVisible: false\\\\n        }\\\\n    }, {\\\\n        desc: \\\\\\\"请输入您的密码\\\\\\\",\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        extra: {\\\\n            onChange: \\\\\\\"setItem('葫芦侠密码', input)\\\\\\\",\\\\n            type: \\\\\\\"password\\\\\\\",\\\\n            titleVisible: false\\\\n        }\\\\n    }, {\\\\n        title: Rich(Center(\\\\\\\"登录账号\\\\\\\")),\\\\n        url: $(empty).lazyRule(() => {\\\\n            MY_PAGE = 1\\\\n            require('hiker://page/config.html')\\\\n            return getLoginUrl()\\\\n        }),\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\",\\\\n        extra: {\\\\n            lineVisible: false\\\\n        }\\\\n    })\\\\n}\\\\n\\\\nconst getSearchParse = (d) => {\\\\n    setPageTitle('葫芦侠·搜索')\\\\n    addListener('onClose', () => {\\\\n        clearMyVar(\\\\\\\"搜索关键词\\\\\\\")\\\\n    })\\\\n    if (page == 1) {\\\\n        d.push({\\\\n            title: getItem('葫芦侠nick'),\\\\n            pic_url: getItem('葫芦侠avatar'),\\\\n            url: $(empty).lazyRule(() => {\\\\n                confirm({\\\\n                    title: \\\\\\\"退出登录\\\\\\\",\\\\n                    content: \\\\\\\"确定好了吗？当前账号将会退出~\\\\\\\",\\\\n                    confirm: () => {\\\\n                        clearItem('葫芦侠TOKEN');\\\\n                        refreshPage();\\\\n                        toast('退出成功~');\\\\n                    }\\\\n                })\\\\n                return input\\\\n            }),\\\\n            col_type: 'avatar'\\\\n        }, {\\\\n            title: '🔍',\\\\n            desc: '请输入帖子名称/关键词',\\\\n            url: $.toString((getSearchUrl, empty) => {\\\\n                putMyVar('搜索关键词', input);\\\\n                if (input != '') getSearchUrl(input);\\\\n                refreshPage();\\\\n                return empty;\\\\n            }, getSearchUrl, empty),\\\\n            col_type: 'input',\\\\n            extra: {\\\\n                defaultValue: getMyVar('搜索关键词')\\\\n            }\\\\n        })\\\\n    }\\\\n    if (getMyVar('搜索关键词') == '') {\\\\n        if (page == 1) {\\\\n            let mem = storage0.getItem(\\\\\\\"葫芦侠\\\\\\\", []);\\\\n            if (mem.length > 0) {\\\\n                d.push({\\\\n                    title: Rich(Big('📝 搜索历史')),\\\\n                    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((empty, getConfirm) => {\\\\n                        getConfirm()\\\\n                        return empty;\\\\n                    }, empty, getConfirm),\\\\n                    col_type: 'text_1',\\\\n                    extra: {\\\\n                        lineVisible: false\\\\n                    }\\\\n                })\\\\n            } else {\\\\n                d.push({\\\\n                    title: Rich(Center(\\\\\\\"喂喂~还没搜索呢～(￣▽￣～)~\\\\\\\")),\\\\n                    url: empty,\\\\n                    col_type: 'text_1',\\\\n                    extra: {\\\\n                        lineVisible: false\\\\n                    }\\\\n                })\\\\n            }\\\\n            for (let i = mem.length - 1; i >= 0; i--) {\\\\n                let it = mem[i];\\\\n                d.push({\\\\n                    title: it,\\\\n                    url: $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((it, getSearchUrl, empty) => {\\\\n                        putMyVar('搜索关键词', it);\\\\n                        getSearchUrl(it)\\\\n                        refreshPage();\\\\n                        return empty;\\\\n                    }, it, getSearchUrl, empty),\\\\n                    col_type: \\\\\\\"flex_button\\\\\\\"\\\\n                })\\\\n            }\\\\n        }\\\\n    } else {\\\\n        path = '/post/search/ANDROID/4.1.8'\\\\n        body = '&start=' + (page - 1) * 20 + '&count=20&cat_id=43&keyword=' + getMyVar('搜索关键词') + '&flag=0'\\\\n        date = getConfigUrl(path, body)\\\\n        try {\\\\n            layoutSearchParse(d, date.posts)\\\\n        } catch (e) {\\\\n            if (page == 1) {\\\\n                d.push({\\\\n                    title: Rich(Center(date.msg)),\\\\n                    url: empty,\\\\n                    col_type: 'text_1',\\\\n                    extra: {\\\\n                        lineVisible: false\\\\n                    }\\\\n                })\\\\n            }\\\\n        }\\\\n    }\\\\n}\\\"}]\"}","title":"详情页面"}