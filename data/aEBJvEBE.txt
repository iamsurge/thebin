// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)2e18 + 7;
const ll inf = 1e9 + 7;
const ll ONE = 1;
const ll MOD = 1e9 + 7;
ld EPS = 1e-12;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

struct dsu {
    vector <int> sz;
    vector <int> p;
    dsu(int n) {
        sz.resize(n, 1);
        p.resize(n);
        for (int i = 0; i < n; i++) {
            p[i] = i;
        }
    }
    int get(int v) {
        while (p[v] != v) {
            v = p[v];
        }
        return v;
    }
    bool unite(int u, int v) {
        u = get(u);
        v = get(v);
        if (u == v) {
            return false;
        }
        else {
            if (sz[v] > sz[u]) {
                swap(u, v);
            }
            sz[u] += sz[v];
            p[v] = u;
            return true;
        }
    }
};

struct Edge {
    int u, v, w;
};

bool cmp(Edge& a, Edge& b) {
    return a.w < b.w;
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) {
        int n, m, i, j, zxc = INF, id = -1, x, y, z, ans = 0;
        cin >> n >> m;
        vector <int> cost(n);
        for (i = 0; i < n; i++) {
            cin >> cost[i];
            if (cost[i] < zxc) {
                zxc = cost[i];
                id = i;
            }
        }
        dsu d(n);
        vector <Edge> e(m);
        for (i = 0; i < m; i++) {
            cin >> e[i].u >> e[i].v >> e[i].w;
            e[i].u--;
            e[i].v--;
        }
        sort(all(e), cmp);
        for (i = 0; i < m; i++) {
            if (cost[e[i].u] == zxc) {
                if (cost[e[i].v] == zxc) {
                    //min to min
                    if (e[i].w < 2 * zxc) {
                        if (d.unite(e[i].u, e[i].v)) {
                            ans += e[i].w;
                        }
                    }
                }
                else {
                    // min to not min
                    if (e[i].w < cost[e[i].v] + zxc) {
                        if (d.unite(e[i].u, e[i].v)) {
                            ans += e[i].w;
                        }
                    }
                }
            }
            else {
                if (cost[e[i].v] == zxc) {
                    //not min to min
                    if (e[i].w < cost[e[i].u] + zxc) {
                        if (d.unite(e[i].u, e[i].v)) {
                            ans += e[i].w;
                        }
                    }
                }
                else {
                    // not min to not min
                    if (cost[e[i].u] + cost[e[i].v] + 2 * zxc > e[i].w + min(cost[e[i].u], cost[e[i].v]) + zxc) {
                        if (d.unite(e[i].u, e[i].v)) {
                            ans += e[i].w;
                        }
                    }
                }
            }
        }
        vector <pair <int, int> > cost2(n);
        for (i = 0; i < n; i++) {
            cost2[i].first = cost[i];
            cost2[i].second = i;
        }
        sort(all(cost2));
        for (i = 0; i < n; i++) {
            if (d.unite(cost2[i].second, id)) {
                ans += cost2[i].first + zxc;
            }
        }
        cout << ans << endl;
    }
}
//Deisgned by skimono