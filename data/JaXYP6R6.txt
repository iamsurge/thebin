memFrom, memTo, lib, num, lim, results, src, ok = 0, -1, nil, 0, 32, {}, nil, false function name(n) if lib ~= n then lib = n ranges = gg.getRangesList(lib) if #ranges == 0 then os.exit() else memFrom = ranges[1].start memTo = ranges[#ranges]['end'] end end end function hex2tbl(hex) ret = {} hex:gsub('%S%S', function (ch) ret[#ret + 1] = ch return '' end) return ret end function original(orig) tbl = hex2tbl(orig) len = #tbl if len == 0 then return end used = len if len > lim then used = lim end s = '' for i = 1, used do if i ~= 1 then s = s..';' end v = tbl[i] if v == '??' or v == '**' then v = '0~~0' end s = s..v..'r' end s = s..'::'..used gg.searchNumber(s, 1, false, gg.SIGN_EQUAL, memFrom, memTo) if len > used then for i = used + 1, len do v = tbl[i] if v == '??' or v == '**' then v = 256 else v = ('0x'..v) + 0 if v > 127 then v = v - 256 end end tbl[i] = v end end found = gg.getResultCount(); results = {} count = 0 checked = 0 while true do if checked >= found then break end all = gg.getResults(8) total = #all start = checked if checked + used > total then break end for i, v in ipairs(all) do v.address = v.address + offset end gg.loadResults(all) while start < total do good = true offset = all[1 + start].address - 1 if used < len then get = {} for i = lim + 1, len do get[i - lim] = {address = offset + i, flags = 1, value = 0} end get = gg.getValues(get) for i = lim + 1, len do ch = tbl[i] if ch ~= 256 and get[i - lim].value ~= ch then good = false break end end end if good then count = count + 1 results[count] = offset checked = checked + used else del = {} for i = 1, used do del[i] = all[i + start] end gg.removeResults(del) end start = start + used end end end function replaced(repl) num = num + 1 tbl = hex2tbl(repl) if src ~= nil then source = hex2tbl(src) for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' and v == source[i] then tbl[i] = '**' end end src = nil end cnt = #tbl set = {} s = 0 for _, addr in ipairs(results) do for i, v in ipairs(tbl) do if v ~= '??' and v ~= '**' then s = s + 1 set[s] = { ['address'] = addr + i,  ['value'] = v..'r', ['flags'] = 1,} end end end if s ~= 0 then gg.setValues(set) end ok = true end

function script()

a = gg.multiChoice({
'normal',
'fantasma',
'atravesar',
'tatu',
'arriba',
'cosas'
})

if a == nil then else

if a [1] then

gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
offset = 0x171DB8C--normal
original('7F 45 4C 46 01 01 01 00')
replaced('70 4C 2D E9 10 B0 8D E2')
gg.clearResults()
gg.toast('X')

end

if a [2] then

gg.setRanges(gg.REGION_CODE_APP)
name('libil2cpp.so')
offset = 0x171DB8C--fantasma
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()
gg.toast('âœ“')

end

if a [3] then

gg.setRanges(gg.REGION_CODE_APP)
name('libunity.so')
offset = 0xB75BB0--atravesar
original('7F 45 4C 46 01 01 01 00')
r = gg.getResults(1)
r[1].flags = gg.TYPE_FLOAT
r[1].value = '0'
gg.setValues(r)
gg.sleep(135)
r[1].value = '-6.11142992e27-6'
gg.setValues(r)
gg.clearResults()
gg.toast('atravesar')

end

if a [4] then

gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('0.0001;1000;-1.30930378e25F;-1.30683878e21F::13', gg.TYPE_FLOAT)--tatu
gg.refineNumber('0.0001', gg.TYPE_FLOAT)
gg.getResults(gg.getResultsCount())
gg.editAll('-0.82', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('tatu')

end

if a [5] then

gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-0.82', gg.TYPE_FLOAT)--arriba
gg.getResults(gg.getResultsCount())
gg.editAll('0.0001', gg.TYPE_FLOAT)
gg.clearResults()
gg.toast('arriba')

end

if a [6] then

gg.setRanges(gg.REGION_ANONYMOUS)
gg.searchNumber('73r;6Cr;20r;35r;00r;00r;80r;3Fr;ACr;E5r;22r;BFr::12', gg.TYPE_BYTE)--gps
gg.refineNumber('00r;00r;80r;3Fr::4', gg.TYPE_BYTE)
gg.refineAddress('?????78F')
gg.getResults(gg.getResultsCount())
gg.editAll('45r', gg.TYPE_BYTE)
gg.clearResults()
gg.searchNumber('E9r;C5r;4Ar;35r;00r;00r;80r;3Fr;FBr;67r;13r;3Fr::12', gg.TYPE_BYTE)--gps
gg.refineNumber('00r;00r;80r;3Fr::4', gg.TYPE_BYTE)
gg.refineAddress('?????64F')
gg.getResults(gg.getResultsCount())
gg.editAll('45r', gg.TYPE_BYTE)
gg.clearResults()

gg.setRanges(gg.REGION_CODE_APP)
gg.searchNumber('-8388395.5;-8388393.5;-8388387.5::65', gg.TYPE_FLOAT)--piedra
gg.getResults(3)
gg.editAll('-1.03', gg.TYPE_FLOAT)
gg.clearResults()

name('libil2cpp.so')
offset = 0x3284AAC--cuerpo negro
original('7F 45 4C 46 01 01 01 00')
replaced('00 00 A0 E3 1E FF 2F E1')
gg.clearResults()

name('libil2cpp.so')
offset = 0x2707E50--correr
original('7F 45 4C 46 01 01 01 00')
replaced('A0 0F 43 E3 1E FF 2F E1')
gg.clearResults()

name('libunity.so')
offset = 0x625170--wallshot
original('7F 45 4C 46 01 01 01 00')
r = gg.getResults(1)
r[1].flags = gg.TYPE_FLOAT
r[1].value = '1.1'
gg.setValues(r)
gg.clearResults()

name('libil2cpp.so')
offset = 0x220B9E0--recoil
original('7F 45 4C 46 01 01 01 00')
r = gg.getResults(1)
r[1].flags = gg.TYPE_FLOAT
r[1].value = '0'
gg.setValues(r)
gg.clearResults()
gg.toast('cosas')

end

end end

while 1 do if gg.isVisible() then gg.setVisible(false) script() end end