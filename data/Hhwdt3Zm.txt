void solve() {
    int n, k;
    cin >> n >> k;
    vector<int> a(n);
    map<int, vector<int>> cnt;
    for (int i = 0; i < n; i++) {
        cin >> a[i];
        cnt[a[i] % k].push_back(a[i]);
    }
    int m = cnt.size();
    vector<vector<int>> pos(m);
    vector<int> kek(m);
    int id = 0;
    for (auto [l, r] : cnt) {
        pos[id] = r;
        kek[id] = l;
        id++;
    }
    int flag = 1;
    for (int i = 0; i < m; i++) {
        if (kek[i] * 2 == k || kek[i] ==  0) {
            flag = 0;
        }
    }
    vector<int> l, r;
    for (int i = 0; i < m; i++) {
        if (kek[i] ==  0) continue;
        if (kek[i] == k / 2 && k % 2 == 0) continue;
        if (kek[i] <= k / 2) {
            l.push_back(i);
        } else {
            r.push_back(i);
        }
    }
    vector<int> final;
    reverse(all(l));
    reverse(all(r));
    for (auto i : l)  final.push_back(i);
    for (auto i : r)  final.push_back(i);
    int cnt1 = 0;
    while (cnt1 < 100) {
        cnt1++;
        shuffle(all(final), rnd);
        int ok = 1;
        for (int i = 1; i < final.size(); i++) {
            ok &= (kek[final[i - 1]] + kek[final[i]] != k);
        }
        if (ok) break;
    }
    for (int i = 0; i < m; i++) {
        if (n != 1 && pos[i].size() == n && (kek[i] == 0 || (kek[i] * 2 == k && n != 1))) {
            cout << "NO\n";
            return;
        }
    }
    if (flag) {
        for (int i =  0; i < (int)final.size() - 1; i++) {
            if (kek[final[i]] + kek[final[i + 1]] == k) {
                cout << "NO\n";
                return;
            }
        }
        cout<<"YES\n";
        for (auto i : final) {
            for (auto j : pos[i]) cout << j << " ";
        }
        cout<< "\n";
    } else {
        vector<int> val;
        vector<int> t, z;
        for (int i = 0; i < m; i++) {
            if (kek[i] * 2 == k ||  kek[i] ==  0) {
                for(auto j : pos[i]) (kek[i] == 0 ? z : t).push_back(j);
            }
        }
        for (int i = 0; i < min(z.size(), t.size()); i++) {
            if (z.size() < t.size()) val.push_back(t[i]), val.push_back(z[i]);
            else  val.push_back(z[i]), val.push_back(t[i]);
        }
        for (int i = min(z.size(), t.size()); i < max(t.size(), z.size()); i++) {
            if (t.size() > z.size()) val.push_back(t[i]);
            else val.push_back(z[i]);
        }
        vector<int> ans;
        for (int i =  0; i < (int)final.size(); i++) {
            for (auto j : pos[final[i]]) {
                ans.push_back(j);
                if (val.size()) ans.push_back(val.back()), val.pop_back();
            }
        }
        flag = 1;
        while (val.size()) {
            ans.push_back(val.back());
            val.pop_back();
        }
        for (int i = 0; i < (int)ans.size() - 1; i++) {
            if ((ans[i] + ans[i + 1]) % k == 0) {
                flag = 0;
            }
        }
        if (flag) {
            cout << "YES\n";
            for (auto i : ans) cout << i << " ";
            cout << "\n";
            return;
        }
        dbg(ans)
        dbg("second")
        ans.clear();
        val.clear();
        t.clear();
        z.clear();
        for (int i = 0; i < m; i++) {
            if (kek[i] * 2 == k ||  kek[i] ==  0) {
                for(auto j : pos[i]) (kek[i] == 0 ? z : t).push_back(j);
            }
        }
        for (int i = 0; i < min(z.size(), t.size()); i++) {
            if (z.size() < t.size()) val.push_back(t[i]), val.push_back(z[i]);
            else  val.push_back(z[i]), val.push_back(t[i]);
        }
        for (int i = min(z.size(), t.size()); i < max(t.size(), z.size()); i++) {
            if (t.size() > z.size()) val.push_back(t[i]);
            else val.push_back(z[i]);
        }
        for (int i =  0; i < (int)final.size(); i++) {
            for (auto j : pos[final[i]]) {
                if (val.size()) ans.push_back(val.back()), val.pop_back();
                ans.push_back(j);
            }
        }
        flag = 1;
        while (val.size()) {
            ans.push_back(val.back());
            val.pop_back();
        }
        dbg(ans)
        for (int i = 0; i < (int)ans.size() - 1; i++) {
            if ((ans[i] + ans[i + 1]) % k == 0) {
                flag = 0;
            }
        }
        if (flag) {
            cout << "YES\n";
            for (auto i : ans) cout << i << " ";
            cout << "\n";
            return;
        }
        cout << "NO\n";
    }
}