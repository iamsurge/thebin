void TestCase() {
    using namespace std;

    const vector <Cat> cats = {
            {"Tom"s, Gender::Male, CatBreed::Bengal, 2},
            {"Leo"s, Gender::Male, CatBreed::Siberian, 3},
            {"Luna"s, Gender::Female, CatBreed::Siamese, 1},
            {"Charlie"s, Gender::Male, CatBreed::Balinese, 7},
            {"Ginger"s, Gender::Female, CatBreed::Sphynx, 5},
            {"Tom"s, Gender::Male, CatBreed::Siamese, 2},
    };

    {
        const vector<const Cat*> res = {
                &cats[0],
                &cats[3],
                &cats[2],
                &cats[5],
                &cats[1],
                &cats[4],

        };

        string res_str = "{{Tom, male, breed: Bengal, age:2}, "
            "{Charlie, male, breed: Balinese, age:7}, "
            "{Luna, female, breed: Siamese, age:1}, "
            "{Tom, male, breed: Siamese, age:2}, "
            "{Leo, male, breed: Siberian, age:3}, "
            "{Ginger, female, breed: Sphynx, age:5}}";

        auto sorted_cats = GetSortedCats(cats, [](const Cat& lhs, const Cat& rhs) {
            return tie(lhs.breed, lhs.name) < tie(rhs.breed, rhs.name);
            });


        std::ostringstream tmpout;
        PrintCatPointerValues(sorted_cats, tmpout);

        assert(sorted_cats == res);
        assert(tmpout.str() == res_str);

    }

    {
        const vector<const Cat*> res = {
                &cats[0],
                &cats[3],
                &cats[5],
                &cats[1],
                &cats[2],
                &cats[4],

        };

        string res_str = "{{Tom, male, breed: Bengal, age:2}, "
            "{Charlie, male, breed: Balinese, age:7}, "
            "{Tom, male, breed: Siamese, age:2}, "
            "{Leo, male, breed: Siberian, age:3}, "
            "{Luna, female, breed: Siamese, age:1}, "
            "{Ginger, female, breed: Sphynx, age:5}}";

        auto sorted_cats = GetSortedCats(cats, [](const Cat& lhs, const Cat& rhs) {
            return tie(lhs.gender, lhs.breed) < tie(rhs.gender, rhs.breed);
            });


        std::ostringstream tmpout;
        PrintCatPointerValues(sorted_cats, tmpout);

        assert(sorted_cats == res);
        assert(tmpout.str() == res_str);
    }
}
