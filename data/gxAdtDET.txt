#include <fstream>
#include <iostream>
#include <cmath>

typedef double (*fun)(double);

double simpsonIntegral(double a, double b, int n, fun &f) {
    const double width = (b-a)/n;

    double simpson_integral = 0;
    for(int step = 0; step < n; step++) {
        const double x1 = a + step*width;
        const double x2 = a + (step+1)*width;

        simpson_integral += (x2-x1)/6.0*(f(x1) + 4.0*f(0.5*(x1+x2)) + f(x2));
    }

    return simpson_integral;
}

double f(double x){
    return pow(x,3);
}

int main(){
    double a,b;
    int n;
    std::ofstream file;
    file.open("result.txt");
    std::cout<< "Enter double a:"<<"\n";
    std::cin>>a;
    std::cout<< "Enter double b:"<<"\n";
    std::cin>>b;
   /* std::cout<< "Enter int n:"<<"\n";
    std::cin>>n;*/
  if (file.is_open()){
         for (int i = 1; i < 1001; i++){
                file << i <<"\t" << simpsonIntegral(a,b,i,f)<< std::endl;
         }

   // std::cout<< simpsonIntegral(a,b,n,f);
}
}
