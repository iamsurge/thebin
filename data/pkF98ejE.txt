import tensorflow as tf
import numpy as np

# Import training data
mnist = tf.keras.datasets.mnist

# Initialize training data
(x_train, y_train), (x_test, y_test) = mnist.load_data()
x_train, x_test = x_train / 255.0, x_test / 255.0

# Create the neural network
model = tf.keras.models.Sequential([
  tf.keras.layers.Flatten(input_shape=(28, 28)),
  tf.keras.layers.Dense(128, activation='relu'),
  tf.keras.layers.Dropout(0.2),
  tf.keras.layers.Dense(10)
])

loss_fn = tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True)

predictions = model(x_train[:1]).numpy()

loss_fn(y_train[:1], predictions).numpy()

# Prepare for training the network
model.compile(optimizer='adam',
              loss=loss_fn,
              metrics=['accuracy'])

predictions = model(x_train[:1]).numpy()

# Train the network 
model.fit(x_train, y_train, epochs=5)

#Evaluate the network
model.evaluate(x_test,  y_test, verbose=2)
