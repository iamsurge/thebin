#include <iostream>
#include <algorithm>
#include <vector>
#include <stack>
using namespace std;
const int maxn = 1e5 + 10;
int n, m;
vector<int> graph[maxn];
int low_link[maxn];
int discoverable_time[maxn];
bool on_stack[maxn];
int timer = 0;
void dfs(int node, int parent = -1) {
    on_stack[node] = true;
    low_link[node] = timer;
    discoverable_time[node] = timer;
    timer++;
    
    for(int i = 0; i < (int) graph[node].size(); i++) {
        int neighbour = graph[node][i];
        if(neighbour != parent) {
            if(on_stack[neighbour]) {
                low_link[node] = min(low_link[node], discoverable_time[neighbour]);
            }
            else {
                dfs(neighbour, node);
                if(discoverable_time[node] < low_link[neighbour]) {
                    cout << "Bridge between: " << node + 1 << " " << neighbour + 1 << endl;
                }
                low_link[node] = min(low_link[node], low_link[neighbour]);
              
            }
        }
    }
  
}
void bridges() {
    for(int i = 0; i < maxn; i++) {
        discoverable_time[i] = -1;
        on_stack[i] = false;
        low_link[i] = -1;
    }
    for(int i = 0; i < n; i++) {
        if(!on_stack[i]) {
            dfs(i);
        }
    }
}
int main()
{
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        int a, b;
        cin >>  a >> b;
        a--;b--;
        graph[a].push_back(b);
        graph[b].push_back(a);
    }
    bridges();
    return 0;
}
