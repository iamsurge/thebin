海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥本地资源管理|设置-文件管理@@eyJkYXRhIjoie1wiYXNzb2NpYXRlZE1vZGVsc01hcEZvckpvaW5UYWJsZVwiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhGS1wiOnt9LFwiYXNzb2NpYXRlZE1vZGVsc01hcFdpdGhvdXRGS1wiOnt9LFwiZmllbGRzVG9TZXRUb0RlZmF1bHRcIjpbXSxcImdtdE1vZGlmaWVkXCI6MCxcImlkXCI6MCxcImxhc3RfY2hhcHRlcl9ydWxlXCI6XCJcIixcImxpc3RUb0NsZWFyQXNzb2NpYXRlZEZLXCI6W10sXCJsaXN0VG9DbGVhclNlbGZGS1wiOltdLFwicGFnZUxpc3RcIjpbe1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiNmLkZpbGXlt6XlhbdcIixcInBhdGhcIjpcIkZpbGUuanNcIixcInJ1bGVcIjpcImNvbnN0IEZpbGUgPSBqYXZhLmlvLkZpbGU7XFxuY29uc3Qge1xcbiAgICBGaWxlcyxcXG4gICAgUGF0aHMsXFxuICAgIFN0YW5kYXJkQ29weU9wdGlvbixcXG4gICAgU3RhbmRhcmRPcGVuT3B0aW9uXFxufSA9IGphdmEubmlvLmZpbGU7XFxuY29uc3QgamF2YVN0cmluZyA9IGphdmEubGFuZy5TdHJpbmc7XFxubGV0IGphdmFTY29wZSA9IG5ldyBKYXZhSW1wb3J0ZXIoamF2YS5pbywgamF2YS5sYW5nLCBqYXZhLmxhbmcucmVmbGVjdCwgamF2YS51dGlsLlZlY3Rvcik7XFxuXFxuZnVuY3Rpb24gZGVsZXRlRmlsZXMoZmlsZU5hbWUpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShmaWxlTmFtZSk7XFxuICAgIGlmICghZmlsZS5leGlzdHMoKSkge1xcbiAgICAgICAgLy9sb2coXFxcIuWIoOmZpOaWh+S7tuWksei0pe+8mlxcXCIgKyBmaWxlTmFtZSArIFxcXCLmlofku7bkuI3lrZjlnKhcXFwiKTtcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIGlmIChmaWxlLmlzRmlsZSgpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGRlbGV0ZUZpbGUoZmlsZU5hbWUpO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gZGVsZXRlRGlyZWN0b3J5KGZpbGVOYW1lKTtcXG4gICAgICAgIH1cXG5cXG4gICAgfVxcblxcbn1cXG4vKipcXG4gKiDliKDpmaTljZXkuKrmlofku7ZcXG4gKiBcXG4gKiBAcGFyYW0gZmlsZU5hbWVcXG4gKiAgICAgICAgICAgIOiiq+WIoOmZpOaWh+S7tueahOaWh+S7tuWQjVxcbiAqIEByZXR1cm4g5Y2V5Liq5paH5Lu25Yig6Zmk5oiQ5Yqf6L+U5ZuedHJ1ZSzlkKbliJnov5Tlm55mYWxzZVxcbiAqL1xcbmZ1bmN0aW9uIGRlbGV0ZUZpbGUoZmlsZU5hbWUpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShmaWxlTmFtZSk7XFxuICAgIGlmIChmaWxlLmlzRmlsZSgpICYmIGZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgIGZpbGUuZGVsZXRlKCk7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk5Y2V5Liq5paH5Lu2XFxcIiArIGZpbGVOYW1lICsgXFxcIuaIkOWKn++8gVxcXCIpO1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk5Y2V5Liq5paH5Lu2XFxcIiArIGZpbGVOYW1lICsgXFxcIuWksei0pe+8gVxcXCIpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuXFxufVxcbi8qKlxcbiAqIOWIoOmZpOebruW9le+8iOaWh+S7tuWkue+8ieS7peWPiuebruW9leS4i+eahOaWh+S7tlxcbiAqIFxcbiAqIEBwYXJhbSBkaXJcXG4gKiAgICAgICAgICAgIOiiq+WIoOmZpOebruW9leeahOaWh+S7tui3r+W+hFxcbiAqIEByZXR1cm4g55uu5b2V5Yig6Zmk5oiQ5Yqf6L+U5ZuedHJ1ZSzlkKbliJnov5Tlm55mYWxzZVxcbiAqL1xcbmZ1bmN0aW9uIGRlbGV0ZURpcmVjdG9yeShkaXIpIHtcXG4gICAgLy8g5aaC5p6cZGly5LiN5Lul5paH5Lu25YiG6ZqU56ym57uT5bC+77yM6Ieq5Yqo5re75Yqg5paH5Lu25YiG6ZqU56ymXFxuICAgIGlmICghZGlyLmVuZHNXaXRoKEZpbGUuc2VwYXJhdG9yKSkge1xcbiAgICAgICAgZGlyID0gZGlyICsgRmlsZS5zZXBhcmF0b3I7XFxuICAgIH1cXG4gICAgbGV0IGRpckZpbGUgPSBuZXcgRmlsZShkaXIpO1xcbiAgICAvLyDlpoLmnpxkaXLlr7nlupTnmoTmlofku7bkuI3lrZjlnKjvvIzmiJbogIXkuI3mmK/kuIDkuKrnm67lvZXvvIzliJnpgIDlh7pcXG4gICAgaWYgKCFkaXJGaWxlLmV4aXN0cygpIHx8ICFkaXJGaWxlLmlzRGlyZWN0b3J5KCkpIHtcXG4gICAgICAgIC8vbG9nKFxcXCLliKDpmaTnm67lvZXlpLHotKVcXFwiICsgZGlyICsgXFxcIuebruW9leS4jeWtmOWcqO+8gVxcXCIpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxuICAgIGxldCBmbGFnID0gdHJ1ZTtcXG4gICAgLy8g5Yig6Zmk5paH5Lu25aS55LiL55qE5omA5pyJ5paH5Lu2KOWMheaLrOWtkOebruW9lSlcXG4gICAgbGV0IGZpbGVzID0gZGlyRmlsZS5saXN0RmlsZXMoKTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBmaWxlcy5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgLy8g5Yig6Zmk5a2Q5paH5Lu2XFxuICAgICAgICBpZiAoZmlsZXNbaV0uaXNGaWxlKCkpIHtcXG4gICAgICAgICAgICBmbGFnID0gZGVsZXRlRmlsZShmaWxlc1tpXS5nZXRBYnNvbHV0ZVBhdGgoKSk7XFxuICAgICAgICAgICAgaWYgKCFmbGFnKSB7XFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gZWxzZSB7IC8vIOWIoOmZpOWtkOebruW9lVxcbiAgICAgICAgICAgIGZsYWcgPSBkZWxldGVEaXJlY3RvcnkoZmlsZXNbaV0uZ2V0QWJzb2x1dGVQYXRoKCkpO1xcbiAgICAgICAgICAgIGlmICghZmxhZykge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgaWYgKCFmbGFnKSB7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk55uu5b2V5aSx6LSlXFxcIik7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG4gICAgLy8g5Yig6Zmk5b2T5YmN55uu5b2VXFxuICAgIGlmIChkaXJGaWxlLmRlbGV0ZSgpKSB7XFxuICAgICAgICAvL2xvZyhcXFwi5Yig6Zmk55uu5b2VXFxcIiArIGRpciArIFxcXCLmiJDlip/vvIFcXFwiKTtcXG4gICAgICAgIHJldHVybiB0cnVlO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgLy9sb2coXFxcIuWIoOmZpOebruW9lVxcXCIgKyBkaXIgKyBcXFwi5aSx6LSl77yBXFxcIik7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG59XFxuXFxuLy9jb3B55Y2V5Liq5paH5Lu2XFxuZnVuY3Rpb24gY29weUZpbGUoc291cmNlLCB0YXJnZXQsIGlzQ292ZXIpIHtcXG4gICAgbGV0IHNvdXJjZVBhdGggPSBQYXRocy5nZXQoc291cmNlKTtcXG4gICAgbGV0IHRhcmdldFBhdGggPSBQYXRocy5nZXQodGFyZ2V0KTtcXG4gICAgbGV0IGlzRXhpc3QgPSBGaWxlcy5leGlzdHModGFyZ2V0UGF0aCk7XFxuICAgIGlmIChGaWxlcy5pc0RpcmVjdG9yeShzb3VyY2VQYXRoKSB8fCAoaXNFeGlzdCAmJiAhaXNDb3ZlcikgfHwgKGlzRXhpc3QgJiYgRmlsZXMuaXNEaXJlY3RvcnkodGFyZ2V0UGF0aCkpKSB7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG4gICAgdHJ5IHtcXG4gICAgICAgIGlmICghaXNFeGlzdCkge1xcbiAgICAgICAgICAgIEZpbGVzLmNyZWF0ZURpcmVjdG9yaWVzKHRhcmdldFBhdGguZ2V0UGFyZW50KCkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGlzQ292ZXIgPT09IHRydWUpIHtcXG4gICAgICAgICAgICBGaWxlcy5jb3B5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HLCBTdGFuZGFyZENvcHlPcHRpb24uQ09QWV9BVFRSSUJVVEVTKTtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgRmlsZXMuY29weShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBTdGFuZGFyZENvcHlPcHRpb24uQ09QWV9BVFRSSUJVVEVTKTtcXG4gICAgICAgIH1cXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxufVxcblxcbmZ1bmN0aW9uIGdldEZpbGVUaW1lKHBhdGgpIHtcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShwYXRoKTtcXG4gICAgbGV0IGxhc3RNb2RpZmllZCA9IGZpbGUubGFzdE1vZGlmaWVkKCk7XFxuICAgIGxldCBkYXRlID0gbmV3IERhdGUobGFzdE1vZGlmaWVkKTtcXG4gICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xcbn1cXG5cXG5mdW5jdGlvbiBnZXROYW1lKHBhdGgpIHtcXG4gICAgcmV0dXJuIG5ldyBGaWxlKHBhdGgpLmdldE5hbWUoKSArIFxcXCJcXFwiO1xcbn1cXG5cXG5mdW5jdGlvbiBnZXRGaWxlUGF0aChwYXRoLCB0eXBlLCBleHBhbmQpIHtcXG4gICAgdHlwZSA9IHR5cGUgfHwgXFxcImZpbGVcXFwiO1xcbiAgICBpZiAoIVtcXFwiZmlsZVxcXCIsIFxcXCJkaXJcXFwiXS5pbmNsdWRlcyh0eXBlKSkgdGhyb3cgbmV3IEVycm9yKFxcXCLnsbvlnovplJnor69cXFwiKTtcXG4gICAgbGV0IGZpbGVUeXBlID0gdHlwZSA9PT0gXFxcImZpbGVcXFwiID8gXFxcImlzRmlsZVxcXCIgOiBcXFwiaXNEaXJlY3RvcnlcXFwiO1xcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKHBhdGgpO1xcbiAgICBsZXQgYXJyYXkgPSBmaWxlLmxpc3RGaWxlcygpIHx8IFtdO1xcbiAgICBsZXQgcGF0aExpc3QgPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgaWYgKGFycmF5W2ldW2ZpbGVUeXBlXSgpKSB7XFxuICAgICAgICAgICAgcGF0aExpc3QucHVzaCh7XFxuICAgICAgICAgICAgICAgIG5hbWU6IGFycmF5W2ldLmdldE5hbWUoKSArIFxcXCJcXFwiLFxcbiAgICAgICAgICAgICAgICBwYXRoOiBhcnJheVtpXS5nZXRQYXRoKCkgKyBcXFwiXFxcIixcXG4gICAgICAgICAgICAgICAgbGFzdE1vZGlmaWVkOiBOdW1iZXIoYXJyYXlbaV0ubGFzdE1vZGlmaWVkKCkpLFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGlmIChleHBhbmQpIHtcXG4gICAgICAgIHBhdGhMaXN0ID0gcGF0aExpc3QuZmlsdGVyKGl0ID0+IGl0Lm5hbWUuZW5kc1dpdGgoZXhwYW5kKSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIHBhdGhMaXN0O1xcbn1cXG5cXG5mdW5jdGlvbiBnZXRGaWxlcyhwYXRoLCB0eXBlLCBleHBhbmQpIHtcXG4gICAgbGV0IHR5cGVzID0ge1xcbiAgICAgICAgXFxcImZpbGVcXFwiOiBcXFwiaXNGaWxlXFxcIixcXG4gICAgICAgIFxcXCJkaXJcXFwiOiBcXFwiaXNEaXJlY3RvcnlcXFwiXFxuICAgIH07XFxuICAgIGxldCBmaWxlVHlwZSA9IHR5cGVzW3R5cGVdO1xcbiAgICBsZXQgZmlsZSA9IG5ldyBGaWxlKHBhdGgpO1xcbiAgICBsZXQgYXJyYXkgPSBmaWxlLmxpc3RGaWxlcygpIHx8IFtdO1xcbiAgICBsZXQgZmlsZUxpc3QgPSBbXTtcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhcnJheS5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgbGV0IGZpbGUgPSBhcnJheVtpXTtcXG4gICAgICAgIGlmICgoIWZpbGVUeXBlIHx8IGZpbGVbZmlsZVR5cGVdKCkpICYmICghZXhwYW5kIHx8IGZpbGUuZ2V0TmFtZSgpLmVuZHNXaXRoKGV4cGFuZCkpKSB7XFxuICAgICAgICAgICAgZmlsZUxpc3QucHVzaChmaWxlKTtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gZmlsZUxpc3Q7XFxufVxcblxcbmZ1bmN0aW9uIHJlbmFtZUZpbGUoZnJvbVBhdGgsIG5hbWUpIHtcXG4gICAgbGV0IGZyb21GaWxlID0gbmV3IEZpbGUoZnJvbVBhdGgpO1xcbiAgICBsZXQgdG9GaWxlID0gbmV3IEZpbGUoZnJvbUZpbGUuZ2V0UGFyZW50KCkgKyBcXFwiL1xcXCIgKyBuYW1lKTtcXG4gICAgdHJ5IHtcXG4gICAgICAgIGlmICghZnJvbUZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICB9XFxuICAgICAgICBpZiAodG9GaWxlLmV4aXN0cygpKSB7XFxuICAgICAgICAgICAgaWYgKCF0b0ZpbGUuZGVsZXRlKCkpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIEZpbGVzLm1vdmUoZnJvbUZpbGUudG9QYXRoKCksIHRvRmlsZS50b1BhdGgoKSwgU3RhbmRhcmRDb3B5T3B0aW9uLlJFUExBQ0VfRVhJU1RJTkcpO1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICB9XFxufVxcblxcbmZ1bmN0aW9uIG1vdmVGaWxlcyhmcm9tUGF0aCwgdG9QYXRoKSB7XFxuICAgIGxldCBmcm9tRmlsZSA9IG5ldyBGaWxlKGZyb21QYXRoKTtcXG4gICAgbGV0IHRvRmlsZSA9IG5ldyBGaWxlKHRvUGF0aCk7XFxuICAgIHRyeSB7XFxuICAgICAgICBpZiAoIWZyb21GaWxlLmV4aXN0cygpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKHRvRmlsZS5leGlzdHMoKSkge1xcbiAgICAgICAgICAgIGlmICghZGVsZXRlRmlsZXModG9QYXRoKSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgRmlsZXMubW92ZShmcm9tRmlsZS50b1BhdGgoKSwgdG9GaWxlLnRvUGF0aCgpLCBTdGFuZGFyZENvcHlPcHRpb24uUkVQTEFDRV9FWElTVElORyk7XFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gZmlsZVdyaXRlKHBhdGgsIGNvbnRlbnQpIHtcXG4gICAgd3JpdGVGaWxlKFxcXCJmaWxlOi8vXFxcIiArIHBhdGgsIGNvbnRlbnQpXFxufVxcblxcbmZ1bmN0aW9uIGZpbGVXcml0ZUFwcGVuZChwYXRoLCBjb250ZW50KSB7XFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUocGF0aCk7XFxuICAgIGxldCBwYXRocyA9IGZpbGUudG9QYXRoKCk7XFxuICAgIGlmIChmaWxlLmV4aXN0cygpKSB7XFxuICAgICAgICBGaWxlcy53cml0ZShwYXRocywgbmV3IGphdmFTdHJpbmcoY29udGVudCkuZ2V0Qnl0ZXMoKSwgU3RhbmRhcmRPcGVuT3B0aW9uLkFQUEVORCk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCwgY29udGVudCk7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gZ2V0VG90YWxTaXplT2ZGaWxlc0luRGlyKGZpbGUpIHtcXG4gICAgaWYgKGZpbGUuaXNGaWxlKCkpIHtcXG4gICAgICAgIHJldHVybiBmaWxlLmxlbmd0aCgpO1xcbiAgICB9XFxuICAgIGxldCBjaGlsZHJlbiA9IGZpbGUubGlzdEZpbGVzKCk7XFxuICAgIGxldCB0b3RhbCA9IDA7XFxuICAgIGlmIChjaGlsZHJlbiAhPSBudWxsKSB7XFxuICAgICAgICBmb3IgKGxldCBjaGlsZCBvZiBjaGlsZHJlbikge1xcbiAgICAgICAgICAgIHRvdGFsICs9IGdldFRvdGFsU2l6ZU9mRmlsZXNJbkRpcihjaGlsZCk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcmV0dXJuIHRvdGFsO1xcbn1cXG5cXG5mdW5jdGlvbiBnZXRGaWxlU2l6ZShmaWxlUGF0aCkge1xcbiAgICAvL0J5dGVcXG4gICAgbGV0IHNpemUgPSBnZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIobmV3IEZpbGUoZmlsZVBhdGgpKTtcXG4gICAgaWYgKHNpemUgPCAwKSB7XFxuICAgICAgICByZXR1cm4gbnVsbDtcXG4gICAgfVxcbiAgICBsZXQgdW5pdEZvcm0gPSBbXFxcIkJ5dGVcXFwiLCBcXFwiS0JcXFwiLCBcXFwiTUJcXFwiLCBcXFwiR0JcXFwiLCBcXFwiVEJcXFwiXTtcXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHVuaXRGb3JtLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxuICAgICAgICBpZiAoc2l6ZSA+IDEwMjQpIHtcXG4gICAgICAgICAgICBzaXplIC89IDEwMjQ7XFxuICAgICAgICAgICAgY29udGludWU7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBzaXplLnRvRml4ZWQoMikucmVwbGFjZSgvKFxcXFwuMDApJC8sIFxcXCJcXFwiKSArIHVuaXRGb3JtW2ldO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIHJldHVybiBcXFwiRVJST1I65pWw5YC86L+H5aSnXFxcIjtcXG59XFxuLy/lrozmlbTlkIjlubZcXG4vKlxcbmZ1bmN0aW9uIGZpbGVDb21iaW5lKGZpbGVzSW5wdXQsIGZpbGVPdXQsIGV4dGVuc2lvbiwgaW50ZXJjZXB0KSB7XFxuICAgIHdpdGgoamF2YVNjb3BlKSB7XFxuICAgICAgICBjb25zdCBUTVBfQlVGRkVSX1NJWkUgPSAweDMwMDAwO1xcbiAgICAgICAgY29uc3QgQlVGRkVSX1NJWkUgPSAweDMwMDAwMDtcXG4gICAgICAgIC8v5ZCI5bm25Li05pe25paH5Lu2XFxuICAgICAgICBsZXQgaW5wdXRGaWxlID0gbmV3IEZpbGUoZmlsZXNJbnB1dCk7XFxuICAgICAgICBsZXQgdG1wRmlsZSA9IG5ldyBGaWxlKGZpbGVPdXQgKyBcXFwiLnRtcFxcXCIpO1xcbiAgICAgICAgbGV0IHRvcyA9IG5ldyBCdWZmZXJlZE91dHB1dFN0cmVhbShuZXcgRmlsZU91dHB1dFN0cmVhbSh0bXBGaWxlKSk7XFxuICAgICAgICBsZXQgaW5wdXRGaWxlcyA9IGlucHV0RmlsZS5saXN0RmlsZXMoKTtcXG4gICAgICAgIGxldCB0YnlzID0gQXJyYXkubmV3SW5zdGFuY2UoQnl0ZS5UWVBFLCBUTVBfQlVGRkVSX1NJWkUpO1xcbiAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBpbnB1dEZpbGVzKSB7XFxuICAgICAgICAgICAgaWYgKGZpbGUuZ2V0TmFtZSgpLmVuZHNXaXRoKGV4dGVuc2lvbikpIHtcXG4gICAgICAgICAgICAgICAgbGV0IGlzID0gbmV3IEZpbGVJbnB1dFN0cmVhbShmaWxlKTtcXG4gICAgICAgICAgICAgICAgbGV0IGxlbiA9IDA7XFxuICAgICAgICAgICAgICAgIHdoaWxlICgobGVuID0gaXMucmVhZCh0YnlzKSkgIT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgICAgIHRvcy53cml0ZSh0YnlzLCAwLCBsZW4pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGlzLmNsb3NlKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgICAgdG9zLmNsb3NlKCk7XFxuICAgICAgICAvL+inhOWImeabv+aNouinhOWImTtcXG4gICAgICAgIGxldCBvdXRGaWxlID0gbmV3IEZpbGUoZmlsZU91dCk7XFxuICAgICAgICBpZiAodHlwZW9mIGludGVyY2VwdCA9PT0gXFxcImZ1bmN0aW9uXFxcIikge1xcbiAgICAgICAgICAgIGxldCB0aXMgPSBuZXcgRmlsZUlucHV0U3RyZWFtKHRtcEZpbGUpO1xcbiAgICAgICAgICAgIGxldCBvcyA9IG5ldyBCdWZmZXJlZE91dHB1dFN0cmVhbShuZXcgRmlsZU91dHB1dFN0cmVhbShvdXRGaWxlKSk7XFxuICAgICAgICAgICAgbGV0IGxlbiA9IDA7XFxuICAgICAgICAgICAgbGV0IGJ5cyA9IEFycmF5Lm5ld0luc3RhbmNlKEJ5dGUuVFlQRSwgQlVGRkVSX1NJWkUpO1xcbiAgICAgICAgICAgIHdoaWxlICgobGVuID0gdGlzLnJlYWQoYnlzKSkgIT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgbGV0IG5ieXMgPSBpbnRlcmNlcHQobmV3IFN0cmluZyhieXMsMCxsZW4pKTtcXG4gICAgICAgICAgICAgICAgb3Mud3JpdGUobmJ5cywgMCwgbmJ5cy5sZW5ndGgpO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB0bXBGaWxlLmRlbGV0ZSgpO1xcbiAgICAgICAgICAgIHRpcy5jbG9zZSgpO1xcbiAgICAgICAgICAgIG9zLmNsb3NlKCk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGlmIChvdXRGaWxlLmV4aXN0cygpKSB7XFxuICAgICAgICAgICAgICAgIG91dEZpbGUuZGVsZXRlKCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHRtcEZpbGUucmVuYW1lVG8ob3V0RmlsZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG59Ki9cXG4vL+aui1xcbmZ1bmN0aW9uIGZpbGVSdWxlKGZpbGVzSW5wdXQsIGZpbGVPdXQsIGludGVyY2VwdCkge1xcbiAgICB3aXRoKGphdmFTY29wZSkge1xcbiAgICAgICAgY29uc3QgQlVGRkVSX1NJWkUgPSAweDMwMDAwMDtcXG4gICAgICAgIGxldCB0bXBGaWxlID0gbmV3IEZpbGUoZmlsZXNJbnB1dCk7XFxuICAgICAgICBpZiAoISh0bXBGaWxlLmV4aXN0cygpICYmIHRtcEZpbGUuaXNGaWxlKCkpKSB7XFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGV0IG91dEZpbGUgPSBuZXcgRmlsZShmaWxlT3V0KTtcXG5cXG4gICAgICAgIGxldCB0aXMgPSBuZXcgRmlsZUlucHV0U3RyZWFtKHRtcEZpbGUpO1xcbiAgICAgICAgbGV0IG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKG91dEZpbGUpKTtcXG4gICAgICAgIGxldCBsZW4gPSAwO1xcbiAgICAgICAgbGV0IGJ5cyA9IEFycmF5Lm5ld0luc3RhbmNlKEJ5dGUuVFlQRSwgQlVGRkVSX1NJWkUpO1xcbiAgICAgICAgd2hpbGUgKChsZW4gPSB0aXMucmVhZChieXMpKSAhPSAtMSkge1xcbiAgICAgICAgICAgIGxldCBuYnlzID0gaW50ZXJjZXB0KG5ldyBTdHJpbmcoYnlzLCAwLCBsZW4pKTtcXG4gICAgICAgICAgICBvcy53cml0ZShuYnlzLCAwLCBuYnlzLmxlbmd0aCk7XFxuICAgICAgICB9XFxuICAgICAgICB0bXBGaWxlLmRlbGV0ZSgpO1xcbiAgICAgICAgdGlzLmNsb3NlKCk7XFxuICAgICAgICBvcy5jbG9zZSgpO1xcbiAgICAgICAgcmV0dXJuIHRydWU7XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gcmVhZEZpbGUocGF0aCkge1xcbiAgICB0cnkge1xcbiAgICAgICAgbGV0IHBhdGhzID0gUGF0aHMuZ2V0KHBhdGgpO1xcbiAgICAgICAgaWYgKCFGaWxlcy5leGlzdHMocGF0aHMpKSByZXR1cm4gXFxcIlxcXCI7XFxuICAgICAgICByZXR1cm4gU3RyaW5nKG5ldyBqYXZhU3RyaW5nKEZpbGVzLnJlYWRBbGxCeXRlcyhwYXRocykpKTtcXG4gICAgfSBjYXRjaCB7XFxuICAgICAgICByZXR1cm4gXFxcIlxcXCI7XFxuICAgIH1cXG59XFxuJC5leHBvcnRzID0ge1xcbiAgICBnZXRGaWxlVGltZTogKHBhdGgpID0+IGdldEZpbGVUaW1lKHBhdGgpLFxcbiAgICBnZXRGaWxlUGF0aDogKHBhdGgsIHR5cGUsIGV4cGFuZCkgPT4gZ2V0RmlsZVBhdGgocGF0aCwgdHlwZSwgZXhwYW5kKSxcXG4gICAgZGVsZXRlRmlsZXM6IChwYXRoKSA9PiBkZWxldGVGaWxlcyhwYXRoKSxcXG4gICAgcmVuYW1lRmlsZTogKHBhdGgsIG5hbWUpID0+IHJlbmFtZUZpbGUocGF0aCwgbmFtZSksXFxuICAgIG1vdmVGaWxlczogKGZyb21QYXRoLCB0b1BhdGgpID0+IG1vdmVGaWxlcyhmcm9tUGF0aCwgdG9QYXRoKSxcXG4gICAgZmlsZVdyaXRlOiAocGF0aCwgY29udGVudCkgPT4gZmlsZVdyaXRlKHBhdGgsIGNvbnRlbnQpLFxcbiAgICBmaWxlV3JpdGVBcHBlbmQ6IChwYXRoLCBjb250ZW50KSA9PiBmaWxlV3JpdGVBcHBlbmQocGF0aCwgY29udGVudCksXFxuICAgIGdldE5hbWU6IChwYXRoKSA9PiBnZXROYW1lKHBhdGgpLFxcbiAgICBnZXRGaWxlU2l6ZTogKGZpbGVQYXRoKSA9PiBnZXRGaWxlU2l6ZShmaWxlUGF0aCksXFxuICAgIGZpbGVSdWxlOiAoZmlsZXNJbnB1dCwgZmlsZU91dCwgaW50ZXJjZXB0KSA9PiBmaWxlUnVsZShmaWxlc0lucHV0LCBmaWxlT3V0LCBpbnRlcmNlcHQpLFxcbiAgICBjb3B5RmlsZTogKHNvdXJjZSwgdGFyZ2V0LCBpc0NvdmVyKSA9PiBjb3B5RmlsZShzb3VyY2UsIHRhcmdldCwgaXNDb3ZlciksXFxuICAgIHJlYWRGaWxlOiAocGF0aCkgPT4gcmVhZEZpbGUocGF0aCksXFxuICAgIGdldEZpbGVzOiAocGF0aCwgdHlwZSwgZXhwYW5kKSA9PiBnZXRGaWxlcyhwYXRoLCB0eXBlLCBleHBhbmQpLFxcbiAgICBnZXRUb3RhbFNpemVPZkZpbGVzSW5EaXI6KGZpbGUpPT5nZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIoZmlsZSlcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJ0ZXh0XzJcIixcIm5hbWVcIjpcIiN2LuS4i+i9veWIl+ihqC3mma7pgJrkuIvovb1cIixcInBhdGhcIjpcImRvd25sb2FkLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmNvbnN0IHZpZXdDb25maWcgPSBPYmplY3QuYXNzaWduKHtcXG4gICAgY2hhcHRlckxpc3Q6IFtdLFxcbiAgICBpbmZvOiB7fSxcXG4gICAgZGVmYXVsdFZpZXc6IFxcXCIwXFxcIlxcbn0sIE1ZX1BBUkFNUyk7XFxudmlld0NvbmZpZy5pbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgIHJ1bGVOYW1lOiBcXFwiXFxcIixcXG4gICAgYm9va05hbWU6IFxcXCJcXFwiLFxcbiAgICBib29rVG9wUGljOiBcXFwiXFxcIixcXG4gICAgcGFyc2VDb2RlOiBcXFwiXFxcIixcXG4gICAgZGVjb2RlOiB1bmRlZmluZWQsXFxuICAgIHR5cGU6IFxcXCJjb21pY1xcXCIsXFxuICAgIGNvbWljU2NoZW1lOiBcXFwiMVxcXCJcXG59LCB2aWV3Q29uZmlnLmluZm8pO1xcbmxldCB7XFxuICAgIGNoYXB0ZXJMaXN0LFxcbiAgICBpbmZvLFxcbiAgICBkZWZhdWx0Vmlld1xcbn0gPSB2aWV3Q29uZmlnO1xcbnNldFBhZ2VUaXRsZShcXFwi6YCJ5oup5ZmofFxcXCIgKyBpbmZvLmJvb2tOYW1lKVxcblxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFwiKTtcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcblxcbnZpZXdDb25maWcuaW5mby5ib29rTmFtZT1Ub29sLnRleHRTaGllbGQodmlld0NvbmZpZy5pbmZvLmJvb2tOYW1lKTtcXG52aWV3Q29uZmlnLmluZm8ucnVsZU5hbWU9VG9vbC50ZXh0U2hpZWxkKHZpZXdDb25maWcuaW5mby5ydWxlTmFtZSk7XFxuXFxuY29uc3QgZGVmX0RvVmlfU3R5bGUgPSBDb25maWcuZGVmX0RvVmlfU3R5bGU7XFxuY29uc3QgTVlfSUQgPSBpbmZvLnJ1bGVOYW1lICsgXFxcIi8vXFxcIiArIGluZm8uYm9va05hbWU7XFxuXFxubGV0IGlzU3RhcnQgPSBnZXRNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIpO1xcbmxldCB2aWV3TW9kZSA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjp2aWV3TW9kZVxcXCIsIGRlZmF1bHRWaWV3KTtcXG5sZXQgaXNSZXZlcnNlID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmlzUmV2ZXJzZVxcXCIsIFxcXCIwXFxcIik7XFxubGV0IHRhZ0ZpbHRlciA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjp0YWdGaWx0ZXJcXFwiLCBDb25maWcuZGVmX0RvVmlfVHlwZSk7XFxuXFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKChNWV9JRCkgPT4ge1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpsb2FkaW5nVGVhbVxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjp2aWV3TW9kZVxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpjb21wbGV0ZWRcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOnRhZ0ZpbHRlclxcXCIpO1xcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcIjpwYWdlTnVtXFxcIik7XFxufSwgTVlfSUQpKTtcXG5cXG5sZXQgbGF5b3V0ID0gW107XFxuXFxuaWYgKGlzU3RhcnQgPT09IFxcXCIxXFxcIikge1xcbiAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6dmlld01vZGVcXFwiLCBkZWZhdWx0Vmlldyk7XFxuICAgIHZpZXdNb2RlID0gXFxcIjFcXFwiO1xcbn1cXG5cXG5sZXQgYmFja3VwQ2hhcHRlckxpc3QgPSBjaGFwdGVyTGlzdDtcXG5pZiAodHlwZW9mIGNoYXB0ZXJMaXN0ID09PSBcXFwic3RyaW5nXFxcIikge1xcbiAgICBjaGFwdGVyTGlzdCA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBjaGFwdGVyTGlzdCkgfHwgXFxcIltdXFxcIik7XFxufVxcbmxldCBjaGFwdGVyQWxsID0gY2hhcHRlckxpc3Q7XFxuY2hhcHRlckxpc3QgPSBjaGFwdGVyTGlzdC5tYXAoKGl0ZW0sIENJRCkgPT4ge1xcbiAgICBpdGVtLkNJRCA9IENJRDtcXG4gICAgaXRlbS50aXRsZT1Ub29sLnRleHRTaGllbGQoaXRlbS50aXRsZSk7XFxuICAgIHJldHVybiBpdGVtO1xcbn0pO1xcbmxldCBwYWdlTnVtID0gTnVtYmVyKGdldE15VmFyKE1ZX0lEICsgXFxcIjpwYWdlTnVtXFxcIiwgXFxcIjFcXFwiKSk7XFxubGV0IGNoYXB0ZXJDaHVuayA9IFtjaGFwdGVyTGlzdF0uY29uY2F0KFRvb2wuY2h1bmsoY2hhcHRlckxpc3QsIENvbmZpZy52aWV3UGFnZVNpemUpKTtcXG5jaGFwdGVyTGlzdCA9IGNoYXB0ZXJDaHVua1twYWdlTnVtXSB8fCBbXTtcXG5cXG5mdW5jdGlvbiBzZXRUeXBlKCkge1xcbiAgICBsZXQgc2V0ID0gKHRhZywgcHV0KSA9PiB7XFxuICAgICAgICBwdXRNeVZhcihwdXQsIHRhZyk7XFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiXFxuICAgIH07XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiAwID09IHBhZ2VOdW0gPyBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIChcXFwi5YWo6YOoKFxcXCIgKyBjaGFwdGVyQWxsLmxlbmd0aCArIFxcXCIpXFxcIikuZm9udGNvbG9yKFxcXCIjMjNBRDZGXFxcIikgOiBcXFwi5YWo6YOoKFxcXCIgKyBjaGFwdGVyQWxsLmxlbmd0aCArIFxcXCIpXFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShzZXQsIDAsIE1ZX0lEICsgXFxcIjpwYWdlTnVtXFxcIiksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxuICAgIH0pO1xcbiAgICBmb3IgKGxldCBpID0gMTsgaSA8IGNoYXB0ZXJDaHVuay5sZW5ndGg7IGkrKykge1xcbiAgICAgICAgbGV0IHRhZ1RleHQgPSAoaSAtIDEpICogQ29uZmlnLnZpZXdQYWdlU2l6ZSArIFxcXCItXFxcIiArICgoaSAtIDEpICogQ29uZmlnLnZpZXdQYWdlU2l6ZSArIGNoYXB0ZXJDaHVua1tpXS5sZW5ndGgpO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBpID09IHBhZ2VOdW0gPyBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIHRhZ1RleHQuZm9udGNvbG9yKFxcXCIjMjNBRDZGXFxcIikgOiB0YWdUZXh0LFxcbiAgICAgICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShzZXQsIGksIE1ZX0lEICsgXFxcIjpwYWdlTnVtXFxcIiksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJibGFua19ibG9ja1xcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiB0YWdGaWx0ZXIgPT09IFxcXCIwXFxcIiA/IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIuWFqOmDqFxcXCIuZm9udGNvbG9yKFxcXCIjMjNBRDZGXFxcIikgOiBcXFwi5YWo6YOoXFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShzZXQsIFxcXCIwXFxcIiwgTVlfSUQgKyBcXFwiOnRhZ0ZpbHRlclxcXCIpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IHRhZ0ZpbHRlciA9PT0gXFxcIjFcXFwiID8gXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi5pyq5LiL6L29XFxcIi5mb250Y29sb3IoXFxcIiMyM0FENkZcXFwiKSA6IFxcXCLmnKrkuIvovb1cXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKHNldCwgXFxcIjFcXFwiLCBNWV9JRCArIFxcXCI6dGFnRmlsdGVyXFxcIiksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogdGFnRmlsdGVyID09PSBcXFwiMlxcXCIgPyBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLlt7LkuIvovb1cXFwiLmZvbnRjb2xvcihcXFwiIzIzQUQ2RlxcXCIpIDogXFxcIuW3suS4i+i9vVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoc2V0LCBcXFwiMlxcXCIsIE1ZX0lEICsgXFxcIjp0YWdGaWx0ZXJcXFwiKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG4gICAgfSk7XFxufVxcbmxldCBjaGFwdGVyVGVhbSA9IFtdO1xcbmxldCByZWNvcmQgPSBbXTtcXG5pZiAoaW5mby50eXBlID09PSBcXFwiY29taWNcXFwiKSB7XFxuICAgIGxldCBsYXp5ID0gJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoKSA9PiB7XFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgbGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChpbnB1dCk7XFxuICAgICAgICBsZXQgcGljbGlzdCA9IGZpbGVsaXN0Lm1hcCgoaXRlbSwgaSkgPT4gXFxcImZpbGU6Ly9cXFwiICsgaW5wdXQgKyBcXFwiL1xcXCIgKyAoaSArIDEpICsgXFxcIi5qcGdcXFwiKTtcXG4gICAgICAgIHJldHVybiBcXFwicGljczovL1xcXCIgKyBwaWNsaXN0LmpvaW4oXFxcIiYmXFxcIik7XFxuICAgIH0pO1xcblxcbiAgICBmdW5jdGlvbiBjb21GdW4oaSwgaXRlbSkge1xcbiAgICAgICAgbGV0IHJvb3RQYXRoID0gQ29uZmlnLmNvbWljUGF0aCArIFxcXCIvXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFwiL1xcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcIi9cXFwiICsgaSArIFxcXCIkQSRcXFwiICsgaXRlbS50aXRsZTtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJxcXFwiICsgaXRlbS50aXRsZSArIFxcXCLigJ3igJ1cXFwiLFxcbiAgICAgICAgICAgIHVybDogcm9vdFBhdGggKyBsYXp5LFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjXFxcIiArIGksXFxuICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICBGaWxlLmdldEZpbGVQYXRoKENvbmZpZ1tpbmZvLnR5cGUgKyBcXFwiUGF0aFxcXCJdICsgXFxcIi9cXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXCIvXFxcIiArIGluZm8uYm9va05hbWUsIFxcXCJkaXJcXFwiKS5mb3JFYWNoKChmaWxlKSA9PiB7XFxuICAgICAgICBsZXQgYXR0ID0gVG9vbC5zcGxpdChmaWxlLm5hbWUsIFxcXCIkXFxcIiwgMik7XFxuICAgICAgICBpZiAoYXR0Lmxlbmd0aCA9PT0gMyAmJiBhdHRbMV0gPT09IChcXFwiQVxcXCIpKSB7XFxuICAgICAgICAgICAgcmVjb3JkLnB1c2goYXR0WzJdKTtcXG4gICAgICAgIH1cXG4gICAgfSk7XFxufSBlbHNlIHtcXG4gICAgZnVuY3Rpb24gY29tRnVuKGksIGl0ZW0pIHtcXG4gICAgICAgIHJldHVybiB7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJxcXFwiICsgaXRlbS50aXRsZSArIFxcXCLigJ3igJ1cXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9Ob3ZlbE1haW5Cb2R5I2F1dG9QYWdlIyNyZWFkVGhlbWUjXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI1xcXCIgKyBpLFxcbiAgICAgICAgICAgICAgICBwYXRoOiBDb25maWcubm92ZWxQYXRoICsgXFxcIi9cXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXCIvXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFwiL1xcXCIgKyBpICsgXFxcIiRBJFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIi50eHRcXFwiLFxcbiAgICAgICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZVxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgY29sX3R5cGU6IGRlZl9Eb1ZpX1N0eWxlXFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgRmlsZS5nZXRGaWxlUGF0aChDb25maWdbaW5mby50eXBlICsgXFxcIlBhdGhcXFwiXSArIFxcXCIvXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFwiL1xcXCIgKyBpbmZvLmJvb2tOYW1lLCBcXFwiZmlsZVxcXCIsIFxcXCIudHh0XFxcIikuZm9yRWFjaCgoZmlsZSkgPT4ge1xcbiAgICAgICAgbGV0IGF0dCA9IFRvb2wuc3BsaXQoZmlsZS5uYW1lLCBcXFwiJFxcXCIsIDIpO1xcbiAgICAgICAgaWYgKGF0dC5sZW5ndGggPT09IDMgJiYgYXR0WzFdID09PSAoXFxcIkFcXFwiKSkge1xcbiAgICAgICAgICAgIHJlY29yZC5wdXNoKGF0dFsyXS5zbGljZSgwLCBhdHRbMl0ubGFzdEluZGV4T2YoXFxcIi5cXFwiKSkpO1xcbiAgICAgICAgfVxcbiAgICB9KTtcXG59XFxuXFxuZnVuY3Rpb24gY2xpY2tEb3dubG9hZChpdGVtLCBpbmZvLCBNWV9JRCwgaSkge1xcbiAgICBsZXQgbG9hZGluZ1RlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpsb2FkaW5nVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICBsZXQgRWxlbWVudEluZGV4ID0gbG9hZGluZ1RlYW0uaW5kZXhPZihpKTtcXG4gICAgaWYgKEVsZW1lbnRJbmRleCA+IC0xKSByZXR1cm4gXFxcInRvYXN0Oi8v5q2j5Zyo5LiL6L29XFxcIjtcXG5cXG4gICAgbG9hZGluZ1RlYW0ucHVzaChpKTtcXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmxvYWRpbmdUZWFtXFxcIiwgSlNPTi5zdHJpbmdpZnkobG9hZGluZ1RlYW0pKTtcXG4gICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICB0aXRsZTogXFxcIuKAmOKAmFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIuKAmeKAmVxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjXFxcIiArIGlcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGxldCByZXN1bHQgPSBcXFwidG9hc3Q6Ly/kuIvovb3lpLHotKVcXFwiO1xcbiAgICB0cnkge1xcbiAgICAgICAgdG9hc3QoXFxcIuW8gOWni+S4i+i9vTpcXFwiICsgaXRlbS50aXRsZSk7XFxuICAgICAgICBsZXQgZG93bmxvYWQgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Eb3dubG9hZC5leGUuanNcXFwiKTtcXG4gICAgICAgIHJlc3VsdCA9IGRvd25sb2FkKGl0ZW0sIGluZm8sIGksIE1ZX0lEKTtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi4oCc4oCcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFwi4oCd4oCdXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJ0b2FzdDovL+W3suS4i+i9vVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNcXFwiICsgaVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI1xcXCIgKyBpXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgfSBmaW5hbGx5IHtcXG4gICAgICAgIGxvYWRpbmdUZWFtLnNwbGljZShFbGVtZW50SW5kZXgsIDEpO1xcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmxvYWRpbmdUZWFtXFxcIiwgSlNPTi5zdHJpbmdpZnkobG9hZGluZ1RlYW0pKTtcXG4gICAgfVxcbiAgICByZXR1cm4gcmVzdWx0O1xcbn1cXG5cXG5mdW5jdGlvbiBzaW5nbGVWaWV3KCkge1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuWPjei9rOWIl+ihqFxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGlzUmV2ZXJzZSwgTVlfSUQpID0+IHtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6aXNSZXZlcnNlXFxcIiwgaXNSZXZlcnNlID09PSBcXFwiMFxcXCIgPyBcXFwiMVxcXCIgOiBcXFwiMFxcXCIpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgaXNSZXZlcnNlLCBNWV9JRCksXFxuICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9pbWcuaWNvbnM4LmNvbS8/aWQ9MzNudkRxYkhIN0hXJnNpemU9NDgmZm9ybWF0PWdpZiZ0b2tlbj1cXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uXzJcXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuaJuemHj+S4i+i9vVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGxvYWRpbmdUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6bG9hZGluZ1RlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICBpZiAobG9hZGluZ1RlYW0ubGVuZ3RoID4gMCkgcmV0dXJuIFxcXCJ0b2FzdDovL+i/mOacieS7u+WKoeayoeacieWujOaIkFxcXCI7XFxuICAgICAgICAgICAgaWYgKGdldEFwcFZlcnNpb24oKSA8IDI1OTQpIHJldHVybiBcXFwidG9hc3Q6Ly/mnKrlvIDmlL5cXFwiO1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjp2aWV3TW9kZVxcXCIsIFxcXCIxXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuXFxuICAgICAgICB9LCBNWV9JRCksXFxuICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9pbWcuaWNvbnM4LmNvbS8/Zm9ybWF0PWdpZiZpZD0wdWFmYU1OenhqODgmdG9rZW49XFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl8yXFxcIlxcbiAgICB9KTtcXG4gICAgc2V0VHlwZSgpO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxuICAgIH0pO1xcbiAgICBsZXQgbG9hZGluZ1RlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpsb2FkaW5nVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICBmb3IgKGxldCBpID0gMCwgaXRlbSA9IGNoYXB0ZXJMaXN0WzBdOyBpIDwgY2hhcHRlckxpc3QubGVuZ3RoOyBpdGVtID0gY2hhcHRlckxpc3RbKytpXSkge1xcbiAgICAgICAgbGV0IGlzX2Rvd25sb2FkID0gcmVjb3JkLmluY2x1ZGVzKGl0ZW0udGl0bGUpO1xcbiAgICAgICAgaWYgKGlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcIjFcXFwiKSB7XFxuICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaChjb21GdW4oaXRlbS5DSUQsIGl0ZW0pKTtcXG4gICAgICAgIH0gZWxzZSBpZiAoIWlzX2Rvd25sb2FkICYmIHRhZ0ZpbHRlciAhPT0gXFxcIjJcXFwiKSB7XFxuICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBsb2FkaW5nVGVhbS5pbmNsdWRlcyhpdGVtLkNJRCkgPyBcXFwi4oCY4oCYXFxcIiArIGl0ZW0udGl0bGUgKyBcXFwi4oCZ4oCZXFxcIiA6IGl0ZW0udGl0bGUsXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZShjbGlja0Rvd25sb2FkLCBpdGVtLCBpbmZvLCBNWV9JRCwgaXRlbS5DSUQpLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNcXFwiICsgaXRlbS5DSURcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGRlZl9Eb1ZpX1N0eWxlXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gY2xpY2tDaG9vc2UodGl0bGUsIE1ZX0lELCBpKSB7XFxuICAgIGxldCBpc1N0YXJ0ID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmlzU3RhcnRcXFwiKTtcXG4gICAgaWYgKGlzU3RhcnQgPT09IFxcXCIxXFxcIikgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9vS4uLlxcXCI7XFxuICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgbGV0IEVsZW1lbnRJbmRleCA9IGJhdGNoVGVhbS5pbmRleE9mKGkpO1xcbiAgICBpZiAoRWxlbWVudEluZGV4ID4gLTEpIHtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI1xcXCIgKyBpXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgICAgICBiYXRjaFRlYW0uc3BsaWNlKEVsZW1lbnRJbmRleCwgMSk7XFxuICAgIH0gZWxzZSB7XFxuICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAmOKAmFxcXCIgKyB0aXRsZSArIFxcXCLigJnigJlcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjXFxcIiArIGlcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGJhdGNoVGVhbS5wdXNoKGkpO1xcbiAgICB9XFxuICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBKU09OLnN0cmluZ2lmeShiYXRjaFRlYW0pKTtcXG4gICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG59XFxuXFxuZnVuY3Rpb24gYmF0Y2hWaWV3KCkge1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuWNlemAieS4i+i9vVxcXCIsXFxuICAgICAgICBwaWNfdXJsOiBcXFwiaHR0cHM6Ly9pbWcuaWNvbnM4LmNvbS8/aWQ9UElpY3ZGNmViek1uJnNpemU9NDgmZm9ybWF0PWdpZiZ0b2tlbj1cXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChNWV9JRCkgPT4ge1xcbiAgICAgICAgICAgIGlmIChnZXRNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIpID09PSBcXFwiMVxcXCIpIHJldHVybiBcXFwidG9hc3Q6Ly/mraPlnKjmibnph4/kuIvovb1cXFwiO1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjp2aWV3TW9kZVxcXCIsIFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCBNWV9JRCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcImljb25fc21hbGxfNFxcXCJcXG4gICAgfSk7XFxuICAgIGxldCBzdGFydCA9IENvbmZpZy52aWV3UGFnZVNpemUgKiBNYXRoLm1heChwYWdlTnVtIC0gMSwgMCk7XFxuICAgIGxldCBlbmQgPSBzdGFydCArIGNoYXB0ZXJMaXN0Lmxlbmd0aDtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLpgInmi6nlhajpg6hcXFwiLFxcbiAgICAgICAgcGljX3VybDogXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9MUhWY0hMb056cml0JnRva2VuPVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHN0YXJ0LCBlbmQsIE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIikgPT09IFxcXCIxXFxcIikgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9veWTpn5cXFwiO1xcbiAgICAgICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuICAgICAgICAgICAgbGV0IGNob29zZVRlYW0gPSBUb29sLnJhbmdlKHN0YXJ0LCBlbmQpO1xcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBBcnJheS5mcm9tKG5ldyBTZXQoYmF0Y2hUZWFtLmNvbmNhdChjaG9vc2VUZWFtKSkpO1xcbiAgICAgICAgICAgIGxldCBjb21wbGV0ZWQgPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpjb21wbGV0ZWRcXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKChpKSA9PiAhY29tcGxldGVkLmluY2x1ZGVzKGkpKTtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgSlNPTi5zdHJpbmdpZnkoYmF0Y2hUZWFtKSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgICAgIH0sIHN0YXJ0LCBlbmQsIE1ZX0lEKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLlj5bmtojlhajpg6hcXFwiLFxcbiAgICAgICAgcGljX3VybDogXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9SHpFalBwSTNOTDhEJnRva2VuPVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHN0YXJ0LCBlbmQsIE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIikgPT09IFxcXCIxXFxcIikgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9veWTpn5cXFwiO1xcbiAgICAgICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuICAgICAgICAgICAgbGV0IGNob29zZVRlYW0gPSBuZXcgU2V0KFRvb2wucmFuZ2Uoc3RhcnQsIGVuZCkpO1xcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHggPT4gIWNob29zZVRlYW0uaGFzKHgpKTtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgSlNPTi5zdHJpbmdpZnkoYmF0Y2hUZWFtKSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgICAgIH0sIHN0YXJ0LCBlbmQsIE1ZX0lEKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiaWNvbl9zbWFsbF80XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLnoa7orqTpgInkuK1cXFwiLFxcbiAgICAgICAgcGljX3VybDogXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9dE1ydnRjNlQ5aFZiJnRva2VuPVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjppc1N0YXJ0XFxcIiwgXFxcIi0xXFxcIikgIT09IFxcXCItMVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOS4i+i9veWTpn5cXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICAgICAgcmV0dXJuIGJhdGNoVGVhbS5sZW5ndGggPT09IDAgPyBcXFwidG9hc3Q6Ly/kvaDov5jku4DkuYjpg73msqHmnInpgIlcXFwiIDogXFxcImhpa2VyOi8vcGFnZS9CYXRjaC52aWV3I25vUmVmcmVzaCMjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjXFxcIjtcXG4gICAgICAgIH0sIE1ZX0lEKSxcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgbmV3V2luZG93OiB0cnVlLFxcbiAgICAgICAgICAgIHdpbmRvd0lkOiBNWV9JRCArIFxcXCIvL+aJuemHj+S4i+i9vVxcXCIsXFxuICAgICAgICAgICAgTVlfSUQ6IE1ZX0lELFxcbiAgICAgICAgICAgIGNoYXB0ZXJMaXN0OiBiYWNrdXBDaGFwdGVyTGlzdCxcXG4gICAgICAgICAgICBpbmZvOiBpbmZvXFxuICAgICAgICB9LFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpY29uX3NtYWxsXzRcXFwiXFxuICAgIH0pO1xcbiAgICBzZXRUeXBlKCk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgfSk7XFxuICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgbGV0IGNvbXBsZXRlZCA9IFtdO1xcbiAgICBmb3IgKGxldCBpID0gMCwgaXRlbSA9IGNoYXB0ZXJMaXN0WzBdOyBpIDwgY2hhcHRlckxpc3QubGVuZ3RoOyBpdGVtID0gY2hhcHRlckxpc3RbKytpXSkge1xcbiAgICAgICAgbGV0IGlzX2Rvd25sb2FkID0gcmVjb3JkLmluY2x1ZGVzKGl0ZW0udGl0bGUpO1xcblxcbiAgICAgICAgaWYgKGlzX2Rvd25sb2FkKSB7XFxuICAgICAgICAgICAgY29tcGxldGVkLnB1c2goaXRlbS5DSUQpO1xcbiAgICAgICAgICAgIGlmKHRhZ0ZpbHRlciAhPT0gXFxcIjFcXFwiKXtcXG4gICAgICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaChjb21GdW4oaXRlbS5DSUQsIGl0ZW0pKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2UgaWYgKCFpc19kb3dubG9hZCAmJiB0YWdGaWx0ZXIgIT09IFxcXCIyXFxcIikge1xcbiAgICAgICAgICAgIGNoYXB0ZXJUZWFtLnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogYmF0Y2hUZWFtLmluY2x1ZGVzKGl0ZW0uQ0lEKSA/IFxcXCLigJjigJhcXFwiICsgaXRlbS50aXRsZSArIFxcXCLigJnigJlcXFwiIDogaXRlbS50aXRsZSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKGNsaWNrQ2hvb3NlLCBpdGVtLnRpdGxlLCBNWV9JRCwgaXRlbS5DSUQpLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcIiNcXFwiICsgaXRlbS5DSURcXG4gICAgICAgICAgICAgICAgfSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IGRlZl9Eb1ZpX1N0eWxlXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmNvbXBsZXRlZFxcXCIsIEpTT04uc3RyaW5naWZ5KGNvbXBsZXRlZCkpO1xcbn1cXG5zd2l0Y2ggKHZpZXdNb2RlKSB7XFxuICAgIGNhc2UgXFxcIjBcXFwiOlxcbiAgICAgICAgc2luZ2xlVmlldygpO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgXFxcIjFcXFwiOlxcbiAgICAgICAgYmF0Y2hWaWV3KCk7XFxuICAgICAgICBicmVhaztcXG59XFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcIjFcXFwiKSB7XFxuICAgIGNoYXB0ZXJUZWFtLnJldmVyc2UoKTtcXG59XFxubGF5b3V0LnB1c2guYXBwbHkobGF5b3V0LCBjaGFwdGVyVGVhbSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7mibnph4/kuIvovb3lmahcIixcInBhdGhcIjpcIkJhdGNoLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmxldCB7XFxuICAgIGNoYXB0ZXJMaXN0LFxcbiAgICBpbmZvLFxcbiAgICBNWV9JRFxcbn0gPSBNWV9QQVJBTVM7XFxuc2V0UGFnZVRpdGxlKFxcXCLkuIvovb3lmah8XFxcIitpbmZvLmJvb2tOYW1lKTtcXG5hZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKE1ZX0lEKSA9PiB7XFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOmlzU3RhcnRcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIpO1xcbiAgICByZWZyZXNoUGFnZSgpO1xcbn0sIE1ZX0lEKSk7XFxuXFxubGV0IGlzU3RhcnQgPSBnZXRNeVZhcihNWV9JRCArIFxcXCI6aXNTdGFydFxcXCIsIFxcXCIwXFxcIik7XFxubGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiMFxcXCIpO1xcbmxldCBsYXlvdXQgPSBbXTtcXG5cXG5sZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuaWYodHlwZW9mIGNoYXB0ZXJMaXN0ID09PSBcXFwic3RyaW5nXFxcIil7XFxuICAgIGNoYXB0ZXJMaXN0ID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIitjaGFwdGVyTGlzdCl8fFxcXCJbXVxcXCIpO1xcbn1cXG5sZXQgY2hhcHRlclRlYW0gPSBiYXRjaFRlYW0ubWFwKHYgPT4ge1xcbiAgICBsZXQgY2hhcHRlckl0ZW0gPSBjaGFwdGVyTGlzdFt2XTtcXG4gICAgY2hhcHRlckl0ZW0uQ0lEID0gdjtcXG4gICAgcmV0dXJuIGNoYXB0ZXJJdGVtO1xcbn0pO1xcbmlmIChpc1N0YXJ0ID09PSBcXFwiMFxcXCIpIHtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLlvIDlp4vkuIvovb1bXFxcIiArIGNoYXB0ZXJUZWFtLmxlbmd0aCArIFxcXCJdXFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoY2hhcHRlclRlYW0sIGluZm8sIE1ZX0lEKSA9PiB7XFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmlzU3RhcnRcXFwiLCBcXFwiMVxcXCIpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICBsZXQgZG93bmxvYWQgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9CYXRjaFN0YXRpc3RpY3MuanNcXFwiKTtcXG4gICAgICAgICAgICBpZihpbmZvLnR5cGU9PT1cXFwiY29taWNcXFwiJiZpbmZvLmNvbWljU2NoZW1lPT09XFxcIjFcXFwiKXtcXG4gICAgICAgICAgICAgICAgZG93bmxvYWQ9ZG93bmxvYWQuYjtcXG4gICAgICAgICAgICB9ZWxzZXtcXG4gICAgICAgICAgICAgICAgZG93bmxvYWQ9ZG93bmxvYWQuYTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcmV0dXJuIGRvd25sb2FkKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkgfHwgXFxcInRvYXN0Oi8v5LiL6L296ZSZ6K+vXFxcIjtcXG4gICAgICAgIH0sIGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzlvIDlp4vkuIvovb1cXFwiXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuS7u+WKoeWIl+ihqO+8mlxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxuICAgIH0pO1xcbiAgICBmb3IgKGxldCBpdGVtIG9mIGNoYXB0ZXJUZWFtKSB7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiXFxuICAgICAgICB9KTtcXG4gICAgfVxcblxcbn0gZWxzZSB7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5LiL6L296L+b5bqmOjAvXFxcIitjaGFwdGVyVGVhbS5sZW5ndGgsXFxuICAgICAgICBkZXNjOiBcXFwi4oCc4oCc4oCd4oCd4paH4paH4paH4paH4paH4paH4paH4paH4paH4paHXFxcIi5mb250Y29sb3IoXFxcIiNlNWUxZTRcXFwiKStcXFwiIDAlXFxcIixcXG4gICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L296L+b5bqmXFxcIixcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5ZCO5Y+w5LiL6L29XFxcIixcXG4gICAgICAgIHVybDogXFxcImZ1bmM6Ly9iYWNrZ3JvdW5kXFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbiAgICB9KTtcXG5cXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFtcXFwiW+WPlua2iOS4i+i9vV1cXFwiLCBcXFwiW+ato+WcqOWBnOatoi4uLl1cXFwiLCBcXFwiW+i/lOWbnl1cXFwiLCBcXFwiW+WkhOeQhuWksei0pV1cXFwiLCBcXFwiW+mHjeaWsOW8gOWni11cXFwiXVtzdGF0dXNdLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChNWV9JRCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBnZXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjBcXFwiKTtcXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSBcXFwiMFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIxXFxcIik7XFxuICAgICAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXCJb5q2j5Zyo5YGc5q2iLi4uXVxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOS4i+i9veaOp+WItlxcXCJcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mraPlnKjlj5bmtojkuIvovb3ku7vliqFcXFwiO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOaaguWBnC4uLlxcXCI7XFxuICAgICAgICAgICAgfSBlbHNlIGlmIChzdGF0dXMgPT09IFxcXCIyXFxcIikge1xcbiAgICAgICAgICAgICAgICBiYWNrKCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7LpgIDlh7rkuIvovb3lmahcXFwiO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW1xcXCIzXFxcIiwgXFxcIjRcXFwiXS5pbmNsdWRlcyhzdGF0dXMpKSB7XFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOmlzU3RhcnRcXFwiKTtcXG4gICAgICAgICAgICAgICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIik7XFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFwiOmxvZ1xcXCIpO1xcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v6YeN5paw54K55Ye75LiL6L29XFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0sIE1ZX0lEKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCI8c3Ryb25nPuS4i+i9veaXpeW/lzwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxuICAgICAgICBcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwibGluZVxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOaXpeW/l1xcXCJcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOlxcXCLigJzigJzigJ3igJ0kPlxcXCIrXFxcIuW8gOWni+S4i+i9vS4uLi4uLlxcXCIuZm9udGNvbG9yKFxcXCIjMDBmZjAwXFxcIiksXFxuICAgICAgICB1cmw6XFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI2xvZyMwXFxcIixcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTpmYWxzZVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG59XFxuXFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjZmcu5om56YeP5LiL6L2957uf6K6hXCIsXCJwYXRoXCI6XCJCYXRjaFN0YXRpc3RpY3MuanNcIixcInJ1bGVcIjpcImNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5cXG4kLmV4cG9ydHMuYSA9IGZ1bmN0aW9uKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkge1xcbiAgICBpZiAoY2hhcHRlclRlYW0ubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v56m655qE5LiL6L296Zif5YiXXFxcIjtcXG4gICAgfVxcblxcbiAgICB2YXIgY291bnQgPSAwO1xcbiAgICB2YXIgdGFza0NvdW50ID0gY2hhcHRlclRlYW0ubGVuZ3RoO1xcbiAgICB2YXIgc3VjY2Vzc0NJRCA9IFtdO1xcbiAgICB2YXIgZmFpbE5hbWUgPSBbXTtcXG4gICAgdmFyIGxvZ0NvdW50ID0gMTtcXG4gICAgdmFyIHRhc2tUZWFtID0gY2hhcHRlclRlYW0ubWFwKGNoYXB0ZXJJdGVtID0+ICh7XFxuICAgICAgICBmdW5jOiB0YXNrLFxcbiAgICAgICAgaWQ6IGNoYXB0ZXJJdGVtLnRpdGxlLFxcbiAgICAgICAgcGFyYW06IHtcXG4gICAgICAgICAgICBjaGFwdGVySXRlbTogY2hhcHRlckl0ZW0sXFxuICAgICAgICAgICAgaW5mbzogaW5mbyxcXG4gICAgICAgICAgICBNWV9JRDogTVlfSURcXG4gICAgICAgIH1cXG4gICAgfSkpO1xcbiAgICBsZXQgbG9nTnVtID0gQ29uZmlnLmxvZ051bTtcXG5cXG5cXG4gICAgZnVuY3Rpb24gcHV0TG9nKHRleHQpIHtcXG4gICAgICAgIGxvZyh0ZXh0KTtcXG4gICAgICAgIGlmIChsb2dDb3VudCA+PSBsb2dOdW0pIHtcXG4gICAgICAgICAgICBkZWxldGVJdGVtKE1ZX0lEICsgXFxcIiNsb2cjXFxcIiArIChsb2dDb3VudCAtIDEwKSk7XFxuICAgICAgICB9XFxuICAgICAgICBhZGRJdGVtQWZ0ZXIoTVlfSUQgKyBcXFwifHzml6Xlv5dcXFwiLCB7XFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCIkPlxcXCIgKyB0ZXh0LFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCIjbG9nI1xcXCIgKyBsb2dDb3VudFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgbG9nQ291bnQrKztcXG4gICAgfVxcblxcbiAgICBmdW5jdGlvbiB0YXNrKHRhc2tQYXJhbSkge1xcbiAgICAgICAgbGV0IHJlc3VsdCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0JhdGNoLmV4ZS5qc1xcXCIpKHRhc2tQYXJhbSk7XFxuICAgICAgICByZXR1cm4gcmVzdWx0O1xcbiAgICB9XFxuXFxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKHBlcmNoLCBpZCwgZXJyb3IsIENJRCkge1xcbiAgICAgICAgY291bnQrKztcXG4gICAgICAgIGxldCBpc1N1Y2Nlc3MgPSBmYWxzZTtcXG4gICAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XFxuICAgICAgICAgICAgZmFpbE5hbWUucHVzaChpZCk7XFxuICAgICAgICAgICAgcHV0TG9nKFxcXCJbbGlzdGVuZXJd5LiL6L295aSx6LSl77yaXFxcIiArIGlkICsgXFxcIjxFUlJPUkAgXFxcIiArIGVycm9yICsgXFxcIj5cXFwiKTtcXG4gICAgICAgIH0gZWxzZSBpZiAoQ0lEID49IDApIHtcXG4gICAgICAgICAgICBzdWNjZXNzQ0lELnB1c2goQ0lEKTtcXG4gICAgICAgICAgICBsZXQgcmF0aW8gPSAoY291bnQgLyB0YXNrQ291bnQpLnRvRml4ZWQoNCk7XFxuICAgICAgICAgICAgbGV0IHN0cmlwQ291bnQgPSBNYXRoLmNlaWwocmF0aW8gKiAxMCk7XFxuICAgICAgICAgICAgaXNTdWNjZXNzID0gdHJ1ZTtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLkuIvovb3ov5vluqbvvJpcXFwiICsgc3VjY2Vzc0NJRC5sZW5ndGggKyBcXFwiL1xcXCIgKyB0YXNrQ291bnQsXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIuKWh1xcXCIucmVwZWF0KHN0cmlwQ291bnQpLmZvbnRjb2xvcihcXFwiI2ZmYWMyZFxcXCIpICsgXFxcIuKWh1xcXCIucmVwZWF0KDEwIC0gc3RyaXBDb3VudCkuZm9udGNvbG9yKFxcXCIjZTVlMWU0XFxcIikgKyBcXFwiIFxcXCIgKyBTdHJpbmcoKHJhdGlvICogMTAwKSkuc2xpY2UoMCwgNSkgKyBcXFwiJVxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzkuIvovb3ov5vluqZcXFwiXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIltsaXN0ZW5lcl3lt7LlrozmiJDkuIvovb3vvJpcXFwiICsgaWQpO1xcbiAgICAgICAgfSBlbHNlIGlmIChDSUQgPT09IC0xKSB7XFxuICAgICAgICAgICAgZmFpbE5hbWUucHVzaChpZCk7XFxuICAgICAgICAgICAgcHV0TG9nKFxcXCJbbGlzdGVuZXJd5bey5YGc5q2i77yaXFxcIiArIGlkKTtcXG4gICAgICAgICAgICBjb3VudCA9IHRhc2tDb3VudDtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmICh0YXNrQ291bnQgIT09IGNvdW50KSByZXR1cm47XFxuICAgICAgICBpZiAoc3VjY2Vzc0NJRC5sZW5ndGggPT09IHRhc2tDb3VudCkge1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgICAgICBkZXNjOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLilodcXFwiLnJlcGVhdCgxMCkuZm9udGNvbG9yKFxcXCIjMDBmZjAwXFxcIikgKyBcXFwiIDEwMCVcXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L296L+b5bqmXFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgXFxcIltdXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICBsZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIwXFxcIik7XFxuICAgICAgICBsZXQgZmFpbFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHYgPT4gIXN1Y2Nlc3NDSUQuaW5jbHVkZXModikpO1xcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIEpTT04uc3RyaW5naWZ5KGZhaWxUZWFtKSk7XFxuICAgICAgICBpZiAoZmFpbFRlYW0ubGVuZ3RoID4gMCAmJiBzdGF0dXMgIT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiM1xcXCIpO1xcbiAgICAgICAgICAgIHB1dExvZyhcXFwi5LiL6L295aSx6LSlOltcXFwiICsgZmFpbE5hbWUuam9pbihcXFwiXe+8jFtcXFwiKSArIFxcXCJd44CCXFxcIik7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwiW+WkhOeQhuWksei0pV1cXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9IGVsc2UgaWYgKGZhaWxUZWFtLmxlbmd0aCA+IDAgJiYgc3RhdHVzID09PSBcXFwiMVxcXCIpIHtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjRcXFwiKTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIltsaXN0ZW5lcl0j5bey5YGc5q2i5omA5pyJ5Lu75Yqh77yM5L2G5bey5pyJ6L+b5bqm5LiN5Lya5raI5aSxI1xcXCIpO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIlvph43mlrDlvIDlp4tdXFxcIixcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOS4i+i9veaOp+WItlxcXCJcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiYnJlYWtcXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjJcXFwiKTtcXG4gICAgICAgICAgICBwdXRMb2coXFxcIuS4i+i9veS7u+WKoVtcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCJd5bey5YWo6YOo5oiQ5Yqf5a6M5oiQXFxcIik7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwiW+i/lOWbnl1cXFwiLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICB0b2FzdChcXFwi5LiL6L295Lu75YqhW1xcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcIl3lt7LlrozmiJBcXFwiKTtcXG4gICAgfVxcbiAgICBsZXQgdGFza1RlYW1DaHVuayA9IFtdO1xcbiAgICBpZiAoQ29uZmlnLnRocmVhZE51bSA+IDApIHtcXG4gICAgICAgIHRhc2tUZWFtQ2h1bmsgPSBUb29sLmNodW5rKHRhc2tUZWFtLCBDb25maWcudGhyZWFkTnVtKTtcXG4gICAgfSBlbHNlIHtcXG4gICAgICAgIHRhc2tUZWFtQ2h1bmsgPSBbdGFza1RlYW1dO1xcbiAgICB9XFxuICAgIGZvciAobGV0IHRhc2tMaXN0IG9mIHRhc2tUZWFtQ2h1bmspIHtcXG4gICAgICAgIGJlKHRhc2tMaXN0LCB7XFxuICAgICAgICAgICAgZnVuYzogbGlzdGVuZXJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiMFxcXCIpO1xcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gXFxcIjFcXFwiKSB7XFxuICAgICAgICAgICAgbGV0IGJhdGNoVGVhbSA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIFxcXCJbXVxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbiAgICAgICAgICAgIC8vbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiMFxcXCIpO1xcbiAgICAgICAgICAgIGxldCBmYWlsVGVhbSA9IGJhdGNoVGVhbS5maWx0ZXIodiA9PiAhc3VjY2Vzc0NJRC5pbmNsdWRlcyh2KSk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIEpTT04uc3RyaW5naWZ5KGZhaWxUZWFtKSk7XFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCI0XFxcIik7XFxuICAgICAgICAgICAgcHV0TG9nKFxcXCJbbGlzdGVuZXJdI+W3suWBnOatouaJgOacieS7u+WKoe+8jOS9huW3suaciei/m+W6puS4jeS8mua2iOWksSNcXFwiKTtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCJb6YeN5paw5byA5aeLXVxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzkuIvovb3mjqfliLZcXFwiXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfVxcblxcbiAgICB9XFxuXFxuICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxufTtcXG5cXG4kLmV4cG9ydHMuYiA9IGZ1bmN0aW9uIGNvbWljKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkge1xcbiAgICBpZiAoY2hhcHRlclRlYW0ubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v56m655qE5LiL6L296Zif5YiXXFxcIjtcXG4gICAgfVxcbiAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcblxcbiAgICBsZXQgbG9nTnVtID0gQ29uZmlnLmxvZ051bTtcXG4gICAgbGV0IGxvZ0NvdW50PTA7XFxuICAgIGZ1bmN0aW9uIHB1dExvZyh0ZXh0KSB7XFxuICAgICAgICBsb2codGV4dCk7XFxuICAgICAgICBpZiAobG9nQ291bnQgPj0gbG9nTnVtKSB7XFxuICAgICAgICAgICAgZGVsZXRlSXRlbShNWV9JRCArIFxcXCIjbG9nI1xcXCIgKyAobG9nQ291bnQgLSAxMCkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgYWRkSXRlbUFmdGVyKE1ZX0lEICsgXFxcInx85pel5b+XXFxcIiwge1xcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFwiJD5cXFwiICsgdGV4dCxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwiI2xvZyNcXFwiICsgbG9nQ291bnRcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGxvZ0NvdW50Kys7XFxuICAgIH1cXG5cXG4gICAgZnVuY3Rpb24gdGFzayh0YXNrUGFyYW0pIHtcXG4gICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IDEwOyBpKyspIHtcXG4gICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICBsZXQgcGljID0gVG9vbC5oaWtlclBpYyh0YXNrUGFyYW0udXJsKTtcXG4gICAgICAgICAgICAgICAgVG9vbC5waWNEb3dubG9hZChwaWNbMF0sIHRhc2tQYXJhbS5jaGFwdGVyUGF0aCArICh0YXNrUGFyYW0uaSArIDEpICsgXFxcIi5qcGdcXFwiLCBwaWNbMV0sIHRhc2tQYXJhbS5kZWNvZGUpO1xcbiAgICAgICAgICAgICAgICBpZiAoZ2V0TXlWYXIodGFza1BhcmFtLk1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiXFxcIikgPT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIC0xO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGVycm9yTnVtID0gMDtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gOSkge1xcbiAgICAgICAgICAgICAgICAgICAgdGhyb3cgZTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiB0YXNrUGFyYW0uQ0lEO1xcbiAgICB9XFxuICAgIGxldCBjb3VudCA9IDA7XFxuICAgIGxldCB0b3RhbENvdW50ID0gMDtcXG4gICAgbGV0IHN1Y2Nlc3NDSUQgPSBbXTtcXG5cXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIocGFyYW0sIGlkLCBlcnJvciwgcmVzdWx0KSB7XFxuICAgICAgICB0cnl7XFxuICAgICAgICB0b3RhbENvdW50Kys7XFxuICAgICAgICBcXG4gICAgICAgIGlmIChlcnJvciAhPSBudWxsKSB7XFxuICAgICAgICAgICAgcHV0TG9nKFxcXCJbbGlzdGVuZXJd5LiL6L295aSx6LSl77yaXFxcIiArIGlkICsgXFxcIjxFUlJPUkAgXFxcIiArIGVycm9yICsgXFxcIj5cXFwiKTtcXG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAtMSkge1xcbiAgICAgICAgICAgIHB1dExvZyhcXFwiW2xpc3RlbmVyXeW3suWBnOatou+8mlxcXCIgKyBpZCk7XFxuICAgICAgICAgICAgdG90YWxDb3VudCA9IHBhcmFtLnBpdkNvdW50O1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBjb3VudCsrO1xcbiAgICAgICAgICAgIGxldCByYXRpbyA9ICgoY291bnQgLyBwYXJhbS5waXZDb3VudCkpLnRvRml4ZWQoNCk7XFxuICAgICAgICAgICAgbGV0IHN0cmlwQ291bnQgPSBNYXRoLmNlaWwocmF0aW8gKiAxMCk7XFxuICAgICAgICAgICAgaWYgKHBhcmFtLnBpdkNvdW50PT09dG90YWxDb3VudCYmdG90YWxDb3VudCA9PT0gY291bnQpe1xcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ0lELnB1c2gocGFyYW0uQ0lEKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5LiL6L296L+b5bqm77yaXFxcIiArIChzdWNjZXNzQ0lELmxlbmd0aCkgKyBcXFwiL1xcXCIgKyBwYXJhbS50b3RhbCxcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi4paHXFxcIi5yZXBlYXQoc3RyaXBDb3VudCkuZm9udGNvbG9yKFxcXCIjZmZhYzJkXFxcIikgKyBcXFwi4paHXFxcIi5yZXBlYXQoMTAgLSBzdHJpcENvdW50KS5mb250Y29sb3IoXFxcIiNlNWUxZTRcXFwiKSArIFxcXCIgXFxcIiArIFN0cmluZygocmF0aW8gKiAxMDApKS5zbGljZSgwLCA1KSArIFxcXCIlXFxcIixcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXCJ8fOS4i+i9vei/m+W6plxcXCJcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIC8vcHV0TG9nKFxcXCJbbGlzdGVuZXJd5bey5a6M5oiQ5LiL6L2977yaXFxcIiArIGlkKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmICh0b3RhbENvdW50ICE9PSBwYXJhbS5waXZDb3VudCkgcmV0dXJuO1xcbiAgICAgICAgaWYgKHRvdGFsQ291bnQgPT09IGNvdW50KXtcXG4gICAgICAgICAgICBGaWxlLnJlbmFtZUZpbGUocGFyYW0uY2hhcHRlclBhdGgsIHBhcmFtLkNJRCArIFxcXCIkQSRcXFwiICsgVG9vbC50ZXh0U2hpZWxkKHBhcmFtLnRpdGxlKSk7XFxuICAgICAgICB9XFxuICAgICAgICB0b3RhbENvdW50ID0gY291bnQgPSAwO1xcbiAgICAgICAgcmV0dXJuIFxcXCJicmVha1xcXCI7XFxuICAgICAgICB9Y2F0Y2goZSl7XFxuICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgbGV0IHRhc2tUZWFtID0gW107XFxuICAgIGxldCBtYWluUGF0aCA9IENvbmZpZy5jb21pY1BhdGggKyBcXFwiL1xcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcIi9cXFwiICsgVG9vbC50ZXh0U2hpZWxkKGluZm8uYm9va05hbWUpICsgXFxcIi9cXFwiO1xcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcbiAgICAgICAgICAgIFRvb2wucGljRG93bmxvYWQoYm9va1RvcFBpY1swXSwgbWFpblBhdGggKyBpbmZvLmJvb2tOYW1lICsgXFxcIi5qcGdcXFwiLCBib29rVG9wUGljWzFdLCBpbmZvLmRlY29kZSk7XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgbG9nKFxcXCI85bCB6Z2i5LiL6L296ZSZ6K+vPiBcXFwiICsgZS5tZXNzYWdlKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmb3IgKGxldCBrID0gMDsgayA8IGNoYXB0ZXJUZWFtLmxlbmd0aDsgaysrKSB7XFxuICAgICAgICBsZXQgaXRlbSA9IGNoYXB0ZXJUZWFtW2tdO1xcbiAgICAgICAgbGV0IG9yZGVyID0gaztcXG4gICAgICAgIGxldCBjaGFwdGVyUGF0aCA9IG1haW5QYXRoICsgaXRlbS5DSUQgKyBcXFwiJEIkXFxcIiArIFRvb2wudGV4dFNoaWVsZChpdGVtLnRpdGxlKSArIFxcXCIvXFxcIjtcXG4gICAgICAgIGxldCBwaWNMaXN0ID0gW107XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBnZXRQaWNMaXN0ID0gbmV3IEZ1bmN0aW9uKFxcXCJpbnB1dFxcXCIsIFxcXCJ1cmxcXFwiLCBcXFwicmV0dXJuXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXG4gICAgICAgICAgICBwaWNMaXN0ID0gZ2V0UGljTGlzdChpdGVtLnVybCwgaXRlbS51cmwpO1xcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGljTGlzdCA9PT0gXFxcInN0cmluZ1xcXCIpIHtcXG4gICAgICAgICAgICAgICAgcGljTGlzdCA9IHBpY0xpc3QucmVwbGFjZShcXFwicGljczovL1xcXCIsIFxcXCJcXFwiKS5zcGxpdChcXFwiJiZcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgcHV0TG9nKFxcXCI85ryr55S75Zu+54mH6Kej5p6Q6ZSZ6K+vPiBcXFwiICsgZS5tZXNzYWdlKTtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIGlmIChwaWNMaXN0Lmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgICAgIHB1dExvZyhcXFwiPOa8q+eUu+WbvueJh+ino+aekOmUmeivr++8muWbvueJh+mTvuaOpei/lOWbnuS4uuepuj5cXFwiKTtcXG4gICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgIH1cXG4gICAgICAgIHZhciB0YXNrVGVhbSA9IHBpY0xpc3QubWFwKCh1cmwsIGkpID0+ICh7XFxuICAgICAgICAgICAgZnVuYzogdGFzayxcXG4gICAgICAgICAgICBpZDogaSxcXG4gICAgICAgICAgICBwYXJhbToge1xcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcXG4gICAgICAgICAgICAgICAgaTogaSxcXG4gICAgICAgICAgICAgICAgY2hhcHRlclBhdGg6IGNoYXB0ZXJQYXRoLFxcbiAgICAgICAgICAgICAgICBNWV9JRDogTVlfSUQsXFxuICAgICAgICAgICAgICAgIGRlY29kZTogaW5mby5kZWNvZGVcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KSk7XFxuICAgICAgICBiZSh0YXNrVGVhbSwge1xcbiAgICAgICAgICAgIGZ1bmM6IGxpc3RlbmVyLFxcbiAgICAgICAgICAgIHBhcmFtOiB7XFxuICAgICAgICAgICAgICAgIHBpdkNvdW50OiBwaWNMaXN0Lmxlbmd0aCxcXG4gICAgICAgICAgICAgICAgdG90YWw6IGNoYXB0ZXJUZWFtLmxlbmd0aCxcXG4gICAgICAgICAgICAgICAgb3JkZXI6IG9yZGVyLFxcbiAgICAgICAgICAgICAgICBDSUQ6IGl0ZW0uQ0lELFxcbiAgICAgICAgICAgICAgICB0aXRsZTppdGVtLnRpdGxlLFxcbiAgICAgICAgICAgICAgICBjaGFwdGVyUGF0aDpjaGFwdGVyUGF0aFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiXFxcIikgPT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIFxcbiAgICBsZXQgc3RhdHVzID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIwXFxcIik7XFxuICAgIGphdmEubGFuZy5UaHJlYWQuc2xlZXAoNDApO1xcbiAgICAvL2xldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcIjpiYXRjaFRlYW1cXFwiLCBcXFwiW11cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgbGV0IGZhaWxUZWFtID0gY2hhcHRlclRlYW0uZmlsdGVyKHYgPT4gIXN1Y2Nlc3NDSUQuaW5jbHVkZXModi5DSUQpKTtcXG4gICAgbGV0IGZhaWxOYW1lID0gZmFpbFRlYW0ubWFwKGl0ZW09Pml0ZW0udGl0bGUpO1xcbiAgICBsZXQgYmF0Y2hUZWFtID0gZmFpbFRlYW0ubWFwKGl0ZW09Pml0ZW0uQ0lEKTtcXG4gICAgXFxuICAgIGlmIChmYWlsVGVhbS5sZW5ndGggPiAwICYmIHN0YXR1cyAhPT0gXFxcIjFcXFwiKSB7XFxuICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6YmF0Y2hUZWFtXFxcIiwgSlNPTi5zdHJpbmdpZnkoYmF0Y2hUZWFtKSk7XFxuICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXCI6c3RhdHVzXFxcIiwgXFxcIjNcXFwiKTtcXG4gICAgICAgIHB1dExvZyhcXFwi5LiL6L295aSx6LSlOltcXFwiICsgZmFpbE5hbWUuam9pbihcXFwiXe+8jFtcXFwiKSArIFxcXCJd44CCXFxcIik7XFxuICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIlvlpITnkIblpLHotKVdXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzkuIvovb3mjqfliLZcXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH0gZWxzZSBpZiAoZmFpbFRlYW0ubGVuZ3RoID4gMCAmJiBzdGF0dXMgPT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOmJhdGNoVGVhbVxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCI0XFxcIik7XFxuICAgICAgICBwdXRMb2coXFxcIltsaXN0ZW5lcl0j5bey5YGc5q2i5omA5pyJ5Lu75Yqh77yM5L2G5bey5pyJ6L+b5bqm5LiN5Lya5raI5aSxI1xcXCIpO1xcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCJb6YeN5paw5byA5aeLXVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcInx85LiL6L295o6n5Yi2XFxcIlxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCIyXFxcIik7XFxuICAgICAgICBwdXRMb2coXFxcIuS4i+i9veS7u+WKoVtcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCJd5bey5YWo6YOo5oiQ5Yqf5a6M5oiQXFxcIik7XFxuICAgICAgICB1cGRhdGVJdGVtKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIlvov5Tlm55dXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFwifHzkuIvovb3mjqfliLZcXFwiXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjZmcu5om56YeP5Li756iL5bqPXCIsXCJwYXRoXCI6XCJCYXRjaC5leGUuanNcIixcInJ1bGVcIjpcImNvbnN0IE1pYW4gPSAkLnJlcXVpcmUoXFxcIm1haW5Eb3dubG9hZFxcXCIpO1xcbmZ1bmN0aW9uIGNvbWljKHRhc2tQYXJhbSkge1xcbiAgICBsZXQge1xcbiAgICAgICAgY2hhcHRlckl0ZW0sXFxuICAgICAgICBpbmZvLFxcbiAgICAgICAgTVlfSUQsXFxuICAgIH0gPSB0YXNrUGFyYW07XFxuICAgIHJldHVybiBNaWFuLmNvbWljKGNoYXB0ZXJJdGVtLCBpbmZvLCBjaGFwdGVySXRlbS5DSUQsIE1ZX0lELCB0cnVlKXx8Y2hhcHRlckl0ZW0uQ0lEO1xcbn1cXG5cXG5mdW5jdGlvbiBub3ZlbCh0YXNrUGFyYW0pIHtcXG4gICAgbGV0IHtcXG4gICAgICAgIGNoYXB0ZXJJdGVtLFxcbiAgICAgICAgaW5mbyxcXG4gICAgICAgIE1ZX0lELFxcbiAgICB9ID0gdGFza1BhcmFtO1xcbiAgICByZXR1cm4gTWlhbi5ub3ZlbChjaGFwdGVySXRlbSwgaW5mbywgY2hhcHRlckl0ZW0uQ0lELE1ZX0lELCB0cnVlKXx8Y2hhcHRlckl0ZW0uQ0lEO1xcbiAgICAvL0ZpbGUucmVuYW1lRmlsZShjaGFwdGVyUGF0aCwgY2hhcHRlckl0ZW0uQ0lEICsgXFxcIiRBJFxcXCIgKyBjaGFwdGVySXRlbS50aXRsZSk7XFxufVxcbnZhciAkZXhlID0ge1xcbiAgICBjb21pYzogY29taWMsXFxuICAgIG5vdmVsOiBub3ZlbFxcbn07XFxuJC5leHBvcnRzID0gZnVuY3Rpb24odGFza1BhcmFtKSB7XFxuICAgIHJldHVybiAkZXhlW3Rhc2tQYXJhbS5pbmZvLnR5cGVdKHRhc2tQYXJhbSk7XFxufTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiNmZy7mma7pgJrkuLvnqIvluo9cIixcInBhdGhcIjpcIkRvd25sb2FkLmV4ZS5qc1wiLFwicnVsZVwiOlwiY29uc3QgTWlhbiA9ICQucmVxdWlyZShcXFwibWFpbkRvd25sb2FkXFxcIik7XFxuZnVuY3Rpb24gbm92ZWwoaXRlbSwgaW5mbywgb3JkZXIsIE1ZX0lEKSB7XFxuICAgIE1pYW4ubm92ZWwoaXRlbSwgaW5mbywgb3JkZXIpO1xcbiAgICByZXR1cm4gXFxcInRvYXN0Oi8vXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFwiQFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIiDkuIvovb3lrozmiJBcXFwiO1xcbn1cXG5cXG5mdW5jdGlvbiBjb21pYyhpdGVtLCBpbmZvLCBvcmRlciwgTVlfSUQpIHtcXG4gICAgTWlhbi5jb21pYyhpdGVtLCBpbmZvLCBvcmRlcik7XFxuICAgIHJldHVybiBcXFwidG9hc3Q6Ly9cXFwiICsgaW5mby5ib29rTmFtZSArIFxcXCJAXFxcIiArIGl0ZW0udGl0bGUgKyBcXFwiIOS4i+i9veWujOaIkFxcXCI7XFxufVxcbnZhciAkZXhlID0ge1xcbiAgICBjb21pYzogY29taWMsXFxuICAgIG5vdmVsOiBub3ZlbFxcbn07XFxuJC5leHBvcnRzID0gZnVuY3Rpb24oaXRlbSwgaW5mbywgb3JkZXIsIE1ZX0lEKSB7XFxuICAgIHJldHVybiAkZXhlW2luZm8udHlwZV0oaXRlbSwgaW5mbywgb3JkZXIsIE1ZX0lEKTtcXG59O1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI2Yu6YCa55So5bel5YW3XCIsXCJwYXRoXCI6XCJUb29sLmpzXCIsXCJydWxlXCI6XCJjb25zdCB2ID0ge1xcbiAgICBzcGxpdCh0ZXh0LCB0YXJnZXQsIGNvdW50KSB7XFxuICAgICAgICBjb3VudCA9IGNvdW50ID09PSB1bmRlZmluZWQgPyAxIDogY291bnQ7XFxuICAgICAgICBsZXQgYXJyYXkgPSBbdGV4dF07XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvdW50OyBpKyspIHtcXG4gICAgICAgICAgICB0ZXh0ID0gYXJyYXlbaV07XFxuICAgICAgICAgICAgbGV0IGluZGV4ID0gdGV4dC5pbmRleE9mKHRhcmdldCk7XFxuICAgICAgICAgICAgaWYgKGluZGV4ID09PSAtMSkge1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgYXJyYXlbaV0gPSB0ZXh0LnNsaWNlKDAsIGluZGV4KTtcXG4gICAgICAgICAgICBhcnJheVtpICsgMV0gPSB0ZXh0LnNsaWNlKGluZGV4ICsgdGFyZ2V0Lmxlbmd0aCk7XFxuICAgICAgICB9XFxuICAgICAgICByZXR1cm4gYXJyYXk7XFxuICAgIH0sXFxuICAgIGNodW5rKGFyciwgc2l6ZSkge1xcbiAgICAgICAgdmFyIHJlc3VsdCA9IFtdO1xcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkgKz0gc2l6ZSkge1xcbiAgICAgICAgICAgIHJlc3VsdC5wdXNoKGFyci5zbGljZShpLCBpICsgc2l6ZSkpO1xcbiAgICAgICAgfVxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXG4gICAgfSxcXG4gICAgaGlrZXJQaWModXJsKSB7XFxuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xcbiAgICAgICAgbGV0IHVybHMgPSB1cmwuc3BsaXQoXFxcIkBcXFwiKTtcXG4gICAgICAgIGxldCBwaWNVcmwgPSB1cmxzLnNoaWZ0KCk7XFxuICAgICAgICBsZXQgbGVuZ3RoID0gdXJscy5sZW5ndGg7XFxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XFxuICAgICAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IHYuc3BsaXQodXJsc1tpXSwgXFxcIj1cXFwiKTtcXG4gICAgICAgICAgICBpZiAoa2V5ID09PSBcXFwiaGVhZGVyc1xcXCIpIHtcXG4gICAgICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgICAgIE9iamVjdC5hc3NpZ24oaGVhZGVycywgSlNPTi5wYXJzZSh2YWx1ZSkpO1xcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5LmluY2x1ZGVzKFxcXCIuXFxcIikgfHwga2V5LmluY2x1ZGVzKFxcXCI/XFxcIikpIHtcXG4gICAgICAgICAgICAgICAgcGljVXJsICs9IFxcXCJAXFxcIiArIGtleSArICh2YWx1ZSA/IFxcXCI9XFxcIiArIHZhbHVlIDogXFxcIlxcXCIpO1xcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSBcXFwianNcXFwiKSB7XFxuICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIHJldHVybiBbcGljVXJsLCBoZWFkZXJzXTtcXG4gICAgfSxcXG4gICAgcmFuZ2Uoc3RhcnQsIGVuZCkge1xcbiAgICAgICAgcmV0dXJuIEFycmF5KGVuZCAtIHN0YXJ0KS5maWxsKDApLm1hcCgoZWwsIGkpID0+IHN0YXJ0ICsgaSk7XFxuICAgIH0sXFxuICAgIHBpY0Rvd25sb2FkKHVybCwgcGF0aCwgaGVhZGVycywgZGVjaXBoZSkge1xcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNpcGhlID09PSBcXFwic3RyaW5nXFxcIiAmJiBkZWNpcGhlLmxlbmd0aCA+IDApIHtcXG4gICAgICAgICAgICBsZXQgaW5zdHJlYW07XFxuICAgICAgICAgICAgbGV0IG91dHN0cmVhbTtcXG4gICAgICAgICAgICBsZXQgZmlsZTtcXG4gICAgICAgICAgICB0cnkge1xcbiAgICAgICAgICAgICAgICBmaWxlID0gbmV3IGphdmEuaW8uRmlsZShwYXRoKTtcXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUuZXhpc3RzKCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBsZXQgZGlyID0gZmlsZS5nZXRQYXJlbnRGaWxlKCk7XFxuICAgICAgICAgICAgICAgIGlmIChkaXIgIT0gbnVsbCAmJiAhZGlyLmV4aXN0cygpKSB7XFxuICAgICAgICAgICAgICAgICAgICBkaXIubWtkaXJzKCk7XFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgaW5zdHJlYW0gPSBmZXRjaCh1cmwsIHtcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXFxuICAgICAgICAgICAgICAgICAgICBpbnB1dFN0cmVhbTogdHJ1ZVxcbiAgICAgICAgICAgICAgICB9KTtcXG5cXG4gICAgICAgICAgICAgICAgb3V0c3RyZWFtID0gbmV3IGphdmEuaW8uRmlsZU91dHB1dFN0cmVhbShwYXRoKTtcXG4gICAgICAgICAgICAgICAgbGV0IHQgPSAkLmhpa2VyLmlucHV0LFxcbiAgICAgICAgICAgICAgICAgICAgYyA9ICQuaGlrZXIudXJsO1xcbiAgICAgICAgICAgICAgICAkLmhpa2VyLmlucHV0ID0gaW5zdHJlYW07XFxuICAgICAgICAgICAgICAgICQuaGlrZXIudXJsID0gdXJsO1xcbiAgICAgICAgICAgICAgICBsZXQgcGljaW4gPSAobmV3IEZ1bmN0aW9uKFxcXCJyZXR1cm4gXFxcIiArIGRlY2lwaGUpKSgpO1xcbiAgICAgICAgICAgICAgICAkLmhpa2VyLmlucHV0ID0gdDtcXG4gICAgICAgICAgICAgICAgJC5oaWtlci51cmwgPSBjO1xcbiAgICAgICAgICAgICAgICBsZXQgYnVmID0gamF2YS5sYW5nLnJlZmxlY3QuQXJyYXkubmV3SW5zdGFuY2UoamF2YS5sYW5nLkJ5dGUuVFlQRSwgMTAyNCk7XFxuICAgICAgICAgICAgICAgIGxldCBsZW47XFxuICAgICAgICAgICAgICAgIHdoaWxlICgobGVuID0gcGljaW4ucmVhZChidWYpKSAhPSAtMSkge1xcbiAgICAgICAgICAgICAgICAgICAgb3V0c3RyZWFtLndyaXRlKGJ1ZiwgMCwgbGVuKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBjbG9zZU1lKGluc3RyZWFtKTtcXG4gICAgICAgICAgICAgICAgY2xvc2VNZShvdXRzdHJlYW0pO1xcbiAgICAgICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICAgICAgY2xvc2VNZShpbnN0cmVhbSk7XFxuICAgICAgICAgICAgICAgIGNsb3NlTWUob3V0c3RyZWFtKTtcXG4gICAgICAgICAgICAgICAgaWYgKGZpbGUgaW5zdGFuY2VvZiBqYXZhLmlvLkZpbGUgJiYgZmlsZS5leGlzdHMoKSkge1xcbiAgICAgICAgICAgICAgICAgICAgZmlsZS5kZWxldGUoKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBsb2coXFxcIjzop6Plr4bkuIvovb1FcnJvcj5cXFwiICsgZS50b1N0cmluZygpKVxcbiAgICAgICAgICAgICAgICB0aHJvdyBlO1xcbiAgICAgICAgICAgIH0gZmluYWxseSB7XFxuICAgICAgICAgICAgICAgIGNsb3NlTWUoaW5zdHJlYW0pO1xcbiAgICAgICAgICAgICAgICBjbG9zZU1lKG91dHN0cmVhbSk7XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXF1aXJlRG93bmxvYWQodXJsLCBwYXRoLCBoZWFkZXJzKTtcXG4gICAgICAgIH1cXG4gICAgfSxcXG4gICAgdGV4dFNoaWVsZCh0ZXh0KSB7XFxuICAgICAgICBsZXQgZSA9IC8jfDp8JnxcXFxcfHxcXFxcXnxAfFxcXFw8fFxcXFw+fCV8XFxcXC98XFxcXD8vZztcXG4gICAgICAgIHJldHVybiB0ZXh0LnJlcGxhY2UoZSwgXFxcIl9cXFwiKTtcXG4gICAgfVxcbiAgICBcXG59XFxuXFxuJC5leHBvcnRzID0gdjtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiNqLkNvbmZpZ1wiLFwicGF0aFwiOlwiQ29uZmlnLmpzb25cIixcInJ1bGVcIjpcImpzOlxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzP3J1bGU95pys5Zyw6LWE5rqQ566h55CGXFxcIik7XFxuXFxubGV0IGxvY2FsQ29uZmlnID0ge307XFxuXFxudHJ5IHtcXG4gICAgbG9jYWxDb25maWcgPSBKU09OLnBhcnNlKEZpbGUucmVhZEZpbGUoZ2V0UGF0aChcXFwiaGlrZXI6Ly9maWxlcy9ydWxlcy9maWxlcy/mnKzlnLDotYTmupDnrqHnkIYvY29uZmlnLmpzb25cXFwiKS5zbGljZSg3KSkpO1xcbn0gY2F0Y2ggKGUpIHtcXG4gICAgZGVsZXRlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiKTtcXG59XFxuY29uc3QgQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7XFxuICAgIGhvbWVQYXRoOiBnZXRQYXRoKFxcXCJoaWtlcjovL2ZpbGVzL2xvY2FsTWFuYWdlclxcXCIpLnNsaWNlKDcpLFxcbiAgICBsb2dOdW06IDEwLFxcbiAgICB0aHJlYWROdW06IDAsXFxuICAgIGRlZl9pc1BhZ2luYXRlOiBcXFwiMVxcXCIsIC8vMem7mOiupOW8gOWQr+WIhumhte+8jDDpu5jorqTlhbPpl61cXG4gICAgdmlld1BhZ2VTaXplOiAyMDAsXFxuICAgIGRlZl9QaWM6IFxcXCJoaWtlcjovL2ltYWdlcy9ob21lX3BpYzRcXFwiLFxcbiAgICBkZWZfTG9yZF9UeXBlOiBcXFwiY29taWNcXFwiLFxcbiAgICBkZWZfVmlld19TdHlsZTogXFxcInRleHRfMVxcXCIsXFxuICAgIGRlZl9Eb1ZpX1N0eWxlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgZGVmX0RvVmlfVHlwZTogXFxcIjFcXFwiLCAvLzDlhajpg6gsIDHmnKrlrozmiJDvvIwy5bey5a6M5oiQXFxuICAgIGRlZl9pc0NvbWljQ29tcGF0aWJsZTogXFxcIjBcXFwiXFxufSwgbG9jYWxDb25maWcpO1xcbmNvbnN0IFBBVEhTID0ge1xcbiAgICBub3ZlbFBhdGg6IFxcXCIv5bCP6K+0L1xcXCIsXFxuICAgIGNvbWljUGF0aDogXFxcIi/mvKvnlLsvXFxcIixcXG4gICAgbm92ZWxGdWxsUGF0aDogXFxcIi/lsI/or7TlkIjlubYvXFxcIixcXG4gICAgZXh0ZXJuYWxJbXBvcnRQYXRoOiBcXFwiL+WkluWvvOWwj+ivtC9cXFwiLFxcbiAgICBjb250ZW50c0NhY2hlOiBcXFwiL+ebruW9lee8k+WtmC9cXFwiXFxufVxcblxcblxcbk9iamVjdC5rZXlzKFBBVEhTKS5mb3JFYWNoKGtleSA9PiBDb25maWdba2V5XSA9IENvbmZpZy5ob21lUGF0aCArIFBBVEhTW2tleV0pO1xcbiQuZXhwb3J0cyA9IENvbmZpZztcXG5cIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2LuS4u+mhtemdolwiLFwicGF0aFwiOlwiTWFpbi52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5mdW5jdGlvbiBtYWluKCkge1xcbiAgICB2YXIgbGF5b3V0ID0gW107XFxuICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuICAgIGxldCB0eXBlID0gZ2V0TXlWYXIoXFxcIi50eXBlXFxcIiwgZ2V0SXRlbShcXFwibWFpbjp0eXBlXFxcIikgfHwgQ29uZmlnLmRlZl9Mb3JkX1R5cGUpO1xcbiAgICBsZXQgdGdudW0gPSBnZXRNeVZhcihcXFwiLnRnbnVtXFxcIiwgXFxcIjBcXFwiKTtcXG4gICAgYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKChNWV9JRCkgPT4ge1xcbiAgICAgICAgY2xlYXJNeVZhcihcXFwic2VhcmNoS2V5XFxcIik7XFxuICAgICAgICBjbGVhck15VmFyKFxcXCIudGdudW1cXFwiKTtcXG4gICAgfSkpO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogdHlwZSA9PT0gXFxcImNvbWljXFxcIiA/IFxcXCLil4nmvKvnlLtcXFwiIDogXFxcIuKXi+a8q+eUu1xcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHR5cGUpID0+IHtcXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcImNvbWljXFxcIikgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiLnR5cGVcXFwiLCBcXFwiY29taWNcXFwiKTtcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXCJtYWluOnR5cGVcXFwiLCBcXFwiY29taWNcXFwiKTtcXG4gICAgICAgICAgICBjbGVhck15VmFyKFxcXCIudGdudW1cXFwiKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgIH0sIHR5cGUpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzNcXFwiLFxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXCJub3ZlbFxcXCIgPyBcXFwi4peJ5bCP6K+0XFxcIiA6IFxcXCLil4vlsI/or7RcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCh0eXBlKSA9PiB7XFxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXCJub3ZlbFxcXCIpIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi50eXBlXFxcIiwgXFxcIm5vdmVsXFxcIik7XFxuICAgICAgICAgICAgc2V0SXRlbShcXFwibWFpbjp0eXBlXFxcIiwgXFxcIm5vdmVsXFxcIik7XFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFwiLnRnbnVtXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCB0eXBlKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIixcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiB0eXBlID09PSBcXFwidHh0XFxcIiA/IFxcXCLil4nmlbTmnKzlsI/or7RcXFwiIDogXFxcIuKXi+aVtOacrOWwj+ivtFxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKHR5cGUpID0+IHtcXG4gICAgICAgICAgICBpZiAodHlwZSA9PT0gXFxcInR4dFxcXCIpIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL05vdmVsQ29sbGVjdGVkLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiLnR5cGVcXFwiLCBcXFwidHh0XFxcIik7XFxuICAgICAgICAgICAgc2V0SXRlbShcXFwibWFpbjp0eXBlXFxcIiwgXFxcInR4dFxcXCIpO1xcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcIi50Z251bVxcXCIpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgdHlwZSksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfM1xcXCJcXG4gICAgfSk7XFxuICAgIGlmICh0eXBlID09PSBcXFwidHh0XFxcIikge1xcbiAgICAgICAgdHh0VmlldyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL2V4dGVybmFsaW1wb3J0VHh0LnZpZXdcXFwiKTtcXG4gICAgICAgIHJldHVybiB0eHRWaWV3KGxheW91dCk7XFxuICAgIH1cXG4gICAgbGV0IHRhZyA9IEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnW3R5cGUgKyBcXFwiUGF0aFxcXCJdLCBcXFwiZGlyXFxcIik7XFxuICAgIGlmICh0YWcubGVuZ3RoID09PSAwKSB7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIixcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi6K6+572uXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogTVlfUlVMRS52ZXJzaW9uXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzluK7liqnigJ3igJ1cXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9oZWxwLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/a2V5d29yZD1ub3ZlbENvbWljXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiAnPGgxIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj7llaXpg73msqHmnInogLY8L2gxPicsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBzZXRSZXN1bHQobGF5b3V0KTtcXG4gICAgfVxcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB1cmw6ICdcXFwiaGlrZXI6Ly9zZWFyY2g/cz1cXFwiK2lucHV0JyxcXG4gICAgICAgIGRlc2M6IFxcXCLmkJzkvaDmg7PopoHnmoQjXFxcIiArIHR5cGUgKyBcXFwiIy4uLi4uLlxcXCIsXFxuICAgICAgICB0aXRsZTogXFxcIvCflI1cXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIHJ1bGVzOiAkLnRvU3RyaW5nKCh0YWcsIHR5cGUpID0+IHtcXG4gICAgICAgICAgICAgICAgbGV0IGFycjEgPSBbXTtcXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0YWcubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgICAgICAgICAgICAgIGFycjEucHVzaCh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInRpdGxlXFxcIjogdGFnW2ldLm5hbWUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInNlYXJjaF91cmxcXFwiOiBcXFwiaGlrZXI6Ly9lbXB0eT9pc0FsbD0xJnNlYXJjaFRlcm1zPSoqJnR5cGU9XFxcIiArIHR5cGUsXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcInNlYXJjaEZpbmRcXFwiOiBcXFwianM6JC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvU2VhcmNoLnZpZXc/cnVsZT0nK01ZX1JVTEUuX3RpdGxlKTtcXFwiXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJyMSk7XFxuICAgICAgICAgICAgfSwgdGFnLCB0eXBlKSxcXG4gICAgICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKCdzZWFyY2hLZXknLCAnJyksXFxuICAgICAgICAgICAgb25DaGFuZ2U6IFxcXCJwdXRNeVZhcignc2VhcmNoS2V5JyxpbnB1dClcXFwiXFxuICAgICAgICB9XFxuICAgIH0pO1xcblxcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuKAmOKAmOKameiuvue9ruKAmeKAmVxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiLFxcbiAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIHZlcnNpb246IE1ZX1JVTEUudmVyc2lvblxcbiAgICAgICAgfVxcbiAgICB9KTtcXG5cXG5cXG4gICAgZm9yIChsZXQgaSBpbiB0YWcpIHtcXG4gICAgICAgIGxldCBpdCA9IHRhZ1tpXTtcXG4gICAgICAgIGlmICh0Z251bSA9PT0gaSkge1xcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJxcXFwiICsgaXQubmFtZSArIFxcXCLigJ3igJ1cXFwiLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoW1xcXCLliKDpmaTor6Xnm67lvZVcXFwiLCBcXFwi6Lez6L2s5bCP56iL5bqPXFxcIiwgXFxcIuaJk+W8gOS5puaetlxcXCJdLCAxLCBcXFwi6YCJ5oup5pON5L2cXFxcIikuc2VsZWN0KChpdCwgdHlwZSkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKFxcXCLot7PovazlsI/nqIvluo9cXFwiID09PSBpbnB1dCkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9ob21lQFxcXCIgKyBpdC5uYW1lO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKFxcXCLliKDpmaTor6Xnm67lvZVcXFwiPT09aW5wdXQpe1xcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmV0dXJuIHRoZW4oW1xcXCLor6Xmk43kvZzkuI3kvJrliKDpmaTlsI/nqIvluo/vvIzkvYbor6XlsI/nqIvluo/kuIvovb3nmoTmiYDmnInmvKvnlLvlsIbooqvliKDpmaRcXFwiXSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQoXFxcIuivpeaTjeS9nOS4jeS8muWIoOmZpOWwj+eoi+W6j++8jOS9huivpeWwj+eoi+W6j+S4i+i9veeahOaJgOaciSDmvKvnlLsv5bCP6K+0IOWwhuiiq+WIoOmZpFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcIi50Z251bVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBpdC5wYXRoKTtcXG4gICAgICAgICAgICAgICAgICAgIH1lbHNle1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL0Jvb2tyYWNrLnZpZXc/cnVsZT3mnKzlnLDotYTmupDnrqHnkIYmcnVsZU5hbWU9XFxcIitpdC5uYW1lK1xcXCImdHlwZT1cXFwiK3R5cGU7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sIGl0LCB0eXBlKVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpdC5uYW1lLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoaSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiLnRnbnVtXFxcIiwgaSk7XFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgfSwgaSksXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgbGV0IHBhdGggPSB0YWdbdGdudW1dLnBhdGg7XFxuICAgIGxldCBtaGxpc3QgPSBGaWxlLmdldEZpbGVQYXRoKHBhdGgsIFxcXCJkaXJcXFwiKTtcXG5cXG4gICAgaWYgKG1obGlzdC5sZW5ndGggPT09IDApIHtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi5ZWl6YO95rKh5pyJ6IC2XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgcmV0dXJuIHNldFJlc3VsdChsYXlvdXQpO1xcbiAgICB9XFxuICAgIGxldCBwYWdlVXJsID0gdHlwZSA9PT0gXFxcIm5vdmVsXFxcIiA/IFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxCcm93c2VyLnZpZXdcXFwiIDogXFxcImhpa2VyOi8vcGFnZS9Db21pY0Jyb3dzZXIudmlld1xcXCI7XFxuICAgIGZvciAobGV0IGl0ZW0gb2YgbWhsaXN0KSB7XFxuICAgICAgICBsZXQgcGljID0gZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIGl0ZW0ucGF0aCArIFxcXCIvXFxcIiArIGl0ZW0ubmFtZSArIFxcXCIuanBnXFxcIikgPyBpdGVtLnBhdGggKyBcXFwiL1xcXCIgKyBpdGVtLm5hbWUgKyBcXFwiLmpwZ1xcXCIgOiBDb25maWcuZGVmX1BpYztcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogaXRlbS5uYW1lLFxcbiAgICAgICAgICAgIHBpY191cmw6IHBpYyxcXG4gICAgICAgICAgICB1cmw6IHBhZ2VVcmwgKyBcXFwiP3J1bGU9XFxcIiArIE1ZX1JVTEUudGl0bGUsXFxuICAgICAgICAgICAgZXh0cmE6IE9iamVjdC5hc3NpZ24oaXRlbSwge1xcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWIoOmZpFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygocGF0aCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImxvbmdQcmVzcy5qc1xcXCIpLmRlbGV0ZUZpbGVGb3JCb29rKHBhdGgpXFxuICAgICAgICAgICAgICAgICAgICB9LCBpdGVtLnBhdGgpXFxuICAgICAgICAgICAgICAgIH1dLFxcbiAgICAgICAgICAgICAgICBpZDogaXRlbS5wYXRoXFxuICAgICAgICAgICAgfSlcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcbn1cXG5cXG5tYWluKCk7XCJ9LHtcImNvbF90eXBlXCI6XCJ0ZXh0XzFcIixcIm5hbWVcIjpcIiN2Lua8q+eUu+eroOiKguWIl+ihqFwiLFwicGF0aFwiOlwiQ29taWNCcm93c2VyLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmlmIChnZXRQYXJhbShcXFwiaGFzUGFyYW1zXFxcIikgPT09IFxcXCJ0cnVlXFxcIikge1xcbiAgICBNWV9QQVJBTVMgPSB7XFxuICAgICAgICBwYXRoOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcInBhdGhcXFwiKSksXFxuICAgICAgICBuYW1lOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcIm5hbWVcXFwiKSlcXG4gICAgfVxcbn1cXG5sZXQgcGF0aCA9IE1ZX1BBUkFNUy5wYXRoO1xcbnNldFBhZ2VUaXRsZShcXFwiQ1Z8XFxcIiArIE1ZX1BBUkFNUy5uYW1lKVxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFwiKTtcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcblxcbnZhciBsYXlvdXQgPSBbXTtcXG5sZXQgbW9kZSA9IGdldE15VmFyKFxcXCIubW9kZVxcXCIsIFxcXCIwXFxcIik7XFxubGV0IGlzUmV2ZXJzZSA9IGdldE15VmFyKFxcXCIuaXNSZXZlcnNlXFxcIiwgXFxcIjBcXFwiKTtcXG5hZGRMaXN0ZW5lcihcXFwib25DbG9zZVxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICBjbGVhck15VmFyKFxcXCIubW9kZVxcXCIpO1xcbiAgICBjbGVhck15VmFyKFxcXCIuaXNSZXZlcnNlXFxcIik7XFxufSkpO1xcbmNvbnN0IGNvbWljU3RhdHVzID0gbmV3IE1hcChbXFxuICAgIFtcXFwiQVxcXCIsIFxcXCJcXFwiXSxcXG4gICAgW1xcXCJCXFxcIiwgXFxcIuKAmOKAmFvmnKrlrozmiJBd4oCZ4oCZXFxcIl1cXG5dKTtcXG5cXG5mdW5jdGlvbiBnZXRUaXRsZSh0aXRsZSkge1xcbiAgICBsZXQgdGl0bGVzID0gVG9vbC5zcGxpdCh0aXRsZSwgXFxcIiRcXFwiLCAyKTtcXG4gICAgcmV0dXJuIGNvbWljU3RhdHVzLmdldCh0aXRsZXNbMV0pICsgdGl0bGVzWzJdIHx8IHRpdGxlO1xcbn1cXG5mdW5jdGlvbiBnZXRUaXRsZTIodGl0bGUpe1xcbiAgICBsZXQgdGl0bGVzID0gVG9vbC5zcGxpdCh0aXRsZSwgXFxcIiRcXFwiLCAyKTtcXG4gICAgcmV0dXJuIHRpdGxlc1syXSB8fCB0aXRsZTtcXG59XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuWIoOmZpOaVtOacrFxcXCIsXFxuICAgIHVybDogJChcXFwi56Gu6K6k5Yig6Zmk5pW05pys5ryr55S777yfXFxcIikuY29uZmlybSgocGF0aCkgPT4ge1xcbiAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxuICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgIH1cXG4gICAgfSwgcGF0aCksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFtcXFwi55yL5ryr55S7XFxcIiwgXFxcIuWIoOmZpOeroOiKglxcXCJdW21vZGVdLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKG1vZGUpID0+IHtcXG4gICAgICAgIHB1dE15VmFyKFxcXCIubW9kZVxcXCIsIG1vZGUgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgfSwgbW9kZSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbn0pXFxubGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcImRpclxcXCIpO1xcbm1obGlzdC5zb3J0KChhLCBiKSA9PiB7XFxuICAgIGEgPSAoYS5uYW1lLm1hdGNoKC9cXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXG4gICAgYiA9IChiLm5hbWUubWF0Y2goL1xcXFxkKy8pIHx8IFtdKVswXSB8fCAwO1xcbiAgICByZXR1cm4gYSAtIGI7XFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi56ug6IqCIFxcXCIuYmlnKCkgKyAoXFxcIuWFseaciTpcXFwiICsgbWhsaXN0Lmxlbmd0aCArIFxcXCLnq6BcXFwiKS5zbWFsbCgpLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGlzUmV2ZXJzZSkgPT4ge1xcbiAgICAgICAgcHV0TXlWYXIoXFxcIi5pc1JldmVyc2VcXFwiLCBpc1JldmVyc2UgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgfSwgaXNSZXZlcnNlKSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxubGV0IGFycmF5ID0gW107XFxuXFxuaWYgKG1vZGUgPT09IFxcXCIwXFxcIikge1xcbiAgICBpZiAoQ29uZmlnLmRlZl9pc0NvbWljQ29tcGF0aWJsZSA9PT0gXFxcIjBcXFwiKSB7XFxuICAgICAgICBsZXQgbGF6eSA9ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgbGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChpbnB1dCk7XFxuICAgICAgICAgICAgbGV0IHNob3J0ZW4gPSBpbnB1dC5yZXBsYWNlKGdldFBhdGgoXFxcImhpa2VyOi8vZmlsZXMvXFxcIikuc2xpY2UoNyksXFxcImhpa2VyOi8vZmlsZXMvXFxcIik7XFxuICAgICAgICAgICAgbGV0IHBpY2xpc3QgPSBmaWxlbGlzdC5tYXAoKGl0ZW0sIGkpID0+IHNob3J0ZW4gKyBcXFwiL1xcXCIgKyAoaSArIDEpICsgXFxcIi5qcGdcXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInBpY3M6Ly9cXFwiICsgcGljbGlzdC5qb2luKFxcXCImJlxcXCIpO1xcbiAgICAgICAgfSk7XFxuICAgICAgICBmb3IgKGxldCBpdGVtIG9mIG1obGlzdCkge1xcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxuICAgICAgICAgICAgYXJyYXkucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXG4gICAgICAgICAgICAgICAgdXJsOiBpdGVtLnBhdGggKyBsYXp5LFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogQ29uZmlnLmRlZl9WaWV3X1N0eWxlLFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICB9IGVsc2Uge1xcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBtaGxpc3QpIHtcXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSBnZXRUaXRsZShpdGVtLm5hbWUpO1xcbiAgICAgICAgICAgIGFycmF5LnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxuICAgICAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9jb21pY0NvbXBhdGlibGUudmlldyNhdXRvUGFnZSMjcmVhZFRoZW1lIz9wYXRoPVxcXCIraXRlbS5wYXRoLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogQ29uZmlnLmRlZl9WaWV3X1N0eWxlLFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICAgICAgcGF0aDogaXRlbS5wYXRoLFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IGdldFRpdGxlMihpdGVtLm5hbWUpXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbn0gZWxzZSB7XFxuICAgIGZvciAobGV0IGl0ZW0gb2YgbWhsaXN0KSB7XFxuICAgICAgICBsZXQgbmFtZSA9IGdldFRpdGxlMihpdGVtLm5hbWUpO1xcbiAgICAgICAgYXJyYXkucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCLnoa7orqTliKDpmaRbXFxcIiArIG5hbWUgKyBcXFwiXe+8n1xcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXG4gICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sIGl0ZW0ucGF0aCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcIjFcXFwiKSB7XFxuICAgIGFycmF5LnJldmVyc2UoKTtcXG59XFxubGF5b3V0LnB1c2guYXBwbHkobGF5b3V0LCBhcnJheSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7ogZrlkIjmkJzntKJcIixcInBhdGhcIjpcIlNlYXJjaC52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qcz9ydWxlPVxcXCIgKyBNWV9SVUxFLl90aXRsZSk7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb24/cnVsZT1cXFwiICsgTVlfUlVMRS5fdGl0bGUpO1xcbmxldCBjb21pY1J1bGVEaXJzID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbZ2V0UGFyYW0oXFxcInR5cGVcXFwiKSArIFxcXCJQYXRoXFxcIl0sIFxcXCJkaXJcXFwiKTtcXG5pZiAoZ2V0UGFyYW0oXFxcImlzQWxsXFxcIikgPT09IFxcXCIxXFxcIikge1xcbiAgICBjb21pY1J1bGVEaXJzID0gY29taWNSdWxlRGlycy5maWx0ZXIoaXRlbSA9PiBpdGVtLm5hbWUgPT09IE1ZX1JVTEUudGl0bGUpO1xcbn1cXG5cXG5sZXQgc2VhcmNoUmVzdWx0ID0gW107XFxubGV0IHNlYXJjaFRlcm1zPSBnZXRQYXJhbShcXFwic2VhcmNoVGVybXNcXFwiKTtcXG5sZXQgc2VhcmNoVGVzdDtcXG5cXG5pZiAoIWdldFNlYXJjaE1vZGUoKSkge1xcbiAgICBsZXQgdGVybXNBcnIgPSBzZWFyY2hUZXJtcy5zcGxpdChcXFwiXFxcIikubWFwKHQgPT4gdC5yZXBsYWNlKC9cXFxcKnxcXFxcLnxcXFxcP3xcXFxcK3xcXFxcJHxcXFxcXnxcXFxcW3xcXFxcXXxcXFxcKHxcXFxcKXxcXFxce3xcXFxcfXxcXFxcfHxcXFxcL3xcXFxcXFxcXC9nLCBrID0+IFxcXCJcXFxcXFxcXFxcXCIgKyBrKSk7XFxuICAgIGxldCByZWcgPSBuZXcgUmVnRXhwKHRlcm1zQXJyLmpvaW4oXFxcIi4qXFxcIiksIFxcXCJpXFxcIik7XFxuICAgIHNlYXJjaFRlc3QgPSB0ZXh0ID0+IHJlZy50ZXN0KHRleHQpO1xcbn0gZWxzZSB7XFxuICAgIHNlYXJjaFRlc3QgPSB0ZXh0ID0+IHNlYXJjaENvbnRhaW5zKHRleHQsIHNlYXJjaFRlcm1zLCBmYWxzZSk7XFxufVxcblxcbmxldCBwYWdlVXJsID0gZ2V0UGFyYW0oXFxcInR5cGVcXFwiKSA9PT0gXFxcIm5vdmVsXFxcIiA/IFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxCcm93c2VyLnZpZXdcXFwiIDogXFxcImhpa2VyOi8vcGFnZS9Db21pY0Jyb3dzZXIudmlld1xcXCI7XFxuZm9yIChsZXQgc29uRGlyIG9mIGNvbWljUnVsZURpcnMpIHtcXG4gICAgbGV0IGNvbWljTGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgoc29uRGlyLnBhdGgsIFxcXCJkaXJcXFwiKTtcXG4gICAgZm9yIChsZXQgY29taWMgb2YgY29taWNMaXN0KSB7XFxuICAgICAgICBpZiAoc2VhcmNoVGVzdChjb21pYy5uYW1lKSkge1xcbiAgICAgICAgICAgIHNlYXJjaFJlc3VsdC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGNvbWljLm5hbWUsXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IGNvbWljLnBhdGggKyBcXFwiL1xcXCIgKyBjb21pYy5uYW1lICsgXFxcIi5qcGdcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6IHBhZ2VVcmwgKyBcXFwiP3J1bGU9XFxcIiArIE1ZX1JVTEUuX3RpdGxlLFxcbiAgICAgICAgICAgICAgICBkZXNjOiBzb25EaXIubmFtZSxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IGNvbWljXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG59XFxuc2V0UmVzdWx0KHNlYXJjaFJlc3VsdCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7orr7nva5cIixcInBhdGhcIjpcIlNldHRpbmcudmlld1wiLFwicnVsZVwiOlwianM6XFxuc2V0UGFnZVRpdGxlKE1ZX1JVTEUudGl0bGUgKyBcXFwifOiuvue9rlxcXCIpO1xcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuXFxubGV0IGxheW91dCA9IFtdO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCI8c3Ryb25nPuWfuuehgOiuvue9rjwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLnm67lvZXot6/lvoRcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/c2V0dGluZ1R5cGU9Y29udGVudHNcXFwiLFxcbiAgICBkZXNjOiBDb25maWcuaG9tZVBhdGgsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLorr7nva7pu5jorqTlsIHpnaJcXFwiLFxcbiAgICBkZXNjOiBDb25maWcuZGVmX1BpYyxcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcvTW9yZS52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3NldHRpbmdUeXBlPWRlZmF1bHRQaWNcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgfVxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCI8c3Ryb25nPuS4i+i9veWZqOiuvue9rjwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcblxcbmZ1bmN0aW9uIHNldE51bShrZXksIHRlc3QpIHtcXG4gICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgMCkgfHwgXFxcInt9XFxcIik7XFxuICAgIGlucHV0ID0gcGFyc2VJbnQoaW5wdXQpO1xcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0KSkgcmV0dXJuIFxcXCJ0b2FzdDovL+ivt+i+k+WFpeaVsOWtl1xcXCI7XFxuICAgIGlmICghdGVzdChpbnB1dCkpIHJldHVybiBcXFwidG9hc3Q6Ly/kuI3nrKblkIjmnaHku7ZcXFwiO1xcbiAgICBDb25maWdba2V5XSA9IGlucHV0O1xcbiAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICByZXR1cm4gXFxcInRvYXN0Oi8v5L+u5pS55oiQ5YqfXFxcIjtcXG59XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcImxvZ+aVsFxcXCIsXFxuICAgIHVybDogJChDb25maWcubG9nTnVtLCBcXFwiMDxOPDEwMFxcXCIpLmlucHV0KHNldE51bSwgXFxcImxvZ051bVxcXCIsIGl0ID0+IGl0ID4gMCAmJiBpdCA8IDEwMCksXFxuICAgIGRlc2M6IFxcXCJcXFwiICsgQ29uZmlnLmxvZ051bSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuWIhuaJueS4i+i9veaVsCgw5LiN5byA5ZCvKVxcXCIsXFxuICAgIHVybDogJChcXFwiXFxcIiArIENvbmZpZy50aHJlYWROdW0sIFxcXCJOPi0xXFxcIikuaW5wdXQoc2V0TnVtLCBcXFwidGhyZWFkTnVtXFxcIiwgaXQgPT4gaXQgPiAtMSksXFxuICAgIGRlc2M6IFxcXCJcXFwiICsgQ29uZmlnLnRocmVhZE51bSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcbiAgICB9XFxufSk7XFxuXFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIjxzdHJvbmc+5bCP6K+06ZiF6K+75Zmo6K6+572uPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVcXFwiXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIum7mOiupOW8gOWQr+WIhumhtemYheivu1xcXCIsXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoZGVmX2lzUGFnaW5hdGUpID0+IHtcXG4gICAgICAgIGxldCBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIDApIHx8IFxcXCJ7fVxcXCIpO1xcblxcbiAgICAgICAgQ29uZmlnLmRlZl9pc1BhZ2luYXRlID0gZGVmX2lzUGFnaW5hdGUgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIjtcXG5cXG4gICAgICAgIHNhdmVGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgfSwgQ29uZmlnLmRlZl9pc1BhZ2luYXRlKSxcXG4gICAgZGVzYzogQ29uZmlnLmRlZl9pc1BhZ2luYXRlID09PSBcXFwiMFxcXCIgPyBcXFwi5LiN5byA5ZCvXFxcIiA6IFxcXCLlvIDlkK9cXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJcXG59KTtcXG5cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5q+P6aG15pyA5aSn56ug5pWwXFxcIixcXG4gICAgdXJsOiAkKENvbmZpZy52aWV3UGFnZVNpemUsIFxcXCIzMDxOPDUwMFxcXCIpLmlucHV0KHNldE51bSwgXFxcInZpZXdQYWdlU2l6ZVxcXCIsIGl0ID0+IGl0ID4gMzAgJiYgaXQgPCA1MDApLFxcbiAgICBkZXNjOiBcXFwiXFxcIiArIENvbmZpZy52aWV3UGFnZVNpemUsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLmm7/mjaLop4TliJlcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/c2V0dGluZ1R5cGU9cmVwbGFjZVJ1bGVcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgfVxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCI8c3Ryb25nPua8q+eUu+mYheivu+WZqOiuvue9rjwvc3Ryb25nPlxcXCIuYmlnKCksXFxuICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlhbzlrrnmqKHlvI9cXFwiLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGRlZl9pc0NvbWljQ29tcGF0aWJsZSkgPT4ge1xcbiAgICAgICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgMCkgfHwgXFxcInt9XFxcIik7XFxuXFxuICAgICAgICBDb25maWcuZGVmX2lzQ29taWNDb21wYXRpYmxlID0gZGVmX2lzQ29taWNDb21wYXRpYmxlID09PSBcXFwiMFxcXCIgPyBcXFwiMVxcXCIgOiBcXFwiMFxcXCI7XFxuXFxuICAgICAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgIH0sIENvbmZpZy5kZWZfaXNDb21pY0NvbXBhdGlibGUpLFxcbiAgICBkZXNjOiBDb25maWcuZGVmX2lzQ29taWNDb21wYXRpYmxlID09PSBcXFwiMFxcXCIgPyBcXFwi5LiN5byA5ZCvXFxcIiA6IFxcXCLlvIDlkK9cXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwiPHN0cm9uZz7lhbbku5borr7nva48L3N0cm9uZz5cXFwiLmJpZygpLFxcbiAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwibGluZVxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwibGluZVxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi6KeE5YiZ5Y+R5biD6aG1XFxcIixcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL3J1bGVEZXRhaWwjbm9IaXN0b3J5IyNub1JlY29yZEhpc3RvcnkjP3J1bGU96YGT6ZW/5LuT5bqTUHJvXFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGx2ZXI6IE1ZX1BBUkFNUy52ZXJzaW9uIHx8IFxcXCLojrflj5bniYjmnKzlpLHotKXvvIzoh6rooYzmn6XnnItcXFwiLFxcbiAgICAgICAgaWQ6IFxcXCIzNTU5XFxcIlxcbiAgICB9LFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCJcXG59KTtcXG5cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5oGi5aSN6buY6K6k6K6+572uXFxcIixcXG4gICAgdXJsOiAkKFxcXCLnoa7orqTmgaLlpI3pu5jorqTorr7nva7vvJ9cXFwiKS5jb25maXJtKCgpID0+IHtcXG4gICAgICAgIGRlbGV0ZUZpbGUoXFxcImNvbmZpZy5qc29uXFxcIik7XFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5oGi5aSN5a6M5oiQXFxcIjtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLmuIXnkIbnvJPlrZhcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3NldHRpbmdUeXBlPWNhY2hlXFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuaWh+S7tueuoeeQhlxcXCIsXFxuICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9GaWxlTWFuYWdlbWVudC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIixcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiXFxufSk7XFxubGV0IHRpZCA9IERhdGUubm93KCk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuajgOa1i+abtOaWsFxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChvbGRWZXJzaW9uLCB0aWQpID0+IHtcXG4gICAgICAgIHRyeSB7XFxuICAgICAgICAgICAgbGV0IG5ld1ZlcnNpb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9kZXYvZ2V0YnlpZD9pZD0zNTU5XFxcIiwge1xcbiAgICAgICAgICAgICAgICB0aW1lb3V0OiAyMDAwXFxuICAgICAgICAgICAgfSkpLnJlc3VsdC52ZXI7XFxuICAgICAgICAgICAgaWYgKG5ld1ZlcnNpb24gPD0gb2xkVmVyc2lvbikge1xcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXCIj6K6+572uX+abtOaWsFxcXCIsIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi5bey57uP5piv5pyA5paw54mI5pys5LqGXFxcIlxcbiAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOaWsOeJiOacrOS6hlxcXCI7XFxuICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbSh0aWQgKyBcXFwiI+iuvue9rl/mm7TmlrBcXFwiLCB7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuacieaWsOeJiOacrOi/mOacquabtOaWsFxcXCJcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLmnInmlrDniYjmnKzov5jmnKrmm7TmlrBcXFwiKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJydWxlOi8vNXJXMzZaaVU2S2VHNTVXTTc3K2xhRzl0WlY5eWRXeGxYM1Z5Yk8rL3BXaDBkSEE2THk5b2FXdGxjaTV1YjJ0cFlTNXdjbVZ6Y3k5b2FXdGxjblZzWlM5eWRXeGxiR2x6ZEM1cWMyOXVQMmxrUFRNMU5Uaz1cXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXCIj6K6+572uX+abtOaWsFxcXCIsIHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLkv6Hmga/ojrflj5blpLHotKVcXFwiXFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+abtOaWsOS/oeaBr+iOt+WPluWksei0pVxcXCI7XFxuICAgICAgICB9XFxuICAgIH0sIE1ZX1BBUkFNUy52ZXJzaW9uLCB0aWQpLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgaWQ6IHRpZCArIFxcXCIj6K6+572uX+abtOaWsFxcXCJcXG4gICAgfVxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlhbPkuo7lpoLkvZXosIPnlKhcXFwiLFxcbiAgICB1cmw6IFxcXCJtcXFhcGk6Ly9mb3J3YXJkL3VybD9zcmNfdHlwZT13ZWImc3R5bGU9ZGVmYXVsdCZwbGdfYXV0aD0xJnZlcnNpb249MSZ1cmxfcHJlZml4PWFIUjBjSE02THk5eGRXNHVjWEV1WTI5dEwzRnhkMlZpTDNGMWJuQnlieTl6YUdGeVpUOWZkM1k5TXlaZmQzZDJQVEV5T0NacGJuWnBkR1ZEYjJSbFBURklSbmxDU2labWNtOXRQVEkwTmpZeE1DWmlhWG85YTJFakwyOTFkQT09XFxcIixcXG4gICAgZGVzYzogXFxcIuivpue7hueCueWHu+WKoOWFpemikemBkyjlv6vmnaXljY7lsbHkuI7miJHorrpbamld5YmRKVxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLpl67popjlj43ppohcXFwiLFxcbiAgICB1cmw6IFxcXCJtcXFhcGk6Ly9mb3J3YXJkL3VybD9zcmNfdHlwZT13ZWImc3R5bGU9ZGVmYXVsdCZwbGdfYXV0aD0xJnZlcnNpb249MSZ1cmxfcHJlZml4PWFIUjBjSE02THk5eGRXNHVjWEV1WTI5dEwzRnhkMlZpTDNGMWJuQnlieTl6YUdGeVpUOWZkM1k5TXlaZmQzZDJQVEV5T0NaaGNIQkRhR0Z1Ym1Wc1BYTm9ZWEpsSm1sdWRtbDBaVU52WkdVOU1WaE9ZV3hCUlhsMlZtb21ZMjl1ZEdWdWRFbEVQV016YkVsUUptSjFjMmx1WlhOelZIbHdaVDB5Sm1aeWIyMDlNVGd4TURjMEptSnBlajFyWVNadFlXbHVVMjkxY21ObFNXUTljMmhoY21VbWMzVmlVMjkxY21ObFNXUTliM1JvWlhKekptcDFiWEJ6YjNWeVkyVTljMmh2Y25SMWNtdz0mdD0xNjcxODkzMTIzNTk3I0ludGVudDtzY2hlbWU9bXFxYXBpO3BhY2thZ2U9Y29tLnRlbmNlbnQubW9iaWxlcXE7ZW5kXFxcIixcXG4gICAgZGVzYzogXFxcIue7neWvueS4jeS8muaciWJ1ZyjllYrmiJHkuI3mjqXlj5chKVxcXCIsXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbi8qXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIua4hemZpOWwj+ivtOWIhumhteiusOW9lVxcXCIsXFxuICAgIHVybDogJChcXFwi56Gu6K6k5riF6Zmk5bCP6K+05YiG6aG16K6w5b2V77yfXFxcIikuY29uZmlybSgoKSA9PiB7XFxuICAgICAgICBkZWxldGVGaWxlKFxcXCJub3ZlbEZvb3RwcmludC5qc29uXFxcIik7XFxuICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5riF6Zmk5a6M5oiQXFxcIjtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbn0pO1xcbiovXFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJ0ZXh0XzFcIixcIm5hbWVcIjpcIiN2LuWwj+ivtOeroOiKguWIl+ihqFwiLFwicGF0aFwiOlwiTm92ZWxCcm93c2VyLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmlmIChnZXRQYXJhbShcXFwiaGFzUGFyYW1zXFxcIikgPT09IFxcXCJ0cnVlXFxcIikge1xcbiAgICBNWV9QQVJBTVMgPSB7XFxuICAgICAgICBwYXRoOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcInBhdGhcXFwiKSksXFxuICAgICAgICBuYW1lOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcIm5hbWVcXFwiKSlcXG4gICAgfVxcbn1cXG5sZXQgcGF0aCA9IE1ZX1BBUkFNUy5wYXRoO1xcbnNldFBhZ2VUaXRsZShcXFwiTlZ8XFxcIiArIE1ZX1BBUkFNUy5uYW1lKTtcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbmNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5jb25zdCBib29rSW5mbyA9IE9iamVjdC5hc3NpZ24oe1xcbiAgICBmb290OiAwLFxcbiAgICBpc1JlcGxhY2U6IHRydWVcXG59LCBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpKTtcXG5sZXQgaWQgPSBcXFwiI1xcXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcXG52YXIgbGF5b3V0ID0gW107XFxubGV0IG1vZGUgPSBnZXRNeVZhcihcXFwiLm1vZGVcXFwiLCBcXFwiMFxcXCIpO1xcbmxldCBtb2RlMiA9IGdldE15VmFyKFxcXCIubW9kZTJcXFwiLCBDb25maWcuZGVmX2lzUGFnaW5hdGUpO1xcblxcbmxldCBpc1JldmVyc2UgPSBnZXRNeVZhcihcXFwiLmlzUmV2ZXJzZVxcXCIsIFxcXCIwXFxcIik7XFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgY2xlYXJNeVZhcihcXFwiLm1vZGVcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLm1vZGUyXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoXFxcIi5pc1JldmVyc2VcXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLnBhZ2VOdW1cXFwiKTtcXG59KSk7XFxuXFxuZnVuY3Rpb24gZ2V0VGl0bGUodGl0bGUpIHtcXG4gICAgbGV0IHRpdGxlcyA9IFRvb2wuc3BsaXQodGl0bGUsIFxcXCIkXFxcIiwgMik7XFxuICAgIHJldHVybiB0aXRsZXNbMl0gIT09IHVuZGVmaW5lZCA/IHRpdGxlc1syXS5zbGljZSgwLCB0aXRsZXNbMl0ubGFzdEluZGV4T2YoXFxcIi5cXFwiKSkgOiB0aXRsZTtcXG59XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuWIoOmZpOaVtOacrFxcXCIsXFxuICAgIHVybDogJChcXFwi56Gu6K6k5Yig6Zmk5pW05pys5bCP6K+077yfXFxcIikuY29uZmlybSgocGF0aCkgPT4ge1xcbiAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxuICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFwiO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgIH1cXG4gICAgfSwgcGF0aCksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFtcXFwi55yL5bCP6K+0XFxcIiwgXFxcIuWIoOmZpOeroOiKglxcXCJdW21vZGVdLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKG1vZGUpID0+IHtcXG4gICAgICAgIHB1dE15VmFyKFxcXCIubW9kZVxcXCIsIG1vZGUgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG4gICAgfSwgbW9kZSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcblxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLigJjigJjmm7TlpJrlip/og70gPuKAmeKAmVxcXCIsXFxuICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxufSk7XFxuXFxuZnVuY3Rpb24gdHh0KHBhdGhzKSB7XFxuICAgIHNob3dMb2FkaW5nKFxcXCLmraPlnKjlkIjlubYuLi5cXFwiKTtcXG4gICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFwiKTtcXG4gICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5cXG4gICAgbGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChwYXRocy5wYXRoLCBcXFwiZmlsZVxcXCIsIFxcXCIudHh0XFxcIik7XFxuICAgIGxldCBsaXN0TGVuZ3RoID0gZmlsZWxpc3QubGVuZ3RoO1xcbiAgICBpZiAobGlzdExlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/nqbrnmoTnq6DoioJcXFwiO1xcbiAgICB9XFxuICAgIGNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgICAgICBzZWxlY3RlZDogW10sXFxuICAgICAgICBpc1JlcGxhY2U6IHRydWVcXG4gICAgfSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGhzLnBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKSk7XFxuICAgIGxldCBidWZpbGVsaXN0ID0gW107XFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdExlbmd0aDsgaSsrKSB7XFxuICAgICAgICBsZXQgZmlsZSA9IGZpbGVsaXN0W2ldO1xcbiAgICAgICAgbGV0IGZpbGVJbmZvID0gVG9vbC5zcGxpdChmaWxlLm5hbWUsIFxcXCIkXFxcIiwgMik7XFxuICAgICAgICBidWZpbGVsaXN0LnB1c2goe1xcbiAgICAgICAgICAgIG5hbWU6IGZpbGVJbmZvWzJdLnNsaWNlKDAsIGZpbGVJbmZvWzJdLmxhc3RJbmRleE9mKFxcXCIuXFxcIikpLFxcbiAgICAgICAgICAgIHBhdGg6IFxcXCJmaWxlOi8vXFxcIiArIGZpbGUucGF0aCxcXG4gICAgICAgICAgICBpZDogTnVtYmVyKGZpbGVJbmZvWzBdKSB8fCAwXFxuICAgICAgICB9KTtcXG4gICAgfVxcbiAgICBidWZpbGVsaXN0LnNvcnQoKGEsIGIpID0+IGEuaWQgLSBiLmlkKTtcXG4gICAgbGV0IGVudGlyZVBhdGggPSBwYXRocy5wYXRoLnJlcGxhY2UoQ29uZmlnLm5vdmVsUGF0aCwgQ29uZmlnLm5vdmVsRnVsbFBhdGgpICsgXFxcIi50eHRcXFwiO1xcbiAgICBsZXQgZW50aXJlUGF0aHRvID0gYm9va0luZm8uaXNSZXBsYWNlID8gZW50aXJlUGF0aCArIFxcXCIudG1wXFxcIiA6IGVudGlyZVBhdGg7XFxuXFxuICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgZW50aXJlUGF0aCkpIHtcXG4gICAgICAgIHRvYXN0KFxcXCLliJ3lp4vljJbmlofku7ZcXFwiKTtcXG4gICAgICAgIGlmICghRmlsZS5kZWxldGVGaWxlcyhlbnRpcmVQYXRoKSkge1xcbiAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIneWni+WMluWksei0pVxcXCI7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHRvYXN0KFxcXCLliJ3lp4vljJbmiJDlip9cXFwiKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RMZW5ndGg7IGkrKykge1xcbiAgICAgICAgbGV0IGl0ZW0gPSBidWZpbGVsaXN0W2ldO1xcbiAgICAgICAgbGV0IGNvbnRlbnQgPSByZXF1ZXN0KGl0ZW0ucGF0aCk7XFxuICAgICAgICBGaWxlLmZpbGVXcml0ZUFwcGVuZChlbnRpcmVQYXRodG8sIGl0ZW0ubmFtZSArIFxcXCJcXFxcbuOAgOOAgFxcXCIgKyBjb250ZW50LnJlcGxhY2UoLyZuYnNwOy9nLFxcXCJcXFwiKS5zcGxpdCgvKFxcXFxufFxcXFxyKSsvKS5maWx0ZXIoaXQgPT4gaXQudHJpbSgpLmxlbmd0aCA+IDEpLm1hcChpdD0+aXQudHJpbSgpKS5qb2luKFxcXCJcXFxccuOAgOOAgFxcXCIpICsgXFxcIlxcXFxuXFxcXG5cXFwiKTtcXG4gICAgfVxcbiAgICBpZiAoYm9va0luZm8uaXNSZXBsYWNlKSB7XFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICBsZXQgbGVuID0gcnVsZUxpc3QubGVuZ3RoO1xcbiAgICAgICAgbGV0IHJlcGxhY2VQYXR0ZXJuID0gW1xcXCJyZXBsYWNlXFxcIiwgXFxcInJlcGxhY2VBbGxcXFwiXTtcXG4gICAgICAgIGxldCBmbGFnID0gRmlsZS5maWxlUnVsZShlbnRpcmVQYXRodG8sIGVudGlyZVBhdGgsIChqYXZhU3RyaW5nKSA9PiB7XFxuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW47IGkrKykge1xcbiAgICAgICAgICAgICAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXG4gICAgICAgICAgICAgICAgaWYgKCFib29rSW5mby5zZWxlY3RlZC5pbmNsdWRlcyhyZXBsYWNlUnVsZS5pZCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVBhdHRlcm5bMCArIHJlcGxhY2VSdWxlLmlzUmVnZXhdO1xcbiAgICAgICAgICAgICAgICBqYXZhU3RyaW5nID0gamF2YVN0cmluZ1tyZXBsYWNlXShyZXBsYWNlUnVsZS5wYXR0ZXJuLCByZXBsYWNlUnVsZS5yZXBsYWNlbWVudCk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHJldHVybiBqYXZhU3RyaW5nLmdldEJ5dGVzKCk7XFxuICAgICAgICB9KTtcXG4gICAgICAgIGlmICghZmxhZykge1xcbiAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WQiOW5tuWksei0pVxcXCI7XFxuICAgICAgICB9XFxuXFxuICAgIH1cXG4gICAgaGlkZUxvYWRpbmcoKTtcXG4gICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WQiOW5tuWujOaIkFxcXCI7XFxufVxcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlkIjlubblsI/or7RcXFwiLFxcbiAgICB1cmw6ICQoXFxcIuehruWumuWQiOW5tj9cXFxcbuS8muimhuebluW3suaciVRYVFxcXCIpLmNvbmZpcm0odHh0LCBNWV9QQVJBTVMpLFxcbiAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogW1xcXCLimJDliIbpobVcXFwiLCBcXFwi4piR5YiG6aG1XFxcIl1bbW9kZTJdLFxcbiAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKG1vZGUyKSA9PiB7XFxuICAgICAgICBwdXRNeVZhcihcXFwiLm1vZGUyXFxcIiwgbW9kZTIgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgIH0sIG1vZGUyKSxcXG4gICAgY29sX3R5cGU6IFxcXCJzY3JvbGxfYnV0dG9uXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLlh4DljJZcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxDdXN0b20udmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSMjbm9SZWZyZXNoI1xcXCIsXFxuICAgIGV4dHJhOiBNWV9QQVJBTVMsXFxuICAgIGNvbF90eXBlOiBcXFwic2Nyb2xsX2J1dHRvblxcXCJcXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5aSW6YOo5p+l55yLXFxcIixcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbiAgICAgICAgbGV0IGVudGlyZVBhdGggPSBwYXRoLnJlcGxhY2UoQ29uZmlnLm5vdmVsUGF0aCwgQ29uZmlnLm5vdmVsRnVsbFBhdGgpICsgXFxcIi50eHRcXFwiO1xcbiAgICAgICAgaWYgKGZpbGVFeGlzdChcXFwiZmlsZTovL1xcXCIgKyBlbnRpcmVQYXRoKSkge1xcbiAgICAgICAgICAgIHRvYXN0KFxcXCLosIPnlKjnrKzkuInmlrnlupTnlKjmiZPlvIDmlofku7ZcXFwiKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXCIgKyBlbnRpcmVQYXRoXFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/mnKzlnLDmmoLml6Dlj6/kvpvlpJbpg6jmiZPlvIDnmoR0eHTmlofku7bvvIzor7flhYjlkIjlubblsI/or7TvvIFcXFwiXFxuICAgICAgICB9XFxuICAgIH0sIHBhdGgpLFxcbiAgICBjb2xfdHlwZTogXFxcInNjcm9sbF9idXR0b25cXFwiXFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxufSk7XFxuXFxubGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcImZpbGVcXFwiLCBcXFwiLnR4dFxcXCIpO1xcbm1obGlzdC5zb3J0KChhLCBiKSA9PiB7XFxuICAgIGEgPSAoYS5uYW1lLm1hdGNoKC9cXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXG4gICAgYiA9IChiLm5hbWUubWF0Y2goL1xcXFxkKy8pIHx8IFtdKVswXSB8fCAwO1xcbiAgICByZXR1cm4gYSAtIGI7XFxufSk7XFxubGV0IGNoYXB0ZXJMaXN0ID0gW107XFxubGV0IGNoYXB0ZXJDb3VudCA9IG1obGlzdC5sZW5ndGg7XFxuXFxuaWYgKG1vZGUyID09PSBcXFwiMVxcXCIpIHtcXG4gICAgbGV0IG1obGlzdENodW5rID0gVG9vbC5jaHVuayhtaGxpc3QsIENvbmZpZy52aWV3UGFnZVNpemUpO1xcbiAgICBsZXQgdmlld1BhZ2VDb3VudCA9IG1obGlzdENodW5rLmxlbmd0aDtcXG4gICAgbGV0IGRlZlBhZ2UgPSAodmlld1BhZ2VDb3VudCAtIDEgPCBib29rSW5mby5mb290ID8gMCA6IGJvb2tJbmZvLmZvb3QpIHx8IDA7XFxuICAgIGxldCBwYWdlTnVtID0gTnVtYmVyKGdldE15VmFyKFxcXCIucGFnZU51bVxcXCIsIFxcXCJcXFwiICsgZGVmUGFnZSkpO1xcbiAgICBjaGFwdGVyTGlzdCA9IG1obGlzdENodW5rW3BhZ2VOdW1dIHx8IFtdO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnVxcXCIgKyBcXFwi56ug6IqCIFxcXCIuYmlnKCkgKyAoXFxcIuacrOmhtTpcXFwiICsgY2hhcHRlckxpc3QubGVuZ3RoICsgXFxcIiDlhbHmnIk6XFxcIiArIGNoYXB0ZXJDb3VudCArIFxcXCLnq6Ag5b2T5YmNOlxcXCIgKyAocGFnZU51bSArIDEpICsgXFxcIi9cXFwiICsgdmlld1BhZ2VDb3VudCkuc21hbGwoKSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5pc1JldmVyc2VcXFwiLCBpc1JldmVyc2UgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICAgICAgfSwgaXNSZXZlcnNlKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLot7Ppm4ZcXFwiLFxcbiAgICAgICAgdXJsOiAkKGNoYXB0ZXJDb3VudCwgXFxcIui+k+WFpei3s+i9rOeroOiKgiAxLVxcXCIgKyBjaGFwdGVyQ291bnQpLmlucHV0KChjaGFwdGVyQ291bnQsIHBhZ2VOdW0sIHZpZXdQYWdlU2l6ZSwgcGF0aCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IE51bWJlcihpbnB1dCk7XFxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihpbnB1dE51bSkgfHwgaW5wdXROdW0gPCAwIHx8IGlucHV0TnVtID4gY2hhcHRlckNvdW50KSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/or7fovpPlhaXmraPnoa7ojIPlm7TlhoXnmoTmlbDlrZdcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBpbnB1dE51bSA9IE1hdGguZmxvb3IoKGlucHV0TnVtICsgdmlld1BhZ2VTaXplKSAvIHZpZXdQYWdlU2l6ZSkgLSAxO1xcbiAgICAgICAgICAgIGlmIChwYWdlTnVtID09PSBpbnB1dE51bSkgcmV0dXJuIFxcXCJ0b2FzdDovL+ato+WcqOW9k+WJjemhtemdolxcXCI7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5wYWdlTnVtXFxcIiwgXFxcIlxcXCIgKyBpbnB1dE51bSk7XFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICB9LCBjaGFwdGVyQ291bnQsIHBhZ2VOdW0sIENvbmZpZy52aWV3UGFnZVNpemUsIHBhdGgpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzVcXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIui3s+mhtVxcXCIsXFxuICAgICAgICB1cmw6ICQocGFnZU51bSArIDEsIFxcXCLot7PovazpobXmlbAgMS1cXFwiICsgdmlld1BhZ2VDb3VudCkuaW5wdXQoKHZpZXdQYWdlQ291bnQsIHBhZ2VOdW0sIHBhdGgpID0+IHtcXG4gICAgICAgICAgICBsZXQgaW5wdXROdW0gPSBOdW1iZXIoaW5wdXQpIC0gMTtcXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0TnVtKSB8fCBpbnB1dE51bSA8IDAgfHwgaW5wdXROdW0gPiB2aWV3UGFnZUNvdW50IC0gMSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v6K+36L6T5YWl5q2j56Gu6IyD5Zu05YaF55qE5pWw5a2XXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgaWYgKHBhZ2VOdW0gPT09IGlucHV0TnVtKSByZXR1cm4gXFxcInRvYXN0Oi8v5q2j5Zyo5b2T5YmN6aG16Z2iXFxcIjtcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFwiLnBhZ2VOdW1cXFwiLCBcXFwiXFxcIiArIGlucHV0TnVtKTtcXG4gICAgICAgICAgICBjb25zdCBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIik7XFxuICAgICAgICAgICAgYm9va0luZm8uZm9vdCA9IGlucHV0TnVtO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICB9LCB2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF81XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLkuIrkuIDpobVcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYWdlTnVtLCBwYXRoKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFnZU51bSAtIDE7XFxuICAgICAgICAgICAgaWYgKGlucHV0TnVtIDwgMCkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey57uP5piv56ys5LiA6aG15LqGXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5wYWdlTnVtXFxcIiwgXFxcIlxcXCIgKyBpbnB1dE51bSk7XFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCBwYWdlTnVtLCBwYXRoKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF81XFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLkuIvkuIDpobVcXFwiLFxcbiAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCh2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSA9PiB7XFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFnZU51bSArIDE7XFxuICAgICAgICAgICAgaWYgKGlucHV0TnVtID4gdmlld1BhZ2VDb3VudCAtIDEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOWQjuS4gOmhteS6hlxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCIucGFnZU51bVxcXCIsIFxcXCJcXFwiICsgaW5wdXROdW0pO1xcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgdmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfNVxcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5pyr6aG1XFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgodmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCkgPT4ge1xcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IHZpZXdQYWdlQ291bnQgLSAxO1xcbiAgICAgICAgICAgIGlmIChwYWdlTnVtID09PSBpbnB1dE51bSB8fCBpbnB1dE51bSA9PT0gLTEpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOWQjuS4gOmhteS6hlxcXCI7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCIucGFnZU51bVxcXCIsIFxcXCJcXFwiICsgaW5wdXROdW0pO1xcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgdmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfNVxcXCJcXG4gICAgfSk7XFxufSBlbHNlIHtcXG4gICAgY2hhcHRlckxpc3QgPSBtaGxpc3Q7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi4oCc4oCc4oCd4oCdXFxcIiArIFxcXCLnq6DoioIgXFxcIi5iaWcoKSArIChcXFwi5YWx5pyJOlxcXCIgKyBjaGFwdGVyQ291bnQgKyBcXFwi56ugXFxcIikuc21hbGwoKSxcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5pc1JldmVyc2VcXFwiLCBpc1JldmVyc2UgPT09IFxcXCIwXFxcIiA/IFxcXCIxXFxcIiA6IFxcXCIwXFxcIik7XFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIlxcbiAgICAgICAgfSwgaXNSZXZlcnNlKSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIlxcbiAgICB9KTtcXG59XFxubGV0IGFycmF5ID0gW107XFxuaWYgKG1vZGUgPT09IFxcXCIwXFxcIikge1xcbiAgICBmb3IgKGxldCBpdGVtIG9mIGNoYXB0ZXJMaXN0KSB7XFxuICAgICAgICBsZXQgbmFtZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxuICAgICAgICBhcnJheS5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogbmFtZSxcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxNYWluQm9keSNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgcGF0aDogaXRlbS5wYXRoLFxcbiAgICAgICAgICAgICAgICBkaXJQYXRoOiBwYXRoLFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbmFtZSxcXG4gICAgICAgICAgICB9LFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBDb25maWcuZGVmX1ZpZXdfU3R5bGVcXG4gICAgICAgIH0pO1xcbiAgICB9XFxufSBlbHNlIHtcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjaGFwdGVyTGlzdCkge1xcbiAgICAgICAgbGV0IG5hbWUgPSBnZXRUaXRsZShpdGVtLm5hbWUpO1xcbiAgICAgICAgYXJyYXkucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCLnoa7orqTliKDpmaRbXFxcIiArIG5hbWUgKyBcXFwiXe+8n1xcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXG4gICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0sIGl0ZW0ucGF0aCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcIjFcXFwiKSB7XFxuICAgIGFycmF5LnJldmVyc2UoKTtcXG59XFxubGF5b3V0LnB1c2guYXBwbHkobGF5b3V0LCBhcnJheSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7lsI/or7TmraPmlofpmIXor7tcIixcInBhdGhcIjpcIk5vdmVsTWFpbkJvZHlcIixcInJ1bGVcIjpcImpzOlxcbnZhciBsYXlvdXQgPSBbXTtcXG5sZXQgY29udGVudCA9IHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgTVlfUEFSQU1TLnBhdGgpO1xcbi8vY29udGVudCA9IGNvbnRlbnQucmVwbGFjZSgvXFxcXG58XFxcXHIvZywgXFxcIjxicj5cXFwiKS5yZXBsYWNlKC8oJm5ic3A7KSsvZyxcXFwiIFxcXCIpO1xcbmNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgIHNlbGVjdGVkOiBbXSxcXG4gICAgaXNSZXBsYWNlOiB0cnVlXFxufSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIE1ZX1BBUkFNUy5kaXJQYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIikpO1xcbmNvbnRlbnQgPSBcXFwi44CA44CAXFxcIiArIGNvbnRlbnQuc3BsaXQoLyhcXFxcbnxcXFxccikrLykuZmlsdGVyKGl0ID0+IGl0LnRyaW0oKS5sZW5ndGggPiAxKS5tYXAoaXQ9Pml0LnRyaW0oKSkuam9pbihcXFwiPGJyPuOAgOOAgFxcXCIpO1xcblxcbmlmIChib29rSW5mby5pc1JlcGxhY2UpIHtcXG4gICAgbGV0IGphdmFTdHJpbmcgPSBqYXZhLmxhbmcuU3RyaW5nKGNvbnRlbnQpO1xcbiAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgIGxldCByZXBsYWNlUGF0dGVybiA9IFtcXFwicmVwbGFjZVxcXCIsIFxcXCJyZXBsYWNlQWxsXFxcIl07XFxuICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBydWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xcbiAgICAgICAgbGV0IHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaV07XFxuICAgICAgICBpZiAoIWJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKSkge1xcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUGF0dGVyblswICsgcmVwbGFjZVJ1bGUuaXNSZWdleF07XFxuICAgICAgICBqYXZhU3RyaW5nID0gamF2YVN0cmluZ1tyZXBsYWNlXShyZXBsYWNlUnVsZS5wYXR0ZXJuLCByZXBsYWNlUnVsZS5yZXBsYWNlbWVudCk7XFxuICAgIH1cXG4gICAgY29udGVudCA9IFN0cmluZyhqYXZhU3RyaW5nKTtcXG59XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxuICAgIHRpdGxlOiAoXFxcIjxzdHJvbmc+XFxcIiArIE1ZX1BBUkFNUy50aXRsZSArIFxcXCI8L3N0cm9uZz5cXFwiKS5iaWcoKSxcXG59KTtcXG5cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBjb250ZW50LFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICB0ZXh0U2l6ZTogMTgsXFxuICAgICAgICBjbGljazogdHJ1ZVxcbiAgICB9XFxufSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJ0ZXh0XzFcIixcIm5hbWVcIjpcIiN2LuWQiOW5tlRYVFwiLFwicGF0aFwiOlwiTm92ZWxDb2xsZWN0ZWQudmlld1wiLFwicnVsZVwiOlwianM6XFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbmxldCBydWxlbERpciA9IEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnLm5vdmVsRnVsbFBhdGgsIFxcXCJkaXJcXFwiKTtcXG5zZXRQYWdlVGl0bGUoXFxcIuWQiOW5tlRYVFxcXCIpO1xcbmxldCBsYXlvdXQgPSBbXTtcXG5cXG5mdW5jdGlvbiBvcGVyYXRpb24ocGF0aCkge1xcbiAgICBzd2l0Y2ggKGlucHV0KSB7XFxuICAgICAgICBjYXNlIFxcXCLliIbkuqtcXFwiOlxcbiAgICAgICAgICAgIHJldHVybiBcXFwic2hhcmU6Ly9cXFwiICsgcGF0aDtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIGNhc2UgXFxcIuWIoOmZpFxcXCI6XFxuICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICBjYXNlIFxcXCLmtbfpmJTpooTop4hcXFwiOlxcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9wYWdlL3R4dFBhcnNlci52aWV3XFxcIjtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgICAgIGNhc2UgXFxcIuaJk+W8gOaWueW8j1xcXCI6XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFwiICsgcGF0aDtcXG4gICAgICAgICAgICBicmVhaztcXG4gICAgfVxcbn1cXG5mb3IgKGxldCBydWxlUGF0aHMgb2YgcnVsZWxEaXIpIHtcXG4gICAgbGV0IG5vdmVscyA9IEZpbGUuZ2V0RmlsZVBhdGgocnVsZVBhdGhzLnBhdGgsIFxcXCJmaWxlXFxcIiwgXFxcIi50eHRcXFwiKTtcXG4gICAgZm9yIChsZXQgbm92ZWwgb2Ygbm92ZWxzKSB7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IG5vdmVsLm5hbWUsXFxuICAgICAgICAgICAgdXJsOiAkKFtcXFwi5YiG5LqrXFxcIiwgXFxcIuWIoOmZpFxcXCIsIFxcXCLmtbfpmJTpooTop4hcXFwiLCBcXFwi5omT5byA5pa55byPXFxcIl0sIDEpLnNlbGVjdChvcGVyYXRpb24sIG5vdmVsLnBhdGgpLFxcbiAgICAgICAgICAgIGRlc2M6IFxcXCLmnaXmupDvvJpcXFwiICsgcnVsZVBhdGhzLm5hbWUsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIHBhdGg6IG5vdmVsLnBhdGhcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgfVxcbn1cXG5pZiAobGF5b3V0Lmxlbmd0aCA9PT0gMCkge1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogJzxoMSBzdHlsZT1cXFwidGV4dC1hbGlnbjogY2VudGVyO1xcXCI+5ZWl6YO95rKh5pyJ6IC2PC9oMT4nLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiXFxuICAgIH0pO1xcbn1cXG5zZXRSZXN1bHQobGF5b3V0KTtcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2LuabtOWkmuiuvue9rlwiLFwicGF0aFwiOlwiU2V0dGluZy9Nb3JlLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5cXG5jb25zdCBzZXR0aW5nVHlwZSA9IE1ZX1BBUkFNUy5zZXR0aW5nVHlwZSB8fCBnZXRQYXJhbShcXFwic2V0dGluZ1R5cGVcXFwiKTtcXG5cXG5sZXQgbGF5b3V0ID0gW107XFxubGV0IGlkID0gXFxcIiNcXFwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxuc3dpdGNoIChzZXR0aW5nVHlwZSkge1xcbiAgICBjYXNlIFxcXCJjYWNoZVxcXCI6XFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcIua4hemZpOe8k+WtmHzorr7nva5cXFwiKTtcXG4gICAgICAgIGNvbnN0IGtub3duTGlzdCA9IG5ldyBNYXAoW1xcbiAgICAgICAgICAgIFtGaWxlLmdldE5hbWUoQ29uZmlnLm5vdmVsUGF0aCksIFxcXCIj566h55CG5ZmoI+Wwj+ivtOe8k+WtmOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcIl0sXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcuY29taWNQYXRoKSwgXFxcIiPnrqHnkIblmagj5ryr55S757yT5a2Y55uu5b2VW+S4jeW7uuiurua4hemZpF1cXFwiXSxcXG4gICAgICAgICAgICBbRmlsZS5nZXROYW1lKENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGgpLCBcXFwiI+euoeeQhuWZqCPlr7zlhaXnmoRUWFTnm67lvZVb5LiN5bu66K6u5riF6ZmkXVxcXCJdLFxcbiAgICAgICAgICAgIFtGaWxlLmdldE5hbWUoQ29uZmlnLm5vdmVsRnVsbFBhdGgpLCBcXFwiI+euoeeQhuWZqCPlsI/or7TlkIjlubbnm67lvZVb5Y+v5Lul5riF6ZmkXVxcXCJdLFxcbiAgICAgICAgICAgIFtcXFwiZHLnq6DoioLnvJPlrZhcXFwiLCBcXFwi6YGT6ZW/5qih5p2/5Li05pe257yT5a2YW+W7uuiurua4hemZpF1cXFwiXVxcbiAgICAgICAgXSk7XFxuXFxuICAgICAgICBsZXQgY2FjaGVEaXIgPSBGaWxlLmdldEZpbGVQYXRoKENvbmZpZy5ob21lUGF0aCwgXFxcImRpclxcXCIpO1xcblxcbiAgICAgICAgZnVuY3Rpb24gY2xlYW5DYWNoZShwYXRoKSB7XFxuICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG4gICAgICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/muIXpmaTlrozmiJBcXFwiO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/muIXpmaTlpLHotKVcXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICAgIGZvciAobGV0IGNhY2hlIG9mIGNhY2hlRGlyKSB7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogY2FjaGUubmFtZSxcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcIuWkp+Wwj++8mlxcXCIgKyBGaWxlLmdldEZpbGVTaXplKGNhY2hlLnBhdGgpICsgXFxcIlxcXFxu5o+P6L+w77yaXFxcIiArIChrbm93bkxpc3QuZ2V0KGNhY2hlLm5hbWUpIHx8IFxcXCLmnKrnn6Xnm67lvZVb6aOO6Zmp5pyq55+lXVxcXCIpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFwi56Gu6K6k5riF6ZmkIFxcXCIgKyBjYWNoZS5uYW1lICsgXFxcIiA/XFxcIikuY29uZmlybShjbGVhbkNhY2hlLCBjYWNoZS5wYXRoKVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi5YWo6YOo5riF6ZmkKFxcXCIgKyBGaWxlLmdldEZpbGVTaXplKENvbmZpZy5ob21lUGF0aCkgKyBcXFwiKVxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICB1cmw6ICQoXFxcIuehruiupOa4hemZpOWFqOmDqOe8k+WtmOaVsOaNrj9cXFwiKS5jb25maXJtKGNsZWFuQ2FjaGUsIENvbmZpZy5ob21lUGF0aClcXG4gICAgICAgIH0pO1xcbiAgICAgICAgYnJlYWs7XFxuICAgIGNhc2UgXFxcImRlZmF1bHRQaWNcXFwiOlxcbiAgICAgICAgc2V0UGFnZVRpdGxlKFxcXCLpu5jorqTlsIHpnaJ86K6+572uXFxcIik7XFxuICAgICAgICBpZiAoZ2V0TXlWYXIoXFxcIjpkZWZhdWx0UGljQmFja1xcXCIpKSB7XFxuICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcIjpkZWZhdWx0UGljQmFja1xcXCIpO1xcbiAgICAgICAgICAgIGJyZWFrO1xcbiAgICAgICAgfVxcblxcbiAgICAgICAgZnVuY3Rpb24gc2V0RGVmYXVsdFBpYyh1cmwpIHtcXG4gICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCAwKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IHVybDtcXG4gICAgICAgICAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgICAgICAgICBiYWNrKCk7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXCI7XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgc3RhcnQgPSAxO1xcbiAgICAgICAgaWYgKHR5cGVvZihNWV9OQU1FKSAhPT0gXFxcInVuZGVmaW5lZFxcXCIgJiYgTVlfTkFNRSA9PT0gXFxcIuWXheiniea1j+iniOWZqFxcXCIpIHtcXG4gICAgICAgICAgICBzdGFydCA9IDQ7XFxuICAgICAgICB9XFxuICAgICAgICBmb3IgKGxldCBpID0gc3RhcnQ7IGkgPD0gNDsgaSsrKSB7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWbvueJh1xcXCIgKyBpLFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcIm1vdmllXzNcXFwiLFxcbiAgICAgICAgICAgICAgICBwaWNfdXJsOiBcXFwiaGlrZXI6Ly9pbWFnZXMvaG9tZV9waWNcXFwiICsgaSxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKHNldERlZmF1bHRQaWMsIFxcXCJoaWtlcjovL2ltYWdlcy9ob21lX3BpY1xcXCIgKyBpKVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi6Ieq5a6a5LmJ4p6VXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfM1xcXCIsXFxuICAgICAgICAgICAgdXJsOiAkKFtcXFwi6Ieq5a6a5LmJdXJsXFxcIiwgXFxcIumAieaLqeaWh+S7tui3r+W+hFxcXCJdKS5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IFxcXCLoh6rlrprkuYl1cmxcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwiXFxcIiwgXFxcIui+k+WFpeWbvueJh+eahOi3r+W+hOaIluiAhemTvuaOpVxcXCIpLmlucHV0KCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCAwKSB8fCBcXFwie31cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IGlucHV0O1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5L+u5pS55oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHJlcXVpcmVVcmwgPSBcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgZmlsZVNlbGVjdCA9IHJlcXVpcmUocmVxdWlyZVVybCk7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmlsZVNlbGVjdC5maWxlU2VsZWN0aW9uVXJpKHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogJC50b1N0cmluZygoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxldCBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIDApIHx8IFxcXCJ7fVxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IFxcXCJmaWxlOi8vXFxcIiArIFBBVEg7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXCJjb25maWcuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFwiOmRlZmF1bHRQaWNCYWNrXFxcIiwgXFxcInRydWVcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5L+u5pS55oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9KSxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlVXJsOiByZXF1aXJlVXJsLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlOiBcXFwiLmpwZ3wuanBlZ3wuZ2lmfC5wbmd8LnN2Z3wuYm1wXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcImNvbmZpcm1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbW9yeTogXFxcInNlbGVjdFBhdGhDYWNoZTJcXFwiXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pXFxuICAgICAgICB9KTtcXG4gICAgICAgIGJyZWFrO1xcbiAgICBjYXNlIFxcXCJyZXBsYWNlUnVsZVxcXCI6XFxuICAgICAgICBpZiAoTVlfUEFSQU1TLmlzUmVmcmVzaCkge1xcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKFxcXCJvbkNsb3NlXFxcIiwgJC50b1N0cmluZygoKSA9PiByZWZyZXNoUGFnZSgpKSk7XFxuICAgICAgICB9XFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcIuabv+aNouinhOWImXzorr7nva5cXFwiKTtcXG4gICAgICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcInJlcGxhY2VSdWxlLmpzb25cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuaWsOW7uuabv+aNolxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2VkaXRSZXBsYWNlUnVsZS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjP2lzTmV3PXRydWVcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLlr7zlh7rop4TliJlcXFwiLFxcbiAgICAgICAgICAgIHVybDogJChcXFwi56Gu6K6k5a+85Ye6XFxcIiArIHJ1bGVMaXN0Lmxlbmd0aCArIFxcXCLmnaHop4TliJnvvJ9cXFxcbih7aG9tZVB0YWh9L3JlcGxhY2VSdWxlLmpzb24pXFxcIikuY29uZmlybSgobnVtKSA9PiB7XFxuICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuICAgICAgICAgICAgICAgIGxldCBzYXZlUHRhID0gQ29uZmlnLmhvbWVQYXRoICsgXFxcIi9yZXBsYWNlUnVsZS5qc29uXFxcIjtcXG4gICAgICAgICAgICAgICAgd3JpdGVGaWxlKHNhdmVQdGEsIHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICAgICAgICAgIGxvZyhcXFwiXFxcXG7ot6/lvoTvvJpcXFwiICsgc2F2ZVB0YSArIFxcXCJcXFxcbuWvvOWHuuinhOWImSBcXFwiICsgbnVtICsgXFxcIiDmnaFcXFwiKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJzaGFyZTovL1xcXCIgKyBzYXZlUHRhO1xcbiAgICAgICAgICAgIH0sIHJ1bGVMaXN0Lmxlbmd0aCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzNcXFwiXFxuICAgICAgICB9KTtcXG5cXG4gICAgICAgIGZ1bmN0aW9uIGltcG9ydFJ1bGUoaXNiYWNrKSB7XFxuICAgICAgICAgICAgaW5wdXQgPSB0eXBlb2YgUEFUSCA9PT0gXFxcInVuZGVmaW5lZFxcXCIgPyBpbnB1dCA6IFBBVEg7XFxuICAgICAgICAgICAgaW5wdXQgPSBpbnB1dC5zdGFydHNXaXRoKFxcXCJmaWxlOi8vXFxcIikgPyBpbnB1dCA6IFxcXCJmaWxlOi8vXFxcIiArIGlucHV0XFxuICAgICAgICAgICAgbGV0IHJ1bGVUZXh0ID0gcmVxdWVzdChpbnB1dCk7XFxuICAgICAgICAgICAgaWYgKCFydWxlVGV4dCkgcmV0dXJuIFxcXCJ0b2FzdDovL+iOt+WPluaWh+S7tuS4uuepulxcXCI7XFxuICAgICAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICAgICAgbGV0IG5ld1J1bGVMaXN0ID0gSlNPTi5wYXJzZShydWxlVGV4dCk7XFxuICAgICAgICAgICAgICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcInJlcGxhY2VSdWxlLmpzb25cXFwiKSB8fCBcXFwiW11cXFwiKTtcXG4gICAgICAgICAgICAgICAgbGV0IG5ld0NvdW50ID0gMCxcXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUNvdW50ID0gMDtcXG4gICAgICAgICAgICAgICAgZm9yIChsZXQgaSBpbiBuZXdSdWxlTGlzdCkge1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1J1bGUgPSBuZXdSdWxlTGlzdFtpXTtcXG4gICAgICAgICAgICAgICAgICAgIGlmICghbmV3UnVsZS5oYXNPd25Qcm9wZXJ0eShcXFwicmVwbGFjZW1lbnRcXFwiKSB8fCAhbmV3UnVsZS5oYXNPd25Qcm9wZXJ0eShcXFwicGF0dGVyblxcXCIpIHx8ICFuZXdSdWxlLmhhc093blByb3BlcnR5KFxcXCJuYW1lXFxcIikgfHwgKG5ld1J1bGUuc2NvcGVDb250ZW50ID09PSB1bmRlZmluZWQgPyBmYWxzZSA6ICFuZXdSdWxlLnNjb3BlQ29udGVudCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcXG4gICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIGxldCBpZCA9IG5ld1J1bGUuaWQ7XFxuICAgICAgICAgICAgICAgICAgICBuZXdSdWxlLmlkID0gaWQgfHwgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgaWRJbmRleCA9IHJ1bGVMaXN0LmZpbmRJbmRleChydWxlID0+IHJ1bGUuaWQgPT09IGlkKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChpZEluZGV4ID4gLTEpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICB1cGRhdGVDb3VudCsrO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVMaXN0LnNwbGljZShpZEluZGV4LCAxLCBuZXdSdWxlKTtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbmV3Q291bnQrKztcXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTGlzdC5wdXNoKG5ld1J1bGUpO1xcbiAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkocnVsZUxpc3QpKTtcXG4gICAgICAgICAgICAgICAgaWYgKGlzYmFjaykge1xcbiAgICAgICAgICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICBsb2coXFxcIlxcXFxu6Lev5b6E77yaXFxcIiArIGlucHV0ICsgXFxcIlxcXFxu5oC76KeE5YiZ5pWw77yaXFxcIiArIG5ld1J1bGVMaXN0Lmxlbmd0aCArIFxcXCJcXFxcbuabtOaWsOinhOWImSBcXFwiICsgdXBkYXRlQ291bnQgKyBcXFwiIOadoVxcXFx05paw5aKe6KeE5YiZIFxcXCIgKyBuZXdDb3VudCArIFxcXCIg5p2hXFxcIik7XFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLlr7zlhaXmiJDlip9cXFwiKTtcXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcbiAgICAgICAgICAgICAgICBpZiAoaXNiYWNrKSBiYWNrKCk7XFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLlr7zlhaXlpLHotKVcXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLlr7zlhaXop4TliJlcXFwiLFxcbiAgICAgICAgICAgIHVybDogJChbXFxcIuWklumDqOaWh+S7tlxcXCIsIFxcXCLlhoXpg6jmlofku7ZcXFwiXSwgMSwgXFxcIuinhOWImeWvvOWFpVxcXCIpLnNlbGVjdCgoaW1wb3J0UnVsZSkgPT4ge1xcbiAgICAgICAgICAgICAgICBpZiAoaW5wdXQgPT09IFxcXCLlpJbpg6jmlofku7ZcXFwiKSB7XFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcImZpbGVTZWxlY3Q6Ly9cXFwiICsgJC50b1N0cmluZyhpbXBvcnRSdWxlKTtcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUwOTlcXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVTZWxlY3QgPSByZXF1aXJlKHJlcXVpcmVVcmwpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxuICAgICAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoaW1wb3J0UnVsZSwgdHJ1ZSksXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVVybDogcmVxdWlyZVVybCxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZTogXFxcIi5qc29uXFxcIixcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcImNvbmZpcm1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG1lbW9yeTogXFxcInNlbGVjdFBhdGhDYWNoZVxcXCJcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSwgaW1wb3J0UnVsZSksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzNcXFwiXFxuICAgICAgICB9KTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImxpbmVfYmxhbmtcXFwiXFxuICAgICAgICB9KTtcXG4gICAgICAgIGZvciAobGV0IGkgPSAwLCBsZW4gPSBydWxlTGlzdC5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xcbiAgICAgICAgICAgIGxldCByZXBsYWNlUnVsZSA9IHJ1bGVMaXN0W2ldO1xcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHJlcGxhY2VSdWxlLm5hbWUsXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcIi5cXFwiICsgaSxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWIoOmZpFxcXCIsXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoaWQsIGluZGV4KSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICB2YXIgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICBsZXQgZyA9IHJ1bGVMaXN0LnNwbGljZShpbmRleCwgMSk7XFxuXFxuICAgICAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIsIEpTT04uc3RyaW5naWZ5KHJ1bGVMaXN0KSk7XFxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZUl0ZW1CeUNscyhpZCArIFxcXCIuXFxcIiArIGluZGV4KTtcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLliKDpmaTmiJDlip9cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIGlkLCBpKSxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFwiLlxcXCIgKyBpXFxuICAgICAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLnvJbovpFcXFwiLFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvZWRpdFJlcGxhY2VSdWxlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/aW5kZXg9XFxcIiArIGksXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIixcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFwiLlxcXCIgKyBpXFxuICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCIsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcIi5cXFwiICsgaVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICB9XFxuICAgICAgICBicmVhaztcXG4gICAgY2FzZSBcXFwiY29udGVudHNcXFwiOlxcbiAgICAgICAgbGV0IGYgPSByZXF1aXJlKFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcIik7XFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcIuebruW9leiuvue9rnzorr7nva5cXFwiKTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIumAieaLqeaWh+S7tuWkuVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBKU09OLnN0cmluZ2lmeShmLmZpbGVTZWxlY3Rpb25Vcmkoe1xcbiAgICAgICAgICAgICAgICBjYWxsYmFjazogJC50b1N0cmluZygoaWQpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBmaW5kSXRlbShpZCkuZXh0cmE7XFxuICAgICAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKGlkLCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgZXh0cmE6IE9iamVjdC5hc3NpZ24odGFyZ2V0LCB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogUEFUSFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xcbiAgICAgICAgICAgICAgICB9LCBpZCksXFxuICAgICAgICAgICAgICAgIGluaXRpYWxQYXRoOiBDb25maWcuaG9tZVBhdGgsXFxuICAgICAgICAgICAgICAgIHJlcXVpcmVVcmw6IFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcIixcXG4gICAgICAgICAgICAgICAgcGF0dGVybjogMVxcbiAgICAgICAgICAgIH0pKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgICAgICAgICBkZXNjOiBcXFwi5pSv5oyBaGlrZXI6Ly9maWxlc+i3r+W+hCjor6Xmk43kvZzkuI3kvJrliJ3lp4vljJbnm67lvZUpXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IENvbmZpZy5ob21lUGF0aCxcXG4gICAgICAgICAgICAgICAgb25DaGFuZ2U6ICQudG9TdHJpbmcoKGlkKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihpZCwgaW5wdXQpO1xcbiAgICAgICAgICAgICAgICB9LCBpZCksXFxuICAgICAgICAgICAgICAgIGlkOiBpZFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgICAgIH0pO1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi56Gu6K6kXFxcIixcXG4gICAgICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKGlkKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBpbnB1dCA9IGdldE15VmFyKGlkLCBmaW5kSXRlbShpZCkuZXh0cmEuZGVmYXVsdFZhbHVlIHx8IFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LnN0YXJ0c1dpdGgoXFxcImhpa2VyOi8vZmlsZXMvXFxcIikpIGlucHV0ID0gZ2V0UGF0aChpbnB1dCkuc2xpY2UoNyk7XFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5lbmRzV2l0aChcXFwiL1xcXCIpKSBpbnB1dD1pbnB1dC5yZXBsYWNlKC9cXFxcLyQvLFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgaWYgKENvbmZpZy5ob21lUGF0aCA9PSBpbnB1dCkgcmV0dXJuIFxcXCJ0b2FzdDovL+W3sue7j+aYr+W9k+WJjeebruW9lVxcXCI7XFxuICAgICAgICAgICAgICAgIENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcImNvbmZpZy5qc29uXFxcIiwgMCkgfHwgXFxcInt9XFxcIik7XFxuICAgICAgICAgICAgICAgIENvbmZpZy5ob21lUGF0aCA9IGlucHV0O1xcbiAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFwiY29uZmlnLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXG4gICAgICAgICAgICAgICAgYmFjaygpO1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey5L+d5a2YXFxcIjtcXG4gICAgICAgICAgICB9LCBpZCksXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgIH0pO1xcblxcbiAgICAgICAgYnJlYWs7XFxufVxcbnNldFJlc3VsdChsYXlvdXQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3Yu57yW6L6R5pu/5o2i6KeE5YiZXCIsXCJwYXRoXCI6XCJlZGl0UmVwbGFjZVJ1bGUudmlld1wiLFwicnVsZVwiOlwianM6XFxuY29uc3QgaXNOZXcgPSBNWV9QQVJBTVMuaXNOZXcgfHwgZ2V0UGFyYW0oXFxcImlzTmV3XFxcIik7XFxuY29uc3QgaW5kZXggPSBNWV9QQVJBTVMuaW5kZXggfHwgTnVtYmVyKGdldFBhcmFtKFxcXCJpbmRleFxcXCIpKTtcXG5sZXQgbGF5b3V0ID0gW107XFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXG4gICAgY2xlYXJNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5uYW1lXFxcIik7XFxuICAgIGNsZWFyTXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXCIpO1xcbiAgICBjbGVhck15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLnBhdHRlcm5cXFwiKTtcXG4gICAgY2xlYXJNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5yZXBsYWNlbWVudFxcXCIpO1xcbiAgICBjbGVhck15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLmZpcnN0XFxcIik7XFxuICAgIC8vY2xlYXJNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5zY29wZVxcXCIpO1xcbn0pKTtcXG5sZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxubGV0IGlkID0gXFxcIiNcXFwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxuLy9sZXQgcmVwbGFjZVJ1bGUgPSBpc05ldyA9PSBcXFwidHJ1ZVxcXCI/e306cnVsZUxpc3RbaW5kZXhdO1xcbmlmIChpc05ldyA9PSBcXFwidHJ1ZVxcXCIpIHtcXG4gICAgcmVwbGFjZVJ1bGUgPSB7XFxuICAgICAgICBpZDogbmV3IERhdGUoKS5nZXRUaW1lKCksXFxuICAgICAgICBpc1JlZ2V4OiBmYWxzZSxcXG4gICAgfVxcbn0gZWxzZSB7XFxuICAgIHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaW5kZXhdO1xcbn1cXG4vL+mmluasoeWIneWni+WMllxcbmlmKGdldE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLmZpcnN0XFxcIixcXFwiXFxcIik9PVxcXCJcXFwiKXtcXG4gICAgcHV0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXCIsIFxcXCJcXFwiICsgcmVwbGFjZVJ1bGUuaXNSZWdleCk7XFxuICAgIHB1dE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLmZpcnN0XFxcIixcXFwiMVxcXCIpO1xcbn1cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5ou36LSdXFxcIixcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgIGxldCBhdHQgPSBbXFxcIm5hbWVcXFwiLCBcXFwiaXNSZWdleFxcXCIsIFxcXCJwYXR0ZXJuXFxcIiwgXFxcInJlcGxhY2VtZW50XFxcIl07XFxuICAgICAgICBsZXQganNvbiA9IHt9O1xcbiAgICAgICAgYXR0LmZvckVhY2goa2V5ID0+IHtcXG4gICAgICAgICAgICBsZXQgdmFsdWUgPSBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5cXFwiICsga2V5LCBcXFwiXFxcIik7XFxuICAgICAgICAgICAgaWYgKGtleSA9PT0gXFxcImlzUmVnZXhcXFwiKSB7XFxuICAgICAgICAgICAgICAgIHZhbHVlID0gdmFsdWUgPT09IFxcXCJ0cnVlXFxcIiA/IHRydWUgOiBmYWxzZTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAganNvbltrZXldID0gdmFsdWU7XFxuICAgICAgICB9KTtcXG4gICAgICAgIGNvcHkoSlNPTi5zdHJpbmdpZnkoanNvbikpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLnspjotLRcXFwiLFxcbiAgICB1cmw6ICQoXFxcInt7Y2xpcGJvYXJkfX1cXFwiKS5pbnB1dCgoKSA9PiB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBqc29uID0gSlNPTi5wYXJzZShpbnB1dCk7XFxuICAgICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoanNvbikgfHwganNvbi5wYXR0ZXJuID09IHVuZGVmaW5lZCkgcmV0dXJuO1xcbiAgICAgICAgICAgIGxldCBhdHQgPSBbXFxcIm5hbWVcXFwiLCBcXFwiaXNSZWdleFxcXCIsIFxcXCJwYXR0ZXJuXFxcIiwgXFxcInJlcGxhY2VtZW50XFxcIl07XFxuICAgICAgICAgICAgYXR0LmZvckVhY2goa2V5ID0+IHtcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUuXFxcIiArIGtleSwgU3RyaW5nKGpzb25ba2V5XSkpO1xcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgIH1cXG4gICAgfSksXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgIGRlc2M6IFxcXCLmm7/mjaLop4TliJnlkI3np7BcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgdGl0bGVWaXNpYmxlOiBmYWxzZSxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUubmFtZVxcXCIsIHJlcGxhY2VSdWxlLm5hbWUpLFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5uYW1lXFxcIixpbnB1dCk7J1xcbiAgICB9XFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgZGVzYzogXFxcIuabv+aNouinhOWImVxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxcbiAgICAgICAgdHlwZTogXFxcInRleHRhcmVhXFxcIixcXG4gICAgICAgIGhlaWdodDogLTEsXFxuICAgICAgICBkZWZhdWx0VmFsdWU6IGdldE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLnBhdHRlcm5cXFwiLCByZXBsYWNlUnVsZS5wYXR0ZXJuKSxcXG4gICAgICAgIG9uQ2hhbmdlOiAncHV0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXCIsIGlucHV0KTsnXFxuICAgIH1cXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBcXFwi5piv5ZCm5L2/55So5q2j5YiZ6KGo6L6+5byP77yaXFxcIiArIGdldE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFwiKSxcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChpZCkgPT4ge1xcbiAgICAgICAgbGV0IGlzUmVnZXggPSBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5pc1JlZ2V4XFxcIikgPT09IFxcXCJ0cnVlXFxcIiA/IGZhbHNlIDogdHJ1ZTtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcbiAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgIGlkOiBpZFxcbiAgICAgICAgICAgIH0sXFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLmmK/lkKbkvb/nlKjmraPliJnooajovr7lvI/vvJpcXFwiICsgaXNSZWdleFxcbiAgICAgICAgfSk7XFxuICAgICAgICBwdXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5pc1JlZ2V4XFxcIiwgXFxcIlxcXCIgKyBpc1JlZ2V4KTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgIH0sIGlkKSxcXG4gICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgaWQ6IGlkXFxuICAgIH1cXG59KTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIGNvbF90eXBlOiBcXFwiaW5wdXRcXFwiLFxcbiAgICBkZXNjOiBcXFwi5pu/5o2i5Li6XFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxuICAgICAgICB0eXBlOiBcXFwidGV4dGFyZWFcXFwiLFxcbiAgICAgICAgaGVpZ2h0OiAtMSxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFwiLCByZXBsYWNlUnVsZS5yZXBsYWNlbWVudCksXFxuICAgICAgICBvbkNoYW5nZTogJ3B1dE15VmFyKFxcXCIuZWRpdFJlcGxhY2VSdWxlLnJlcGxhY2VtZW50XFxcIixpbnB1dCk7J1xcbiAgICB9XFxufSk7XFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIuS/neWtmFxcXCIsXFxuICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgocmVwbGFjZVJ1bGUsIGlzTmV3LCBpbmRleCkgPT4ge1xcbiAgICAgICAgbGV0IHBhdHRlcm4gPSBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5wYXR0ZXJuXFxcIiwgXFxcIlxcXCIpO1xcbiAgICAgICAgaWYgKCFwYXR0ZXJuKSB7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+abv+aNouinhOWImeS4jeiDveS4uuepulxcXCI7XFxuICAgICAgICB9XFxuICAgICAgICBPYmplY3QuYXNzaWduKHJlcGxhY2VSdWxlLCB7XFxuICAgICAgICAgICAgbmFtZTogZ2V0TXlWYXIoXFxcIi5lZGl0UmVwbGFjZVJ1bGUubmFtZVxcXCIsIFxcXCJcXFwiKSxcXG4gICAgICAgICAgICBpc1JlZ2V4OiBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5pc1JlZ2V4XFxcIikgPT09IFxcXCJ0cnVlXFxcIiA/IHRydWUgOiBmYWxzZSxcXG4gICAgICAgICAgICBwYXR0ZXJuOiBwYXR0ZXJuLFxcbiAgICAgICAgICAgIHJlcGxhY2VtZW50OiBnZXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5yZXBsYWNlbWVudFxcXCIsIFxcXCJcXFwiKVxcbiAgICAgICAgfSk7XFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcIikgfHwgXFxcIltdXFxcIik7XFxuICAgICAgICBpZiAoaXNOZXcgPT0gXFxcInRydWVcXFwiKSB7XFxuICAgICAgICAgICAgcnVsZUxpc3QucHVzaChyZXBsYWNlUnVsZSk7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJ1bGVMaXN0LnNwbGljZShpbmRleCwgMSwgcmVwbGFjZVJ1bGUpO1xcbiAgICAgICAgfVxcbiAgICAgICAgc2F2ZUZpbGUoXFxcInJlcGxhY2VSdWxlLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShydWxlTGlzdCkpO1xcbiAgICAgICAgYmFjaygpO1xcbiAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+S/neWtmOaIkOWKn1xcXCI7XFxuICAgIH0sIHJlcGxhY2VSdWxlLCBpc05ldywgaW5kZXgpLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbn0pO1xcblxcbi8qXFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgZGVzYzogXFxcIuabv+aNouiMg+WbtFxcXCIsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxcbiAgICAgICAgdHlwZTogXFxcInRleHRhcmVhXFxcIixcXG4gICAgICAgIGhlaWdodDogLTEsXFxuICAgICAgICBkZWZhdWx0VmFsdWU6IFxcXCJcXFwiLFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFwiLmVkaXRSZXBsYWNlUnVsZS5zY29wZVxcXCIsaW5wdXQpOydcXG4gICAgfVxcbn0pO1xcblxcbiovXFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi7lsI/or7TkuKrmgKfljJblh4DljJZcIixcInBhdGhcIjpcIk5vdmVsQ3VzdG9tLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbnNldFBhZ2VUaXRsZShcXFwi5pu/5o2i6KeE5YiZfFxcXCIgKyBNWV9QQVJBTVMubmFtZSk7XFxubGV0IHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFwicmVwbGFjZVJ1bGUuanNvblxcXCIpIHx8IFxcXCJbXVxcXCIpO1xcbmxldCBpZCA9IFxcXCIjXFxcIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcblxcbmNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxuICAgIGZvb3Q6IDAsXFxuICAgIGlzUmVwbGFjZTogdHJ1ZSxcXG4gICAgc2VsZWN0ZWQ6IFtdXFxufSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIE1ZX1BBUkFNUy5wYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIikpO1xcblxcbmxldCBsYXlvdXQgPSBbXTtcXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBbXFxcIuKYkOWHgOWMllxcXCIsIFxcXCLimJHlh4DljJZcXFwiXVswICsgYm9va0luZm8uaXNSZXBsYWNlXSxcXG4gICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgkaWQsIHBhdGgpID0+IHtcXG5cXG4gICAgICAgIHZhciBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIikgfHwgXFxcInt9XFxcIik7XFxuICAgICAgICBsZXQgaXNSZXBsYWNlID0gYm9va0luZm8uaXNSZXBsYWNlPT09dW5kZWZpbmVkP3RydWU6Ym9va0luZm8uaXNSZXBsYWNlO1xcbiAgICAgICAgYm9va0luZm8uaXNSZXBsYWNlID0gIWlzUmVwbGFjZTtcXG4gICAgICAgIHdyaXRlRmlsZShcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgIHVwZGF0ZUl0ZW0oJGlkLCB7XFxuICAgICAgICAgICAgdGl0bGU6IGlzUmVwbGFjZSA/IFxcXCLimJDlh4DljJZcXFwiIDogXFxcIuKYkeWHgOWMllxcXCIsXFxuICAgICAgICB9KTtcXG4gICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgIH0sIGlkICsgXFxcIiMtMVxcXCIsIE1ZX1BBUkFNUy5wYXRoKSxcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGlkOiBpZCArIFxcXCIjLTFcXFwiXFxuICAgIH0sXFxuICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbn0pO1xcbmxheW91dC5wdXNoKHtcXG4gICAgdGl0bGU6IFxcXCLnvJbovpHop4TliJlcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/c2V0dGluZ1R5cGU9cmVwbGFjZVJ1bGVcXFwiLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCIsXFxuICAgIGV4dHJhOntcXG4gICAgICAgIGlzUmVmcmVzaDogdHJ1ZVxcbiAgICB9XFxufSk7XFxuZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxuICAgIGxldCByZXBsYWNlUnVsZSA9IHJ1bGVMaXN0W2ldO1xcbiAgICBsZXQgaXNUcnVlID0gYm9va0luZm8uc2VsZWN0ZWQuaW5jbHVkZXMocmVwbGFjZVJ1bGUuaWQpO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogKGlzVHJ1ZSA/IFxcXCLil49cXFwiIDogXFxcIuKXi1xcXCIpICsgcmVwbGFjZVJ1bGUubmFtZSxcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8xXFxcIixcXG4gICAgICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICAgICAgeTogMCxcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgaXNUcnVlOiBpc1RydWUsXFxuICAgICAgICAgICAgaWQ6IGlkICsgaSxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5byA5ZCvXFxcIixcXG4gICAgICAgIHVybDogJChcXFwiI25vTG9hZGluZyNcXFwiKS5sYXp5UnVsZSgoJGlkLCByZXBsYWNlUnVsZSwgcGF0aCkgPT4ge1xcbiAgICAgICAgICAgIGlmIChmaW5kSXRlbSgkaWQpLmV4dHJhLmlzVHJ1ZSkge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5bey5byA5ZCvXFxcIjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IFtdXFxuICAgICAgICAgICAgfSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiKSB8fCBcXFwie31cXFwiKSk7XFxuICAgICAgICAgICAgYm9va0luZm8uc2VsZWN0ZWQucHVzaChyZXBsYWNlUnVsZS5pZCk7XFxuICAgICAgICAgICAgdXBkYXRlSXRlbSgkaWQsIHtcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLil49cXFwiICsgcmVwbGFjZVJ1bGUubmFtZSxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgICAgIGlzVHJ1ZTogdHJ1ZSxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkaWQsXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFwiZmlsZTovL1xcXCIgKyBwYXRoICsgXFxcIi9ib29rSW5mby5qc29uXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vZW1wdHlcXFwiO1xcbiAgICAgICAgfSwgaWQgKyBpLCByZXBsYWNlUnVsZSwgTVlfUEFSQU1TLnBhdGgpLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzJcXFwiXFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuWFs+mXrVxcXCIsXFxuICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUoKCRpZCwgcmVwbGFjZVJ1bGUsIHBhdGgpID0+IHtcXG4gICAgICAgICAgICBpZiAoIWZpbmRJdGVtKCRpZCkuZXh0cmEuaXNUcnVlKSB7XFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lt7LlhbPpl61cXFwiO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgICAgICBjb25zdCBib29rSW5mbyA9IE9iamVjdC5hc3NpZ24oe1xcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogW11cXG4gICAgICAgICAgICB9LCBKU09OLnBhcnNlKHJlcXVlc3QoXFxcImZpbGU6Ly9cXFwiICsgcGF0aCArIFxcXCIvYm9va0luZm8uanNvblxcXCIpIHx8IFxcXCJ7fVxcXCIpKTtcXG4gICAgICAgICAgICBib29rSW5mby5zZWxlY3RlZC5zcGxpY2UoYm9va0luZm8uc2VsZWN0ZWQuaW5kZXhPZihyZXBsYWNlUnVsZS5pZCksIDEpO1xcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oJGlkLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi4peLXFxcIiArIHJlcGxhY2VSdWxlLm5hbWUsXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBpc1RydWU6IGZhbHNlLFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6ICRpZCxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiL2Jvb2tJbmZvLmpzb25cXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcbiAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICB9LCBpZCArIGksIHJlcGxhY2VSdWxlLCBNWV9QQVJBTVMucGF0aCksXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCJcXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIGNvbF90eXBlOiBcXFwibGluZV9ibGFua1xcXCJcXG4gICAgfSk7XFxufVxcblxcbnNldFJlc3VsdChsYXlvdXQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3Yu5aSW5a+85bCP6K+0XCIsXCJwYXRoXCI6XCJleHRlcm5hbGltcG9ydFR4dC52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5mdW5jdGlvbiB0eHRWaWV3KGxheW91dCkge1xcbiAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbiAgICBsZXQgZmlsZXMgPSBGaWxlLmdldEZpbGVQYXRoKENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGgpO1xcbiAgICBmaWxlcyA9IGZpbGVzLmZpbHRlcih2ID0+IC8oXFxcXC50eHR8XFxcXC5lcHViKSQvLnRlc3Qodi5uYW1lKSk7XFxuXFxuICAgIHNldFBhZ2VUaXRsZShcXFwi5bCP6K+05Lmm5p62XFxcIik7XFxuICAgIC8vbGV0IGxheW91dCA9IFtdO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB1cmw6ICdpbnB1dD9cXFwiaGlrZXI6Ly9wYWdlL3R4dFNlYXJjaC52aWV3I25vUmVmcmVzaCM/c2VhcmNoVGVybXM9XFxcIitlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpOlxcXCJ0b2FzdDovL+ivt+i+k+WFpeWwj+ivtOWQjVxcXCInLFxcbiAgICAgICAgZGVzYzogXFxcIuaQnOe0olxcXCIsXFxuICAgICAgICB0aXRsZTogXFxcIvCflI1cXFwiLFxcbiAgICAgICAgY29sX3R5cGU6IFxcXCJpbnB1dFxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcInNlYXJjaEtleUJ5VHh0XFxcIiwgXFxcIlxcXCIpLFxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBcXFwicHV0TXlWYXIoJ3NlYXJjaEtleUJ5VHh0JyxpbnB1dClcXFwiXFxuICAgICAgICB9XFxuICAgIH0pO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIuWvvOWFpeWwj+ivtFxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfM1xcXCIsXFxuICAgICAgICB1cmw6ICQoW1xcXCLns7vnu5/pgInmi6nlmahcXFwiLCBcXFwi5rW36ZiU6YCJ5oup5ZmoXFxcIl0sIDEsIFxcXCLpgInmi6nlmajnsbvlnotcXFwiKS5zZWxlY3QoKCkgPT4ge1xcbiAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXFxcIuezu+e7n+mAieaLqeWZqFxcXCIpIHtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJmaWxlU2VsZWN0Oi8vXFxcIiArICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEvKFxcXFwudHh0fC5lcHViKSQvaS50ZXN0KGlucHV0KSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLpgInmi6nkuobplJnor6/nmoTmlofku7bnsbvlnotcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVNYXRjaCA9IGlucHV0Lm1hdGNoKC9cXFxcLyhbXlxcXFwvXSo/KShcXFxcLnR4dHxcXFxcLmVwdWIpJC9pKTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBub3ZlbE5hbWUgPSBmaWxlTWF0Y2hbMV0ucmVwbGFjZShcXFwiX2ZpbGVTZWxlY3RfXFxcIiwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgbGV0IHRvcGF0aCA9IENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGggKyBub3ZlbE5hbWUgKyBmaWxlTWF0Y2hbMl07XFxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9wYXRoQ2FjaGUgPSBDb25maWcuY29udGVudHNDYWNoZSArIG5vdmVsTmFtZSArIGZpbGVNYXRjaFsyXTtcXG4gICAgICAgICAgICAgICAgICAgIGxldCBwYXRoID0gaW5wdXQucmVwbGFjZShcXFwiZmlsZTovL1xcXCIsIFxcXCJcXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm0oe1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWvvOWFpeaPkOekulxcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXCLlt7LlrZjlnKhbXFxcIiArIG5vdmVsTmFtZSArIFxcXCJd5piv5ZCm6KaG55uWP1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06ICQudG9TdHJpbmcoKHBhdGgsIHRvcGF0aCwgdG9wYXRoQ2FjaGUpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmNvcHlGaWxlKHBhdGgsIHRvcGF0aCwgdHJ1ZSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIHRvcGF0aENhY2hlKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuZGVsZXRlRmlsZXModG9wYXRoQ2FjaGUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WvvOWFpeaIkOWKn1xcXCI7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHBhdGgsIHRvcGF0aCwgdG9wYXRoQ2FjaGUpXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIHRvcGF0aENhY2hlKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHRvcGF0aENhY2hlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHRvYXN0KFxcXCLlr7zlhaXmiJDlip9cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0pO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUwOTlcXFwiO1xcbiAgICAgICAgICAgICAgICBsZXQgZmlsZVNlbGVjdCA9IHJlcXVpcmUocmVxdWlyZVVybCk7XFxuICAgICAgICAgICAgICAgIHJldHVybiBmaWxlU2VsZWN0LmZpbGVTZWxlY3Rpb25Vcmkoe1xcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVNYXRjaCA9IFBBVEgubWF0Y2goL1xcXFwvKFteXFxcXC9dKj8pKFxcXFwudHh0fFxcXFwuZXB1YikkL2kpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub3ZlbE5hbWUgPSBmaWxlTWF0Y2hbMV07XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvcGF0aCA9IENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGggKyBub3ZlbE5hbWUgKyBmaWxlTWF0Y2hbMl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHRvcGF0aENhY2hlID0gQ29uZmlnLmNvbnRlbnRzQ2FjaGUgKyBub3ZlbE5hbWUgKyBmaWxlTWF0Y2hbMl07XFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBQQVRIO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwi5bey5a2Y5ZyoW1xcXCIgKyBub3ZlbE5hbWUgKyBcXFwiXeaYr+WQpuimhueblj9cXFwiKS5jb25maXJtKChwYXRoLCB0b3BhdGgsIHRvcGF0aENhY2hlKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5jb3B5RmlsZShwYXRoLCB0b3BhdGgsIHRydWUpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFwiZmlsZTovL1xcXCIgKyB0b3BhdGhDYWNoZSkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHRvcGF0aENhY2hlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lr7zlhaXmiJDlip9cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBwYXRoLCB0b3BhdGgsIHRvcGF0aENhY2hlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmNvcHlGaWxlKHBhdGgsIHRvcGF0aCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgdG9wYXRoQ2FjaGUpKSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHRvcGF0aENhY2hlKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBiYWNrKCk7XFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/lr7zlhaXmiJDlip9cXFwiO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXG4gICAgICAgICAgICAgICAgICAgIH0pLFxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVVybDogcmVxdWlyZVVybCxcXG4gICAgICAgICAgICAgICAgICAgIGZpbGVUeXBlOiBcXFwiLnR4dHwuZXB1YlxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcImNvbmZpcm1cXFwiLFxcbiAgICAgICAgICAgICAgICAgICAgbWVtb3J5OiBcXFwic2VsZWN0UGF0aENhY2hlMVxcXCJcXG4gICAgICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSksXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG4gICAgbGV0IG9wdGlvbnMgPSBbXFxcIumYheivu1xcXCIsIFxcXCLliIbkuqtcXFwiLCBcXFwi5Yig6ZmkXFxcIiwgXFxcIuaJk+W8gOaWueW8j1xcXCJdO1xcblxcbiAgICBsZXQgcGF0dGVybiA9IGdldE15VmFyKFxcXCI6dHh0UGF0dGVyblxcXCIsIG9wdGlvbnNbMF0pO1xcbiAgICBsZXQgaWQgPSBEYXRlLm5vdygpICsgXFxcIjrmqKHlvI9cXFwiO1xcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogcGF0dGVybixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIixcXG4gICAgICAgIHVybDogJChvcHRpb25zLCAxLCBcXFwi5pON5L2c5qih5byPXFxcIikuc2VsZWN0KChpZCkgPT4ge1xcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXCI6dHh0UGF0dGVyblxcXCIsIGlucHV0KTtcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKGlkLCB7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpbnB1dFxcbiAgICAgICAgICAgIH0pO1xcbiAgICAgICAgfSwgaWQpLFxcbiAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICBpZDogaWRcXG4gICAgICAgIH1cXG4gICAgfSk7XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHRpdGxlOiBcXFwi5paH5Lu2566h55CGXFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8zXFxcIixcXG4gICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9GaWxlTWFuYWdlbWVudC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3R5cGU9ZXh0ZXJuYWxJbXBvcnRQYXRoXFxcIlxcbiAgICB9KTtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIlxcbiAgICB9KTtcXG5cXG4gICAgZnVuY3Rpb24gb3BlcmF0aW9uKHBhdGgsIG5hbWUsIHR5cGUpIHtcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gZ2V0TXlWYXIoXFxcIjp0eHRQYXR0ZXJuXFxcIiwgXFxcIumYheivu1xcXCIpO1xcbiAgICAgICAgc3dpdGNoIChwYXR0ZXJuKSB7XFxuICAgICAgICAgICAgY2FzZSBcXFwi5YiG5LqrXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJzaGFyZTovL1xcXCIgKyBwYXRoO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIFxcXCLliKDpmaRcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gJChcXFwi56Gu6K6k5Yig6ZmkW1xcXCIgKyBuYW1lICsgXFxcIl1cXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiLmpzb25cXFwiKSkge1xcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHBhdGggKyBcXFwiLmpzb25cXFwiKTtcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgICAgICAgICAgLy9yZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUl0ZW0ocGF0aClcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcIjtcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgpO1xcbiAgICAgICAgICAgICAgICBicmVhaztcXG4gICAgICAgICAgICBjYXNlIFxcXCLpmIXor7tcXFwiOlxcbiAgICAgICAgICAgICAgICByZXR1cm4gKHR5cGU9PT1cXFwiLnR4dFxcXCI/XFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXCI6XFxcImhpa2VyOi8vcGFnZS9lcHViUGFyc2VyLnZpZXcjYXV0b0NhY2hlI1xcXCIpK1xcXCI/cnVsZT1cXFwiICsgTVlfUlVMRS50aXRsZTtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICAgICAgY2FzZSBcXFwi5omT5byA5pa55byPXFxcIjpcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFwiICsgcGF0aDtcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgZm9yIChsZXQgbm92ZWwgb2YgZmlsZXMpIHtcXG4gICAgICAgIGxldCB0eXBlID0gbm92ZWwubmFtZS5zdWJzdHJpbmcobm92ZWwubmFtZS5sYXN0SW5kZXhPZihcXFwiLlxcXCIpKTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogbm92ZWwubmFtZSxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcIiNub0xvYWRpbmcjXFxcIikubGF6eVJ1bGUob3BlcmF0aW9uLCBub3ZlbC5wYXRoLCBub3ZlbC5uYW1lLCB0eXBlKSxcXG4gICAgICAgICAgICBkZXNjOiBcXFwi5aSn5bCP77yaXFxcIiArIEZpbGUuZ2V0RmlsZVNpemUobm92ZWwucGF0aCkgKyBcXFwiXFxcXG7kv67mlLnml7bpl7TvvJpcXFwiICsgJC5kYXRlRm9ybWF0KG5vdmVsLmxhc3RNb2RpZmllZCwgXFxcInl5eXktTU0tZGQgSEg6bW06c3NcXFwiKSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgcGF0aDogbm92ZWwucGF0aCxcXG4gICAgICAgICAgICAgICAgaXNDYWNoZTogdHJ1ZSxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IG5vdmVsLm5hbWUsXFxuICAgICAgICAgICAgICAgIGlkOiBub3ZlbC5wYXRoLFxcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWIhuS6q1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBqczogSlNPTi5zdHJpbmdpZnkoXFxcInNoYXJlOi8vXFxcIiArIG5vdmVsLnBhdGgpXFxuICAgICAgICAgICAgICAgIH0sIHtcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi6ZiF6K+7XFxcIixcXG4gICAgICAgICAgICAgICAgICAgIGpzOiBKU09OLnN0cmluZ2lmeSgodHlwZT09PVxcXCIudHh0XFxcIj9cXFwiaGlrZXI6Ly9wYWdlL3R4dFBhcnNlci52aWV3XFxcIjpcXFwiaGlrZXI6Ly9wYWdlL2VwdWJQYXJzZXIudmlldyNhdXRvQ2FjaGUjXFxcIikrXFxcIj9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlKVxcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuaJk+W8gOaWueW8j1xcXCIsXFxuICAgICAgICAgICAgICAgICAgICBqczogSlNPTi5zdHJpbmdpZnkoXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXCIgKyBub3ZlbC5wYXRoKVxcbiAgICAgICAgICAgICAgICB9LCB7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWIoOmZpFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygocGF0aCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImxvbmdQcmVzcy5qc1xcXCIpLmRlbGV0ZUZpbGVGb3JUeHQocGF0aClcXG4gICAgICAgICAgICAgICAgICAgIH0sIG5vdmVsLnBhdGgpXFxuICAgICAgICAgICAgICAgIH1dXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgaWYgKGZpbGVzLmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiBcXFwi6K6+572uXFxcIixcXG4gICAgICAgICAgICB1cmw6IFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcIixcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMlxcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgdmVyc2lvbjogTVlfUlVMRS52ZXJzaW9uXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzluK7liqnigJ3igJ1cXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9oZWxwLnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/a2V5d29yZD10eHRcXFwiLFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFwidGV4dF8yXFxcIlxcbiAgICAgICAgfSk7XFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6ICc8aDEgc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFwiPuWVpemDveayoeacieiAtjwvaDE+JyxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcbn1cXG5pZiAoJC5pbXBvcnRQYXJhbSA9PT0gdW5kZWZpbmVkKSB7XFxuICAgICQuZXhwb3J0cyA9IHR4dFZpZXc7XFxufSBlbHNlIGlmICgkLmltcG9ydFBhcmFtID09PSBudWxsKSB7XFxuICAgIHNldFJlc3VsdCh0eHRWaWV3KFtdKSk7XFxufVwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3YuVFhU6Kej5p6Q5ZmoXCIsXCJwYXRoXCI6XCJ0eHRQYXJzZXIudmlld1wiLFwicnVsZVwiOlwianM6XFxuKGZ1bmN0aW9uKCkge1xcbiAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcIkNvbmZpZy5qc29uXFxcIik7XFxuICAgIGxldCByZWdzID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvcmVndWxhckNoYXB0ZXIuZlxcXCIpO1xcbiAgICBsZXQgcGF0aCA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwicGF0aFxcXCIpIHx8IFxcXCJcXFwiKSB8fCBNWV9QQVJBTVMucGF0aDtcXG4gICAgbGV0IGNoYXJzdCA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwiY2hhcnN0XFxcIikgfHwgXFxcIlxcXCIpIHx8IE1ZX1BBUkFNUy5jaGFyc3QgfHwgXFxcIlVURi04XFxcIjtcXG4gICAgbGV0IGlzQ2FjaGUgPSBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcImlzQ2FjaGVcXFwiKSB8fCBcXFwiXFxcIikgfHwgTVlfUEFSQU1TLmlzQ2FjaGU7XFxuICAgIGlmICghcGF0aC5zdGFydHNXaXRoKFxcXCJmaWxlOi8vXFxcIikpIHtcXG4gICAgICAgIHBhdGggPSBcXFwiZmlsZTovL1xcXCIgKyBwYXRoO1xcbiAgICB9XFxuICAgIGlmKE1ZX1BBUkFNUy50aXRsZSl7XFxuICAgICAgICBzZXRQYWdlVGl0bGUoTVlfUEFSQU1TLnRpdGxlKTtcXG4gICAgfWVsc2V7XFxuICAgICAgICBzZXRQYWdlVGl0bGUoJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpLmdldE5hbWUocGF0aCkpO1xcbiAgICB9XFxuICAgIGxldCBsYXlvdXQgPSBbXTtcXG4gICAgbGV0IGNoYXB0ZXJOYW1lcyA9IFtdO1xcbiAgICBsZXQgaW50ZXJ2YWxzID0gW107XFxuICAgIGxldCBoYXNQcmVmYWNlID0gZmFsc2U7XFxuICAgIGxldCBjYWNoZVBhdGggPSBwYXRoLnJlcGxhY2UoQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCwgQ29uZmlnLmNvbnRlbnRzQ2FjaGUpO1xcbiAgICBpZiAoaXNDYWNoZSYmZmlsZUV4aXN0KGNhY2hlUGF0aCkpIHtcXG4gICAgICAgIHRyeSB7XFxuXFxuICAgICAgICAgICAgbGV0IGMgPSBKU09OLnBhcnNlKHJlcXVlc3QoY2FjaGVQYXRoKSk7XFxuICAgICAgICAgICAgY2hhcHRlck5hbWVzID0gYy5jaGFwdGVyTmFtZXM7XFxuICAgICAgICAgICAgaW50ZXJ2YWxzID0gYy5pbnRlcnZhbHM7XFxuICAgICAgICAgICAgaGFzUHJlZmFjZSA9IGMuaGFzUHJlZmFjZTtcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi6YeN5paw6Kej5p6Q55uu5b2VXFxcIixcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcIi5qc29uXFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTpmYWxzZVxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgfSk7XFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTpcXFwibGluZV9ibGFua1xcXCJcXG4gICAgICAgICAgICB9KTtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXG4gICAgICAgICAgICBzZXRSZXN1bHQoW3tcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ08c3Ryb25nPuebruW9leino+aekOWksei0pSjph43mlrDop6PmnpApPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxuICAgICAgICAgICAgICAgICAgICBkZWxldGVGaWxlKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCI7XFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcIi5qc29uXFxcIiksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuXFxuICAgIH0gZWxzZSB7XFxuICAgICAgICBzaG93TG9hZGluZyhcXFwi5q2j5Zyo6Kej5p6Q55uu5b2VXFxcIik7XFxuICAgICAgICBsZXQgdHh0ID0gcmVxdWVzdChwYXRoLCB7XFxuICAgICAgICAgICAgaGVhZGVyczoge1xcbiAgICAgICAgICAgICAgICAvL1xcXCJjb250ZW50LXR5cGVcXFwiOiBcXFwidGV4dC9wbGFpbjsgY2hhcnN0PVxcXCIgKyBjaGFyc3RcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gcmVncy5nZXRUb2NSdWxlKHR4dCk7XFxuICAgICAgICBpZiAoIXBhdHRlcm4pIHtcXG4gICAgICAgICAgICBoaWRlTG9hZGluZygpO1xcbiAgICAgICAgICAgIHNldFJlc3VsdChbe1xcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuKAnOKAnOKAneKAnTxzdHJvbmc+55uu5b2V6Kej5p6Q5aSx6LSlPC9zdHJvbmc+XFxcIi5iaWcoKSxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKCgpID0+IHtcXG4gICAgICAgICAgICAgICAgICAgIGJhY2soZmFsc2UpO1xcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICAgICAgfSksXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgICAgICByZXR1cm47XFxuICAgICAgICB9XFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcih0eHQpO1xcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xcbiAgICAgICAgd2hpbGUgKG1hdGNoZXIuZmluZCgpKSB7XFxuICAgICAgICAgICAgbGV0IHN0YXJ0ID0gbWF0Y2hlci5zdGFydCgpO1xcbiAgICAgICAgICAgIGxldCBlbmQgPSBtYXRjaGVyLmVuZCgpO1xcbiAgICAgICAgICAgIGxldCB0ID0gbWF0Y2hlci5ncm91cCgpO1xcbiAgICAgICAgICAgIGlmIChwb2ludGVyID09PSAwICYmIHN0YXJ0ID4gMzApIHtcXG4gICAgICAgICAgICAgICAgaGFzUHJlZmFjZSA9IHRydWU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGNoYXB0ZXJOYW1lcy5wdXNoKHQpO1xcbiAgICAgICAgICAgIGludGVydmFscy5wdXNoKFtwb2ludGVyLCBzdGFydF0pO1xcbiAgICAgICAgICAgIHBvaW50ZXIgPSBlbmQ7XFxuICAgICAgICB9XFxuICAgICAgICBpbnRlcnZhbHMucHVzaChbcG9pbnRlciwgdHh0Lmxlbmd0aF0pO1xcbiAgICAgICAgaWYgKGlzQ2FjaGUpIHtcXG4gICAgICAgICAgICB3cml0ZUZpbGUoY2FjaGVQYXRoLCBKU09OLnN0cmluZ2lmeSh7XFxuICAgICAgICAgICAgICAgIGNoYXB0ZXJOYW1lczogY2hhcHRlck5hbWVzLFxcbiAgICAgICAgICAgICAgICBpbnRlcnZhbHM6IGludGVydmFscyxcXG4gICAgICAgICAgICAgICAgaGFzUHJlZmFjZTogaGFzUHJlZmFjZVxcbiAgICAgICAgICAgIH0pKTtcXG4gICAgICAgIH1cXG4gICAgICAgIGhpZGVMb2FkaW5nKCk7XFxuICAgIH1cXG5cXG5cXG4gICAgaWYgKGhhc1ByZWZhY2UpIHtcXG4gICAgICAgIGxldCBpbnRlcnZhbCA9IGludGVydmFsc1swXTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogXFxcIuW6j+iogFxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0XzFcXFwiLFxcbiAgICAgICAgICAgIHVybDogXFxcImhpa2VyOi8vcGFnZS9UWFRWaWV3ZXIudmlldyNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXCIsXFxuICAgICAgICAgICAgZXh0cmE6IHtcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWU6IFxcXCLluo/oqIBcXFwiLFxcbiAgICAgICAgICAgICAgICBzdGFydDogaW50ZXJ2YWxbMF0sXFxuICAgICAgICAgICAgICAgIGVuZDogaW50ZXJ2YWxbMV0sXFxuICAgICAgICAgICAgICAgIHBhdGg6IHBhdGgsXFxuICAgICAgICAgICAgICAgIGNoYXJzdDogY2hhcnN0XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjaGFwdGVyTmFtZXMubGVuZ3RoOyBpKyspIHtcXG4gICAgICAgIGxldCBuYW1lID0gY2hhcHRlck5hbWVzW2ldO1xcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzW2kgKyAxXTtcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogbmFtZSxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL1RYVFZpZXdlci52aWV3I2F1dG9QYWdlIyNyZWFkVGhlbWUjXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBzdGFydDogaW50ZXJ2YWxbMF0sXFxuICAgICAgICAgICAgICAgIGVuZDogaW50ZXJ2YWxbMV0sXFxuICAgICAgICAgICAgICAgIGNoYXB0ZXJOYW1lOiBuYW1lLFxcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxcbiAgICAgICAgICAgICAgICBjaGFyc3Q6IGNoYXJzdFxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcbn0pKClcIn0se1wiY29sX3R5cGVcIjpcIm1vdmllXzNcIixcIm5hbWVcIjpcIiN2LlRYVOafpeeci+WZqFwiLFwicGF0aFwiOlwiVFhUVmlld2VyLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmxldCBwYXRoID0gTVlfUEFSQU1TLnBhdGg7XFxubGV0IGNoYXJzdCA9IE1ZX1BBUkFNUy5jaGFyc3Q7XFxubGV0IHR4dCA9IHJlcXVlc3QocGF0aCwge1xcbiAgICBoZWFkZXJzOiB7XFxuICAgICAgIC8vXFxcImNvbnRlbnQtdHlwZVxcXCI6IFxcXCJ0ZXh0L3BsYWluOyBjaGFyc3Q9XFxcIiArIGNoYXJzdFxcbiAgICB9XFxufSk7XFxuXFxubGV0IHRhcmdldFRleHRzID0gdHh0LnN1YnN0cmluZyhNWV9QQVJBTVMuc3RhcnQsIE1ZX1BBUkFNUy5lbmQpO1xcblxcbmxldCBjb250ZW50ID0gdGFyZ2V0VGV4dHMuc3BsaXQoLyhcXFxcbnxcXFxccikrLykuZmlsdGVyKGl0ID0+IGl0Lmxlbmd0aCA+IDEpLmpvaW4oXFxcIjxicj5cXFwiKTtcXG5sZXQgbGF5b3V0ID0gW107XFxubGF5b3V0LnB1c2goe1xcbiAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxuICAgIHRpdGxlOiAoXFxcIjxzdHJvbmc+XFxcIiArIE1ZX1BBUkFNUy5jaGFwdGVyTmFtZSArIFxcXCI8L3N0cm9uZz5cXFwiKS5iaWcoKSxcXG59KTtcXG5cXG5sYXlvdXQucHVzaCh7XFxuICAgIHRpdGxlOiBjb250ZW50LFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxuICAgIGV4dHJhOiB7XFxuICAgICAgICB0ZXh0U2l6ZTogMTgsXFxuICAgICAgICBjbGljazogdHJ1ZVxcbiAgICB9XFxufSk7XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjai7nq6DoioLmraPliJlcIixcInBhdGhcIjpcInJlZ3VsYXJDaGFwdGVyLmZcIixcInJ1bGVcIjpcImpzOlxcbmxldCBydWxlcyA9IFt7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMSxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi55uu5b2VKOWOu+epuueZvSlcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiKD88PVvjgIBcXFxcXFxcXHNdKSg/OuW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWfOesrD9cXFxcXFxcXHN7MCw0fVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dKz9cXFxcXFxcXHN7MCw0fSg/OueroHzoioIoPyHor74pfOWNt3zpm4YoPyFb5ZCI5ZKMXSkpKS57MCwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuesrOS4gOeroCDlgYfoo4XnrKzkuIDnq6DliY3pnaLmnInnqbrnmb3kvYbmiJHkuI3opoFcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDBcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTIsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuebruW9lVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeWyDjgIBcXFxcXFxcXHRdezAsNH0oPzrluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxzezAsNH1bXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXSs/XFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pfOmDqCg/IVvliIbotZvmuLhdKXznr4coPyHlvKApKSkuezAsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLnrKzkuIDnq6Ag5qCH5YeG55qE57Kk6K+t5bCx5piv6L+Z5qC3XFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0zLFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IGZhbHNlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi55uu5b2VKOWMuemFjeeugOS7iylcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiKD88PVvjgIBcXFxcXFxcXHNdKSg/Oig/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWfOesrD9cXFxcXFxcXHN7MCw0fVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dKz9cXFxcXFxcXHN7MCw0fSg/OueroHzoioIoPyHor74pfOWNt3zpm4YoPyFb5ZCI5ZKMXSl86YOoKD8hW+WIhui1m+a4uF0pfOWbnig/IVvlkIjmnaXkuovljrtdKXzlnLooPyFb5ZKM5ZCI5q+U55S15pivXSl856+HKD8h5bygKSkpLnswLDMwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi566A5LuLIOiAgeWkq+ivuOiRm+adkeWkq1xcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMlxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtNCxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiBmYWxzZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuebruW9lSjlj6TlhbjjgIHovbvlsI/or7TlpIfnlKgpXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0fSg/OuW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWfOesrD9cXFxcXFxcXHN7MCw0fVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dKz9cXFxcXFxcXHN7MCw0fSg/OueroHzoioIoPyHor74pfOWNt3zpm4YoPyFb5ZCI5ZKMXSl86YOoKD8hW+WIhui1m+a4uF0pfOWbnig/IVvlkIjmnaXkuovljrtdKXzlnLooPyFb5ZKM5ZCI5q+U55S15pivXSl86K+dfOevhyg/IeW8oCkpKS57MCwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuesrOS4gOeroCDmr5TkuIrpnaLlj6rlpJrkuoblm57lkozor51cXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDNcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTUsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmlbDlrZco57qv5pWw5a2X5qCH6aKYKVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoPzw9W+OAgFxcXFxcXFxcc10pXFxcXFxcXFxkK1xcXFxcXFxcLj9bIOOAgFxcXFxcXFxcdF17MCw0fSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwiMTJcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDRcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTYsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlpKflhpnmlbDlrZco57qv5pWw5a2X5qCH6aKYKVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoPzw9W+OAgFxcXFxcXFxcc10pW+OAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSwxMn1bIOOAgFxcXFxcXFxcdF17MCw0fSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi5LiA55m+5LiD5Y2BXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiA0XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC03LFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IHRydWUsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLmlbDlrZcg5YiG6ZqU56ymIOagh+mimOWQjeensFxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeWyDjgIBcXFxcXFxcXHRdezAsNH1cXFxcXFxcXGR7MSw1fVs677yaLC7vvIwg44CBX+KAlFxcXFxcXFxcLV0uezEsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCIx44CB6L+Z5Liq5bCx5piv5qCH6aKYXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiA1XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC04LFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IHRydWUsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlpKflhpnmlbDlrZcg5YiG6ZqU56ymIOagh+mimOWQjeensFxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeWyDjgIBcXFxcXFxcXHRdezAsNH0oPzrluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnxb44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh9KVsg44CBX+KAlFxcXFxcXFxcLV0uezEsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLkuIDjgIHlj6rmnInliY3pnaLnmoTmlbDlrZfmnInlt67liKtcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDZcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTksXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIuato+aWhyDmoIfpopgv5bqP5Y+3XFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0feato+aWh1sg44CAXXsxLDR9LnswLDIwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi5q2j5paHIOaIkeWltuW4uOWxsei1teWtkOm+mVxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogN1xcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTAsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIkNoYXB0ZXIvU2VjdGlvbi9QYXJ0L0VwaXNvZGUg5bqP5Y+3IOagh+mimFxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeWyDjgIBcXFxcXFxcXHRdezAsNH0oPzpbQ2NdaGFwdGVyfFtTc11lY3Rpb258W1BwXWFydHzvvLDvvKHvvLLvvLR8W05uXVtvT11cXFxcXFxcXC58W0VlXXBpc29kZXwoPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklilcXFxcXFxcXHN7MCw0fVxcXFxcXFxcZHsxLDR9LnswLDMwfSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwiQ2hhcHRlciAxIE15R3JhbmRtYUlzTkJcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDhcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTExLFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IGZhbHNlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwiQ2hhcHRlcijljrvnroDku4spXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl5bIOOAgFxcXFxcXFxcdF17MCw0fSg/OltDY11oYXB0ZXJ8W1NzXWVjdGlvbnxbUHBdYXJ0fO+8sO+8oe+8su+8tHxbTm5dW09vXVxcXFxcXFxcLnxbRWVdcGlzb2RlKVxcXFxcXFxcc3swLDR9XFxcXFxcXFxkezEsNH0uezAsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCJDaGFwdGVyIDEgTXlHcmFuZG1hSXNOQlxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogOVxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTIsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIueJueauiuespuWPtyDluo/lj7cg5qCH6aKYXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIig/PD1bXFxcXFxcXFxz44CAXSlb44CQ44CU44CW44CM44CO44CI77y7XFxcXFxcXFxbXSg/OuesrHxbQ2NdaGFwdGVyKVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsMTB9W+eroOiKgl0uezAsMjB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLjgJDnrKzkuIDnq6Ag5ZCO6Z2i55qE56ym5Y+35Y+v5Lul5rKh5pyJXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxMFxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTMsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLnibnmrornrKblj7cg5qCH6aKYKOaIkOWvuSlcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiKD88PVtcXFxcXFxcXHPjgIBdezAsNH0pKD86W1xcXFxcXFxcW+OAiOOAjOOAjuOAluOAlOOAiu+8iOOAkFxcXFxcXFxcKF0uezEsMzB9W1xcXFxcXFxcKeOAke+8ieOAi+OAleOAl+OAj+OAjeOAiVxcXFxcXFxcXV0/fCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVsg44CAXXswLDR9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLjgI7liqDkuKrnm7Top5LlvJXlj7fmm7TkuJPkuJrjgI9cXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDExXFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xNCxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi54m55q6K56ym5Y+3IOagh+mimCjljZXkuKopXFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIig/PD1bXFxcXFxcXFxz44CAXXswLDR9KSg/OlvimIbimIXinKbinKddLnsxLDMwfXwoPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklilbIOOAgF17MCw0fSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi4piG44CB5pmL5rGf5L2c6ICF5pyA5Zac5qyi55qE5qC85byPXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxMlxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTUsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogdHJ1ZSxcXG4gICAgICAgIFxcXCJuYW1lXFxcIjogXFxcIueroC/ljbcg5bqP5Y+3IOagh+mimFxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCJeWyBcXFxcXFxcXHTjgIBdezAsNH0oPzooPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnxb5Y2356ugXVtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH0pWyDjgIBdezAsNH0uezAsMzB9JFxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLljbfkupQg5byA5rqQ55ub5LiWXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxM1xcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTYsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLpobbmoLzmoIfpophcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiXlxcXFxcXFxcUy57MSwyMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuS4jei2hei/hzIw5Liq5a2X6aG25qC85YaZ55qE6YO95piv5qCH6aKYXFxcIixcXG4gICAgICAgIFxcXCJzZXJpYWxOdW1iZXJcXFwiOiAxNFxcbiAgICB9LFxcbiAgICB7XFxuICAgICAgICBcXFwiaWRcXFwiOiAtMTcsXFxuICAgICAgICBcXFwiZW5hYmxlXFxcIjogZmFsc2UsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLlj4zmoIfpopgo5YmN5ZCRKVxcXCIsXFxuICAgICAgICBcXFwicnVsZVxcXCI6IFxcXCIoP20pKD88PVsgXFxcXFxcXFx044CAXXswLDR9KeesrFtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH3nq6AuezAsMzB9JCg/PVtcXFxcXFxcXHPjgIBdezAsOH3nrKxbXFxcXFxcXFxk6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugKVxcXCIsXFxuICAgICAgICBcXFwiZXhhbXBsZVxcXCI6IFxcXCLnrKzkuIDnq6Ag55yf5q2j55qE5qCH6aKY5bm25YGH6KOF5o2i6KGM56ys5LiA56ugIOi/meS4quS4jeimgVxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMTVcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTE4LFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IGZhbHNlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5Y+M5qCH6aKYKOWQjuWQkSlcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiKD9tKSg/PD1bIFxcXFxcXFxcdOOAgF17MCw0feesrFtcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH3nq6AuezAsMzB9JFtcXFxcXFxcXHPjgIBdezAsOH0p56ysW1xcXFxcXFxcZOmbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4feeroC57MCwzMH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuesrOS4gOeroCDov5nkuKrmoIfpopjkuI3opoHlubblgYfoo4XmjaLooYznrKzkuIDnq6DnnJ/mraPnmoTmoIfpophcXFwiLFxcbiAgICAgICAgXFxcInNlcmlhbE51bWJlclxcXCI6IDE2XFxuICAgIH0sXFxuICAgIHtcXG4gICAgICAgIFxcXCJpZFxcXCI6IC0xOSxcXG4gICAgICAgIFxcXCJlbmFibGVcXFwiOiB0cnVlLFxcbiAgICAgICAgXFxcIm5hbWVcXFwiOiBcXFwi5Lmm5ZCNIOaLrOWPtyDluo/lj7dcXFwiLFxcbiAgICAgICAgXFxcInJ1bGVcXFwiOiBcXFwiXi57MSwyMH1bKO+8iF1bXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh9WynvvIldWyDjgIBcXFxcdF17MCw0fSRcXFwiLFxcbiAgICAgICAgXFxcImV4YW1wbGVcXFwiOiBcXFwi5qCH6aKY5ZCO6Z2i5pWw5a2X5pyJ5ous5Y+3KDEyKVxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMTdcXG4gICAgfSxcXG4gICAge1xcbiAgICAgICAgXFxcImlkXFxcIjogLTIwLFxcbiAgICAgICAgXFxcImVuYWJsZVxcXCI6IHRydWUsXFxuICAgICAgICBcXFwibmFtZVxcXCI6IFxcXCLkuablkI0g5bqP5Y+3XFxcIixcXG4gICAgICAgIFxcXCJydWxlXFxcIjogXFxcIl4uezEsMjB9W1xcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fVsg44CAXFxcXHRdezAsNH0kXFxcIixcXG4gICAgICAgIFxcXCJleGFtcGxlXFxcIjogXFxcIuagh+mimOWQjumdouaVsOWtl+ayoeacieaLrOWPtzEyNFxcXCIsXFxuICAgICAgICBcXFwic2VyaWFsTnVtYmVyXFxcIjogMThcXG4gICAgfVxcbl07XFxubGV0IE1hdGNoZXIgPSBqYXZhLnV0aWwucmVnZXguTWF0Y2hlcjtcXG5sZXQgUGF0dGVybiA9IGphdmEudXRpbC5yZWdleC5QYXR0ZXJuO1xcblxcbmZ1bmN0aW9uIGdldFRvY1J1bGUoY29udGVudCkge1xcbiAgICBsZXQgbWF4Q3MgPSAxO1xcbiAgICBsZXQgdG9jUGF0dGVybiA9IG51bGw7XFxuICAgIGZvciAobGV0IHRvY1J1bGUgb2YgcnVsZXMpIHtcXG4gICAgICAgIGlmICghdG9jUnVsZS5lbmFibGUpIGNvbnRpbnVlO1xcbiAgICAgICAgbGV0IHBhdHRlcm4gPSBQYXR0ZXJuLmNvbXBpbGUodG9jUnVsZS5ydWxlLCBQYXR0ZXJuLk1VTFRJTElORSk7XFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcihjb250ZW50KTtcXG4gICAgICAgIGxldCBjcyA9IDA7XFxuICAgICAgICB3aGlsZSAobWF0Y2hlci5maW5kKCkpIHtcXG4gICAgICAgICAgICBjcysrO1xcbiAgICAgICAgfVxcbiAgICAgICAgaWYgKGNzID49IG1heENzKSB7XFxuICAgICAgICAgICAgbWF4Q3MgPSBjcztcXG4gICAgICAgICAgICB0b2NQYXR0ZXJuID0gcGF0dGVybjtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gdG9jUGF0dGVybjtcXG59XFxuJC5leHBvcnRzLmdldFRvY1J1bGUgPSBnZXRUb2NSdWxlO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI1Yu5biu5YqpXCIsXCJwYXRoXCI6XCJoZWxwLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmxldCBoZWxwVGV4dCA9IHtcXG4gICAgXFxcInR4dFxcXCI6IGBcXG4gICAgICAgIDxoMSBpZD1cXFwidHh05piv5LuA5LmIXFxcIj5UWFTmmK/ku4DkuYg/PC9oMT5cXG4gICAgICAgIDxwPjxhIGhyZWY9XFxcImh0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vdHh0LzEyMTczMzBcXFwiPuaIkeW3sue7j+W4ruS9oOeZvuW6puS6hjwvYT7vvJvnroDljZXmnaXor7TlsLHmmK/kuIDnp43lgqjlrZjlsI/or7TnmoTmlofku7Yo5omp5bGV5ZCNOnR4dCnjgII8L3A+XFxuICAgICAgICA8aDEgaWQ9XFxcIuWmguS9leeUqOivpeWwj+eoi+W6j+mYheivu3R4dOWwj+ivtFxcXCI+5aaC5L2V55So6K+l5bCP56iL5bqP6ZiF6K+7dHh05bCP6K+0PzwvaDE+XFxuICAgICAgICA8cD7lnKjkuLvpobXpnaIg4peJVFhUIOeVjOmdouS4i++8jOeCueWHu+WvvOWFpVRYVO+8jOmAieaLqeebruagh+Wwj+ivtOaWh+S7tih0eHTmlofku7bvvIw8ZW0+6K+l5pON5L2c5LiN5Lya5Yig6ZmkdHh05paH5Lu277yM6ICM5pivY29weeS4gOS7veWIsOWwj+eoi+W6j+eahOi3r+W+hOS4izwvZW0+Ke+8jOWvvOWFpeWQjuWGjeWcqCDil4lUWFQg55WM6Z2i5LiL6YCJ5oup5oOz6KaB6ZiF6K+755qE5bCP6K+05Y2z5Y+v44CCPC9wPlxcblxcbiAgICBgLFxcbiAgICBcXFwibm92ZWxDb21pY1xcXCI6IGBcXG4gICAgICAgIDxoMSBpZD1cXFwi6L+Z5Liq5bCP56iL5bqP5pyJ5LuA5LmI55So77yfXFxcIj7ov5nkuKrlsI/nqIvluo/mnInku4DkuYjnlKjvvJ88L2gxPlxcbiAgICAgICAgPHVsPlxcbiAgICAgICAgPGxpPjx1PuS7o+eggeS4iuS4uuWFtuS7luWwj+eoi+W6jyjmvKvnlLvnsbsv5bCP6K+057G7KeaPkOS+m+S4i+i9veaOpeWPo+OAgjwvdT48L2xpPlxcbiAgICAgICAgPGxpPjx1PuacrOS9k+WFheW9k+mYheivu+WZqO+8jOWPr+S7pea1j+iniOeUqOivpeWwj+eoi+W6j+aPkOS+m+eahOS4i+i9veaOpeWPoyjkuIrpnaIp77yM5LiL6L2955qE5ryr55S7L+Wwj+ivtOOAgjwvdT48L2xpPlxcbiAgICAgICAgPGxpPjx1PuaPkOS+m1RYVOagvOW8j+Wwj+ivtOaWh+S7tuino+aekOWKn+iDveOAgjwvdT5cXG4gICAgICAgIDxoMSBpZD1cXFwi5Li65LuA5LmI5YiX6KGo6YeM5LuA5LmI6YO95rKh55SoXFxcIj7kuLrku4DkuYjliJfooajph4zku4DkuYjpg73msqHnlKg/PC9oMT5cXG4gICAgICAgIDx1PuWIneasoeS9v+eUqO+8jOayoeacieW+iOato+W4uOWQp+OAgvCfpJQ8L3U+XFxuICAgICAgICA8aDEgaWQ9XFxcIuivpeWmguS9lea3u+WKoOa8q+eUu+aIluWwj+ivtFxcXCI+6K+l5aaC5L2V5re75Yqg5ryr55S7KOaIluWwj+ivtCk/PC9oMT5cXG4gICAgICAgIDx1PiDlnKjkuIDkuKrmnInkuIvovb3lip/og73nmoTlsI/nqIvluo8o5ryr55S757G7L+Wwj+ivtOexuynkuK3kuIvovb3kuIDmnKzmvKvnlLsv5bCP6K+077yM6L+U5Zue6K+l6KeE5YiZ5Y2z5Y+v5rWP6KeI44CCPC91PjwvbGk+XFxuICAgICAgICA8L3VsPlxcbiAgICBgXFxufTtcXG5zZXRQYWdlVGl0bGUoXFxcIuW4ruWKqVxcXCIpO1xcbmxldCBrZXl3b3JkID0gZ2V0UGFyYW0oXFxcImtleXdvcmRcXFwiKTtcXG5sZXQgdGV4dDtcXG5pZiAoa2V5d29yZCA9PT0gdW5kZWZpbmVkIHx8ICEodGV4dCA9IGhlbHBUZXh0W2tleXdvcmRdKSkge1xcbiAgICBzZXRSZXN1bHQoW3tcXG4gICAgICAgIHRpdGxlOiAnPGgxIHN0eWxlPVxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcIj7otYTmlpnkuI3op4Hlkq88L2gxPicsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG4gICAgfV0pO1xcbn0gZWxzZSB7XFxuICAgIHNldFJlc3VsdChbe1xcbiAgICAgICAgdGl0bGU6IHRleHQsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG4gICAgfV0pO1xcbn1cIn0se1wiY29sX3R5cGVcIjpcInRleHRfMVwiLFwibmFtZVwiOlwiI3Yu5aSW5a+85pCc57SiXCIsXCJwYXRoXCI6XCJ0eHRTZWFyY2gudmlld1wiLFwicnVsZVwiOlwianM6XFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXCIpO1xcblxcbmxldCBzZWFyY2hUZXJtcyA9IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwic2VhcmNoVGVybXNcXFwiKSk7XFxuc2V0UGFnZVRpdGxlKFxcXCLjgIxcXFwiICsgc2VhcmNoVGVybXMgKyBcXFwi44CN55qE5pCc57Si57uT5p6cXFxcIik7XFxubGV0IGRhdGEgPSBGaWxlLmdldEZpbGVQYXRoKENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGgsIHVuZGVmaW5lZCk7XFxuZGF0YSA9IGRhdGEuZmlsdGVyKHYgPT4gLyhcXFxcLnR4dHxcXFxcLmVwdWIpJC8udGVzdCh2Lm5hbWUpKTtcXG5cXG5sZXQgdGVybXNBcnIgPSBzZWFyY2hUZXJtcy5zcGxpdChcXFwiXFxcIikubWFwKHQgPT4gdC5yZXBsYWNlKC9cXFxcKnxcXFxcLnxcXFxcP3xcXFxcK3xcXFxcJHxcXFxcXnxcXFxcW3xcXFxcXXxcXFxcKHxcXFxcKXxcXFxce3xcXFxcfXxcXFxcfHxcXFxcL3xcXFxcXFxcXC9nLCBrID0+IFxcXCJcXFxcXFxcXFxcXCIgKyBrKSk7XFxubGV0IHJlZyA9IG5ldyBSZWdFeHAodGVybXNBcnIuam9pbihcXFwiLipcXFwiKSwgXFxcImlcXFwiKTtcXG5sZXQgc2VhcmNoUmVzdWx0ID0gW107XFxuZm9yIChsZXQgdHh0IG9mIGRhdGEpIHtcXG4gICAgaWYgKHJlZy50ZXN0KHR4dC5uYW1lKSkge1xcbiAgICAgICAgbGV0IHR5cGUgPSB0eHQubmFtZS5zdWJzdHJpbmcodHh0Lm5hbWUubGFzdEluZGV4T2YoXFxcIi5cXFwiKSk7XFxuICAgICAgICBzZWFyY2hSZXN1bHQucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IHR4dC5uYW1lLFxcbiAgICAgICAgICAgIHVybDogKHR5cGU9PT1cXFwiLnR4dFxcXCI/XFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXCI6XFxcImhpa2VyOi8vcGFnZS9lcHViUGFyc2VyLnZpZXcjYXV0b0NhY2hlI1xcXCIpK1xcXCI/cnVsZT1cXFwiICsgTVlfUlVMRS50aXRsZSxcXG4gICAgICAgICAgICBkZXNjOiB0eHQucGF0aCxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBwYXRoOiB0eHQucGF0aCxcXG4gICAgICAgICAgICAgICAgaXNDYWNoZTogdHJ1ZSxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHR4dC5uYW1lXFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG59XFxuaWYgKHNlYXJjaFJlc3VsdC5sZW5ndGggPT09IDApIHtcXG4gICAgc2VhcmNoUmVzdWx0LnB1c2goe1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcIixcXG4gICAgfSwge1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcIixcXG4gICAgfSwge1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcIixcXG4gICAgfSwge1xcbiAgICAgICAgY29sX3R5cGU6IFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcIixcXG4gICAgfSwge1xcbiAgICAgICAgdGl0bGU6ICc8aDIgc3R5bGU9XFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFwiPvCflI7msqHmnInmib7liLDnm7jlhbPkuabnsY08L2gyPicsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCJcXG4gICAgfSk7XFxufVxcbnNldFJlc3VsdChzZWFyY2hSZXN1bHQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI2Yu6ZW/5oyJXCIsXCJwYXRoXCI6XCJsb25nUHJlc3MuanNcIixcInJ1bGVcIjpcImpzOlxcbiQuZXhwb3J0cyA9IHtcXG4gICAgZGVsZXRlRmlsZUZvckJvb2socGF0aCkge1xcbiAgICAgICAgLy9yZXR1cm4gJChcXFwi5omA5pyJ55qEIOa8q+eUuy/lsI/or7Qg56ug6IqC5bCG6KKr5Yig6ZmkXFxcXG3noa7orqTliKDpmaTvvJ9cXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICBkZWxldGVJdGVtKHBhdGgpXFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXCI7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHJldHVybiBcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFwiO1xcbiAgICAgICAgfVxcbiAgICAgICAgLy99LCBwYXRoKTtcXG4gICAgfSxcXG4gICAgZGVsZXRlRmlsZUZvclR4dChwYXRoKSB7XFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXCIpO1xcbiAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXG4gICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXCJmaWxlOi8vXFxcIiArIHBhdGggKyBcXFwiLmpzb25cXFwiKSkge1xcbiAgICAgICAgICAgICAgICBGaWxlLmRlbGV0ZUZpbGVzKHBhdGggKyBcXFwiLmpzb25cXFwiKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgZGVsZXRlSXRlbShwYXRoKTtcXG4gICAgICAgICAgICByZXR1cm4gXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcIjtcXG4gICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXCI7XFxuICAgICAgICB9XFxuICAgIH1cXG59XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjZmcu5LiL6L295Li756iL5bqPXCIsXCJwYXRoXCI6XCJtYWluRG93bmxvYWRcIixcInJ1bGVcIjpcImNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFwiKTtcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXCIpO1xcblxcbiQuZXhwb3J0cy5ub3ZlbCA9IGZ1bmN0aW9uIG5vdmVsKGl0ZW0sIGluZm8sIG9yZGVyLCBNWV9JRCwgaW50ZXJydXB0KSB7XFxuICAgIGxldCBtYWluUGF0aCA9IENvbmZpZy5ub3ZlbFBhdGggKyBcXFwiL1xcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcIi9cXFwiICsgVG9vbC50ZXh0U2hpZWxkKGluZm8uYm9va05hbWUpICsgXFxcIi9cXFwiO1xcbiAgICBsZXQgY2hhcHRlclBhdGggPSBtYWluUGF0aCArIG9yZGVyICsgXFxcIiRBJFxcXCIgKyBUb29sLnRleHRTaGllbGQoaXRlbS50aXRsZSkgKyBcXFwiLnR4dFxcXCI7XFxuICAgIGxldCBjb250ZW50ID0gXFxcIlxcXCI7XFxuICAgIGlmIChpbnRlcnJ1cHQgJiYgZ2V0TXlWYXIoTVlfSUQgKyBcXFwiOnN0YXR1c1xcXCIsIFxcXCJcXFwiKSA9PT0gXFxcIjFcXFwiKSB7XFxuICAgICAgICByZXR1cm4gLTE7XFxuICAgIH1cXG4gICAgdHJ5IHtcXG4gICAgICAgIGxldCBnZXRDb250ZW50ID0gbmV3IEZ1bmN0aW9uKFxcXCJpbnB1dFxcXCIsIFxcXCJ1cmxcXFwiLCBcXFwicmV0dXJuIFxcXCIgKyBpbmZvLnBhcnNlQ29kZSk7XFxuICAgICAgICBjb250ZW50ID0gZ2V0Q29udGVudChpdGVtLnVybCwgaXRlbS51cmwpIHx8IFxcXCJcXFwiO1xcbiAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICBlLm1lc3NhZ2UgPSBcXFwiPOWwj+ivtOato+aWh+ino+aekOmUmeivrz4gXFxcIiArIGUubWVzc2FnZTtcXG4gICAgICAgIHRocm93IGU7XFxuICAgIH1cXG4gICAgaWYgKCFjb250ZW50KSB7XFxuICAgICAgICB0b2FzdChcXFwi5bCP6K+05Li656m6XFxcIik7XFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcIjzlsI/or7TmraPmlofop6PmnpDplJnor6/vvJrmraPmlofov5Tlm57kuLrnqbo+XFxcIik7XFxuICAgIH1cXG4gICAgaWYgKGluZm8uYm9va1RvcFBpYykge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBsZXQgYm9va1RvcFBpYyA9IFRvb2wuaGlrZXJQaWMoaW5mby5ib29rVG9wUGljKTtcXG4gICAgICAgICAgICBUb29sLnBpY0Rvd25sb2FkKGJvb2tUb3BQaWNbMF0sIG1haW5QYXRoICsgaW5mby5ib29rTmFtZSArIFxcXCIuanBnXFxcIiwgYm9va1RvcFBpY1sxXSwgaW5mby5kZWNvZGUpO1xcblxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgICAgIGxvZyhcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcIiArIGUubWVzc2FnZSk7XFxuICAgICAgICB9XFxuICAgIH1cXG4gICAgRmlsZS5maWxlV3JpdGUoY2hhcHRlclBhdGgsIGNvbnRlbnQucmVwbGFjZSgvPHNjcmlwdD4uKj88XFxcXC9zY3JpcHQ+L2dtaSwgXFxcIlxcXCIpLnRyaW1SaWdodCgpKTtcXG4gICAgLy9GaWxlLnJlbmFtZUZpbGUoY2hhcHRlclBhdGgsIG9yZGVyICsgXFxcIiRBJFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcIi50eHRcXFwiKTtcXG59XFxuXFxuJC5leHBvcnRzLmNvbWljID0gZnVuY3Rpb24gY29taWMoaXRlbSwgaW5mbywgb3JkZXIsIE1ZX0lELCBpbnRlcnJ1cHQpIHtcXG4gICAgbGV0IG1haW5QYXRoID0gQ29uZmlnLmNvbWljUGF0aCArIFxcXCIvXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFwiL1xcXCIgKyBUb29sLnRleHRTaGllbGQoaW5mby5ib29rTmFtZSkgKyBcXFwiL1xcXCI7XFxuICAgIGxldCBjaGFwdGVyUGF0aCA9IG1haW5QYXRoICsgb3JkZXIgKyBcXFwiJEIkXFxcIiArIFRvb2wudGV4dFNoaWVsZChpdGVtLnRpdGxlKSArIFxcXCIvXFxcIjtcXG4gICAgbGV0IHBpY0xpc3QgPSBbXTtcXG4gICAgdHJ5IHtcXG4gICAgICAgIGxldCBnZXRQaWNMaXN0ID0gbmV3IEZ1bmN0aW9uKFxcXCJpbnB1dFxcXCIsIFxcXCJ1cmxcXFwiLCBcXFwicmV0dXJuXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXG4gICAgICAgIHBpY0xpc3QgPSBnZXRQaWNMaXN0KGl0ZW0udXJsLCBpdGVtLnVybCk7XFxuICAgICAgICBpZiAodHlwZW9mIHBpY0xpc3QgPT09IFxcXCJzdHJpbmdcXFwiKSB7XFxuICAgICAgICAgICAgcGljTGlzdCA9IHBpY0xpc3QucmVwbGFjZShcXFwicGljczovL1xcXCIsIFxcXCJcXFwiKS5zcGxpdChcXFwiJiZcXFwiKTtcXG4gICAgICAgIH1cXG4gICAgfSBjYXRjaCAoZSkge1xcbiAgICAgICAgZS5tZXNzYWdlID0gXFxcIjzmvKvnlLvlm77niYfop6PmnpDplJnor68+IFxcXCIgKyBlLm1lc3NhZ2U7XFxuICAgICAgICB0aHJvdyBlO1xcbiAgICB9XFxuICAgIGNvbnN0IEwgPSBwaWNMaXN0Lmxlbmd0aDtcXG4gICAgaWYgKEwgPT09IDApIHtcXG4gICAgICAgIHRvYXN0KFxcXCLlm77niYfpk77mjqXkuLrnqbpcXFwiKTtcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFwiPOa8q+eUu+WbvueJh+ino+aekOmUmeivr++8muWbvueJh+mTvuaOpei/lOWbnuS4uuepuj5cXFwiKTtcXG4gICAgfVxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxuICAgICAgICB0cnkge1xcbiAgICAgICAgICAgIGxldCBib29rVG9wUGljID0gVG9vbC5oaWtlclBpYyhpbmZvLmJvb2tUb3BQaWMpO1xcbiAgICAgICAgICAgIFRvb2wucGljRG93bmxvYWQoYm9va1RvcFBpY1swXSwgbWFpblBhdGggKyBpbmZvLmJvb2tOYW1lICsgXFxcIi5qcGdcXFwiLCBib29rVG9wUGljWzFdLCBpbmZvLmRlY29kZSk7XFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxuICAgICAgICAgICAgbG9nKFxcXCI85bCB6Z2i5LiL6L296ZSZ6K+vPiBcXFwiICsgZS5tZXNzYWdlKTtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBsZXQgZXJyb3JOdW0gPSAwO1xcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKykge1xcbiAgICAgICAgdHJ5IHtcXG4gICAgICAgICAgICBsZXQgcGljID0gVG9vbC5oaWtlclBpYyhwaWNMaXN0W2ldKTtcXG4gICAgICAgICAgICBUb29sLnBpY0Rvd25sb2FkKHBpY1swXSwgY2hhcHRlclBhdGggKyAoaSArIDEpICsgXFxcIi5qcGdcXFwiLCBwaWNbMV0sIGluZm8uZGVjb2RlKTtcXG4gICAgICAgICAgICBpZiAoaW50ZXJydXB0ICYmIGdldE15VmFyKE1ZX0lEICsgXFxcIjpzdGF0dXNcXFwiLCBcXFwiXFxcIikgPT09IFxcXCIxXFxcIikge1xcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgICAgIGVycm9yTnVtID0gMDtcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXG4gICAgICAgICAgICBpZiAoZXJyb3JOdW0gPCAxMCkge1xcbiAgICAgICAgICAgICAgICBpLS07XFxuICAgICAgICAgICAgICAgIGVycm9yTnVtKys7XFxuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xcbiAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgIHRocm93IGU7XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIEZpbGUucmVuYW1lRmlsZShjaGFwdGVyUGF0aCwgb3JkZXIgKyBcXFwiJEEkXFxcIiArIFRvb2wudGV4dFNoaWVsZChpdGVtLnRpdGxlKSk7XFxufVxcblwifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3Yu5ryr55S75YW85a65XCIsXCJwYXRoXCI6XCJjb21pY0NvbXBhdGlibGUudmlld1wiLFwicnVsZVwiOlwianM6XFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFwiKTtcXG5zZXRQYWdlVGl0bGUoJC5sb2coTVlfUEFSQU1TLnRpdGxlKSk7XFxubGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChNWV9QQVJBTVMucGF0aCk7XFxubGV0IHBpY2xpc3QgPSBmaWxlbGlzdC5tYXAoKGl0ZW0sIGkpID0+ICh7XFxuICAgIGNvbF90eXBlOiBcXFwicGljXzFfZnVsbFxcXCIsXFxuICAgIHVybDogXFxcImhpa2VyOi8vZW1wdHlcXFwiLFxcbiAgICBwaWNfdXJsOiBNWV9QQVJBTVMucGF0aCArIFxcXCIvXFxcIiArIChpICsgMSkgKyBcXFwiLmpwZ1xcXCJcXG59KSk7XFxuXFxuc2V0UmVzdWx0KHBpY2xpc3QpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3Yu5Lmm5p62XCIsXCJwYXRoXCI6XCJCb29rcmFjay52aWV3XCIsXCJydWxlXCI6XCJqczpcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXCJGaWxlLmpzXFxcIik7XFxuY29uc3QgcmFuayA9ICQucmVxdWlyZShcXFwiZmlsZVJhbmsuanNcXFwiKTtcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXCJUb29sLmpzXFxcIik7XFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXCJDb25maWcuanNvblxcXCIpO1xcblxcbihmdW5jdGlvbigpIHtcXG4gICAgbGV0IHR5cGUgPSBNWV9QQVJBTVMudHlwZSB8fCBnZXRQYXJhbShcXFwidHlwZVxcXCIsIFxcXCJcXFwiKSB8fCBcXFwiY29taWNcXFwiO1xcbiAgICBsZXQgcnVsZU5hbWUgPSBUb29sLnRleHRTaGllbGQoTVlfUEFSQU1TLnJ1bGVOYW1lIHx8IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFwicnVsZU5hbWVcXFwiKSkpO1xcbiAgICBpZiAoIXJ1bGVOYW1lKSB7XFxuICAgICAgICB0b2FzdChcXFwi6K+35Lyg5YWl6KeE5YiZ5ZCNXFxcIik7XFxuICAgICAgICBiYWNrKGZhbHNlKTtcXG4gICAgfVxcbiAgICBpZiAoIVtcXFwiY29taWNcXFwiLCBcXFwibm92ZWxcXFwiXS5pbmNsdWRlcyh0eXBlKSkge1xcbiAgICAgICAgdG9hc3QoXFxcIuivt+S8oOWFpeato+ehrueahHR5cGU6Y29taWMgbm92ZWxcXFwiKTtcXG4gICAgICAgIGJhY2soZmFsc2UpO1xcbiAgICB9XFxuICAgIHNldFBhZ2VUaXRsZShydWxlTmFtZSArIFxcXCJ85pys5Zyw5Lmm5p62XFxcIik7XFxuICAgIGxldCBsYXlvdXQgPSBbXTtcXG4gICAgbGV0IHBhdGggPSBDb25maWdbdHlwZSArIFxcXCJQYXRoXFxcIl0gKyBydWxlTmFtZTtcXG4gICAgbGV0IGNvbF90eXBlID0gZ2V0SXRlbShcXFwiYm9va3JhY2s6Y29sX3R5cGVcXFwiLCBcXFwibW92aWVfM19tYXJxdWVlXFxcIik7XFxuICAgIGxldCByYW5rTWV0aG9kID0gZ2V0SXRlbShcXFwiYm9va3JhY2s6cmFua01ldGhvZFxcXCIsIFxcXCLns7vnu59cXFwiKTtcXG4gICAgbGV0IHJhbmtJc1JldmVyc2UgPSBnZXRJdGVtKFxcXCJib29rcmFjazpyYW5rSXNSZXZlcnNlXFxcIiwgXFxcIlxcXCIpO1xcblxcbiAgICBsZXQgY29sVHlwZXMgPSBbXFxcIm1vdmllXzFcXFwiLCBcXFwibW92aWVfMlxcXCIsIFxcXCJtb3ZpZV8zX21hcnF1ZWVcXFwiLCBcXFwibW92aWVfMV92ZXJ0aWNhbF9waWNcXFwiLCBcXFwicGljXzJcXFwiLCBcXFwicGljXzNcXFwiLCBcXFwicGljXzNfc3F1YXJlXFxcIiwgXFxcInBpY18yX2NhcmRcXFwiXTtcXG4gICAgXFxuICAgIGxldCByYW5rTWV0aG9kcyA9IFtcXFwi57O757ufXFxcIiwgXFxcIuWkp+Wwj1xcXCIsIFxcXCLlkI3np7BcXFwiLCBcXFwi5pe26Ze0XFxcIl07XFxuICAgIGxheW91dC5wdXNoKHtcXG4gICAgICAgIHVybDogJ1xcXCJoaWtlcjovL3NlYXJjaD9zPVxcXCIraW5wdXQnLFxcbiAgICAgICAgZGVzYzogXFxcIuaQnOS9oOaDs+imgeeahCNcXFwiICsgdHlwZSArIFxcXCIjLi4uLi4uXFxcIixcXG4gICAgICAgIHRpdGxlOiBcXFwi8J+UjVxcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcImlucHV0XFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgcnVsZXM6ICQudG9TdHJpbmcoKHJ1bGVOYW1lLCB0eXBlKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCBhcnIxID0gW3tcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwidGl0bGVcXFwiOiBydWxlTmFtZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwic2VhcmNoX3VybFxcXCI6IFxcXCJoaWtlcjovL2VtcHR5P2lzQWxsPTEmc2VhcmNoVGVybXM9KiomdHlwZT1cXFwiICsgdHlwZSxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFwic2VhcmNoRmluZFxcXCI6IFxcXCJqczokLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9TZWFyY2gudmlldz9ydWxlPScrTVlfUlVMRS5fdGl0bGUpO1xcXCJcXG4gICAgICAgICAgICAgICAgICAgIH1dO1xcbiAgICAgICAgICAgICAgICBcXG4gICAgICAgICAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KGFycjEpO1xcbiAgICAgICAgICAgIH0sIHJ1bGVOYW1lLCB0eXBlKSxcXG4gICAgICAgICAgICAvKmRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoJ3NlYXJjaEtleScsICcnKSxcXG4gICAgICAgICAgICBvbkNoYW5nZTogXFxcInB1dE15VmFyKCdzZWFyY2hLZXknLGlucHV0KVxcXCIqL1xcbiAgICAgICAgfVxcbiAgICB9KTtcXG5cXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IFxcXCLwn6epXFxcIixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwiZmxleF9idXR0b25cXFwiLFxcbiAgICAgICAgdXJsOiAkKGNvbFR5cGVzLm1hcCh2PT52PT09Y29sX3R5cGU/XFxcIuKAnOKAnFxcXCIrditcXFwi4oCd4oCdXFxcIjp2KSkuc2VsZWN0KChuYW1lKSA9PiB7XFxuICAgICAgICAgICAgaWYoL+KAnOKAnC4qP+KAneKAnS8udGVzdChpbnB1dCkpIHJldHVybjtcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXCJib29rcmFjazpjb2xfdHlwZVxcXCIsIGlucHV0KTtcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcbiAgICAgICAgfSlcXG4gICAgfSk7XFxuICAgIGZvciAobGV0IG5hbWUgb2YgcmFua01ldGhvZHMpIHtcXG4gICAgICAgIGxldCBhID0gcmFua01ldGhvZCA9PT0gbmFtZTtcXG4gICAgICAgIGxldCB0aXRsZWEgPSBhID8gXFxcIuKAmOKAmFxcXCIgKyBuYW1lICsgXFxcIuKAmeKAmVxcXCIgOiBuYW1lO1xcbiAgICAgICAgbGV0IHRpdGxlYiA9IFxcXCJcXFwiO1xcbiAgICAgICAgaWYgKGEpIHtcXG4gICAgICAgICAgICB0aXRsZWIgPSAhcmFua0lzUmV2ZXJzZSA/IFxcXCLihpNcXFwiIDogXFxcIuKGkVxcXCI7XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIHRpdGxlYiA9IFxcXCLihpVcXFwiO1xcbiAgICAgICAgfVxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZWEgKyB0aXRsZWIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJmbGV4X2J1dHRvblxcXCIsXFxuICAgICAgICAgICAgdXJsOiAkKFxcXCIjbm9Mb2FkaW5nI1xcXCIpLmxhenlSdWxlKChuYW1lKSA9PiB7XFxuICAgICAgICAgICAgICAgIGxldCByYW5rTWV0aG9kID0gZ2V0SXRlbShcXFwiYm9va3JhY2s6cmFua01ldGhvZFxcXCIsIFxcXCLns7vnu59cXFwiKTtcXG4gICAgICAgICAgICAgICAgbGV0IHJhbmtJc1JldmVyc2UgPSBnZXRJdGVtKFxcXCJib29rcmFjazpyYW5rSXNSZXZlcnNlXFxcIiwgXFxcIlxcXCIpO1xcblxcbiAgICAgICAgICAgICAgICBpZiAocmFua01ldGhvZCA9PT0gbmFtZSkge1xcbiAgICAgICAgICAgICAgICAgICAgaWYgKHJhbmtJc1JldmVyc2UpIHtcXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5rSXNSZXZlcnNlID0gXFxcIlxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmtJc1JldmVyc2UgPSBcXFwiMVxcXCI7XFxuICAgICAgICAgICAgICAgICAgICB9XFxuXFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXCJib29rcmFjazpyYW5rSXNSZXZlcnNlXFxcIiwgcmFua0lzUmV2ZXJzZSk7XFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXCJib29rcmFjazpyYW5rSXNSZXZlcnNlXFxcIiwgXFxcIlxcXCIpO1xcbiAgICAgICAgICAgICAgICAgICAgc2V0SXRlbShcXFwiYm9va3JhY2s6cmFua01ldGhvZFxcXCIsIG5hbWUpO1xcblxcbiAgICAgICAgICAgICAgICB9XFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL2VtcHR5XFxcIjtcXG4gICAgICAgICAgICB9LCBuYW1lKVxcbiAgICAgICAgfSk7XFxuICAgIH1cXG4gICAgbGV0IHJhbmtNZXRob2RNYXAgPSB7XFxuICAgICAgICBcXFwi57O757ufXFxcIjogXFxcIlxcXCIsXFxuICAgICAgICBcXFwi5aSn5bCPXFxcIjogXFxcInNpemVcXFwiLFxcbiAgICAgICAgXFxcIuWQjeensFxcXCI6IFxcXCJuYW1lXFxcIixcXG4gICAgICAgIFxcXCLml7bpl7RcXFwiOiBcXFwidGltZVxcXCJcXG4gICAgfTtcXG4gICAgbGV0IGJvb2tMaXN0ID0gW107XFxuICAgIGxldCBsaXN0ID0gcmFuayhGaWxlLmdldEZpbGVzKHBhdGgsIFxcXCJkaXJcXFwiKSwgcmFua01ldGhvZE1hcFtyYW5rTWV0aG9kXSk7XFxuICAgIGlmIChsaXN0Lmxlbmd0aCA9PT0gMCkge1xcbiAgICAgICAgYm9va0xpc3QucHVzaCh7XFxuICAgICAgICAgICAgdGl0bGU6IFxcXCLigJzigJzigJ3igJ1cXFwiICsgXFxcIuWVpemDveayoeacieiAtlxcXCIuYmlnKCksXFxuICAgICAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCIsXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJ0ZXh0X2NlbnRlcl8xXFxcIixcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9KTtcXG5cXG4gICAgfVxcbiAgICBsZXQgcGFnZVVybCA9IHR5cGUgPT09IFxcXCJub3ZlbFxcXCIgPyBcXFwiaGlrZXI6Ly9wYWdlL05vdmVsQnJvd3Nlci52aWV3XFxcIiA6IFxcXCJoaWtlcjovL3BhZ2UvQ29taWNCcm93c2VyLnZpZXdcXFwiO1xcbiAgICBmb3IgKGxldCBpdGVtIG9mIGxpc3QpIHtcXG4gICAgICAgIGxldCBwaWMgPSBmaWxlRXhpc3QoXFxcImZpbGU6Ly9cXFwiICsgaXRlbS5nZXRQYXRoKCkgKyBcXFwiL1xcXCIgKyBpdGVtLmdldE5hbWUoKSArIFxcXCIuanBnXFxcIikgPyBpdGVtLmdldFBhdGgoKSArIFxcXCIvXFxcIiArIGl0ZW0uZ2V0TmFtZSgpICsgXFxcIi5qcGdcXFwiIDogQ29uZmlnLmRlZl9QaWM7XFxuICAgICAgICBib29rTGlzdC5wdXNoKHtcXG4gICAgICAgICAgICB0aXRsZTogaXRlbS5nZXROYW1lKCksXFxuICAgICAgICAgICAgcGljX3VybDogcGljLFxcbiAgICAgICAgICAgIHVybDogcGFnZVVybCArIFxcXCI/cnVsZT1cXFwiICsgTVlfUlVMRS50aXRsZSxcXG4gICAgICAgICAgICBjb2xfdHlwZTpjb2xfdHlwZSxcXG4gICAgICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcIuWIoOmZpFxcXCIsXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygocGF0aCkgPT4ge1xcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiAkLnJlcXVpcmUoXFxcImxvbmdQcmVzcy5qc1xcXCIpLmRlbGV0ZUZpbGVGb3JCb29rKHBhdGgpO1xcbiAgICAgICAgICAgICAgICAgICAgfSwgaXRlbS5nZXRQYXRoKCkpXFxuICAgICAgICAgICAgICAgIH1dLFxcbiAgICAgICAgICAgICAgICBpZDogaXRlbS5nZXRQYXRoKCksXFxuICAgICAgICAgICAgICAgIHBhdGg6IGl0ZW0uZ2V0UGF0aCgpLFxcbiAgICAgICAgICAgICAgICBuYW1lOiBpdGVtLmdldE5hbWUoKVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH0pO1xcbiAgICB9XFxuICAgIGlmIChyYW5rSXNSZXZlcnNlKSB7XFxuICAgICAgICBib29rTGlzdC5yZXZlcnNlKCk7XFxuICAgIH1cXG5cXG4gICAgc2V0UmVzdWx0KGxheW91dC5jb25jYXQoYm9va0xpc3QpKTtcXG59KSgpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI2Yu5paH5Lu25o6S5bqPXCIsXCJwYXRoXCI6XCJmaWxlUmFuay5qc1wiLFwicnVsZVwiOlwianM6XFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFwiRmlsZS5qc1xcXCIpO1xcbmxldCBjaG5OdW1DaGFyID0ge1xcbiAgICDpm7Y6IDAsXFxuICAgIOS4gDogMSxcXG4gICAg5LqMOiAyLFxcbiAgICDkuIk6IDMsXFxuICAgIOWbmzogNCxcXG4gICAg5LqUOiA1LFxcbiAgICDlha06IDYsXFxuICAgIOS4gzogNyxcXG4gICAg5YWrOiA4LFxcbiAgICDkuZ06IDlcXG59O1xcblxcbmxldCBjaG5OYW1lVmFsdWUgPSB7XFxuICAgIOWNgToge1xcbiAgICAgICAgdmFsdWU6IDEwLFxcbiAgICAgICAgc2VjVW5pdDogZmFsc2VcXG4gICAgfSxcXG4gICAg55m+OiB7XFxuICAgICAgICB2YWx1ZTogMTAwLFxcbiAgICAgICAgc2VjVW5pdDogZmFsc2VcXG4gICAgfSxcXG4gICAg5Y2DOiB7XFxuICAgICAgICB2YWx1ZTogMTAwMCxcXG4gICAgICAgIHNlY1VuaXQ6IGZhbHNlXFxuICAgIH0sXFxuICAgIOS4hzoge1xcbiAgICAgICAgdmFsdWU6IDEwMDAwLFxcbiAgICAgICAgc2VjVW5pdDogdHJ1ZVxcbiAgICB9LFxcbiAgICDkur86IHtcXG4gICAgICAgIHZhbHVlOiAxMDAwMDAwMDAsXFxuICAgICAgICBzZWNVbml0OiB0cnVlXFxuICAgIH1cXG59XFxuXFxuZnVuY3Rpb24gQ2hpbmVzZVRvTnVtYmVyKGNoblN0cikge1xcbiAgICBsZXQgcnRuID0gMDtcXG4gICAgbGV0IHNlY3Rpb24gPSAwO1xcbiAgICBsZXQgbnVtYmVyID0gMDtcXG4gICAgbGV0IHNlY1VuaXQgPSBmYWxzZTtcXG4gICAgbGV0IHN0ciA9IGNoblN0ci5zcGxpdCgnJyk7XFxuXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyLmxlbmd0aDsgaSsrKSB7XFxuICAgICAgICBsZXQgbnVtID0gY2huTnVtQ2hhcltzdHJbaV1dO1xcbiAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICd1bmRlZmluZWQnKSB7XFxuICAgICAgICAgICAgbnVtYmVyID0gbnVtO1xcbiAgICAgICAgICAgIGlmIChpID09PSBzdHIubGVuZ3RoIC0gMSkge1xcbiAgICAgICAgICAgICAgICBzZWN0aW9uICs9IG51bWJlcjtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgIGxldCB1bml0ID0gY2huTmFtZVZhbHVlW3N0cltpXV0udmFsdWU7XFxuICAgICAgICAgICAgc2VjVW5pdCA9IGNobk5hbWVWYWx1ZVtzdHJbaV1dLnNlY1VuaXQ7XFxuICAgICAgICAgICAgaWYgKHNlY1VuaXQpIHtcXG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IChzZWN0aW9uICsgbnVtYmVyKSAqIHVuaXQ7XFxuICAgICAgICAgICAgICAgIHJ0biArPSBzZWN0aW9uO1xcbiAgICAgICAgICAgICAgICBzZWN0aW9uID0gMDtcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBzZWN0aW9uICs9IChudW1iZXIgKiB1bml0KTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICAgICAgbnVtYmVyID0gMDtcXG4gICAgICAgIH1cXG4gICAgfVxcbiAgICByZXR1cm4gcnRuICsgc2VjdGlvbjtcXG59XFxuXFxuZnVuY3Rpb24gbmFtZUNvbXBhcmUoYSwgYikge1xcbiAgICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbClcXG4gICAgICAgIHJldHVybiBhID09IG51bGwgPyBiID09IG51bGwgPyAwIDogLTEgOiAxO1xcblxcbiAgICBhID0gYS5yZXBsYWNlKC8oW+mbtuS4gOS6jOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+S6v10pL2csIGZ1bmN0aW9uKG1hdGNoLCBwMSwgcDIsIHAzLCBvZmZzZXQsIHN0cmluZykge1xcbiAgICAgICAgLy8gcDEgaXMgbm9uZGlnaXRzLCBwMiBkaWdpdHMsIGFuZCBwMyBub24tYWxwaGFudW1lcmljc1xcbiAgICAgICAgcmV0dXJuIHYuQ2hpbmVzZVRvTnVtYmVyKHAxKTtcXG4gICAgfSlcXG4gICAgYiA9IGIucmVwbGFjZSgvKFvpm7bkuIDkuozkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIfkur9dKS9nLCBmdW5jdGlvbihtYXRjaCwgcDEsIHAyLCBwMywgb2Zmc2V0LCBzdHJpbmcpIHtcXG4gICAgICAgIC8vIHAxIGlzIG5vbmRpZ2l0cywgcDIgZGlnaXRzLCBhbmQgcDMgbm9uLWFscGhhbnVtZXJpY3NcXG4gICAgICAgIHJldHVybiB2LkNoaW5lc2VUb051bWJlcihwMSk7XFxuICAgIH0pXFxuXFxuICAgIGxldCBOVU1CRVJTID0gamF2YS51dGlsLnJlZ2V4LlBhdHRlcm4uY29tcGlsZShcXFwiKD88PVxcXFxcXFxcRCkoPz1cXFxcXFxcXGQpfCg/PD1cXFxcXFxcXGQpKD89XFxcXFxcXFxEKVxcXCIpO1xcbiAgICBsZXQgc3BsaXQxID0gTlVNQkVSUy5zcGxpdChuZXcgamF2YS5sYW5nLlN0cmluZyhhKSk7XFxuICAgIGxldCBzcGxpdDIgPSBOVU1CRVJTLnNwbGl0KG5ldyBqYXZhLmxhbmcuU3RyaW5nKGIpKTtcXG5cXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBNYXRoLm1pbihzcGxpdDEubGVuZ3RoLCBzcGxpdDIubGVuZ3RoKTsgaSsrKSB7XFxuICAgICAgICBsZXQgYzEgPSBzcGxpdDFbaV0uY2hhckNvZGVBdCgwKTtcXG4gICAgICAgIGxldCBjMiA9IHNwbGl0MltpXS5jaGFyQ29kZUF0KDApO1xcbiAgICAgICAgbGV0IGNtcCA9IDA7XFxuICAgICAgICBsZXQgemVyb0NoYXJDb2RlID0gJzAnLmNoYXJDb2RlQXQoMCk7XFxuICAgICAgICBsZXQgbmluZUNoYXJDb2RlID0gJzknLmNoYXJDb2RlQXQoMCk7XFxuXFxuICAgICAgICBpZiAoYzEgPj0gemVyb0NoYXJDb2RlICYmIGMxIDw9IG5pbmVDaGFyQ29kZSAmJiBjMiA+PSB6ZXJvQ2hhckNvZGUgJiYgYzIgPD0gbmluZUNoYXJDb2RlKSB7XFxuICAgICAgICAgICAgY21wID0gbmV3IGphdmEubWF0aC5CaWdJbnRlZ2VyKHNwbGl0MVtpXSkuY29tcGFyZVRvKG5ldyBqYXZhLm1hdGguQmlnSW50ZWdlcihzcGxpdDJbaV0pKTtcXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChjbXAgPT09IDApIHtcXG4gICAgICAgICAgICBsZXQgcmVnZXggPSAvW2EtekEtWjAtOV0vXFxuICAgICAgICAgICAgbGV0IHMxID0gU3RyaW5nKHNwbGl0MVtpXSlcXG4gICAgICAgICAgICBsZXQgczIgPSBTdHJpbmcoc3BsaXQyW2ldKVxcbiAgICAgICAgICAgIGlmIChyZWdleC50ZXN0KHMxKSB8fCByZWdleC50ZXN0KHMyKSkge1xcbiAgICAgICAgICAgICAgICBjbXAgPSBuZXcgamF2YS5sYW5nLlN0cmluZyhzcGxpdDFbaV0pLmNvbXBhcmVUbyhuZXcgamF2YS5sYW5nLlN0cmluZyhzcGxpdDJbaV0pKTtcXG4gICAgICAgICAgICAgICAgLy8gY21wID0gczEubG9jYWxlQ29tcGFyZShzMiwgJ2VuJylcXG4gICAgICAgICAgICB9IGVsc2Uge1xcbiAgICAgICAgICAgICAgICBjbXAgPSBzMS5sb2NhbGVDb21wYXJlKHMyLCAnemgnKVxcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIGlmIChjbXAgIT09IDApIHtcXG4gICAgICAgICAgICByZXR1cm4gY21wO1xcbiAgICAgICAgfVxcbiAgICB9XFxuICAgIGxldCBsZW5ndGhDbXAgPSBzcGxpdDEubGVuZ3RoIC0gc3BsaXQyLmxlbmd0aDtcXG4gICAgLy8gaWYgKGxlbmd0aENtcCAhPT0gMCkgbGVuZ3RoQ21wID0gbGVuZ3RoQ21wID4gMCA/IC0xIDogMTtcXG4gICAgcmV0dXJuIGxlbmd0aENtcDtcXG59XFxuXFxuZnVuY3Rpb24gcmFuayhsaXN0LCBtKSB7XFxuICAgIHN3aXRjaCAobSkge1xcbiAgICAgICAgY2FzZSBcXFwidHlwZVxcXCI6XFxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XFxuICAgICAgICBjYXNlIFxcXCJuYW1lXFxcIjpcXG4gICAgICAgICAgICByZXR1cm4gbGlzdC5zb3J0KChhLCBiKSA9PiBuYW1lQ29tcGFyZShTdHJpbmcoYS5nZXROYW1lKCkpLCBTdHJpbmcoYi5nZXROYW1lKCkpKSk7XFxuICAgICAgICBjYXNlIFxcXCJzaXplXFxcIjpcXG4gICAgICAgICAgICByZXR1cm4gbGlzdC5zb3J0KChhLCBiKSA9PiBGaWxlLmdldFRvdGFsU2l6ZU9mRmlsZXNJbkRpcihhKSAtIEZpbGUuZ2V0VG90YWxTaXplT2ZGaWxlc0luRGlyKGIpKTtcXG4gICAgICAgIGNhc2UgXFxcInRpbWVcXFwiOlxcbiAgICAgICAgICAgIHJldHVybiBsaXN0LnNvcnQoKGEsIGIpID0+IGEubGFzdE1vZGlmaWVkKCkgLSBiLmxhc3RNb2RpZmllZCgpKTtcXG4gICAgICAgIGRlZmF1bHQ6XFxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XFxuICAgIH1cXG5cXG59XFxuJC5leHBvcnRzPXJhbms7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi5lcHVi6Kej5p6Q5ZmoXCIsXCJwYXRoXCI6XCJlcHViUGFyc2VyLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbnZhciBsYXlvdXQgPSBbXTtcXG5zZXRQYWdlVGl0bGUoXFxcIuS5puexjeS/oeaBr1xcXCIpO1xcbmxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXCJwYXRoXFxcIikgfHwgXFxcIlxcXCIpIHx8IE1ZX1BBUkFNUy5wYXRoO1xcbmxldCBtZXRhID0gZ2V0RXB1Yk1ldGFkYXRhKHBhdGgpO1xcbi8vbG9nKG1ldGEpXFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogbWV0YS5maXJzdFRpdGxlLFxcbiAgICBjb2xfdHlwZTogXFxcInRleHRfY2VudGVyXzFcXFwiLFxcbiAgICB1cmw6IFxcXCJoaWtlcjovL2VtcHR5XFxcIixcXG4gICAgZXh0cmE6IHtcXG4gICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcbiAgICB9XFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogXFxcIvCfkaTkvZzogIXvvJpcXFwiICsgbWV0YS5hdXRob3JzWzBdLmxhc3RuYW1lLFxcbiAgICBjb2xfdHlwZTogXFxcInJpY2hfdGV4dFxcXCIsXFxufSk7XFxubGV0IGRlc2NyaXB0aW9uID0gKG1ldGEuZGVzY3JpcHRpb25zWzBdIHx8IFxcXCJcXFwiKS5yZXBsYWNlKC88cC4qPz58PFxcXFwvcD4vZywgXFxcIlxcXCIpO1xcbmxldCB0ZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbjtcXG5pZiAoZGVzY3JpcHRpb24pIHtcXG4gICAgXFxuICAgIGlmIChkZXNjcmlwdGlvbi5sZW5ndGggPiA1MCkge1xcbiAgICAgICAgZGVzY3JpcHRpb24gPSBkZXNjcmlwdGlvbi5zdWJzdHJpbmcoMCwgNTApICtcXFwiLi4uLi4uXFxcIiArXFxcIuabtOWkmj5cXFwiLmxpbmsoJCgpLmI2NChcXFwiJ1xcXCIpLnJ1bGUoKCkgPT4ge1xcbiAgICAgICAgICAgIHNldFBhZ2VUaXRsZShcXFwi566A5LuLXFxcIik7XFxuICAgICAgICAgICAgc2V0UmVzdWx0KFt7XFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFwi566A5LuL77yaPGJyPuOAgOOAgFxcXCIgKyBNWV9QQVJBTVMudGV4dCxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcblxcbiAgICAgICAgICAgIH1dKTtcXG4gICAgICAgIH0pKTtcXG4gICAgfVxcbiAgICBsYXlvdXQucHVzaCh7XFxuICAgICAgICB0aXRsZTogXFxcIvCfk53nroDku4vvvJo8YnI+44CA44CAXFxcIitkZXNjcmlwdGlvbixcXG4gICAgICAgIGNvbF90eXBlOiBcXFwicmljaF90ZXh0XFxcIixcXG4gICAgICAgIGV4dHJhOiB7XFxuICAgICAgICAgICAgdGV4dDogdGRlc2NyaXB0aW9uXFxuICAgICAgICB9XFxuICAgIH0pO1xcbn1cXG4vL3NldFBhZ2VUaXRsZShtZXRhLmZpcnN0VGl0bGUpO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJsaW5lX2JsYW5rXFxcIixcXG4gICAgdXJsOiBcXFwiaGlrZXI6Ly9lbXB0eVxcXCJcXG59KTtcXG5sZXQgY2hhcHRlcnMgPSBnZXRFcHViQ2hhcHRlcnMocGF0aCk7XFxuZm9yIChsZXQgaXQgb2YgY2hhcHRlcnMpIHtcXG4gICAgbGF5b3V0LnB1c2goe1xcbiAgICAgICAgdGl0bGU6IGl0LnRpdGxlLFxcbiAgICAgICAgdXJsOiBcXFwiaGlrZXI6Ly9wYWdlL2VwdWJWaWV3ZXIudmlldyNyZWFkVGhlbWUjI2F1dG9QYWdlI1xcXCIsXFxuICAgICAgICBjb2xfdHlwZTogXFxcInRleHRfMVxcXCIsXFxuICAgICAgICBleHRyYToge1xcbiAgICAgICAgICAgIGhyZWY6IGl0LnVybCxcXG4gICAgICAgICAgICBwYXRoOiBwYXRoLFxcbiAgICAgICAgICAgIHRpdGxlOiBpdC50aXRsZVxcbiAgICAgICAgfVxcbiAgICB9KTtcXG59XFxuc2V0UmVzdWx0KGxheW91dCk7XCJ9LHtcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJuYW1lXCI6XCIjdi5lcHVi5p+l55yL5ZmoXCIsXCJwYXRoXCI6XCJlcHViVmlld2VyLnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmxldCBwYXRoID0gTVlfUEFSQU1TLnBhdGg7XFxubGV0IHVybCA9IE1ZX1BBUkFNUy5ocmVmO1xcbmxldCBjID0gZ2V0RXB1YkNvbnRlbnQocGF0aCwgdXJsKTtcXG4vL2xldCBhPSBjLnJlcGxhY2UoL1xcXFxzPzxkaXYuKj8+fDxcXFxcL2Rpdj5cXFxccz8vZywgXFxcIlxcXCIpLnJlcGxhY2UoL1xcXFxzPzxwLio/PiguKik8XFxcXC9wPlxcXFxzPy9nLCBcXFwiXFxcXHUzMDAwXFxcXHUzMDAwJDE8YnI+XFxcIik7XFxuLy9sZXQgYj1jLnJlcGxhY2UoL1xcXFxzPzxkaXYuKj8+fDxcXFxcL2Rpdj5cXFxccz8vZywgXFxcIlxcXCIpLnJlcGxhY2UoL1xcXFxzPzxwLio/PiguKj8pPFxcXFwvcD5cXFxccz8vZywgXFxcIlxcXFx1MzAwMFxcXFx1MzAwMCQxPGJyPlxcXCIpO1xcbi8vbG9nKGE9PWIpXFxuLy9sb2coZ2V0RXB1YkNvbnRlbnQwKHBhdGgsIHVybCkpXFxuXFxubGV0IGxheW91dCA9IFtdO1xcbmxheW91dC5wdXNoKHtcXG4gICAgY29sX3R5cGU6IFxcXCJyaWNoX3RleHRcXFwiLFxcbiAgICB0aXRsZTogKFxcXCI8c3Ryb25nPlxcXCIgKyBNWV9QQVJBTVMudGl0bGUgKyBcXFwiPC9zdHJvbmc+XFxcIikuYmlnKCksXFxufSk7XFxuXFxubGF5b3V0LnB1c2goe1xcbiAgICB0aXRsZTogYyxcXG4gICAgY29sX3R5cGU6ICdyaWNoX3RleHQnLFxcbiAgICBleHRyYToge1xcbiAgICAgICAgdGV4dFNpemU6IDE4LFxcbiAgICAgICAgY2xpY2s6IHRydWVcXG4gICAgfVxcbn0pO1xcbnNldFJlc3VsdChsYXlvdXQpO1wifSx7XCJjb2xfdHlwZVwiOlwibW92aWVfM1wiLFwibmFtZVwiOlwiI3bmlofku7bnrqHnkIZcIixcInBhdGhcIjpcIkZpbGVNYW5hZ2VtZW50LnZpZXdcIixcInJ1bGVcIjpcImpzOlxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxubGV0IHVybCA9IFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcIjtcXG5sZXQgZiA9IHJlcXVpcmUodXJsKTtcXG5sZXQgdHlwZSA9IGdldFBhcmFtKFxcXCJ0eXBlXFxcIiwgXFxcImhvbWVQYXRoXFxcIik7XFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAoKSA9PiB7XFxuICAgIHJlZnJlc2hQYWdlKCk7XFxufSk7XFxubGV0IGhpa2VyUGF0aCA9IFxcXCJmaWxlOi8vXFxcIiArIENvbmZpZy5ob21lUGF0aDtcXG5pZighZmlsZUV4aXN0KGhpa2VyUGF0aCkpe1xcbiAgICB3cml0ZUZpbGUoaGlrZXJQYXRoK1xcXCIv5Yib5bu655uu5b2VLnR4dFxcXCIsXFxcIlxcXCIpO1xcbiAgICBkZWxldGVGaWxlKGhpa2VyUGF0aCtcXFwiL+WIm+W7uuebruW9lS50eHRcXFwiKTtcXG59XFxuZi5maWxlU2VsZWN0aW9uKHtcXG4gICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgLy/moLnmja7mlofku7bmianlsZXlkI3vvIznlKjkuI3lkIzlsI/nqIvluo/miZPlvIBcXG4gICAgICAgIGlmIChcXFwiLmpwZ1xcXCIgPT09IFRZUEUpIHtcXG4gICAgICAgICAgICByZXR1cm4gUEFUSDtcXG4gICAgICAgIH0gZWxzZSBpZiAoXFxcIi50eHRcXFwiID09PSBUWVBFKSB7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UvdHh0UGFyc2VyLnZpZXc/aXNDYWNoZT10cnVlJnJ1bGU9XFxcIiArIE1ZX1JVTEUudGl0bGUgKyBcXFwiJnBhdGg9XFxcIiArIFBBVEg7XFxuICAgICAgICB9IGVsc2UgaWYgKFxcXCIuZXB1YlxcXCIgPT09IFRZUEUpIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9lcHViUGFyc2VyLnZpZXcjYXV0b0NhY2hlIz9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlICsgXFxcIiZwYXRoPVxcXCIgKyBQQVRIO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gJChcXFwi5peg5rOV5omT5byA77yM5piv5ZCm5L2/55So5YW25LuW5bqU55So5omT5byA77yfXFxcIikuY29uZmlybShwYXRoID0+IFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFwiICsgcGF0aCwgUEFUSCk7XFxuICAgICAgICB9XFxuICAgIH0pLFxcbiAgICBpbml0aWFsUGF0aDogQ29uZmlnW3R5cGVdLFxcbiAgICByb290RGlyUGF0aDogQ29uZmlnLmhvbWVQYXRoLFxcbiAgICAvL29uQ2xpY2tUeXBlOiBcXFwiY29uZmlybVxcXCIsXFxuICAgIC8vbWVtb3J5OiBcXFwiRmlsZU1hbmFnZW1lbnQ6bWVtb3J5XFxcIixcXG4gICAgcmVxdWlyZVVybDogdXJsLFxcbiAgICBmaWxlVHlwZTogXFxcIlxcXFwudHh0fFxcXFwuZXB1YnwuanBnXFxcIixcXG4gICAgLy9jSG9tZVRpcHM6IFxcXCLmmK/lkKbkvb/nlKjmtbfpmJTlsI/nqIvluo/miZPlvIBbJHtuYW1lfV0/XFxcIixcXG4gICAgLy9jU2VhcmNoVGlwczogXFxcIuaYr+WQpuS9v+eUqOa1t+mYlOWwj+eoi+W6j+aJk+W8gFske3BhdGh9XT9cXFwiXFxufSk7XCJ9XSxcInNhdmVkXCI6ZmFsc2UsXCJ0aXRsZVwiOlwi5pys5Zyw6LWE5rqQ566h55CGXCIsXCJ2ZXJzaW9uXCI6MCxcInVybFwiOlwiaGlrZXI6Ly9wYWdlL0ZpbGVNYW5hZ2VtZW50LnZpZXcjbm9SZWZyZXNoIyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcIixcImNvbF90eXBlXCI6XCJtb3ZpZV8zXCIsXCJmaW5kX3J1bGVcIjpcImpzOlxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcIik7XFxubGV0IHVybCA9IFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcIjtcXG5sZXQgZiA9IHJlcXVpcmUodXJsKTtcXG5sZXQgdHlwZSA9IGdldFBhcmFtKFxcXCJ0eXBlXFxcIiwgXFxcImhvbWVQYXRoXFxcIik7XFxuYWRkTGlzdGVuZXIoXFxcIm9uQ2xvc2VcXFwiLCAoKSA9PiB7XFxuICAgIHJlZnJlc2hQYWdlKCk7XFxufSk7XFxubGV0IGhpa2VyUGF0aCA9IFxcXCJmaWxlOi8vXFxcIiArIENvbmZpZy5ob21lUGF0aDtcXG5pZighZmlsZUV4aXN0KGhpa2VyUGF0aCkpe1xcbiAgICB3cml0ZUZpbGUoaGlrZXJQYXRoK1xcXCIv5Yib5bu655uu5b2VLnR4dFxcXCIsXFxcIlxcXCIpO1xcbiAgICBkZWxldGVGaWxlKGhpa2VyUGF0aCtcXFwiL+WIm+W7uuebruW9lS50eHRcXFwiKTtcXG59XFxuZi5maWxlU2VsZWN0aW9uKHtcXG4gICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKCkgPT4ge1xcbiAgICAgICAgLy/moLnmja7mlofku7bmianlsZXlkI3vvIznlKjkuI3lkIzlsI/nqIvluo/miZPlvIBcXG4gICAgICAgIGlmIChcXFwiLmpwZ1xcXCIgPT09IFRZUEUpIHtcXG4gICAgICAgICAgICByZXR1cm4gUEFUSDtcXG4gICAgICAgIH0gZWxzZSBpZiAoXFxcIi50eHRcXFwiID09PSBUWVBFKSB7XFxuICAgICAgICAgICAgcmV0dXJuIFxcXCJoaWtlcjovL3BhZ2UvdHh0UGFyc2VyLnZpZXc/aXNDYWNoZT10cnVlJnJ1bGU9XFxcIiArIE1ZX1JVTEUudGl0bGUgKyBcXFwiJnBhdGg9XFxcIiArIFBBVEg7XFxuICAgICAgICB9IGVsc2UgaWYgKFxcXCIuZXB1YlxcXCIgPT09IFRZUEUpIHtcXG4gICAgICAgICAgICByZXR1cm4gXFxcImhpa2VyOi8vcGFnZS9lcHViUGFyc2VyLnZpZXcjYXV0b0NhY2hlIz9ydWxlPVxcXCIgKyBNWV9SVUxFLnRpdGxlICsgXFxcIiZwYXRoPVxcXCIgKyBQQVRIO1xcbiAgICAgICAgfSBlbHNlIHtcXG4gICAgICAgICAgICByZXR1cm4gJChcXFwi5peg5rOV5omT5byA77yM5piv5ZCm5L2/55So5YW25LuW5bqU55So5omT5byA77yfXFxcIikuY29uZmlybShwYXRoID0+IFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFwiICsgcGF0aCwgUEFUSCk7XFxuICAgICAgICB9XFxuICAgIH0pLFxcbiAgICBpbml0aWFsUGF0aDogQ29uZmlnW3R5cGVdLFxcbiAgICByb290RGlyUGF0aDogQ29uZmlnLmhvbWVQYXRoLFxcbiAgICAvL29uQ2xpY2tUeXBlOiBcXFwiY29uZmlybVxcXCIsXFxuICAgIC8vbWVtb3J5OiBcXFwiRmlsZU1hbmFnZW1lbnQ6bWVtb3J5XFxcIixcXG4gICAgcmVxdWlyZVVybDogdXJsLFxcbiAgICBmaWxlVHlwZTogXFxcIlxcXFwudHh0fFxcXFwuZXB1YnwuanBnXFxcIixcXG4gICAgLy9jSG9tZVRpcHM6IFxcXCLmmK/lkKbkvb/nlKjmtbfpmJTlsI/nqIvluo/miZPlvIBbJHtuYW1lfV0/XFxcIixcXG4gICAgLy9jU2VhcmNoVGlwczogXFxcIuaYr+WQpuS9v+eUqOa1t+mYlOWwj+eoi+W6j+aJk+W8gFske3BhdGh9XT9cXFwiXFxufSk7XCIsXCJncm91cFwiOlwi5bel5YW3XCIsXCJ1YVwiOlwibW9iaWxlXCIsXCJwcmVSdWxlXCI6XCJcIixcInBhZ2VzXCI6XCJbe1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2YuRmlsZeW3peWFt1xcXCIsXFxcInBhdGhcXFwiOlxcXCJGaWxlLmpzXFxcIixcXFwicnVsZVxcXCI6XFxcImNvbnN0IEZpbGUgPSBqYXZhLmlvLkZpbGU7XFxcXG5jb25zdCB7XFxcXG4gICAgRmlsZXMsXFxcXG4gICAgUGF0aHMsXFxcXG4gICAgU3RhbmRhcmRDb3B5T3B0aW9uLFxcXFxuICAgIFN0YW5kYXJkT3Blbk9wdGlvblxcXFxufSA9IGphdmEubmlvLmZpbGU7XFxcXG5jb25zdCBqYXZhU3RyaW5nID0gamF2YS5sYW5nLlN0cmluZztcXFxcbmxldCBqYXZhU2NvcGUgPSBuZXcgSmF2YUltcG9ydGVyKGphdmEuaW8sIGphdmEubGFuZywgamF2YS5sYW5nLnJlZmxlY3QsIGphdmEudXRpbC5WZWN0b3IpO1xcXFxuXFxcXG5mdW5jdGlvbiBkZWxldGVGaWxlcyhmaWxlTmFtZSkge1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUoZmlsZU5hbWUpO1xcXFxuICAgIGlmICghZmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICAvL2xvZyhcXFxcXFxcIuWIoOmZpOaWh+S7tuWksei0pe+8mlxcXFxcXFwiICsgZmlsZU5hbWUgKyBcXFxcXFxcIuaWh+S7tuS4jeWtmOWcqFxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIGlmIChmaWxlLmlzRmlsZSgpKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gZGVsZXRlRmlsZShmaWxlTmFtZSk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gZGVsZXRlRGlyZWN0b3J5KGZpbGVOYW1lKTtcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgfVxcXFxuXFxcXG59XFxcXG4vKipcXFxcbiAqIOWIoOmZpOWNleS4quaWh+S7tlxcXFxuICogXFxcXG4gKiBAcGFyYW0gZmlsZU5hbWVcXFxcbiAqICAgICAgICAgICAg6KKr5Yig6Zmk5paH5Lu255qE5paH5Lu25ZCNXFxcXG4gKiBAcmV0dXJuIOWNleS4quaWh+S7tuWIoOmZpOaIkOWKn+i/lOWbnnRydWUs5ZCm5YiZ6L+U5ZueZmFsc2VcXFxcbiAqL1xcXFxuZnVuY3Rpb24gZGVsZXRlRmlsZShmaWxlTmFtZSkge1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUoZmlsZU5hbWUpO1xcXFxuICAgIGlmIChmaWxlLmlzRmlsZSgpICYmIGZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgZmlsZS5kZWxldGUoKTtcXFxcbiAgICAgICAgLy9sb2coXFxcXFxcXCLliKDpmaTljZXkuKrmlofku7ZcXFxcXFxcIiArIGZpbGVOYW1lICsgXFxcXFxcXCLmiJDlip/vvIFcXFxcXFxcIik7XFxcXG4gICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIC8vbG9nKFxcXFxcXFwi5Yig6Zmk5Y2V5Liq5paH5Lu2XFxcXFxcXCIgKyBmaWxlTmFtZSArIFxcXFxcXFwi5aSx6LSl77yBXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgfVxcXFxuXFxcXG59XFxcXG4vKipcXFxcbiAqIOWIoOmZpOebruW9le+8iOaWh+S7tuWkue+8ieS7peWPiuebruW9leS4i+eahOaWh+S7tlxcXFxuICogXFxcXG4gKiBAcGFyYW0gZGlyXFxcXG4gKiAgICAgICAgICAgIOiiq+WIoOmZpOebruW9leeahOaWh+S7tui3r+W+hFxcXFxuICogQHJldHVybiDnm67lvZXliKDpmaTmiJDlip/ov5Tlm550cnVlLOWQpuWImei/lOWbnmZhbHNlXFxcXG4gKi9cXFxcbmZ1bmN0aW9uIGRlbGV0ZURpcmVjdG9yeShkaXIpIHtcXFxcbiAgICAvLyDlpoLmnpxkaXLkuI3ku6Xmlofku7bliIbpmpTnrKbnu5PlsL7vvIzoh6rliqjmt7vliqDmlofku7bliIbpmpTnrKZcXFxcbiAgICBpZiAoIWRpci5lbmRzV2l0aChGaWxlLnNlcGFyYXRvcikpIHtcXFxcbiAgICAgICAgZGlyID0gZGlyICsgRmlsZS5zZXBhcmF0b3I7XFxcXG4gICAgfVxcXFxuICAgIGxldCBkaXJGaWxlID0gbmV3IEZpbGUoZGlyKTtcXFxcbiAgICAvLyDlpoLmnpxkaXLlr7nlupTnmoTmlofku7bkuI3lrZjlnKjvvIzmiJbogIXkuI3mmK/kuIDkuKrnm67lvZXvvIzliJnpgIDlh7pcXFxcbiAgICBpZiAoIWRpckZpbGUuZXhpc3RzKCkgfHwgIWRpckZpbGUuaXNEaXJlY3RvcnkoKSkge1xcXFxuICAgICAgICAvL2xvZyhcXFxcXFxcIuWIoOmZpOebruW9leWksei0pVxcXFxcXFwiICsgZGlyICsgXFxcXFxcXCLnm67lvZXkuI3lrZjlnKjvvIFcXFxcXFxcIik7XFxcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICB9XFxcXG4gICAgbGV0IGZsYWcgPSB0cnVlO1xcXFxuICAgIC8vIOWIoOmZpOaWh+S7tuWkueS4i+eahOaJgOacieaWh+S7tijljIXmi6zlrZDnm67lvZUpXFxcXG4gICAgbGV0IGZpbGVzID0gZGlyRmlsZS5saXN0RmlsZXMoKTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGZpbGVzLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgIC8vIOWIoOmZpOWtkOaWh+S7tlxcXFxuICAgICAgICBpZiAoZmlsZXNbaV0uaXNGaWxlKCkpIHtcXFxcbiAgICAgICAgICAgIGZsYWcgPSBkZWxldGVGaWxlKGZpbGVzW2ldLmdldEFic29sdXRlUGF0aCgpKTtcXFxcbiAgICAgICAgICAgIGlmICghZmxhZykge1xcXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9IGVsc2UgeyAvLyDliKDpmaTlrZDnm67lvZVcXFxcbiAgICAgICAgICAgIGZsYWcgPSBkZWxldGVEaXJlY3RvcnkoZmlsZXNbaV0uZ2V0QWJzb2x1dGVQYXRoKCkpO1xcXFxuICAgICAgICAgICAgaWYgKCFmbGFnKSB7XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgaWYgKCFmbGFnKSB7XFxcXG4gICAgICAgIC8vbG9nKFxcXFxcXFwi5Yig6Zmk55uu5b2V5aSx6LSlXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgfVxcXFxuICAgIC8vIOWIoOmZpOW9k+WJjeebruW9lVxcXFxuICAgIGlmIChkaXJGaWxlLmRlbGV0ZSgpKSB7XFxcXG4gICAgICAgIC8vbG9nKFxcXFxcXFwi5Yig6Zmk55uu5b2VXFxcXFxcXCIgKyBkaXIgKyBcXFxcXFxcIuaIkOWKn++8gVxcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgLy9sb2coXFxcXFxcXCLliKDpmaTnm67lvZVcXFxcXFxcIiArIGRpciArIFxcXFxcXFwi5aSx6LSl77yBXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgfVxcXFxufVxcXFxuXFxcXG4vL2NvcHnljZXkuKrmlofku7ZcXFxcbmZ1bmN0aW9uIGNvcHlGaWxlKHNvdXJjZSwgdGFyZ2V0LCBpc0NvdmVyKSB7XFxcXG4gICAgbGV0IHNvdXJjZVBhdGggPSBQYXRocy5nZXQoc291cmNlKTtcXFxcbiAgICBsZXQgdGFyZ2V0UGF0aCA9IFBhdGhzLmdldCh0YXJnZXQpO1xcXFxuICAgIGxldCBpc0V4aXN0ID0gRmlsZXMuZXhpc3RzKHRhcmdldFBhdGgpO1xcXFxuICAgIGlmIChGaWxlcy5pc0RpcmVjdG9yeShzb3VyY2VQYXRoKSB8fCAoaXNFeGlzdCAmJiAhaXNDb3ZlcikgfHwgKGlzRXhpc3QgJiYgRmlsZXMuaXNEaXJlY3RvcnkodGFyZ2V0UGF0aCkpKSB7XFxcXG4gICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICB9XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgaWYgKCFpc0V4aXN0KSB7XFxcXG4gICAgICAgICAgICBGaWxlcy5jcmVhdGVEaXJlY3Rvcmllcyh0YXJnZXRQYXRoLmdldFBhcmVudCgpKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBpZiAoaXNDb3ZlciA9PT0gdHJ1ZSkge1xcXFxuICAgICAgICAgICAgRmlsZXMuY29weShzb3VyY2VQYXRoLCB0YXJnZXRQYXRoLCBTdGFuZGFyZENvcHlPcHRpb24uUkVQTEFDRV9FWElTVElORywgU3RhbmRhcmRDb3B5T3B0aW9uLkNPUFlfQVRUUklCVVRFUyk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBGaWxlcy5jb3B5KHNvdXJjZVBhdGgsIHRhcmdldFBhdGgsIFN0YW5kYXJkQ29weU9wdGlvbi5DT1BZX0FUVFJJQlVURVMpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgfVxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRGaWxlVGltZShwYXRoKSB7XFxcXG4gICAgbGV0IGZpbGUgPSBuZXcgRmlsZShwYXRoKTtcXFxcbiAgICBsZXQgbGFzdE1vZGlmaWVkID0gZmlsZS5sYXN0TW9kaWZpZWQoKTtcXFxcbiAgICBsZXQgZGF0ZSA9IG5ldyBEYXRlKGxhc3RNb2RpZmllZCk7XFxcXG4gICAgcmV0dXJuIGRhdGUuZ2V0VGltZSgpO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXROYW1lKHBhdGgpIHtcXFxcbiAgICByZXR1cm4gbmV3IEZpbGUocGF0aCkuZ2V0TmFtZSgpICsgXFxcXFxcXCJcXFxcXFxcIjtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZ2V0RmlsZVBhdGgocGF0aCwgdHlwZSwgZXhwYW5kKSB7XFxcXG4gICAgdHlwZSA9IHR5cGUgfHwgXFxcXFxcXCJmaWxlXFxcXFxcXCI7XFxcXG4gICAgaWYgKCFbXFxcXFxcXCJmaWxlXFxcXFxcXCIsIFxcXFxcXFwiZGlyXFxcXFxcXCJdLmluY2x1ZGVzKHR5cGUpKSB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCLnsbvlnovplJnor69cXFxcXFxcIik7XFxcXG4gICAgbGV0IGZpbGVUeXBlID0gdHlwZSA9PT0gXFxcXFxcXCJmaWxlXFxcXFxcXCIgPyBcXFxcXFxcImlzRmlsZVxcXFxcXFwiIDogXFxcXFxcXCJpc0RpcmVjdG9yeVxcXFxcXFwiO1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUocGF0aCk7XFxcXG4gICAgbGV0IGFycmF5ID0gZmlsZS5saXN0RmlsZXMoKSB8fCBbXTtcXFxcbiAgICBsZXQgcGF0aExpc3QgPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgIGlmIChhcnJheVtpXVtmaWxlVHlwZV0oKSkge1xcXFxuICAgICAgICAgICAgcGF0aExpc3QucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgbmFtZTogYXJyYXlbaV0uZ2V0TmFtZSgpICsgXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBhcnJheVtpXS5nZXRQYXRoKCkgKyBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGxhc3RNb2RpZmllZDogTnVtYmVyKGFycmF5W2ldLmxhc3RNb2RpZmllZCgpKSxcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIGlmIChleHBhbmQpIHtcXFxcbiAgICAgICAgcGF0aExpc3QgPSBwYXRoTGlzdC5maWx0ZXIoaXQgPT4gaXQubmFtZS5lbmRzV2l0aChleHBhbmQpKTtcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHBhdGhMaXN0O1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRGaWxlcyhwYXRoLCB0eXBlLCBleHBhbmQpIHtcXFxcbiAgICBsZXQgdHlwZXMgPSB7XFxcXG4gICAgICAgIFxcXFxcXFwiZmlsZVxcXFxcXFwiOiBcXFxcXFxcImlzRmlsZVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImRpclxcXFxcXFwiOiBcXFxcXFxcImlzRGlyZWN0b3J5XFxcXFxcXCJcXFxcbiAgICB9O1xcXFxuICAgIGxldCBmaWxlVHlwZSA9IHR5cGVzW3R5cGVdO1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUocGF0aCk7XFxcXG4gICAgbGV0IGFycmF5ID0gZmlsZS5saXN0RmlsZXMoKSB8fCBbXTtcXFxcbiAgICBsZXQgZmlsZUxpc3QgPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGFycmF5Lmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgIGxldCBmaWxlID0gYXJyYXlbaV07XFxcXG4gICAgICAgIGlmICgoIWZpbGVUeXBlIHx8IGZpbGVbZmlsZVR5cGVdKCkpICYmICghZXhwYW5kIHx8IGZpbGUuZ2V0TmFtZSgpLmVuZHNXaXRoKGV4cGFuZCkpKSB7XFxcXG4gICAgICAgICAgICBmaWxlTGlzdC5wdXNoKGZpbGUpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiBmaWxlTGlzdDtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gcmVuYW1lRmlsZShmcm9tUGF0aCwgbmFtZSkge1xcXFxuICAgIGxldCBmcm9tRmlsZSA9IG5ldyBGaWxlKGZyb21QYXRoKTtcXFxcbiAgICBsZXQgdG9GaWxlID0gbmV3IEZpbGUoZnJvbUZpbGUuZ2V0UGFyZW50KCkgKyBcXFxcXFxcIi9cXFxcXFxcIiArIG5hbWUpO1xcXFxuICAgIHRyeSB7XFxcXG4gICAgICAgIGlmICghZnJvbUZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBpZiAodG9GaWxlLmV4aXN0cygpKSB7XFxcXG4gICAgICAgICAgICBpZiAoIXRvRmlsZS5kZWxldGUoKSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBGaWxlcy5tb3ZlKGZyb21GaWxlLnRvUGF0aCgpLCB0b0ZpbGUudG9QYXRoKCksIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HKTtcXFxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gbW92ZUZpbGVzKGZyb21QYXRoLCB0b1BhdGgpIHtcXFxcbiAgICBsZXQgZnJvbUZpbGUgPSBuZXcgRmlsZShmcm9tUGF0aCk7XFxcXG4gICAgbGV0IHRvRmlsZSA9IG5ldyBGaWxlKHRvUGF0aCk7XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgaWYgKCFmcm9tRmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmICh0b0ZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgICAgIGlmICghZGVsZXRlRmlsZXModG9QYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBGaWxlcy5tb3ZlKGZyb21GaWxlLnRvUGF0aCgpLCB0b0ZpbGUudG9QYXRoKCksIFN0YW5kYXJkQ29weU9wdGlvbi5SRVBMQUNFX0VYSVNUSU5HKTtcXFxcbiAgICAgICAgcmV0dXJuIHRydWU7XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gZmlsZVdyaXRlKHBhdGgsIGNvbnRlbnQpIHtcXFxcbiAgICB3cml0ZUZpbGUoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoLCBjb250ZW50KVxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBmaWxlV3JpdGVBcHBlbmQocGF0aCwgY29udGVudCkge1xcXFxuICAgIGxldCBmaWxlID0gbmV3IEZpbGUocGF0aCk7XFxcXG4gICAgbGV0IHBhdGhzID0gZmlsZS50b1BhdGgoKTtcXFxcbiAgICBpZiAoZmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICBGaWxlcy53cml0ZShwYXRocywgbmV3IGphdmFTdHJpbmcoY29udGVudCkuZ2V0Qnl0ZXMoKSwgU3RhbmRhcmRPcGVuT3B0aW9uLkFQUEVORCk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCwgY29udGVudCk7XFxcXG4gICAgfVxcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIoZmlsZSkge1xcXFxuICAgIGlmIChmaWxlLmlzRmlsZSgpKSB7XFxcXG4gICAgICAgIHJldHVybiBmaWxlLmxlbmd0aCgpO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgY2hpbGRyZW4gPSBmaWxlLmxpc3RGaWxlcygpO1xcXFxuICAgIGxldCB0b3RhbCA9IDA7XFxcXG4gICAgaWYgKGNoaWxkcmVuICE9IG51bGwpIHtcXFxcbiAgICAgICAgZm9yIChsZXQgY2hpbGQgb2YgY2hpbGRyZW4pIHtcXFxcbiAgICAgICAgICAgIHRvdGFsICs9IGdldFRvdGFsU2l6ZU9mRmlsZXNJbkRpcihjaGlsZCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHRvdGFsO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBnZXRGaWxlU2l6ZShmaWxlUGF0aCkge1xcXFxuICAgIC8vQnl0ZVxcXFxuICAgIGxldCBzaXplID0gZ2V0VG90YWxTaXplT2ZGaWxlc0luRGlyKG5ldyBGaWxlKGZpbGVQYXRoKSk7XFxcXG4gICAgaWYgKHNpemUgPCAwKSB7XFxcXG4gICAgICAgIHJldHVybiBudWxsO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgdW5pdEZvcm0gPSBbXFxcXFxcXCJCeXRlXFxcXFxcXCIsIFxcXFxcXFwiS0JcXFxcXFxcIiwgXFxcXFxcXCJNQlxcXFxcXFwiLCBcXFxcXFxcIkdCXFxcXFxcXCIsIFxcXFxcXFwiVEJcXFxcXFxcIl07XFxcXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHVuaXRGb3JtLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgIGlmIChzaXplID4gMTAyNCkge1xcXFxuICAgICAgICAgICAgc2l6ZSAvPSAxMDI0O1xcXFxuICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gc2l6ZS50b0ZpeGVkKDIpLnJlcGxhY2UoLyhcXFxcXFxcXC4wMCkkLywgXFxcXFxcXCJcXFxcXFxcIikgKyB1bml0Rm9ybVtpXTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICByZXR1cm4gXFxcXFxcXCJFUlJPUjrmlbDlgLzov4flpKdcXFxcXFxcIjtcXFxcbn1cXFxcbi8v5a6M5pW05ZCI5bm2XFxcXG4vKlxcXFxuZnVuY3Rpb24gZmlsZUNvbWJpbmUoZmlsZXNJbnB1dCwgZmlsZU91dCwgZXh0ZW5zaW9uLCBpbnRlcmNlcHQpIHtcXFxcbiAgICB3aXRoKGphdmFTY29wZSkge1xcXFxuICAgICAgICBjb25zdCBUTVBfQlVGRkVSX1NJWkUgPSAweDMwMDAwO1xcXFxuICAgICAgICBjb25zdCBCVUZGRVJfU0laRSA9IDB4MzAwMDAwO1xcXFxuICAgICAgICAvL+WQiOW5tuS4tOaXtuaWh+S7tlxcXFxuICAgICAgICBsZXQgaW5wdXRGaWxlID0gbmV3IEZpbGUoZmlsZXNJbnB1dCk7XFxcXG4gICAgICAgIGxldCB0bXBGaWxlID0gbmV3IEZpbGUoZmlsZU91dCArIFxcXFxcXFwiLnRtcFxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IHRvcyA9IG5ldyBCdWZmZXJlZE91dHB1dFN0cmVhbShuZXcgRmlsZU91dHB1dFN0cmVhbSh0bXBGaWxlKSk7XFxcXG4gICAgICAgIGxldCBpbnB1dEZpbGVzID0gaW5wdXRGaWxlLmxpc3RGaWxlcygpO1xcXFxuICAgICAgICBsZXQgdGJ5cyA9IEFycmF5Lm5ld0luc3RhbmNlKEJ5dGUuVFlQRSwgVE1QX0JVRkZFUl9TSVpFKTtcXFxcbiAgICAgICAgZm9yIChsZXQgZmlsZSBvZiBpbnB1dEZpbGVzKSB7XFxcXG4gICAgICAgICAgICBpZiAoZmlsZS5nZXROYW1lKCkuZW5kc1dpdGgoZXh0ZW5zaW9uKSkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBpcyA9IG5ldyBGaWxlSW5wdXRTdHJlYW0oZmlsZSk7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGxlbiA9IDA7XFxcXG4gICAgICAgICAgICAgICAgd2hpbGUgKChsZW4gPSBpcy5yZWFkKHRieXMpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICB0b3Mud3JpdGUodGJ5cywgMCwgbGVuKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgaXMuY2xvc2UoKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB0b3MuY2xvc2UoKTtcXFxcbiAgICAgICAgLy/op4TliJnmm7/mjaLop4TliJk7XFxcXG4gICAgICAgIGxldCBvdXRGaWxlID0gbmV3IEZpbGUoZmlsZU91dCk7XFxcXG4gICAgICAgIGlmICh0eXBlb2YgaW50ZXJjZXB0ID09PSBcXFxcXFxcImZ1bmN0aW9uXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGxldCB0aXMgPSBuZXcgRmlsZUlucHV0U3RyZWFtKHRtcEZpbGUpO1xcXFxuICAgICAgICAgICAgbGV0IG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKG91dEZpbGUpKTtcXFxcbiAgICAgICAgICAgIGxldCBsZW4gPSAwO1xcXFxuICAgICAgICAgICAgbGV0IGJ5cyA9IEFycmF5Lm5ld0luc3RhbmNlKEJ5dGUuVFlQRSwgQlVGRkVSX1NJWkUpO1xcXFxuICAgICAgICAgICAgd2hpbGUgKChsZW4gPSB0aXMucmVhZChieXMpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBuYnlzID0gaW50ZXJjZXB0KG5ldyBTdHJpbmcoYnlzLDAsbGVuKSk7XFxcXG4gICAgICAgICAgICAgICAgb3Mud3JpdGUobmJ5cywgMCwgbmJ5cy5sZW5ndGgpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgdG1wRmlsZS5kZWxldGUoKTtcXFxcbiAgICAgICAgICAgIHRpcy5jbG9zZSgpO1xcXFxuICAgICAgICAgICAgb3MuY2xvc2UoKTtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGlmIChvdXRGaWxlLmV4aXN0cygpKSB7XFxcXG4gICAgICAgICAgICAgICAgb3V0RmlsZS5kZWxldGUoKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHRtcEZpbGUucmVuYW1lVG8ob3V0RmlsZSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG59Ki9cXFxcbi8v5q6LXFxcXG5mdW5jdGlvbiBmaWxlUnVsZShmaWxlc0lucHV0LCBmaWxlT3V0LCBpbnRlcmNlcHQpIHtcXFxcbiAgICB3aXRoKGphdmFTY29wZSkge1xcXFxuICAgICAgICBjb25zdCBCVUZGRVJfU0laRSA9IDB4MzAwMDAwO1xcXFxuICAgICAgICBsZXQgdG1wRmlsZSA9IG5ldyBGaWxlKGZpbGVzSW5wdXQpO1xcXFxuICAgICAgICBpZiAoISh0bXBGaWxlLmV4aXN0cygpICYmIHRtcEZpbGUuaXNGaWxlKCkpKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGV0IG91dEZpbGUgPSBuZXcgRmlsZShmaWxlT3V0KTtcXFxcblxcXFxuICAgICAgICBsZXQgdGlzID0gbmV3IEZpbGVJbnB1dFN0cmVhbSh0bXBGaWxlKTtcXFxcbiAgICAgICAgbGV0IG9zID0gbmV3IEJ1ZmZlcmVkT3V0cHV0U3RyZWFtKG5ldyBGaWxlT3V0cHV0U3RyZWFtKG91dEZpbGUpKTtcXFxcbiAgICAgICAgbGV0IGxlbiA9IDA7XFxcXG4gICAgICAgIGxldCBieXMgPSBBcnJheS5uZXdJbnN0YW5jZShCeXRlLlRZUEUsIEJVRkZFUl9TSVpFKTtcXFxcbiAgICAgICAgd2hpbGUgKChsZW4gPSB0aXMucmVhZChieXMpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgbGV0IG5ieXMgPSBpbnRlcmNlcHQobmV3IFN0cmluZyhieXMsIDAsIGxlbikpO1xcXFxuICAgICAgICAgICAgb3Mud3JpdGUobmJ5cywgMCwgbmJ5cy5sZW5ndGgpO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHRtcEZpbGUuZGVsZXRlKCk7XFxcXG4gICAgICAgIHRpcy5jbG9zZSgpO1xcXFxuICAgICAgICBvcy5jbG9zZSgpO1xcXFxuICAgICAgICByZXR1cm4gdHJ1ZTtcXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIHJlYWRGaWxlKHBhdGgpIHtcXFxcbiAgICB0cnkge1xcXFxuICAgICAgICBsZXQgcGF0aHMgPSBQYXRocy5nZXQocGF0aCk7XFxcXG4gICAgICAgIGlmICghRmlsZXMuZXhpc3RzKHBhdGhzKSkgcmV0dXJuIFxcXFxcXFwiXFxcXFxcXCI7XFxcXG4gICAgICAgIHJldHVybiBTdHJpbmcobmV3IGphdmFTdHJpbmcoRmlsZXMucmVhZEFsbEJ5dGVzKHBhdGhzKSkpO1xcXFxuICAgIH0gY2F0Y2gge1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG59XFxcXG4kLmV4cG9ydHMgPSB7XFxcXG4gICAgZ2V0RmlsZVRpbWU6IChwYXRoKSA9PiBnZXRGaWxlVGltZShwYXRoKSxcXFxcbiAgICBnZXRGaWxlUGF0aDogKHBhdGgsIHR5cGUsIGV4cGFuZCkgPT4gZ2V0RmlsZVBhdGgocGF0aCwgdHlwZSwgZXhwYW5kKSxcXFxcbiAgICBkZWxldGVGaWxlczogKHBhdGgpID0+IGRlbGV0ZUZpbGVzKHBhdGgpLFxcXFxuICAgIHJlbmFtZUZpbGU6IChwYXRoLCBuYW1lKSA9PiByZW5hbWVGaWxlKHBhdGgsIG5hbWUpLFxcXFxuICAgIG1vdmVGaWxlczogKGZyb21QYXRoLCB0b1BhdGgpID0+IG1vdmVGaWxlcyhmcm9tUGF0aCwgdG9QYXRoKSxcXFxcbiAgICBmaWxlV3JpdGU6IChwYXRoLCBjb250ZW50KSA9PiBmaWxlV3JpdGUocGF0aCwgY29udGVudCksXFxcXG4gICAgZmlsZVdyaXRlQXBwZW5kOiAocGF0aCwgY29udGVudCkgPT4gZmlsZVdyaXRlQXBwZW5kKHBhdGgsIGNvbnRlbnQpLFxcXFxuICAgIGdldE5hbWU6IChwYXRoKSA9PiBnZXROYW1lKHBhdGgpLFxcXFxuICAgIGdldEZpbGVTaXplOiAoZmlsZVBhdGgpID0+IGdldEZpbGVTaXplKGZpbGVQYXRoKSxcXFxcbiAgICBmaWxlUnVsZTogKGZpbGVzSW5wdXQsIGZpbGVPdXQsIGludGVyY2VwdCkgPT4gZmlsZVJ1bGUoZmlsZXNJbnB1dCwgZmlsZU91dCwgaW50ZXJjZXB0KSxcXFxcbiAgICBjb3B5RmlsZTogKHNvdXJjZSwgdGFyZ2V0LCBpc0NvdmVyKSA9PiBjb3B5RmlsZShzb3VyY2UsIHRhcmdldCwgaXNDb3ZlciksXFxcXG4gICAgcmVhZEZpbGU6IChwYXRoKSA9PiByZWFkRmlsZShwYXRoKSxcXFxcbiAgICBnZXRGaWxlczogKHBhdGgsIHR5cGUsIGV4cGFuZCkgPT4gZ2V0RmlsZXMocGF0aCwgdHlwZSwgZXhwYW5kKSxcXFxcbiAgICBnZXRUb3RhbFNpemVPZkZpbGVzSW5EaXI6KGZpbGUpPT5nZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIoZmlsZSlcXFxcbn1cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwidGV4dF8yXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuS4i+i9veWIl+ihqC3mma7pgJrkuIvovb1cXFwiLFxcXCJwYXRoXFxcIjpcXFwiZG93bmxvYWQudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IHZpZXdDb25maWcgPSBPYmplY3QuYXNzaWduKHtcXFxcbiAgICBjaGFwdGVyTGlzdDogW10sXFxcXG4gICAgaW5mbzoge30sXFxcXG4gICAgZGVmYXVsdFZpZXc6IFxcXFxcXFwiMFxcXFxcXFwiXFxcXG59LCBNWV9QQVJBTVMpO1xcXFxudmlld0NvbmZpZy5pbmZvID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgcnVsZU5hbWU6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgYm9va05hbWU6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgYm9va1RvcFBpYzogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICBwYXJzZUNvZGU6IFxcXFxcXFwiXFxcXFxcXCIsXFxcXG4gICAgZGVjb2RlOiB1bmRlZmluZWQsXFxcXG4gICAgdHlwZTogXFxcXFxcXCJjb21pY1xcXFxcXFwiLFxcXFxuICAgIGNvbWljU2NoZW1lOiBcXFxcXFxcIjFcXFxcXFxcIlxcXFxufSwgdmlld0NvbmZpZy5pbmZvKTtcXFxcbmxldCB7XFxcXG4gICAgY2hhcHRlckxpc3QsXFxcXG4gICAgaW5mbyxcXFxcbiAgICBkZWZhdWx0Vmlld1xcXFxufSA9IHZpZXdDb25maWc7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLpgInmi6nlmah8XFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lKVxcXFxuXFxcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFxcXFxcIik7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG5cXFxcbnZpZXdDb25maWcuaW5mby5ib29rTmFtZT1Ub29sLnRleHRTaGllbGQodmlld0NvbmZpZy5pbmZvLmJvb2tOYW1lKTtcXFxcbnZpZXdDb25maWcuaW5mby5ydWxlTmFtZT1Ub29sLnRleHRTaGllbGQodmlld0NvbmZpZy5pbmZvLnJ1bGVOYW1lKTtcXFxcblxcXFxuY29uc3QgZGVmX0RvVmlfU3R5bGUgPSBDb25maWcuZGVmX0RvVmlfU3R5bGU7XFxcXG5jb25zdCBNWV9JRCA9IGluZm8ucnVsZU5hbWUgKyBcXFxcXFxcIi8vXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lO1xcXFxuXFxcXG5sZXQgaXNTdGFydCA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiKTtcXFxcbmxldCB2aWV3TW9kZSA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6dmlld01vZGVcXFxcXFxcIiwgZGVmYXVsdFZpZXcpO1xcXFxubGV0IGlzUmV2ZXJzZSA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNSZXZlcnNlXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbmxldCB0YWdGaWx0ZXIgPSBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnRhZ0ZpbHRlclxcXFxcXFwiLCBDb25maWcuZGVmX0RvVmlfVHlwZSk7XFxcXG5cXFxcbmFkZExpc3RlbmVyKFxcXFxcXFwib25DbG9zZVxcXFxcXFwiLCAkLnRvU3RyaW5nKChNWV9JRCkgPT4ge1xcXFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpsb2FkaW5nVGVhbVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6dmlld01vZGVcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOmNvbXBsZXRlZFxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjp0YWdGaWx0ZXJcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOnBhZ2VOdW1cXFxcXFxcIik7XFxcXG59LCBNWV9JRCkpO1xcXFxuXFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5cXFxcbmlmIChpc1N0YXJ0ID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6dmlld01vZGVcXFxcXFxcIiwgZGVmYXVsdFZpZXcpO1xcXFxuICAgIHZpZXdNb2RlID0gXFxcXFxcXCIxXFxcXFxcXCI7XFxcXG59XFxcXG5cXFxcbmxldCBiYWNrdXBDaGFwdGVyTGlzdCA9IGNoYXB0ZXJMaXN0O1xcXFxuaWYgKHR5cGVvZiBjaGFwdGVyTGlzdCA9PT0gXFxcXFxcXCJzdHJpbmdcXFxcXFxcIikge1xcXFxuICAgIGNoYXB0ZXJMaXN0ID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgY2hhcHRlckxpc3QpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG59XFxcXG5sZXQgY2hhcHRlckFsbCA9IGNoYXB0ZXJMaXN0O1xcXFxuY2hhcHRlckxpc3QgPSBjaGFwdGVyTGlzdC5tYXAoKGl0ZW0sIENJRCkgPT4ge1xcXFxuICAgIGl0ZW0uQ0lEID0gQ0lEO1xcXFxuICAgIGl0ZW0udGl0bGU9VG9vbC50ZXh0U2hpZWxkKGl0ZW0udGl0bGUpO1xcXFxuICAgIHJldHVybiBpdGVtO1xcXFxufSk7XFxcXG5sZXQgcGFnZU51bSA9IE51bWJlcihnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnBhZ2VOdW1cXFxcXFxcIiwgXFxcXFxcXCIxXFxcXFxcXCIpKTtcXFxcbmxldCBjaGFwdGVyQ2h1bmsgPSBbY2hhcHRlckxpc3RdLmNvbmNhdChUb29sLmNodW5rKGNoYXB0ZXJMaXN0LCBDb25maWcudmlld1BhZ2VTaXplKSk7XFxcXG5jaGFwdGVyTGlzdCA9IGNoYXB0ZXJDaHVua1twYWdlTnVtXSB8fCBbXTtcXFxcblxcXFxuZnVuY3Rpb24gc2V0VHlwZSgpIHtcXFxcbiAgICBsZXQgc2V0ID0gKHRhZywgcHV0KSA9PiB7XFxcXG4gICAgICAgIHB1dE15VmFyKHB1dCwgdGFnKTtcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICB9O1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IDAgPT0gcGFnZU51bSA/IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyAoXFxcXFxcXCLlhajpg6goXFxcXFxcXCIgKyBjaGFwdGVyQWxsLmxlbmd0aCArIFxcXFxcXFwiKVxcXFxcXFwiKS5mb250Y29sb3IoXFxcXFxcXCIjMjNBRDZGXFxcXFxcXCIpIDogXFxcXFxcXCLlhajpg6goXFxcXFxcXCIgKyBjaGFwdGVyQWxsLmxlbmd0aCArIFxcXFxcXFwiKVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZShzZXQsIDAsIE1ZX0lEICsgXFxcXFxcXCI6cGFnZU51bVxcXFxcXFwiKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgZm9yIChsZXQgaSA9IDE7IGkgPCBjaGFwdGVyQ2h1bmsubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgbGV0IHRhZ1RleHQgPSAoaSAtIDEpICogQ29uZmlnLnZpZXdQYWdlU2l6ZSArIFxcXFxcXFwiLVxcXFxcXFwiICsgKChpIC0gMSkgKiBDb25maWcudmlld1BhZ2VTaXplICsgY2hhcHRlckNodW5rW2ldLmxlbmd0aCk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpID09IHBhZ2VOdW0gPyBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgdGFnVGV4dC5mb250Y29sb3IoXFxcXFxcXCIjMjNBRDZGXFxcXFxcXCIpIDogdGFnVGV4dCxcXFxcbiAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKHNldCwgaSwgTVlfSUQgKyBcXFxcXFxcIjpwYWdlTnVtXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImJsYW5rX2Jsb2NrXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiB0YWdGaWx0ZXIgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi5YWo6YOoXFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiIzIzQUQ2RlxcXFxcXFwiKSA6IFxcXFxcXFwi5YWo6YOoXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKHNldCwgXFxcXFxcXCIwXFxcXFxcXCIsIE1ZX0lEICsgXFxcXFxcXCI6dGFnRmlsdGVyXFxcXFxcXCIpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiB0YWdGaWx0ZXIgPT09IFxcXFxcXFwiMVxcXFxcXFwiID8gXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi5pyq5LiL6L29XFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiIzIzQUQ2RlxcXFxcXFwiKSA6IFxcXFxcXFwi5pyq5LiL6L29XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKHNldCwgXFxcXFxcXCIxXFxcXFxcXCIsIE1ZX0lEICsgXFxcXFxcXCI6dGFnRmlsdGVyXFxcXFxcXCIpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiB0YWdGaWx0ZXIgPT09IFxcXFxcXFwiMlxcXFxcXFwiID8gXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi5bey5LiL6L29XFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiIzIzQUQ2RlxcXFxcXFwiKSA6IFxcXFxcXFwi5bey5LiL6L29XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKHNldCwgXFxcXFxcXCIyXFxcXFxcXCIsIE1ZX0lEICsgXFxcXFxcXCI6dGFnRmlsdGVyXFxcXFxcXCIpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcbmxldCBjaGFwdGVyVGVhbSA9IFtdO1xcXFxubGV0IHJlY29yZCA9IFtdO1xcXFxuaWYgKGluZm8udHlwZSA9PT0gXFxcXFxcXCJjb21pY1xcXFxcXFwiKSB7XFxcXG4gICAgbGV0IGxhenkgPSAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBmaWxlbGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgoaW5wdXQpO1xcXFxuICAgICAgICBsZXQgcGljbGlzdCA9IGZpbGVsaXN0Lm1hcCgoaXRlbSwgaSkgPT4gXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBpbnB1dCArIFxcXFxcXFwiL1xcXFxcXFwiICsgKGkgKyAxKSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwicGljczovL1xcXFxcXFwiICsgcGljbGlzdC5qb2luKFxcXFxcXFwiJiZcXFxcXFxcIik7XFxcXG4gICAgfSk7XFxcXG5cXFxcbiAgICBmdW5jdGlvbiBjb21GdW4oaSwgaXRlbSkge1xcXFxuICAgICAgICBsZXQgcm9vdFBhdGggPSBDb25maWcuY29taWNQYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpICsgXFxcXFxcXCIkQSRcXFxcXFxcIiArIGl0ZW0udGl0bGU7XFxcXG4gICAgICAgIHJldHVybiB7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJxcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiByb290UGF0aCArIGxhenksXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI1xcXFxcXFwiICsgaSxcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBGaWxlLmdldEZpbGVQYXRoKENvbmZpZ1tpbmZvLnR5cGUgKyBcXFxcXFxcIlBhdGhcXFxcXFxcIl0gKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8uYm9va05hbWUsIFxcXFxcXFwiZGlyXFxcXFxcXCIpLmZvckVhY2goKGZpbGUpID0+IHtcXFxcbiAgICAgICAgbGV0IGF0dCA9IFRvb2wuc3BsaXQoZmlsZS5uYW1lLCBcXFxcXFxcIiRcXFxcXFxcIiwgMik7XFxcXG4gICAgICAgIGlmIChhdHQubGVuZ3RoID09PSAzICYmIGF0dFsxXSA9PT0gKFxcXFxcXFwiQVxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgcmVjb3JkLnB1c2goYXR0WzJdKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxufSBlbHNlIHtcXFxcbiAgICBmdW5jdGlvbiBjb21GdW4oaSwgaXRlbSkge1xcXFxuICAgICAgICByZXR1cm4ge1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCcXFxcXFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcXFxcXCLigJ3igJ1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxNYWluQm9keSNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcIiNcXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgcGF0aDogQ29uZmlnLm5vdmVsUGF0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaSArIFxcXFxcXFwiJEEkXFxcXFxcXCIgKyBpdGVtLnRpdGxlICsgXFxcXFxcXCIudHh0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGVcXFxcbiAgICAgICAgICAgIH0sXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogZGVmX0RvVmlfU3R5bGVcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBGaWxlLmdldEZpbGVQYXRoKENvbmZpZ1tpbmZvLnR5cGUgKyBcXFxcXFxcIlBhdGhcXFxcXFxcIl0gKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8uYm9va05hbWUsIFxcXFxcXFwiZmlsZVxcXFxcXFwiLCBcXFxcXFxcIi50eHRcXFxcXFxcIikuZm9yRWFjaCgoZmlsZSkgPT4ge1xcXFxuICAgICAgICBsZXQgYXR0ID0gVG9vbC5zcGxpdChmaWxlLm5hbWUsIFxcXFxcXFwiJFxcXFxcXFwiLCAyKTtcXFxcbiAgICAgICAgaWYgKGF0dC5sZW5ndGggPT09IDMgJiYgYXR0WzFdID09PSAoXFxcXFxcXCJBXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICByZWNvcmQucHVzaChhdHRbMl0uc2xpY2UoMCwgYXR0WzJdLmxhc3RJbmRleE9mKFxcXFxcXFwiLlxcXFxcXFwiKSkpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIGNsaWNrRG93bmxvYWQoaXRlbSwgaW5mbywgTVlfSUQsIGkpIHtcXFxcbiAgICBsZXQgbG9hZGluZ1RlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6bG9hZGluZ1RlYW1cXFxcXFxcIiwgXFxcXFxcXCJbXVxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgIGxldCBFbGVtZW50SW5kZXggPSBsb2FkaW5nVGVhbS5pbmRleE9mKGkpO1xcXFxuICAgIGlmIChFbGVtZW50SW5kZXggPiAtMSkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjkuIvovb1cXFxcXFxcIjtcXFxcblxcXFxuICAgIGxvYWRpbmdUZWFtLnB1c2goaSk7XFxcXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpsb2FkaW5nVGVhbVxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShsb2FkaW5nVGVhbSkpO1xcXFxuICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLigJjigJhcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIuKAmeKAmVxcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbiAgICBsZXQgcmVzdWx0ID0gXFxcXFxcXCJ0b2FzdDovL+S4i+i9veWksei0pVxcXFxcXFwiO1xcXFxuICAgIHRyeSB7XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi5byA5aeL5LiL6L29OlxcXFxcXFwiICsgaXRlbS50aXRsZSk7XFxcXG4gICAgICAgIGxldCBkb3dubG9hZCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Eb3dubG9hZC5leGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlc3VsdCA9IGRvd25sb2FkKGl0ZW0sIGluZm8sIGksIE1ZX0lEKTtcXFxcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJxcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcInRvYXN0Oi8v5bey5LiL6L29XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI1xcXFxcXFwiICsgaVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgdGl0bGU6IGl0ZW0udGl0bGUsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI1xcXFxcXFwiICsgaVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxcXG4gICAgfSBmaW5hbGx5IHtcXFxcbiAgICAgICAgbG9hZGluZ1RlYW0uc3BsaWNlKEVsZW1lbnRJbmRleCwgMSk7XFxcXG4gICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6bG9hZGluZ1RlYW1cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkobG9hZGluZ1RlYW0pKTtcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIHJlc3VsdDtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gc2luZ2xlVmlldygpIHtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuWPjei9rOWIl+ihqFxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlLCBNWV9JRCkgPT4ge1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1JldmVyc2VcXFxcXFxcIiwgaXNSZXZlcnNlID09PSBcXFxcXFxcIjBcXFxcXFxcIiA/IFxcXFxcXFwiMVxcXFxcXFwiIDogXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICB9LCBpc1JldmVyc2UsIE1ZX0lEKSxcXFxcbiAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9pZD0zM252RHFiSEg3SFcmc2l6ZT00OCZmb3JtYXQ9Z2lmJnRva2VuPVxcXFxcXFwiLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uXzJcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5om56YeP5LiL6L29XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChNWV9JRCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGxvYWRpbmdUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmxvYWRpbmdUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGlmIChsb2FkaW5nVGVhbS5sZW5ndGggPiAwKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+i/mOacieS7u+WKoeayoeacieWujOaIkFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgaWYgKGdldEFwcFZlcnNpb24oKSA8IDI1OTQpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pyq5byA5pS+XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnZpZXdNb2RlXFxcXFxcXCIsIFxcXFxcXFwiMVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcblxcXFxuICAgICAgICB9LCBNWV9JRCksXFxcXG4gICAgICAgIHBpY191cmw6IFxcXFxcXFwiaHR0cHM6Ly9pbWcuaWNvbnM4LmNvbS8/Zm9ybWF0PWdpZiZpZD0wdWFmYU1OenhqODgmdG9rZW49XFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fMlxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgc2V0VHlwZSgpO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGV0IGxvYWRpbmdUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmxvYWRpbmdUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICBmb3IgKGxldCBpID0gMCwgaXRlbSA9IGNoYXB0ZXJMaXN0WzBdOyBpIDwgY2hhcHRlckxpc3QubGVuZ3RoOyBpdGVtID0gY2hhcHRlckxpc3RbKytpXSkge1xcXFxuICAgICAgICBsZXQgaXNfZG93bmxvYWQgPSByZWNvcmQuaW5jbHVkZXMoaXRlbS50aXRsZSk7XFxcXG4gICAgICAgIGlmIChpc19kb3dubG9hZCAmJiB0YWdGaWx0ZXIgIT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBjaGFwdGVyVGVhbS5wdXNoKGNvbUZ1bihpdGVtLkNJRCwgaXRlbSkpO1xcXFxuICAgICAgICB9IGVsc2UgaWYgKCFpc19kb3dubG9hZCAmJiB0YWdGaWx0ZXIgIT09IFxcXFxcXFwiMlxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBjaGFwdGVyVGVhbS5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbG9hZGluZ1RlYW0uaW5jbHVkZXMoaXRlbS5DSUQpID8gXFxcXFxcXCLigJjigJhcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIuKAmeKAmVxcXFxcXFwiIDogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZShjbGlja0Rvd25sb2FkLCBpdGVtLCBpbmZvLCBNWV9JRCwgaXRlbS5DSUQpLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI1xcXFxcXFwiICsgaXRlbS5DSURcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBkZWZfRG9WaV9TdHlsZVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG59XFxcXG5cXFxcbmZ1bmN0aW9uIGNsaWNrQ2hvb3NlKHRpdGxlLCBNWV9JRCwgaSkge1xcXFxuICAgIGxldCBpc1N0YXJ0ID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIpO1xcXFxuICAgIGlmIChpc1N0YXJ0ID09PSBcXFxcXFxcIjFcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjkuIvovb0uLi5cXFxcXFxcIjtcXFxcbiAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgbGV0IEVsZW1lbnRJbmRleCA9IGJhdGNoVGVhbS5pbmRleE9mKGkpO1xcXFxuICAgIGlmIChFbGVtZW50SW5kZXggPiAtMSkge1xcXFxuICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiB0aXRsZSxcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBiYXRjaFRlYW0uc3BsaWNlKEVsZW1lbnRJbmRleCwgMSk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJjigJhcXFxcXFxcIiArIHRpdGxlICsgXFxcXFxcXCLigJnigJlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBiYXRjaFRlYW0ucHVzaChpKTtcXFxcbiAgICB9XFxcXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoYmF0Y2hUZWFtKSk7XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxufVxcXFxuXFxcXG5mdW5jdGlvbiBiYXRjaFZpZXcoKSB7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLljZXpgInkuIvovb1cXFxcXFxcIixcXFxcbiAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9pZD1QSWljdkY2ZWJ6TW4mc2l6ZT00OCZmb3JtYXQ9Z2lmJnRva2VuPVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoTVlfSUQpID0+IHtcXFxcbiAgICAgICAgICAgIGlmIChnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmlzU3RhcnRcXFxcXFxcIikgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOaJuemHj+S4i+i9vVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjp2aWV3TW9kZVxcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICB9LCBNWV9JRCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGV0IHN0YXJ0ID0gQ29uZmlnLnZpZXdQYWdlU2l6ZSAqIE1hdGgubWF4KHBhZ2VOdW0gLSAxLCAwKTtcXFxcbiAgICBsZXQgZW5kID0gc3RhcnQgKyBjaGFwdGVyTGlzdC5sZW5ndGg7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLpgInmi6nlhajpg6hcXFxcXFxcIixcXFxcbiAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9mb3JtYXQ9Z2lmJmlkPTFIVmNITG9OenJpdCZ0b2tlbj1cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHN0YXJ0LCBlbmQsIE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIpID09PSBcXFxcXFxcIjFcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjkuIvovb3lk6Z+XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBjb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgY2hvb3NlVGVhbSA9IFRvb2wucmFuZ2Uoc3RhcnQsIGVuZCk7XFxcXG4gICAgICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBBcnJheS5mcm9tKG5ldyBTZXQoYmF0Y2hUZWFtLmNvbmNhdChjaG9vc2VUZWFtKSkpO1xcXFxuICAgICAgICAgICAgbGV0IGNvbXBsZXRlZCA9IEpTT04ucGFyc2UoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpjb21wbGV0ZWRcXFxcXFxcIiwgXFxcXFxcXCJbXVxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgYmF0Y2hUZWFtID0gYmF0Y2hUZWFtLmZpbHRlcigoaSkgPT4gIWNvbXBsZXRlZC5pbmNsdWRlcyhpKSk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShiYXRjaFRlYW0pKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIlxcXFxuICAgICAgICB9LCBzdGFydCwgZW5kLCBNWV9JRCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImljb25fc21hbGxfNFxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLlj5bmtojlhajpg6hcXFxcXFxcIixcXFxcbiAgICAgICAgcGljX3VybDogXFxcXFxcXCJodHRwczovL2ltZy5pY29uczguY29tLz9mb3JtYXQ9Z2lmJmlkPUh6RWpQcEkzTkw4RCZ0b2tlbj1cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHN0YXJ0LCBlbmQsIE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIpID09PSBcXFxcXFxcIjFcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjkuIvovb3lk6Z+XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICBjb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgY2hvb3NlVGVhbSA9IG5ldyBTZXQoVG9vbC5yYW5nZShzdGFydCwgZW5kKSk7XFxcXG4gICAgICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBiYXRjaFRlYW0gPSBiYXRjaFRlYW0uZmlsdGVyKHggPT4gIWNob29zZVRlYW0uaGFzKHgpKTtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG4gICAgICAgIH0sIHN0YXJ0LCBlbmQsIE1ZX0lEKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaWNvbl9zbWFsbF80XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuehruiupOmAieS4rVxcXFxcXFwiLFxcXFxuICAgICAgICBwaWNfdXJsOiBcXFxcXFxcImh0dHBzOi8vaW1nLmljb25zOC5jb20vP2Zvcm1hdD1naWYmaWQ9dE1ydnRjNlQ5aFZiJnRva2VuPVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoTVlfSUQpID0+IHtcXFxcbiAgICAgICAgICAgIGlmIChnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmlzU3RhcnRcXFxcXFxcIiwgXFxcXFxcXCItMVxcXFxcXFwiKSAhPT0gXFxcXFxcXCItMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjkuIvovb3lk6Z+XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBsZXQgYmF0Y2hUZWFtID0gSlNPTi5wYXJzZShnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBcXFxcXFxcIltdXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZXR1cm4gYmF0Y2hUZWFtLmxlbmd0aCA9PT0gMCA/IFxcXFxcXFwidG9hc3Q6Ly/kvaDov5jku4DkuYjpg73msqHmnInpgIlcXFxcXFxcIiA6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0JhdGNoLnZpZXcjbm9SZWZyZXNoIyNub0hpc3RvcnkjI25vUmVjb3JkSGlzdG9yeSNcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgTVlfSUQpLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgbmV3V2luZG93OiB0cnVlLFxcXFxuICAgICAgICAgICAgd2luZG93SWQ6IE1ZX0lEICsgXFxcXFxcXCIvL+aJuemHj+S4i+i9vVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgTVlfSUQ6IE1ZX0lELFxcXFxuICAgICAgICAgICAgY2hhcHRlckxpc3Q6IGJhY2t1cENoYXB0ZXJMaXN0LFxcXFxuICAgICAgICAgICAgaW5mbzogaW5mb1xcXFxuICAgICAgICB9LFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJpY29uX3NtYWxsXzRcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIHNldFR5cGUoKTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICBsZXQgY29tcGxldGVkID0gW107XFxcXG4gICAgZm9yIChsZXQgaSA9IDAsIGl0ZW0gPSBjaGFwdGVyTGlzdFswXTsgaSA8IGNoYXB0ZXJMaXN0Lmxlbmd0aDsgaXRlbSA9IGNoYXB0ZXJMaXN0WysraV0pIHtcXFxcbiAgICAgICAgbGV0IGlzX2Rvd25sb2FkID0gcmVjb3JkLmluY2x1ZGVzKGl0ZW0udGl0bGUpO1xcXFxuXFxcXG4gICAgICAgIGlmIChpc19kb3dubG9hZCkge1xcXFxuICAgICAgICAgICAgY29tcGxldGVkLnB1c2goaXRlbS5DSUQpO1xcXFxuICAgICAgICAgICAgaWYodGFnRmlsdGVyICE9PSBcXFxcXFxcIjFcXFxcXFxcIil7XFxcXG4gICAgICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaChjb21GdW4oaXRlbS5DSUQsIGl0ZW0pKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBlbHNlIGlmICghaXNfZG93bmxvYWQgJiYgdGFnRmlsdGVyICE9PSBcXFxcXFxcIjJcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgY2hhcHRlclRlYW0ucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGJhdGNoVGVhbS5pbmNsdWRlcyhpdGVtLkNJRCkgPyBcXFxcXFxcIuKAmOKAmFxcXFxcXFwiICsgaXRlbS50aXRsZSArIFxcXFxcXFwi4oCZ4oCZXFxcXFxcXCIgOiBpdGVtLnRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKGNsaWNrQ2hvb3NlLCBpdGVtLnRpdGxlLCBNWV9JRCwgaXRlbS5DSUQpLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI1xcXFxcXFwiICsgaXRlbS5DSURcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBkZWZfRG9WaV9TdHlsZVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpjb21wbGV0ZWRcXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoY29tcGxldGVkKSk7XFxcXG59XFxcXG5zd2l0Y2ggKHZpZXdNb2RlKSB7XFxcXG4gICAgY2FzZSBcXFxcXFxcIjBcXFxcXFxcIjpcXFxcbiAgICAgICAgc2luZ2xlVmlldygpO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwiMVxcXFxcXFwiOlxcXFxuICAgICAgICBiYXRjaFZpZXcoKTtcXFxcbiAgICAgICAgYnJlYWs7XFxcXG59XFxcXG5pZiAoaXNSZXZlcnNlID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGNoYXB0ZXJUZWFtLnJldmVyc2UoKTtcXFxcbn1cXFxcbmxheW91dC5wdXNoLmFwcGx5KGxheW91dCwgY2hhcHRlclRlYW0pO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu5om56YeP5LiL6L295ZmoXFxcIixcXFwicGF0aFxcXCI6XFxcIkJhdGNoLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQge1xcXFxuICAgIGNoYXB0ZXJMaXN0LFxcXFxuICAgIGluZm8sXFxcXG4gICAgTVlfSURcXFxcbn0gPSBNWV9QQVJBTVM7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLkuIvovb3lmah8XFxcXFxcXCIraW5mby5ib29rTmFtZSk7XFxcXG5hZGRMaXN0ZW5lcihcXFxcXFxcIm9uQ2xvc2VcXFxcXFxcIiwgJC50b1N0cmluZygoTVlfSUQpID0+IHtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6aXNTdGFydFxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIik7XFxcXG4gICAgcmVmcmVzaFBhZ2UoKTtcXFxcbn0sIE1ZX0lEKSk7XFxcXG5cXFxcbmxldCBpc1N0YXJ0ID0gZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbmxldCBzdGF0dXMgPSBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5cXFxcbmxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbmlmKHR5cGVvZiBjaGFwdGVyTGlzdCA9PT0gXFxcXFxcXCJzdHJpbmdcXFxcXFxcIil7XFxcXG4gICAgY2hhcHRlckxpc3QgPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIrY2hhcHRlckxpc3QpfHxcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxufVxcXFxubGV0IGNoYXB0ZXJUZWFtID0gYmF0Y2hUZWFtLm1hcCh2ID0+IHtcXFxcbiAgICBsZXQgY2hhcHRlckl0ZW0gPSBjaGFwdGVyTGlzdFt2XTtcXFxcbiAgICBjaGFwdGVySXRlbS5DSUQgPSB2O1xcXFxuICAgIHJldHVybiBjaGFwdGVySXRlbTtcXFxcbn0pO1xcXFxuaWYgKGlzU3RhcnQgPT09IFxcXFxcXFwiMFxcXFxcXFwiKSB7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLlvIDlp4vkuIvovb1bXFxcXFxcXCIgKyBjaGFwdGVyVGVhbS5sZW5ndGggKyBcXFxcXFxcIl1cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkgPT4ge1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIsIFxcXFxcXFwiMVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIGxldCBkb3dubG9hZCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9CYXRjaFN0YXRpc3RpY3MuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBpZihpbmZvLnR5cGU9PT1cXFxcXFxcImNvbWljXFxcXFxcXCImJmluZm8uY29taWNTY2hlbWU9PT1cXFxcXFxcIjFcXFxcXFxcIil7XFxcXG4gICAgICAgICAgICAgICAgZG93bmxvYWQ9ZG93bmxvYWQuYjtcXFxcbiAgICAgICAgICAgIH1lbHNle1xcXFxuICAgICAgICAgICAgICAgIGRvd25sb2FkPWRvd25sb2FkLmE7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICByZXR1cm4gZG93bmxvYWQoY2hhcHRlclRlYW0sIGluZm8sIE1ZX0lEKSB8fCBcXFxcXFxcInRvYXN0Oi8v5LiL6L296ZSZ6K+vXFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzlvIDlp4vkuIvovb1cXFxcXFxcIlxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLku7vliqHliJfooajvvJpcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCIsXFxcXG4gICAgfSk7XFxcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjaGFwdGVyVGVhbSkge1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogaXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG5cXFxcbn0gZWxzZSB7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLkuIvovb3ov5vluqY6MC9cXFxcXFxcIitjaGFwdGVyVGVhbS5sZW5ndGgsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwi4oCc4oCc4oCd4oCd4paH4paH4paH4paH4paH4paH4paH4paH4paH4paHXFxcXFxcXCIuZm9udGNvbG9yKFxcXFxcXFwiI2U1ZTFlNFxcXFxcXFwiKStcXFxcXFxcIiAwJVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L296L+b5bqmXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5ZCO5Y+w5LiL6L29XFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJmdW5jOi8vYmFja2dyb3VuZFxcXFxcXFwiLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogW1xcXFxcXFwiW+WPlua2iOS4i+i9vV1cXFxcXFxcIiwgXFxcXFxcXCJb5q2j5Zyo5YGc5q2iLi4uXVxcXFxcXFwiLCBcXFxcXFxcIlvov5Tlm55dXFxcXFxcXCIsIFxcXFxcXFwiW+WkhOeQhuWksei0pV1cXFxcXFxcIiwgXFxcXFxcXCJb6YeN5paw5byA5aeLXVxcXFxcXFwiXVtzdGF0dXNdLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoTVlfSUQpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBzdGF0dXMgPSBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBpZiAoc3RhdHVzID09PSBcXFxcXFxcIjBcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiW+ato+WcqOWBnOatoi4uLl1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjlj5bmtojkuIvovb3ku7vliqFcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoc3RhdHVzID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5q2j5Zyo5pqC5YGcLi4uXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9IGVsc2UgaWYgKHN0YXR1cyA9PT0gXFxcXFxcXCIyXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICBiYWNrKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7LpgIDlh7rkuIvovb3lmahcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoW1xcXFxcXFwiM1xcXFxcXFwiLCBcXFxcXFxcIjRcXFxcXFxcIl0uaW5jbHVkZXMoc3RhdHVzKSkge1xcXFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjppc1N0YXJ0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgY2xlYXJNeVZhcihNWV9JRCArIFxcXFxcXFwiOmxvZ1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6YeN5paw54K55Ye75LiL6L29XFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSwgTVlfSUQpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIjxzdHJvbmc+5LiL6L295pel5b+XPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzml6Xlv5dcXFxcXFxcIlxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTpcXFxcXFxcIuKAnOKAnOKAneKAnSQ+XFxcXFxcXCIrXFxcXFxcXCLlvIDlp4vkuIvovb0uLi4uLi5cXFxcXFxcIi5mb250Y29sb3IoXFxcXFxcXCIjMDBmZjAwXFxcXFxcXCIpLFxcXFxuICAgICAgICB1cmw6XFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCIjbG9nIzBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGxpbmVWaXNpYmxlOmZhbHNlXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcbn1cXFxcblxcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2ZnLuaJuemHj+S4i+i9vee7n+iuoVxcXCIsXFxcInBhdGhcXFwiOlxcXCJCYXRjaFN0YXRpc3RpY3MuanNcXFwiLFxcXCJydWxlXFxcIjpcXFwiY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuXFxcXG4kLmV4cG9ydHMuYSA9IGZ1bmN0aW9uKGNoYXB0ZXJUZWFtLCBpbmZvLCBNWV9JRCkge1xcXFxuICAgIGlmIChjaGFwdGVyVGVhbS5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/nqbrnmoTkuIvovb3pmJ/liJdcXFxcXFxcIjtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICB2YXIgY291bnQgPSAwO1xcXFxuICAgIHZhciB0YXNrQ291bnQgPSBjaGFwdGVyVGVhbS5sZW5ndGg7XFxcXG4gICAgdmFyIHN1Y2Nlc3NDSUQgPSBbXTtcXFxcbiAgICB2YXIgZmFpbE5hbWUgPSBbXTtcXFxcbiAgICB2YXIgbG9nQ291bnQgPSAxO1xcXFxuICAgIHZhciB0YXNrVGVhbSA9IGNoYXB0ZXJUZWFtLm1hcChjaGFwdGVySXRlbSA9PiAoe1xcXFxuICAgICAgICBmdW5jOiB0YXNrLFxcXFxuICAgICAgICBpZDogY2hhcHRlckl0ZW0udGl0bGUsXFxcXG4gICAgICAgIHBhcmFtOiB7XFxcXG4gICAgICAgICAgICBjaGFwdGVySXRlbTogY2hhcHRlckl0ZW0sXFxcXG4gICAgICAgICAgICBpbmZvOiBpbmZvLFxcXFxuICAgICAgICAgICAgTVlfSUQ6IE1ZX0lEXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSk7XFxcXG4gICAgbGV0IGxvZ051bSA9IENvbmZpZy5sb2dOdW07XFxcXG5cXFxcblxcXFxuICAgIGZ1bmN0aW9uIHB1dExvZyh0ZXh0KSB7XFxcXG4gICAgICAgIGxvZyh0ZXh0KTtcXFxcbiAgICAgICAgaWYgKGxvZ0NvdW50ID49IGxvZ051bSkge1xcXFxuICAgICAgICAgICAgZGVsZXRlSXRlbShNWV9JRCArIFxcXFxcXFwiI2xvZyNcXFxcXFxcIiArIChsb2dDb3VudCAtIDEwKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgYWRkSXRlbUFmdGVyKE1ZX0lEICsgXFxcXFxcXCJ8fOaXpeW/l1xcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiJD5cXFxcXFxcIiArIHRleHQsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI2xvZyNcXFxcXFxcIiArIGxvZ0NvdW50XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsb2dDb3VudCsrO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGZ1bmN0aW9uIHRhc2sodGFza1BhcmFtKSB7XFxcXG4gICAgICAgIGxldCByZXN1bHQgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQmF0Y2guZXhlLmpzXFxcXFxcXCIpKHRhc2tQYXJhbSk7XFxcXG4gICAgICAgIHJldHVybiByZXN1bHQ7XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIocGVyY2gsIGlkLCBlcnJvciwgQ0lEKSB7XFxcXG4gICAgICAgIGNvdW50Kys7XFxcXG4gICAgICAgIGxldCBpc1N1Y2Nlc3MgPSBmYWxzZTtcXFxcbiAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcXFxcbiAgICAgICAgICAgIGZhaWxOYW1lLnB1c2goaWQpO1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiW2xpc3RlbmVyXeS4i+i9veWksei0pe+8mlxcXFxcXFwiICsgaWQgKyBcXFxcXFxcIjxFUlJPUkAgXFxcXFxcXCIgKyBlcnJvciArIFxcXFxcXFwiPlxcXFxcXFwiKTtcXFxcbiAgICAgICAgfSBlbHNlIGlmIChDSUQgPj0gMCkge1xcXFxuICAgICAgICAgICAgc3VjY2Vzc0NJRC5wdXNoKENJRCk7XFxcXG4gICAgICAgICAgICBsZXQgcmF0aW8gPSAoY291bnQgLyB0YXNrQ291bnQpLnRvRml4ZWQoNCk7XFxcXG4gICAgICAgICAgICBsZXQgc3RyaXBDb3VudCA9IE1hdGguY2VpbChyYXRpbyAqIDEwKTtcXFxcbiAgICAgICAgICAgIGlzU3VjY2VzcyA9IHRydWU7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLkuIvovb3ov5vluqbvvJpcXFxcXFxcIiArIHN1Y2Nlc3NDSUQubGVuZ3RoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyB0YXNrQ291bnQsXFxcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi4paHXFxcXFxcXCIucmVwZWF0KHN0cmlwQ291bnQpLmZvbnRjb2xvcihcXFxcXFxcIiNmZmFjMmRcXFxcXFxcIikgKyBcXFxcXFxcIuKWh1xcXFxcXFwiLnJlcGVhdCgxMCAtIHN0cmlwQ291bnQpLmZvbnRjb2xvcihcXFxcXFxcIiNlNWUxZTRcXFxcXFxcIikgKyBcXFxcXFxcIiBcXFxcXFxcIiArIFN0cmluZygocmF0aW8gKiAxMDApKS5zbGljZSgwLCA1KSArIFxcXFxcXFwiJVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3ov5vluqZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiW2xpc3RlbmVyXeW3suWujOaIkOS4i+i9ve+8mlxcXFxcXFwiICsgaWQpO1xcXFxuICAgICAgICB9IGVsc2UgaWYgKENJRCA9PT0gLTEpIHtcXFxcbiAgICAgICAgICAgIGZhaWxOYW1lLnB1c2goaWQpO1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiW2xpc3RlbmVyXeW3suWBnOatou+8mlxcXFxcXFwiICsgaWQpO1xcXFxuICAgICAgICAgICAgY291bnQgPSB0YXNrQ291bnQ7XFxcXG4gICAgICAgIH1cXFxcblxcXFxuICAgICAgICBpZiAodGFza0NvdW50ICE9PSBjb3VudCkgcmV0dXJuO1xcXFxuICAgICAgICBpZiAoc3VjY2Vzc0NJRC5sZW5ndGggPT09IHRhc2tDb3VudCkge1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi4paHXFxcXFxcXCIucmVwZWF0KDEwKS5mb250Y29sb3IoXFxcXFxcXCIjMDBmZjAwXFxcXFxcXCIpICsgXFxcXFxcXCIgMTAwJVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3ov5vluqZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IGZhaWxUZWFtID0gYmF0Y2hUZWFtLmZpbHRlcih2ID0+ICFzdWNjZXNzQ0lELmluY2x1ZGVzKHYpKTtcXFxcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpiYXRjaFRlYW1cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoZmFpbFRlYW0pKTtcXFxcbiAgICAgICAgaWYgKGZhaWxUZWFtLmxlbmd0aCA+IDAgJiYgc3RhdHVzICE9PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCIzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwi5LiL6L295aSx6LSlOltcXFxcXFxcIiArIGZhaWxOYW1lLmpvaW4oXFxcXFxcXCJd77yMW1xcXFxcXFwiKSArIFxcXFxcXFwiXeOAglxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIlvlpITnkIblpLHotKVdXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCJ8fOS4i+i9veaOp+WItlxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoZmFpbFRlYW0ubGVuZ3RoID4gMCAmJiBzdGF0dXMgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjRcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBwdXRMb2coXFxcXFxcXCJbbGlzdGVuZXJdI+W3suWBnOatouaJgOacieS7u+WKoe+8jOS9huW3suaciei/m+W6puS4jeS8mua2iOWksSNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCJb6YeN5paw5byA5aeLXVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiYnJlYWtcXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIuS4i+i9veS7u+WKoVtcXFxcXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIl3lt7Llhajpg6jmiJDlip/lrozmiJBcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCJb6L+U5ZueXVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi5LiL6L295Lu75YqhW1xcXFxcXFwiICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiXeW3suWujOaIkFxcXFxcXFwiKTtcXFxcbiAgICB9XFxcXG4gICAgbGV0IHRhc2tUZWFtQ2h1bmsgPSBbXTtcXFxcbiAgICBpZiAoQ29uZmlnLnRocmVhZE51bSA+IDApIHtcXFxcbiAgICAgICAgdGFza1RlYW1DaHVuayA9IFRvb2wuY2h1bmsodGFza1RlYW0sIENvbmZpZy50aHJlYWROdW0pO1xcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIHRhc2tUZWFtQ2h1bmsgPSBbdGFza1RlYW1dO1xcXFxuICAgIH1cXFxcbiAgICBmb3IgKGxldCB0YXNrTGlzdCBvZiB0YXNrVGVhbUNodW5rKSB7XFxcXG4gICAgICAgIGJlKHRhc2tMaXN0LCB7XFxcXG4gICAgICAgICAgICBmdW5jOiBsaXN0ZW5lclxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgaWYgKHN0YXR1cyA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgIGxldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIC8vbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGxldCBmYWlsVGVhbSA9IGJhdGNoVGVhbS5maWx0ZXIodiA9PiAhc3VjY2Vzc0NJRC5pbmNsdWRlcyh2KSk7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOmJhdGNoVGVhbVxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShmYWlsVGVhbSkpO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCI0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiW2xpc3RlbmVyXSPlt7LlgZzmraLmiYDmnInku7vliqHvvIzkvYblt7LmnInov5vluqbkuI3kvJrmtojlpLEjXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiW+mHjeaWsOW8gOWni11cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L295o6n5Yi2XFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgfVxcXFxuXFxcXG4gICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxufTtcXFxcblxcXFxuJC5leHBvcnRzLmIgPSBmdW5jdGlvbiBjb21pYyhjaGFwdGVyVGVhbSwgaW5mbywgTVlfSUQpIHtcXFxcbiAgICBpZiAoY2hhcHRlclRlYW0ubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v56m655qE5LiL6L296Zif5YiXXFxcXFxcXCI7XFxcXG4gICAgfVxcXFxuICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcblxcXFxuICAgIGxldCBsb2dOdW0gPSBDb25maWcubG9nTnVtO1xcXFxuICAgIGxldCBsb2dDb3VudD0wO1xcXFxuICAgIGZ1bmN0aW9uIHB1dExvZyh0ZXh0KSB7XFxcXG4gICAgICAgIGxvZyh0ZXh0KTtcXFxcbiAgICAgICAgaWYgKGxvZ0NvdW50ID49IGxvZ051bSkge1xcXFxuICAgICAgICAgICAgZGVsZXRlSXRlbShNWV9JRCArIFxcXFxcXFwiI2xvZyNcXFxcXFxcIiArIChsb2dDb3VudCAtIDEwKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgYWRkSXRlbUFmdGVyKE1ZX0lEICsgXFxcXFxcXCJ8fOaXpeW/l1xcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiJD5cXFxcXFxcIiArIHRleHQsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlLFxcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwiI2xvZyNcXFxcXFxcIiArIGxvZ0NvdW50XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsb2dDb3VudCsrO1xcXFxuICAgIH1cXFxcblxcXFxuICAgIGZ1bmN0aW9uIHRhc2sodGFza1BhcmFtKSB7XFxcXG4gICAgICAgIGNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XFxcXG4gICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBwaWMgPSBUb29sLmhpa2VyUGljKHRhc2tQYXJhbS51cmwpO1xcXFxuICAgICAgICAgICAgICAgIFRvb2wucGljRG93bmxvYWQocGljWzBdLCB0YXNrUGFyYW0uY2hhcHRlclBhdGggKyAodGFza1BhcmFtLmkgKyAxKSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiLCBwaWNbMV0sIHRhc2tQYXJhbS5kZWNvZGUpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChnZXRNeVZhcih0YXNrUGFyYW0uTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAtMTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgZXJyb3JOdW0gPSAwO1xcXFxuICAgICAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgIGlmIChpID09PSA5KSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRocm93IGU7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiB0YXNrUGFyYW0uQ0lEO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgY291bnQgPSAwO1xcXFxuICAgIGxldCB0b3RhbENvdW50ID0gMDtcXFxcbiAgICBsZXQgc3VjY2Vzc0NJRCA9IFtdO1xcXFxuXFxcXG4gICAgZnVuY3Rpb24gbGlzdGVuZXIocGFyYW0sIGlkLCBlcnJvciwgcmVzdWx0KSB7XFxcXG4gICAgICAgIHRyeXtcXFxcbiAgICAgICAgdG90YWxDb3VudCsrO1xcXFxuICAgICAgICBcXFxcbiAgICAgICAgaWYgKGVycm9yICE9IG51bGwpIHtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIltsaXN0ZW5lcl3kuIvovb3lpLHotKXvvJpcXFxcXFxcIiArIGlkICsgXFxcXFxcXCI8RVJST1JAIFxcXFxcXFwiICsgZXJyb3IgKyBcXFxcXFxcIj5cXFxcXFxcIik7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAocmVzdWx0ID09PSAtMSkge1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiW2xpc3RlbmVyXeW3suWBnOatou+8mlxcXFxcXFwiICsgaWQpO1xcXFxuICAgICAgICAgICAgdG90YWxDb3VudCA9IHBhcmFtLnBpdkNvdW50O1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgY291bnQrKztcXFxcbiAgICAgICAgICAgIGxldCByYXRpbyA9ICgoY291bnQgLyBwYXJhbS5waXZDb3VudCkpLnRvRml4ZWQoNCk7XFxcXG4gICAgICAgICAgICBsZXQgc3RyaXBDb3VudCA9IE1hdGguY2VpbChyYXRpbyAqIDEwKTtcXFxcbiAgICAgICAgICAgIGlmIChwYXJhbS5waXZDb3VudD09PXRvdGFsQ291bnQmJnRvdGFsQ291bnQgPT09IGNvdW50KXtcXFxcbiAgICAgICAgICAgICAgICBzdWNjZXNzQ0lELnB1c2gocGFyYW0uQ0lEKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuS4i+i9vei/m+W6pu+8mlxcXFxcXFwiICsgKHN1Y2Nlc3NDSUQubGVuZ3RoKSArIFxcXFxcXFwiL1xcXFxcXFwiICsgcGFyYW0udG90YWwsXFxcXG4gICAgICAgICAgICAgICAgZGVzYzogXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi4paHXFxcXFxcXCIucmVwZWF0KHN0cmlwQ291bnQpLmZvbnRjb2xvcihcXFxcXFxcIiNmZmFjMmRcXFxcXFxcIikgKyBcXFxcXFxcIuKWh1xcXFxcXFwiLnJlcGVhdCgxMCAtIHN0cmlwQ291bnQpLmZvbnRjb2xvcihcXFxcXFxcIiNlNWUxZTRcXFxcXFxcIikgKyBcXFxcXFxcIiBcXFxcXFxcIiArIFN0cmluZygocmF0aW8gKiAxMDApKS5zbGljZSgwLCA1KSArIFxcXFxcXFwiJVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3ov5vluqZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgLy9wdXRMb2coXFxcXFxcXCJbbGlzdGVuZXJd5bey5a6M5oiQ5LiL6L2977yaXFxcXFxcXCIgKyBpZCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgaWYgKHRvdGFsQ291bnQgIT09IHBhcmFtLnBpdkNvdW50KSByZXR1cm47XFxcXG4gICAgICAgIGlmICh0b3RhbENvdW50ID09PSBjb3VudCl7XFxcXG4gICAgICAgICAgICBGaWxlLnJlbmFtZUZpbGUocGFyYW0uY2hhcHRlclBhdGgsIHBhcmFtLkNJRCArIFxcXFxcXFwiJEEkXFxcXFxcXCIgKyBUb29sLnRleHRTaGllbGQocGFyYW0udGl0bGUpKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB0b3RhbENvdW50ID0gY291bnQgPSAwO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJicmVha1xcXFxcXFwiO1xcXFxuICAgICAgICB9Y2F0Y2goZSl7XFxcXG4gICAgICAgICAgICBsb2coZS50b1N0cmluZygpKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICBsZXQgdGFza1RlYW0gPSBbXTtcXFxcbiAgICBsZXQgbWFpblBhdGggPSBDb25maWcuY29taWNQYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpbmZvLnJ1bGVOYW1lICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBUb29sLnRleHRTaGllbGQoaW5mby5ib29rTmFtZSkgKyBcXFxcXFxcIi9cXFxcXFxcIjtcXFxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBsZXQgYm9va1RvcFBpYyA9IFRvb2wuaGlrZXJQaWMoaW5mby5ib29rVG9wUGljKTtcXFxcbiAgICAgICAgICAgIFRvb2wucGljRG93bmxvYWQoYm9va1RvcFBpY1swXSwgbWFpblBhdGggKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCIuanBnXFxcXFxcXCIsIGJvb2tUb3BQaWNbMV0sIGluZm8uZGVjb2RlKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKFxcXFxcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcXFxcXCIgKyBlLm1lc3NhZ2UpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgZm9yIChsZXQgayA9IDA7IGsgPCBjaGFwdGVyVGVhbS5sZW5ndGg7IGsrKykge1xcXFxuICAgICAgICBsZXQgaXRlbSA9IGNoYXB0ZXJUZWFtW2tdO1xcXFxuICAgICAgICBsZXQgb3JkZXIgPSBrO1xcXFxuICAgICAgICBsZXQgY2hhcHRlclBhdGggPSBtYWluUGF0aCArIGl0ZW0uQ0lEICsgXFxcXFxcXCIkQiRcXFxcXFxcIiArIFRvb2wudGV4dFNoaWVsZChpdGVtLnRpdGxlKSArIFxcXFxcXFwiL1xcXFxcXFwiO1xcXFxuICAgICAgICBsZXQgcGljTGlzdCA9IFtdO1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IGdldFBpY0xpc3QgPSBuZXcgRnVuY3Rpb24oXFxcXFxcXCJpbnB1dFxcXFxcXFwiLCBcXFxcXFxcInVybFxcXFxcXFwiLCBcXFxcXFxcInJldHVyblxcXFxcXFwiICsgaW5mby5wYXJzZUNvZGUpO1xcXFxuICAgICAgICAgICAgcGljTGlzdCA9IGdldFBpY0xpc3QoaXRlbS51cmwsIGl0ZW0udXJsKTtcXFxcbiAgICAgICAgICAgIGlmICh0eXBlb2YgcGljTGlzdCA9PT0gXFxcXFxcXCJzdHJpbmdcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIHBpY0xpc3QgPSBwaWNMaXN0LnJlcGxhY2UoXFxcXFxcXCJwaWNzOi8vXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpLnNwbGl0KFxcXFxcXFwiJiZcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIHB1dExvZyhcXFxcXFxcIjzmvKvnlLvlm77niYfop6PmnpDplJnor68+IFxcXFxcXFwiICsgZS5tZXNzYWdlKTtcXFxcbiAgICAgICAgICAgIGNvbnRpbnVlO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChwaWNMaXN0Lmxlbmd0aCA9PT0gMCkge1xcXFxuICAgICAgICAgICAgcHV0TG9nKFxcXFxcXFwiPOa8q+eUu+WbvueJh+ino+aekOmUmeivr++8muWbvueJh+mTvuaOpei/lOWbnuS4uuepuj5cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBjb250aW51ZTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICB2YXIgdGFza1RlYW0gPSBwaWNMaXN0Lm1hcCgodXJsLCBpKSA9PiAoe1xcXFxuICAgICAgICAgICAgZnVuYzogdGFzayxcXFxcbiAgICAgICAgICAgIGlkOiBpLFxcXFxuICAgICAgICAgICAgcGFyYW06IHtcXFxcbiAgICAgICAgICAgICAgICB1cmw6IHVybCxcXFxcbiAgICAgICAgICAgICAgICBpOiBpLFxcXFxuICAgICAgICAgICAgICAgIGNoYXB0ZXJQYXRoOiBjaGFwdGVyUGF0aCxcXFxcbiAgICAgICAgICAgICAgICBNWV9JRDogTVlfSUQsXFxcXG4gICAgICAgICAgICAgICAgZGVjb2RlOiBpbmZvLmRlY29kZVxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KSk7XFxcXG4gICAgICAgIGJlKHRhc2tUZWFtLCB7XFxcXG4gICAgICAgICAgICBmdW5jOiBsaXN0ZW5lcixcXFxcbiAgICAgICAgICAgIHBhcmFtOiB7XFxcXG4gICAgICAgICAgICAgICAgcGl2Q291bnQ6IHBpY0xpc3QubGVuZ3RoLFxcXFxuICAgICAgICAgICAgICAgIHRvdGFsOiBjaGFwdGVyVGVhbS5sZW5ndGgsXFxcXG4gICAgICAgICAgICAgICAgb3JkZXI6IG9yZGVyLFxcXFxuICAgICAgICAgICAgICAgIENJRDogaXRlbS5DSUQsXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6aXRlbS50aXRsZSxcXFxcbiAgICAgICAgICAgICAgICBjaGFwdGVyUGF0aDpjaGFwdGVyUGF0aFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgaWYgKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgXFxcXG4gICAgbGV0IHN0YXR1cyA9IGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6c3RhdHVzXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbiAgICBqYXZhLmxhbmcuVGhyZWFkLnNsZWVwKDQwKTtcXFxcbiAgICAvL2xldCBiYXRjaFRlYW0gPSBKU09OLnBhcnNlKGdldE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIFxcXFxcXFwiW11cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICBsZXQgZmFpbFRlYW0gPSBjaGFwdGVyVGVhbS5maWx0ZXIodiA9PiAhc3VjY2Vzc0NJRC5pbmNsdWRlcyh2LkNJRCkpO1xcXFxuICAgIGxldCBmYWlsTmFtZSA9IGZhaWxUZWFtLm1hcChpdGVtPT5pdGVtLnRpdGxlKTtcXFxcbiAgICBsZXQgYmF0Y2hUZWFtID0gZmFpbFRlYW0ubWFwKGl0ZW09Pml0ZW0uQ0lEKTtcXFxcbiAgICBcXFxcbiAgICBpZiAoZmFpbFRlYW0ubGVuZ3RoID4gMCAmJiBzdGF0dXMgIT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcXFxuICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjNcXFxcXFxcIik7XFxcXG4gICAgICAgIHB1dExvZyhcXFxcXFxcIuS4i+i9veWksei0pTpbXFxcXFxcXCIgKyBmYWlsTmFtZS5qb2luKFxcXFxcXFwiXe+8jFtcXFxcXFxcIikgKyBcXFxcXFxcIl3jgIJcXFxcXFxcIik7XFxcXG4gICAgICAgIHVwZGF0ZUl0ZW0oe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwiW+WkhOeQhuWksei0pV1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IE1ZX0lEICsgXFxcXFxcXCJ8fOS4i+i9veaOp+WItlxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH0gZWxzZSBpZiAoZmFpbFRlYW0ubGVuZ3RoID4gMCAmJiBzdGF0dXMgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgIHB1dE15VmFyKE1ZX0lEICsgXFxcXFxcXCI6YmF0Y2hUZWFtXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJhdGNoVGVhbSkpO1xcXFxuICAgICAgICBwdXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIjRcXFxcXFxcIik7XFxcXG4gICAgICAgIHB1dExvZyhcXFxcXFxcIltsaXN0ZW5lcl0j5bey5YGc5q2i5omA5pyJ5Lu75Yqh77yM5L2G5bey5pyJ6L+b5bqm5LiN5Lya5raI5aSxI1xcXFxcXFwiKTtcXFxcbiAgICAgICAgdXBkYXRlSXRlbSh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCJb6YeN5paw5byA5aeLXVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBpZDogTVlfSUQgKyBcXFxcXFxcInx85LiL6L295o6n5Yi2XFxcXFxcXCJcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfSBlbHNlIHtcXFxcbiAgICAgICAgcHV0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCIyXFxcXFxcXCIpO1xcXFxuICAgICAgICBwdXRMb2coXFxcXFxcXCLkuIvovb3ku7vliqFbXFxcXFxcXCIgKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCJd5bey5YWo6YOo5oiQ5Yqf5a6M5oiQXFxcXFxcXCIpO1xcXFxuICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIlvov5Tlm55dXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGlkOiBNWV9JRCArIFxcXFxcXFwifHzkuIvovb3mjqfliLZcXFxcXFxcIlxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNmZy7mibnph4/kuLvnqIvluo9cXFwiLFxcXCJwYXRoXFxcIjpcXFwiQmF0Y2guZXhlLmpzXFxcIixcXFwicnVsZVxcXCI6XFxcImNvbnN0IE1pYW4gPSAkLnJlcXVpcmUoXFxcXFxcXCJtYWluRG93bmxvYWRcXFxcXFxcIik7XFxcXG5mdW5jdGlvbiBjb21pYyh0YXNrUGFyYW0pIHtcXFxcbiAgICBsZXQge1xcXFxuICAgICAgICBjaGFwdGVySXRlbSxcXFxcbiAgICAgICAgaW5mbyxcXFxcbiAgICAgICAgTVlfSUQsXFxcXG4gICAgfSA9IHRhc2tQYXJhbTtcXFxcbiAgICByZXR1cm4gTWlhbi5jb21pYyhjaGFwdGVySXRlbSwgaW5mbywgY2hhcHRlckl0ZW0uQ0lELCBNWV9JRCwgdHJ1ZSl8fGNoYXB0ZXJJdGVtLkNJRDtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gbm92ZWwodGFza1BhcmFtKSB7XFxcXG4gICAgbGV0IHtcXFxcbiAgICAgICAgY2hhcHRlckl0ZW0sXFxcXG4gICAgICAgIGluZm8sXFxcXG4gICAgICAgIE1ZX0lELFxcXFxuICAgIH0gPSB0YXNrUGFyYW07XFxcXG4gICAgcmV0dXJuIE1pYW4ubm92ZWwoY2hhcHRlckl0ZW0sIGluZm8sIGNoYXB0ZXJJdGVtLkNJRCxNWV9JRCwgdHJ1ZSl8fGNoYXB0ZXJJdGVtLkNJRDtcXFxcbiAgICAvL0ZpbGUucmVuYW1lRmlsZShjaGFwdGVyUGF0aCwgY2hhcHRlckl0ZW0uQ0lEICsgXFxcXFxcXCIkQSRcXFxcXFxcIiArIGNoYXB0ZXJJdGVtLnRpdGxlKTtcXFxcbn1cXFxcbnZhciAkZXhlID0ge1xcXFxuICAgIGNvbWljOiBjb21pYyxcXFxcbiAgICBub3ZlbDogbm92ZWxcXFxcbn07XFxcXG4kLmV4cG9ydHMgPSBmdW5jdGlvbih0YXNrUGFyYW0pIHtcXFxcbiAgICByZXR1cm4gJGV4ZVt0YXNrUGFyYW0uaW5mby50eXBlXSh0YXNrUGFyYW0pO1xcXFxufTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjZmcu5pmu6YCa5Li756iL5bqPXFxcIixcXFwicGF0aFxcXCI6XFxcIkRvd25sb2FkLmV4ZS5qc1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJjb25zdCBNaWFuID0gJC5yZXF1aXJlKFxcXFxcXFwibWFpbkRvd25sb2FkXFxcXFxcXCIpO1xcXFxuZnVuY3Rpb24gbm92ZWwoaXRlbSwgaW5mbywgb3JkZXIsIE1ZX0lEKSB7XFxcXG4gICAgTWlhbi5ub3ZlbChpdGVtLCBpbmZvLCBvcmRlcik7XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9cXFxcXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIkBcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIiDkuIvovb3lrozmiJBcXFxcXFxcIjtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gY29taWMoaXRlbSwgaW5mbywgb3JkZXIsIE1ZX0lEKSB7XFxcXG4gICAgTWlhbi5jb21pYyhpdGVtLCBpbmZvLCBvcmRlcik7XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly9cXFxcXFxcIiArIGluZm8uYm9va05hbWUgKyBcXFxcXFxcIkBcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIiDkuIvovb3lrozmiJBcXFxcXFxcIjtcXFxcbn1cXFxcbnZhciAkZXhlID0ge1xcXFxuICAgIGNvbWljOiBjb21pYyxcXFxcbiAgICBub3ZlbDogbm92ZWxcXFxcbn07XFxcXG4kLmV4cG9ydHMgPSBmdW5jdGlvbihpdGVtLCBpbmZvLCBvcmRlciwgTVlfSUQpIHtcXFxcbiAgICByZXR1cm4gJGV4ZVtpbmZvLnR5cGVdKGl0ZW0sIGluZm8sIG9yZGVyLCBNWV9JRCk7XFxcXG59O1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNmLumAmueUqOW3peWFt1xcXCIsXFxcInBhdGhcXFwiOlxcXCJUb29sLmpzXFxcIixcXFwicnVsZVxcXCI6XFxcImNvbnN0IHYgPSB7XFxcXG4gICAgc3BsaXQodGV4dCwgdGFyZ2V0LCBjb3VudCkge1xcXFxuICAgICAgICBjb3VudCA9IGNvdW50ID09PSB1bmRlZmluZWQgPyAxIDogY291bnQ7XFxcXG4gICAgICAgIGxldCBhcnJheSA9IFt0ZXh0XTtcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XFxcXG4gICAgICAgICAgICB0ZXh0ID0gYXJyYXlbaV07XFxcXG4gICAgICAgICAgICBsZXQgaW5kZXggPSB0ZXh0LmluZGV4T2YodGFyZ2V0KTtcXFxcbiAgICAgICAgICAgIGlmIChpbmRleCA9PT0gLTEpIHtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGFycmF5W2ldID0gdGV4dC5zbGljZSgwLCBpbmRleCk7XFxcXG4gICAgICAgICAgICBhcnJheVtpICsgMV0gPSB0ZXh0LnNsaWNlKGluZGV4ICsgdGFyZ2V0Lmxlbmd0aCk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuIGFycmF5O1xcXFxuICAgIH0sXFxcXG4gICAgY2h1bmsoYXJyLCBzaXplKSB7XFxcXG4gICAgICAgIHZhciByZXN1bHQgPSBbXTtcXFxcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkgKz0gc2l6ZSkge1xcXFxuICAgICAgICAgICAgcmVzdWx0LnB1c2goYXJyLnNsaWNlKGksIGkgKyBzaXplKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgcmV0dXJuIHJlc3VsdDtcXFxcbiAgICB9LFxcXFxuICAgIGhpa2VyUGljKHVybCkge1xcXFxuICAgICAgICB2YXIgaGVhZGVycyA9IHt9O1xcXFxuICAgICAgICBsZXQgdXJscyA9IHVybC5zcGxpdChcXFxcXFxcIkBcXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBwaWNVcmwgPSB1cmxzLnNoaWZ0KCk7XFxcXG4gICAgICAgIGxldCBsZW5ndGggPSB1cmxzLmxlbmd0aDtcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsZW5ndGg7IGkrKykge1xcXFxuICAgICAgICAgICAgbGV0IFtrZXksIHZhbHVlXSA9IHYuc3BsaXQodXJsc1tpXSwgXFxcXFxcXCI9XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYgKGtleSA9PT0gXFxcXFxcXCJoZWFkZXJzXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgICAgICBPYmplY3QuYXNzaWduKGhlYWRlcnMsIEpTT04ucGFyc2UodmFsdWUpKTtcXFxcbiAgICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoa2V5LmluY2x1ZGVzKFxcXFxcXFwiLlxcXFxcXFwiKSB8fCBrZXkuaW5jbHVkZXMoXFxcXFxcXCI/XFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgcGljVXJsICs9IFxcXFxcXFwiQFxcXFxcXFwiICsga2V5ICsgKHZhbHVlID8gXFxcXFxcXCI9XFxcXFxcXCIgKyB2YWx1ZSA6IFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfSBlbHNlIGlmIChrZXkgIT09IFxcXFxcXFwianNcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgIGhlYWRlcnNba2V5XSA9IHZhbHVlO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9XFxcXG4gICAgICAgIHJldHVybiBbcGljVXJsLCBoZWFkZXJzXTtcXFxcbiAgICB9LFxcXFxuICAgIHJhbmdlKHN0YXJ0LCBlbmQpIHtcXFxcbiAgICAgICAgcmV0dXJuIEFycmF5KGVuZCAtIHN0YXJ0KS5maWxsKDApLm1hcCgoZWwsIGkpID0+IHN0YXJ0ICsgaSk7XFxcXG4gICAgfSxcXFxcbiAgICBwaWNEb3dubG9hZCh1cmwsIHBhdGgsIGhlYWRlcnMsIGRlY2lwaGUpIHtcXFxcbiAgICAgICAgaWYgKHR5cGVvZiBkZWNpcGhlID09PSBcXFxcXFxcInN0cmluZ1xcXFxcXFwiICYmIGRlY2lwaGUubGVuZ3RoID4gMCkge1xcXFxuICAgICAgICAgICAgbGV0IGluc3RyZWFtO1xcXFxuICAgICAgICAgICAgbGV0IG91dHN0cmVhbTtcXFxcbiAgICAgICAgICAgIGxldCBmaWxlO1xcXFxuICAgICAgICAgICAgdHJ5IHtcXFxcbiAgICAgICAgICAgICAgICBmaWxlID0gbmV3IGphdmEuaW8uRmlsZShwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICBpZiAoZmlsZS5leGlzdHMoKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGxldCBkaXIgPSBmaWxlLmdldFBhcmVudEZpbGUoKTtcXFxcbiAgICAgICAgICAgICAgICBpZiAoZGlyICE9IG51bGwgJiYgIWRpci5leGlzdHMoKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBkaXIubWtkaXJzKCk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGluc3RyZWFtID0gZmV0Y2godXJsLCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGhlYWRlcnM6IGhlYWRlcnMsXFxcXG4gICAgICAgICAgICAgICAgICAgIGlucHV0U3RyZWFtOiB0cnVlXFxcXG4gICAgICAgICAgICAgICAgfSk7XFxcXG5cXFxcbiAgICAgICAgICAgICAgICBvdXRzdHJlYW0gPSBuZXcgamF2YS5pby5GaWxlT3V0cHV0U3RyZWFtKHBhdGgpO1xcXFxuICAgICAgICAgICAgICAgIGxldCB0ID0gJC5oaWtlci5pbnB1dCxcXFxcbiAgICAgICAgICAgICAgICAgICAgYyA9ICQuaGlrZXIudXJsO1xcXFxuICAgICAgICAgICAgICAgICQuaGlrZXIuaW5wdXQgPSBpbnN0cmVhbTtcXFxcbiAgICAgICAgICAgICAgICAkLmhpa2VyLnVybCA9IHVybDtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcGljaW4gPSAobmV3IEZ1bmN0aW9uKFxcXFxcXFwicmV0dXJuIFxcXFxcXFwiICsgZGVjaXBoZSkpKCk7XFxcXG4gICAgICAgICAgICAgICAgJC5oaWtlci5pbnB1dCA9IHQ7XFxcXG4gICAgICAgICAgICAgICAgJC5oaWtlci51cmwgPSBjO1xcXFxuICAgICAgICAgICAgICAgIGxldCBidWYgPSBqYXZhLmxhbmcucmVmbGVjdC5BcnJheS5uZXdJbnN0YW5jZShqYXZhLmxhbmcuQnl0ZS5UWVBFLCAxMDI0KTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgbGVuO1xcXFxuICAgICAgICAgICAgICAgIHdoaWxlICgobGVuID0gcGljaW4ucmVhZChidWYpKSAhPSAtMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICBvdXRzdHJlYW0ud3JpdGUoYnVmLCAwLCBsZW4pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICBjbG9zZU1lKGluc3RyZWFtKTtcXFxcbiAgICAgICAgICAgICAgICBjbG9zZU1lKG91dHN0cmVhbSk7XFxcXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICAgICAgY2xvc2VNZShpbnN0cmVhbSk7XFxcXG4gICAgICAgICAgICAgICAgY2xvc2VNZShvdXRzdHJlYW0pO1xcXFxuICAgICAgICAgICAgICAgIGlmIChmaWxlIGluc3RhbmNlb2YgamF2YS5pby5GaWxlICYmIGZpbGUuZXhpc3RzKCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZmlsZS5kZWxldGUoKTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgbG9nKFxcXFxcXFwiPOino+WvhuS4i+i9vUVycm9yPlxcXFxcXFwiICsgZS50b1N0cmluZygpKVxcXFxuICAgICAgICAgICAgICAgIHRocm93IGU7XFxcXG4gICAgICAgICAgICB9IGZpbmFsbHkge1xcXFxuICAgICAgICAgICAgICAgIGNsb3NlTWUoaW5zdHJlYW0pO1xcXFxuICAgICAgICAgICAgICAgIGNsb3NlTWUob3V0c3RyZWFtKTtcXFxcbiAgICAgICAgICAgIH1cXFxcblxcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmVxdWlyZURvd25sb2FkKHVybCwgcGF0aCwgaGVhZGVycyk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LFxcXFxuICAgIHRleHRTaGllbGQodGV4dCkge1xcXFxuICAgICAgICBsZXQgZSA9IC8jfDp8JnxcXFxcXFxcXHx8XFxcXFxcXFxefEB8XFxcXFxcXFw8fFxcXFxcXFxcPnwlfFxcXFxcXFxcL3xcXFxcXFxcXD8vZztcXFxcbiAgICAgICAgcmV0dXJuIHRleHQucmVwbGFjZShlLCBcXFxcXFxcIl9cXFxcXFxcIik7XFxcXG4gICAgfVxcXFxuICAgIFxcXFxufVxcXFxuXFxcXG4kLmV4cG9ydHMgPSB2O1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNqLkNvbmZpZ1xcXCIsXFxcInBhdGhcXFwiOlxcXCJDb25maWcuanNvblxcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qcz9ydWxlPeacrOWcsOi1hOa6kOeuoeeQhlxcXFxcXFwiKTtcXFxcblxcXFxubGV0IGxvY2FsQ29uZmlnID0ge307XFxcXG5cXFxcbnRyeSB7XFxcXG4gICAgbG9jYWxDb25maWcgPSBKU09OLnBhcnNlKEZpbGUucmVhZEZpbGUoZ2V0UGF0aChcXFxcXFxcImhpa2VyOi8vZmlsZXMvcnVsZXMvZmlsZXMv5pys5Zyw6LWE5rqQ566h55CGL2NvbmZpZy5qc29uXFxcXFxcXCIpLnNsaWNlKDcpKSk7XFxcXG59IGNhdGNoIChlKSB7XFxcXG4gICAgZGVsZXRlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxufVxcXFxuY29uc3QgQ29uZmlnID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgaG9tZVBhdGg6IGdldFBhdGgoXFxcXFxcXCJoaWtlcjovL2ZpbGVzL2xvY2FsTWFuYWdlclxcXFxcXFwiKS5zbGljZSg3KSxcXFxcbiAgICBsb2dOdW06IDEwLFxcXFxuICAgIHRocmVhZE51bTogMCxcXFxcbiAgICBkZWZfaXNQYWdpbmF0ZTogXFxcXFxcXCIxXFxcXFxcXCIsIC8vMem7mOiupOW8gOWQr+WIhumhte+8jDDpu5jorqTlhbPpl61cXFxcbiAgICB2aWV3UGFnZVNpemU6IDIwMCxcXFxcbiAgICBkZWZfUGljOiBcXFxcXFxcImhpa2VyOi8vaW1hZ2VzL2hvbWVfcGljNFxcXFxcXFwiLFxcXFxuICAgIGRlZl9Mb3JkX1R5cGU6IFxcXFxcXFwiY29taWNcXFxcXFxcIixcXFxcbiAgICBkZWZfVmlld19TdHlsZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICBkZWZfRG9WaV9TdHlsZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICBkZWZfRG9WaV9UeXBlOiBcXFxcXFxcIjFcXFxcXFxcIiwgLy8w5YWo6YOoLCAx5pyq5a6M5oiQ77yMMuW3suWujOaIkFxcXFxuICAgIGRlZl9pc0NvbWljQ29tcGF0aWJsZTogXFxcXFxcXCIwXFxcXFxcXCJcXFxcbn0sIGxvY2FsQ29uZmlnKTtcXFxcbmNvbnN0IFBBVEhTID0ge1xcXFxuICAgIG5vdmVsUGF0aDogXFxcXFxcXCIv5bCP6K+0L1xcXFxcXFwiLFxcXFxuICAgIGNvbWljUGF0aDogXFxcXFxcXCIv5ryr55S7L1xcXFxcXFwiLFxcXFxuICAgIG5vdmVsRnVsbFBhdGg6IFxcXFxcXFwiL+Wwj+ivtOWQiOW5ti9cXFxcXFxcIixcXFxcbiAgICBleHRlcm5hbEltcG9ydFBhdGg6IFxcXFxcXFwiL+WkluWvvOWwj+ivtC9cXFxcXFxcIixcXFxcbiAgICBjb250ZW50c0NhY2hlOiBcXFxcXFxcIi/nm67lvZXnvJPlrZgvXFxcXFxcXCJcXFxcbn1cXFxcblxcXFxuXFxcXG5PYmplY3Qua2V5cyhQQVRIUykuZm9yRWFjaChrZXkgPT4gQ29uZmlnW2tleV0gPSBDb25maWcuaG9tZVBhdGggKyBQQVRIU1trZXldKTtcXFxcbiQuZXhwb3J0cyA9IENvbmZpZztcXFxcblxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuS4u+mhtemdolxcXCIsXFxcInBhdGhcXFwiOlxcXCJNYWluLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5mdW5jdGlvbiBtYWluKCkge1xcXFxuICAgIHZhciBsYXlvdXQgPSBbXTtcXFxcbiAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgIGxldCB0eXBlID0gZ2V0TXlWYXIoXFxcXFxcXCIudHlwZVxcXFxcXFwiLCBnZXRJdGVtKFxcXFxcXFwibWFpbjp0eXBlXFxcXFxcXCIpIHx8IENvbmZpZy5kZWZfTG9yZF9UeXBlKTtcXFxcbiAgICBsZXQgdGdudW0gPSBnZXRNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKE1ZX0lEKSA9PiB7XFxcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCJzZWFyY2hLZXlcXFxcXFxcIik7XFxcXG4gICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIudGdudW1cXFxcXFxcIik7XFxcXG4gICAgfSkpO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXFxcXFwiY29taWNcXFxcXFxcIiA/IFxcXFxcXFwi4peJ5ryr55S7XFxcXFxcXCIgOiBcXFxcXFxcIuKXi+a8q+eUu1xcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgodHlwZSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwiY29taWNcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIudHlwZVxcXFxcXFwiLCBcXFxcXFxcImNvbWljXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcIm1haW46dHlwZVxcXFxcXFwiLCBcXFxcXFxcImNvbWljXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdHlwZSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiLFxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXFxcXFwibm92ZWxcXFxcXFxcIiA/IFxcXFxcXFwi4peJ5bCP6K+0XFxcXFxcXCIgOiBcXFxcXFxcIuKXi+Wwj+ivtFxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgodHlwZSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKHR5cGUgPT09IFxcXFxcXFwibm92ZWxcXFxcXFxcIikgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIudHlwZVxcXFxcXFwiLCBcXFxcXFxcIm5vdmVsXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgc2V0SXRlbShcXFxcXFxcIm1haW46dHlwZVxcXFxcXFwiLCBcXFxcXFxcIm5vdmVsXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdHlwZSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiLFxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IHR5cGUgPT09IFxcXFxcXFwidHh0XFxcXFxcXCIgPyBcXFxcXFxcIuKXieaVtOacrOWwj+ivtFxcXFxcXFwiIDogXFxcXFxcXCLil4vmlbTmnKzlsI/or7RcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHR5cGUpID0+IHtcXFxcbiAgICAgICAgICAgIGlmICh0eXBlID09PSBcXFxcXFxcInR4dFxcXFxcXFwiKSByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxDb2xsZWN0ZWQudmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSNcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnR5cGVcXFxcXFxcIiwgXFxcXFxcXCJ0eHRcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwibWFpbjp0eXBlXFxcXFxcXCIsIFxcXFxcXFwidHh0XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgY2xlYXJNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgdHlwZSksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgaWYgKHR5cGUgPT09IFxcXFxcXFwidHh0XFxcXFxcXCIpIHtcXFxcbiAgICAgICAgdHh0VmlldyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9leHRlcm5hbGltcG9ydFR4dC52aWV3XFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gdHh0VmlldyhsYXlvdXQpO1xcXFxuICAgIH1cXFxcbiAgICBsZXQgdGFnID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbdHlwZSArIFxcXFxcXFwiUGF0aFxcXFxcXFwiXSwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG4gICAgaWYgKHRhZy5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiLFxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6K6+572uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHZlcnNpb246IE1ZX1JVTEUudmVyc2lvblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzluK7liqnigJ3igJ1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvaGVscC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP2tleXdvcmQ9bm92ZWxDb21pY1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiAnPGgxIHN0eWxlPVxcXFxcXFwidGV4dC1hbGlnbjogY2VudGVyO1xcXFxcXFwiPuWVpemDveayoeacieiAtjwvaDE+JyxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gc2V0UmVzdWx0KGxheW91dCk7XFxcXG4gICAgfVxcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdXJsOiAnXFxcXFxcXCJoaWtlcjovL3NlYXJjaD9zPVxcXFxcXFwiK2lucHV0JyxcXFxcbiAgICAgICAgZGVzYzogXFxcXFxcXCLmkJzkvaDmg7PopoHnmoQjXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIjLi4uLi4uXFxcXFxcXCIsXFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCflI1cXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIHJ1bGVzOiAkLnRvU3RyaW5nKCh0YWcsIHR5cGUpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgYXJyMSA9IFtdO1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGFnLmxlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGFycjEucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInRpdGxlXFxcXFxcXCI6IHRhZ1tpXS5uYW1lLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJzZWFyY2hfdXJsXFxcXFxcXCI6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eT9pc0FsbD0xJnNlYXJjaFRlcm1zPSoqJnR5cGU9XFxcXFxcXCIgKyB0eXBlLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgXFxcXFxcXCJzZWFyY2hGaW5kXFxcXFxcXCI6IFxcXFxcXFwianM6JC5yZXF1aXJlKCdoaWtlcjovL3BhZ2UvU2VhcmNoLnZpZXc/cnVsZT0nK01ZX1JVTEUuX3RpdGxlKTtcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG5cXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gSlNPTi5zdHJpbmdpZnkoYXJyMSk7XFxcXG4gICAgICAgICAgICB9LCB0YWcsIHR5cGUpLFxcXFxuICAgICAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcignc2VhcmNoS2V5JywgJycpLFxcXFxuICAgICAgICAgICAgb25DaGFuZ2U6IFxcXFxcXFwicHV0TXlWYXIoJ3NlYXJjaEtleScsaW5wdXQpXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuXFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLigJjigJjimpnorr7nva7igJnigJlcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgdmVyc2lvbjogTVlfUlVMRS52ZXJzaW9uXFxcXG4gICAgICAgIH1cXFxcbiAgICB9KTtcXFxcblxcXFxuXFxcXG4gICAgZm9yIChsZXQgaSBpbiB0YWcpIHtcXFxcbiAgICAgICAgbGV0IGl0ID0gdGFnW2ldO1xcXFxuICAgICAgICBpZiAodGdudW0gPT09IGkpIHtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJxcXFxcXFxcIiArIGl0Lm5hbWUgKyBcXFxcXFxcIuKAneKAnVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6ICQoW1xcXFxcXFwi5Yig6Zmk6K+l55uu5b2VXFxcXFxcXCIsIFxcXFxcXFwi6Lez6L2s5bCP56iL5bqPXFxcXFxcXCIsIFxcXFxcXFwi5omT5byA5Lmm5p62XFxcXFxcXCJdLCAxLCBcXFxcXFxcIumAieaLqeaTjeS9nFxcXFxcXFwiKS5zZWxlY3QoKGl0LCB0eXBlKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChcXFxcXFxcIui3s+i9rOWwj+eoi+W6j1xcXFxcXFwiID09PSBpbnB1dCkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9ob21lQFxcXFxcXFwiICsgaXQubmFtZTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIGlmKFxcXFxcXFwi5Yig6Zmk6K+l55uu5b2VXFxcXFxcXCI9PT1pbnB1dCl7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAvL3JldHVybiB0aGVuKFtcXFxcXFxcIuivpeaTjeS9nOS4jeS8muWIoOmZpOWwj+eoi+W6j++8jOS9huivpeWwj+eoi+W6j+S4i+i9veeahOaJgOaciea8q+eUu+Wwhuiiq+WIoOmZpFxcXFxcXFwiXSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFxcXFxcIuivpeaTjeS9nOS4jeS8muWIoOmZpOWwj+eoi+W6j++8jOS9huivpeWwj+eoi+W6j+S4i+i9veeahOaJgOaciSDmvKvnlLsv5bCP6K+0IOWwhuiiq+WIoOmZpFxcXFxcXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIudGdudW1cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9LCBpdC5wYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfWVsc2V7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvQm9va3JhY2sudmlldz9ydWxlPeacrOWcsOi1hOa6kOeuoeeQhiZydWxlTmFtZT1cXFxcXFxcIitpdC5uYW1lK1xcXFxcXFwiJnR5cGU9XFxcXFxcXCIrdHlwZTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0sIGl0LCB0eXBlKVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IGl0Lm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKGkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi50Z251bVxcXFxcXFwiLCBpKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH0sIGkpLFxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgbGV0IHBhdGggPSB0YWdbdGdudW1dLnBhdGg7XFxcXG4gICAgbGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG5cXFxcbiAgICBpZiAobWhsaXN0Lmxlbmd0aCA9PT0gMCkge1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ1cXFxcXFxcIiArIFxcXFxcXFwi5ZWl6YO95rKh5pyJ6IC2XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIHJldHVybiBzZXRSZXN1bHQobGF5b3V0KTtcXFxcbiAgICB9XFxcXG4gICAgbGV0IHBhZ2VVcmwgPSB0eXBlID09PSBcXFxcXFxcIm5vdmVsXFxcXFxcXCIgPyBcXFxcXFxcImhpa2VyOi8vcGFnZS9Ob3ZlbEJyb3dzZXIudmlld1xcXFxcXFwiIDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29taWNCcm93c2VyLnZpZXdcXFxcXFxcIjtcXFxcbiAgICBmb3IgKGxldCBpdGVtIG9mIG1obGlzdCkge1xcXFxuICAgICAgICBsZXQgcGljID0gZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgaXRlbS5wYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyBpdGVtLm5hbWUgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIikgPyBpdGVtLnBhdGggKyBcXFxcXFxcIi9cXFxcXFxcIiArIGl0ZW0ubmFtZSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiIDogQ29uZmlnLmRlZl9QaWM7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLm5hbWUsXFxcXG4gICAgICAgICAgICBwaWNfdXJsOiBwaWMsXFxcXG4gICAgICAgICAgICB1cmw6IHBhZ2VVcmwgKyBcXFxcXFxcIj9ydWxlPVxcXFxcXFwiICsgTVlfUlVMRS50aXRsZSxcXFxcbiAgICAgICAgICAgIGV4dHJhOiBPYmplY3QuYXNzaWduKGl0ZW0sIHtcXFxcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWIoOmZpFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygocGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImxvbmdQcmVzcy5qc1xcXFxcXFwiKS5kZWxldGVGaWxlRm9yQm9vayhwYXRoKVxcXFxuICAgICAgICAgICAgICAgICAgICB9LCBpdGVtLnBhdGgpXFxcXG4gICAgICAgICAgICAgICAgfV0sXFxcXG4gICAgICAgICAgICAgICAgaWQ6IGl0ZW0ucGF0aFxcXFxuICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcXFxufVxcXFxuXFxcXG5tYWluKCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcInRleHRfMVxcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7mvKvnlLvnq6DoioLliJfooahcXFwiLFxcXCJwYXRoXFxcIjpcXFwiQ29taWNCcm93c2VyLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5pZiAoZ2V0UGFyYW0oXFxcXFxcXCJoYXNQYXJhbXNcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiKSB7XFxcXG4gICAgTVlfUEFSQU1TID0ge1xcXFxuICAgICAgICBwYXRoOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJwYXRoXFxcXFxcXCIpKSxcXFxcbiAgICAgICAgbmFtZTogZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwibmFtZVxcXFxcXFwiKSlcXFxcbiAgICB9XFxcXG59XFxcXG5sZXQgcGF0aCA9IE1ZX1BBUkFNUy5wYXRoO1xcXFxuc2V0UGFnZVRpdGxlKFxcXFxcXFwiQ1Z8XFxcXFxcXCIgKyBNWV9QQVJBTVMubmFtZSlcXFxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcblxcXFxudmFyIGxheW91dCA9IFtdO1xcXFxubGV0IG1vZGUgPSBnZXRNeVZhcihcXFxcXFxcIi5tb2RlXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbmxldCBpc1JldmVyc2UgPSBnZXRNeVZhcihcXFxcXFxcIi5pc1JldmVyc2VcXFxcXFxcIiwgXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuYWRkTGlzdGVuZXIoXFxcXFxcXCJvbkNsb3NlXFxcXFxcXCIsICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIubW9kZVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiKTtcXFxcbn0pKTtcXFxcbmNvbnN0IGNvbWljU3RhdHVzID0gbmV3IE1hcChbXFxcXG4gICAgW1xcXFxcXFwiQVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiXSxcXFxcbiAgICBbXFxcXFxcXCJCXFxcXFxcXCIsIFxcXFxcXFwi4oCY4oCYW+acquWujOaIkF3igJnigJlcXFxcXFxcIl1cXFxcbl0pO1xcXFxuXFxcXG5mdW5jdGlvbiBnZXRUaXRsZSh0aXRsZSkge1xcXFxuICAgIGxldCB0aXRsZXMgPSBUb29sLnNwbGl0KHRpdGxlLCBcXFxcXFxcIiRcXFxcXFxcIiwgMik7XFxcXG4gICAgcmV0dXJuIGNvbWljU3RhdHVzLmdldCh0aXRsZXNbMV0pICsgdGl0bGVzWzJdIHx8IHRpdGxlO1xcXFxufVxcXFxuZnVuY3Rpb24gZ2V0VGl0bGUyKHRpdGxlKXtcXFxcbiAgICBsZXQgdGl0bGVzID0gVG9vbC5zcGxpdCh0aXRsZSwgXFxcXFxcXCIkXFxcXFxcXCIsIDIpO1xcXFxuICAgIHJldHVybiB0aXRsZXNbMl0gfHwgdGl0bGU7XFxcXG59XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5Yig6Zmk5pW05pysXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5Yig6Zmk5pW05pys5ryr55S777yfXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcXFxuICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBwYXRoKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFtcXFxcXFxcIueci+a8q+eUu1xcXFxcXFwiLCBcXFxcXFxcIuWIoOmZpOeroOiKglxcXFxcXFwiXVttb2RlXSxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgobW9kZSkgPT4ge1xcXFxuICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5tb2RlXFxcXFxcXCIsIG1vZGUgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICB9LCBtb2RlKSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG59KVxcXFxubGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG5taGxpc3Quc29ydCgoYSwgYikgPT4ge1xcXFxuICAgIGEgPSAoYS5uYW1lLm1hdGNoKC9cXFxcXFxcXGQrLykgfHwgW10pWzBdIHx8IDA7XFxcXG4gICAgYiA9IChiLm5hbWUubWF0Y2goL1xcXFxcXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXFxcbiAgICByZXR1cm4gYSAtIGI7XFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLnq6DoioIgXFxcXFxcXCIuYmlnKCkgKyAoXFxcXFxcXCLlhbHmnIk6XFxcXFxcXCIgKyBtaGxpc3QubGVuZ3RoICsgXFxcXFxcXCLnq6BcXFxcXFxcIikuc21hbGwoKSxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxcXG4gICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiLCBpc1JldmVyc2UgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICB9LCBpc1JldmVyc2UpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbmxldCBhcnJheSA9IFtdO1xcXFxuXFxcXG5pZiAobW9kZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIpIHtcXFxcbiAgICBpZiAoQ29uZmlnLmRlZl9pc0NvbWljQ29tcGF0aWJsZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgbGV0IGxhenkgPSAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCkgPT4ge1xcXFxuICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgbGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChpbnB1dCk7XFxcXG4gICAgICAgICAgICBsZXQgc2hvcnRlbiA9IGlucHV0LnJlcGxhY2UoZ2V0UGF0aChcXFxcXFxcImhpa2VyOi8vZmlsZXMvXFxcXFxcXCIpLnNsaWNlKDcpLFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBsZXQgcGljbGlzdCA9IGZpbGVsaXN0Lm1hcCgoaXRlbSwgaSkgPT4gc2hvcnRlbiArIFxcXFxcXFwiL1xcXFxcXFwiICsgKGkgKyAxKSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInBpY3M6Ly9cXFxcXFxcIiArIHBpY2xpc3Quam9pbihcXFxcXFxcIiYmXFxcXFxcXCIpO1xcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgZm9yIChsZXQgaXRlbSBvZiBtaGxpc3QpIHtcXFxcbiAgICAgICAgICAgIGxldCB0aXRsZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxcXG4gICAgICAgICAgICBhcnJheS5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogdGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiBpdGVtLnBhdGggKyBsYXp5LFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBDb25maWcuZGVmX1ZpZXdfU3R5bGUsXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0gZWxzZSB7XFxcXG4gICAgICAgIGZvciAobGV0IGl0ZW0gb2YgbWhsaXN0KSB7XFxcXG4gICAgICAgICAgICBsZXQgdGl0bGUgPSBnZXRUaXRsZShpdGVtLm5hbWUpO1xcXFxuICAgICAgICAgICAgYXJyYXkucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHRpdGxlLFxcXFxuICAgICAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvY29taWNDb21wYXRpYmxlLnZpZXcjYXV0b1BhZ2UjI3JlYWRUaGVtZSM/cGF0aD1cXFxcXFxcIitpdGVtLnBhdGgsXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBwYXRoOiBpdGVtLnBhdGgsXFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBnZXRUaXRsZTIoaXRlbS5uYW1lKVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG59IGVsc2Uge1xcXFxuICAgIGZvciAobGV0IGl0ZW0gb2YgbWhsaXN0KSB7XFxcXG4gICAgICAgIGxldCBuYW1lID0gZ2V0VGl0bGUyKGl0ZW0ubmFtZSk7XFxcXG4gICAgICAgIGFycmF5LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCLnoa7orqTliKDpmaRbXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCJd77yfXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9LCBpdGVtLnBhdGgpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59XFxcXG5pZiAoaXNSZXZlcnNlID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGFycmF5LnJldmVyc2UoKTtcXFxcbn1cXFxcbmxheW91dC5wdXNoLmFwcGx5KGxheW91dCwgYXJyYXkpO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu6IGa5ZCI5pCc57SiXFxcIixcXFwicGF0aFxcXCI6XFxcIlNlYXJjaC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLl90aXRsZSk7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb24/cnVsZT1cXFxcXFxcIiArIE1ZX1JVTEUuX3RpdGxlKTtcXFxcbmxldCBjb21pY1J1bGVEaXJzID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWdbZ2V0UGFyYW0oXFxcXFxcXCJ0eXBlXFxcXFxcXCIpICsgXFxcXFxcXCJQYXRoXFxcXFxcXCJdLCBcXFxcXFxcImRpclxcXFxcXFwiKTtcXFxcbmlmIChnZXRQYXJhbShcXFxcXFxcImlzQWxsXFxcXFxcXCIpID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGNvbWljUnVsZURpcnMgPSBjb21pY1J1bGVEaXJzLmZpbHRlcihpdGVtID0+IGl0ZW0ubmFtZSA9PT0gTVlfUlVMRS50aXRsZSk7XFxcXG59XFxcXG5cXFxcbmxldCBzZWFyY2hSZXN1bHQgPSBbXTtcXFxcbmxldCBzZWFyY2hUZXJtcz0gZ2V0UGFyYW0oXFxcXFxcXCJzZWFyY2hUZXJtc1xcXFxcXFwiKTtcXFxcbmxldCBzZWFyY2hUZXN0O1xcXFxuXFxcXG5pZiAoIWdldFNlYXJjaE1vZGUoKSkge1xcXFxuICAgIGxldCB0ZXJtc0FyciA9IHNlYXJjaFRlcm1zLnNwbGl0KFxcXFxcXFwiXFxcXFxcXCIpLm1hcCh0ID0+IHQucmVwbGFjZSgvXFxcXFxcXFwqfFxcXFxcXFxcLnxcXFxcXFxcXD98XFxcXFxcXFwrfFxcXFxcXFxcJHxcXFxcXFxcXF58XFxcXFxcXFxbfFxcXFxcXFxcXXxcXFxcXFxcXCh8XFxcXFxcXFwpfFxcXFxcXFxce3xcXFxcXFxcXH18XFxcXFxcXFx8fFxcXFxcXFxcL3xcXFxcXFxcXFxcXFxcXFxcL2csIGsgPT4gXFxcXFxcXCJcXFxcXFxcXFxcXFxcXFxcXFxcXFxcXCIgKyBrKSk7XFxcXG4gICAgbGV0IHJlZyA9IG5ldyBSZWdFeHAodGVybXNBcnIuam9pbihcXFxcXFxcIi4qXFxcXFxcXCIpLCBcXFxcXFxcImlcXFxcXFxcIik7XFxcXG4gICAgc2VhcmNoVGVzdCA9IHRleHQgPT4gcmVnLnRlc3QodGV4dCk7XFxcXG59IGVsc2Uge1xcXFxuICAgIHNlYXJjaFRlc3QgPSB0ZXh0ID0+IHNlYXJjaENvbnRhaW5zKHRleHQsIHNlYXJjaFRlcm1zLCBmYWxzZSk7XFxcXG59XFxcXG5cXFxcbmxldCBwYWdlVXJsID0gZ2V0UGFyYW0oXFxcXFxcXCJ0eXBlXFxcXFxcXCIpID09PSBcXFxcXFxcIm5vdmVsXFxcXFxcXCIgPyBcXFxcXFxcImhpa2VyOi8vcGFnZS9Ob3ZlbEJyb3dzZXIudmlld1xcXFxcXFwiIDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29taWNCcm93c2VyLnZpZXdcXFxcXFxcIjtcXFxcbmZvciAobGV0IHNvbkRpciBvZiBjb21pY1J1bGVEaXJzKSB7XFxcXG4gICAgbGV0IGNvbWljTGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgoc29uRGlyLnBhdGgsIFxcXFxcXFwiZGlyXFxcXFxcXCIpO1xcXFxuICAgIGZvciAobGV0IGNvbWljIG9mIGNvbWljTGlzdCkge1xcXFxuICAgICAgICBpZiAoc2VhcmNoVGVzdChjb21pYy5uYW1lKSkge1xcXFxuICAgICAgICAgICAgc2VhcmNoUmVzdWx0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBjb21pYy5uYW1lLFxcXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IGNvbWljLnBhdGggKyBcXFxcXFxcIi9cXFxcXFxcIiArIGNvbWljLm5hbWUgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6IHBhZ2VVcmwgKyBcXFxcXFxcIj9ydWxlPVxcXFxcXFwiICsgTVlfUlVMRS5fdGl0bGUsXFxcXG4gICAgICAgICAgICAgICAgZGVzYzogc29uRGlyLm5hbWUsXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IGNvbWljXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcblxcXFxufVxcXFxuc2V0UmVzdWx0KHNlYXJjaFJlc3VsdCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu6K6+572uXFxcIixcXFwicGF0aFxcXCI6XFxcIlNldHRpbmcudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbnNldFBhZ2VUaXRsZShNWV9SVUxFLnRpdGxlICsgXFxcXFxcXCJ86K6+572uXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuXFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCI8c3Ryb25nPuWfuuehgOiuvue9rjwvc3Ryb25nPlxcXFxcXFwiLmJpZygpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLnm67lvZXot6/lvoRcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcvTW9yZS52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3NldHRpbmdUeXBlPWNvbnRlbnRzXFxcXFxcXCIsXFxcXG4gICAgZGVzYzogQ29uZmlnLmhvbWVQYXRoLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLorr7nva7pu5jorqTlsIHpnaJcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBDb25maWcuZGVmX1BpYyxcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcvTW9yZS52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP3NldHRpbmdUeXBlPWRlZmF1bHRQaWNcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICB9XFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIjxzdHJvbmc+5LiL6L295Zmo6K6+572uPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxuZnVuY3Rpb24gc2V0TnVtKGtleSwgdGVzdCkge1xcXFxuICAgIGxldCBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgMCkgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICBpbnB1dCA9IHBhcnNlSW50KGlucHV0KTtcXFxcbiAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0KSkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/or7fovpPlhaXmlbDlrZdcXFxcXFxcIjtcXFxcbiAgICBpZiAoIXRlc3QoaW5wdXQpKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S4jeespuWQiOadoeS7tlxcXFxcXFwiO1xcXFxuICAgIENvbmZpZ1trZXldID0gaW5wdXQ7XFxcXG4gICAgc2F2ZUZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXFxcbiAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/kv67mlLnmiJDlip9cXFxcXFxcIjtcXFxcbn1cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCJsb2fmlbBcXFxcXFxcIixcXFxcbiAgICB1cmw6ICQoQ29uZmlnLmxvZ051bSwgXFxcXFxcXCIwPE48MTAwXFxcXFxcXCIpLmlucHV0KHNldE51bSwgXFxcXFxcXCJsb2dOdW1cXFxcXFxcIiwgaXQgPT4gaXQgPiAwICYmIGl0IDwgMTAwKSxcXFxcbiAgICBkZXNjOiBcXFxcXFxcIlxcXFxcXFwiICsgQ29uZmlnLmxvZ051bSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLliIbmibnkuIvovb3mlbAoMOS4jeW8gOWQrylcXFxcXFxcIixcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCJcXFxcXFxcIiArIENvbmZpZy50aHJlYWROdW0sIFxcXFxcXFwiTj4tMVxcXFxcXFwiKS5pbnB1dChzZXROdW0sIFxcXFxcXFwidGhyZWFkTnVtXFxcXFxcXCIsIGl0ID0+IGl0ID4gLTEpLFxcXFxuICAgIGRlc2M6IFxcXFxcXFwiXFxcXFxcXCIgKyBDb25maWcudGhyZWFkTnVtLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZSxcXFxcbiAgICB9XFxcXG59KTtcXFxcblxcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIjxzdHJvbmc+5bCP6K+06ZiF6K+75Zmo6K6+572uPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIum7mOiupOW8gOWQr+WIhumhtemYheivu1xcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChkZWZfaXNQYWdpbmF0ZSkgPT4ge1xcXFxuICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIDApIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG5cXFxcbiAgICAgICAgQ29uZmlnLmRlZl9pc1BhZ2luYXRlID0gZGVmX2lzUGFnaW5hdGUgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIjtcXFxcblxcXFxuICAgICAgICBzYXZlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcXFxuICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICB9LCBDb25maWcuZGVmX2lzUGFnaW5hdGUpLFxcXFxuICAgIGRlc2M6IENvbmZpZy5kZWZfaXNQYWdpbmF0ZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIgPyBcXFxcXFxcIuS4jeW8gOWQr1xcXFxcXFwiIDogXFxcXFxcXCLlvIDlkK9cXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLmr4/pobXmnIDlpKfnq6DmlbBcXFxcXFxcIixcXFxcbiAgICB1cmw6ICQoQ29uZmlnLnZpZXdQYWdlU2l6ZSwgXFxcXFxcXCIzMDxOPDUwMFxcXFxcXFwiKS5pbnB1dChzZXROdW0sIFxcXFxcXFwidmlld1BhZ2VTaXplXFxcXFxcXCIsIGl0ID0+IGl0ID4gMzAgJiYgaXQgPCA1MDApLFxcXFxuICAgIGRlc2M6IFxcXFxcXFwiXFxcXFxcXCIgKyBDb25maWcudmlld1BhZ2VTaXplLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLmm7/mjaLop4TliJlcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcvTW9yZS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjP3NldHRpbmdUeXBlPXJlcGxhY2VSdWxlXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXG4gICAgfVxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIjxzdHJvbmc+5ryr55S76ZiF6K+75Zmo6K6+572uPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLlhbzlrrnmqKHlvI9cXFxcXFxcIixcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoZGVmX2lzQ29taWNDb21wYXRpYmxlKSA9PiB7XFxcXG4gICAgICAgIGxldCBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgMCkgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcblxcXFxuICAgICAgICBDb25maWcuZGVmX2lzQ29taWNDb21wYXRpYmxlID0gZGVmX2lzQ29taWNDb21wYXRpYmxlID09PSBcXFxcXFxcIjBcXFxcXFxcIiA/IFxcXFxcXFwiMVxcXFxcXFwiIDogXFxcXFxcXCIwXFxcXFxcXCI7XFxcXG5cXFxcbiAgICAgICAgc2F2ZUZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXFxcbiAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSwgQ29uZmlnLmRlZl9pc0NvbWljQ29tcGF0aWJsZSksXFxcXG4gICAgZGVzYzogQ29uZmlnLmRlZl9pc0NvbWljQ29tcGF0aWJsZSA9PT0gXFxcXFxcXCIwXFxcXFxcXCIgPyBcXFxcXFxcIuS4jeW8gOWQr1xcXFxcXFwiIDogXFxcXFxcXCLlvIDlkK9cXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCI8c3Ryb25nPuWFtuS7luiuvue9rjwvc3Ryb25nPlxcXFxcXFwiLmJpZygpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi6KeE5YiZ5Y+R5biD6aG1XFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9ydWxlRGV0YWlsI25vSGlzdG9yeSMjbm9SZWNvcmRIaXN0b3J5Iz9ydWxlPemBk+mVv+S7k+W6k1Byb1xcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIGx2ZXI6IE1ZX1BBUkFNUy52ZXJzaW9uIHx8IFxcXFxcXFwi6I635Y+W54mI5pys5aSx6LSl77yM6Ieq6KGM5p+l55yLXFxcXFxcXCIsXFxcXG4gICAgICAgIGlkOiBcXFxcXFxcIjM1NTlcXFxcXFxcIlxcXFxuICAgIH0sXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5oGi5aSN6buY6K6k6K6+572uXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5oGi5aSN6buY6K6k6K6+572u77yfXFxcXFxcXCIpLmNvbmZpcm0oKCkgPT4ge1xcXFxuICAgICAgICBkZWxldGVGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mgaLlpI3lrozmiJBcXFxcXFxcIjtcXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5riF55CG57yT5a2YXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9TZXR0aW5nL01vcmUudmlldyNub1JlY29yZEhpc3RvcnkjI25vSGlzdG9yeSM/c2V0dGluZ1R5cGU9Y2FjaGVcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5paH5Lu2566h55CGXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlTWFuYWdlbWVudC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxubGV0IHRpZCA9IERhdGUubm93KCk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5qOA5rWL5pu05pawXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKG9sZFZlcnNpb24sIHRpZCkgPT4ge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IG5ld1ZlcnNpb24gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvZGV2L2dldGJ5aWQ/aWQ9MzU1OVxcXFxcXFwiLCB7XFxcXG4gICAgICAgICAgICAgICAgdGltZW91dDogMjAwMFxcXFxuICAgICAgICAgICAgfSkpLnJlc3VsdC52ZXI7XFxcXG4gICAgICAgICAgICBpZiAobmV3VmVyc2lvbiA8PSBvbGRWZXJzaW9uKSB7XFxcXG4gICAgICAgICAgICAgICAgdXBkYXRlSXRlbSh0aWQgKyBcXFxcXFxcIiPorr7nva5f5pu05pawXFxcXFxcXCIsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5bey57uP5piv5pyA5paw54mI5pys5LqGXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3sue7j+aYr+acgOaWsOeJiOacrOS6hlxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXFxcXFwiI+iuvue9rl/mm7TmlrBcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmnInmlrDniYjmnKzov5jmnKrmm7TmlrBcXFxcXFxcIlxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5pyJ5paw54mI5pys6L+Y5pyq5pu05pawXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInJ1bGU6Ly81clczNlppVTZLZUc1NVdNNzcrbGFHOXRaVjl5ZFd4bFgzVnliTysvcFdoMGRIQTZMeTlvYVd0bGNpNXViMnRwWVM1d2NtVnpjeTlvYVd0bGNuVnNaUzl5ZFd4bGJHbHpkQzVxYzI5dVAybGtQVE0xTlRrPVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9IGNhdGNoIChlKSB7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKHRpZCArIFxcXFxcXFwiI+iuvue9rl/mm7TmlrBcXFxcXFxcIiwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuS/oeaBr+iOt+WPluWksei0pVxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pu05paw5L+h5oGv6I635Y+W5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9LCBNWV9QQVJBTVMudmVyc2lvbiwgdGlkKSxcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICBpZDogdGlkICsgXFxcXFxcXCIj6K6+572uX+abtOaWsFxcXFxcXFwiXFxcXG4gICAgfVxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5YWz5LqO5aaC5L2V6LCD55SoXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcIm1xcWFwaTovL2ZvcndhcmQvdXJsP3NyY190eXBlPXdlYiZzdHlsZT1kZWZhdWx0JnBsZ19hdXRoPTEmdmVyc2lvbj0xJnVybF9wcmVmaXg9YUhSMGNITTZMeTl4ZFc0dWNYRXVZMjl0TDNGeGQyVmlMM0YxYm5CeWJ5OXphR0Z5WlQ5ZmQzWTlNeVpmZDNkMlBURXlPQ1pwYm5acGRHVkRiMlJsUFRGSVJubENTaVptY205dFBUSTBOall4TUNaaWFYbzlhMkVqTDI5MWRBPT1cXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuivpue7hueCueWHu+WKoOWFpemikemBkyjlv6vmnaXljY7lsbHkuI7miJHorrpbamld5YmRKVxcXFxcXFwiLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLpl67popjlj43ppohcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwibXFxYXBpOi8vZm9yd2FyZC91cmw/c3JjX3R5cGU9d2ViJnN0eWxlPWRlZmF1bHQmcGxnX2F1dGg9MSZ2ZXJzaW9uPTEmdXJsX3ByZWZpeD1hSFIwY0hNNkx5OXhkVzR1Y1hFdVkyOXRMM0Z4ZDJWaUwzRjFibkJ5Ynk5emFHRnlaVDlmZDNZOU15WmZkM2QyUFRFeU9DWmhjSEJEYUdGdWJtVnNQWE5vWVhKbEptbHVkbWwwWlVOdlpHVTlNVmhPWVd4QlJYbDJWbW9tWTI5dWRHVnVkRWxFUFdNemJFbFFKbUoxYzJsdVpYTnpWSGx3WlQweUptWnliMjA5TVRneE1EYzBKbUpwZWoxcllTWnRZV2x1VTI5MWNtTmxTV1E5YzJoaGNtVW1jM1ZpVTI5MWNtTmxTV1E5YjNSb1pYSnpKbXAxYlhCemIzVnlZMlU5YzJodmNuUjFjbXc9JnQ9MTY3MTg5MzEyMzU5NyNJbnRlbnQ7c2NoZW1lPW1xcWFwaTtwYWNrYWdlPWNvbS50ZW5jZW50Lm1vYmlsZXFxO2VuZFxcXFxcXFwiLFxcXFxuICAgIGRlc2M6IFxcXFxcXFwi57ud5a+55LiN5Lya5pyJYnVnKOWViuaIkeS4jeaOpeWPlyEpXFxcXFxcXCIsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbn0pO1xcXFxuLypcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLmuIXpmaTlsI/or7TliIbpobXorrDlvZVcXFxcXFxcIixcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCLnoa7orqTmuIXpmaTlsI/or7TliIbpobXorrDlvZXvvJ9cXFxcXFxcIikuY29uZmlybSgoKSA9PiB7XFxcXG4gICAgICAgIGRlbGV0ZUZpbGUoXFxcXFxcXCJub3ZlbEZvb3RwcmludC5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+a4hemZpOWujOaIkFxcXFxcXFwiO1xcXFxuICAgIH0pLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiXFxcXG59KTtcXFxcbiovXFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwidGV4dF8xXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuWwj+ivtOeroOiKguWIl+ihqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJOb3ZlbEJyb3dzZXIudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmlmIChnZXRQYXJhbShcXFxcXFxcImhhc1BhcmFtc1xcXFxcXFwiKSA9PT0gXFxcXFxcXCJ0cnVlXFxcXFxcXCIpIHtcXFxcbiAgICBNWV9QQVJBTVMgPSB7XFxcXG4gICAgICAgIHBhdGg6IGRlY29kZVVSSUNvbXBvbmVudChnZXRQYXJhbShcXFxcXFxcInBhdGhcXFxcXFxcIikpLFxcXFxuICAgICAgICBuYW1lOiBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJuYW1lXFxcXFxcXCIpKVxcXFxuICAgIH1cXFxcbn1cXFxcbmxldCBwYXRoID0gTVlfUEFSQU1TLnBhdGg7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCJOVnxcXFxcXFxcIiArIE1ZX1BBUkFNUy5uYW1lKTtcXFxcbmNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IFRvb2wgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvVG9vbC5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbmNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgZm9vdDogMCxcXFxcbiAgICBpc1JlcGxhY2U6IHRydWVcXFxcbn0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIikpO1xcXFxubGV0IGlkID0gXFxcXFxcXCIjXFxcXFxcXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcXFxcbnZhciBsYXlvdXQgPSBbXTtcXFxcbmxldCBtb2RlID0gZ2V0TXlWYXIoXFxcXFxcXCIubW9kZVxcXFxcXFwiLCBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG5sZXQgbW9kZTIgPSBnZXRNeVZhcihcXFxcXFxcIi5tb2RlMlxcXFxcXFwiLCBDb25maWcuZGVmX2lzUGFnaW5hdGUpO1xcXFxuXFxcXG5sZXQgaXNSZXZlcnNlID0gZ2V0TXlWYXIoXFxcXFxcXCIuaXNSZXZlcnNlXFxcXFxcXCIsIFxcXFxcXFwiMFxcXFxcXFwiKTtcXFxcbmFkZExpc3RlbmVyKFxcXFxcXFwib25DbG9zZVxcXFxcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLm1vZGVcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5tb2RlMlxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLmlzUmV2ZXJzZVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLnBhZ2VOdW1cXFxcXFxcIik7XFxcXG59KSk7XFxcXG5cXFxcbmZ1bmN0aW9uIGdldFRpdGxlKHRpdGxlKSB7XFxcXG4gICAgbGV0IHRpdGxlcyA9IFRvb2wuc3BsaXQodGl0bGUsIFxcXFxcXFwiJFxcXFxcXFwiLCAyKTtcXFxcbiAgICByZXR1cm4gdGl0bGVzWzJdICE9PSB1bmRlZmluZWQgPyB0aXRsZXNbMl0uc2xpY2UoMCwgdGl0bGVzWzJdLmxhc3RJbmRleE9mKFxcXFxcXFwiLlxcXFxcXFwiKSkgOiB0aXRsZTtcXFxcbn1cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLliKDpmaTmlbTmnKxcXFxcXFxcIixcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCLnoa7orqTliKDpmaTmlbTmnKzlsI/or7TvvJ9cXFxcXFxcIikuY29uZmlybSgocGF0aCkgPT4ge1xcXFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxcXG4gICAgICAgICAgICBiYWNrKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sIHBhdGgpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMlxcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBbXFxcXFxcXCLnnIvlsI/or7RcXFxcXFxcIiwgXFxcXFxcXCLliKDpmaTnq6DoioJcXFxcXFxcIl1bbW9kZV0sXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKG1vZGUpID0+IHtcXFxcbiAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIubW9kZVxcXFxcXFwiLCBtb2RlID09PSBcXFxcXFxcIjBcXFxcXFxcIiA/IFxcXFxcXFwiMVxcXFxcXFwiIDogXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuICAgICAgICByZWZyZXNoUGFnZSh0cnVlKTtcXFxcbiAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG4gICAgfSwgbW9kZSksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbn0pO1xcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi4oCY4oCY5pu05aSa5Yqf6IO9ID7igJnigJlcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxufSk7XFxcXG5cXFxcbmZ1bmN0aW9uIHR4dChwYXRocykge1xcXFxuICAgIHNob3dMb2FkaW5nKFxcXFxcXFwi5q2j5Zyo5ZCI5bm2Li4uXFxcXFxcXCIpO1xcXFxuICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbiAgICBjb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1Rvb2wuanNcXFxcXFxcIik7XFxcXG4gICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuXFxcXG4gICAgbGV0IGZpbGVsaXN0ID0gRmlsZS5nZXRGaWxlUGF0aChwYXRocy5wYXRoLCBcXFxcXFxcImZpbGVcXFxcXFxcIiwgXFxcXFxcXCIudHh0XFxcXFxcXCIpO1xcXFxuICAgIGxldCBsaXN0TGVuZ3RoID0gZmlsZWxpc3QubGVuZ3RoO1xcXFxuICAgIGlmIChsaXN0TGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICAgIGhpZGVMb2FkaW5nKCk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v56m655qE56ug6IqCXFxcXFxcXCI7XFxcXG4gICAgfVxcXFxuICAgIGNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgICAgIHNlbGVjdGVkOiBbXSxcXFxcbiAgICAgICAgaXNSZXBsYWNlOiB0cnVlXFxcXG4gICAgfSwgSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aHMucGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKSk7XFxcXG4gICAgbGV0IGJ1ZmlsZWxpc3QgPSBbXTtcXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RMZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBsZXQgZmlsZSA9IGZpbGVsaXN0W2ldO1xcXFxuICAgICAgICBsZXQgZmlsZUluZm8gPSBUb29sLnNwbGl0KGZpbGUubmFtZSwgXFxcXFxcXCIkXFxcXFxcXCIsIDIpO1xcXFxuICAgICAgICBidWZpbGVsaXN0LnB1c2goe1xcXFxuICAgICAgICAgICAgbmFtZTogZmlsZUluZm9bMl0uc2xpY2UoMCwgZmlsZUluZm9bMl0ubGFzdEluZGV4T2YoXFxcXFxcXCIuXFxcXFxcXCIpKSxcXFxcbiAgICAgICAgICAgIHBhdGg6IFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgZmlsZS5wYXRoLFxcXFxuICAgICAgICAgICAgaWQ6IE51bWJlcihmaWxlSW5mb1swXSkgfHwgMFxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG4gICAgYnVmaWxlbGlzdC5zb3J0KChhLCBiKSA9PiBhLmlkIC0gYi5pZCk7XFxcXG4gICAgbGV0IGVudGlyZVBhdGggPSBwYXRocy5wYXRoLnJlcGxhY2UoQ29uZmlnLm5vdmVsUGF0aCwgQ29uZmlnLm5vdmVsRnVsbFBhdGgpICsgXFxcXFxcXCIudHh0XFxcXFxcXCI7XFxcXG4gICAgbGV0IGVudGlyZVBhdGh0byA9IGJvb2tJbmZvLmlzUmVwbGFjZSA/IGVudGlyZVBhdGggKyBcXFxcXFxcIi50bXBcXFxcXFxcIiA6IGVudGlyZVBhdGg7XFxcXG5cXFxcbiAgICBpZiAoZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgZW50aXJlUGF0aCkpIHtcXFxcbiAgICAgICAgdG9hc3QoXFxcXFxcXCLliJ3lp4vljJbmlofku7ZcXFxcXFxcIik7XFxcXG4gICAgICAgIGlmICghRmlsZS5kZWxldGVGaWxlcyhlbnRpcmVQYXRoKSkge1xcXFxuICAgICAgICAgICAgaGlkZUxvYWRpbmcoKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yid5aeL5YyW5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICB0b2FzdChcXFxcXFxcIuWIneWni+WMluaIkOWKn1xcXFxcXFwiKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcblxcXFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGlzdExlbmd0aDsgaSsrKSB7XFxcXG4gICAgICAgIGxldCBpdGVtID0gYnVmaWxlbGlzdFtpXTtcXFxcbiAgICAgICAgbGV0IGNvbnRlbnQgPSByZXF1ZXN0KGl0ZW0ucGF0aCk7XFxcXG4gICAgICAgIEZpbGUuZmlsZVdyaXRlQXBwZW5kKGVudGlyZVBhdGh0bywgaXRlbS5uYW1lICsgXFxcXFxcXCJcXFxcXFxcXG7jgIDjgIBcXFxcXFxcIiArIGNvbnRlbnQucmVwbGFjZSgvJm5ic3A7L2csXFxcXFxcXCJcXFxcXFxcIikuc3BsaXQoLyhcXFxcXFxcXG58XFxcXFxcXFxyKSsvKS5maWx0ZXIoaXQgPT4gaXQudHJpbSgpLmxlbmd0aCA+IDEpLm1hcChpdD0+aXQudHJpbSgpKS5qb2luKFxcXFxcXFwiXFxcXFxcXFxy44CA44CAXFxcXFxcXCIpICsgXFxcXFxcXCJcXFxcXFxcXG5cXFxcXFxcXG5cXFxcXFxcIik7XFxcXG4gICAgfVxcXFxuICAgIGlmIChib29rSW5mby5pc1JlcGxhY2UpIHtcXFxcbiAgICAgICAgbGV0IHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcInJlcGxhY2VSdWxlLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDtcXFxcbiAgICAgICAgbGV0IHJlcGxhY2VQYXR0ZXJuID0gW1xcXFxcXFwicmVwbGFjZVxcXFxcXFwiLCBcXFxcXFxcInJlcGxhY2VBbGxcXFxcXFxcIl07XFxcXG4gICAgICAgIGxldCBmbGFnID0gRmlsZS5maWxlUnVsZShlbnRpcmVQYXRodG8sIGVudGlyZVBhdGgsIChqYXZhU3RyaW5nKSA9PiB7XFxcXG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaV07XFxcXG4gICAgICAgICAgICAgICAgaWYgKCFib29rSW5mby5zZWxlY3RlZC5pbmNsdWRlcyhyZXBsYWNlUnVsZS5pZCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGxldCByZXBsYWNlID0gcmVwbGFjZVBhdHRlcm5bMCArIHJlcGxhY2VSdWxlLmlzUmVnZXhdO1xcXFxuICAgICAgICAgICAgICAgIGphdmFTdHJpbmcgPSBqYXZhU3RyaW5nW3JlcGxhY2VdKHJlcGxhY2VSdWxlLnBhdHRlcm4sIHJlcGxhY2VSdWxlLnJlcGxhY2VtZW50KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHJldHVybiBqYXZhU3RyaW5nLmdldEJ5dGVzKCk7XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBpZiAoIWZsYWcpIHtcXFxcbiAgICAgICAgICAgIGhpZGVMb2FkaW5nKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WQiOW5tuWksei0pVxcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICB9XFxcXG4gICAgaGlkZUxvYWRpbmcoKTtcXFxcbiAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WQiOW5tuWujOaIkFxcXFxcXFwiO1xcXFxufVxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuWQiOW5tuWwj+ivtFxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIuehruWumuWQiOW5tj9cXFxcXFxcXG7kvJropobnm5blt7LmnIlUWFRcXFxcXFxcIikuY29uZmlybSh0eHQsIE1ZX1BBUkFNUyksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwic2Nyb2xsX2J1dHRvblxcXFxcXFwiXFxcXG59KTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogW1xcXFxcXFwi4piQ5YiG6aG1XFxcXFxcXCIsIFxcXFxcXFwi4piR5YiG6aG1XFxcXFxcXCJdW21vZGUyXSxcXFxcbiAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgobW9kZTIpID0+IHtcXFxcbiAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIubW9kZTJcXFxcXFxcIiwgbW9kZTIgPT09IFxcXFxcXFwiMFxcXFxcXFwiID8gXFxcXFxcXCIxXFxcXFxcXCIgOiBcXFxcXFxcIjBcXFxcXFxcIik7XFxcXG4gICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSwgbW9kZTIpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5YeA5YyWXFxcXFxcXCIsXFxcXG4gICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9Ob3ZlbEN1c3RvbS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IE1ZX1BBUkFNUyxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJzY3JvbGxfYnV0dG9uXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuWklumDqOafpeeci1xcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxcXG4gICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IGVudGlyZVBhdGggPSBwYXRoLnJlcGxhY2UoQ29uZmlnLm5vdmVsUGF0aCwgQ29uZmlnLm5vdmVsRnVsbFBhdGgpICsgXFxcXFxcXCIudHh0XFxcXFxcXCI7XFxcXG4gICAgICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBlbnRpcmVQYXRoKSkge1xcXFxuICAgICAgICAgICAgdG9hc3QoXFxcXFxcXCLosIPnlKjnrKzkuInmlrnlupTnlKjmiZPlvIDmlofku7ZcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFxcXFxcIiArIGVudGlyZVBhdGhcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5pys5Zyw5pqC5peg5Y+v5L6b5aSW6YOo5omT5byA55qEdHh05paH5Lu277yM6K+35YWI5ZCI5bm25bCP6K+077yBXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0sIHBhdGgpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInNjcm9sbF9idXR0b25cXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG59KTtcXFxcblxcXFxubGV0IG1obGlzdCA9IEZpbGUuZ2V0RmlsZVBhdGgocGF0aCwgXFxcXFxcXCJmaWxlXFxcXFxcXCIsIFxcXFxcXFwiLnR4dFxcXFxcXFwiKTtcXFxcbm1obGlzdC5zb3J0KChhLCBiKSA9PiB7XFxcXG4gICAgYSA9IChhLm5hbWUubWF0Y2goL1xcXFxcXFxcZCsvKSB8fCBbXSlbMF0gfHwgMDtcXFxcbiAgICBiID0gKGIubmFtZS5tYXRjaCgvXFxcXFxcXFxkKy8pIHx8IFtdKVswXSB8fCAwO1xcXFxuICAgIHJldHVybiBhIC0gYjtcXFxcbn0pO1xcXFxubGV0IGNoYXB0ZXJMaXN0ID0gW107XFxcXG5sZXQgY2hhcHRlckNvdW50ID0gbWhsaXN0Lmxlbmd0aDtcXFxcblxcXFxuaWYgKG1vZGUyID09PSBcXFxcXFxcIjFcXFxcXFxcIikge1xcXFxuICAgIGxldCBtaGxpc3RDaHVuayA9IFRvb2wuY2h1bmsobWhsaXN0LCBDb25maWcudmlld1BhZ2VTaXplKTtcXFxcbiAgICBsZXQgdmlld1BhZ2VDb3VudCA9IG1obGlzdENodW5rLmxlbmd0aDtcXFxcbiAgICBsZXQgZGVmUGFnZSA9ICh2aWV3UGFnZUNvdW50IC0gMSA8IGJvb2tJbmZvLmZvb3QgPyAwIDogYm9va0luZm8uZm9vdCkgfHwgMDtcXFxcbiAgICBsZXQgcGFnZU51bSA9IE51bWJlcihnZXRNeVZhcihcXFxcXFxcIi5wYWdlTnVtXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIgKyBkZWZQYWdlKSk7XFxcXG4gICAgY2hhcHRlckxpc3QgPSBtaGxpc3RDaHVua1twYWdlTnVtXSB8fCBbXTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLnq6DoioIgXFxcXFxcXCIuYmlnKCkgKyAoXFxcXFxcXCLmnKzpobU6XFxcXFxcXCIgKyBjaGFwdGVyTGlzdC5sZW5ndGggKyBcXFxcXFxcIiDlhbHmnIk6XFxcXFxcXCIgKyBjaGFwdGVyQ291bnQgKyBcXFxcXFxcIueroCDlvZPliY06XFxcXFxcXCIgKyAocGFnZU51bSArIDEpICsgXFxcXFxcXCIvXFxcXFxcXCIgKyB2aWV3UGFnZUNvdW50KS5zbWFsbCgpLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5pc1JldmVyc2VcXFxcXFxcIiwgaXNSZXZlcnNlID09PSBcXFxcXFxcIjBcXFxcXFxcIiA/IFxcXFxcXFwiMVxcXFxcXFwiIDogXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICAgICAgfSwgaXNSZXZlcnNlKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIui3s+mbhlxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoY2hhcHRlckNvdW50LCBcXFxcXFxcIui+k+WFpei3s+i9rOeroOiKgiAxLVxcXFxcXFwiICsgY2hhcHRlckNvdW50KS5pbnB1dCgoY2hhcHRlckNvdW50LCBwYWdlTnVtLCB2aWV3UGFnZVNpemUsIHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IE51bWJlcihpbnB1dCk7XFxcXG4gICAgICAgICAgICBpZiAoTnVtYmVyLmlzTmFOKGlucHV0TnVtKSB8fCBpbnB1dE51bSA8IDAgfHwgaW5wdXROdW0gPiBjaGFwdGVyQ291bnQpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ivt+i+k+WFpeato+ehruiMg+WbtOWGheeahOaVsOWtl1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgaW5wdXROdW0gPSBNYXRoLmZsb29yKChpbnB1dE51bSArIHZpZXdQYWdlU2l6ZSkgLyB2aWV3UGFnZVNpemUpIC0gMTtcXFxcbiAgICAgICAgICAgIGlmIChwYWdlTnVtID09PSBpbnB1dE51bSkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/mraPlnKjlvZPliY3pobXpnaJcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnBhZ2VOdW1cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIiArIGlucHV0TnVtKTtcXFxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGgsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgIH0sIGNoYXB0ZXJDb3VudCwgcGFnZU51bSwgQ29uZmlnLnZpZXdQYWdlU2l6ZSwgcGF0aCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfNVxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLot7PpobVcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKHBhZ2VOdW0gKyAxLCBcXFxcXFxcIui3s+i9rOmhteaVsCAxLVxcXFxcXFwiICsgdmlld1BhZ2VDb3VudCkuaW5wdXQoKHZpZXdQYWdlQ291bnQsIHBhZ2VOdW0sIHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IE51bWJlcihpbnB1dCkgLSAxO1xcXFxuICAgICAgICAgICAgaWYgKE51bWJlci5pc05hTihpbnB1dE51bSkgfHwgaW5wdXROdW0gPCAwIHx8IGlucHV0TnVtID4gdmlld1BhZ2VDb3VudCAtIDEpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ivt+i+k+WFpeato+ehruiMg+WbtOWGheeahOaVsOWtl1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgaWYgKHBhZ2VOdW0gPT09IGlucHV0TnVtKSByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+ato+WcqOW9k+WJjemhtemdolxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIucGFnZU51bVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgaW5wdXROdW0pO1xcXFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgYm9va0luZm8uZm9vdCA9IGlucHV0TnVtO1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgfSwgdmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCksXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfNVxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLkuIrkuIDpobVcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHBhZ2VOdW0sIHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgIGxldCBpbnB1dE51bSA9IHBhZ2VOdW0gLSAxO1xcXFxuICAgICAgICAgICAgaWYgKGlucHV0TnVtIDwgMCkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5bey57uP5piv56ys5LiA6aG15LqGXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5wYWdlTnVtXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIgKyBpbnB1dE51bSk7XFxcXG4gICAgICAgICAgICBjb25zdCBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICB9LCBwYWdlTnVtLCBwYXRoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF81XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuS4i+S4gOmhtVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgodmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gcGFnZU51bSArIDE7XFxcXG4gICAgICAgICAgICBpZiAoaW5wdXROdW0gPiB2aWV3UGFnZUNvdW50IC0gMSkge1xcXFxuICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5bey57uP5piv5pyA5ZCO5LiA6aG15LqGXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5wYWdlTnVtXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIgKyBpbnB1dE51bSk7XFxcXG4gICAgICAgICAgICBjb25zdCBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBib29rSW5mby5mb290ID0gaW5wdXROdW07XFxcXG4gICAgICAgICAgICB3cml0ZUZpbGUoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShib29rSW5mbykpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UoZmFsc2UpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICB9LCB2aWV3UGFnZUNvdW50LCBwYWdlTnVtLCBwYXRoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF81XFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuacq+mhtVxcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgodmlld1BhZ2VDb3VudCwgcGFnZU51bSwgcGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IGlucHV0TnVtID0gdmlld1BhZ2VDb3VudCAtIDE7XFxcXG4gICAgICAgICAgICBpZiAocGFnZU51bSA9PT0gaW5wdXROdW0gfHwgaW5wdXROdW0gPT09IC0xKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7Lnu4/mmK/mnIDlkI7kuIDpobXkuoZcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiLnBhZ2VOdW1cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIiArIGlucHV0TnVtKTtcXFxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gSlNPTi5wYXJzZShyZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGJvb2tJbmZvLmZvb3QgPSBpbnB1dE51bTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIHZpZXdQYWdlQ291bnQsIHBhZ2VOdW0sIHBhdGgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzVcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxufSBlbHNlIHtcXFxcbiAgICBjaGFwdGVyTGlzdCA9IG1obGlzdDtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnVxcXFxcXFwiICsgXFxcXFxcXCLnq6DoioIgXFxcXFxcXCIuYmlnKCkgKyAoXFxcXFxcXCLlhbHmnIk6XFxcXFxcXCIgKyBjaGFwdGVyQ291bnQgKyBcXFxcXFxcIueroFxcXFxcXFwiKS5zbWFsbCgpLFxcXFxuICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgoaXNSZXZlcnNlKSA9PiB7XFxcXG4gICAgICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5pc1JldmVyc2VcXFxcXFxcIiwgaXNSZXZlcnNlID09PSBcXFxcXFxcIjBcXFxcXFxcIiA/IFxcXFxcXFwiMVxcXFxcXFwiIDogXFxcXFxcXCIwXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgcmVmcmVzaFBhZ2UodHJ1ZSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCJcXFxcbiAgICAgICAgfSwgaXNSZXZlcnNlKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbn1cXFxcbmxldCBhcnJheSA9IFtdO1xcXFxuaWYgKG1vZGUgPT09IFxcXFxcXFwiMFxcXFxcXFwiKSB7XFxcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBjaGFwdGVyTGlzdCkge1xcXFxuICAgICAgICBsZXQgbmFtZSA9IGdldFRpdGxlKGl0ZW0ubmFtZSk7XFxcXG4gICAgICAgIGFycmF5LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL05vdmVsTWFpbkJvZHkjYXV0b1BhZ2UjI3JlYWRUaGVtZSNcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgcGF0aDogaXRlbS5wYXRoLFxcXFxuICAgICAgICAgICAgICAgIGRpclBhdGg6IHBhdGgsXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IENvbmZpZy5kZWZfVmlld19TdHlsZVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG59IGVsc2Uge1xcXFxuICAgIGZvciAobGV0IGl0ZW0gb2YgY2hhcHRlckxpc3QpIHtcXFxcbiAgICAgICAgbGV0IG5hbWUgPSBnZXRUaXRsZShpdGVtLm5hbWUpO1xcXFxuICAgICAgICBhcnJheS5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBuYW1lLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5Yig6ZmkW1xcXFxcXFwiICsgbmFtZSArIFxcXFxcXFwiXe+8n1xcXFxcXFwiKS5jb25maXJtKChwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKHRydWUpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSwgaXRlbS5wYXRoKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBDb25maWcuZGVmX1ZpZXdfU3R5bGVcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxufVxcXFxuaWYgKGlzUmV2ZXJzZSA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICBhcnJheS5yZXZlcnNlKCk7XFxcXG59XFxcXG5sYXlvdXQucHVzaC5hcHBseShsYXlvdXQsIGFycmF5KTtcXFxcbnNldFJlc3VsdChsYXlvdXQpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuWwj+ivtOato+aWh+mYheivu1xcXCIsXFxcInBhdGhcXFwiOlxcXCJOb3ZlbE1haW5Cb2R5XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxudmFyIGxheW91dCA9IFtdO1xcXFxubGV0IGNvbnRlbnQgPSByZXF1ZXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgTVlfUEFSQU1TLnBhdGgpO1xcXFxuLy9jb250ZW50ID0gY29udGVudC5yZXBsYWNlKC9cXFxcXFxcXG58XFxcXFxcXFxyL2csIFxcXFxcXFwiPGJyPlxcXFxcXFwiKS5yZXBsYWNlKC8oJm5ic3A7KSsvZyxcXFxcXFxcIiBcXFxcXFxcIik7XFxcXG5jb25zdCBib29rSW5mbyA9IE9iamVjdC5hc3NpZ24oe1xcXFxuICAgIHNlbGVjdGVkOiBbXSxcXFxcbiAgICBpc1JlcGxhY2U6IHRydWVcXFxcbn0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIE1ZX1BBUkFNUy5kaXJQYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpKTtcXFxcbmNvbnRlbnQgPSBcXFxcXFxcIuOAgOOAgFxcXFxcXFwiICsgY29udGVudC5zcGxpdCgvKFxcXFxcXFxcbnxcXFxcXFxcXHIpKy8pLmZpbHRlcihpdCA9PiBpdC50cmltKCkubGVuZ3RoID4gMSkubWFwKGl0PT5pdC50cmltKCkpLmpvaW4oXFxcXFxcXCI8YnI+44CA44CAXFxcXFxcXCIpO1xcXFxuXFxcXG5pZiAoYm9va0luZm8uaXNSZXBsYWNlKSB7XFxcXG4gICAgbGV0IGphdmFTdHJpbmcgPSBqYXZhLmxhbmcuU3RyaW5nKGNvbnRlbnQpO1xcXFxuICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgbGV0IHJlcGxhY2VQYXR0ZXJuID0gW1xcXFxcXFwicmVwbGFjZVxcXFxcXFwiLCBcXFxcXFxcInJlcGxhY2VBbGxcXFxcXFxcIl07XFxcXG4gICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgIGxldCByZXBsYWNlUnVsZSA9IHJ1bGVMaXN0W2ldO1xcXFxuICAgICAgICBpZiAoIWJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKSkge1xcXFxuICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGV0IHJlcGxhY2UgPSByZXBsYWNlUGF0dGVyblswICsgcmVwbGFjZVJ1bGUuaXNSZWdleF07XFxcXG4gICAgICAgIGphdmFTdHJpbmcgPSBqYXZhU3RyaW5nW3JlcGxhY2VdKHJlcGxhY2VSdWxlLnBhdHRlcm4sIHJlcGxhY2VSdWxlLnJlcGxhY2VtZW50KTtcXFxcbiAgICB9XFxcXG4gICAgY29udGVudCA9IFN0cmluZyhqYXZhU3RyaW5nKTtcXFxcbn1cXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiLFxcXFxuICAgIHRpdGxlOiAoXFxcXFxcXCI8c3Ryb25nPlxcXFxcXFwiICsgTVlfUEFSQU1TLnRpdGxlICsgXFxcXFxcXCI8L3N0cm9uZz5cXFxcXFxcIikuYmlnKCksXFxcXG59KTtcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBjb250ZW50LFxcXFxuICAgIGNvbF90eXBlOiAncmljaF90ZXh0JyxcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICB0ZXh0U2l6ZTogMTgsXFxcXG4gICAgICAgIGNsaWNrOiB0cnVlXFxcXG4gICAgfVxcXFxufSk7XFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwidGV4dF8xXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuWQiOW5tlRYVFxcXCIsXFxcInBhdGhcXFwiOlxcXCJOb3ZlbENvbGxlY3RlZC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxubGV0IHJ1bGVsRGlyID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWcubm92ZWxGdWxsUGF0aCwgXFxcXFxcXCJkaXJcXFxcXFxcIik7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLlkIjlubZUWFRcXFxcXFxcIik7XFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5cXFxcbmZ1bmN0aW9uIG9wZXJhdGlvbihwYXRoKSB7XFxcXG4gICAgc3dpdGNoIChpbnB1dCkge1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5YiG5LqrXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJzaGFyZTovL1xcXFxcXFwiICsgcGF0aDtcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5rW36ZiU6aKE6KeIXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL3BhZ2UvdHh0UGFyc2VyLnZpZXdcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIGJyZWFrO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFxcXFxcIiArIHBhdGg7XFxcXG4gICAgICAgICAgICBicmVhaztcXFxcbiAgICB9XFxcXG59XFxcXG5mb3IgKGxldCBydWxlUGF0aHMgb2YgcnVsZWxEaXIpIHtcXFxcbiAgICBsZXQgbm92ZWxzID0gRmlsZS5nZXRGaWxlUGF0aChydWxlUGF0aHMucGF0aCwgXFxcXFxcXCJmaWxlXFxcXFxcXCIsIFxcXFxcXFwiLnR4dFxcXFxcXFwiKTtcXFxcbiAgICBmb3IgKGxldCBub3ZlbCBvZiBub3ZlbHMpIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5vdmVsLm5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6ICQoW1xcXFxcXFwi5YiG5LqrXFxcXFxcXCIsIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCIsIFxcXFxcXFwi5rW36ZiU6aKE6KeIXFxcXFxcXCIsIFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCJdLCAxKS5zZWxlY3Qob3BlcmF0aW9uLCBub3ZlbC5wYXRoKSxcXFxcbiAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi5p2l5rqQ77yaXFxcXFxcXCIgKyBydWxlUGF0aHMubmFtZSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBub3ZlbC5wYXRoXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbn1cXFxcbmlmIChsYXlvdXQubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogJzxoMSBzdHlsZT1cXFxcXFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFxcXFxcIj7llaXpg73msqHmnInogLY8L2gxPicsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG59XFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7mm7TlpJrorr7nva5cXFwiLFxcXCJwYXRoXFxcIjpcXFwiU2V0dGluZy9Nb3JlLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG5jb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG5cXFxcbmNvbnN0IHNldHRpbmdUeXBlID0gTVlfUEFSQU1TLnNldHRpbmdUeXBlIHx8IGdldFBhcmFtKFxcXFxcXFwic2V0dGluZ1R5cGVcXFxcXFxcIik7XFxcXG5cXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcbmxldCBpZCA9IFxcXFxcXFwiI1xcXFxcXFwiICsgbmV3IERhdGUoKS5nZXRUaW1lKCk7XFxcXG5zd2l0Y2ggKHNldHRpbmdUeXBlKSB7XFxcXG4gICAgY2FzZSBcXFxcXFxcImNhY2hlXFxcXFxcXCI6XFxcXG4gICAgICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIua4hemZpOe8k+WtmHzorr7nva5cXFxcXFxcIik7XFxcXG4gICAgICAgIGNvbnN0IGtub3duTGlzdCA9IG5ldyBNYXAoW1xcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcubm92ZWxQYXRoKSwgXFxcXFxcXCIj566h55CG5ZmoI+Wwj+ivtOe8k+WtmOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcuY29taWNQYXRoKSwgXFxcXFxcXCIj566h55CG5ZmoI+a8q+eUu+e8k+WtmOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcuZXh0ZXJuYWxJbXBvcnRQYXRoKSwgXFxcXFxcXCIj566h55CG5ZmoI+WvvOWFpeeahFRYVOebruW9lVvkuI3lu7rorq7muIXpmaRdXFxcXFxcXCJdLFxcXFxuICAgICAgICAgICAgW0ZpbGUuZ2V0TmFtZShDb25maWcubm92ZWxGdWxsUGF0aCksIFxcXFxcXFwiI+euoeeQhuWZqCPlsI/or7TlkIjlubbnm67lvZVb5Y+v5Lul5riF6ZmkXVxcXFxcXFwiXSxcXFxcbiAgICAgICAgICAgIFtcXFxcXFxcImRy56ug6IqC57yT5a2YXFxcXFxcXCIsIFxcXFxcXFwi6YGT6ZW/5qih5p2/5Li05pe257yT5a2YW+W7uuiurua4hemZpF1cXFxcXFxcIl1cXFxcbiAgICAgICAgXSk7XFxcXG5cXFxcbiAgICAgICAgbGV0IGNhY2hlRGlyID0gRmlsZS5nZXRGaWxlUGF0aChDb25maWcuaG9tZVBhdGgsIFxcXFxcXFwiZGlyXFxcXFxcXCIpO1xcXFxuXFxcXG4gICAgICAgIGZ1bmN0aW9uIGNsZWFuQ2FjaGUocGF0aCkge1xcXFxuICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/muIXpmaTlrozmiJBcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/muIXpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBmb3IgKGxldCBjYWNoZSBvZiBjYWNoZURpcikge1xcXFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBjYWNoZS5uYW1lLFxcXFxuICAgICAgICAgICAgICAgIGRlc2M6IFxcXFxcXFwi5aSn5bCP77yaXFxcXFxcXCIgKyBGaWxlLmdldEZpbGVTaXplKGNhY2hlLnBhdGgpICsgXFxcXFxcXCJcXFxcXFxcXG7mj4/ov7DvvJpcXFxcXFxcIiArIChrbm93bkxpc3QuZ2V0KGNhY2hlLm5hbWUpIHx8IFxcXFxcXFwi5pyq55+l55uu5b2VW+mjjumZqeacquefpV1cXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5riF6ZmkIFxcXFxcXFwiICsgY2FjaGUubmFtZSArIFxcXFxcXFwiID9cXFxcXFxcIikuY29uZmlybShjbGVhbkNhY2hlLCBjYWNoZS5wYXRoKVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLlhajpg6jmuIXpmaQoXFxcXFxcXCIgKyBGaWxlLmdldEZpbGVTaXplKENvbmZpZy5ob21lUGF0aCkgKyBcXFxcXFxcIilcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogJChcXFxcXFxcIuehruiupOa4hemZpOWFqOmDqOe8k+WtmOaVsOaNrj9cXFxcXFxcIikuY29uZmlybShjbGVhbkNhY2hlLCBDb25maWcuaG9tZVBhdGgpXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwiZGVmYXVsdFBpY1xcXFxcXFwiOlxcXFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcXFxcXCLpu5jorqTlsIHpnaJ86K6+572uXFxcXFxcXCIpO1xcXFxuICAgICAgICBpZiAoZ2V0TXlWYXIoXFxcXFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFxcXFxcIikpIHtcXFxcbiAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgIGNsZWFyTXlWYXIoXFxcXFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGZ1bmN0aW9uIHNldERlZmF1bHRQaWModXJsKSB7XFxcXG4gICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIDApIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IHVybDtcXFxcbiAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxcXG4gICAgICAgICAgICBiYWNrKCk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxldCBzdGFydCA9IDE7XFxcXG4gICAgICAgIGlmICh0eXBlb2YoTVlfTkFNRSkgIT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgJiYgTVlfTkFNRSA9PT0gXFxcXFxcXCLll4Xop4nmtY/op4jlmahcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgc3RhcnQgPSA0O1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGZvciAobGV0IGkgPSBzdGFydDsgaSA8PSA0OyBpKyspIHtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLlm77niYdcXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibW92aWVfM1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHBpY191cmw6IFxcXFxcXFwiaGlrZXI6Ly9pbWFnZXMvaG9tZV9waWNcXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoc2V0RGVmYXVsdFBpYywgXFxcXFxcXCJoaWtlcjovL2ltYWdlcy9ob21lX3BpY1xcXFxcXFwiICsgaSlcXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuiHquWumuS5ieKelVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6ICQoW1xcXFxcXFwi6Ieq5a6a5LmJdXJsXFxcXFxcXCIsIFxcXFxcXFwi6YCJ5oup5paH5Lu26Lev5b6EXFxcXFxcXCJdKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXFxcXFxcXCLoh6rlrprkuYl1cmxcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFxcXFxcIlxcXFxcXFwiLCBcXFxcXFxcIui+k+WFpeWbvueJh+eahOi3r+W+hOaIluiAhemTvuaOpVxcXFxcXFwiKS5pbnB1dCgoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgQ29uZmlnID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIDApIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBDb25maWcuZGVmX1BpYyA9IGlucHV0O1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgc2F2ZUZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShDb25maWcpLCAwKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5L+u5pS55oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcXFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlU2VsZWN0ID0gcmVxdWlyZShyZXF1aXJlVXJsKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGV0IENvbmZpZyA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJjb25maWcuanNvblxcXFxcXFwiLCAwKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbmZpZy5kZWZfUGljID0gXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBQQVRIO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoQ29uZmlnKSwgMCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCI6ZGVmYXVsdFBpY0JhY2tcXFxcXFxcIiwgXFxcXFxcXCJ0cnVlXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/ruaUueaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSksXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXF1aXJlVXJsOiByZXF1aXJlVXJsLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGU6IFxcXFxcXFwiLmpwZ3wuanBlZ3wuZ2lmfC5wbmd8LnN2Z3wuYm1wXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcXFxcXCJjb25maXJtXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBtZW1vcnk6IFxcXFxcXFwic2VsZWN0UGF0aENhY2hlMlxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwicmVwbGFjZVJ1bGVcXFxcXFxcIjpcXFxcbiAgICAgICAgaWYgKE1ZX1BBUkFNUy5pc1JlZnJlc2gpIHtcXFxcbiAgICAgICAgICAgIGFkZExpc3RlbmVyKFxcXFxcXFwib25DbG9zZVxcXFxcXFwiLCAkLnRvU3RyaW5nKCgpID0+IHJlZnJlc2hQYWdlKCkpKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBzZXRQYWdlVGl0bGUoXFxcXFxcXCLmm7/mjaLop4TliJl86K6+572uXFxcXFxcXCIpO1xcXFxuICAgICAgICBsZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLmlrDlu7rmm7/mjaJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvZWRpdFJlcGxhY2VSdWxlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/aXNOZXc9dHJ1ZVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWvvOWHuuinhOWImVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwi56Gu6K6k5a+85Ye6XFxcXFxcXCIgKyBydWxlTGlzdC5sZW5ndGggKyBcXFxcXFxcIuadoeinhOWIme+8n1xcXFxcXFxcbih7aG9tZVB0YWh9L3JlcGxhY2VSdWxlLmpzb24pXFxcXFxcXCIpLmNvbmZpcm0oKG51bSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBsZXQgc2F2ZVB0YSA9IENvbmZpZy5ob21lUGF0aCArIFxcXFxcXFwiL3JlcGxhY2VSdWxlLmpzb25cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB3cml0ZUZpbGUoc2F2ZVB0YSwgcmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgbG9nKFxcXFxcXFwiXFxcXFxcXFxu6Lev5b6E77yaXFxcXFxcXCIgKyBzYXZlUHRhICsgXFxcXFxcXCJcXFxcXFxcXG7lr7zlh7rop4TliJkgXFxcXFxcXCIgKyBudW0gKyBcXFxcXFxcIiDmnaFcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwic2hhcmU6Ly9cXFxcXFxcIiArIHNhdmVQdGE7XFxcXG4gICAgICAgICAgICB9LCBydWxlTGlzdC5sZW5ndGgpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG5cXFxcbiAgICAgICAgZnVuY3Rpb24gaW1wb3J0UnVsZShpc2JhY2spIHtcXFxcbiAgICAgICAgICAgIGlucHV0ID0gdHlwZW9mIFBBVEggPT09IFxcXFxcXFwidW5kZWZpbmVkXFxcXFxcXCIgPyBpbnB1dCA6IFBBVEg7XFxcXG4gICAgICAgICAgICBpbnB1dCA9IGlucHV0LnN0YXJ0c1dpdGgoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIpID8gaW5wdXQgOiBcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIGlucHV0XFxcXG4gICAgICAgICAgICBsZXQgcnVsZVRleHQgPSByZXF1ZXN0KGlucHV0KTtcXFxcbiAgICAgICAgICAgIGlmICghcnVsZVRleHQpIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v6I635Y+W5paH5Lu25Li656m6XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgICAgIGxldCBuZXdSdWxlTGlzdCA9IEpTT04ucGFyc2UocnVsZVRleHQpO1xcXFxuICAgICAgICAgICAgICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgbGV0IG5ld0NvdW50ID0gMCxcXFxcbiAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ291bnQgPSAwO1xcXFxuICAgICAgICAgICAgICAgIGZvciAobGV0IGkgaW4gbmV3UnVsZUxpc3QpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IG5ld1J1bGUgPSBuZXdSdWxlTGlzdFtpXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKCFuZXdSdWxlLmhhc093blByb3BlcnR5KFxcXFxcXFwicmVwbGFjZW1lbnRcXFxcXFxcIikgfHwgIW5ld1J1bGUuaGFzT3duUHJvcGVydHkoXFxcXFxcXCJwYXR0ZXJuXFxcXFxcXCIpIHx8ICFuZXdSdWxlLmhhc093blByb3BlcnR5KFxcXFxcXFwibmFtZVxcXFxcXFwiKSB8fCAobmV3UnVsZS5zY29wZUNvbnRlbnQgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogIW5ld1J1bGUuc2NvcGVDb250ZW50KSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGlkID0gbmV3UnVsZS5pZDtcXFxcbiAgICAgICAgICAgICAgICAgICAgbmV3UnVsZS5pZCA9IGlkIHx8IG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgaWRJbmRleCA9IHJ1bGVMaXN0LmZpbmRJbmRleChydWxlID0+IHJ1bGUuaWQgPT09IGlkKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGlkSW5kZXggPiAtMSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgdXBkYXRlQ291bnQrKztcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJ1bGVMaXN0LnNwbGljZShpZEluZGV4LCAxLCBuZXdSdWxlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIG5ld0NvdW50Kys7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBydWxlTGlzdC5wdXNoKG5ld1J1bGUpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShydWxlTGlzdCkpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpc2JhY2spIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIGxvZyhcXFxcXFxcIlxcXFxcXFxcbui3r+W+hO+8mlxcXFxcXFwiICsgaW5wdXQgKyBcXFxcXFxcIlxcXFxcXFxcbuaAu+inhOWImeaVsO+8mlxcXFxcXFwiICsgbmV3UnVsZUxpc3QubGVuZ3RoICsgXFxcXFxcXCJcXFxcXFxcXG7mm7TmlrDop4TliJkgXFxcXFxcXCIgKyB1cGRhdGVDb3VudCArIFxcXFxcXFwiIOadoVxcXFxcXFxcdOaWsOWinuinhOWImSBcXFxcXFxcIiArIG5ld0NvdW50ICsgXFxcXFxcXCIg5p2hXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5a+85YWl5oiQ5YqfXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgICAgIGxvZyhlLnRvU3RyaW5nKCkpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpc2JhY2spIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICB0b2FzdChcXFxcXFxcIuWvvOWFpeWksei0pVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLlr7zlhaXop4TliJlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogJChbXFxcXFxcXCLlpJbpg6jmlofku7ZcXFxcXFxcIiwgXFxcXFxcXCLlhoXpg6jmlofku7ZcXFxcXFxcIl0sIDEsIFxcXFxcXFwi6KeE5YiZ5a+85YWlXFxcXFxcXCIpLnNlbGVjdCgoaW1wb3J0UnVsZSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dCA9PT0gXFxcXFxcXCLlpJbpg6jmlofku7ZcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJmaWxlU2VsZWN0Oi8vXFxcXFxcXCIgKyAkLnRvU3RyaW5nKGltcG9ydFJ1bGUpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCByZXF1aXJlVXJsID0gXFxcXFxcXCJodHRwOi8vaGlrZXIubm9raWEucHJlc3MvaGlrZXJ1bGUvcnVsZWxpc3QuanNvbj9pZD01MDk5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlU2VsZWN0ID0gcmVxdWlyZShyZXF1aXJlVXJsKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIGZpbGVTZWxlY3QuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjYWxsYmFjazogJC50b1N0cmluZyhpbXBvcnRSdWxlLCB0cnVlKSxcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlcXVpcmVVcmw6IHJlcXVpcmVVcmwsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBmaWxlVHlwZTogXFxcXFxcXCIuanNvblxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgb25DbGlja1R5cGU6IFxcXFxcXFwiY29uZmlybVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbWVtb3J5OiBcXFxcXFxcInNlbGVjdFBhdGhDYWNoZVxcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0sIGltcG9ydFJ1bGUpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgICAgICAgICBsZXQgcmVwbGFjZVJ1bGUgPSBydWxlTGlzdFtpXTtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIi5cXFxcXFxcIiArIGksXFxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWIoOmZpFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChpZCwgaW5kZXgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdmFyIHJ1bGVMaXN0ID0gSlNPTi5wYXJzZShyZWFkRmlsZShcXFxcXFxcInJlcGxhY2VSdWxlLmpzb25cXFxcXFxcIikgfHwgXFxcXFxcXCJbXVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IGcgPSBydWxlTGlzdC5zcGxpY2UoaW5kZXgsIDEpO1xcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIHNhdmVGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiLCBKU09OLnN0cmluZ2lmeShydWxlTGlzdCkpO1xcXFxuICAgICAgICAgICAgICAgICAgICAvL2RlbGV0ZUl0ZW1CeUNscyhpZCArIFxcXFxcXFwiLlxcXFxcXFwiICsgaW5kZXgpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRvYXN0KFxcXFxcXFwi5Yig6Zmk5oiQ5YqfXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgfSwgaWQsIGkpLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIi5cXFxcXFxcIiArIGlcXFxcbiAgICAgICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMlxcXFxcXFwiXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLnvJbovpFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL2VkaXRSZXBsYWNlUnVsZS52aWV3I25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5IyNub1JlZnJlc2gjP2luZGV4PVxcXFxcXFwiICsgaSxcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBjbHM6IGlkICsgXFxcXFxcXCIuXFxcXFxcXCIgKyBpXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGNsczogaWQgKyBcXFxcXFxcIi5cXFxcXFxcIiArIGlcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBicmVhaztcXFxcbiAgICBjYXNlIFxcXFxcXFwiY29udGVudHNcXFxcXFxcIjpcXFxcbiAgICAgICAgbGV0IGYgPSByZXF1aXJlKFxcXFxcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXFxcXFwiKTtcXFxcbiAgICAgICAgc2V0UGFnZVRpdGxlKFxcXFxcXFwi55uu5b2V6K6+572ufOiuvue9rlxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6YCJ5oup5paH5Lu25aS5XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IEpTT04uc3RyaW5naWZ5KGYuZmlsZVNlbGVjdGlvblVyaSh7XFxcXG4gICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKGlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0YXJnZXQgPSBmaW5kSXRlbShpZCkuZXh0cmE7XFxcXG4gICAgICAgICAgICAgICAgICAgIHVwZGF0ZUl0ZW0oaWQsIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGV4dHJhOiBPYmplY3QuYXNzaWduKHRhcmdldCwge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogUEFUSFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSlcXFxcbiAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xcXFxuICAgICAgICAgICAgICAgIH0sIGlkKSxcXFxcbiAgICAgICAgICAgICAgICBpbml0aWFsUGF0aDogQ29uZmlnLmhvbWVQYXRoLFxcXFxuICAgICAgICAgICAgICAgIHJlcXVpcmVVcmw6IFxcXFxcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHBhdHRlcm46IDFcXFxcbiAgICAgICAgICAgIH0pKSxcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImlucHV0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBkZXNjOiBcXFxcXFxcIuaUr+aMgWhpa2VyOi8vZmlsZXPot6/lvoQo6K+l5pON5L2c5LiN5Lya5Yid5aeL5YyW55uu5b2VKVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBkZWZhdWx0VmFsdWU6IENvbmZpZy5ob21lUGF0aCxcXFxcbiAgICAgICAgICAgICAgICBvbkNoYW5nZTogJC50b1N0cmluZygoaWQpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgcHV0TXlWYXIoaWQsIGlucHV0KTtcXFxcbiAgICAgICAgICAgICAgICB9LCBpZCksXFxcXG4gICAgICAgICAgICAgICAgaWQ6IGlkXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuehruiupFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGlkKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgbGV0IGlucHV0ID0gZ2V0TXlWYXIoaWQsIGZpbmRJdGVtKGlkKS5leHRyYS5kZWZhdWx0VmFsdWUgfHwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgIGlmIChpbnB1dC5zdGFydHNXaXRoKFxcXFxcXFwiaGlrZXI6Ly9maWxlcy9cXFxcXFxcIikpIGlucHV0ID0gZ2V0UGF0aChpbnB1dCkuc2xpY2UoNyk7XFxcXG4gICAgICAgICAgICAgICAgaWYgKGlucHV0LmVuZHNXaXRoKFxcXFxcXFwiL1xcXFxcXFwiKSkgaW5wdXQ9aW5wdXQucmVwbGFjZSgvXFxcXFxcXFwvJC8sXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgaWYgKENvbmZpZy5ob21lUGF0aCA9PSBpbnB1dCkgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7Lnu4/mmK/lvZPliY3nm67lvZVcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICBDb25maWcgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwiY29uZmlnLmpzb25cXFxcXFxcIiwgMCkgfHwgXFxcXFxcXCJ7fVxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICBDb25maWcuaG9tZVBhdGggPSBpbnB1dDtcXFxcbiAgICAgICAgICAgICAgICBzYXZlRmlsZShcXFxcXFxcImNvbmZpZy5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KENvbmZpZyksIDApO1xcXFxuICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3suS/neWtmFxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSwgaWQpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICBicmVhaztcXFxcbn1cXFxcbnNldFJlc3VsdChsYXlvdXQpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2Lue8lui+keabv+aNouinhOWImVxcXCIsXFxcInBhdGhcXFwiOlxcXCJlZGl0UmVwbGFjZVJ1bGUudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IGlzTmV3ID0gTVlfUEFSQU1TLmlzTmV3IHx8IGdldFBhcmFtKFxcXFxcXFwiaXNOZXdcXFxcXFxcIik7XFxcXG5jb25zdCBpbmRleCA9IE1ZX1BBUkFNUy5pbmRleCB8fCBOdW1iZXIoZ2V0UGFyYW0oXFxcXFxcXCJpbmRleFxcXFxcXFwiKSk7XFxcXG5sZXQgbGF5b3V0ID0gW107XFxcXG5hZGRMaXN0ZW5lcihcXFxcXFxcIm9uQ2xvc2VcXFxcXFxcIiwgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUubmFtZVxcXFxcXFwiKTtcXFxcbiAgICBjbGVhck15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5pc1JlZ2V4XFxcXFxcXCIpO1xcXFxuICAgIGNsZWFyTXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLnBhdHRlcm5cXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFxcXFxcIik7XFxcXG4gICAgY2xlYXJNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuZmlyc3RcXFxcXFxcIik7XFxcXG4gICAgLy9jbGVhck15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5zY29wZVxcXFxcXFwiKTtcXFxcbn0pKTtcXFxcbmxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG5sZXQgaWQgPSBcXFxcXFxcIiNcXFxcXFxcIiArIG5ldyBEYXRlKCkuZ2V0VGltZSgpO1xcXFxuLy9sZXQgcmVwbGFjZVJ1bGUgPSBpc05ldyA9PSBcXFxcXFxcInRydWVcXFxcXFxcIj97fTpydWxlTGlzdFtpbmRleF07XFxcXG5pZiAoaXNOZXcgPT0gXFxcXFxcXCJ0cnVlXFxcXFxcXCIpIHtcXFxcbiAgICByZXBsYWNlUnVsZSA9IHtcXFxcbiAgICAgICAgaWQ6IG5ldyBEYXRlKCkuZ2V0VGltZSgpLFxcXFxuICAgICAgICBpc1JlZ2V4OiBmYWxzZSxcXFxcbiAgICB9XFxcXG59IGVsc2Uge1xcXFxuICAgIHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaW5kZXhdO1xcXFxufVxcXFxuLy/pppbmrKHliJ3lp4vljJZcXFxcbmlmKGdldE15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5maXJzdFxcXFxcXFwiLFxcXFxcXFwiXFxcXFxcXCIpPT1cXFxcXFxcIlxcXFxcXFwiKXtcXFxcbiAgICBwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgcmVwbGFjZVJ1bGUuaXNSZWdleCk7XFxcXG4gICAgcHV0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmZpcnN0XFxcXFxcXCIsXFxcXFxcXCIxXFxcXFxcXCIpO1xcXFxufVxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaLt+i0nVxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgpID0+IHtcXFxcbiAgICAgICAgbGV0IGF0dCA9IFtcXFxcXFxcIm5hbWVcXFxcXFxcIiwgXFxcXFxcXCJpc1JlZ2V4XFxcXFxcXCIsIFxcXFxcXFwicGF0dGVyblxcXFxcXFwiLCBcXFxcXFxcInJlcGxhY2VtZW50XFxcXFxcXCJdO1xcXFxuICAgICAgICBsZXQganNvbiA9IHt9O1xcXFxuICAgICAgICBhdHQuZm9yRWFjaChrZXkgPT4ge1xcXFxuICAgICAgICAgICAgbGV0IHZhbHVlID0gZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLlxcXFxcXFwiICsga2V5LCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIGlmIChrZXkgPT09IFxcXFxcXFwiaXNSZWdleFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgdmFsdWUgPSB2YWx1ZSA9PT0gXFxcXFxcXCJ0cnVlXFxcXFxcXCIgPyB0cnVlIDogZmFsc2U7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBqc29uW2tleV0gPSB2YWx1ZTtcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGNvcHkoSlNPTi5zdHJpbmdpZnkoanNvbikpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIueymOi0tFxcXFxcXFwiLFxcXFxuICAgIHVybDogJChcXFxcXFxcInt7Y2xpcGJvYXJkfX1cXFxcXFxcIikuaW5wdXQoKCkgPT4ge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IGpzb24gPSBKU09OLnBhcnNlKGlucHV0KTtcXFxcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KGpzb24pIHx8IGpzb24ucGF0dGVybiA9PSB1bmRlZmluZWQpIHJldHVybjtcXFxcbiAgICAgICAgICAgIGxldCBhdHQgPSBbXFxcXFxcXCJuYW1lXFxcXFxcXCIsIFxcXFxcXFwiaXNSZWdleFxcXFxcXFwiLCBcXFxcXFxcInBhdHRlcm5cXFxcXFxcIiwgXFxcXFxcXCJyZXBsYWNlbWVudFxcXFxcXFwiXTtcXFxcbiAgICAgICAgICAgIGF0dC5mb3JFYWNoKGtleSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgcHV0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLlxcXFxcXFwiICsga2V5LCBTdHJpbmcoanNvbltrZXldKSk7XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9KSxcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuabv+aNouinhOWImeWQjeensFxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLm5hbWVcXFxcXFxcIiwgcmVwbGFjZVJ1bGUubmFtZSksXFxcXG4gICAgICAgIG9uQ2hhbmdlOiAncHV0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLm5hbWVcXFxcXFxcIixpbnB1dCk7J1xcXFxuICAgIH1cXFxcbn0pO1xcXFxuXFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuabv+aNouinhOWImVxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgIHR5cGU6IFxcXFxcXFwidGV4dGFyZWFcXFxcXFxcIixcXFxcbiAgICAgICAgaGVpZ2h0OiAtMSxcXFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXFxcXFwiLCByZXBsYWNlUnVsZS5wYXR0ZXJuKSxcXFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXFxcXFwiLCBpbnB1dCk7J1xcXFxuICAgIH1cXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIuaYr+WQpuS9v+eUqOato+WImeihqOi+vuW8j++8mlxcXFxcXFwiICsgZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFxcXFxcIiksXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKGlkKSA9PiB7XFxcXG4gICAgICAgIGxldCBpc1JlZ2V4ID0gZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiID8gZmFsc2UgOiB0cnVlO1xcXFxuICAgICAgICB1cGRhdGVJdGVtKHtcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgaWQ6IGlkXFxcXG4gICAgICAgICAgICB9LFxcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5piv5ZCm5L2/55So5q2j5YiZ6KGo6L6+5byP77yaXFxcXFxcXCIgKyBpc1JlZ2V4XFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICBwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuaXNSZWdleFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiICsgaXNSZWdleCk7XFxcXG4gICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICB9LCBpZCksXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6IGlkXFxcXG4gICAgfVxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICBkZXNjOiBcXFxcXFxcIuabv+aNouS4ulxcXFxcXFwiLFxcXFxuICAgIGV4dHJhOiB7XFxcXG4gICAgICAgIHRpdGxlVmlzaWJsZTogZmFsc2UsXFxcXG4gICAgICAgIHR5cGU6IFxcXFxcXFwidGV4dGFyZWFcXFxcXFxcIixcXFxcbiAgICAgICAgaGVpZ2h0OiAtMSxcXFxcbiAgICAgICAgZGVmYXVsdFZhbHVlOiBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFxcXFxcIiwgcmVwbGFjZVJ1bGUucmVwbGFjZW1lbnQpLFxcXFxuICAgICAgICBvbkNoYW5nZTogJ3B1dE15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5yZXBsYWNlbWVudFxcXFxcXFwiLGlucHV0KTsnXFxcXG4gICAgfVxcXFxufSk7XFxcXG5sYXlvdXQucHVzaCh7XFxcXG4gICAgdGl0bGU6IFxcXFxcXFwi5L+d5a2YXFxcXFxcXCIsXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHJlcGxhY2VSdWxlLCBpc05ldywgaW5kZXgpID0+IHtcXFxcbiAgICAgICAgbGV0IHBhdHRlcm4gPSBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucGF0dGVyblxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgaWYgKCFwYXR0ZXJuKSB7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+abv+aNouinhOWImeS4jeiDveS4uuepulxcXFxcXFwiO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIE9iamVjdC5hc3NpZ24ocmVwbGFjZVJ1bGUsIHtcXFxcbiAgICAgICAgICAgIG5hbWU6IGdldE15VmFyKFxcXFxcXFwiLmVkaXRSZXBsYWNlUnVsZS5uYW1lXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgaXNSZWdleDogZ2V0TXlWYXIoXFxcXFxcXCIuZWRpdFJlcGxhY2VSdWxlLmlzUmVnZXhcXFxcXFxcIikgPT09IFxcXFxcXFwidHJ1ZVxcXFxcXFwiID8gdHJ1ZSA6IGZhbHNlLFxcXFxuICAgICAgICAgICAgcGF0dGVybjogcGF0dGVybixcXFxcbiAgICAgICAgICAgIHJlcGxhY2VtZW50OiBnZXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUucmVwbGFjZW1lbnRcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIilcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxldCBydWxlTGlzdCA9IEpTT04ucGFyc2UocmVhZEZpbGUoXFxcXFxcXCJyZXBsYWNlUnVsZS5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwiW11cXFxcXFxcIik7XFxcXG4gICAgICAgIGlmIChpc05ldyA9PSBcXFxcXFxcInRydWVcXFxcXFxcIikge1xcXFxuICAgICAgICAgICAgcnVsZUxpc3QucHVzaChyZXBsYWNlUnVsZSk7XFxcXG4gICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICBydWxlTGlzdC5zcGxpY2UoaW5kZXgsIDEsIHJlcGxhY2VSdWxlKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBzYXZlRmlsZShcXFxcXFxcInJlcGxhY2VSdWxlLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkocnVsZUxpc3QpKTtcXFxcbiAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+S/neWtmOaIkOWKn1xcXFxcXFwiO1xcXFxuICAgIH0sIHJlcGxhY2VSdWxlLCBpc05ldywgaW5kZXgpLFxcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbn0pO1xcXFxuXFxcXG4vKlxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImlucHV0XFxcXFxcXCIsXFxcXG4gICAgZGVzYzogXFxcXFxcXCLmm7/mjaLojIPlm7RcXFxcXFxcIixcXFxcbiAgICBleHRyYToge1xcXFxuICAgICAgICB0aXRsZVZpc2libGU6IGZhbHNlLFxcXFxuICAgICAgICB0eXBlOiBcXFxcXFxcInRleHRhcmVhXFxcXFxcXCIsXFxcXG4gICAgICAgIGhlaWdodDogLTEsXFxcXG4gICAgICAgIGRlZmF1bHRWYWx1ZTogXFxcXFxcXCJcXFxcXFxcIixcXFxcbiAgICAgICAgb25DaGFuZ2U6ICdwdXRNeVZhcihcXFxcXFxcIi5lZGl0UmVwbGFjZVJ1bGUuc2NvcGVcXFxcXFxcIixpbnB1dCk7J1xcXFxuICAgIH1cXFxcbn0pO1xcXFxuXFxcXG4qL1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu5bCP6K+05Liq5oCn5YyW5YeA5YyWXFxcIixcXFwicGF0aFxcXCI6XFxcIk5vdmVsQ3VzdG9tLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLmm7/mjaLop4TliJl8XFxcXFxcXCIgKyBNWV9QQVJBTVMubmFtZSk7XFxcXG5sZXQgcnVsZUxpc3QgPSBKU09OLnBhcnNlKHJlYWRGaWxlKFxcXFxcXFwicmVwbGFjZVJ1bGUuanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcIltdXFxcXFxcXCIpO1xcXFxubGV0IGlkID0gXFxcXFxcXCIjXFxcXFxcXCIgKyBuZXcgRGF0ZSgpLmdldFRpbWUoKTtcXFxcblxcXFxuY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXFxcbiAgICBmb290OiAwLFxcXFxuICAgIGlzUmVwbGFjZTogdHJ1ZSxcXFxcbiAgICBzZWxlY3RlZDogW11cXFxcbn0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIE1ZX1BBUkFNUy5wYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpKTtcXFxcblxcXFxubGV0IGxheW91dCA9IFtdO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBbXFxcXFxcXCLimJDlh4DljJZcXFxcXFxcIiwgXFxcXFxcXCLimJHlh4DljJZcXFxcXFxcIl1bMCArIGJvb2tJbmZvLmlzUmVwbGFjZV0sXFxcXG4gICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKCRpZCwgcGF0aCkgPT4ge1xcXFxuXFxcXG4gICAgICAgIHZhciBib29rSW5mbyA9IEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIik7XFxcXG4gICAgICAgIGxldCBpc1JlcGxhY2UgPSBib29rSW5mby5pc1JlcGxhY2U9PT11bmRlZmluZWQ/dHJ1ZTpib29rSW5mby5pc1JlcGxhY2U7XFxcXG4gICAgICAgIGJvb2tJbmZvLmlzUmVwbGFjZSA9ICFpc1JlcGxhY2U7XFxcXG4gICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgIHVwZGF0ZUl0ZW0oJGlkLCB7XFxcXG4gICAgICAgICAgICB0aXRsZTogaXNSZXBsYWNlID8gXFxcXFxcXCLimJDlh4DljJZcXFxcXFxcIiA6IFxcXFxcXFwi4piR5YeA5YyWXFxcXFxcXCIsXFxcXG4gICAgICAgIH0pO1xcXFxuICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgfSwgaWQgKyBcXFxcXFxcIiMtMVxcXFxcXFwiLCBNWV9QQVJBTVMucGF0aCksXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgaWQ6IGlkICsgXFxcXFxcXCIjLTFcXFxcXFxcIlxcXFxuICAgIH0sXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbn0pO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBcXFxcXFxcIue8lui+keinhOWImVxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvU2V0dGluZy9Nb3JlLnZpZXcjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjI25vUmVmcmVzaCM/c2V0dGluZ1R5cGU9cmVwbGFjZVJ1bGVcXFxcXFxcIixcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIixcXFxcbiAgICBleHRyYTp7XFxcXG4gICAgICAgIGlzUmVmcmVzaDogdHJ1ZVxcXFxuICAgIH1cXFxcbn0pO1xcXFxuZm9yIChsZXQgaSA9IDAsIGxlbiA9IHJ1bGVMaXN0Lmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XFxcXG4gICAgbGV0IHJlcGxhY2VSdWxlID0gcnVsZUxpc3RbaV07XFxcXG4gICAgbGV0IGlzVHJ1ZSA9IGJvb2tJbmZvLnNlbGVjdGVkLmluY2x1ZGVzKHJlcGxhY2VSdWxlLmlkKTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiAoaXNUcnVlID8gXFxcXFxcXCLil49cXFxcXFxcIiA6IFxcXFxcXFwi4peLXFxcXFxcXCIpICsgcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgICAgIHk6IDAsXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBpc1RydWU6IGlzVHJ1ZSxcXFxcbiAgICAgICAgICAgIGlkOiBpZCArIGksXFxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5byA5ZCvXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgkaWQsIHJlcGxhY2VSdWxlLCBwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoZmluZEl0ZW0oJGlkKS5leHRyYS5pc1RydWUpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+W3suW8gOWQr1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgY29uc3QgYm9va0luZm8gPSBPYmplY3QuYXNzaWduKHtcXFxcbiAgICAgICAgICAgICAgICBzZWxlY3RlZDogW11cXFxcbiAgICAgICAgICAgIH0sIEpTT04ucGFyc2UocmVxdWVzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIpIHx8IFxcXFxcXFwie31cXFxcXFxcIikpO1xcXFxuICAgICAgICAgICAgYm9va0luZm8uc2VsZWN0ZWQucHVzaChyZXBsYWNlUnVsZS5pZCk7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCRpZCwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKXj1xcXFxcXFwiICsgcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpc1RydWU6IHRydWUsXFxcXG4gICAgICAgICAgICAgICAgICAgIGlkOiAkaWQsXFxcXG4gICAgICAgICAgICAgICAgICAgIGxpbmVWaXNpYmxlOiBmYWxzZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aCArIFxcXFxcXFwiL2Jvb2tJbmZvLmpzb25cXFxcXFxcIiwgSlNPTi5zdHJpbmdpZnkoYm9va0luZm8pKTtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgfSwgaWQgKyBpLCByZXBsYWNlUnVsZSwgTVlfUEFSQU1TLnBhdGgpLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5YWz6ZetXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgkaWQsIHJlcGxhY2VSdWxlLCBwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICBpZiAoIWZpbmRJdGVtKCRpZCkuZXh0cmEuaXNUcnVlKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lt7LlhbPpl61cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIGNvbnN0IGJvb2tJbmZvID0gT2JqZWN0LmFzc2lnbih7XFxcXG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQ6IFtdXFxcXG4gICAgICAgICAgICB9LCBKU09OLnBhcnNlKHJlcXVlc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIvYm9va0luZm8uanNvblxcXFxcXFwiKSB8fCBcXFxcXFxcInt9XFxcXFxcXCIpKTtcXFxcbiAgICAgICAgICAgIGJvb2tJbmZvLnNlbGVjdGVkLnNwbGljZShib29rSW5mby5zZWxlY3RlZC5pbmRleE9mKHJlcGxhY2VSdWxlLmlkKSwgMSk7XFxcXG4gICAgICAgICAgICB1cGRhdGVJdGVtKCRpZCwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKXi1xcXFxcXFwiICsgcmVwbGFjZVJ1bGUubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBpc1RydWU6IGZhbHNlLFxcXFxuICAgICAgICAgICAgICAgICAgICBpZDogJGlkLFxcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIHdyaXRlRmlsZShcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi9ib29rSW5mby5qc29uXFxcXFxcXCIsIEpTT04uc3RyaW5naWZ5KGJvb2tJbmZvKSk7XFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCI7XFxcXG4gICAgICAgIH0sIGlkICsgaSwgcmVwbGFjZVJ1bGUsIE1ZX1BBUkFNUy5wYXRoKSxcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxufVxcXFxuXFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7lpJblr7zlsI/or7RcXFwiLFxcXCJwYXRoXFxcIjpcXFwiZXh0ZXJuYWxpbXBvcnRUeHQudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmZ1bmN0aW9uIHR4dFZpZXcobGF5b3V0KSB7XFxcXG4gICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgIGNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICBsZXQgZmlsZXMgPSBGaWxlLmdldEZpbGVQYXRoKENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGgpO1xcXFxuICAgIGZpbGVzID0gZmlsZXMuZmlsdGVyKHYgPT4gLyhcXFxcXFxcXC50eHR8XFxcXFxcXFwuZXB1YikkLy50ZXN0KHYubmFtZSkpO1xcXFxuXFxcXG4gICAgc2V0UGFnZVRpdGxlKFxcXFxcXFwi5bCP6K+05Lmm5p62XFxcXFxcXCIpO1xcXFxuICAgIC8vbGV0IGxheW91dCA9IFtdO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdXJsOiAnaW5wdXQ/XFxcXFxcXCJoaWtlcjovL3BhZ2UvdHh0U2VhcmNoLnZpZXcjbm9SZWZyZXNoIz9zZWFyY2hUZXJtcz1cXFxcXFxcIitlbmNvZGVVUklDb21wb25lbnQoaW5wdXQpOlxcXFxcXFwidG9hc3Q6Ly/or7fovpPlhaXlsI/or7TlkI1cXFxcXFxcIicsXFxcXG4gICAgICAgIGRlc2M6IFxcXFxcXFwi5pCc57SiXFxcXFxcXCIsXFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCflI1cXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGRlZmF1bHRWYWx1ZTogZ2V0TXlWYXIoXFxcXFxcXCJzZWFyY2hLZXlCeVR4dFxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgIG9uQ2hhbmdlOiBcXFxcXFxcInB1dE15VmFyKCdzZWFyY2hLZXlCeVR4dCcsaW5wdXQpXFxcXFxcXCJcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdGl0bGU6IFxcXFxcXFwi5a+85YWl5bCP6K+0XFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfM1xcXFxcXFwiLFxcXFxuICAgICAgICB1cmw6ICQoW1xcXFxcXFwi57O757uf6YCJ5oup5ZmoXFxcXFxcXCIsIFxcXFxcXFwi5rW36ZiU6YCJ5oup5ZmoXFxcXFxcXCJdLCAxLCBcXFxcXFxcIumAieaLqeWZqOexu+Wei1xcXFxcXFwiKS5zZWxlY3QoKCkgPT4ge1xcXFxuICAgICAgICAgICAgaWYgKGlucHV0ID09PSBcXFxcXFxcIuezu+e7n+mAieaLqeWZqFxcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiZmlsZVNlbGVjdDovL1xcXFxcXFwiICsgJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmICghLyhcXFxcXFxcXC50eHR8LmVwdWIpJC9pLnRlc3QoaW5wdXQpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdChcXFxcXFxcIumAieaLqeS6humUmeivr+eahOaWh+S7tuexu+Wei1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvQ29uZmlnLmpzb25cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCBmaWxlTWF0Y2ggPSBpbnB1dC5tYXRjaCgvXFxcXFxcXFwvKFteXFxcXFxcXFwvXSo/KShcXFxcXFxcXC50eHR8XFxcXFxcXFwuZXB1YikkL2kpO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgbm92ZWxOYW1lID0gZmlsZU1hdGNoWzFdLnJlcGxhY2UoXFxcXFxcXCJfZmlsZVNlbGVjdF9cXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgIGxldCB0b3BhdGggPSBDb25maWcuZXh0ZXJuYWxJbXBvcnRQYXRoICsgbm92ZWxOYW1lICsgZmlsZU1hdGNoWzJdO1xcXFxuICAgICAgICAgICAgICAgICAgICBsZXQgdG9wYXRoQ2FjaGUgPSBDb25maWcuY29udGVudHNDYWNoZSArIG5vdmVsTmFtZSArIGZpbGVNYXRjaFsyXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBpbnB1dC5yZXBsYWNlKFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHRvcGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm0oe1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWvvOWFpeaPkOekulxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnRlbnQ6IFxcXFxcXFwi5bey5a2Y5ZyoW1xcXFxcXFwiICsgbm92ZWxOYW1lICsgXFxcXFxcXCJd5piv5ZCm6KaG55uWP1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbmZpcm06ICQudG9TdHJpbmcoKHBhdGgsIHRvcGF0aCwgdG9wYXRoQ2FjaGUpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmNvcHlGaWxlKHBhdGgsIHRvcGF0aCwgdHJ1ZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyB0b3BhdGhDYWNoZSkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuZGVsZXRlRmlsZXModG9wYXRoQ2FjaGUpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKGZhbHNlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/lr7zlhaXmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9LCBwYXRoLCB0b3BhdGgsIHRvcGF0aENhY2hlKVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBGaWxlLmNvcHlGaWxlKHBhdGgsIHRvcGF0aCk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZmlsZUV4aXN0KFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgdG9wYXRoQ2FjaGUpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGhDYWNoZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICB0b2FzdChcXFxcXFxcIuWvvOWFpeaIkOWKn1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICBsZXQgcmVxdWlyZVVybCA9IFxcXFxcXFwiaHR0cDovL2hpa2VyLm5va2lhLnByZXNzL2hpa2VydWxlL3J1bGVsaXN0Lmpzb24/aWQ9NTA5OVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIGxldCBmaWxlU2VsZWN0ID0gcmVxdWlyZShyZXF1aXJlVXJsKTtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gZmlsZVNlbGVjdC5maWxlU2VsZWN0aW9uVXJpKHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY2FsbGJhY2s6ICQudG9TdHJpbmcoKCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IGZpbGVNYXRjaCA9IFBBVEgubWF0Y2goL1xcXFxcXFxcLyhbXlxcXFxcXFxcL10qPykoXFxcXFxcXFwudHh0fFxcXFxcXFxcLmVwdWIpJC9pKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCBub3ZlbE5hbWUgPSBmaWxlTWF0Y2hbMV07XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBsZXQgdG9wYXRoID0gQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCArIG5vdmVsTmFtZSArIGZpbGVNYXRjaFsyXTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGxldCB0b3BhdGhDYWNoZSA9IENvbmZpZy5jb250ZW50c0NhY2hlICsgbm92ZWxOYW1lICsgZmlsZU1hdGNoWzJdO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgbGV0IHBhdGggPSBQQVRIO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHRvcGF0aCkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJChcXFxcXFxcIuW3suWtmOWcqFtcXFxcXFxcIiArIG5vdmVsTmFtZSArIFxcXFxcXFwiXeaYr+WQpuimhueblj9cXFxcXFxcIikuY29uZmlybSgocGF0aCwgdG9wYXRoLCB0b3BhdGhDYWNoZSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIEZpbGUuY29weUZpbGUocGF0aCwgdG9wYXRoLCB0cnVlKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHRvcGF0aENhY2hlKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGhDYWNoZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYmFjaygpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WvvOWFpeaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0sIHBhdGgsIHRvcGF0aCwgdG9wYXRoQ2FjaGUpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5jb3B5RmlsZShwYXRoLCB0b3BhdGgpO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyB0b3BhdGhDYWNoZSkpIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyh0b3BhdGhDYWNoZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJhY2soKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WvvOWFpeaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgICAgICAgICB9KSxcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVxdWlyZVVybDogcmVxdWlyZVVybCxcXFxcbiAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGU6IFxcXFxcXFwiLnR4dHwuZXB1YlxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBvbkNsaWNrVHlwZTogXFxcXFxcXCJjb25maXJtXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIG1lbW9yeTogXFxcXFxcXCJzZWxlY3RQYXRoQ2FjaGUxXFxcXFxcXCJcXFxcbiAgICAgICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSksXFxcXG4gICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pO1xcXFxuICAgIGxldCBvcHRpb25zID0gW1xcXFxcXFwi6ZiF6K+7XFxcXFxcXCIsIFxcXFxcXFwi5YiG5LqrXFxcXFxcXCIsIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCIsIFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCJdO1xcXFxuXFxcXG4gICAgbGV0IHBhdHRlcm4gPSBnZXRNeVZhcihcXFxcXFxcIjp0eHRQYXR0ZXJuXFxcXFxcXCIsIG9wdGlvbnNbMF0pO1xcXFxuICAgIGxldCBpZCA9IERhdGUubm93KCkgKyBcXFxcXFxcIjrmqKHlvI9cXFxcXFxcIjtcXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBwYXR0ZXJuLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzNcXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKG9wdGlvbnMsIDEsIFxcXFxcXFwi5pON5L2c5qih5byPXFxcXFxcXCIpLnNlbGVjdCgoaWQpID0+IHtcXFxcbiAgICAgICAgICAgIHB1dE15VmFyKFxcXFxcXFwiOnR4dFBhdHRlcm5cXFxcXFxcIiwgaW5wdXQpO1xcXFxuICAgICAgICAgICAgdXBkYXRlSXRlbShpZCwge1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBpbnB1dFxcXFxuICAgICAgICAgICAgfSk7XFxcXG4gICAgICAgIH0sIGlkKSxcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIGlkOiBpZFxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLmlofku7bnrqHnkIZcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8zXFxcXFxcXCIsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZU1hbmFnZW1lbnQudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5Iz90eXBlPWV4dGVybmFsSW1wb3J0UGF0aFxcXFxcXFwiXFxcXG4gICAgfSk7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJsaW5lX2JsYW5rXFxcXFxcXCJcXFxcbiAgICB9KTtcXFxcblxcXFxuICAgIGZ1bmN0aW9uIG9wZXJhdGlvbihwYXRoLCBuYW1lLCB0eXBlKSB7XFxcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gZ2V0TXlWYXIoXFxcXFxcXCI6dHh0UGF0dGVyblxcXFxcXFwiLCBcXFxcXFxcIumYheivu1xcXFxcXFwiKTtcXFxcbiAgICAgICAgc3dpdGNoIChwYXR0ZXJuKSB7XFxcXG4gICAgICAgICAgICBjYXNlIFxcXFxcXFwi5YiG5LqrXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwic2hhcmU6Ly9cXFxcXFxcIiArIHBhdGg7XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICBjYXNlIFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICQoXFxcXFxcXCLnoa7orqTliKDpmaRbXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCJdXFxcXFxcXCIpLmNvbmZpcm0oKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBpZiAoRmlsZS5kZWxldGVGaWxlcyhwYXRoKSkge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGZpbGVFeGlzdChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIiArIHBhdGggKyBcXFxcXFxcIi5qc29uXFxcXFxcXCIpKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgRmlsZS5kZWxldGVGaWxlcyhwYXRoICsgXFxcXFxcXCIuanNvblxcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlbGV0ZUl0ZW0ocGF0aClcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5oiQ5YqfXFxcXFxcXCI7XFxcXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIoOmZpOWksei0pVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICAgICAgfSwgcGF0aCk7XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgICAgICBjYXNlIFxcXFxcXFwi6ZiF6K+7XFxcXFxcXCI6XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuICh0eXBlPT09XFxcXFxcXCIudHh0XFxcXFxcXCI/XFxcXFxcXCJoaWtlcjovL3BhZ2UvdHh0UGFyc2VyLnZpZXdcXFxcXFxcIjpcXFxcXFxcImhpa2VyOi8vcGFnZS9lcHViUGFyc2VyLnZpZXcjYXV0b0NhY2hlI1xcXFxcXFwiKStcXFxcXFxcIj9ydWxlPVxcXFxcXFwiICsgTVlfUlVMRS50aXRsZTtcXFxcbiAgICAgICAgICAgICAgICBicmVhaztcXFxcbiAgICAgICAgICAgIGNhc2UgXFxcXFxcXCLmiZPlvIDmlrnlvI9cXFxcXFxcIjpcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJvcGVuRmlsZTovL2ZpbGU6Ly9cXFxcXFxcIiArIHBhdGg7XFxcXG4gICAgICAgICAgICAgICAgYnJlYWs7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG5cXFxcbiAgICBmb3IgKGxldCBub3ZlbCBvZiBmaWxlcykge1xcXFxuICAgICAgICBsZXQgdHlwZSA9IG5vdmVsLm5hbWUuc3Vic3RyaW5nKG5vdmVsLm5hbWUubGFzdEluZGV4T2YoXFxcXFxcXCIuXFxcXFxcXCIpKTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5vdmVsLm5hbWUsXFxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZShvcGVyYXRpb24sIG5vdmVsLnBhdGgsIG5vdmVsLm5hbWUsIHR5cGUpLFxcXFxuICAgICAgICAgICAgZGVzYzogXFxcXFxcXCLlpKflsI/vvJpcXFxcXFxcIiArIEZpbGUuZ2V0RmlsZVNpemUobm92ZWwucGF0aCkgKyBcXFxcXFxcIlxcXFxcXFxcbuS/ruaUueaXtumXtO+8mlxcXFxcXFwiICsgJC5kYXRlRm9ybWF0KG5vdmVsLmxhc3RNb2RpZmllZCwgXFxcXFxcXCJ5eXl5LU1NLWRkIEhIOm1tOnNzXFxcXFxcXCIpLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHBhdGg6IG5vdmVsLnBhdGgsXFxcXG4gICAgICAgICAgICAgICAgaXNDYWNoZTogdHJ1ZSxcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogbm92ZWwubmFtZSxcXFxcbiAgICAgICAgICAgICAgICBpZDogbm92ZWwucGF0aCxcXFxcbiAgICAgICAgICAgICAgICBsb25nQ2xpY2s6IFt7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWIhuS6q1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBqczogSlNPTi5zdHJpbmdpZnkoXFxcXFxcXCJzaGFyZTovL1xcXFxcXFwiICsgbm92ZWwucGF0aClcXFxcbiAgICAgICAgICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIumYheivu1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBqczogSlNPTi5zdHJpbmdpZnkoKHR5cGU9PT1cXFxcXFxcIi50eHRcXFxcXFxcIj9cXFxcXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXFxcXFwiOlxcXFxcXFwiaGlrZXI6Ly9wYWdlL2VwdWJQYXJzZXIudmlldyNhdXRvQ2FjaGUjXFxcXFxcXCIpK1xcXFxcXFwiP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLnRpdGxlKVxcXFxuICAgICAgICAgICAgICAgIH0sIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5omT5byA5pa55byPXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGpzOiBKU09OLnN0cmluZ2lmeShcXFxcXFxcIm9wZW5GaWxlOi8vZmlsZTovL1xcXFxcXFwiICsgbm92ZWwucGF0aClcXFxcbiAgICAgICAgICAgICAgICB9LCB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuWIoOmZpFxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgICAgICBqczogJC50b1N0cmluZygocGF0aCkgPT4ge1xcXFxuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuICQucmVxdWlyZShcXFxcXFxcImxvbmdQcmVzcy5qc1xcXFxcXFwiKS5kZWxldGVGaWxlRm9yVHh0KHBhdGgpXFxcXG4gICAgICAgICAgICAgICAgICAgIH0sIG5vdmVsLnBhdGgpXFxcXG4gICAgICAgICAgICAgICAgfV1cXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIGlmIChmaWxlcy5sZW5ndGggPT09IDApIHtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi6K6+572uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL1NldHRpbmcudmlldyNub1JlZnJlc2gjI25vUmVjb3JkSGlzdG9yeSMjbm9IaXN0b3J5I1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF8yXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHZlcnNpb246IE1ZX1JVTEUudmVyc2lvblxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcblxcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzluK7liqnigJ3igJ1cXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvaGVscC52aWV3I25vUmVmcmVzaCMjbm9SZWNvcmRIaXN0b3J5IyNub0hpc3RvcnkjP2tleXdvcmQ9dHh0XFxcXFxcXCIsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzJcXFxcXFxcIlxcXFxuICAgICAgICB9KTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6ICc8aDEgc3R5bGU9XFxcXFxcXCJ0ZXh0LWFsaWduOiBjZW50ZXI7XFxcXFxcXCI+5ZWl6YO95rKh5pyJ6IC2PC9oMT4nLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCJcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIHNldFJlc3VsdChsYXlvdXQpO1xcXFxufVxcXFxuaWYgKCQuaW1wb3J0UGFyYW0gPT09IHVuZGVmaW5lZCkge1xcXFxuICAgICQuZXhwb3J0cyA9IHR4dFZpZXc7XFxcXG59IGVsc2UgaWYgKCQuaW1wb3J0UGFyYW0gPT09IG51bGwpIHtcXFxcbiAgICBzZXRSZXN1bHQodHh0VmlldyhbXSkpO1xcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LlRYVOino+aekOWZqFxcXCIsXFxcInBhdGhcXFwiOlxcXCJ0eHRQYXJzZXIudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbihmdW5jdGlvbigpIHtcXFxcbiAgICBjb25zdCBDb25maWcgPSAkLnJlcXVpcmUoXFxcXFxcXCJDb25maWcuanNvblxcXFxcXFwiKTtcXFxcbiAgICBsZXQgcmVncyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9yZWd1bGFyQ2hhcHRlci5mXFxcXFxcXCIpO1xcXFxuICAgIGxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwicGF0aFxcXFxcXFwiKSB8fCBcXFxcXFxcIlxcXFxcXFwiKSB8fCBNWV9QQVJBTVMucGF0aDtcXFxcbiAgICBsZXQgY2hhcnN0ID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwiY2hhcnN0XFxcXFxcXCIpIHx8IFxcXFxcXFwiXFxcXFxcXCIpIHx8IE1ZX1BBUkFNUy5jaGFyc3QgfHwgXFxcXFxcXCJVVEYtOFxcXFxcXFwiO1xcXFxuICAgIGxldCBpc0NhY2hlID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwiaXNDYWNoZVxcXFxcXFwiKSB8fCBcXFxcXFxcIlxcXFxcXFwiKSB8fCBNWV9QQVJBTVMuaXNDYWNoZTtcXFxcbiAgICBpZiAoIXBhdGguc3RhcnRzV2l0aChcXFxcXFxcImZpbGU6Ly9cXFxcXFxcIikpIHtcXFxcbiAgICAgICAgcGF0aCA9IFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgcGF0aDtcXFxcbiAgICB9XFxcXG4gICAgaWYoTVlfUEFSQU1TLnRpdGxlKXtcXFxcbiAgICAgICAgc2V0UGFnZVRpdGxlKE1ZX1BBUkFNUy50aXRsZSk7XFxcXG4gICAgfWVsc2V7XFxcXG4gICAgICAgIHNldFBhZ2VUaXRsZSgkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKS5nZXROYW1lKHBhdGgpKTtcXFxcbiAgICB9XFxcXG4gICAgbGV0IGxheW91dCA9IFtdO1xcXFxuICAgIGxldCBjaGFwdGVyTmFtZXMgPSBbXTtcXFxcbiAgICBsZXQgaW50ZXJ2YWxzID0gW107XFxcXG4gICAgbGV0IGhhc1ByZWZhY2UgPSBmYWxzZTtcXFxcbiAgICBsZXQgY2FjaGVQYXRoID0gcGF0aC5yZXBsYWNlKENvbmZpZy5leHRlcm5hbEltcG9ydFBhdGgsIENvbmZpZy5jb250ZW50c0NhY2hlKTtcXFxcbiAgICBpZiAoaXNDYWNoZSYmZmlsZUV4aXN0KGNhY2hlUGF0aCkpIHtcXFxcbiAgICAgICAgdHJ5IHtcXFxcblxcXFxuICAgICAgICAgICAgbGV0IGMgPSBKU09OLnBhcnNlKHJlcXVlc3QoY2FjaGVQYXRoKSk7XFxcXG4gICAgICAgICAgICBjaGFwdGVyTmFtZXMgPSBjLmNoYXB0ZXJOYW1lcztcXFxcbiAgICAgICAgICAgIGludGVydmFscyA9IGMuaW50ZXJ2YWxzO1xcXFxuICAgICAgICAgICAgaGFzUHJlZmFjZSA9IGMuaGFzUHJlZmFjZTtcXFxcbiAgICAgICAgICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLph43mlrDop6PmnpDnm67lvZVcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0X2NlbnRlcl8xXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgdXJsOiAkKFxcXFxcXFwiI25vTG9hZGluZyNcXFxcXFxcIikubGF6eVJ1bGUoKHBhdGgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgZGVsZXRlRmlsZShwYXRoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmVmcmVzaFBhZ2UoKTtcXFxcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgICAgIH0sIHBhdGgrXFxcXFxcXCIuanNvblxcXFxcXFwiKSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTpmYWxzZVxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgIH0pO1xcXFxuICAgICAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOlxcXFxcXFwibGluZV9ibGFua1xcXFxcXFwiXFxcXG4gICAgICAgICAgICB9KTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKGUudG9TdHJpbmcoKSk7XFxcXG4gICAgICAgICAgICBzZXRSZXN1bHQoW3tcXFxcbiAgICAgICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLigJzigJzigJ3igJ08c3Ryb25nPuebruW9leino+aekOWksei0pSjph43mlrDop6PmnpApPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKChwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGRlbGV0ZUZpbGUocGF0aCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJlZnJlc2hQYWdlKCk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9LCBwYXRoK1xcXFxcXFwiLmpzb25cXFxcXFxcIiksXFxcXG4gICAgICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXG4gICAgICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgfV0pO1xcXFxuICAgICAgICAgICAgcmV0dXJuO1xcXFxuICAgICAgICB9XFxcXG5cXFxcbiAgICB9IGVsc2Uge1xcXFxuICAgICAgICBzaG93TG9hZGluZyhcXFxcXFxcIuato+WcqOino+aekOebruW9lVxcXFxcXFwiKTtcXFxcbiAgICAgICAgbGV0IHR4dCA9IHJlcXVlc3QocGF0aCwge1xcXFxuICAgICAgICAgICAgaGVhZGVyczoge1xcXFxuICAgICAgICAgICAgICAgIC8vXFxcXFxcXCJjb250ZW50LXR5cGVcXFxcXFxcIjogXFxcXFxcXCJ0ZXh0L3BsYWluOyBjaGFyc3Q9XFxcXFxcXCIgKyBjaGFyc3RcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gcmVncy5nZXRUb2NSdWxlKHR4dCk7XFxcXG4gICAgICAgIGlmICghcGF0dGVybikge1xcXFxuICAgICAgICAgICAgaGlkZUxvYWRpbmcoKTtcXFxcbiAgICAgICAgICAgIHNldFJlc3VsdChbe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIuKAnOKAnOKAneKAnTxzdHJvbmc+55uu5b2V6Kej5p6Q5aSx6LSlPC9zdHJvbmc+XFxcXFxcXCIuYmlnKCksXFxcXG4gICAgICAgICAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgICAgIHVybDogJChcXFxcXFxcIiNub0xvYWRpbmcjXFxcXFxcXCIpLmxhenlSdWxlKCgpID0+IHtcXFxcbiAgICAgICAgICAgICAgICAgICAgYmFjayhmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICB9KSxcXFxcbiAgICAgICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgICAgICBsaW5lVmlzaWJsZTogZmFsc2VcXFxcbiAgICAgICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICB9XSk7XFxcXG4gICAgICAgICAgICByZXR1cm47XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGV0IG1hdGNoZXIgPSBwYXR0ZXJuLm1hdGNoZXIodHh0KTtcXFxcbiAgICAgICAgbGV0IHBvaW50ZXIgPSAwO1xcXFxuICAgICAgICB3aGlsZSAobWF0Y2hlci5maW5kKCkpIHtcXFxcbiAgICAgICAgICAgIGxldCBzdGFydCA9IG1hdGNoZXIuc3RhcnQoKTtcXFxcbiAgICAgICAgICAgIGxldCBlbmQgPSBtYXRjaGVyLmVuZCgpO1xcXFxuICAgICAgICAgICAgbGV0IHQgPSBtYXRjaGVyLmdyb3VwKCk7XFxcXG4gICAgICAgICAgICBpZiAocG9pbnRlciA9PT0gMCAmJiBzdGFydCA+IDMwKSB7XFxcXG4gICAgICAgICAgICAgICAgaGFzUHJlZmFjZSA9IHRydWU7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBjaGFwdGVyTmFtZXMucHVzaCh0KTtcXFxcbiAgICAgICAgICAgIGludGVydmFscy5wdXNoKFtwb2ludGVyLCBzdGFydF0pO1xcXFxuICAgICAgICAgICAgcG9pbnRlciA9IGVuZDtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBpbnRlcnZhbHMucHVzaChbcG9pbnRlciwgdHh0Lmxlbmd0aF0pO1xcXFxuICAgICAgICBpZiAoaXNDYWNoZSkge1xcXFxuICAgICAgICAgICAgd3JpdGVGaWxlKGNhY2hlUGF0aCwgSlNPTi5zdHJpbmdpZnkoe1xcXFxuICAgICAgICAgICAgICAgIGNoYXB0ZXJOYW1lczogY2hhcHRlck5hbWVzLFxcXFxuICAgICAgICAgICAgICAgIGludGVydmFsczogaW50ZXJ2YWxzLFxcXFxuICAgICAgICAgICAgICAgIGhhc1ByZWZhY2U6IGhhc1ByZWZhY2VcXFxcbiAgICAgICAgICAgIH0pKTtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICBoaWRlTG9hZGluZygpO1xcXFxuICAgIH1cXFxcblxcXFxuXFxcXG4gICAgaWYgKGhhc1ByZWZhY2UpIHtcXFxcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzWzBdO1xcXFxuICAgICAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgICAgICB0aXRsZTogXFxcXFxcXCLluo/oqIBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vcGFnZS9UWFRWaWV3ZXIudmlldyNhdXRvUGFnZSMjcmVhZFRoZW1lI1xcXFxcXFwiLFxcXFxuICAgICAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgICAgICBjaGFwdGVyTmFtZTogXFxcXFxcXCLluo/oqIBcXFxcXFxcIixcXFxcbiAgICAgICAgICAgICAgICBzdGFydDogaW50ZXJ2YWxbMF0sXFxcXG4gICAgICAgICAgICAgICAgZW5kOiBpbnRlcnZhbFsxXSxcXFxcbiAgICAgICAgICAgICAgICBwYXRoOiBwYXRoLFxcXFxuICAgICAgICAgICAgICAgIGNoYXJzdDogY2hhcnN0XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNoYXB0ZXJOYW1lcy5sZW5ndGg7IGkrKykge1xcXFxuICAgICAgICBsZXQgbmFtZSA9IGNoYXB0ZXJOYW1lc1tpXTtcXFxcbiAgICAgICAgbGV0IGludGVydmFsID0gaW50ZXJ2YWxzW2kgKyAxXTtcXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IG5hbWUsXFxcXG4gICAgICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJ0ZXh0XzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvVFhUVmlld2VyLnZpZXcjYXV0b1BhZ2UjI3JlYWRUaGVtZSNcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgc3RhcnQ6IGludGVydmFsWzBdLFxcXFxuICAgICAgICAgICAgICAgIGVuZDogaW50ZXJ2YWxbMV0sXFxcXG4gICAgICAgICAgICAgICAgY2hhcHRlck5hbWU6IG5hbWUsXFxcXG4gICAgICAgICAgICAgICAgcGF0aDogcGF0aCxcXFxcbiAgICAgICAgICAgICAgICBjaGFyc3Q6IGNoYXJzdFxcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICB9KTtcXFxcbiAgICB9XFxcXG4gICAgc2V0UmVzdWx0KGxheW91dCk7XFxcXG59KSgpXFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3YuVFhU5p+l55yL5ZmoXFxcIixcXFwicGF0aFxcXCI6XFxcIlRYVFZpZXdlci52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxubGV0IHBhdGggPSBNWV9QQVJBTVMucGF0aDtcXFxcbmxldCBjaGFyc3QgPSBNWV9QQVJBTVMuY2hhcnN0O1xcXFxubGV0IHR4dCA9IHJlcXVlc3QocGF0aCwge1xcXFxuICAgIGhlYWRlcnM6IHtcXFxcbiAgICAgICAvL1xcXFxcXFwiY29udGVudC10eXBlXFxcXFxcXCI6IFxcXFxcXFwidGV4dC9wbGFpbjsgY2hhcnN0PVxcXFxcXFwiICsgY2hhcnN0XFxcXG4gICAgfVxcXFxufSk7XFxcXG5cXFxcbmxldCB0YXJnZXRUZXh0cyA9IHR4dC5zdWJzdHJpbmcoTVlfUEFSQU1TLnN0YXJ0LCBNWV9QQVJBTVMuZW5kKTtcXFxcblxcXFxubGV0IGNvbnRlbnQgPSB0YXJnZXRUZXh0cy5zcGxpdCgvKFxcXFxcXFxcbnxcXFxcXFxcXHIpKy8pLmZpbHRlcihpdCA9PiBpdC5sZW5ndGggPiAxKS5qb2luKFxcXFxcXFwiPGJyPlxcXFxcXFwiKTtcXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICB0aXRsZTogKFxcXFxcXFwiPHN0cm9uZz5cXFxcXFxcIiArIE1ZX1BBUkFNUy5jaGFwdGVyTmFtZSArIFxcXFxcXFwiPC9zdHJvbmc+XFxcXFxcXCIpLmJpZygpLFxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogY29udGVudCxcXFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgdGV4dFNpemU6IDE4LFxcXFxuICAgICAgICBjbGljazogdHJ1ZVxcXFxuICAgIH1cXFxcbn0pO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2ou56ug6IqC5q2j5YiZXFxcIixcXFwicGF0aFxcXCI6XFxcInJlZ3VsYXJDaGFwdGVyLmZcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgcnVsZXMgPSBbe1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xLFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnm67lvZUo5Y6756m655m9KVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W+OAgFxcXFxcXFxcXFxcXFxcXFxzXSkoPzrluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxcXFxcXFxcXHN7MCw0fVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcXFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pKSkuezAsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLnrKzkuIDnq6Ag5YGH6KOF56ys5LiA56ug5YmN6Z2i5pyJ56m655m95L2G5oiR5LiN6KaBXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDBcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMixcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi55uu5b2VXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIl5bIOOAgFxcXFxcXFxcXFxcXFxcXFx0XXswLDR9KD865bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ856ysP1xcXFxcXFxcXFxcXFxcXFxzezAsNH1bXFxcXFxcXFxcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dKz9cXFxcXFxcXFxcXFxcXFxcc3swLDR9KD8656ugfOiKgig/Ieivvil85Y23fOmbhig/IVvlkIjlkoxdKXzpg6goPyFb5YiG6LWb5ri4XSl856+HKD8h5bygKSkpLnswLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi56ys5LiA56ugIOagh+WHhueahOeypOivreWwseaYr+i/meagt1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxXFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTMsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IGZhbHNlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnm67lvZUo5Yy56YWN566A5LuLKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W+OAgFxcXFxcXFxcXFxcXFxcXFxzXSkoPzooPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxcXFxcXFxcXHN7MCw0fVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcXFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pfOmDqCg/IVvliIbotZvmuLhdKXzlm54oPyFb5ZCI5p2l5LqL5Y67XSl85Zy6KD8hW+WSjOWQiOavlOeUteaYr10pfOevhyg/IeW8oCkpKS57MCwzMH0kXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIueugOS7iyDogIHlpKvor7jokZvmnZHlpKtcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMlxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC00LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiBmYWxzZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi55uu5b2VKOWPpOWFuOOAgei9u+Wwj+ivtOWkh+eUqClcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH0oPzrluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnznrKw/XFxcXFxcXFxcXFxcXFxcXHN7MCw0fVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n10rP1xcXFxcXFxcXFxcXFxcXFxzezAsNH0oPzrnq6B86IqCKD8h6K++KXzljbd86ZuGKD8hW+WQiOWSjF0pfOmDqCg/IVvliIbotZvmuLhdKXzlm54oPyFb5ZCI5p2l5LqL5Y67XSl85Zy6KD8hW+WSjOWQiOavlOeUteaYr10pfOivnXznr4coPyHlvKApKSkuezAsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLnrKzkuIDnq6Ag5q+U5LiK6Z2i5Y+q5aSa5LqG5Zue5ZKM6K+dXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDNcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtNSxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIuaVsOWtlyjnuq/mlbDlrZfmoIfpopgpXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIig/PD1b44CAXFxcXFxcXFxcXFxcXFxcXHNdKVxcXFxcXFxcXFxcXFxcXFxkK1xcXFxcXFxcXFxcXFxcXFwuP1sg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH0kXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIjEyXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDRcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtNixcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIuWkp+WGmeaVsOWtlyjnuq/mlbDlrZfmoIfpopgpXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIig/PD1b44CAXFxcXFxcXFxcXFxcXFxcXHNdKVvjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsMTJ9WyDjgIBcXFxcXFxcXFxcXFxcXFxcdF17MCw0fSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5LiA55m+5LiD5Y2BXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDRcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtNyxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5pWw5a2XIOWIhumalOespiDmoIfpopjlkI3np7BcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH1cXFxcXFxcXFxcXFxcXFxcZHsxLDV9WzrvvJosLu+8jCDjgIFf4oCUXFxcXFxcXFxcXFxcXFxcXC1dLnsxLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwiMeOAgei/meS4quWwseaYr+agh+mimFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiA1XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTgsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IHRydWUsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIuWkp+WGmeaVsOWtlyDliIbpmpTnrKYg5qCH6aKY5ZCN56ewXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwicnVsZVxcXFxcXFwiOiBcXFxcXFxcIl5bIOOAgFxcXFxcXFxcXFxcXFxcXFx0XXswLDR9KD865bqP56ugfOallOWtkHzmraPmlocoPyHlrox857uTKXznu4jnq6B85ZCO6K6wfOWwvuWjsHznlarlpJZ8W+OAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fSlbIOOAgV/igJRcXFxcXFxcXFxcXFxcXFxcLV0uezEsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLkuIDjgIHlj6rmnInliY3pnaLnmoTmlbDlrZfmnInlt67liKtcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogNlxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC05LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLmraPmlocg5qCH6aKYL+W6j+WPt1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCJeWyDjgIBcXFxcXFxcXFxcXFxcXFxcdF17MCw0feato+aWh1sg44CAXXsxLDR9LnswLDIwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5q2j5paHIOaIkeWltuW4uOWxsei1teWtkOm+mVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiA3XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTEwLFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCJDaGFwdGVyL1NlY3Rpb24vUGFydC9FcGlzb2RlIOW6j+WPtyDmoIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsg44CAXFxcXFxcXFxcXFxcXFxcXHRdezAsNH0oPzpbQ2NdaGFwdGVyfFtTc11lY3Rpb258W1BwXWFydHzvvLDvvKHvvLLvvLR8W05uXVtvT11cXFxcXFxcXFxcXFxcXFxcLnxbRWVdcGlzb2RlfCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVxcXFxcXFxcXFxcXFxcXFxzezAsNH1cXFxcXFxcXFxcXFxcXFxcZHsxLDR9LnswLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwiQ2hhcHRlciAxIE15R3JhbmRtYUlzTkJcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogOFxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xMSxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIkNoYXB0ZXIo5Y67566A5LuLKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCJeWyDjgIBcXFxcXFxcXFxcXFxcXFxcdF17MCw0fSg/OltDY11oYXB0ZXJ8W1NzXWVjdGlvbnxbUHBdYXJ0fO+8sO+8oe+8su+8tHxbTm5dW09vXVxcXFxcXFxcXFxcXFxcXFwufFtFZV1waXNvZGUpXFxcXFxcXFxcXFxcXFxcXHN7MCw0fVxcXFxcXFxcXFxcXFxcXFxkezEsNH0uezAsMzB9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCJDaGFwdGVyIDEgTXlHcmFuZG1hSXNOQlxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiA5XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTEyLFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnibnmrornrKblj7cg5bqP5Y+3IOagh+mimFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W1xcXFxcXFxcXFxcXFxcXFxz44CAXSlb44CQ44CU44CW44CM44CO44CI77y7XFxcXFxcXFxcXFxcXFxcXFtdKD8656ysfFtDY11oYXB0ZXIpW1xcXFxcXFxcXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDEwfVvnq6DoioJdLnswLDIwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi44CQ56ys5LiA56ugIOWQjumdoueahOespuWPt+WPr+S7peayoeaciVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxMFxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xMyxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogZmFsc2UsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIueJueauiuespuWPtyDmoIfpopgo5oiQ5a+5KVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W1xcXFxcXFxcXFxcXFxcXFxz44CAXXswLDR9KSg/OltcXFxcXFxcXFxcXFxcXFxcW+OAiOOAjOOAjuOAluOAlOOAiu+8iOOAkFxcXFxcXFxcXFxcXFxcXFwoXS57MSwzMH1bXFxcXFxcXFxcXFxcXFxcXCnjgJHvvInjgIvjgJXjgJfjgI/jgI3jgIlcXFxcXFxcXFxcXFxcXFxcXV0/fCg/OuWGheWuuXzmlofnq6ApP+eugOS7i3zmlofmoYh85YmN6KiAfOW6j+eroHzmpZTlrZB85q2j5paHKD8h5a6MfOe7kyl857uI56ugfOWQjuiusHzlsL7lo7B855Wq5aSWKVsg44CAXXswLDR9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLjgI7liqDkuKrnm7Top5LlvJXlj7fmm7TkuJPkuJrjgI9cXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMTFcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMTQsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IHRydWUsXFxcXG4gICAgICAgIFxcXFxcXFwibmFtZVxcXFxcXFwiOiBcXFxcXFxcIueJueauiuespuWPtyDmoIfpopgo5Y2V5LiqKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoPzw9W1xcXFxcXFxcXFxcXFxcXFxz44CAXXswLDR9KSg/OlvimIbimIXinKbinKddLnsxLDMwfXwoPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklilbIOOAgF17MCw0fSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi4piG44CB5pmL5rGf5L2c6ICF5pyA5Zac5qyi55qE5qC85byPXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDEyXFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTE1LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiB0cnVlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLnq6Av5Y23IOW6j+WPtyDmoIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlsgXFxcXFxcXFxcXFxcXFxcXHTjgIBdezAsNH0oPzooPzrlhoXlrrl85paH56ugKT/nroDku4t85paH5qGIfOWJjeiogHzluo/nq6B85qWU5a2QfOato+aWhyg/IeWujHznu5MpfOe7iOeroHzlkI7orrB85bC+5aOwfOeVquWklnxb5Y2356ugXVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fSlbIOOAgF17MCw0fS57MCwzMH0kXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIuWNt+S6lCDlvIDmupDnm5vkuJZcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMTNcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMTYsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IGZhbHNlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLpobbmoLzmoIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXlxcXFxcXFxcXFxcXFxcXFxTLnsxLDIwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5LiN6LaF6L+HMjDkuKrlrZfpobbmoLzlhpnnmoTpg73mmK/moIfpophcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMTRcXFxcbiAgICB9LFxcXFxuICAgIHtcXFxcbiAgICAgICAgXFxcXFxcXCJpZFxcXFxcXFwiOiAtMTcsXFxcXG4gICAgICAgIFxcXFxcXFwiZW5hYmxlXFxcXFxcXCI6IGZhbHNlLFxcXFxuICAgICAgICBcXFxcXFxcIm5hbWVcXFxcXFxcIjogXFxcXFxcXCLlj4zmoIfpopgo5YmN5ZCRKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCIoP20pKD88PVsgXFxcXFxcXFxcXFxcXFxcXHTjgIBdezAsNH0p56ysW1xcXFxcXFxcXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSQoPz1bXFxcXFxcXFxcXFxcXFxcXHPjgIBdezAsOH3nrKxbXFxcXFxcXFxcXFxcXFxcXGTpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH3nq6ApXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwiZXhhbXBsZVxcXFxcXFwiOiBcXFxcXFxcIuesrOS4gOeroCDnnJ/mraPnmoTmoIfpopjlubblgYfoo4XmjaLooYznrKzkuIDnq6Ag6L+Z5Liq5LiN6KaBXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwic2VyaWFsTnVtYmVyXFxcXFxcXCI6IDE1XFxcXG4gICAgfSxcXFxcbiAgICB7XFxcXG4gICAgICAgIFxcXFxcXFwiaWRcXFxcXFxcIjogLTE4LFxcXFxuICAgICAgICBcXFxcXFxcImVuYWJsZVxcXFxcXFwiOiBmYWxzZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5Y+M5qCH6aKYKOWQjuWQkSlcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiKD9tKSg/PD1bIFxcXFxcXFxcXFxcXFxcXFx044CAXXswLDR956ysW1xcXFxcXFxcXFxcXFxcXFxk44CH6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSRbXFxcXFxcXFxcXFxcXFxcXHPjgIBdezAsOH0p56ysW1xcXFxcXFxcXFxcXFxcXFxk6Zu25LiA5LqM5Lik5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5aO56LSw5Y+B6IKG5LyN6ZmG5p+S5o2M546W5ou+5L2w5LufXXsxLDh956ugLnswLDMwfSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi56ys5LiA56ugIOi/meS4quagh+mimOS4jeimgeW5tuWBh+ijheaNouihjOesrOS4gOeroOecn+ato+eahOagh+mimFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxNlxcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0xOSxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5Lmm5ZCNIOaLrOWPtyDluo/lj7dcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJydWxlXFxcXFxcXCI6IFxcXFxcXFwiXi57MSwyMH1bKO+8iF1bXFxcXFxcXFxcXFxcXFxcXGTjgIfpm7bkuIDkuozkuKTkuInlm5vkupTlha3kuIPlhavkuZ3ljYHnmb7ljYPkuIflo7notLDlj4HogobkvI3pmYbmn5LmjYznjpbmi77kvbDku59dezEsOH1bKe+8iV1bIOOAgFxcXFxcXFxcdF17MCw0fSRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJleGFtcGxlXFxcXFxcXCI6IFxcXFxcXFwi5qCH6aKY5ZCO6Z2i5pWw5a2X5pyJ5ous5Y+3KDEyKVxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInNlcmlhbE51bWJlclxcXFxcXFwiOiAxN1xcXFxuICAgIH0sXFxcXG4gICAge1xcXFxuICAgICAgICBcXFxcXFxcImlkXFxcXFxcXCI6IC0yMCxcXFxcbiAgICAgICAgXFxcXFxcXCJlbmFibGVcXFxcXFxcIjogdHJ1ZSxcXFxcbiAgICAgICAgXFxcXFxcXCJuYW1lXFxcXFxcXCI6IFxcXFxcXFwi5Lmm5ZCNIOW6j+WPt1xcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcInJ1bGVcXFxcXFxcIjogXFxcXFxcXCJeLnsxLDIwfVtcXFxcXFxcXFxcXFxcXFxcZOOAh+mbtuS4gOS6jOS4pOS4ieWbm+S6lOWFreS4g+WFq+S5neWNgeeZvuWNg+S4h+Wjuei0sOWPgeiChuS8jemZhuafkuaNjOeOluaLvuS9sOS7n117MSw4fVsg44CAXFxcXFxcXFx0XXswLDR9JFxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcImV4YW1wbGVcXFxcXFxcIjogXFxcXFxcXCLmoIfpopjlkI7pnaLmlbDlrZfmsqHmnInmi6zlj7cxMjRcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCJzZXJpYWxOdW1iZXJcXFxcXFxcIjogMThcXFxcbiAgICB9XFxcXG5dO1xcXFxubGV0IE1hdGNoZXIgPSBqYXZhLnV0aWwucmVnZXguTWF0Y2hlcjtcXFxcbmxldCBQYXR0ZXJuID0gamF2YS51dGlsLnJlZ2V4LlBhdHRlcm47XFxcXG5cXFxcbmZ1bmN0aW9uIGdldFRvY1J1bGUoY29udGVudCkge1xcXFxuICAgIGxldCBtYXhDcyA9IDE7XFxcXG4gICAgbGV0IHRvY1BhdHRlcm4gPSBudWxsO1xcXFxuICAgIGZvciAobGV0IHRvY1J1bGUgb2YgcnVsZXMpIHtcXFxcbiAgICAgICAgaWYgKCF0b2NSdWxlLmVuYWJsZSkgY29udGludWU7XFxcXG4gICAgICAgIGxldCBwYXR0ZXJuID0gUGF0dGVybi5jb21waWxlKHRvY1J1bGUucnVsZSwgUGF0dGVybi5NVUxUSUxJTkUpO1xcXFxuICAgICAgICBsZXQgbWF0Y2hlciA9IHBhdHRlcm4ubWF0Y2hlcihjb250ZW50KTtcXFxcbiAgICAgICAgbGV0IGNzID0gMDtcXFxcbiAgICAgICAgd2hpbGUgKG1hdGNoZXIuZmluZCgpKSB7XFxcXG4gICAgICAgICAgICBjcysrO1xcXFxuICAgICAgICB9XFxcXG4gICAgICAgIGlmIChjcyA+PSBtYXhDcykge1xcXFxuICAgICAgICAgICAgbWF4Q3MgPSBjcztcXFxcbiAgICAgICAgICAgIHRvY1BhdHRlcm4gPSBwYXR0ZXJuO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIHJldHVybiB0b2NQYXR0ZXJuO1xcXFxufVxcXFxuJC5leHBvcnRzLmdldFRvY1J1bGUgPSBnZXRUb2NSdWxlO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiNWLuW4ruWKqVxcXCIsXFxcInBhdGhcXFwiOlxcXCJoZWxwLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5sZXQgaGVscFRleHQgPSB7XFxcXG4gICAgXFxcXFxcXCJ0eHRcXFxcXFxcIjogYFxcXFxuICAgICAgICA8aDEgaWQ9XFxcXFxcXCJ0eHTmmK/ku4DkuYhcXFxcXFxcIj5UWFTmmK/ku4DkuYg/PC9oMT5cXFxcbiAgICAgICAgPHA+PGEgaHJlZj1cXFxcXFxcImh0dHBzOi8vYmFpa2UuYmFpZHUuY29tL2l0ZW0vdHh0LzEyMTczMzBcXFxcXFxcIj7miJHlt7Lnu4/luK7kvaDnmb7luqbkuoY8L2E+77yb566A5Y2V5p2l6K+05bCx5piv5LiA56eN5YKo5a2Y5bCP6K+055qE5paH5Lu2KOaJqeWxleWQjTp0eHQp44CCPC9wPlxcXFxuICAgICAgICA8aDEgaWQ9XFxcXFxcXCLlpoLkvZXnlKjor6XlsI/nqIvluo/pmIXor7t0eHTlsI/or7RcXFxcXFxcIj7lpoLkvZXnlKjor6XlsI/nqIvluo/pmIXor7t0eHTlsI/or7Q/PC9oMT5cXFxcbiAgICAgICAgPHA+5Zyo5Li76aG16Z2iIOKXiVRYVCDnlYzpnaLkuIvvvIzngrnlh7vlr7zlhaVUWFTvvIzpgInmi6nnm67moIflsI/or7Tmlofku7YodHh05paH5Lu277yMPGVtPuivpeaTjeS9nOS4jeS8muWIoOmZpHR4dOaWh+S7tu+8jOiAjOaYr2NvcHnkuIDku73liLDlsI/nqIvluo/nmoTot6/lvoTkuIs8L2VtPinvvIzlr7zlhaXlkI7lho3lnKgg4peJVFhUIOeVjOmdouS4i+mAieaLqeaDs+imgemYheivu+eahOWwj+ivtOWNs+WPr+OAgjwvcD5cXFxcblxcXFxuICAgIGAsXFxcXG4gICAgXFxcXFxcXCJub3ZlbENvbWljXFxcXFxcXCI6IGBcXFxcbiAgICAgICAgPGgxIGlkPVxcXFxcXFwi6L+Z5Liq5bCP56iL5bqP5pyJ5LuA5LmI55So77yfXFxcXFxcXCI+6L+Z5Liq5bCP56iL5bqP5pyJ5LuA5LmI55So77yfPC9oMT5cXFxcbiAgICAgICAgPHVsPlxcXFxuICAgICAgICA8bGk+PHU+5Luj56CB5LiK5Li65YW25LuW5bCP56iL5bqPKOa8q+eUu+exuy/lsI/or7Tnsbsp5o+Q5L6b5LiL6L295o6l5Y+j44CCPC91PjwvbGk+XFxcXG4gICAgICAgIDxsaT48dT7mnKzkvZPlhYXlvZPpmIXor7vlmajvvIzlj6/ku6XmtY/op4jnlKjor6XlsI/nqIvluo/mj5DkvpvnmoTkuIvovb3mjqXlj6Mo5LiK6Z2iKe+8jOS4i+i9veeahOa8q+eUuy/lsI/or7TjgII8L3U+PC9saT5cXFxcbiAgICAgICAgPGxpPjx1PuaPkOS+m1RYVOagvOW8j+Wwj+ivtOaWh+S7tuino+aekOWKn+iDveOAgjwvdT5cXFxcbiAgICAgICAgPGgxIGlkPVxcXFxcXFwi5Li65LuA5LmI5YiX6KGo6YeM5LuA5LmI6YO95rKh55SoXFxcXFxcXCI+5Li65LuA5LmI5YiX6KGo6YeM5LuA5LmI6YO95rKh55SoPzwvaDE+XFxcXG4gICAgICAgIDx1PuWIneasoeS9v+eUqO+8jOayoeacieW+iOato+W4uOWQp+OAgvCfpJQ8L3U+XFxcXG4gICAgICAgIDxoMSBpZD1cXFxcXFxcIuivpeWmguS9lea3u+WKoOa8q+eUu+aIluWwj+ivtFxcXFxcXFwiPuivpeWmguS9lea3u+WKoOa8q+eUuyjmiJblsI/or7QpPzwvaDE+XFxcXG4gICAgICAgIDx1PiDlnKjkuIDkuKrmnInkuIvovb3lip/og73nmoTlsI/nqIvluo8o5ryr55S757G7L+Wwj+ivtOexuynkuK3kuIvovb3kuIDmnKzmvKvnlLsv5bCP6K+077yM6L+U5Zue6K+l6KeE5YiZ5Y2z5Y+v5rWP6KeI44CCPC91PjwvbGk+XFxcXG4gICAgICAgIDwvdWw+XFxcXG4gICAgYFxcXFxufTtcXFxcbnNldFBhZ2VUaXRsZShcXFxcXFxcIuW4ruWKqVxcXFxcXFwiKTtcXFxcbmxldCBrZXl3b3JkID0gZ2V0UGFyYW0oXFxcXFxcXCJrZXl3b3JkXFxcXFxcXCIpO1xcXFxubGV0IHRleHQ7XFxcXG5pZiAoa2V5d29yZCA9PT0gdW5kZWZpbmVkIHx8ICEodGV4dCA9IGhlbHBUZXh0W2tleXdvcmRdKSkge1xcXFxuICAgIHNldFJlc3VsdChbe1xcXFxuICAgICAgICB0aXRsZTogJzxoMSBzdHlsZT1cXFxcXFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFxcXFxcIj7otYTmlpnkuI3op4Hlkq88L2gxPicsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfV0pO1xcXFxufSBlbHNlIHtcXFxcbiAgICBzZXRSZXN1bHQoW3tcXFxcbiAgICAgICAgdGl0bGU6IHRleHQsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiXFxcXG4gICAgfV0pO1xcXFxufVxcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJ0ZXh0XzFcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3Yu5aSW5a+85pCc57SiXFxcIixcXFwicGF0aFxcXCI6XFxcInR4dFNlYXJjaC52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuXFxcXG5sZXQgc2VhcmNoVGVybXMgPSBkZWNvZGVVUklDb21wb25lbnQoZ2V0UGFyYW0oXFxcXFxcXCJzZWFyY2hUZXJtc1xcXFxcXFwiKSk7XFxcXG5zZXRQYWdlVGl0bGUoXFxcXFxcXCLjgIxcXFxcXFxcIiArIHNlYXJjaFRlcm1zICsgXFxcXFxcXCLjgI3nmoTmkJzntKLnu5PmnpxcXFxcXFxcIik7XFxcXG5sZXQgZGF0YSA9IEZpbGUuZ2V0RmlsZVBhdGgoQ29uZmlnLmV4dGVybmFsSW1wb3J0UGF0aCwgdW5kZWZpbmVkKTtcXFxcbmRhdGEgPSBkYXRhLmZpbHRlcih2ID0+IC8oXFxcXFxcXFwudHh0fFxcXFxcXFxcLmVwdWIpJC8udGVzdCh2Lm5hbWUpKTtcXFxcblxcXFxubGV0IHRlcm1zQXJyID0gc2VhcmNoVGVybXMuc3BsaXQoXFxcXFxcXCJcXFxcXFxcIikubWFwKHQgPT4gdC5yZXBsYWNlKC9cXFxcXFxcXCp8XFxcXFxcXFwufFxcXFxcXFxcP3xcXFxcXFxcXCt8XFxcXFxcXFwkfFxcXFxcXFxcXnxcXFxcXFxcXFt8XFxcXFxcXFxdfFxcXFxcXFxcKHxcXFxcXFxcXCl8XFxcXFxcXFx7fFxcXFxcXFxcfXxcXFxcXFxcXHx8XFxcXFxcXFwvfFxcXFxcXFxcXFxcXFxcXFwvZywgayA9PiBcXFxcXFxcIlxcXFxcXFxcXFxcXFxcXFxcXFxcXFxcIiArIGspKTtcXFxcbmxldCByZWcgPSBuZXcgUmVnRXhwKHRlcm1zQXJyLmpvaW4oXFxcXFxcXCIuKlxcXFxcXFwiKSwgXFxcXFxcXCJpXFxcXFxcXCIpO1xcXFxubGV0IHNlYXJjaFJlc3VsdCA9IFtdO1xcXFxuZm9yIChsZXQgdHh0IG9mIGRhdGEpIHtcXFxcbiAgICBpZiAocmVnLnRlc3QodHh0Lm5hbWUpKSB7XFxcXG4gICAgICAgIGxldCB0eXBlID0gdHh0Lm5hbWUuc3Vic3RyaW5nKHR4dC5uYW1lLmxhc3RJbmRleE9mKFxcXFxcXFwiLlxcXFxcXFwiKSk7XFxcXG4gICAgICAgIHNlYXJjaFJlc3VsdC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiB0eHQubmFtZSxcXFxcbiAgICAgICAgICAgIHVybDogKHR5cGU9PT1cXFxcXFxcIi50eHRcXFxcXFxcIj9cXFxcXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlld1xcXFxcXFwiOlxcXFxcXFwiaGlrZXI6Ly9wYWdlL2VwdWJQYXJzZXIudmlldyNhdXRvQ2FjaGUjXFxcXFxcXCIpK1xcXFxcXFwiP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLnRpdGxlLFxcXFxuICAgICAgICAgICAgZGVzYzogdHh0LnBhdGgsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIHBhdGg6IHR4dC5wYXRoLFxcXFxuICAgICAgICAgICAgICAgIGlzQ2FjaGU6IHRydWUsXFxcXG4gICAgICAgICAgICAgICAgdGl0bGU6IHR4dC5uYW1lXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuICAgIH1cXFxcbn1cXFxcbmlmIChzZWFyY2hSZXN1bHQubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgc2VhcmNoUmVzdWx0LnB1c2goe1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcXFxcXCIsXFxcXG4gICAgfSwge1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcXFxcXCIsXFxcXG4gICAgfSwge1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcXFxcXCIsXFxcXG4gICAgfSwge1xcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJiaWdfYmlnX2JsYW5rX2Jsb2NrXFxcXFxcXCIsXFxcXG4gICAgfSwge1xcXFxuICAgICAgICB0aXRsZTogJzxoMiBzdHlsZT1cXFxcXFxcInRleHQtYWxpZ246IGNlbnRlcjtcXFxcXFxcIj7wn5SO5rKh5pyJ5om+5Yiw55u45YWz5Lmm57GNPC9oMj4nLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIlxcXFxuICAgIH0pO1xcXFxufVxcXFxuc2V0UmVzdWx0KHNlYXJjaFJlc3VsdCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2Yu6ZW/5oyJXFxcIixcXFwicGF0aFxcXCI6XFxcImxvbmdQcmVzcy5qc1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbiQuZXhwb3J0cyA9IHtcXFxcbiAgICBkZWxldGVGaWxlRm9yQm9vayhwYXRoKSB7XFxcXG4gICAgICAgIC8vcmV0dXJuICQoXFxcXFxcXCLmiYDmnInnmoQg5ryr55S7L+Wwj+ivtCDnq6DoioLlsIbooqvliKDpmaRcXFxcXFxcXG3noa7orqTliKDpmaTvvJ9cXFxcXFxcIikuY29uZmlybSgocGF0aCkgPT4ge1xcXFxuICAgICAgICBjb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG4gICAgICAgIGlmIChGaWxlLmRlbGV0ZUZpbGVzKHBhdGgpKSB7XFxcXG4gICAgICAgICAgICBkZWxldGVJdGVtKHBhdGgpXFxcXG4gICAgICAgICAgICByZXR1cm4gXFxcXFxcXCJ0b2FzdDovL+WIoOmZpOaIkOWKn1xcXFxcXFwiO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTlpLHotKVcXFxcXFxcIjtcXFxcbiAgICAgICAgfVxcXFxuICAgICAgICAvL30sIHBhdGgpO1xcXFxuICAgIH0sXFxcXG4gICAgZGVsZXRlRmlsZUZvclR4dChwYXRoKSB7XFxcXG4gICAgICAgIGNvbnN0IEZpbGUgPSAkLnJlcXVpcmUoXFxcXFxcXCJoaWtlcjovL3BhZ2UvRmlsZS5qc1xcXFxcXFwiKTtcXFxcbiAgICAgICAgaWYgKEZpbGUuZGVsZXRlRmlsZXMocGF0aCkpIHtcXFxcbiAgICAgICAgICAgIGlmIChmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBwYXRoICsgXFxcXFxcXCIuanNvblxcXFxcXFwiKSkge1xcXFxuICAgICAgICAgICAgICAgIEZpbGUuZGVsZXRlRmlsZXMocGF0aCArIFxcXFxcXFwiLmpzb25cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBkZWxldGVJdGVtKHBhdGgpO1xcXFxuICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwidG9hc3Q6Ly/liKDpmaTmiJDlip9cXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcInRvYXN0Oi8v5Yig6Zmk5aSx6LSlXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG59XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI2ZnLuS4i+i9veS4u+eoi+W6j1xcXCIsXFxcInBhdGhcXFwiOlxcXCJtYWluRG93bmxvYWRcXFwiLFxcXCJydWxlXFxcIjpcXFwiY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9GaWxlLmpzXFxcXFxcXCIpO1xcXFxuY29uc3QgQ29uZmlnID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuY29uc3QgVG9vbCA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Ub29sLmpzXFxcXFxcXCIpO1xcXFxuXFxcXG4kLmV4cG9ydHMubm92ZWwgPSBmdW5jdGlvbiBub3ZlbChpdGVtLCBpbmZvLCBvcmRlciwgTVlfSUQsIGludGVycnVwdCkge1xcXFxuICAgIGxldCBtYWluUGF0aCA9IENvbmZpZy5ub3ZlbFBhdGggKyBcXFxcXFxcIi9cXFxcXFxcIiArIGluZm8ucnVsZU5hbWUgKyBcXFxcXFxcIi9cXFxcXFxcIiArIFRvb2wudGV4dFNoaWVsZChpbmZvLmJvb2tOYW1lKSArIFxcXFxcXFwiL1xcXFxcXFwiO1xcXFxuICAgIGxldCBjaGFwdGVyUGF0aCA9IG1haW5QYXRoICsgb3JkZXIgKyBcXFxcXFxcIiRBJFxcXFxcXFwiICsgVG9vbC50ZXh0U2hpZWxkKGl0ZW0udGl0bGUpICsgXFxcXFxcXCIudHh0XFxcXFxcXCI7XFxcXG4gICAgbGV0IGNvbnRlbnQgPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuICAgIGlmIChpbnRlcnJ1cHQgJiYgZ2V0TXlWYXIoTVlfSUQgKyBcXFxcXFxcIjpzdGF0dXNcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikgPT09IFxcXFxcXFwiMVxcXFxcXFwiKSB7XFxcXG4gICAgICAgIHJldHVybiAtMTtcXFxcbiAgICB9XFxcXG4gICAgdHJ5IHtcXFxcbiAgICAgICAgbGV0IGdldENvbnRlbnQgPSBuZXcgRnVuY3Rpb24oXFxcXFxcXCJpbnB1dFxcXFxcXFwiLCBcXFxcXFxcInVybFxcXFxcXFwiLCBcXFxcXFxcInJldHVybiBcXFxcXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXFxcbiAgICAgICAgY29udGVudCA9IGdldENvbnRlbnQoaXRlbS51cmwsIGl0ZW0udXJsKSB8fCBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgZS5tZXNzYWdlID0gXFxcXFxcXCI85bCP6K+05q2j5paH6Kej5p6Q6ZSZ6K+vPiBcXFxcXFxcIiArIGUubWVzc2FnZTtcXFxcbiAgICAgICAgdGhyb3cgZTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKCFjb250ZW50KSB7XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi5bCP6K+05Li656m6XFxcXFxcXCIpO1xcXFxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXFxcXFxcXCI85bCP6K+05q2j5paH6Kej5p6Q6ZSZ6K+v77ya5q2j5paH6L+U5Zue5Li656m6PlxcXFxcXFwiKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKGluZm8uYm9va1RvcFBpYykge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IGJvb2tUb3BQaWMgPSBUb29sLmhpa2VyUGljKGluZm8uYm9va1RvcFBpYyk7XFxcXG4gICAgICAgICAgICBUb29sLnBpY0Rvd25sb2FkKGJvb2tUb3BQaWNbMF0sIG1haW5QYXRoICsgaW5mby5ib29rTmFtZSArIFxcXFxcXFwiLmpwZ1xcXFxcXFwiLCBib29rVG9wUGljWzFdLCBpbmZvLmRlY29kZSk7XFxcXG5cXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKFxcXFxcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcXFxcXCIgKyBlLm1lc3NhZ2UpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuICAgIEZpbGUuZmlsZVdyaXRlKGNoYXB0ZXJQYXRoLCBjb250ZW50LnJlcGxhY2UoLzxzY3JpcHQ+Lio/PFxcXFxcXFxcL3NjcmlwdD4vZ21pLCBcXFxcXFxcIlxcXFxcXFwiKS50cmltUmlnaHQoKSk7XFxcXG4gICAgLy9GaWxlLnJlbmFtZUZpbGUoY2hhcHRlclBhdGgsIG9yZGVyICsgXFxcXFxcXCIkQSRcXFxcXFxcIiArIGl0ZW0udGl0bGUgKyBcXFxcXFxcIi50eHRcXFxcXFxcIik7XFxcXG59XFxcXG5cXFxcbiQuZXhwb3J0cy5jb21pYyA9IGZ1bmN0aW9uIGNvbWljKGl0ZW0sIGluZm8sIG9yZGVyLCBNWV9JRCwgaW50ZXJydXB0KSB7XFxcXG4gICAgbGV0IG1haW5QYXRoID0gQ29uZmlnLmNvbWljUGF0aCArIFxcXFxcXFwiL1xcXFxcXFwiICsgaW5mby5ydWxlTmFtZSArIFxcXFxcXFwiL1xcXFxcXFwiICsgVG9vbC50ZXh0U2hpZWxkKGluZm8uYm9va05hbWUpICsgXFxcXFxcXCIvXFxcXFxcXCI7XFxcXG4gICAgbGV0IGNoYXB0ZXJQYXRoID0gbWFpblBhdGggKyBvcmRlciArIFxcXFxcXFwiJEIkXFxcXFxcXCIgKyBUb29sLnRleHRTaGllbGQoaXRlbS50aXRsZSkgKyBcXFxcXFxcIi9cXFxcXFxcIjtcXFxcbiAgICBsZXQgcGljTGlzdCA9IFtdO1xcXFxuICAgIHRyeSB7XFxcXG4gICAgICAgIGxldCBnZXRQaWNMaXN0ID0gbmV3IEZ1bmN0aW9uKFxcXFxcXFwiaW5wdXRcXFxcXFxcIiwgXFxcXFxcXCJ1cmxcXFxcXFxcIiwgXFxcXFxcXCJyZXR1cm5cXFxcXFxcIiArIGluZm8ucGFyc2VDb2RlKTtcXFxcbiAgICAgICAgcGljTGlzdCA9IGdldFBpY0xpc3QoaXRlbS51cmwsIGl0ZW0udXJsKTtcXFxcbiAgICAgICAgaWYgKHR5cGVvZiBwaWNMaXN0ID09PSBcXFxcXFxcInN0cmluZ1xcXFxcXFwiKSB7XFxcXG4gICAgICAgICAgICBwaWNMaXN0ID0gcGljTGlzdC5yZXBsYWNlKFxcXFxcXFwicGljczovL1xcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKS5zcGxpdChcXFxcXFxcIiYmXFxcXFxcXCIpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICBlLm1lc3NhZ2UgPSBcXFxcXFxcIjzmvKvnlLvlm77niYfop6PmnpDplJnor68+IFxcXFxcXFwiICsgZS5tZXNzYWdlO1xcXFxuICAgICAgICB0aHJvdyBlO1xcXFxuICAgIH1cXFxcbiAgICBjb25zdCBMID0gcGljTGlzdC5sZW5ndGg7XFxcXG4gICAgaWYgKEwgPT09IDApIHtcXFxcbiAgICAgICAgdG9hc3QoXFxcXFxcXCLlm77niYfpk77mjqXkuLrnqbpcXFxcXFxcIik7XFxcXG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcXFxcXFxcIjzmvKvnlLvlm77niYfop6PmnpDplJnor6/vvJrlm77niYfpk77mjqXov5Tlm57kuLrnqbo+XFxcXFxcXCIpO1xcXFxuICAgIH1cXFxcbiAgICBpZiAoaW5mby5ib29rVG9wUGljKSB7XFxcXG4gICAgICAgIHRyeSB7XFxcXG4gICAgICAgICAgICBsZXQgYm9va1RvcFBpYyA9IFRvb2wuaGlrZXJQaWMoaW5mby5ib29rVG9wUGljKTtcXFxcbiAgICAgICAgICAgIFRvb2wucGljRG93bmxvYWQoYm9va1RvcFBpY1swXSwgbWFpblBhdGggKyBpbmZvLmJvb2tOYW1lICsgXFxcXFxcXCIuanBnXFxcXFxcXCIsIGJvb2tUb3BQaWNbMV0sIGluZm8uZGVjb2RlKTtcXFxcbiAgICAgICAgfSBjYXRjaCAoZSkge1xcXFxuICAgICAgICAgICAgbG9nKFxcXFxcXFwiPOWwgemdouS4i+i9vemUmeivrz4gXFxcXFxcXCIgKyBlLm1lc3NhZ2UpO1xcXFxuICAgICAgICB9XFxcXG4gICAgfVxcXFxuXFxcXG4gICAgbGV0IGVycm9yTnVtID0gMDtcXFxcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IEw7IGkrKykge1xcXFxuICAgICAgICB0cnkge1xcXFxuICAgICAgICAgICAgbGV0IHBpYyA9IFRvb2wuaGlrZXJQaWMocGljTGlzdFtpXSk7XFxcXG4gICAgICAgICAgICBUb29sLnBpY0Rvd25sb2FkKHBpY1swXSwgY2hhcHRlclBhdGggKyAoaSArIDEpICsgXFxcXFxcXCIuanBnXFxcXFxcXCIsIHBpY1sxXSwgaW5mby5kZWNvZGUpO1xcXFxuICAgICAgICAgICAgaWYgKGludGVycnVwdCAmJiBnZXRNeVZhcihNWV9JRCArIFxcXFxcXFwiOnN0YXR1c1xcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKSA9PT0gXFxcXFxcXCIxXFxcXFxcXCIpIHtcXFxcbiAgICAgICAgICAgICAgICByZXR1cm4gLTE7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgICAgICBlcnJvck51bSA9IDA7XFxcXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcXFxcbiAgICAgICAgICAgIGlmIChlcnJvck51bSA8IDEwKSB7XFxcXG4gICAgICAgICAgICAgICAgaS0tO1xcXFxuICAgICAgICAgICAgICAgIGVycm9yTnVtKys7XFxcXG4gICAgICAgICAgICAgICAgY29udGludWU7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHRocm93IGU7XFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG5cXFxcbiAgICBGaWxlLnJlbmFtZUZpbGUoY2hhcHRlclBhdGgsIG9yZGVyICsgXFxcXFxcXCIkQSRcXFxcXFxcIiArIFRvb2wudGV4dFNoaWVsZChpdGVtLnRpdGxlKSk7XFxcXG59XFxcXG5cXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi7mvKvnlLvlhbzlrrlcXFwiLFxcXCJwYXRoXFxcIjpcXFwiY29taWNDb21wYXRpYmxlLnZpZXdcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0ZpbGUuanNcXFxcXFxcIik7XFxcXG5zZXRQYWdlVGl0bGUoJC5sb2coTVlfUEFSQU1TLnRpdGxlKSk7XFxcXG5sZXQgZmlsZWxpc3QgPSBGaWxlLmdldEZpbGVQYXRoKE1ZX1BBUkFNUy5wYXRoKTtcXFxcbmxldCBwaWNsaXN0ID0gZmlsZWxpc3QubWFwKChpdGVtLCBpKSA9PiAoe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcInBpY18xX2Z1bGxcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiLFxcXFxuICAgIHBpY191cmw6IE1ZX1BBUkFNUy5wYXRoICsgXFxcXFxcXCIvXFxcXFxcXCIgKyAoaSArIDEpICsgXFxcXFxcXCIuanBnXFxcXFxcXCJcXFxcbn0pKTtcXFxcblxcXFxuc2V0UmVzdWx0KHBpY2xpc3QpO1xcXCJ9LHtcXFwiY29sX3R5cGVcXFwiOlxcXCJtb3ZpZV8zXFxcIixcXFwibmFtZVxcXCI6XFxcIiN2LuS5puaetlxcXCIsXFxcInBhdGhcXFwiOlxcXCJCb29rcmFjay52aWV3XFxcIixcXFwicnVsZVxcXCI6XFxcImpzOlxcXFxuY29uc3QgRmlsZSA9ICQucmVxdWlyZShcXFxcXFxcIkZpbGUuanNcXFxcXFxcIik7XFxcXG5jb25zdCByYW5rID0gJC5yZXF1aXJlKFxcXFxcXFwiZmlsZVJhbmsuanNcXFxcXFxcIik7XFxcXG5jb25zdCBUb29sID0gJC5yZXF1aXJlKFxcXFxcXFwiVG9vbC5qc1xcXFxcXFwiKTtcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcIkNvbmZpZy5qc29uXFxcXFxcXCIpO1xcXFxuXFxcXG4oZnVuY3Rpb24oKSB7XFxcXG4gICAgbGV0IHR5cGUgPSBNWV9QQVJBTVMudHlwZSB8fCBnZXRQYXJhbShcXFxcXFxcInR5cGVcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIikgfHwgXFxcXFxcXCJjb21pY1xcXFxcXFwiO1xcXFxuICAgIGxldCBydWxlTmFtZSA9IFRvb2wudGV4dFNoaWVsZChNWV9QQVJBTVMucnVsZU5hbWUgfHwgZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwicnVsZU5hbWVcXFxcXFxcIikpKTtcXFxcbiAgICBpZiAoIXJ1bGVOYW1lKSB7XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi6K+35Lyg5YWl6KeE5YiZ5ZCNXFxcXFxcXCIpO1xcXFxuICAgICAgICBiYWNrKGZhbHNlKTtcXFxcbiAgICB9XFxcXG4gICAgaWYgKCFbXFxcXFxcXCJjb21pY1xcXFxcXFwiLCBcXFxcXFxcIm5vdmVsXFxcXFxcXCJdLmluY2x1ZGVzKHR5cGUpKSB7XFxcXG4gICAgICAgIHRvYXN0KFxcXFxcXFwi6K+35Lyg5YWl5q2j56Gu55qEdHlwZTpjb21pYyBub3ZlbFxcXFxcXFwiKTtcXFxcbiAgICAgICAgYmFjayhmYWxzZSk7XFxcXG4gICAgfVxcXFxuICAgIHNldFBhZ2VUaXRsZShydWxlTmFtZSArIFxcXFxcXFwifOacrOWcsOS5puaetlxcXFxcXFwiKTtcXFxcbiAgICBsZXQgbGF5b3V0ID0gW107XFxcXG4gICAgbGV0IHBhdGggPSBDb25maWdbdHlwZSArIFxcXFxcXFwiUGF0aFxcXFxcXFwiXSArIHJ1bGVOYW1lO1xcXFxuICAgIGxldCBjb2xfdHlwZSA9IGdldEl0ZW0oXFxcXFxcXCJib29rcmFjazpjb2xfdHlwZVxcXFxcXFwiLCBcXFxcXFxcIm1vdmllXzNfbWFycXVlZVxcXFxcXFwiKTtcXFxcbiAgICBsZXQgcmFua01ldGhvZCA9IGdldEl0ZW0oXFxcXFxcXCJib29rcmFjazpyYW5rTWV0aG9kXFxcXFxcXCIsIFxcXFxcXFwi57O757ufXFxcXFxcXCIpO1xcXFxuICAgIGxldCByYW5rSXNSZXZlcnNlID0gZ2V0SXRlbShcXFxcXFxcImJvb2tyYWNrOnJhbmtJc1JldmVyc2VcXFxcXFxcIiwgXFxcXFxcXCJcXFxcXFxcIik7XFxcXG5cXFxcbiAgICBsZXQgY29sVHlwZXMgPSBbXFxcXFxcXCJtb3ZpZV8xXFxcXFxcXCIsIFxcXFxcXFwibW92aWVfMlxcXFxcXFwiLCBcXFxcXFxcIm1vdmllXzNfbWFycXVlZVxcXFxcXFwiLCBcXFxcXFxcIm1vdmllXzFfdmVydGljYWxfcGljXFxcXFxcXCIsIFxcXFxcXFwicGljXzJcXFxcXFxcIiwgXFxcXFxcXCJwaWNfM1xcXFxcXFwiLCBcXFxcXFxcInBpY18zX3NxdWFyZVxcXFxcXFwiLCBcXFxcXFxcInBpY18yX2NhcmRcXFxcXFxcIl07XFxcXG4gICAgXFxcXG4gICAgbGV0IHJhbmtNZXRob2RzID0gW1xcXFxcXFwi57O757ufXFxcXFxcXCIsIFxcXFxcXFwi5aSn5bCPXFxcXFxcXCIsIFxcXFxcXFwi5ZCN56ewXFxcXFxcXCIsIFxcXFxcXFwi5pe26Ze0XFxcXFxcXCJdO1xcXFxuICAgIGxheW91dC5wdXNoKHtcXFxcbiAgICAgICAgdXJsOiAnXFxcXFxcXCJoaWtlcjovL3NlYXJjaD9zPVxcXFxcXFwiK2lucHV0JyxcXFxcbiAgICAgICAgZGVzYzogXFxcXFxcXCLmkJzkvaDmg7PopoHnmoQjXFxcXFxcXCIgKyB0eXBlICsgXFxcXFxcXCIjLi4uLi4uXFxcXFxcXCIsXFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCflI1cXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiaW5wdXRcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIHJ1bGVzOiAkLnRvU3RyaW5nKChydWxlTmFtZSwgdHlwZSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGxldCBhcnIxID0gW3tcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIFxcXFxcXFwidGl0bGVcXFxcXFxcIjogcnVsZU5hbWUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInNlYXJjaF91cmxcXFxcXFxcIjogXFxcXFxcXCJoaWtlcjovL2VtcHR5P2lzQWxsPTEmc2VhcmNoVGVybXM9KiomdHlwZT1cXFxcXFxcIiArIHR5cGUsXFxcXG4gICAgICAgICAgICAgICAgICAgICAgICBcXFxcXFxcInNlYXJjaEZpbmRcXFxcXFxcIjogXFxcXFxcXCJqczokLnJlcXVpcmUoJ2hpa2VyOi8vcGFnZS9TZWFyY2gudmlldz9ydWxlPScrTVlfUlVMRS5fdGl0bGUpO1xcXFxcXFwiXFxcXG4gICAgICAgICAgICAgICAgICAgIH1dO1xcXFxuICAgICAgICAgICAgICAgIFxcXFxuICAgICAgICAgICAgICAgIHJldHVybiBKU09OLnN0cmluZ2lmeShhcnIxKTtcXFxcbiAgICAgICAgICAgIH0sIHJ1bGVOYW1lLCB0eXBlKSxcXFxcbiAgICAgICAgICAgIC8qZGVmYXVsdFZhbHVlOiBnZXRNeVZhcignc2VhcmNoS2V5JywgJycpLFxcXFxuICAgICAgICAgICAgb25DaGFuZ2U6IFxcXFxcXFwicHV0TXlWYXIoJ3NlYXJjaEtleScsaW5wdXQpXFxcXFxcXCIqL1xcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG5cXFxcbiAgICBsYXlvdXQucHVzaCh7XFxcXG4gICAgICAgIHRpdGxlOiBcXFxcXFxcIvCfp6lcXFxcXFxcIixcXFxcbiAgICAgICAgY29sX3R5cGU6IFxcXFxcXFwiZmxleF9idXR0b25cXFxcXFxcIixcXFxcbiAgICAgICAgdXJsOiAkKGNvbFR5cGVzLm1hcCh2PT52PT09Y29sX3R5cGU/XFxcXFxcXCLigJzigJxcXFxcXFxcIit2K1xcXFxcXFwi4oCd4oCdXFxcXFxcXCI6dikpLnNlbGVjdCgobmFtZSkgPT4ge1xcXFxuICAgICAgICAgICAgaWYoL+KAnOKAnC4qP+KAneKAnS8udGVzdChpbnB1dCkpIHJldHVybjtcXFxcbiAgICAgICAgICAgIHNldEl0ZW0oXFxcXFxcXCJib29rcmFjazpjb2xfdHlwZVxcXFxcXFwiLCBpbnB1dCk7XFxcXG4gICAgICAgICAgICByZWZyZXNoUGFnZSgpO1xcXFxuICAgICAgICB9KVxcXFxuICAgIH0pO1xcXFxuICAgIGZvciAobGV0IG5hbWUgb2YgcmFua01ldGhvZHMpIHtcXFxcbiAgICAgICAgbGV0IGEgPSByYW5rTWV0aG9kID09PSBuYW1lO1xcXFxuICAgICAgICBsZXQgdGl0bGVhID0gYSA/IFxcXFxcXFwi4oCY4oCYXFxcXFxcXCIgKyBuYW1lICsgXFxcXFxcXCLigJnigJlcXFxcXFxcIiA6IG5hbWU7XFxcXG4gICAgICAgIGxldCB0aXRsZWIgPSBcXFxcXFxcIlxcXFxcXFwiO1xcXFxuICAgICAgICBpZiAoYSkge1xcXFxuICAgICAgICAgICAgdGl0bGViID0gIXJhbmtJc1JldmVyc2UgPyBcXFxcXFxcIuKGk1xcXFxcXFwiIDogXFxcXFxcXCLihpFcXFxcXFxcIjtcXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIHRpdGxlYiA9IFxcXFxcXFwi4oaVXFxcXFxcXCI7XFxcXG4gICAgICAgIH1cXFxcbiAgICAgICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IHRpdGxlYSArIHRpdGxlYixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcImZsZXhfYnV0dG9uXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICB1cmw6ICQoXFxcXFxcXCIjbm9Mb2FkaW5nI1xcXFxcXFwiKS5sYXp5UnVsZSgobmFtZSkgPT4ge1xcXFxuICAgICAgICAgICAgICAgIGxldCByYW5rTWV0aG9kID0gZ2V0SXRlbShcXFxcXFxcImJvb2tyYWNrOnJhbmtNZXRob2RcXFxcXFxcIiwgXFxcXFxcXCLns7vnu59cXFxcXFxcIik7XFxcXG4gICAgICAgICAgICAgICAgbGV0IHJhbmtJc1JldmVyc2UgPSBnZXRJdGVtKFxcXFxcXFwiYm9va3JhY2s6cmFua0lzUmV2ZXJzZVxcXFxcXFwiLCBcXFxcXFxcIlxcXFxcXFwiKTtcXFxcblxcXFxuICAgICAgICAgICAgICAgIGlmIChyYW5rTWV0aG9kID09PSBuYW1lKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIGlmIChyYW5rSXNSZXZlcnNlKSB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByYW5rSXNSZXZlcnNlID0gXFxcXFxcXCJcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgICAgICAgICAgICAgIHJhbmtJc1JldmVyc2UgPSBcXFxcXFxcIjFcXFxcXFxcIjtcXFxcbiAgICAgICAgICAgICAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXFxcXFxcXCJib29rcmFjazpyYW5rSXNSZXZlcnNlXFxcXFxcXCIsIHJhbmtJc1JldmVyc2UpO1xcXFxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgICAgIHNldEl0ZW0oXFxcXFxcXCJib29rcmFjazpyYW5rSXNSZXZlcnNlXFxcXFxcXCIsIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxuICAgICAgICAgICAgICAgICAgICBzZXRJdGVtKFxcXFxcXFwiYm9va3JhY2s6cmFua01ldGhvZFxcXFxcXFwiLCBuYW1lKTtcXFxcblxcXFxuICAgICAgICAgICAgICAgIH1cXFxcbiAgICAgICAgICAgICAgICByZWZyZXNoUGFnZShmYWxzZSk7XFxcXG4gICAgICAgICAgICAgICAgcmV0dXJuIFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiO1xcXFxuICAgICAgICAgICAgfSwgbmFtZSlcXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIGxldCByYW5rTWV0aG9kTWFwID0ge1xcXFxuICAgICAgICBcXFxcXFxcIuezu+e7n1xcXFxcXFwiOiBcXFxcXFxcIlxcXFxcXFwiLFxcXFxuICAgICAgICBcXFxcXFxcIuWkp+Wwj1xcXFxcXFwiOiBcXFxcXFxcInNpemVcXFxcXFxcIixcXFxcbiAgICAgICAgXFxcXFxcXCLlkI3np7BcXFxcXFxcIjogXFxcXFxcXCJuYW1lXFxcXFxcXCIsXFxcXG4gICAgICAgIFxcXFxcXFwi5pe26Ze0XFxcXFxcXCI6IFxcXFxcXFwidGltZVxcXFxcXFwiXFxcXG4gICAgfTtcXFxcbiAgICBsZXQgYm9va0xpc3QgPSBbXTtcXFxcbiAgICBsZXQgbGlzdCA9IHJhbmsoRmlsZS5nZXRGaWxlcyhwYXRoLCBcXFxcXFxcImRpclxcXFxcXFwiKSwgcmFua01ldGhvZE1hcFtyYW5rTWV0aG9kXSk7XFxcXG4gICAgaWYgKGxpc3QubGVuZ3RoID09PSAwKSB7XFxcXG4gICAgICAgIGJvb2tMaXN0LnB1c2goe1xcXFxuICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi4oCc4oCc4oCd4oCdXFxcXFxcXCIgKyBcXFxcXFxcIuWVpemDveayoeacieiAtlxcXFxcXFwiLmJpZygpLFxcXFxuICAgICAgICAgICAgdXJsOiBcXFxcXFxcImhpa2VyOi8vZW1wdHlcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfY2VudGVyXzFcXFxcXFxcIixcXFxcbiAgICAgICAgICAgIGV4dHJhOiB7XFxcXG4gICAgICAgICAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXG4gICAgICAgICAgICB9XFxcXG4gICAgICAgIH0pO1xcXFxuXFxcXG4gICAgfVxcXFxuICAgIGxldCBwYWdlVXJsID0gdHlwZSA9PT0gXFxcXFxcXCJub3ZlbFxcXFxcXFwiID8gXFxcXFxcXCJoaWtlcjovL3BhZ2UvTm92ZWxCcm93c2VyLnZpZXdcXFxcXFxcIiA6IFxcXFxcXFwiaGlrZXI6Ly9wYWdlL0NvbWljQnJvd3Nlci52aWV3XFxcXFxcXCI7XFxcXG4gICAgZm9yIChsZXQgaXRlbSBvZiBsaXN0KSB7XFxcXG4gICAgICAgIGxldCBwaWMgPSBmaWxlRXhpc3QoXFxcXFxcXCJmaWxlOi8vXFxcXFxcXCIgKyBpdGVtLmdldFBhdGgoKSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaXRlbS5nZXROYW1lKCkgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIikgPyBpdGVtLmdldFBhdGgoKSArIFxcXFxcXFwiL1xcXFxcXFwiICsgaXRlbS5nZXROYW1lKCkgKyBcXFxcXFxcIi5qcGdcXFxcXFxcIiA6IENvbmZpZy5kZWZfUGljO1xcXFxuICAgICAgICBib29rTGlzdC5wdXNoKHtcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpdGVtLmdldE5hbWUoKSxcXFxcbiAgICAgICAgICAgIHBpY191cmw6IHBpYyxcXFxcbiAgICAgICAgICAgIHVybDogcGFnZVVybCArIFxcXFxcXFwiP3J1bGU9XFxcXFxcXCIgKyBNWV9SVUxFLnRpdGxlLFxcXFxuICAgICAgICAgICAgY29sX3R5cGU6Y29sX3R5cGUsXFxcXG4gICAgICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgICAgIGxvbmdDbGljazogW3tcXFxcbiAgICAgICAgICAgICAgICAgICAgdGl0bGU6IFxcXFxcXFwi5Yig6ZmkXFxcXFxcXCIsXFxcXG4gICAgICAgICAgICAgICAgICAgIGpzOiAkLnRvU3RyaW5nKChwYXRoKSA9PiB7XFxcXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gJC5yZXF1aXJlKFxcXFxcXFwibG9uZ1ByZXNzLmpzXFxcXFxcXCIpLmRlbGV0ZUZpbGVGb3JCb29rKHBhdGgpO1xcXFxuICAgICAgICAgICAgICAgICAgICB9LCBpdGVtLmdldFBhdGgoKSlcXFxcbiAgICAgICAgICAgICAgICB9XSxcXFxcbiAgICAgICAgICAgICAgICBpZDogaXRlbS5nZXRQYXRoKCksXFxcXG4gICAgICAgICAgICAgICAgcGF0aDogaXRlbS5nZXRQYXRoKCksXFxcXG4gICAgICAgICAgICAgICAgbmFtZTogaXRlbS5nZXROYW1lKClcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSk7XFxcXG4gICAgfVxcXFxuICAgIGlmIChyYW5rSXNSZXZlcnNlKSB7XFxcXG4gICAgICAgIGJvb2tMaXN0LnJldmVyc2UoKTtcXFxcbiAgICB9XFxcXG5cXFxcbiAgICBzZXRSZXN1bHQobGF5b3V0LmNvbmNhdChib29rTGlzdCkpO1xcXFxufSkoKTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjZi7mlofku7bmjpLluo9cXFwiLFxcXCJwYXRoXFxcIjpcXFwiZmlsZVJhbmsuanNcXFwiLFxcXCJydWxlXFxcIjpcXFwianM6XFxcXG5jb25zdCBGaWxlID0gJC5yZXF1aXJlKFxcXFxcXFwiRmlsZS5qc1xcXFxcXFwiKTtcXFxcbmxldCBjaG5OdW1DaGFyID0ge1xcXFxuICAgIOmbtjogMCxcXFxcbiAgICDkuIA6IDEsXFxcXG4gICAg5LqMOiAyLFxcXFxuICAgIOS4iTogMyxcXFxcbiAgICDlm5s6IDQsXFxcXG4gICAg5LqUOiA1LFxcXFxuICAgIOWFrTogNixcXFxcbiAgICDkuIM6IDcsXFxcXG4gICAg5YWrOiA4LFxcXFxuICAgIOS5nTogOVxcXFxufTtcXFxcblxcXFxubGV0IGNobk5hbWVWYWx1ZSA9IHtcXFxcbiAgICDljYE6IHtcXFxcbiAgICAgICAgdmFsdWU6IDEwLFxcXFxuICAgICAgICBzZWNVbml0OiBmYWxzZVxcXFxuICAgIH0sXFxcXG4gICAg55m+OiB7XFxcXG4gICAgICAgIHZhbHVlOiAxMDAsXFxcXG4gICAgICAgIHNlY1VuaXQ6IGZhbHNlXFxcXG4gICAgfSxcXFxcbiAgICDljYM6IHtcXFxcbiAgICAgICAgdmFsdWU6IDEwMDAsXFxcXG4gICAgICAgIHNlY1VuaXQ6IGZhbHNlXFxcXG4gICAgfSxcXFxcbiAgICDkuIc6IHtcXFxcbiAgICAgICAgdmFsdWU6IDEwMDAwLFxcXFxuICAgICAgICBzZWNVbml0OiB0cnVlXFxcXG4gICAgfSxcXFxcbiAgICDkur86IHtcXFxcbiAgICAgICAgdmFsdWU6IDEwMDAwMDAwMCxcXFxcbiAgICAgICAgc2VjVW5pdDogdHJ1ZVxcXFxuICAgIH1cXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gQ2hpbmVzZVRvTnVtYmVyKGNoblN0cikge1xcXFxuICAgIGxldCBydG4gPSAwO1xcXFxuICAgIGxldCBzZWN0aW9uID0gMDtcXFxcbiAgICBsZXQgbnVtYmVyID0gMDtcXFxcbiAgICBsZXQgc2VjVW5pdCA9IGZhbHNlO1xcXFxuICAgIGxldCBzdHIgPSBjaG5TdHIuc3BsaXQoJycpO1xcXFxuXFxcXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcXFxcbiAgICAgICAgbGV0IG51bSA9IGNobk51bUNoYXJbc3RyW2ldXTtcXFxcbiAgICAgICAgaWYgKHR5cGVvZiBudW0gIT09ICd1bmRlZmluZWQnKSB7XFxcXG4gICAgICAgICAgICBudW1iZXIgPSBudW07XFxcXG4gICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aCAtIDEpIHtcXFxcbiAgICAgICAgICAgICAgICBzZWN0aW9uICs9IG51bWJlcjtcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfSBlbHNlIHtcXFxcbiAgICAgICAgICAgIGxldCB1bml0ID0gY2huTmFtZVZhbHVlW3N0cltpXV0udmFsdWU7XFxcXG4gICAgICAgICAgICBzZWNVbml0ID0gY2huTmFtZVZhbHVlW3N0cltpXV0uc2VjVW5pdDtcXFxcbiAgICAgICAgICAgIGlmIChzZWNVbml0KSB7XFxcXG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IChzZWN0aW9uICsgbnVtYmVyKSAqIHVuaXQ7XFxcXG4gICAgICAgICAgICAgICAgcnRuICs9IHNlY3Rpb247XFxcXG4gICAgICAgICAgICAgICAgc2VjdGlvbiA9IDA7XFxcXG4gICAgICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgICAgIHNlY3Rpb24gKz0gKG51bWJlciAqIHVuaXQpO1xcXFxuICAgICAgICAgICAgfVxcXFxuICAgICAgICAgICAgbnVtYmVyID0gMDtcXFxcbiAgICAgICAgfVxcXFxuICAgIH1cXFxcbiAgICByZXR1cm4gcnRuICsgc2VjdGlvbjtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gbmFtZUNvbXBhcmUoYSwgYikge1xcXFxuICAgIGlmIChhID09IG51bGwgfHwgYiA9PSBudWxsKVxcXFxuICAgICAgICByZXR1cm4gYSA9PSBudWxsID8gYiA9PSBudWxsID8gMCA6IC0xIDogMTtcXFxcblxcXFxuICAgIGEgPSBhLnJlcGxhY2UoLyhb6Zu25LiA5LqM5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5Lq/XSkvZywgZnVuY3Rpb24obWF0Y2gsIHAxLCBwMiwgcDMsIG9mZnNldCwgc3RyaW5nKSB7XFxcXG4gICAgICAgIC8vIHAxIGlzIG5vbmRpZ2l0cywgcDIgZGlnaXRzLCBhbmQgcDMgbm9uLWFscGhhbnVtZXJpY3NcXFxcbiAgICAgICAgcmV0dXJuIHYuQ2hpbmVzZVRvTnVtYmVyKHAxKTtcXFxcbiAgICB9KVxcXFxuICAgIGIgPSBiLnJlcGxhY2UoLyhb6Zu25LiA5LqM5LiJ5Zub5LqU5YWt5LiD5YWr5Lmd5Y2B55m+5Y2D5LiH5Lq/XSkvZywgZnVuY3Rpb24obWF0Y2gsIHAxLCBwMiwgcDMsIG9mZnNldCwgc3RyaW5nKSB7XFxcXG4gICAgICAgIC8vIHAxIGlzIG5vbmRpZ2l0cywgcDIgZGlnaXRzLCBhbmQgcDMgbm9uLWFscGhhbnVtZXJpY3NcXFxcbiAgICAgICAgcmV0dXJuIHYuQ2hpbmVzZVRvTnVtYmVyKHAxKTtcXFxcbiAgICB9KVxcXFxuXFxcXG4gICAgbGV0IE5VTUJFUlMgPSBqYXZhLnV0aWwucmVnZXguUGF0dGVybi5jb21waWxlKFxcXFxcXFwiKD88PVxcXFxcXFxcXFxcXFxcXFxEKSg/PVxcXFxcXFxcXFxcXFxcXFxkKXwoPzw9XFxcXFxcXFxcXFxcXFxcXGQpKD89XFxcXFxcXFxcXFxcXFxcXEQpXFxcXFxcXCIpO1xcXFxuICAgIGxldCBzcGxpdDEgPSBOVU1CRVJTLnNwbGl0KG5ldyBqYXZhLmxhbmcuU3RyaW5nKGEpKTtcXFxcbiAgICBsZXQgc3BsaXQyID0gTlVNQkVSUy5zcGxpdChuZXcgamF2YS5sYW5nLlN0cmluZyhiKSk7XFxcXG5cXFxcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IE1hdGgubWluKHNwbGl0MS5sZW5ndGgsIHNwbGl0Mi5sZW5ndGgpOyBpKyspIHtcXFxcbiAgICAgICAgbGV0IGMxID0gc3BsaXQxW2ldLmNoYXJDb2RlQXQoMCk7XFxcXG4gICAgICAgIGxldCBjMiA9IHNwbGl0MltpXS5jaGFyQ29kZUF0KDApO1xcXFxuICAgICAgICBsZXQgY21wID0gMDtcXFxcbiAgICAgICAgbGV0IHplcm9DaGFyQ29kZSA9ICcwJy5jaGFyQ29kZUF0KDApO1xcXFxuICAgICAgICBsZXQgbmluZUNoYXJDb2RlID0gJzknLmNoYXJDb2RlQXQoMCk7XFxcXG5cXFxcbiAgICAgICAgaWYgKGMxID49IHplcm9DaGFyQ29kZSAmJiBjMSA8PSBuaW5lQ2hhckNvZGUgJiYgYzIgPj0gemVyb0NoYXJDb2RlICYmIGMyIDw9IG5pbmVDaGFyQ29kZSkge1xcXFxuICAgICAgICAgICAgY21wID0gbmV3IGphdmEubWF0aC5CaWdJbnRlZ2VyKHNwbGl0MVtpXSkuY29tcGFyZVRvKG5ldyBqYXZhLm1hdGguQmlnSW50ZWdlcihzcGxpdDJbaV0pKTtcXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGlmIChjbXAgPT09IDApIHtcXFxcbiAgICAgICAgICAgIGxldCByZWdleCA9IC9bYS16QS1aMC05XS9cXFxcbiAgICAgICAgICAgIGxldCBzMSA9IFN0cmluZyhzcGxpdDFbaV0pXFxcXG4gICAgICAgICAgICBsZXQgczIgPSBTdHJpbmcoc3BsaXQyW2ldKVxcXFxuICAgICAgICAgICAgaWYgKHJlZ2V4LnRlc3QoczEpIHx8IHJlZ2V4LnRlc3QoczIpKSB7XFxcXG4gICAgICAgICAgICAgICAgY21wID0gbmV3IGphdmEubGFuZy5TdHJpbmcoc3BsaXQxW2ldKS5jb21wYXJlVG8obmV3IGphdmEubGFuZy5TdHJpbmcoc3BsaXQyW2ldKSk7XFxcXG4gICAgICAgICAgICAgICAgLy8gY21wID0gczEubG9jYWxlQ29tcGFyZShzMiwgJ2VuJylcXFxcbiAgICAgICAgICAgIH0gZWxzZSB7XFxcXG4gICAgICAgICAgICAgICAgY21wID0gczEubG9jYWxlQ29tcGFyZShzMiwgJ3poJylcXFxcbiAgICAgICAgICAgIH1cXFxcbiAgICAgICAgfVxcXFxuXFxcXG4gICAgICAgIGlmIChjbXAgIT09IDApIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBjbXA7XFxcXG4gICAgICAgIH1cXFxcbiAgICB9XFxcXG4gICAgbGV0IGxlbmd0aENtcCA9IHNwbGl0MS5sZW5ndGggLSBzcGxpdDIubGVuZ3RoO1xcXFxuICAgIC8vIGlmIChsZW5ndGhDbXAgIT09IDApIGxlbmd0aENtcCA9IGxlbmd0aENtcCA+IDAgPyAtMSA6IDE7XFxcXG4gICAgcmV0dXJuIGxlbmd0aENtcDtcXFxcbn1cXFxcblxcXFxuZnVuY3Rpb24gcmFuayhsaXN0LCBtKSB7XFxcXG4gICAgc3dpdGNoIChtKSB7XFxcXG4gICAgICAgIGNhc2UgXFxcXFxcXCJ0eXBlXFxcXFxcXCI6XFxcXG4gICAgICAgICAgICByZXR1cm4gbGlzdDtcXFxcbiAgICAgICAgY2FzZSBcXFxcXFxcIm5hbWVcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgIHJldHVybiBsaXN0LnNvcnQoKGEsIGIpID0+IG5hbWVDb21wYXJlKFN0cmluZyhhLmdldE5hbWUoKSksIFN0cmluZyhiLmdldE5hbWUoKSkpKTtcXFxcbiAgICAgICAgY2FzZSBcXFxcXFxcInNpemVcXFxcXFxcIjpcXFxcbiAgICAgICAgICAgIHJldHVybiBsaXN0LnNvcnQoKGEsIGIpID0+IEZpbGUuZ2V0VG90YWxTaXplT2ZGaWxlc0luRGlyKGEpIC0gRmlsZS5nZXRUb3RhbFNpemVPZkZpbGVzSW5EaXIoYikpO1xcXFxuICAgICAgICBjYXNlIFxcXFxcXFwidGltZVxcXFxcXFwiOlxcXFxuICAgICAgICAgICAgcmV0dXJuIGxpc3Quc29ydCgoYSwgYikgPT4gYS5sYXN0TW9kaWZpZWQoKSAtIGIubGFzdE1vZGlmaWVkKCkpO1xcXFxuICAgICAgICBkZWZhdWx0OlxcXFxuICAgICAgICAgICAgcmV0dXJuIGxpc3Q7XFxcXG4gICAgfVxcXFxuXFxcXG59XFxcXG4kLmV4cG9ydHM9cmFuaztcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi5lcHVi6Kej5p6Q5ZmoXFxcIixcXFwicGF0aFxcXCI6XFxcImVwdWJQYXJzZXIudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbnZhciBsYXlvdXQgPSBbXTtcXFxcbnNldFBhZ2VUaXRsZShcXFxcXFxcIuS5puexjeS/oeaBr1xcXFxcXFwiKTtcXFxcbmxldCBwYXRoID0gZGVjb2RlVVJJQ29tcG9uZW50KGdldFBhcmFtKFxcXFxcXFwicGF0aFxcXFxcXFwiKSB8fCBcXFxcXFxcIlxcXFxcXFwiKSB8fCBNWV9QQVJBTVMucGF0aDtcXFxcbmxldCBtZXRhID0gZ2V0RXB1Yk1ldGFkYXRhKHBhdGgpO1xcXFxuLy9sb2cobWV0YSlcXFxcblxcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIHRpdGxlOiBtZXRhLmZpcnN0VGl0bGUsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwidGV4dF9jZW50ZXJfMVxcXFxcXFwiLFxcXFxuICAgIHVybDogXFxcXFxcXCJoaWtlcjovL2VtcHR5XFxcXFxcXCIsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgbGluZVZpc2libGU6IGZhbHNlXFxcXG4gICAgfVxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogXFxcXFxcXCLwn5Gk5L2c6ICF77yaXFxcXFxcXCIgKyBtZXRhLmF1dGhvcnNbMF0ubGFzdG5hbWUsXFxcXG4gICAgY29sX3R5cGU6IFxcXFxcXFwicmljaF90ZXh0XFxcXFxcXCIsXFxcXG59KTtcXFxcbmxldCBkZXNjcmlwdGlvbiA9IChtZXRhLmRlc2NyaXB0aW9uc1swXSB8fCBcXFxcXFxcIlxcXFxcXFwiKS5yZXBsYWNlKC88cC4qPz58PFxcXFxcXFxcL3A+L2csIFxcXFxcXFwiXFxcXFxcXCIpO1xcXFxubGV0IHRkZXNjcmlwdGlvbiA9IGRlc2NyaXB0aW9uO1xcXFxuaWYgKGRlc2NyaXB0aW9uKSB7XFxcXG4gICAgXFxcXG4gICAgaWYgKGRlc2NyaXB0aW9uLmxlbmd0aCA+IDUwKSB7XFxcXG4gICAgICAgIGRlc2NyaXB0aW9uID0gZGVzY3JpcHRpb24uc3Vic3RyaW5nKDAsIDUwKSArXFxcXFxcXCIuLi4uLi5cXFxcXFxcIiArXFxcXFxcXCLmm7TlpJo+XFxcXFxcXCIubGluaygkKCkuYjY0KFxcXFxcXFwiJ1xcXFxcXFwiKS5ydWxlKCgpID0+IHtcXFxcbiAgICAgICAgICAgIHNldFBhZ2VUaXRsZShcXFxcXFxcIueugOS7i1xcXFxcXFwiKTtcXFxcbiAgICAgICAgICAgIHNldFJlc3VsdChbe1xcXFxuICAgICAgICAgICAgICAgIHRpdGxlOiBcXFxcXFxcIueugOS7i++8mjxicj7jgIDjgIBcXFxcXFxcIiArIE1ZX1BBUkFNUy50ZXh0LFxcXFxuICAgICAgICAgICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInJpY2hfdGV4dFxcXFxcXFwiLFxcXFxuXFxcXG4gICAgICAgICAgICB9XSk7XFxcXG4gICAgICAgIH0pKTtcXFxcbiAgICB9XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogXFxcXFxcXCLwn5Od566A5LuL77yaPGJyPuOAgOOAgFxcXFxcXFwiK2Rlc2NyaXB0aW9uLFxcXFxuICAgICAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICAgICAgZXh0cmE6IHtcXFxcbiAgICAgICAgICAgIHRleHQ6IHRkZXNjcmlwdGlvblxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG59XFxcXG4vL3NldFBhZ2VUaXRsZShtZXRhLmZpcnN0VGl0bGUpO1xcXFxubGF5b3V0LnB1c2goe1xcXFxuICAgIGNvbF90eXBlOiBcXFxcXFxcImxpbmVfYmxhbmtcXFxcXFxcIixcXFxcbiAgICB1cmw6IFxcXFxcXFwiaGlrZXI6Ly9lbXB0eVxcXFxcXFwiXFxcXG59KTtcXFxcbmxldCBjaGFwdGVycyA9IGdldEVwdWJDaGFwdGVycyhwYXRoKTtcXFxcbmZvciAobGV0IGl0IG9mIGNoYXB0ZXJzKSB7XFxcXG4gICAgbGF5b3V0LnB1c2goe1xcXFxuICAgICAgICB0aXRsZTogaXQudGl0bGUsXFxcXG4gICAgICAgIHVybDogXFxcXFxcXCJoaWtlcjovL3BhZ2UvZXB1YlZpZXdlci52aWV3I3JlYWRUaGVtZSMjYXV0b1BhZ2UjXFxcXFxcXCIsXFxcXG4gICAgICAgIGNvbF90eXBlOiBcXFxcXFxcInRleHRfMVxcXFxcXFwiLFxcXFxuICAgICAgICBleHRyYToge1xcXFxuICAgICAgICAgICAgaHJlZjogaXQudXJsLFxcXFxuICAgICAgICAgICAgcGF0aDogcGF0aCxcXFxcbiAgICAgICAgICAgIHRpdGxlOiBpdC50aXRsZVxcXFxuICAgICAgICB9XFxcXG4gICAgfSk7XFxcXG59XFxcXG5zZXRSZXN1bHQobGF5b3V0KTtcXFwifSx7XFxcImNvbF90eXBlXFxcIjpcXFwibW92aWVfM1xcXCIsXFxcIm5hbWVcXFwiOlxcXCIjdi5lcHVi5p+l55yL5ZmoXFxcIixcXFwicGF0aFxcXCI6XFxcImVwdWJWaWV3ZXIudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmxldCBwYXRoID0gTVlfUEFSQU1TLnBhdGg7XFxcXG5sZXQgdXJsID0gTVlfUEFSQU1TLmhyZWY7XFxcXG5sZXQgYyA9IGdldEVwdWJDb250ZW50KHBhdGgsIHVybCk7XFxcXG4vL2xldCBhPSBjLnJlcGxhY2UoL1xcXFxcXFxccz88ZGl2Lio/Pnw8XFxcXFxcXFwvZGl2PlxcXFxcXFxccz8vZywgXFxcXFxcXCJcXFxcXFxcIikucmVwbGFjZSgvXFxcXFxcXFxzPzxwLio/PiguKik8XFxcXFxcXFwvcD5cXFxcXFxcXHM/L2csIFxcXFxcXFwiXFxcXFxcXFx1MzAwMFxcXFxcXFxcdTMwMDAkMTxicj5cXFxcXFxcIik7XFxcXG4vL2xldCBiPWMucmVwbGFjZSgvXFxcXFxcXFxzPzxkaXYuKj8+fDxcXFxcXFxcXC9kaXY+XFxcXFxcXFxzPy9nLCBcXFxcXFxcIlxcXFxcXFwiKS5yZXBsYWNlKC9cXFxcXFxcXHM/PHAuKj8+KC4qPyk8XFxcXFxcXFwvcD5cXFxcXFxcXHM/L2csIFxcXFxcXFwiXFxcXFxcXFx1MzAwMFxcXFxcXFxcdTMwMDAkMTxicj5cXFxcXFxcIik7XFxcXG4vL2xvZyhhPT1iKVxcXFxuLy9sb2coZ2V0RXB1YkNvbnRlbnQwKHBhdGgsIHVybCkpXFxcXG5cXFxcbmxldCBsYXlvdXQgPSBbXTtcXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICBjb2xfdHlwZTogXFxcXFxcXCJyaWNoX3RleHRcXFxcXFxcIixcXFxcbiAgICB0aXRsZTogKFxcXFxcXFwiPHN0cm9uZz5cXFxcXFxcIiArIE1ZX1BBUkFNUy50aXRsZSArIFxcXFxcXFwiPC9zdHJvbmc+XFxcXFxcXCIpLmJpZygpLFxcXFxufSk7XFxcXG5cXFxcbmxheW91dC5wdXNoKHtcXFxcbiAgICB0aXRsZTogYyxcXFxcbiAgICBjb2xfdHlwZTogJ3JpY2hfdGV4dCcsXFxcXG4gICAgZXh0cmE6IHtcXFxcbiAgICAgICAgdGV4dFNpemU6IDE4LFxcXFxuICAgICAgICBjbGljazogdHJ1ZVxcXFxuICAgIH1cXFxcbn0pO1xcXFxuc2V0UmVzdWx0KGxheW91dCk7XFxcIn0se1xcXCJjb2xfdHlwZVxcXCI6XFxcIm1vdmllXzNcXFwiLFxcXCJuYW1lXFxcIjpcXFwiI3bmlofku7bnrqHnkIZcXFwiLFxcXCJwYXRoXFxcIjpcXFwiRmlsZU1hbmFnZW1lbnQudmlld1xcXCIsXFxcInJ1bGVcXFwiOlxcXCJqczpcXFxcbmNvbnN0IENvbmZpZyA9ICQucmVxdWlyZShcXFxcXFxcImhpa2VyOi8vcGFnZS9Db25maWcuanNvblxcXFxcXFwiKTtcXFxcbmxldCB1cmwgPSBcXFxcXFxcImh0dHA6Ly9oaWtlci5ub2tpYS5wcmVzcy9oaWtlcnVsZS9ydWxlbGlzdC5qc29uP2lkPTUwOTlcXFxcXFxcIjtcXFxcbmxldCBmID0gcmVxdWlyZSh1cmwpO1xcXFxubGV0IHR5cGUgPSBnZXRQYXJhbShcXFxcXFxcInR5cGVcXFxcXFxcIiwgXFxcXFxcXCJob21lUGF0aFxcXFxcXFwiKTtcXFxcbmFkZExpc3RlbmVyKFxcXFxcXFwib25DbG9zZVxcXFxcXFwiLCAoKSA9PiB7XFxcXG4gICAgcmVmcmVzaFBhZ2UoKTtcXFxcbn0pO1xcXFxubGV0IGhpa2VyUGF0aCA9IFxcXFxcXFwiZmlsZTovL1xcXFxcXFwiICsgQ29uZmlnLmhvbWVQYXRoO1xcXFxuaWYoIWZpbGVFeGlzdChoaWtlclBhdGgpKXtcXFxcbiAgICB3cml0ZUZpbGUoaGlrZXJQYXRoK1xcXFxcXFwiL+WIm+W7uuebruW9lS50eHRcXFxcXFxcIixcXFxcXFxcIlxcXFxcXFwiKTtcXFxcbiAgICBkZWxldGVGaWxlKGhpa2VyUGF0aCtcXFxcXFxcIi/liJvlu7rnm67lvZUudHh0XFxcXFxcXCIpO1xcXFxufVxcXFxuZi5maWxlU2VsZWN0aW9uKHtcXFxcbiAgICBjYWxsYmFjazogJC50b1N0cmluZygoKSA9PiB7XFxcXG4gICAgICAgIC8v5qC55o2u5paH5Lu25omp5bGV5ZCN77yM55So5LiN5ZCM5bCP56iL5bqP5omT5byAXFxcXG4gICAgICAgIGlmIChcXFxcXFxcIi5qcGdcXFxcXFxcIiA9PT0gVFlQRSkge1xcXFxuICAgICAgICAgICAgcmV0dXJuIFBBVEg7XFxcXG4gICAgICAgIH0gZWxzZSBpZiAoXFxcXFxcXCIudHh0XFxcXFxcXCIgPT09IFRZUEUpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS90eHRQYXJzZXIudmlldz9pc0NhY2hlPXRydWUmcnVsZT1cXFxcXFxcIiArIE1ZX1JVTEUudGl0bGUgKyBcXFxcXFxcIiZwYXRoPVxcXFxcXFwiICsgUEFUSDtcXFxcbiAgICAgICAgfSBlbHNlIGlmIChcXFxcXFxcIi5lcHViXFxcXFxcXCIgPT09IFRZUEUpIHtcXFxcbiAgICAgICAgICAgIHJldHVybiBcXFxcXFxcImhpa2VyOi8vcGFnZS9lcHViUGFyc2VyLnZpZXcjYXV0b0NhY2hlIz9ydWxlPVxcXFxcXFwiICsgTVlfUlVMRS50aXRsZSArIFxcXFxcXFwiJnBhdGg9XFxcXFxcXCIgKyBQQVRIO1xcXFxuICAgICAgICB9IGVsc2Uge1xcXFxuICAgICAgICAgICAgcmV0dXJuICQoXFxcXFxcXCLml6Dms5XmiZPlvIDvvIzmmK/lkKbkvb/nlKjlhbbku5blupTnlKjmiZPlvIDvvJ9cXFxcXFxcIikuY29uZmlybShwYXRoID0+IFxcXFxcXFwib3BlbkZpbGU6Ly9maWxlOi8vXFxcXFxcXCIgKyBwYXRoLCBQQVRIKTtcXFxcbiAgICAgICAgfVxcXFxuICAgIH0pLFxcXFxuICAgIGluaXRpYWxQYXRoOiBDb25maWdbdHlwZV0sXFxcXG4gICAgcm9vdERpclBhdGg6IENvbmZpZy5ob21lUGF0aCxcXFxcbiAgICAvL29uQ2xpY2tUeXBlOiBcXFxcXFxcImNvbmZpcm1cXFxcXFxcIixcXFxcbiAgICAvL21lbW9yeTogXFxcXFxcXCJGaWxlTWFuYWdlbWVudDptZW1vcnlcXFxcXFxcIixcXFxcbiAgICByZXF1aXJlVXJsOiB1cmwsXFxcXG4gICAgZmlsZVR5cGU6IFxcXFxcXFwiXFxcXFxcXFwudHh0fFxcXFxcXFxcLmVwdWJ8LmpwZ1xcXFxcXFwiLFxcXFxuICAgIC8vY0hvbWVUaXBzOiBcXFxcXFxcIuaYr+WQpuS9v+eUqOa1t+mYlOWwj+eoi+W6j+aJk+W8gFske25hbWV9XT9cXFxcXFxcIixcXFxcbiAgICAvL2NTZWFyY2hUaXBzOiBcXFxcXFxcIuaYr+WQpuS9v+eUqOa1t+mYlOWwj+eoi+W6j+aJk+W8gFske3BhdGh9XT9cXFxcXFxcIlxcXFxufSk7XFxcIn1dXCIsXCJwcm94eVwiOlwiXCJ9IiwidGl0bGUiOiLmnKzlnLDotYTmupDnrqHnkIZ86K6+572uLeaWh+S7tueuoeeQhiJ9