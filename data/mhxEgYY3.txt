海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥车载视频@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"原生一级\",\"path\":\"zy\",\"rule\":\"let mode = getMyVar(\\\"mode\\\", \\\"视频\\\")\\nif (mode == \\\"视频\\\") {\\n    var list = pdfa(getResCode(), '.yinyue&&li');\\n    for (var j in list) {\\n        d.push({\\n            title: pdfh(list[j], 'dl&&Text'),\\n            desc: pdfh(list[j], 'dl,1&&Text'),\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\n            url: pd(list[j], 'a&&href').replace('1.html', 'fypage.html') + $('').rule(() => {\\n                $.require(\\\"hiker://page/sper\\\")\\n            })\\n        });\\n    }\\n} else if (mode == \\\"音乐\\\") {\\n    var list = pdfa(request('http://m.ahadj.com/music.html', {}), '.yinyue&&li');\\n    for (var j in list) {\\n        d.push({\\n            title: pdfh(list[j], 'dl&&Text'),\\n            desc: pdfh(list[j], 'dl,1&&Text'),\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\n            url: pd(list[j], 'a&&href').replace('1.html', 'fypage.html') + $('').rule(() => {\\n                $.require(\\\"hiker://page/sper\\\")\\n            })\\n        });\\n    }\\n} else if (mode == \\\"推荐\\\") {\\n    var html = request('http://m.ahadj.com/pop.html')\\n    d.push({\\n        title: '‘‘' + pdfh(html, '.tit_com&&Text'),\\n        col_type: 'text_1',\\n    });\\n    var list = pdfa(html, '.shiping_box&&li');\\n    for (var j in list) {\\n        d.push({\\n            title: pdfh(list[j], 'h2&&Text'),\\n            desc: pdfh(list[j], '.shiping_zz&&Text'),\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\n            url: pd(list[j], 'a&&href') + $(\\\"\\\").lazyRule(() => {\\n                url = pdfh(request(input), 'source&&src')\\n                return url\\n            }),\\n            col_type: 'movie_2',\\n        });\\n    }\\n    d.push({\\n        title: '‘‘' + pdfh(html, '.tit_com,1&&Text'),\\n        col_type: 'text_1',\\n    });\\n    var list = pdfa(html, '.yinyue&&li');\\n    for (var j in list) {\\n        d.push({\\n            title: pdfh(list[j], 'h3&&Text'),\\n            desc: pdfh(list[j], 'dl&&Text'),\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\n            url: pd(list[j], 'a&&href') + $(\\\"\\\").lazyRule(() => {\\n                url = pdfh(request(input), 'audio&&src')\\n                return url + '#isMusic=true#'\\n            }),\\n            col_type: 'movie_1_left_pic',\\n        });\\n    }\\n} else if (mode == \\\"专辑\\\") {\\n    var list = pdfa(request('http://m.ahadj.com/zhuanti/' + MY_PAGE + '.html', {}), '.album-item&&a');\\n    for (var j in list) {\\n        d.push({\\n            title: pdfh(list[j], 'li&&Text'),\\n            desc: pdfh(list[j], 'ul&&Text'),\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\n            url: pd(list[j], 'a&&href').replace('1.html', 'fypage.html') + $('').rule(() => {\\n                $.require(\\\"hiker://page/sper\\\")\\n            }),\\n            col_type: 'movie_1_left_pic',\\n        });\\n    }\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"二级\",\"path\":\"sper\",\"rule\":\"js:\\nvar res = {};\\nvar d = [];\\nvar list = pdfa(getResCode(), '.shiping_box||.yinyue&&li');\\nfor (var j in list) {\\n    d.push({\\n        title: pdfh(list[j], 'h2||h3&&Text'),\\n        desc: pdfh(list[j], '.shiping_zz||dl&&Text'),\\n        pic_url: pd(list[j], 'img&&src') + '@Referer=',\\n        url: pd(list[j], 'a&&href') + $(\\\"\\\").lazyRule(() => {\\n            url = pdfh(request(input), 'source&&src')\\n            if (/m3u8|mp4/.test(url)) {\\n                return url\\n            } else {\\n                url = pdfh(request(input), 'audio&&src')\\n                return url + '#isMusic=true#'\\n            }\\n        }),\\n        col_type: 'movie_2',\\n    });\\n}\\nres.data = d;\\nsetHomeResult(res);\"},{\"col_type\":\"movie_3\",\"name\":\"更新\",\"path\":\"更新\",\"rule\":\"if (MY_PAGE==1){\\nlog(MY_PAGE)\\ntry {\\n    let myVersion = MY_RULE.version;\\n    let newVersion = JSON.parse(fetchCache(\\\"http://hiker.nokia.press/hikerule/rulelist.json?id=5782\\\",24,{\\n        timeout: 1000,        \\n    })).version;\\n      if (parseInt(newVersion) > parseInt(myVersion)) {\\n        confirm({\\n            title: '更新提示',\\n            content: '检测到你的规则版本小于服务器版本，是否立即更新？',\\n            confirm: () => {\\n                return \\\"海阔视界首页频道规则【啊哈dj】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=5782\\\"\\n            },         \\n        })\\n    }} catch (e) {}\\n}\"}],\"saved\":false,\"title\":\"啊哈dj\",\"version\":0,\"url\":\"http://m.ahadj.com/music/id-123-fypage.html;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"card_pic_3\",\"find_rule\":\"js:(\\n() => {\\n    $.require(\\\"hiker://page/sper\\\");\\n}\\n)()\",\"group\":\"⑤音频\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"原生一级\\\",\\\"path\\\":\\\"zy\\\",\\\"rule\\\":\\\"let mode = getMyVar(\\\\\\\"mode\\\\\\\", \\\\\\\"视频\\\\\\\")\\\\nif (mode == \\\\\\\"视频\\\\\\\") {\\\\n    var list = pdfa(getResCode(), '.yinyue&&li');\\\\n    for (var j in list) {\\\\n        d.push({\\\\n            title: pdfh(list[j], 'dl&&Text'),\\\\n            desc: pdfh(list[j], 'dl,1&&Text'),\\\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\\\n            url: pd(list[j], 'a&&href').replace('1.html', 'fypage.html') + $('').rule(() => {\\\\n                $.require(\\\\\\\"hiker://page/sper\\\\\\\")\\\\n            })\\\\n        });\\\\n    }\\\\n} else if (mode == \\\\\\\"音乐\\\\\\\") {\\\\n    var list = pdfa(request('http://m.ahadj.com/music.html', {}), '.yinyue&&li');\\\\n    for (var j in list) {\\\\n        d.push({\\\\n            title: pdfh(list[j], 'dl&&Text'),\\\\n            desc: pdfh(list[j], 'dl,1&&Text'),\\\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\\\n            url: pd(list[j], 'a&&href').replace('1.html', 'fypage.html') + $('').rule(() => {\\\\n                $.require(\\\\\\\"hiker://page/sper\\\\\\\")\\\\n            })\\\\n        });\\\\n    }\\\\n} else if (mode == \\\\\\\"推荐\\\\\\\") {\\\\n    var html = request('http://m.ahadj.com/pop.html')\\\\n    d.push({\\\\n        title: '‘‘' + pdfh(html, '.tit_com&&Text'),\\\\n        col_type: 'text_1',\\\\n    });\\\\n    var list = pdfa(html, '.shiping_box&&li');\\\\n    for (var j in list) {\\\\n        d.push({\\\\n            title: pdfh(list[j], 'h2&&Text'),\\\\n            desc: pdfh(list[j], '.shiping_zz&&Text'),\\\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\\\n            url: pd(list[j], 'a&&href') + $(\\\\\\\"\\\\\\\").lazyRule(() => {\\\\n                url = pdfh(request(input), 'source&&src')\\\\n                return url\\\\n            }),\\\\n            col_type: 'movie_2',\\\\n        });\\\\n    }\\\\n    d.push({\\\\n        title: '‘‘' + pdfh(html, '.tit_com,1&&Text'),\\\\n        col_type: 'text_1',\\\\n    });\\\\n    var list = pdfa(html, '.yinyue&&li');\\\\n    for (var j in list) {\\\\n        d.push({\\\\n            title: pdfh(list[j], 'h3&&Text'),\\\\n            desc: pdfh(list[j], 'dl&&Text'),\\\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\\\n            url: pd(list[j], 'a&&href') + $(\\\\\\\"\\\\\\\").lazyRule(() => {\\\\n                url = pdfh(request(input), 'audio&&src')\\\\n                return url + '#isMusic=true#'\\\\n            }),\\\\n            col_type: 'movie_1_left_pic',\\\\n        });\\\\n    }\\\\n} else if (mode == \\\\\\\"专辑\\\\\\\") {\\\\n    var list = pdfa(request('http://m.ahadj.com/zhuanti/' + MY_PAGE + '.html', {}), '.album-item&&a');\\\\n    for (var j in list) {\\\\n        d.push({\\\\n            title: pdfh(list[j], 'li&&Text'),\\\\n            desc: pdfh(list[j], 'ul&&Text'),\\\\n            pic_url: pd(list[j], 'img&&src') + '@Referer=',\\\\n            url: pd(list[j], 'a&&href').replace('1.html', 'fypage.html') + $('').rule(() => {\\\\n                $.require(\\\\\\\"hiker://page/sper\\\\\\\")\\\\n            }),\\\\n            col_type: 'movie_1_left_pic',\\\\n        });\\\\n    }\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级\\\",\\\"path\\\":\\\"sper\\\",\\\"rule\\\":\\\"js:\\\\nvar res = {};\\\\nvar d = [];\\\\nvar list = pdfa(getResCode(), '.shiping_box||.yinyue&&li');\\\\nfor (var j in list) {\\\\n    d.push({\\\\n        title: pdfh(list[j], 'h2||h3&&Text'),\\\\n        desc: pdfh(list[j], '.shiping_zz||dl&&Text'),\\\\n        pic_url: pd(list[j], 'img&&src') + '@Referer=',\\\\n        url: pd(list[j], 'a&&href') + $(\\\\\\\"\\\\\\\").lazyRule(() => {\\\\n            url = pdfh(request(input), 'source&&src')\\\\n            if (/m3u8|mp4/.test(url)) {\\\\n                return url\\\\n            } else {\\\\n                url = pdfh(request(input), 'audio&&src')\\\\n                return url + '#isMusic=true#'\\\\n            }\\\\n        }),\\\\n        col_type: 'movie_2',\\\\n    });\\\\n}\\\\nres.data = d;\\\\nsetHomeResult(res);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"更新\\\",\\\"path\\\":\\\"更新\\\",\\\"rule\\\":\\\"if (MY_PAGE==1){\\\\nlog(MY_PAGE)\\\\ntry {\\\\n    let myVersion = MY_RULE.version;\\\\n    let newVersion = JSON.parse(fetchCache(\\\\\\\"http://hiker.nokia.press/hikerule/rulelist.json?id=5782\\\\\\\",24,{\\\\n        timeout: 1000,        \\\\n    })).version;\\\\n      if (parseInt(newVersion) > parseInt(myVersion)) {\\\\n        confirm({\\\\n            title: '更新提示',\\\\n            content: '检测到你的规则版本小于服务器版本，是否立即更新？',\\\\n            confirm: () => {\\\\n                return \\\\\\\"海阔视界首页频道规则【啊哈dj】￥home_rule_url￥http://hiker.nokia.press/hikerule/rulelist.json?id=5782\\\\\\\"\\\\n            },         \\\\n        })\\\\n    }} catch (e) {}\\\\n}\\\"}]\"}","picUrl":"http://tp.92ku.com//attachment/rand/1561.jpg@Referer=","title":"车载视频"}