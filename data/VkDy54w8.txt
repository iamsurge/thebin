-- WORK IN PROGRESS
-- Currently messing with positioning and movement

local turtle_position = vector.new(0, 0, 0)
local turtle_heading = 1 -- Clockwise, 1 = Forward, 2 = Right, 3 = Back, 4 = Left

local function refuel()
    while turtle.getFuelLevel() < 1 do
        print("Refueling...") -- Debug
        for i = 1, 16 do
            turtle.select(i)
            if turtle.refuel(0) then
                turtle.refuel()
            end
        end
    end
end

local function move_forward()
    turtle.dig()
    if turtle.forward() then
        -- Forward
        if turtle_heading == 1 then
            turtle_position.x = turtle_position.x + 1
        -- Right
        elseif turtle_heading == 2 then
            turtle_position.z = turtle_position.z + 1
        -- Back
        elseif turtle_heading == 3 then
            turtle_position.x = turtle_position.x - 1
        -- Left
        elseif turtle_heading == 4 then
            turtle_position.z = turtle_position.z - 1
        end
        print(turtle_position) -- Debug
        return true
    else
        return false
    end
end

local function move_back()
    if turtle.back() then
        -- Forward
        if turtle_heading == 1 then
            turtle_position.x = turtle_position.x - 1
        -- Right
        elseif turtle_heading == 2 then
            turtle_position.z = turtle_position.z - 1
        -- Back
        elseif turtle_heading == 3 then
            turtle_position.x = turtle_position.x + 1
        -- Left
        elseif turtle_heading == 4 then
            turtle_position.z = turtle_position.z + 1
        end
        print(turtle_position) -- Debug
        return true
    else
        return false
    end
end

local function move_up()
    turtle.digUp()
    if turtle.up() then
        turtle_position.y = turtle_position.y + 1
        print(turtle_position) -- Debug
        return true
    else
        return false
    end
end

local function move_down()
    turtle.digDown()
    if turtle.down() then
        turtle_position.y = turtle_position.y - 1
        print(turtle_position) -- Debug
        return true
    else
        return false
    end
end

local function turn_right()
    if turtle.turnRight() then
        if turtle_heading < 4 then
            turtle_heading = turtle_heading + 1
        else
            turtle_heading = 1
        end
        print(turtle_heading) -- Debug
        return true
    else
        return false
    end
end

local function turn_left()
    if turtle.turnLeft() then
        if turtle_heading <= 1 then
            turtle_heading = 4
        else
            turtle_heading = turtle_heading - 1
        end
        print(turtle_heading) -- Debug
        return true
    else
        return false
    end
end

local function move_to_target(x, y, z)
    local target = vector.new(x, y, z)
    while turtle_position:equals(target) ~= true do
        local tx = turtle_position.x
        local ty = turtle_position.y
        local tz = turtle_position.z
        refuel()
        -- X Axis
        if tx < x then
            while turtle_heading ~= 1 do
                turn_right()
            end
            move_forward()
        elseif tx > x then
            move_back()
        -- Y Axis
        elseif ty < y then
            move_up()
        elseif tx > x then
            move_down()
        -- Z Axis
        elseif tz < z then
            while turtle_heading == 1 or turtle_heading == 3 do
                turn_right()
            end
            if tz < z then
                if turtle_heading == 2 then
                    move_forward()
                elseif turtle_heading == 4 then
                    move_back()
                end
            elseif tz > z then
                if turtle_heading == 2 then
                    move_back()
                elseif turtle_heading == 4 then
                    move_forward()
                end
            end
        end
    end
end

move_to_target(10, 5, 7)