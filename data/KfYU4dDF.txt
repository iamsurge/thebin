// staticFixedArray.cpp : This file contains the 'main' function. Program execution begins and ends there.
//
// Microsoft Visual Studio Community 2022 Version 17.4.1
#include <iostream>
using namespace std;
//
void RecursionFunction() {
    //
    // creating a fixed array initilized to 1,2,3,4,5
    // with the attribute of static
    // static means the memory location of iFixedArray
    // is shared with other instances of RecursionFunction
    // There is only one instance of iFixedArray
    // within  the calls to RecursionFunction
    static int iFixedArray[] = { 1, 2, 3, 4, 5 };
    static int iRecursiveCount = 0;
    //
    // iNotStaticArray is not a static array.  There are multiple
    // instances of iNotStatic or local to each instance
    // of RecursionFunction that is instantized (created).
    // This means the next instance of RecursionFunction
    // created is unaware of the previous values in 
    // iNotStaticArray.  Values in iNotStaticArray are
    // not increamented for the next call of RecursionFunction
    // and will disply only 1, 2, 3, 4, 5.
    int iNotStaticArray[] = { 1, 2, 3, 4, 5 };
    //
   // display values
   cout << "Recursion count is : " << iRecursiveCount << "\n";
   for (int iIndex = 0; iIndex < 5; iIndex++) {
       cout << "static array :  "<<"    Index : " << iIndex << "    contains : " << iFixedArray[iIndex] << "\n";
       //
       // Since iFixedArray is static there is only one instance of iFixedArray.
       // Each instance of RecursionFunction() has the same iFixedArray.
       // The same instance of iFixedArray is shared with all instances of
       // RecursionFunction().
       iFixedArray[iIndex]++;

   }
   for (int iIndex = 0; iIndex < 5; iIndex++) {
       cout << "Non-static array :  " << "Index : " << iIndex << "    contains : " << iNotStaticArray[iIndex] << "\n";
       //
       // Increament has no effect for the next instance of RecursionFunction()
       // as iNotStaticArray is not static.  Each instance of RecursionFunction()
       // as it's own iNotStaticArray
       iNotStaticArray[iIndex]++;
   }
   cout << "\n";
   //
   if (iRecursiveCount++ < 5)  RecursionFunction();  // stop interations at 4
}

int main()
{
    cout << "static fixed array\n\n";
    cout << "What can be confusing, a recursive function/method\n";
    cout << "can have a static fixed array.  What this means is the\n";
    cout << "array is still fixed. The amount of values / indicies \n";
    cout << "do not change.  The values held in the static array\n";
    cout << "maintain their values upon another instantation of \n";
    cout << "the object (function, method).\n\n";
    //
    cout << "This application demonstrates a static fixed array\n";
    cout << "in a recursive function.\n\n";
    //
    RecursionFunction();
    
}

// Run program: Ctrl + F5 or Debug > Start Without Debugging menu
// Debug program: F5 or Debug > Start Debugging menu

// Tips for Getting Started: 
//   1. Use the Solution Explorer window to add/manage files
//   2. Use the Team Explorer window to connect to source control
//   3. Use the Output window to see build output and other messages
//   4. Use the Error List window to view errors
//   5. Go to Project > Add New Item to create new code files, or Project > Add Existing Item to add existing code files to the project
//   6. In the future, to open this project again, go to File > Open > Project and select the .sln file