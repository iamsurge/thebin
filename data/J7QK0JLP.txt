#include <bits/stdc++.h>

using namespace std;

using ll = long long;

#define SPEEDUP ios_base::sync_with_stdio(0); cin.tie(0);

ll mod;


struct matrix
{
	ll a[2][2];

	matrix operator * (matrix m)
	{
		matrix ans = {};

		for (int i = 0; i < 2; i++)
			for (int j = 0; j < 2; j++)
				for (int k = 0; k < 2; k++)
				{
					ans.a[i][j] = (ans.a[i][j] + a[i][k] * m.a[k][j]) % mod;
				}

		return ans;
	}
};

matrix power(matrix x, int n)
{
	if (n == 0)
		return {1, 0, 0, 1};

	if (n & 1)
		return power(x, n - 1) * x;
	else
		return power(x * x, n / 2);
}

ll lcm(ll a, ll b)
{
	return a / __gcd(a, b) * b;
}

int prime_period(int p)
{
	if (p == 2)
		return 3;

	if (p == 5)
		return 20;

	if (p % 5 == 1  ||  p % 5 == 4) /// p = +/- 1 (mod 5)
		return p - 1;

	return 2 * p + 2; /// when p % 5 == 2  ||  p % 5 == 3
}

ll period(int m)
{
	ll power, p = 1;

	for (int i = 2; i * i <= m; i++)
		if (m % i == 0)
		{
			for (power = 1; m % i == 0; m /= i)
				power *= i;

			p = lcm(p, power / i * prime_period(i)); /// period = lcm(period, p_i^(d_i - 1) * period(p_i))
		}

	if (m > 1)
		p = lcm(p, prime_period(m));

	return p;
}

int main()
{
	SPEEDUP

	int tests, n, m, f1 = 1, f2 = 1;

	cin >> tests;

	while (tests--)
	{
		cin >> n >> m;

		mod = period(m);

		matrix ans = power( {0, 1, 1, 1}, n - 1);

		int fn = (f1 * ans.a[0][0] + f2 * ans.a[1][0]) % mod; /// f[n] % mod

		mod = m;

		ans = power( {0, 1, 1, 1}, fn - 1);

		fn = (f1 * ans.a[0][0] + f2 * ans.a[1][0]) % mod; /// f[n] % mod

		cout << fn << "\n";
	}
}