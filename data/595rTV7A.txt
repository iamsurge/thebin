import net.dv8tion.jda.api.entities.*;
import net.dv8tion.jda.api.events.message.MessageReceivedEvent;
import net.dv8tion.jda.api.events.message.react.MessageReactionAddEvent;
import net.dv8tion.jda.api.events.message.react.MessageReactionRemoveEvent;
import net.dv8tion.jda.api.hooks.ListenerAdapter;
import net.dv8tion.jda.api.utils.FileUpload;

import java.awt.*;
import java.io.*;
import java.util.*;
import java.util.List;

public class EventListener extends ListenerAdapter {

    //  Emojis/Roles
    public Map<String, String> takFlairs = new HashMap<String, String>();
    public Set<Map.Entry<String, String>> takSet = takFlairs.entrySet();

    //  Constructor, fills up map with emoji unicodes and role IDs.
    public EventListener() {
        takFlairs.put("CustomEmoji:role1(id=1061845956489912400)", "1061868526710824990");
        takFlairs.put("UnicodeEmoji(codepoints=U+2694U+fe0f)", "825456949880422471");
        takFlairs.put("CustomEmoji:role2(id=1061845947950313492)", "1061868539411177512");
        takFlairs.put("UnicodeEmoji(codepoints=U+1f30a)", "1061868276772249650");
        takFlairs.put("CustomEmoji:role3(id=1061845953008652369)", "1061868276772249650");
        takFlairs.put("CustomEmoji:role4(id=1061845900563075235)", "749063177169272872");
        takFlairs.put("CustomEmoji:role5(id=1061845949359603752)", "812175230336368640");
        takFlairs.put("CustomEmoji:role6(id=1061845955479089282)", "760527506741788753");
        takFlairs.put("CustomEmoji:role7(id=1061870474017120276)", "935405657849487391");
        takFlairs.put("CustomEmoji:role8(id=1061845951725195335)", "799700772295147520");
    }
    // Removes roles from a user upon them removing a reaction to a message.
    @Override
    public void onMessageReactionRemove(MessageReactionRemoveEvent event) {
        //  Checks for specific channel reaction
        if(event.getChannel().toString().substring(12, event.getChannel().toString().indexOf('(')).equals("roles")) {
            //  Tests for a specific emoji
            for (Map.Entry<String,String> o : takSet) {
                //  Custom Emojis > CustomEmoji:NAMEHERE(id=type "\:EMOJINAME:" in a channel to get ID#).
                if (event.getEmoji().toString().equals(o.getKey())) {
                    removeRole(o.getValue(), event);
                }
            }
        }
    }
    // Removes a role
    private void removeRole(String roleId, MessageReactionRemoveEvent event) {
        // Creates list of user's current roles
        List<Role> roles = Objects.requireNonNull(event.getMember()).getRoles();
        //  Stores role, needs role ID
        Role role = Objects.requireNonNull(event.getGuild().getRoleById(roleId));
        //  If user already has the role for the emoji they've reacted with, ignore.
        if (roles.contains(role)) {
            //  Removes the role to the member who reacted
            event.getGuild().removeRoleFromMember(Objects.requireNonNull(event.getMember()), role).queue();
            //  Sends a confirmation of the process to the member via DM
            Objects.requireNonNull(event.getUser()).openPrivateChannel().flatMap(channel -> channel.sendMessage(
                    "``You flaired yourself with the following role:``\n```- " + role.toString().substring(
                            5, role.toString().indexOf('(')) + "```")).queue();
        }
    }
}