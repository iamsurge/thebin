function run()
    -- Open the modem on our left side for networking with the back-end
    rednet.open('left')
 
    -- Run a while loop to get user input
    while true do
        -- Read a line from the user terminal
        command = read()
 
        -- Split the text by the space character into a table
        keywords = split(command)
        
        if keywords[1] == 'quit' then
            -- If the user typed 'quit,' exit our script by returning
            return
 
        elseif keywords[1] == 'queue' then
            -- The user must enter a second keyword that contains the song/playlist name
            if #keywords == 2 then
                -- Call pause() in case the player computer is playing something so the 
                -- it is able to receive packets again
                pause()
 
                -- Run the song's script
                shell.run(keywords[2])
 
                -- Start/resume playback
                play()
            else
                -- Alert the user that their command structure is invalid
                print('Invalid syntax - correct syntax is: queue <song/playlist>')
            end
            
        elseif keywords[1] == 'play' then
            -- The play command accepts two different command structures
            if keywords[2] == nil then
                -- The first is just simply "play" - this is to resume playback from a
                -- paused state
                play()
            else
                -- The second is "play <song/playlist>" - it queues the song and begins
                -- playback in one fell swoop
                
                -- Stop playback if it is occurring and tell the player computer to
                -- dump all of its current songs and reset its internal state
                stop()
 
                sleep(2)
                
                -- Queue the requested song/playlist
                shell.run(keywords[2])
                
                -- Begin playback
                play();
            end
 
        elseif keywords[1] == 'pause' then
            -- Pause playback
            pause()
            
        elseif keywords[1] == 'stop' then
            -- Stop playback
            stop()
        end
    end
end
 
function play()
    -- Turn off any previous pause/stop signals
    rs.setBundledOutput('back', 0)
    
    -- Send a packet containing the "play" command to the player computer
    packet = {}
    packet.command = 'play'
    rednet.broadcast(packet, 'JBPP')
end
 
function pause() 
    -- Send a redstone signal on the orange channel to the player computer
    -- to tell it to pause playback
    rs.setOutput('back', true)
    
    -- Sleep for one second to make sure it receives the signal
    sleep(1)
    
    -- Turn off the signal
    rs.setOutput('back', false)
end
 
function stop()
    -- Send a redstone signal on the red channel to the player computer
    -- to tell it to stop playback
    rs.setOutput('bottom', true)
    
    -- Sleep for one second to make sure it receives the signal
    sleep(1)
    
    -- Turn off the signal
    rs.setOutput('bottom', false)
end
 
function split(inputstr)
    -- This function separates all of the text between spaces within a string
    -- and returns a table containing each bit of text
    local t={}
    local sep = "%s"
 
    for str in string.gmatch(inputstr, "([^"..sep.."]+)") do
        table.insert(t, str)
    end
 
    return t
end
 
run()