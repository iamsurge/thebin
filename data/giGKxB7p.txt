#views.py
class Users_value(View):
    
    TEMPLATE = 'answers/index.html'
    
    main_args = {
        'services':' ',
        'comment': ' ',
        'personalH':' ',
        'personalC': ' '
    }       
    
    def get(self, request):
        self.main_args['services'] = Services.objects.all()
        self.main_args['comment'] = Comments.objects.all()
        
        print(self.args)
        return render(request, self.TEMPLATE, self.main_args)
    
    def post(self, request):
        users_value = request.POST
        new = Uset() 
        new.name = users_value['name-input']
        new.born_date = users_value["data-input"]
        prediction = Numirology(new.born_date)
        prediction.template_method()
        new.personal_predictions = prediction.purpose_personal
        new.social_predictions = prediction.social_purpose
        new.spiritual_predictions = prediction.spiritual_purpose
        new.save()
        
        personal_answers = Personal_predictions.objects.get(purpose_personal=new.personal_predictions)
        self.main_args['personalH'] = personal_answers.header
        self.main_args['personalC'] = personal_answers.predictions_personal
        self.main_args['name'] = new.name
        self.main_args['date'] = new.born_date
        print(self.args)
        
        return render(request, self.TEMPLATE, self.main_args)

#script.js
const matrixForm = document.getElementById('matrix-form');
  const explanationModal = document.querySelector('#modal-explanation');

  matrixForm.addEventListener('submit', async function (e) {
    e.preventDefault();

    const formData = new FormData(this);
    const searchParams = new URLSearchParams();
  
    for (const pair of formData) {
      searchParams.append(pair[0], pair[1], pair[2]);
    }
    console.log(searchParams);
  
    await fetch('', {
      method: 'post',
      body: searchParams
    }).then(function (response) {
      return response.text();
    }).then(function (text) {
      if(text){
        formElOpen();
        matrixForm.reset();
      };
    }).catch(function (error) {
      console.error(error);
    })
    
    
  });

  function formElOpen() {
    //document.body.classList.add('_lock');
    explanationModal.classList.add('modal-active');
  }
const closeButtons = document.querySelectorAll('.modal-close-button');

closeButtons.forEach(function(closeBtn) {
  closeBtn.addEventListener('click', function() {
    explanationModal.classList.remove('modal-active');
    //document.body.classList.remove('_lock');
  });
});

const modalBgd = document.querySelector('.modal-bgd');

modalBgd.addEventListener('click', (e) => {
  if (e.target == modalBgd) {
      modalBgd.classList.remove('modal-active');
      //document.body.classList.remove('_lock');
  }
});