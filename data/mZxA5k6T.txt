from kivymd.app import MDApp
from kivy.lang import Builder
from kivy.uix.button import Button
from kivy.uix.label import Label
from kivy.uix.gridlayout import GridLayout
from kivy.uix.stacklayout import StackLayout
from kivy.uix.pagelayout import PageLayout
from kivy.properties import NumericProperty, StringProperty
from kivy.uix.screenmanager import Screen

from calendar import monthrange
import calendar
import datetime

kv = """
#:kivy 1.0

<MenuScreen>:
    Gridspin:

<SettingsScreen>:
    id: settings
    GridLayout:
        rows: 2
        GridLayouttest:
        Button:
            height: 60
            size_hint: 1, None
            text:"Calendar"
            on_press: root.manager.current = 'menu'

<GridLayouttest>:
    rows: 3
    canvas.before:
        Color:
            rgba: 1, 1, 1, 1
        Rectangle:
            size: self.width, self.minimum_height
            pos: self.pos
    ScrollView:
        LayoutExample:
            id: tasks
    TextInput:
        hint_text:'taak toevoegen'
        size_hint:(1, None) 
        height: 60
        id: ti
    Button:
        text:'toevoegen'
        size_hint:(1, None) 
        height: 60
        on_press: tasks.text = ti.text

<Gridspin>:
    rows: 2
    GridLayout:
        height: 60
        size_hint: 1, None
        cols: 2
        Spinner:
            height: 60
            size_hint: 1, None
            text: str(calendar.month_int)
            values: [str(m) for m in range(1, 13)]
            on_text: calendar.month_int = int(self.text)
        Spinner:
            height: 60
            size_hint: 1, None
            text: str(calendar.year)
            values: ['2018', '2019', '2020', '2021', '2022', '2023', '2024', '2025', '2026']
            on_text: calendar.year = int(self.text)
    GridLayoutExample:
        id: calendar

<GridLayoutExample>:
    id: grid
    #left-right  top-bottom
    cols: 7
    orientation: "lr-tb"
    size: root.minimum_width, root.minimum_height
    padding: ("20dp", "20dp", "20dp", "20dp")

<LayoutExample>:
    orientation: "lr-tb"
    size_hint: 1, None
    height: self.minimum_height
    width: self.width

ScreenManager:
    MenuScreen:
        name: 'menu'
    SettingsScreen:
        name:'settings'
"""


class GridLayoutExample(GridLayout):
    year = NumericProperty(datetime.datetime.now().year)
    month_int = NumericProperty(datetime.datetime.now().month)

    def on_kv_post(self, base_widget):
        self.update_calendar()

    def on_year(self, obj, value):
        self.update_calendar()

    def on_month_int(self, obj, value):
        self.update_calendar()

    def update_calendar(self):
        self.clear_widgets()
        num_days = monthrange(self.year, self.month_int)[1]
        month = calendar.monthcalendar(self.year, self.month_int)
        start_day = month[0].count(0)
        weekheader = str(calendar.weekheader(3))
        days = weekheader.split(" ")
        days_length = len(days)
        for j in range(days_length):
            label1 = Label(text=days[j], color=(0, 0, 0, 1))
            self.add_widget(label1)

        for g in range(start_day):
            label2 = Label()
            self.add_widget(label2)

        for i in range(num_days):
            if datetime.datetime.now().weekday() == i and \
                    self.month_int == datetime.datetime.now().month and \
                    self.year == datetime.datetime.now().year:
                button = Button(text=str(i + 1), background_color=(0, 0, 1, 1), on_release=self.select_day)
                print("yes")
            else:
                button = Button(text=str(i + 1), on_release=self.select_day)
            button.my_id = str(i + 1) + "-" + str(self.month_int) + "-" + str(self.year)
            self.ids[str(i + 1) + "-" + str(self.month_int) + "-" + str(self.year)] = button  # why?
            self.add_widget(button)

    def select_day(self, obj):
        print(f'pressed {obj.text}/{self.month_int}/{self.year}')
        app = MDApp.get_running_app()
        # app.root is the root widget, the screen manager.
        app.root.current = 'settings'



class LayoutExample(StackLayout):
    text = StringProperty()

    def on_kv_post(self, base_widget):
        self.show_task()

    def on_text(self, obj, value):
        self.show_task()

    def show_task(self):
        print(self.text)


class Gridspin(GridLayout):
    pass


class PageLay(PageLayout):
    pass


class MenuScreen(Screen):
    pass


class SettingsScreen(Screen):
    pass


class GridLayouttest(GridLayout):
    pass


class Screenag(MDApp):
    def build(self):
        return Builder.load_string(kv)


Screenag().run()