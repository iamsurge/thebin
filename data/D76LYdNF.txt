// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)2e18;
const ll inf = 1e9 + 7;
const ll ONE = 1;
const ll MOD = 1000000007;
const ll LG = 20;
ld EPS = 1e-12;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);

int sign(const ld& val) {
    if (fabs(val) <= EPS) {
        return 0;
    }
    else if (val > EPS) {
        return 1;
    }
    else {
        return -1;
    }
}

struct Point {
    ld x, y;
    Point() : x(0), y(0) {}
    Point(ld _x, ld _y) : x(_x), y(_y) {}

    Point operator+(const Point& other) const {
        return Point(x + other.x, y + other.y);
    }
    Point operator-(const Point& other) const {
        return Point(x - other.x, y - other.y);
    }
    Point operator*(const ld k) const {
        return Point(x * k, y * k);
    }
    //a * b * cos()
    ld operator*(const Point& other) const {
        return x * other.x + y * other.y;
    }
    //a * b * sin()
    ld operator%(const Point& other) const {
        return x * other.y - y * other.x;
    }
    ld lenSqr() const {
        return x * x + y * y;
    }
    ld len() const {
        return sqrt(lenSqr());
    }
    Point ort() const {
        return Point(-y, x);
    }
    void normalization() {
        ld Jame = len();
        x = x / Jame;
        y = y / Jame;
    }
};

int gcd(int a, int b) {
    if (a == 0 || b == 0) {
        return a + b;
    }
    if (a > b) {
        return gcd(a % b, b);
    }
    else {
        return gcd(a, b % a);
    }
}

Point base{ inf,inf };

bool cmp(const Point& a, const Point& b) {
    int ans = sign((a - base) % (b - base));
    if (ans == 0) {
        return (a - base).lenSqr() < (b - base).lenSqr();
    }
    else {
        return ans > 0;
    }
}

void do_hull(int l, int r, int ban, vector <pair <Point, int> >& res, vector <Point>& from) {
    int i, n;
    ld zxc;
    for (i = l; i <= r; i++) {
        if (i == ban) continue;
        while (res.size() > 1) {
            n = res.size();
            Point f = from[i] - res[n - 1].first, s = res[n - 1].first - res[n - 2].first;
            if (sign(f % s) >= 0) {
                res.pop_back();
            }
            else {
                break;
            }
        }
        res.push_back({ from[i], i });
    }
}

void solve() {
    int n, i, j, k1, k2, n2, n3;
    cin >> n;
    vector <Point> a(n);
    for (i = 0; i < n; i++) {
        cin >> a[i].x >> a[i].y;
        if (a[i].x < base.x) {
            base = a[i];
        }
        else if (a[i].x == base.x && a[i].y < base.y) {
            base = a[i];
        }
    }
    sort(all(a), cmp);
    vector <pair <Point, int> > h, h2;
    do_hull(0, n - 1, -1, h, a);
    n2 = h.size();
    k1 = (n - n2) * n2;
    k2 = n;
    for (i = 1; i < n2 - 1; i++) {
        h2.clear();
        do_hull(h[i - 1].second, h[i + 1].second, h[i].second, h2, a);
        n3 = h2.size();
        k1 += (n2 - 3 + n3);
    }
    h2.clear();
    do_hull(0, n - 1, h[n2 - 1].second, h2, a);
    k1 += h2.size();
    h2.clear();
    swap(a[h[0].second], a[n - 1]);
    a.pop_back();
    base = { inf, inf };
    for (i = 0; i < n - 1; i++) {
        if (a[i].x < base.x) {
            base = a[i];
        }
        else if (a[i].x == base.x && a[i].y < base.y) {
            base = a[i];
        }
    }
    sort(all(a), cmp);
    do_hull(0, n - 2, -1, h2, a);
    k1 += h2.size();
    i = gcd(k1, k2);
    cout << k1 / i << "/" << k2 / i << endl;
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    //freopen("ladder.in", "r", stdin);
    //freopen("ladder.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono