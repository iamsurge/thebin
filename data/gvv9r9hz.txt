# StringBuilder


class StringBuilder:
    _file_str = list()

    _length = 0

    @property
    def length(self):
        """
        Получава дължината на текущия обект StringBuilder.
        """
        return self._length

    def __set_length(self):
        self._length = len(self._file_str)

    def __getitem__(self, index):
        # Индексатор на елементите на класа StringBuilder

        return self._file_str[index]

    def __init__(self, init_string: str = None):

        """
            Инициализира нов екземпляр на класа StringBuilder, използвайки посочения низ.
            Ако не е подаден низ се инициализира празен екземпляр на класа
        """

        if (init_string == None):
            self._file_str = list()

        else:
            for s in init_string:
                self._file_str.append(s)

        self.__set_length()

    def Append(self, input_string: str = None):

        """
            Добавя низовото представяне на определен обект към този екземпляр.
        """

        for s in input_string:
            self._file_str.append(s)

        self.__set_length()

    def AppendLine(self, input_string: str = None):

        """
            Добавя символ за край на ред или копие на определен низ и символ за край на ред в края на този екземпляр.
        """

        if (not (input_string == None)):

            for s in input_string:
                self._file_str.append(s)

        self._file_str.append("\n")

        self.__set_length()

    def Clear(self):

        """
            Премахва всички символи от текущия екземпляр на StringBuilder.
        """

        self._file_str = []

        self.__set_length()

    def CopyTo(self, sourceIndex: int, destinationIndex: int, count: int, destination: list):

        """
            Копира символите от определен сегмент на този екземпляр в определен сегмент от целевия списък.
            Параметри:
            sourceIndex - Началната позиция от която ще бъдат копирани знаците. Нула базиран индекс.
            destination - Списък в който знаците ще бъдат копирани.
            destinationIndex - Началната позиция, в destination. Нула базиран индекс.
            count - Броят на знаците, които трябва да се копират.
        """

        is_valid_index = ((sourceIndex < 0) or (destinationIndex < 0) or (count < 0))

        is_valid_index = (
                    (is_valid_index) or (sourceIndex >= self.length) or ((sourceIndex + count) >= self.length) or (
                    (destinationIndex + count) >= self.length))

        if (is_valid_index):
            raise IndexError

        for i in range(sourceIndex + count, sourceIndex - 1, -1):
            destination.insert(destinationIndex, self._file_str[i])

    def Insert(self, index, string):

        """
            Вмъква низ в този екземпляр на посочената позиция на символа.
            Параметри
            index - Позицията откъдето започва вмъкването.
            string - Низът за вмъкване.
        """

        if ((len(self._file_str) == 0) and (index == 0)):
            self.Append(string)

            return

        if (not ((index >= 0) and (index < len(self._file_str)))):
            raise IndexError

        for i in range(len(string) - 1, -1, -1):
            self._file_str.insert(index, string[i])

        self.__set_length()

    def Remove(self, startIndex: int, lng: int):
        """
            Премахва посочения диапазон от знаци от този екземпляр.

            Параметри
            startIndex - Базирана на нула позиция откъдето започва премахването.
            lng - Броят знаци за премахване.
        """

        is_valid_index = ((startIndex < 0) or (lng < 0))

        is_valid_index = ((is_valid_index) or ((startIndex + lng) > self.length))

        if (is_valid_index):
            raise IndexError

        new_list = self._file_str[: startIndex] + self._file_str[startIndex + lng:]

        self._file_str = new_list
        self.__set_length()
        return self.__str__()

    def __str__(self):

        s = ""

        for i in range(len(self._file_str)):
            s = f"{s}{self._file_str[i]}"

        return s


# Press Shift+F10 to execute it or replace it with your code.

# Press Double Shift to search everywhere for classes, files, tool windows, actions, and settings.


sb = StringBuilder("0123456789012345678901234567890123456789")
# Създаване на инстанция на класа StringBuilder съдържаш низа "0123456789012345678901234567890123456789"

print(f"sb = {sb}")

s = sb.Remove(0, 9)
# Истриване на елементите от индекс 0 с дължина 9
print(f"sb след премахване на 9 символа от началото на низа: {sb}")
print(f"Върната стойност от метода Remove: {s}")

print(f"Дължината на низа представен в класа sb е {sb.length}")
# Отпечатване на дължината на елементите в низа

sb.AppendLine("1234567")
# Вмъкване на стринга "1234567" в края на низа и преместване на курсува на нов ред

print(f"sb след прибавяне на низа \"1234567\" = {sb}")

sb.AppendLine("102030405060")
# Вмъкване на низа "102030405060" в края на низа и преместване на курсува на нов ред
print(f"sb след прибавяне на низа \"102030405060\" = {sb}")


sb.Insert(4, "Нека вмъкнем текст от 4-тия символ")
print(f"sb след вмъкването на текста \"Нека вмъкнем текст от 4-тия символ\" = {sb}")
print("Не забравяйте, че индексите започват да се броят от 0!")

print("Нека копираме част от низа в друг низ в помоща на метода CopyTo")
print("Копираме текста от позиция 4 с дължина 33 символа")

copy = []
sb.CopyTo(4, 0, 33, copy)

print(f"Ето и копирания текст представен в списък:  {copy}")

print(f"Изтриване на целият текст в sb с помоща на метода Clear()")
sb.Clear()
# Изтриване на целият текст в sb - sb вече е празен

print(f"sb вече е празен sb = {sb}")
print(f"Дължината на низа представен в sb - sb.length = {sb.length}")

print(f"Нека вмъкнем текст в празния низ с помоща на метода Insert")

sb.Insert(0, "My String")

print(f"sb вече съдържа стринга:  {sb}")