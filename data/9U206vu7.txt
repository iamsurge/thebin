import 'dart:convert';

import 'package:equatable/equatable.dart';

class Repair extends Equatable {
  final int? id_repair;
  final String? customer;
  final DateTime? date_accept;
  final DateTime? date_delive;
  final String? user;
  final String? technician;
  final String? path_photo;
  final String? objects;
  final String? works_to_do;
  final double? p_cost;
  final double? p_part1;
  final double? p_part2;
  final double? p_part3;
  final String? note;
  final double? p_public;



  const Repair(
    this.id_repair,
    this.customer,
    this.date_accept,
    this.date_delive,
    this.user,
    this.technician,
    this.path_photo,
    this.objects,
    this.works_to_do,
    this.p_cost,
    this.p_part1,
    this.p_part2,
    this.p_part3,
    this.note,
    this.p_public,
  );

  Repair copyWith({
    int? id_repair,
    String? customer,
    DateTime? date_accept,
    DateTime? date_delive,
    String? user,
    String? technician,
    String? path_photo,
    String? objects,
    String? works_to_do,
    double? p_cost,
    double? p_part1,
    double? p_part2,
    double? p_part3,
    String? note,
    double? p_public,
  }) {
    return Repair(
      id_repair ?? this.id_repair,
      customer ?? this.customer,
      date_accept ?? this.date_accept,
      date_delive ?? this.date_delive,
      user ?? this.user,
      technician ?? this.technician,
      path_photo ?? this.path_photo,
      objects ?? this.objects,
      works_to_do ?? this.works_to_do,
      p_cost ?? this.p_cost,
      p_part1 ?? this.p_part1,
      p_part2 ?? this.p_part2,
      p_part3 ?? this.p_part3,
      note ?? this.note,
      p_public ?? this.p_public,
    );
  }

  Map<String, dynamic> toMap() {
    return {
      'id_repair': id_repair,
      'customer': customer,
      'date_accept': date_accept?.millisecondsSinceEpoch,
      'date_delive': date_delive?.millisecondsSinceEpoch,
      'user': user,
      'technician': technician,
      'path_photo': path_photo,
      'objects': objects,
      'works_to_do': works_to_do,
      'p_cost': p_cost,
      'p_part1': p_part1,
      'p_part2': p_part2,
      'p_part3': p_part3,
      'note': note,
      'p_public': p_public,
    };
  }

  factory Repair.fromMap(Map<String, dynamic> map) {
    return Repair(
      map['id_repair']?.toInt(),
      map['customer'],
      map['date_accept'] != null ? DateTime.fromMillisecondsSinceEpoch(map['date_accept']) : null,
      map['date_delive'] != null ? DateTime.fromMillisecondsSinceEpoch(map['date_delive']) : null,
      map['user'],
      map['technician'],
      map['path_photo'],
      map['objects'],
      map['works_to_do'],
      map['p_cost']?.toDouble(),
      map['p_part1']?.toDouble(),
      map['p_part2']?.toDouble(),
      map['p_part3']?.toDouble(),
      map['note'],
      map['p_public']?.toDouble(),
    );
  }

  String toJson() => json.encode(toMap());

  factory Repair.fromJson(String source) => Repair.fromMap(json.decode(source));

  @override
  String toString() {
    return 'Repair(id_repair: $id_repair, customer: $customer, date_accept: $date_accept, date_delive: $date_delive, user: $user, technician: $technician, path_photo: $path_photo, objects: $objects, works_to_do: $works_to_do, p_cost: $p_cost, p_part1: $p_part1, p_part2: $p_part2, p_part3: $p_part3, note: $note, p_public: $p_public)';
  }

  @override
  List<Object?> get props {
    return [
      id_repair,
      customer,
      date_accept,
      date_delive,
      user,
      technician,
      path_photo,
      objects,
      works_to_do,
      p_cost,
      p_part1,
      p_part2,
      p_part3,
      note,
      p_public,
    ];
  }
}
