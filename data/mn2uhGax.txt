class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m,n=len(board),len(board[0])
        visit=[[False]*n for _ in range(m)]
        directions=[[1,0],[-1,0],[0,1],[0,-1]]
        def backtrack(r,c,i):
            if i==len(word):
                return True
            if (r < 0 or r >= m or 
                c < 0 or c >= n or
                board[r][c]!=word[i] or
                visit[r][c]):
                return False
            visit[r][c] = True
            for dr,dc in directions:
                if backtrack(r+dr,c+dc,i+1):
                    return True
            visit[r][c] = False
            return False
        for i in range(m):
            for j in range(n):
                if backtrack(i,j,0):
                    return True
        return False