// Question 1
// Define a method named printAbsentEasy. The following facts should be considered in it's implementation: ...
public void printAbsentEasy(String a ) {
    try {
        int len = a.length();
        System.out.println(a);
        System.out.printf("Contains %d characters", len);
    } catch (Exception e) {
        throw new IllegalArgumentException();
    }
}

// Question 2
// Define a new exception class named InvalidNumberForBaseException. The following facts should be considered in it's implementation: ...
public class InvalidNumberForBaseException extends Exception {
    public InvalidNumberForBaseException(char a, int b){
        super(String.format("'%c' is not a valid character for base %d numbers", a, b));
    }
}

// Question 3
// Modify the convertToInt method from the StringCalculator class.  ...
  public int convertToInt(String number) throws InvalidNumberForBaseException {
    if(number.startsWith("-")) {
      return -1;
    }
    int value = 0;
    for (int i = 0; i < number.length(); i++) {
      value *= base;
      int digit;
      if(base > 10){
        if(Character.isDigit(number.charAt(i))){
          digit = number.charAt(i) - '0';
        } else {
          int temp = 0;
          char chr = number.charAt(i);
          if(Character.isUpperCase(chr)){
            temp = chr - 'A';
          } else {
            temp = chr - 'a';
          }
          if (temp < 0 || temp >= base - 10) {
              throw new InvalidNumberForBaseException(chr, base);
          }
          digit = 10 + temp;
        }
      } else {
        char chr = number.charAt(i);
        int temp = chr - '0';
        if (temp < 0 || temp >= base) {
            throw new InvalidNumberForBaseException(chr, base);
        }
        digit = temp;
      }
      value += digit;
    }
    return value;
  }


// Question 4
// Modify each of the methods that uses the convertToInt method (add, subtract, multiply, divide and modulus) so that the InvalidNumberForBaseException is caught and each method returns a string containing the message "Invalid parameter supplied calculation not performed" when an exception happens. ...
  public String add(String n1, String n2) {
    try {
        int v1 = convertToInt(n1);
        int v2 = convertToInt(n2);
        int result = v1 + v2;
        String r = convertToString(result);
        return r; 
    } catch (InvalidNumberForBaseException e) {
        return "Invalid parameter supplied calculation not performed";
    }
  }
  
  public String subtract(String n1, String n2) {
    try {
        int v1 = convertToInt(n1);
        int v2 = convertToInt(n2);
        int result = v1 - v2;
        String r = convertToString(result);
        return r;
    } catch (InvalidNumberForBaseException e) {
        return "Invalid parameter supplied calculation not performed";
    }
    
  }
  
  public String multiply(String n1, String n2) {
    try {
        int v1 = convertToInt(n1);
        int v2 = convertToInt(n2);
        int result = v1 * v2;
        String r = convertToString(result);
        return r;
    } catch (InvalidNumberForBaseException e) {
        return "Invalid parameter supplied calculation not performed";
    }
    
  }
  
  public String divide(String n1, String n2)  {
    try {
        int v1 = convertToInt(n1);
        int v2 = convertToInt(n2);
        int result = v1 / v2;
        String r = convertToString(result);
        return r;
    } catch (InvalidNumberForBaseException e) {
        return "Invalid parameter supplied calculation not performed";
    }
    
  }
  
  public String modulus(String n1, String n2){
    try {
        int v1 = convertToInt(n1);
        int v2 = convertToInt(n2);
        int result = v1 % v2;
        String r = convertToString(result);
        return r;
    } catch (InvalidNumberForBaseException e) {
        return "Invalid parameter supplied calculation not performed";
    }
  }


