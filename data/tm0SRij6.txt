class hiden(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.value = None

    # When the confirm button is pressed, set the inner value to `True` and
    # stop the View from listening to more input.
    # We also send the user an ephemeral message that we're confirming their choice.
    @discord.ui.button(label='Hidden', style=discord.ButtonStyle.green)
    async def hiddex(self, interaction: discord.Interaction, button: discord.ui.Button):
        pokemon = finaldprint.lower()
        data = requests.get(f"https://pokeapi.co/api/v2/pokemon/{pokemon}/")
        moves = data.json()["moves"]
        movecount = 0
        for x in moves:
            movecount += 1
        pokemon = pokedex.get_pokemon_by_name(pokemon)
        pokemonevolutions = pokemon[0]["family"]["evolutionLine"]
        pokemonevos = ', '.join(pokemonevolutions)
        pokemonname=pokemon[0]["name"]
        numberr = pokemon[0]["number"]
        datamoves = requests.get(f"https://pokeapi.co/api/v2/evolution-chain/{numberr}")
        embed = discord.Embed(title=f"{pokemonname}", description=f"Dex number: {numberr}")
        height = pokemon[0]["height"]
        weight = pokemon[0]["weight"]
        sprite = pokemon[0]["sprite"]
        types = pokemon[0]["types"]
        gen = pokemon[0]["gen"]
        poketype = pokemon[0]["species"]
        description = pokemon[0]["description"]
        starts = pokemon[0]["starter"]
        legg = pokemon[0]["legendary"]
        myth = pokemon[0]["mythical"]
        ub = pokemon[0]["ultraBeast"]
        if starts:
            starts = "Yes"
        elif starts == False:
            starts = "No"
        if legg:
            legg = "Yes"
        elif legg == False:
            legg = "No"
        if myth:
            myth = "Yes"
        elif myth == False:
            myth = "No"
        if ub:
            ub = "Yes"
        elif ub == False:
            ub = "No"
        pokemontype = ' '.join(types)
        embed.add_field(name="Height:", value=height)
        embed.add_field(name="Weight:", value=weight)
        embed.add_field(name="Type:", value=pokemontype)
        embed.add_field(name="Description:", value=description, inline=False)
        embed.add_field(name="Pokemon Type:", value=poketype, inline=False)
        embed.add_field(name="Generation:", value=f"Generation: {gen}", inline=False)
        embed.add_field(name="Moves:", value=f"There are {movecount} moves", inline=False)
        embed.add_field(name="Evolution Chain:", value=pokemonevos, inline=True)
        embed.add_field(name="Starter:", value=starts)
        embed.add_field(name="Legendary:", value=legg)
        embed.add_field(name="Mythical:", value=myth)
        embed.add_field(name="Ultra Beast:", value=ub)
        
   
        embed.set_thumbnail(url=f"https://raw.githubusercontent.com/geekygreek7/animated-pokemon-gifs/master/{numberr}.gif")
    
        await interaction.response.send_message(embed=embed, ephemeral=True)
        self.value = True
    @discord.ui.button(label='Public', style=discord.ButtonStyle.green)
    async def pubdex(self, interaction: discord.Interaction, button: discord.ui.Button):
        pokemon = finaldprint.lower()
        data = requests.get(f"https://pokeapi.co/api/v2/pokemon/{pokemon}/")
        moves = data.json()["moves"]
        movecount = 0
        for x in moves:
            movecount += 1
        pokemon = pokedex.get_pokemon_by_name(pokemon)
        pokemonevolutions = pokemon[0]["family"]["evolutionLine"]
        pokemonevos = ', '.join(pokemonevolutions)
        pokemonname=pokemon[0]["name"]
        numberr = pokemon[0]["number"]
        datamoves = requests.get(f"https://pokeapi.co/api/v2/evolution-chain/{numberr}")
        embed = discord.Embed(title=f"{pokemonname}", description=f"Dex number: {numberr}")
        height = pokemon[0]["height"]
        weight = pokemon[0]["weight"]
        sprite = pokemon[0]["sprite"]
        types = pokemon[0]["types"]
        gen = pokemon[0]["gen"]
        poketype = pokemon[0]["species"]
        description = pokemon[0]["description"]
        starts = pokemon[0]["starter"]
        legg = pokemon[0]["legendary"]
        myth = pokemon[0]["mythical"]
        ub = pokemon[0]["ultraBeast"]
        if starts:
            starts = "Yes"
        elif starts == False:
            starts = "No"
        if legg:
            legg = "Yes"
        elif legg == False:
            legg = "No"
        if myth:
            myth = "Yes"
        elif myth == False:
            myth = "No"
        if ub:
            ub = "Yes"
        elif ub == False:
            ub = "No"
        pokemontype = ' '.join(types)
        embed.add_field(name="Height:", value=height)
        embed.add_field(name="Weight:", value=weight)
        embed.add_field(name="Type:", value=pokemontype)
        embed.add_field(name="Description:", value=description, inline=False)
        embed.add_field(name="Pokemon Type:", value=poketype, inline=False)
        embed.add_field(name="Generation:", value=f"Generation: {gen}", inline=False)
        embed.add_field(name="Moves:", value=f"There are {movecount} moves", inline=False)
        embed.add_field(name="Evolution Chain:", value=pokemonevos, inline=True)
        embed.add_field(name="Starter:", value=starts)
        embed.add_field(name="Legendary:", value=legg)
        embed.add_field(name="Mythical:", value=myth)
        embed.add_field(name="Ultra Beast:", value=ub)
        
   
        embed.set_thumbnail(url=f"https://raw.githubusercontent.com/geekygreek7/animated-pokemon-gifs/master/{numberr}.gif")
    
        await interaction.response.send_message(embed=embed)
        self.value = True
class Confirm(discord.ui.View):
    def __init__(self):
        super().__init__()
        self.value = None

    # When the confirm button is pressed, set the inner value to `True` and
    # stop the View from listening to more input.
    # We also send the user an ephemeral message that we're confirming their choice.
    @discord.ui.button(label='Dex', style=discord.ButtonStyle.green)
    async def dex(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message("Hidden or Public?", view=hiden(),ephemeral=True)
        self.value = True