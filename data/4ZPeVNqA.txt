--------------Makes Tables-----------------------------------
items1 = {"Shining", "Icy", "Tarnished", "Heroic", "Tropical", "Classical", "Elastic", "Decaying", "Tolerant", "Prehistoric", "Phantasmal", "Excited", "Exotic", "Decomposing", "Nuclear", "Fungal", "Slate", "Lime", "Caffeinated", "Glittering", "Roman", "Jaded", "Cultivated", "Darkened", "Rusty", "Water", "Corrosive", "Meadows", "Resilient", "Sweetened", "Abyssal", "Ocean", "Valiant", "Farmed", "Spatial", "Sugary", "Cyanite", "Viscous", "Embittered", "Imperial", "Shadowed", "Vengeful", "Robust", "Unstable", "Modest", "Farmerly", "Rural", "Majestic", "Secluded", "Ruby", "Blutonium", "Avenging", "Arid", "Marshy", "Primeval", "Noble", "Stained", "Desolate", "Ebony", "Ecstatic", "Fiendish", "Barren", "Radioactive", "Caustic", "Celebratory", "Gnawing", "Distilled", "Greek", "Infectious", "Unweary", "Resinous", "Growing", "Skeletal", "Edenic", "Quantum", "Galvanized", "Azure", "Glutinous", "Spectral", "Virulent", "Hermitic", "Furious", "Bleached", "Creepy", "Emerald", "Ripening", "Bovine", "Valuable", "Sticky", "Saffron", "Prussian", "Corroded", "Marble", "Sepia", "Industrious", "Fossilised", "Leaden", "Forest", "Rocky", "Invincible", "Sphalerite", "Lavender", "Frigid", "Glowering", "Indigo", "Sinister", "Wintry", "Abnormal", "Amber", "Sapphire", "Agrarian", "Miry", "Ender", "Ancient", "Hazardous", "Lapis", "Fermented", "Energetic", "Lustered", "Acidic", "Frugal", "Refined", "Austere", "River", "Diligent", "Thriving", "Demonic", "Fuchsia", "Mystical", "Turquoise", "Oily", "Steadfast", "Monastic", "Absolute", "Common", "Relic", "Blooming", "Natural", "Damp", "Volcanic", "Glacial", "Ashen", "Tarry", "Diamond", "Boggy", "Impregnable", "Fruity", "Vindictive", "Malicious", "Sodden", "Maroon"}
recipes = {"Majestic+Galvanized=Shining", "Industrious+Wintry=Icy", "Marshy+Resilient=Tarnished", "Steadfast+Valiant=Heroic", "Tropical+Tropical=Tropical", "Greek+Roman=Classical", "Distilled+Resinous=Elastic","Meadows+Desolate=Decaying",  "Diligent+Rocky=Tolerant", "Primeval+Ancient=Prehistoric",  "Spectral+Ender=Phantasmal", "Valiant+Cultivated=Excited","Austere+Tropical=Exotic",  "Marshy+Barren=Decomposing", "Unstable+Rusty=Nuclear", "Boggy+Miry=Fungal", "Ebony+Bleached=Slate", "Natural+Bleached=Lime", "Tropical+Rural=Caffeinated", "Majestic+Rusty=Glittering","Marble+Heroic=Roman","Ender+Relic=Jaded","Common+Forest=Cultivated","Shadowed+Rocky=Darkened",  "Meadows+Resilient=Rusty", "Water+Water=Water","Malicious+Viscous=Corrosive","Meadows+Meadows=Meadows",  "Industrious+Robust=Resilient", "Valiant+Diligent=Sweetened", "Shadowed+Darkened=Abyssal", "Diligent+Water=Ocean", "Valiant+Valiant=Valiant", "Farmerly+Meadows=Farmed", "Abnormal+Hermitic=Spatial", "Rural+Sweetened=Sugary", "Cyanite+Cyanite=Cyanite", "Exotic+Water=Viscous", "Embittered+Embittered=Embittered", "Noble+Majestic=Imperial", "Sinister+Rocky=Shadowed", "Demonic+Vindictive=Vengeful", "Unweary+Tolerant=Robust", "Prehistoric+Resilient=Unstable", "Modest+Modest=Modest", "Rural+Unweary=Farmerly", "Meadows+Diligent=Rural", "Noble+Cultivated=Majestic", "Monastic+Austere=Secluded", "Modest+Lapis=Ruby", "Blutonium+Blutonium=Blutonium", "Vengeful+Vindictive=Avenging", "Meadows+Frugal=Arid", "Marshy+Marshy=Marshy", "Secluded+Ancient=Primeval", "Common+Cultivated=Noble", "Ebony+Ocean=Stained", "Arid+Barren=Desolate", "Valiant+Rocky=Ebony", "Excited+Energetic=Ecstatic", "Sinister+Cultivated=Fiendish", "Common+Arid=Barren", "Nuclear+Glittering=Radioactive", "Fiendish+Corrosive=Caustic", "Austere+Excited=Celebratory", "Barren+Forest=Gnawing", "Industrious+Oily=Distilled", "Roman+Marble=Greek", "Tropical+Malicious=Infectious", "Diligent+Cultivated=Unweary", "Miry+Primeval=Resinous", "Forest+Diligent=Growing", "Forest+Desolate=Skeletal", "Exotic+Tropical=Edenic", "Spatial+Spectral=Quantum", "Wintry+Resilient=Galvanized", "Prussian+Bleached=Azure", "Exotic+Viscous=Glutinous", "Hermitic+Ender=Spectral", "Malicious+Infectious=Virulent", "Monastic+Secluded=Hermitic", "Fiendish+Embittered=Furious", "Wintry+Valiant=Bleached", "Modest+Desolate=Creepy", "Forest+Lapis=Emerald", "Sweetened+Growing=Ripening", "Farmerly+Water=Bovine","Glittering+Shining=Valuable","Viscous+Glutinous=Sticky",  "Meadows+Valiant=Saffron", "Valiant+Water=Prussian", "Wintry+Resilient=Corroded", "Marble+Marble=Marble", "Marshy+Valiant=Sepia", "Diligent+Unweary=Industrious", "Primeval+Growing=Fossilised", "Meadows+Resilient=Leaden", "Forest+Forest=Forest", "Rocky+Rocky=Rocky", "Resilient+Ender=Invincible", "Tarnished+Sinister=Sphalerite", "Maroon+Bleached=Lavender", "Wintry+Diligent=Frigid", "Furious+Excited=Glowering", "Maroon+Prussian=Indigo", "Cultivated+Modest=Sinister", "Wintry+Wintry=Wintry", "Secluded+Ender=Abnormal", "Maroon+Saffron=Amber", "Water+Lapis=Sapphire", "Farmerly+Industrious=Agrarian", "Marshy+Noble=Miry", "Ender+Ender=Ender", "Noble+Diligent=Ancient", "Austere+Desolate=Hazardous", "Water+Resilient=Lapis", "Farmerly+Meadows=Fermented", "Diligent+Excited=Energetic", "Forest+Resilient=Listered", "Corrosive+Caustic=Acidic", "Modest+Sinister=Frugal", "Distilled+Oily=Refined", "Modest+Frugal=Austere", "Diligent+Water=River", "Common+Cultivated=Diligent", "Unweary+Growing=Thriving", "Sinister+Fiendish=Demonic", "Indigo+Lavender=Fuchsia", "Noble+Monastic=Mystical", "Natural+Prussian=Turquoise", "Ocean+Primeval=Oily", "Steadfast+Steadfast=Steadfast", "Monastic+Monastic=Monastic", "Ocean+Frigid=Absolute", "Forest+Meadows=Common", "Imperial+Prehistoric=Relic", "Industrious+Thriving=Blooming", "Tropical+Valiant=Natural", "Miry+Water=Damp", "Demonic+Furious=Volcanic", "Icy+Wintry=Glacial", "Slate+Bleached=Ashen", "Distilled+Fossilised=Tarry", "Cultivated+Lapis=Diamond", "Marshy+Miry=Boggy", "Cultivated+Resilient=Impregnable", "Sweetened+Thriving=Fruity","Monastic+Demonic=Vindictive",  "Sinister+Tropical=Malicious", "Boggy+Damp=Sodden", "Forest+Valiant=Maroon"}
table.sort(recipes)

sleeper = 3
p = peripheral.wrap("front")
nameList = {}
print(items1) 
sleep(sleeper)

-------------Table Contains!------------
function table.contains(table, element)
  for _, value in pairs(table) do
    if value == element then
      return true
    end
  end
  return false
end
-------------------Gets Local Bees------------------------------
function names()
for i, item in pairs(p.getAvailableItems()) do
  -- item is a table with properties such as name, count, and metadata
  local value = item.getValue1()
  --print(item.help())
  --print(value)
  --print(value)
  for key, val in pairs(value) do
    -- key is the name of a property (e.g. "name", "count", "metadata")
    -- val is the value of that property
    a = value.getName()
    --print(a)
    --print(key .. ": " .. tostring(val))
  end
  --print(a)
  table.insert(nameList, a)
end
--print("list:")
--for i = 1, #nameList, 1 do
--print(nameList[i])
--end
print(nameList)
return(nameList)
end
storage = names()




--------------------Finds Common Between List & Storage-------------------------------
-- Create a copy of the list
storage = storage
storage1 = storage
items1 = items1 
-- Create an empty list to store the common items
common_items = {}

-- Loop through each item in the list
for i, item in ipairs(items1) do
  item = item .. " Princess"
  -- Loop through each item in the copy of the list
  for j, storageItem in ipairs(storage) do
    --print(storageItem)
    -- Check if the item is present in the copy of the list
    if item == storageItem then
      -- Add the item to the list of common items
      common_items[#common_items + 1] = items1[i]
      -- Remove the item from the copy of the list to avoid duplicates
      table.remove(storage, j)
      break
    end
  end
end




---------------Removes Common From Original List,
--Creating Needed Bees List ---------------------------------


-- Sort the list of common items
table.sort(common_items)
print(common_items)
for i = 1, #common_items, 1 do
print("Common: " .. common_items[i] .. " " .. i)
end
sleep(sleeper)

local needed = {}

for i, item in ipairs(items1) do
    local is_present = false
    for j, common_item in ipairs(common_items) do
        if item == common_item then
            is_present = true
            break
        end
    end
    
    if not is_present then
        needed[#needed + 1] = item
    end
end
table.sort(needed)

for i = 1, #needed, 1 do
    print("Needed: " .. needed[i] .. " " .. i)
end
sleep(sleeper)






----------Produces index of recipe needed to make
--Needed bee specified by product-----------

local product = needed[1]
-- Search for the product in the list of recipes
local index = 0

for i, recipe in ipairs(recipes) do
  local _, _, prod = string.find(recipe, "=(.+)")
  if prod == product then
    index = i
    break
  end
end

print("Index of recipe that produces " .. product .. ": " .. index)
print(recipes[index])
sleep(sleeper)  
--------------------------------------------------








--------------Finds Matches between Bees in storage &
-- Bees in recipes-----------------------------------
-- Define the list of bees in storage
bees = storage1

-- Define the list of recipes
recipes = recipes

-- Create a list to store the successful recipes
successful_recipes = {}

-- Iterate over the list of recipes
for _, recipe in ipairs(recipes) do
  -- Extract the required bees from the recipe
  local bee1, bee2 = string.match(recipe, "(.+)%+(.+)=")
  print("Bee 1 " .. bee1)
  print("Bee 2 " .. bee2)
  -- Check if both required bees are in the list of bees in storage
  local has_bee1 = false
  local has_bee2 = false
  for _, bee in ipairs(bees) do
    if bee == bee1 then
      has_bee1 = true
    end
    if bee == bee2 then
      has_bee2 = true
    end
  end
  if has_bee1 and has_bee2 then
    -- If both bees are in storage, add the recipe to the list of successful recipes
    table.insert(successful_recipes, recipe)
  end
end
print(successful_recipes[1])
-- Print the list of successful recipes
for _, recipe in ipairs(successful_recipes) do
  print(recipe)
end
--------------------------------------------------



-- Makes Tables
items1 = storage1
recipes = recipes

-- Viable Recipes
viable_recipes = {}

-- Check if recipe is possible with available bees
for i, recipe in ipairs(recipes) do
  local ingredients = {}
  for bee in string.gmatch(recipe, "[^+]+") do
    table.insert(ingredients, bee)
  end
  local result = ingredients[#ingredients]
  table.remove(ingredients, #ingredients)
  
  -- Check if all ingredients are in the available bees list
  local can_make = true
  for j, ingredient in ipairs(ingredients) do
    if not table.contains(items1, ingredient) then
      can_make = false
      break
    end
  end
  
  -- If all ingredients are available, add recipe to viable recipes list
  if can_make then
    table.insert(viable_recipes, recipe)
  end
end

-- Print viable recipes
for i, recipe in ipairs(viable_recipes) do
  print(recipe)
end




















