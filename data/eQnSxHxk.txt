#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>


using namespace std;

typedef long long ll;

const int SIZE = 100001;
const int INF = 1000000001;
int a[SIZE];
vector<int> t(SIZE * 4, -1);

/*vector<int> concat(vector<int>& a, vector<int>& b) {
	vector<int> res(a);
	res.insert(res.end(), b.begin(), b.end());
	return res;
}*/

void build(int v, int l, int r) {
	if (r - l == 1) {
		t[v] = (a[l] == 0);
		return;
	}

	int m = (r + l) / 2;
	build(v * 2 + 1, l, m);
	build(v * 2 + 2, m, r);
	
	t[v] = t[v * 2 + 1] + t[v * 2 + 2];
}

int askNulls(int v, int l, int r, int askl, int askr) {
	if (askr <= l || askl >= r) {
		return 0;
	}
	if (askl <= l && askr >= r) {
		return t[v];
	}

	int m = (l + r) / 2;
	int a = askNulls(v * 2 + 1, l, m, askl, askr);
	int b = askNulls(v * 2 + 2, m, r, askl, askr);
	return a + b;
}

int ask(int v, int l, int r, int K) {
	if (r - l == 1) {
		if(K - t[v])
		return -2;
		
		return l;
	}

	int m = (r + l) / 2;
	int left = v * 2 + 1;
	int right = v * 2 + 2;

	if (t[left] >= K) {
		return ask(left, l, m, K);
	}
	else {
		return ask(right, m, r, K - t[left]);
	}

}

void change(int v, int l, int r, int aski, int val) {

	if (aski < l || aski >= r) {
		return;
	}

	if (r - l == 1) {
		t[v] = (val == 0);
		return;
	}

	int m = (l + r) / 2;
	change(v * 2 + 1, l, m, aski, val);
	change(v * 2 + 2, m, r, aski, val);

	t[v] = t[v * 2 + 1] + t[v * 2 + 2];

}


int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	build(0, 0, n);
	int k;
	cin >> k;

	for (int i = 0; i < k; i++) {
		char tp;
		cin >> tp;
		if (tp == 'u') {
			int i, val;
			cin >> i >> val;
			change(0, 0, n, --i, val);
		}
		else {
			int l, r, k;
			cin >> l >> r >> k;
			int before = askNulls(0, 0, n, 0, --l);
			int res = ask(0, 0, n, before + k);
			res += 1;
			if (res > r) {
				res = -1;
			}
			cout << res;
			/*if (b.size() < k) {
				cout << -1;
			}
			else {
				cout << b[--k] + 1;
			}*/
			cout << ' ';
		}
	}
	/*build(0, 0, n);
	vector<int> b = ask(0, 0, n, 0, 5);
	change(0, 0, n, 3, 1);
	vector<int> a = ask(0, 0, n, 0, 5);*/
	//cout << 1;
}