//Splay tree implementation in C++
#include <bits/stdc++.h>
using namespace std;

class Node {
    public:
        int data;
        Node* parent;
        Node* left;
        Node* right;

    Node(int d) {
        data = d;
        parent=NULL;
        left=NULL;
        right=NULL;

    }



};

class SplayTree {
    public:
        Node* root=NULL;

        void LR(Node* x) {
            //Left rotate the node
            Node* y = x->right;
            y->parent = x->parent;
            if(x->parent->right==x) { x->parent->right=y;}
            if(x->parent->left==x) { x->parent->left = y; }
            x->right = y->left;
            if(y->left!=NULL) { y->left->parent=x; }
            y->left=x;
            x->parent=y;
        }
        
        void RR(Node* x) {
            Node* y = x->left;
            y->parent = x->parent;
            if(x->parent->right==x) { x->parent->right=y;}
            if(x->parent->left==x) { x->parent->left=y;}
            x->left = y->right;
            if(y->right!=NULL) { y->right->parent=x; }
            y->right = x;
            x->parent = y;

        }
        void Splay(Node* node) {
            while(node->parent!=NULL) {

            
                if(node->parent==root) {
                    if(node->parent->right==root) {
                        //Perform left rotation on root
                        LR(root);

                    } else if(node->parent->left==root) {
                        //Perform right rotation on root
                        RR(root);
                    }
                } else {
                    //At least at height = 2
                    if(node->parent->right == node && node->parent->parent->right ==node->parent) {
                        //Perform left rotation on node's parent parent first then on node-sp parent
                        LR(node->parent->parent);
                        LR(node->parent);
                    }
                    if(node->parent->left==node && node->parent->parent->left==node->parent) {
                        //perform right rotation on node's grandparent then note's parent
                        RR(node->parent->parent);
                        RR(node->parent);

                    }

                    if(node->parent->left ==node && node->parent->parent->right == node->parent) {
                        //perform right rotation on node's parent followed by left rotation on node's grandparent
                        RR(node->parent);
                        LR(node->parent->parent);
                    }
                
                    if(node->parent->right==node && node->parent->parent->left==node->parent) {
                        //left rotation on node's parent followed by right rotation on node's grandparent
                        LR(node->parent);
                        RR(node->parent->parent);
                    }
                }
            }
        }

        void Insert(int value) {
            Node* temp = root;
            Node* temp_parent = NULL;
              
            while(temp!=NULL) {
                temp_parent = temp;
                
                int data = temp->data;
                if((data)<value) {temp = temp->right; }
                if((data)>value) { temp = temp->left; }
               
            }
          
            if(temp_parent==NULL) { root = new Node(value); return; }
            
            if(temp_parent!=NULL) {
                Node *x = new Node(value);
                int data = temp_parent->data;
                if(value<data) { temp_parent->left=x; x->parent=temp_parent; }
                if(value>data) { temp_parent->right=x; x->parent=temp_parent; }
                Splay(x);
            }
        }
        
};


int main() {
    SplayTree tree;
    tree.Insert(1);
    tree.Insert(2);
    cout<<tree.root->data;
}

