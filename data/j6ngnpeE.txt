#include<bits/stdc++.h>
using namespace std;
#define int long long
const int M=1e9+7;
// median calculation
multiset<int> Left;
multiset<int> Right;
// priority_queue<int> Left; // max heap
// priority_queue<int, vector<int>, greater<int> > Right; // min heap
// mode calculation
map<int, int> freq; // frequency of elements
set<pair<int, int> > freq_int; // (freq,int) pair to find mode
// mean calculation
int number_of_elements;
int sum;
void Insert(int x) {
    number_of_elements++;
    sum+=x;
    int Left_median=*(Left.rbegin());
    int Right_median=*(Right.begin());
    if(x<=Left_median) Left.insert(x);
    else Right.insert(x);
    while(Left.size()>Right.size()+1) {
        Right.insert(*(Left.rbegin()));
        Left.erase(prev(Left.end()));
    }
    while(Right.size()>Left.size()) {
        Left.insert(*(Right.begin()));
        Right.erase(Right.begin());
    }
    // int Left_median=Left.top();
    // int Right_median=Right.top();
    // if(x<=Left_median) {
    //     Left.push(x);
    // } else {
    //     Right.push(x);
    // }
    // if(Right.size()>Left.size()) {
    //     while(Right.size()>Left.size()) {
    //         int Right_top=Right.top();
    //         Right.pop();
    //         Left.push(Right_top);
    //     }
    // } else if(Left.size()>Right.size()+1) {
    //     while(Left.size()>Right.size()+1) {
    //         int Left_top=Left.top();
    //         Left.pop();
    //         Right.push(Left_top);
    //     }
    // }
    if(freq[x]) freq_int.erase(make_pair(freq[x],-1*x));
    freq[x]++;
    freq_int.insert(make_pair(freq[x],-1*x));
}
void Remove(int x) {
    number_of_elements--;
    sum-=x;
    if(Left.find(x) != Left.end()) {
        Left.erase(Left.find(x));
        while(Right.size()>Left.size()) {
            Left.insert(*(Right.begin()));
            Right.erase(Right.begin());
        }
    } else if(Right.find(x) != Right.end()) {
        Right.erase(Right.find(x));
        while(Left.size()>Right.size()+1) {
            Right.insert(*(Left.rbegin()));
            Left.erase(prev(Left.end()));
        }
    }
    freq_int.erase(make_pair(freq[x],-1*x));
    freq[x]--;
    if(freq[x]) freq_int.insert(make_pair(freq[x],-1*x));
}
int powerMod(int x, int y, int M) {
    if(y==0) return 1ll;
    int ans=powerMod(x,y/2,M);
    if(y%2) return (((ans*x)%M)*ans)%M;
    return (ans*ans)%M;
}
int inverseMod(int x, int M) {
    return powerMod(x,M-2,M);
}
int getMean() {
    if(!number_of_elements) return -1;
    int g=__gcd(sum, number_of_elements);
    int inv=inverseMod(number_of_elements/g,M);
    return ((sum/g)*inv)%M;
}
int getMedian() {
    if(!number_of_elements) return -1;
    if(number_of_elements%2==0) {
        int Left_median=*(Left.rbegin());
        int Right_median=*(Right.begin());
        int sum_of_medians=Left_median+Right_median;
        if(sum_of_medians%2==0) return (sum_of_medians/2)%M;
        else return (sum_of_medians*inverseMod(2ll,M))%M;
    } else {
        return *(Left.rbegin());
    }
}
int getMode() {
    if(!number_of_elements) return -1;
    auto max_freq_pair=*(freq_int.rbegin());
    return -1*max_freq_pair.second;
}
signed main() {
    int t;
    cin>>t;
    while(t--){
        number_of_elements=0;
        sum=0;
        int q;
        cin>>q;
        while(q--){
            string s;
            cin>>s;
            if(s=="insert"||s=="remove") {
                int x;
                cin>>x;
                if(s=="insert") Insert(x);
                else Remove(x);
            } else {
                if(s=="getMean") cout<<getMean()<<'\n';
                else if(s=="getMedian") cout<<getMedian()<<'\n';
                else cout<<getMode()<<'\n';
            }
        }
    }
}