from collections import deque
from datetime import datetime
t1 = datetime.now()
directions = {
    '>' : (0,1),
    '<' : (0,-1),
    '^' : (-1,0),
    'v' : (1,0)
}

dimensions = None

class Blizzard:
    def __init__(self,x,y,direction=None) -> None:
        self.x = x
        self.y = y
        self.direction = direction
        self.positions = None

    def generate_positions(self):
        positions = []
        x,y = directions[self.direction]
        for i in range(dimensions[0]*dimensions[1]):
            xx,yy = (self.x + i*x) % dimensions[0], (self.y + i*y) % dimensions[1]
            positions.append((xx,yy))

        self.positions = positions

with open('input2.txt', 'r') as f:
    rows = list(map(lambda x: x.strip(), f.readlines()))
    matrix = []
    for row in rows:
        row = list(row.strip('#'))
        if len(row) > 1:
            matrix.append(row)
    dimensions = len(matrix), len(matrix[0])
    blizzards = []
    for i in range(dimensions[0]):
        for j in range(dimensions[1]):
            if matrix[i][j] != '.':
                blizzard = Blizzard(i,j,matrix[i][j])
                blizzard.generate_positions()
                blizzards.append(blizzard)

    steps = 0
    queue = deque([((-1,0), steps)])
    visited = set()
    while queue:
        (x,y), step = item = queue.popleft()
        if item in visited:
            continue
        visited.add(item)
        if (x,y) == (dimensions[0], dimensions[1]-1):
            print('steps1: ',step)
            steps = step
            break
        print(step)
        neighbors = {(x,y)}
        if x+1 < dimensions[0]:
            neighbors.add((x+1,y))
        if 0 <= x-1:
            neighbors.add((x-1,y))
        if y+1 < dimensions[1] and x >=0:
            neighbors.add((x,y+1))
        if 0 <= y-1:
            neighbors.add((x,y-1))
        if (x,y) == (dimensions[0]-1, dimensions[1]-1):
            neighbors.add((x+1,y))

        ss = []
        for blizzard in blizzards:
            ss.append(blizzard.positions[(step+1)%(dimensions[0]*dimensions[1])])
        for neighbor in neighbors:
            if neighbor not in ss:
                queue.append((neighbor, step+1))

    queue = deque([((dimensions[0], dimensions[1]-1), steps)])
    visited = set()
    while queue:
        (x,y), step = item = queue.popleft()
        if item in visited:
            continue
        visited.add(item)
        if (x,y) == (-1,0):
            print('steps2: ',step)
            steps = step
            break
        print(step)
        neighbors = {(x,y)}
        if x+1 < dimensions[0]:
            neighbors.add((x+1,y))
        if 0 <= x-1:
            neighbors.add((x-1,y))
        if y+1 < dimensions[1] and x >=0 and x < dimensions[0]:
            neighbors.add((x,y+1))
        if 0 <= y-1 and x >=0 and x < dimensions[0]:
            neighbors.add((x,y-1))
        if (x,y) == (0,0):
            neighbors.add((x-1,y))

        ss = []
        for blizzard in blizzards:
            ss.append(blizzard.positions[(step+1)%(dimensions[0]*dimensions[1])])
        for neighbor in neighbors:
            if neighbor not in ss:
                queue.append((neighbor, step+1))

    queue = deque([((-1,0), steps)])
    visited = set()
    while queue:
        (x,y), step = item = queue.popleft()
        if item in visited:
            continue
        visited.add(item)
        if (x,y) == (dimensions[0], dimensions[1]-1):
            print('steps3: ',step)
            steps = step
            break
        print(step)
        neighbors = {(x,y)}
        if x+1 < dimensions[0]:
            neighbors.add((x+1,y))
        if 0 <= x-1:
            neighbors.add((x-1,y))
        if y+1 < dimensions[1] and x >=0:
            neighbors.add((x,y+1))
        if 0 <= y-1:
            neighbors.add((x,y-1))
        if (x,y) == (dimensions[0]-1, dimensions[1]-1):
            neighbors.add((x+1,y))

        ss = []
        for blizzard in blizzards:
            ss.append(blizzard.positions[(step+1)%(dimensions[0]*dimensions[1])])
        for neighbor in neighbors:
            if neighbor not in ss:
                queue.append((neighbor, step+1))


t2 = datetime.now()
print(t2-t1)