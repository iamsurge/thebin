Топологическая сортировка - вывести вершины графа в таком порядке, чтобы все ребра шли слева-направо. Такую можно сделать, если в граф ориентированный и без циклов!
Определим понятие "стока" - это вершина, из которой не выходит ни одного ребра. Такая гарантированно будет, ведь иначе из каждой вершины в графе нам будет куда идти -> цикл.
Так вот, найдем сток в графе, добавим в конец результирующего массива и удалим из графа. Повторив операцию N раз (кол-во вершин), мы обработаем все вершины. 
Если делать это наивно, то О(n ** 2), но можно применить поиск в глубину (DFS). 
Будем обходить граф, добавляя в результирующий массив вершину только перед выходом из неё. Обойдем таким поиском в глубину все вершины графа в цикле в основном коде.

used: 0 - еще не посещено, 1 - вошли в вершину, 2 - вышли, обработали вершину
В функции ниже мы также проверяем граф на наличие циклов и, если таковой находится, останавливаем сортировку.

vector<vector<int>> g;
vector<int> used;
vector<int> result;

void dfs(int v) {
    used[v] = 1;
    for (auto u : g[v]) {
        if (used[u] == 1) {
            cout << "No" << '\n';
            exit(0);
        }
        
        if (used[u] == 0) dfs(u);
    }
    used[v] = 2;
    result.push_back(v);
}

for (int i = 0; i < n; i++) {
    if (used[i] == 0) {
        dfs(i);
    }
}