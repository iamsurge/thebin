#include <iostream>
#include <istream>
#include <vector>
using namespace std;

using ll = long long;
#define all(x) x.begin(), x.end()

const int MOD = 1e9 + 7;

void solve() {
  string fake_string;
  cin >> fake_string;
  string s;
  auto normalize = [](string s) {
    string result = "";
    int n = s.size();
    for (int i = 0; i < s.size(); ++i) {
      result += s[i];
      if (i + 1 == n) {
        return result;
      }
      result += '$';
    }
    return result;
  };
  s = normalize(fake_string);
  const int prime = 101;
  vector<int> prime_powers(s.size());
  auto get_hashes = [&prime_powers, prime](string s) {
    vector<int> ans(s.size() + 1, int(0));
    prime_powers[0] = 1;
    for (int i = 1; i <= s.size(); ++i) {
      prime_powers[i] = ((ll)prime_powers[i - 1] * prime) % MOD;
      ans[i] =
          ((ans[i - 1] + (ll)prime_powers[i - 1] * (s[i - 1] - 'a' + 1)) % MOD +
           MOD) %
          MOD;
    }
    return ans;
  };

  auto get_ans_fast = [&get_hashes, &prime_powers](string s) {
    vector<int> pref_hashes = get_hashes(s);
    reverse(all(s));
    auto rev_pref_hashes = get_hashes(s);
    reverse(all(s));
    auto equals = [&pref_hashes, &rev_pref_hashes, &prime_powers, &s](int l1, int r1, int l2, int r2) {
      l1++; r1++; l2++; r2++;
      int n = pref_hashes.size() - 1;
      int l = l1, r = r1, rev_l = n + 1 - r2, rev_r = n + 1 - l2;
      int normal_res = ((ll)((((pref_hashes[r] - pref_hashes[l - 1]) % MOD) + MOD) % MOD) * prime_powers[n - l]) % MOD;
      int rev_res = ((ll)((((rev_pref_hashes[rev_r] - rev_pref_hashes[rev_l - 1]) % MOD) + MOD) % MOD) * prime_powers[n - rev_l]) % MOD;
      return normal_res == rev_res;
    };

    auto count_ans = [&s, &equals](int i) {
      int ans = 0;
      auto findfirst = [&s, &equals](int i, int least_diff) {
        if (i - least_diff < 0 || i + least_diff >= s.size())
          return least_diff;
        if (s[i - least_diff] != s[i + least_diff])
          return least_diff;
        int l = least_diff, r = min(i + 1, (int)s.size() - i);
        while (r - l > 1) {
          int m = l + (r - l) / 2;
          if (equals(i - m, i - least_diff, i + least_diff, i + m)) {
            l = m;
          } else {
            r = m;
          }
        }
        return r;
      };
      int first_diff = findfirst(i, 0);
      if (i - first_diff < 0 || i + first_diff >= s.size())
        return 0;
      int second_diff = findfirst(i, first_diff + 1);
      ans = (second_diff - first_diff + 1) / 2;
      return ans;
    };
    ll ans = 0;
    for (int i = 0; i < s.size(); ++i) {
      ans += count_ans(i);
    }

    return ans;
  };
  ll ans = get_ans_fast(s);
  cout << ans << '\n';
}

signed main() {
  ios_base::sync_with_stdio(false); cin.tie(0);
  solve();
}
