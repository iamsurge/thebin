#include <iostream>
#include <vector>
#include <bitset>
#include <algorithm>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cmath>
#include <iomanip>
#include <random>
#include <assert.h>
#include <deque>

using namespace std;

typedef long long ll;
typedef long double ld;

const ll INF = 5 * 1e14;

const int MAXN = 3e5 + 10;

int n, m;
int color[MAXN];
vector<pair<int, ll>> graph[MAXN];

vector<int> cows, tourists;
vector<ll> dist;

void count_dist(const vector<int> &starts)
{
    dist.resize(n, INF);

    set<pair<ll, int>> q;
    for (auto st : starts)
    {
        dist[st] = 0;
        q.insert({dist[st], st});
    }

    while (!q.empty())
    {
        ll d = q.begin()->first;
        int v = q.begin()->second;

        q.erase(q.begin());

        for (auto to : graph[v])
        {
            int u = to.first;
            ll w = to.second;

            if (d + w < dist[u])
            {
                q.erase({dist[u], u});
                dist[u] = d + w;
                q.insert({dist[u], u});
            }
        }
    }
}

void build_walls(ll bound, vector<int> &walls)
{
    deque<int> q;
    vector<char> used(n);

    for (auto cow : cows)
        q.push_back(cow);

    while (!q.empty())
    {
        int v = q.front();
        q.pop_front();

        if (used[v])
            continue;
        used[v] = true;

        if (color[v] == 0 && dist[v] <= bound)
        {
            walls.push_back(v);
            color[v] = 4;
            continue;
        }

        for (auto to : graph[v])
        {
            int u = to.first;
            if (used[u])
                continue;

            q.push_back(u);
        }
    }
}

vector<char> dfs_used;
int count_tourists(int v)
{
    if (color[v] == -1)
        return 1;
    if (color[v] == 4)
        return 0;

    dfs_used[v] = true;

    int result = (color[v] == 1);
    for (auto e : graph[v])
    {
        if (dfs_used[e.first])
            continue;

        int child_result = count_tourists(e.first);
        if (child_result == -1)
            return -1;
        else
            result += child_result;
    }

    return result;
}

int main()
{
#ifdef HOME_DIDUK001
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
#endif

    cout << fixed << setprecision(12);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    cin >> n >> m;
    for (int i = 0; i < n; i++)
    {
        cin >> color[i];
        switch (color[i])
        {
        case -1:
            cows.push_back(i);
            break;
        case 1:
            tourists.push_back(i);
            break;
        }
    }

    bool lost = false;
    for (int i = 0; i < m; i++)
    {
        int ai, bi;
        ll li;
        cin >> ai >> bi >> li;

        ai--;
        bi--;

        graph[ai].push_back({bi, li});
        graph[bi].push_back({ai, li});

        int ca = color[ai],
            cb = color[bi];

        if (ca + cb == 0 && ca != 0)
            lost = true;
    }

    if (lost)
    {
        cout << -1 << '\n';
        return 0;
    }

    count_dist(tourists);

    ll left = 0, right = INF;
    while (right - left > 1)
    {
        ll mid = left + (right - left) / 2;

        vector<int> walls;
        build_walls(mid, walls);

        dfs_used = vector<char>(n);
        int tourists_cnt = count_tourists(tourists[0]);

        if (tourists_cnt == tourists.size())
            right = mid;
        else
            left = mid;

        for (auto e : walls)
            color[e] = 0;
    }

    vector<int> ans;
    build_walls(right, ans);

    dfs_used = vector<char>(n);
    int tourists_cnt = count_tourists(tourists[0]);
    if (tourists_cnt != tourists.size())
        lost = true;

    if (lost)
    {
        cout << -1 << '\n';
        return 0;
    }

    cout << ans.size() << '\n';
    for (auto e : ans)
        cout << e + 1 << ' ';
}