class Hyperexp():
    def __init__(self, alpha=0.5, lambda1=1.0, lambda2=1.0):
        self.alpha = alpha
        self.lambda1 = lambda1
        self.lambda2 = lambda2

    def rvs(self, size=1):
        vsample = np.vectorize(self._single_sample)
        return np.fromfunction(vsample, (size,))

    def pdf(self, x):
        a = self.alpha*self.lambda1*np.exp(self.lambda1*-x)
        b = (1-self.alpha)*self.lambda2*np.exp(self.lambda2*-x)
        return a + b

    def _single_sample(self, size):
        U1 = np.random.random()
        if U1 <= self.alpha:
            scale = self.lambda1
        else:
            scale = self.lambda2
        U2 = np.random.random()
        return -np.log(U2)/scale

    def mean(self):
        return self.alpha * (1/self.lambda1 + 1/self.lambda2)

    def var(self):
        a = 2 * self.alpha * (1/np.power(self.lambda1, 2) + 1/np.power(self.lambda2, 2))
        b = np.power(self.mean(), 2)
        return a - b

    def std(self):
        var = self.var()
        return np.sqrt(var)