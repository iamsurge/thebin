#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define MAX_LEN 8
#define ROCK 1
#define PAPER 2
#define SCISSORS 3
#define WIN 6
#define DRAW 3
#define LOSE 0
#define I_ROCK 0
#define I_PAPER 1
#define I_SCISSORS 2
#define I_WIN 0
#define I_DRAW 1
#define I_LOSE 2

int main(int argc, char **argv) {
	FILE* fp;
	char buffer[MAX_LEN];
	int matches = 0;
	int yourShapesA[3];
	int yourShapesB[3];
	int theirShapes[3];
	int resultsA[3];
	int resultsB[3];
	int partOne = 0;
	int partTwo = 0;
	int i;

	for (i = 0; i < 3; i++) {
		yourShapesA[i] = 0;
		yourShapesB[i] = 0;
		theirShapes[i] = 0;
		resultsA[i] = 0;
		resultsB[i] = 0;
	}

	printf("\n ADVENT OF CODE 2022 / DAY 02\n u/JohnGabrielUK\n\n");

	if (argc != 2) {
		printf("Usage: day2.exe [input file]\n");
		return 1;
	}

	fp = fopen(argv[1], "r");
	if (fp == NULL) {
		perror("Failed to open file: ");
		return 1;
	}

	while (fgets(buffer, MAX_LEN, fp)) {
		buffer[strcspn(buffer, "\n")] = 0;
		matches += 1;

		if (buffer[0] == 'A' && buffer[2] == 'X') {
			partOne += DRAW + ROCK;
			partTwo += LOSE + SCISSORS;
			theirShapes[I_ROCK] += 1;
			yourShapesA[I_ROCK] += 1;
			yourShapesB[I_SCISSORS] += 1;
			resultsA[I_DRAW] += 1;
			resultsB[I_LOSE] += 1;
		}
		else if (buffer[0] == 'A' && buffer[2] == 'Y') {
			partOne += WIN + PAPER;
			partTwo += DRAW + ROCK;
			theirShapes[I_ROCK] += 1;
			yourShapesA[I_PAPER] += 1;
			yourShapesB[I_ROCK] += 1;
			resultsA[I_WIN] += 1;
			resultsB[I_DRAW] += 1;
		}
		else if (buffer[0] == 'A' && buffer[2] == 'Z') {
			partOne += LOSE + SCISSORS;
			partTwo += WIN + PAPER;
			theirShapes[I_ROCK] += 1;
			yourShapesA[I_SCISSORS] += 1;
			yourShapesB[I_PAPER] += 1;
			resultsA[I_LOSE] += 1;
			resultsB[I_WIN] += 1;
		}
		else if (buffer[0] == 'B' && buffer[2] == 'X') {
			partOne += LOSE + ROCK;
			partTwo += LOSE + ROCK;
			theirShapes[I_PAPER] += 1;
			yourShapesA[I_ROCK] += 1;
			yourShapesB[I_ROCK] += 1;
			resultsA[I_LOSE] += 1;
			resultsB[I_LOSE] += 1;
		}
		else if (buffer[0] == 'B' && buffer[2] == 'Y') {
			partOne += DRAW + PAPER;
			partTwo += DRAW + PAPER;
			theirShapes[I_PAPER] += 1;
			yourShapesA[I_PAPER] += 1;
			yourShapesB[I_PAPER] += 1;
			resultsA[I_DRAW] += 1;
			resultsB[I_DRAW] += 1;
		}
		else if (buffer[0] == 'B' && buffer[2] == 'Z') {
			partOne += WIN + SCISSORS;
			partTwo += WIN + SCISSORS;
			theirShapes[I_PAPER] += 1;
			yourShapesA[I_SCISSORS] += 1;
			yourShapesB[I_SCISSORS] += 1;
			resultsA[I_WIN] += 1;
			resultsB[I_WIN] += 1;
		}
		else if (buffer[0] == 'C' && buffer[2] == 'X') {
			partOne += WIN + ROCK;
			partTwo += LOSE + PAPER;
			theirShapes[I_SCISSORS] += 1;
			yourShapesA[I_ROCK] += 1;
			yourShapesB[I_PAPER] += 1;
			resultsA[I_WIN] += 1;
			resultsB[I_LOSE] += 1;
		}
		else if (buffer[0] == 'C' && buffer[2] == 'Y') {
			partOne += LOSE + PAPER;
			partTwo += DRAW + SCISSORS;
			theirShapes[I_SCISSORS] += 1;
			yourShapesA[I_PAPER] += 1;
			yourShapesB[I_SCISSORS] += 1;
			resultsA[I_LOSE] += 1;
			resultsB[I_DRAW] += 1;
		}
		else if (buffer[0] == 'C' && buffer[2] == 'Z') {
			partOne += DRAW + SCISSORS;
			partTwo += WIN + ROCK;
			theirShapes[I_SCISSORS] += 1;
			yourShapesA[I_SCISSORS] += 1;
			yourShapesB[I_ROCK] += 1;
			resultsA[I_DRAW] += 1;
			resultsB[I_WIN] += 1;
		}
	}

	fclose(fp);

	printf("Processed %d matches.\n\n", matches);

	printf("\t\tWON\tDRAWN\tLOST\n");
	printf("Part one\t%d\t%d\t%d\n", resultsA[I_WIN], resultsA[I_DRAW], resultsA[I_LOSE]);
	printf("Part two\t%d\t%d\t%d\n\n", resultsB[I_WIN], resultsB[I_DRAW], resultsB[I_LOSE]);

	printf("\t\tROCK\tPAPER\tSCISSORS\n");
	printf("Opponent\t%d\t%d\t%d\n", theirShapes[I_ROCK], theirShapes[I_PAPER], theirShapes[I_SCISSORS]);
	printf("You (p1)\t%d\t%d\t%d\n", yourShapesA[I_ROCK], yourShapesA[I_PAPER], yourShapesA[I_SCISSORS]);
	printf("You (p2)\t%d\t%d\t%d\n\n", yourShapesB[I_ROCK], yourShapesB[I_PAPER], yourShapesB[I_SCISSORS]);

	printf("Part one: %d\n", partOne);
	printf("Part two: %d\n", partTwo);
}
