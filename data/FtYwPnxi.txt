import os
from enum import Enum
import time

def cls():
    os.system('cls' if os.name=='nt' else 'clear')

class Field:
    def __init__(self, n):
        self.player_x = (int)((n - 3) / 2 + 3)
        self.player_y = 1
        self.endpoint_x = (int)(n / 2)
        self.endpoint_y = (int)(n / 2)
        self.player_buffer_letter = "*"

        self._initializeFieldStructure(n)
        self._initializeHorizontalAxis(n)
        self._initializeVerticalAxis(n)
        self._initalizePath(n)
        self._initializeCenterLines(n)
        self._initalizeEndPoint(self.endpoint_x, self.endpoint_y)
        self._initializePlayer(self.player_x, self.player_y)
        
        
    def _initializeFieldStructure(self, n):
        if (n % 2 != 0):
            raise Exception("n can't be even!")
        self.field = ['*'] * n
        for i in range(n): 
            self.field[i] = [" "] * n 
    
    def _initializeHorizontalAxis(self, n):
        for i in range(1, n):
            self.field[0][i] = (i - 1) % 10

    def _initializeVerticalAxis(self, n):
        for i in range(1, n):
            self.field[i][0] = (i - 1) % 10

    def _initalizeEndPoint(self, x, y):
        self.field[y][x] = "X"

    def _initializePlayer(self, x, y):
        self.field[y][x] = "A"

    def _initalizePath(self, n):
        for i in range(1, n):
            for j in range(3):
                self.field[i][(int)((n - 4) / 2) + j + 1] = "*"
                self.field[(int)((n - 4) / 2) + j + 1][i] = "*"

    def _initializeCenterLines(self, n):
        for i in range(2, n - 1):
            for j in range(2, n - 1):
                self.field[i][(int)(n / 2)] = "D"
                self.field[(int)(n / 2)][i] = "D"



class Application:

    class MoveDirections(Enum):
        TOP = 1,
        RIGHT = 2,
        DOWN = 3,
        LEFT = 4

    def __init__(self, n):
        self.n = n
        self.field = Field(n)
        self.movePlan = [self.MoveDirections.DOWN, self.MoveDirections.RIGHT,
                         self.MoveDirections.DOWN, self.MoveDirections.LEFT, 
                         self.MoveDirections.DOWN, self.MoveDirections.LEFT,
                         self.MoveDirections.TOP, self.MoveDirections.LEFT,
                         self.MoveDirections.TOP, self.MoveDirections.RIGHT,
                         self.MoveDirections.TOP]
    
        self.defaultLongPartLength = (n - 2) / 2
        self.defaultShortPartLength = 3
        self.currentPartLength = 0
        self.currentMovePlanIndex = 0
        self.partsCounter = 0
        self.isLongPart = True
        self.endMovedRight = False
        self.appEnd = False

    def start(self, n):
        pass
    
    def printField(self):
        cls()
        for i in range(self.n):
            for j in range(self.n):
                print(self.field.field[i][j], end=" ")
            print()

    def move(self, l):
        for i in range(l):
            if (self.currentMovePlanIndex == len(self.movePlan)):
                if (self.endMovedRight == False):
                    self._move(self.MoveDirections.RIGHT)
                    self.endMovedRight = True
                else:
                    if (self.appEnd != True):
                        self._move(self.MoveDirections.DOWN)
            else:
                self._move(self.movePlan[self.currentMovePlanIndex])

    def _move(self, direction):
        if (direction == self.MoveDirections.DOWN):
            self.field.field[self.field.player_y][self.field.player_x] = self.field.player_buffer_letter
            self.field.player_buffer_letter = self.field.field[self.field.player_y + 1][self.field.player_x]
            self.field.field[self.field.player_y + 1][self.field.player_x] = "A"
            self.field.player_y += 1
        elif (direction == self.MoveDirections.RIGHT):
            self.field.field[self.field.player_y][self.field.player_x] = self.field.player_buffer_letter
            self.field.player_buffer_letter = self.field.field[self.field.player_y][self.field.player_x + 1]
            self.field.field[self.field.player_y][self.field.player_x + 1] = "A"
            self.field.player_x += 1

        elif (direction == self.MoveDirections.LEFT):
            self.field.field[self.field.player_y][self.field.player_x] = self.field.player_buffer_letter
            self.field.player_buffer_letter = self.field.field[self.field.player_y][self.field.player_x - 1]
            self.field.field[self.field.player_y][self.field.player_x - 1] = "A"
            self.field.player_x -= 1

        elif (direction == self.MoveDirections.TOP):
            self.field.field[self.field.player_y][self.field.player_x] = self.field.player_buffer_letter
            self.field.player_buffer_letter = self.field.field[self.field.player_y - 1][self.field.player_x]
            self.field.field[self.field.player_y - 1][self.field.player_x] = "A"
            self.field.player_y -= 1

        if (self.field.player_x == self.field.endpoint_x and self.field.player_y == self.field.endpoint_y):
            self.appEnd = True
            return

        if (self.currentMovePlanIndex != len(self.movePlan)):
            self.currentPartLength += 1
            if (self.isLongPart == True):
                if (self.currentPartLength == self.defaultLongPartLength - 1):
                    self.partsCounter += 1
                    self.currentMovePlanIndex += 1
                    self.currentPartLength = 0
                    
                    if (self.partsCounter == 2):
                        self.isLongPart = False
                        self.partsCounter = 0
            else:
                if (self.currentPartLength == self.defaultShortPartLength - 1):
                    self.currentMovePlanIndex += 1
                    self.currentPartLength = 0
                    self.isLongPart = True


n = (int)(input()) + 1

entry_point = Application(n)
entry_point.printField()
while (entry_point.appEnd == False):
    m = (int)(input())
    for i in range(m):
        entry_point.move(1)
        time.sleep(0.1)
        entry_point.printField()

cls()
print("WIN")