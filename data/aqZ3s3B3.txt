#include <iostream>
#include <vector>
#include <set>
#include <cstring>
#include <queue>
#include <algorithm>
using namespace std;
const int maxn = 1e5 + 10;
vector<pair<int, int> > graph[maxn];
struct node {
    int idx, cost;
    node () {}
    node(int _idx, int _cost) {
        idx = _idx;
        cost = _cost;
    }
    bool operator < (const node &t) const {
        return cost > t.cost;
    }
};
int main() {
  
    int n, m;
    cin >> n >> m;
    for(int i = 0; i < m; i++) {
        int a, b, c;
        cin >> a >> b >> c;
        a--;
        b--;
        graph[a].push_back(make_pair(b, c));
        graph[b].push_back(make_pair(a, c));
    }
    
    vector<bool> visited(n + 1, false);
    vector<int> dist(n + 1, 2e9);
    dist[0] = 0;
    priority_queue<node> pq;
    pq.push(node(0, 0));
    int MST = 0;
    
    while(!pq.empty()) {
        node c = pq.top();
        pq.pop();
        if(visited[c.idx]) continue;
        visited[c.idx] = true;
        MST += c.cost;
        
        for(int i = 0; i < (int) graph[c.idx].size(); i++) {
            int neighbour = graph[c.idx][i].first;
            int weight = graph[c.idx][i].second;
            if(!visited[neighbour] and weight < dist[neighbour]) {
                dist[neighbour] = weight;
                pq.push(node(neighbour, weight));
            }
        }
        
    }
    cout << MST << endl;
    
    
    return 0;
}
