#include <iostream>
#include <fstream>
#include <vector>

using namespace std;

ofstream fout ("out.txt");
ifstream fin ("in.txt");

struct Node {
    int value = 0;
    int amountOfChildren = 0;
    int amountOfCHInLeft = 0;
    int amountOfCHInRight = 0;
    
    Node *left = nullptr;
    Node *right = nullptr;
    

    Node(int value) {
        this->value = value;
    }
    
    Node() {}
};



void addInTree(int value, Node *node){
    if (value == node->value) {
        return;
    }
    
    if (value < node->value) {
        if (node->left == nullptr) {
            node->left = new Node(value);
            
        } else {
            addInTree(value, node->left);
        }
    } else {
        if (node->right == nullptr) {
            node->right = new Node(value);
            
        } else {
            addInTree(value, node->right);
            
        }
    }
    
}

vector<int> nodesWithDifferences;
void setChildrenInfo(Node *node) {
    if (node == nullptr) {
        return;
    }
    setChildrenInfo(node->left);

    if (node->left == nullptr && node->right == nullptr) {
        node->amountOfChildren = 0;
    } else if (node->left == nullptr && node->right) {
        node->amountOfChildren = node->right->amountOfChildren + 1;
        node->amountOfCHInRight = node->right->amountOfChildren + 1;
    } else if (node->right == nullptr && node->left) {
        node->amountOfChildren = node->left->amountOfChildren + 1;
        node->amountOfCHInLeft = node->left->amountOfChildren + 1;
    } else if (node->right && node->left) {
        node->amountOfChildren = node->left->amountOfChildren + node->right->amountOfChildren + 2;
        node->amountOfCHInLeft = node->left->amountOfChildren + 1;
        node->amountOfCHInRight = node->right->amountOfChildren + 1;
    }

    if (node->amountOfCHInLeft != node->amountOfCHInRight) {
        nodesWithDifferences.push_back(node->value);
    }
    setChildrenInfo(node->right);
}


void printTree (Node * node){
//inorder traversal
    if (node == nullptr) return;
    fout << node->value << endl;
    printTree(node->left);
    printTree(node->right);
}

Node* deleteNode(Node* node, int value) {
    if (node == nullptr) {
        return node;
    }
    if (value > node->value) {
        node->right = deleteNode(node->right, value);
    } else if (value < node->value) {
        node->left = deleteNode(node->left, value);
    } else {
        if (node->left == nullptr || node->right == nullptr) {
            Node* temp = (node->left == nullptr) ? node->right : node->left;
            if (temp == nullptr) {
                temp = node;
                node = nullptr;
            } else {
                *node = *temp;
            }
            delete temp;
        } else {
            Node* temp = node->right;
            while (temp->left != nullptr) {
                temp = temp->left;
            }
            node->value = temp->value;
            node->right = deleteNode(node->right, node->value);
        }
    }
    return node;
}



int main() {
    int temp;
    fin >> temp;
    Node *root = new Node(temp);
    
    fin >> temp;
    while (!fin.eof()) {
        addInTree(temp, root);
        fin >> temp;
    }
    setChildrenInfo(root);
//
    if(nodesWithDifferences.size() % 2 == 1){
        sort(nodesWithDifferences.begin(), nodesWithDifferences.end());
        root = deleteNode(root, nodesWithDifferences[(nodesWithDifferences.size() - 1) / 2]);
        printTree(root);
    } else {
        printTree(root);
    }


    fin.close();
    fout.close();

    return 0;
}
