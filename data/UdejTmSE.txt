import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:aluno_online/saveloader/datamanager.dart';
import 'scraper/curso.dart';

final Color m = Colors.yellow.shade200;
final Color t = Colors.yellow.shade400;
final Color n = Colors.lightBlue.shade200;
const Color b = Colors.white;

class GradeBuilder extends StatefulWidget {
  const GradeBuilder({super.key});
  @override
  State<GradeBuilder> createState() => _GradeBuilderState();
}

typedef CalendarState = Map<String, Map<String, List>>;

class _GradeBuilderState extends State<GradeBuilder> {
  CalendarState calendarState = {
    'M1': {
      'tem': ['M1', m],
      'hor': ['7:00 - 7:50', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'M2': {
      'tem': ['M2', m],
      'hor': ['7:50 - 8:40', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'M3': {
      'tem': ['M3', m],
      'hor': ['8:50 - 9:40', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'M4': {
      'tem': ['M4', m],
      'hor': ['9:40 - 10:30', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'M5': {
      'tem': ['M5', m],
      'hor': ['10:40 - 11:30', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'M6': {
      'tem': ['M6', m],
      'hor': ['11:30 - 12:20', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'T1': {
      'tem': ['T1', t],
      'hor': ['12:30 - 13:20', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'T2': {
      'tem': ['T2', t],
      'hor': ['13:20 - 14:10', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'T3': {
      'tem': ['T3', t],
      'hor': ['14:20 - 15:10', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'T4': {
      'tem': ['T4', t],
      'hor': ['15:10 - 16:00', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'T5': {
      'tem': ['T5', t],
      'hor': ['16:10 - 17:00', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'T6': {
      'tem': ['T6', t],
      'hor': ['17:00 - 17:50', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'N1': {
      'tem': ['N1', n],
      'hor': ['18:00 - 18:45', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'N2': {
      'tem': ['N2', n],
      'hor': ['18:45 - 19:30', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'N3': {
      'tem': ['N3', n],
      'hor': ['19:35 - 20:20', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'N4': {
      'tem': ['N4', n],
      'hor': ['20:20 - 21:05', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'N5': {
      'tem': ['N5', n],
      'hor': ['21:10 - 21:55', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    },
    'N6': {
      'tem': ['N6', n],
      'hor': ['21:55 - 22:40', b],
      'SEG': ['', b],
      'TER': ['', b],
      'QUA': ['', b],
      'QUI': ['', b],
      'SEX': ['', b],
      'SAB': ['', b],
    }
  };

  void updateCalendar(bool isSelected, Horario horario, String nome) {
    isSelected ? removeFromCalendar(horario) : addToCalendar(horario, nome);
  }

  void addToCalendar(Horario horario, String nome) {
    setState(() {
      for (var dia in horario.keys) {
        for (var tempo in horario[dia]) {
          calendarState[tempo]![dia]![0] = nome;
        }
      }
    });
  }

  void removeFromCalendar(Horario horario) {
    setState(() {
      for (var dia in horario.keys) {
        for (var tempo in horario[dia]) {
          calendarState[tempo]![dia]![0] = '';
        }
      }
    });
  }

  @override
  void initState() {
    super.initState();
    SystemChrome.setEnabledSystemUIMode(SystemUiMode.immersive);
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
    ]);
  }

  @override
  void dispose() {
    SystemChrome.setPreferredOrientations([
      DeviceOrientation.landscapeRight,
      DeviceOrientation.landscapeLeft,
      DeviceOrientation.portraitUp,
      DeviceOrientation.portraitDown,
    ]);
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      body: Row(
        children: [
          FutureBuilder(
            future: DataStorage.instance.loadCursosXml(),
            builder: (BuildContext context, AsyncSnapshot<List<Curso>> snapshot) {
              if (snapshot.connectionState == ConnectionState.done && snapshot.hasData) {
                return CursoScroller(
                  cardsCursoState: snapshot.data!,
                  updateCalendar: updateCalendar,
                );
              } else if (snapshot.connectionState == ConnectionState.done) {
                return Padding(
                    padding: const EdgeInsets.symmetric(horizontal: 10), child: SizedBox(width: 180, height: 180, child: Text('${snapshot.error}')));
              } else {
                return const Padding(
                    padding: EdgeInsets.symmetric(horizontal: 10), child: SizedBox(width: 180, height: 180, child: CircularProgressIndicator()));
              }
            },
          ),
          Expanded(
            child: Container(
              color: Colors.white,
              child: WeekCalendar(
                calendarState: calendarState,
              ),
            ),
          )
        ],
      ),
    );
  }
}

class CardCurso extends StatelessWidget {
  final Function selectSelf;
  final Function unSelectSelf;
  final String depCod;
  final String name;
  final String state;
  final bool selected;
  const CardCurso({
    super.key,
    required this.depCod,
    required this.name,
    required this.state,
    required this.unSelectSelf,
    required this.selectSelf,
    required this.selected,
  });

  static const Map<String, Color> possibleStates = {
    'nao': Colors.black,
    'sim': Colors.green,
    'talvez': Colors.amber,
  };

  @override
  Widget build(BuildContext context) {
    return Card(
      color: Colors.white,
      elevation: 9,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(9)),
      child: InkWell(
        splashColor: Colors.blue.withAlpha(30),
        onTap: selected ? () => unSelectSelf() : () => selectSelf(),
        child: SizedBox(
          height: 88,
          width: 200,
          child: Padding(
            padding: const EdgeInsets.all(8),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  children: [
                    Text(
                      depCod,
                    ),
                    Container(
                      width: 17,
                      height: 17,
                      color: possibleStates[state],
                    )
                  ],
                ),
                Row(
                  children: [
                    SizedBox(
                        width: 155,
                        child: Text(
                          name,
                        )),
                  ],
                )
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class TurmaCard extends StatelessWidget {
  final String professor;
  final String state;
  final String turma;
  final Horario horarios;
  final Function updateCalendar;
  final bool isSelected;
  final TurmaCurso tc;
  final String nome;
  const TurmaCard({
    super.key,
    required this.professor,
    required this.state,
    required this.turma,
    required this.horarios,
    required this.updateCalendar,
    required this.isSelected,
    required this.tc,
    required this.nome,
  });

  static const Map<String, Color> possibleStates = {
    'vago': Colors.green,
    'semhorario': Colors.amber,
    'lotado': Colors.red,
    'semh_cheio': Colors.black
  };

  List<Text> processHorario2Card(Horario horario) {
    var texts = <Text>[];
    var dias = horario.keys;
    for (var dia in dias) {
      texts.add(Text('$dia: ${horario[dia].first} - ${horario[dia].last}'));
    }
    return texts;
  }

  @override
  Widget build(BuildContext context) {
    return Card(
      color: Colors.white,
      elevation: 9,
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(9)),
      child: InkWell(
        splashColor: Colors.blue.withAlpha(30),
        onTap: () {
          tc.isSelected = !tc.isSelected;
          updateCalendar(isSelected, horarios, nome);
        },
        child: SizedBox(
          height: 90,
          width: 200,
          child: Padding(
            padding: const EdgeInsets.all(8),
            child: Column(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  mainAxisAlignment: MainAxisAlignment.spaceBetween,
                  crossAxisAlignment: CrossAxisAlignment.center,
                  children: [
                    Text(
                      turma,
                      style: const TextStyle(fontWeight: FontWeight.bold),
                    ),
                    Text(professor),
                    Container(
                      height: 17,
                      width: 17,
                      color: possibleStates[state],
                    ),
                  ],
                ),
                Row(
                  children: [
                    Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: processHorario2Card(horarios),
                    )
                  ],
                ),
              ],
            ),
          ),
        ),
      ),
    );
  }
}

class CursoScroller extends StatefulWidget {
  final List<Curso> cardsCursoState;
  final Function updateCalendar;
  const CursoScroller({super.key, required this.cardsCursoState, required this.updateCalendar});
  @override
  State<CursoScroller> createState() => _CursoScrollerState();
}

class _CursoScrollerState extends State<CursoScroller> {
  bool isCursoSelected = false;
  late List<Curso> cardsCursoState;
  List<dynamic> selectedCursoClassCardsStates = [];

  void unSelectSelf(int index) {
    setState(() {
      isCursoSelected = false;
      selectedCursoClassCardsStates.clear();
    });
  }

  Function makeUnSelectSelf(int index) {
    return () => unSelectSelf(index);
  }

  void selectSelf(int index) {
    setState(() {
      isCursoSelected = true;
      selectedCursoClassCardsStates.add(cardsCursoState[index]);
      selectedCursoClassCardsStates.addAll(cardsCursoState[index].turmas);
    });
  }

  Function makeSelectSelf(int index) {
    return () => selectSelf(index);
  }

  @override
  Widget build(BuildContext context) {
    cardsCursoState = widget.cardsCursoState;
    return Container(
      width: 215,
      height: double.infinity,
      color: Colors.blue,
      child: ListView.builder(
        shrinkWrap: true,
        itemCount: isCursoSelected ? selectedCursoClassCardsStates.length : cardsCursoState.length,
        itemBuilder: isCursoSelected
            ? (BuildContext context, int index) {
                if (index == 0) {
                  return CardCurso(
                    depCod: '${selectedCursoClassCardsStates[index].departamento}-${selectedCursoClassCardsStates[index].codigo}',
                    name: selectedCursoClassCardsStates[index].nome,
                    state: 'sim',
                    selected: isCursoSelected,
                    selectSelf: makeSelectSelf(index),
                    unSelectSelf: makeUnSelectSelf(index),
                  );
                } else {
                  return TurmaCard(
                    professor: 'Professor',
                    state: 'vago',
                    turma: selectedCursoClassCardsStates[index].turma,
                    horarios: selectedCursoClassCardsStates[index].horarios,
                    updateCalendar: widget.updateCalendar,
                    isSelected: selectedCursoClassCardsStates[index].isSelected,
                    tc: selectedCursoClassCardsStates[index],
                    nome: selectedCursoClassCardsStates[0].nome,
                  );
                }
              }
            : (BuildContext context, int index) {
                return CardCurso(
                  depCod: '${cardsCursoState[index].departamento}-${cardsCursoState[index].codigo}',
                  name: cardsCursoState[index].nome,
                  state: 'sim',
                  selected: isCursoSelected,
                  selectSelf: makeSelectSelf(index),
                  unSelectSelf: makeUnSelectSelf(index),
                );
              },
      ),
    );
  }
}

class WeekCalendar extends StatelessWidget {
  final CalendarState calendarState;
  const WeekCalendar({super.key, required this.calendarState});
  static const header = <String>['Tempo', 'Horario', 'Segunda', 'Terça', 'Quarta', 'Quinta', 'Sexta', 'Sabado'];
  @override
  Widget build(BuildContext context) {
    final columns = header.map((e) => DataColumn(label: Padding(padding: const EdgeInsets.only(left: 6, right: 6), child: Text(e)))).toList();
    final rows = calendarState.keys
        .map((time) => DataRow(
            cells: calendarState[time]!
                .keys
                .map((weekDay) => DataCell(Container(
                    color: calendarState[time]![weekDay]![1],
                    child: Align(alignment: Alignment.center, child: Text(calendarState[time]![weekDay]![0])))))
                .toList()))
        .toList();
    return Center(
      child: SingleChildScrollView(
        scrollDirection: Axis.horizontal,
        child: DataTable(
          columnSpacing: 0,
          horizontalMargin: 0,
          dividerThickness: 0,
          border: TableBorder.all(color: const Color.fromARGB(120, 0, 0, 0), width: 1),
          headingTextStyle: const TextStyle(fontWeight: FontWeight.bold, fontSize: 20, color: Colors.black),
          dataRowHeight: MediaQuery.of(context).size.height / 21,
          columns: columns,
          rows: rows,
        ),
      ),
    );
  }
}
