#include <iostream>
#include <iomanip>
#include <sstream>
#include <fstream>

using namespace std;

class tree
{
    private:
        int data;
        string store;
        tree *parent;
        tree *left;
        tree *right;  
    public:
        tree(): left(0), right(0), parent(0), data(0), store(""){};
        tree(int a, string b): left(0), right(0), parent(0), data(a), store(b){};
        friend class BST;
};

class BST
{
    public:
        tree *root;
        BST():root(0){};    
        tree *Search(int data);
        void InsertBST(int data, string store);
        void InorderPrint(tree *current);
        void PreorderPrint(tree *current, int dep);
};

void BST::InsertBST(int data, string store)
{
    tree *y = 0; 
    tree *x = 0;
    tree *insert_node = new tree(data, store);

    x = root;
    while(x)
    { 
        y = x;
        if(insert_node->data < x->data) 
            x = x->left;
        else
            x = x->right;
    }
    insert_node->parent = y;
    if(!y)
        this->root = insert_node;
    else if(insert_node->data < y->data)
        y->left = insert_node;
    else
        y->right = insert_node;
}

void BST::InorderPrint(tree *current)
{
    if(current)
    { 
        InorderPrint(current->left);
        cout << current->store << ' ' << current->data << '\n';
        InorderPrint(current->right);
    }
}

void BST::PreorderPrint(tree *current, int dep)
{
    if(current)
    { 
        for(int i = 0; i < dep; ++i)
            cout << '\t';
        cout << current->store << ' ' << current->data << '\n';
        PreorderPrint(current->left, dep + 1);
        PreorderPrint(current->right, dep + 1);
    }
}

int main()
{
    ifstream file;
    BST *store_data = new BST();
    file.open("profit.txt");
    if(!file.is_open())
    {
        cout<<"[檔案開啟失敗]";
        return 1;
    }
    while(!file.eof())
    {
        string str;
        getline(file, str); // readline from file
        stringstream ss;
        string temp[3];
        int idx = 0;
        ss << str;
        while(true)
        {
            ss >> temp[idx++]; // split 
            if(ss.fail())
                break;
        }
        string store_id = temp[0];
        int profit = stod(temp[2]) - stod(temp[1]);
        store_data->InsertBST(profit, store_id);
    }
    file.close();
    store_data->PreorderPrint(store_data->root, 0);
    cout << '\n';
    store_data->InorderPrint(store_data->root);
    return 0;
}
