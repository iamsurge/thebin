// main.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <signal.h>

void main() {
        pthread_t proc, cons;
        int status;

        status = pthread_create(&proc, NULL, Producer, NULL);

        if(status != 0) {
                perror("Create thread Producer");
                exit(1);
        }

        status = pthread_create($cons, NULL, Consumer, NULL);

        if(status != 0) {
                perror("Create thread Consumer");
        }

        pthread_join(proc, NULL);
        pthread_join(cons, NULL);

        printf("Main thread ended. \n");
        pthread_exit(NULL);
}

// producer.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <signal.h>

char buff = ' ';

void *Producer() {
        int k, x, i;

        for(i = 'a'; i <= 'z'; i++) {
                x = 0;
                for(k = 0; k < 10000000; k++) x++;
                buff = i;
        }

        printf("Producer thread ended.\n");
        pthread_exit(NULL);
}

// consumer.c
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <unistd.h>
#include <pthread.h>
#include <semaphore.h>
#include <signal.h>

char buff = ' ';

void *Consumer(void * arg) {
        int k, x, i;
        char a;

        for(i = 'a'; i <= 'z'; i++) {
                a = buff;

                printf("%c\n", a);
                if(a == 'z') break;
                x = 0;
                for(k = 0; k < 50000000; k++) x++;
        }

        printf("Consumer thread ended.\n");
        pthread_exit(NULL);
}

// run.sh
#! bin/bash

gcc -O0 -o producer producer.c -lshared
gcc -O0 -o consumer consumer.c -lshared
gcc -O0 -o main main.c -lshared

./producer &
./consumer &
