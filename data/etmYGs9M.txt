--List Buyable clothes on a roblox character
local function AssetIdAdd(id)
	for i, v in ipairs(string.split(id, ",")) do
	local slot = game.ReplicatedStorage.ImageLabel:Clone()
	slot.Parent = game.Players.LocalPlayer.PlayerGui.BuyGui.Frame
	slot.Image = "rbxthumb://type=Asset&id="..tonumber(v).."&w=150&h=150"
	local Asset = game:GetService("MarketplaceService"):GetProductInfo(tonumber(v))
		slot.Name = Asset.Name	
		slot.AssetId.Text = tonumber(v)
	end
end

script.Parent.MouseButton1Click:Connect(function()
	local Name = script.Parent.Parent.Adornee.Name
	local Model = workspace:FindFirstChild(script.Parent.Parent.Adornee.Name, true)
	if Model then
		local Stands = Model:FindFirstChild(script.Parent.Parent.Adornee.Name, true) 
		if Stands:IsA("Model") then
			local HD = game.Players:GetHumanoidDescriptionFromUserId(game.Players:GetUserIdFromNameAsync(Name))
			if HD.BackAccessory ~= "" and HD.BackAccessory ~= 0 then
				AssetIdAdd(HD.BackAccessory)
			end
			if HD.FaceAccessory ~= "" and HD.FaceAccessory ~= 0 then
				AssetIdAdd(HD.FaceAccessory)
			end
			if HD.FrontAccessory ~= "" and HD.FrontAccessory ~= 0 then
				AssetIdAdd(HD.FrontAccessory)
			end
			if HD.HairAccessory ~= "" and HD.HairAccessory ~= 0 then
				AssetIdAdd(HD.HairAccessory)
			end
			if HD.HatAccessory ~= "" and HD.HatAccessory ~= 0 then
				AssetIdAdd(HD.HatAccessory)
			end
			if HD.NeckAccessory ~= "" and HD.NeckAccessory ~= 0 then
				AssetIdAdd(HD.NeckAccessory)
			end
			if HD.ShouldersAccessory ~= "" and HD.ShouldersAccessory ~= 0 then
				AssetIdAdd(HD.ShouldersAccessory)
			end
			if HD.WaistAccessory ~= "" and HD.WaistAccessory ~= 0 then
				AssetIdAdd(HD.WaistAccessory)
			end
			if HD.GraphicTShirt ~= "" and HD.GraphicTShirt ~= 0 then
				AssetIdAdd(HD.GraphicTShirt)
			end
			if HD.Pants ~= "" and HD.Pants ~= 0 then
				AssetIdAdd(HD.Pants)
			end
			if HD.Shirt ~= "" and HD.Shirt ~= 0 then
				AssetIdAdd(HD.Shirt)
			end
		end
	end
end)
-----------------------------------
----Timer Script--------------
local MPS = game:GetService("MarketplaceService")
local ID2x = 26145090 --Switch this ID to your 2x Gamepass Id
local ID4x = 26145141 --Switch this ID to your 4x Gamepass Id

game.Players.PlayerAdded:Connect(function(player)
	local Timer = player:WaitForChild("Timer")
	local Second = Timer.Second
	local Second2 = Timer.Second2
	local Minute = Timer.Minute
	local Hour = Timer.Hour
	local Day = Timer.Day

	while wait(1) do 
		if Second.Value >= 60 then 
			Second.Value -= 60
			Minute.Value += 1 
		end
		if Minute.Value >= 60 then
			Minute.Value -= 60 
			Hour.Value += 1
		end
		if Hour.Value >= 24 then
			Hour.Value -= 24
			Day.Value += 1 
		end

		if MPS:UserOwnsGamePassAsync(player.UserId, ID2x) then
			if not MPS:UserOwnsGamePassAsync(player.UserId, ID4x) then
				Second.Value += 2
				Second2.Value += 2	
			end
		end

		if MPS:UserOwnsGamePassAsync(player.UserId, ID4x) then
			if not MPS:UserOwnsGamePassAsync(player.UserId, ID2x) then 
				Second.Value += 4
				Second2.Value += 4
			end
		end

		if MPS:UserOwnsGamePassAsync(player.UserId, ID2x) and MPS:UserOwnsGamePassAsync(player.UserId, ID4x) then
			Second.Value += 6
			Second2.Value += 6
		end

		if not MPS:UserOwnsGamePassAsync(player.UserId, ID2x) and not MPS:UserOwnsGamePassAsync(player.UserId, ID4x) then
			Second.Value += 1
			Second2.Value += 1
		end

	end
end)
---------------------------------
---Time Converting to insert top player into Global leaderboard------

local DataStoreService = game:GetService("DataStoreService")
local TimerDataStore = DataStoreService:GetOrderedDataStore("TimerLeaderboard")

local leaderboardPart =  script.Parent.Parent.Parent
local RefreshRate = 60

function Format(Int)
	return string.format("%02i", Int)
end

function convert(Seconds)
	local Minutes = (Seconds - Seconds%60)/60
	Seconds = Seconds - Minutes*60
	local Hours = (Minutes - Minutes%60)/60
	Minutes = Minutes - Hours*60
	local Days = (Hours - Hours%24)/24
	Hours = Hours - Days*24
	
	return Format(Days)..":"..Format(Hours)..":"..Format(Minutes)
end


local function RefreshLeaderboard()
	for i, player in pairs(game.Players:GetPlayers()) do 
		TimerDataStore:SetAsync(player.UserId, player.Timer.Second2.Value)
		print(player.Timer.Second2.Value)
	end
	local Success, Error = pcall(function()
		local Data = TimerDataStore:GetSortedAsync(false, 7)
		local TimerPage = Data:GetCurrentPage()
		for Rank, SavedData in ipairs(TimerPage) do
			local username = game.Players:GetNameFromUserIdAsync(tonumber(SavedData.key))
			local Time = SavedData.value
		
			local NewSample = game.ReplicatedStorage.Sample:Clone()
			NewSample.Visible = true
			NewSample.Parent = leaderboardPart.SurfaceGui.Frame
			NewSample.Name = username
			
				
			NewSample.Rank.Text = Rank
			NewSample.UserName.Text = username
			local number = convert(Time)
			NewSample.Amount.Text =  number
			
			for i, dummy in pairs(leaderboardPart.Parent:GetChildren()) do
				if dummy.Name == "" and dummy:IsA("Model") then 
					dummy.Humanoid:ApplyDescription(game.Players:GetHumanoidDescriptionFromUserId(TimerDataStore:GetSortedAsync(false, 1):GetCurrentPage()[1].key)) 
				end
			end
			
			leaderboardPart.Parent.Stadium.SurfaceGui.Frame.TextLabel.Text = game.Players:GetNameFromUserIdAsync(TimerDataStore:GetSortedAsync(false,1):GetCurrentPage()[1].key)
		end
	end)
end

while true do 
		for i, Frame in pairs(leaderboardPart.SurfaceGui.Frame:GetChildren()) do
			if Frame.Name ~=  "Sample" and Frame:IsA("Frame") then
			Frame:Destroy()
		end
	end
	RefreshLeaderboard()
	wait(RefreshRate)
end