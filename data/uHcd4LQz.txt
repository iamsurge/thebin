#include <array>
#include <cstddef>
#include <algorithm>
#include <type_traits>

#ifdef LOCAL

#include <iostream>

#endif

template <std::size_t n>
class permutation {
public:
    permutation() {
        for (int i = 0; i < n; ++i) {
            content_[i] = i;
        }
    }

    permutation(unsigned* const array) {
        for (int i = 0; i < n; ++i) {
            content_[i] = array[i];
        }
    }

    permutation(const permutation& other) = default;

    permutation& operator=(const permutation& oth) = default;
    
    bool operator<(const permutation& oth) const {
        for (int i = 0; i < n; ++i)
            if (content_[i] != oth.content_[i])
                return content_[i] < oth.content_[i];
        return false;
    }

    permutation& operator*=(const permutation& other) {
        std::array<unsigned, n> tmp (content_);
        for (int i = 0; i < n; ++i) {
            content_[i] = tmp[other[i]];
        }
        return *this;
    }

    template<std::size_t m>
    friend bool operator<(const permutation& a, const permutation& b);

    permutation& operator++() {
        int i = n - 1;
        while (0 < i && content_[i-1] > content_[i]) --i;
        if (i == 0) {
            for (int j = 0; j < n; ++j)
                content_[j] = j;
        } else {
            --i;
            int j = i + 1;
            while (j + 1 < n && content_[j + 1] > content_[i]) ++j;
            std::swap(content_[i], content_[j]);
            while (j + 1 < n && content_[j] < content_[j + 1]) {
                std::swap(content_[j], content_[j+1]);
                ++j;
            }
            for (int k = 0; k < (n - i) / 2; ++k) {
                std::swap(content_[i + k + 1], content_[n - k - 1]);
            }
        }
        return *this;
    }

    const permutation operator++(int) {
        permutation tmp(*this);
        ++*this;
        return tmp;
    }

    permutation& operator--() {
        int i = n - 1;
        while (0 < i && content_[i-1] < content_[i]) --i;
        if (i == 0) {
            for (int j = 0; j < n; ++j)
                content_[j] = n - j - 1;
        } else {
            --i;
            int j = i + 1;
            while (j + 1 < n && content_[j + 1] < content_[i]) ++j;
            std::swap(content_[i], content_[j]);
            while (j + 1 < n && content_[j] > content_[j + 1]) {
                std::swap(content_[j], content_[j+1]);
                ++j;
            }
            for (int k = 0; k < (n - i) / 2; ++k) {
                std::swap(content_[i + k + 1], content_[n - k - 1]);
            }
        }
        return *this;
    }

    const permutation operator--(int) {
        permutation tmp(*this);
        --*this;
        return tmp;
    }

    permutation next() const {
        permutation tmp(*this);
        ++tmp;
        return tmp;
    }

    permutation prev() const {
        permutation tmp(*this);
        --tmp;
        return tmp;
    }

    const unsigned& operator[](unsigned pos) const {
        return content_[pos];
    }

    permutation inverse() const {
        permutation ans;
        for (int i = 0; i < n; ++i) {
            ans.content_[content_[i]] = i;
        }
        return ans;
    }

    void operator()(unsigned* array) const {
        std::array<unsigned, n> tmp;
        for (int i = 0; i < n; ++i)
            tmp[i] = array[i];
        for (int i = 0; i < n; ++i)
            array[content_[i]] = tmp[i];
    }

private:
    std::array<unsigned, n> content_;
};

// template <std::size_t n>
// permutation<n> operator*(const permutation<n>& a, const permutation<n>& b) {
//     permutation<n> res;
//     for (int i = 0; i < n; ++i) {
//         a.content_[i] = a.content_[b.content_[i]];
//     }
//     return res;
// }

template <std::size_t n>
permutation<n> operator*(const permutation<n>& a, const permutation<n>& b) {
    permutation<n> tmp(a);
    tmp *= b;
    return tmp;
}

template <std::size_t n>
bool operator>(const permutation<n>& a, const permutation<n>& b) {
    return b < a;
}

template <std::size_t n>
bool operator==(const permutation<n>& a, const permutation<n>& b) {
    return !(a < b || b < a);
}

template <std::size_t n>
bool operator!=(const permutation<n>& a, const permutation<n>& b) {
    return !(a == b);
}

template <std::size_t n>
bool operator<=(const permutation<n>& a, const permutation<n>& b) {
    return !(a > b);
}

template <std::size_t n>
bool operator>=(const permutation<n>& a, const permutation<n>& b) {
    return !(a < b);
}



#ifdef LOCAL

int main() {
    permutation<11> p;
    std::array<unsigned, 11> a;
    for (int i = 0; i < a.size(); ++i)
        a[i] = i;
    // ++p; ++p;
    for (int i = 0; i < 24; ++i) {
        for (int j = 0; j < 11; ++j)
            std::cout << p[j] << ' ';
        std::cout << "\n";
        for (int j = 0; j < 11; ++j)
            std::cout << a[j] << ' ';
        std::cout << "\n\n\n";
        --p;
        std::prev_permutation(a.begin(), a.end());
    }
}

#endif