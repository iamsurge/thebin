// clang-format off
#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <vector>
#include <string>
#include <algorithm>
#include <cmath>
#include <stack>
#include <iomanip>
#include <fstream>
#include <string>
#include <set>
#include <deque>
#include <queue>
#include <map>
#include <bitset>
#include <random>
#include <list>
#include <unordered_map>
#include <unordered_set>
#include <cassert>

using namespace std;

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;
typedef string str;
//typedef __int128 ultraint;
#define sqrt sqrtl
#define F first
#define S second
#define endl '\n'
#define all(vc666) vc666.begin(), vc666.end()
#define allr(vc666) vc666.rbegin(), vc666.rend()
#define int long long
#define degug(x) cerr (#x) << " " << (x) << endl;

const ll INF = (ll)2e18 + 7;
const ll inf = 1e9 + 7;
const ll ONE = 1;
const ll MOD = 1e8;
ld EPS = 1e-12;
ld PI = 3.1415926535897932384;
mt19937_64 gen(3);
const ll max_sz = 1e6 + 2;

void solve() {
    int n1, n2, i, j, k1, k2, k, ans = 0;
    cin >> n1 >> n2 >> k1 >> k2;
    vector <vector <pair <vector <int>, vector <int>>>> dp(n1 + 1, vector <pair <vector <int>, vector <int>>>(n2 + 1));
    for (i = 0; i <= n1; i++) {
        for (j = 0; j <= n2; j++) {
            dp[i][j].first.resize(k1);
            dp[i][j].second.resize(k2);
        }
    }
    dp[n1 - 1][n2].first[0] = 1;
    dp[n1][n2 - 1].second[0] = 1;
    set <pair <int, int> > q1, q2;
    q1.insert({ n1 - 1, n2 });
    q1.insert({ n1, n2 - 1 });
    while (true) {
        while (!q1.empty()) {
            i = q1.begin()->first;
            j = q1.begin()->second;
            q1.erase(q1.begin());
            for (k = 0; k < k1 - 1; k++) {
                if (i - 1 >= 0) {
                    /*for (auto it : dp[i][j].first[k]) {
                        it.push_back(1);
                        dp[i - 1][j].first[k + 1].push_back(it);
                    }*/
                    dp[i - 1][j].first[k + 1] += dp[i][j].first[k];
                    dp[i - 1][j].first[k + 1] %= MOD;
                    q2.insert({ i - 1, j });
                }
                if (j - 1 >= 0) {
                    /*for (auto it : dp[i][j].first[k]) {
                        it.push_back(2);
                        dp[i][j - 1].second[0].push_back(it);
                    }*/
                    dp[i][j - 1].second[0] += dp[i][j].first[k];
                    dp[i][j - 1].second[0] %= MOD;
                    q2.insert({ i, j - 1 });
                }
            }
            if (j - 1 >= 0) {
                /*for (auto it : dp[i][j].first[k]) {
                    it.push_back(2);
                    dp[i][j - 1].second[0].push_back(it);
                }*/
                dp[i][j - 1].second[0] += dp[i][j].first[k];
                dp[i][j - 1].second[0] %= MOD;
                q2.insert({ i, j - 1 });
            }
            for (k = 0; k < k2 - 1; k++) {
                if (j - 1 >= 0) {
                    /*for (auto it : dp[i][j].second[k]) {
                        it.push_back(2);
                        dp[i][j - 1].second[k + 1].push_back(it);
                    }*/
                    dp[i][j - 1].second[k + 1] += dp[i][j].second[k];
                    dp[i][j - 1].second[k + 1] %= MOD;
                    q2.insert({ i, j - 1 });
                }
                if (i - 1 >= 0) {
                    /*for (auto it : dp[i][j].second[k]) {
                        it.push_back(1);
                        dp[i - 1][j].first[0].push_back(it);
                    }*/
                    dp[i - 1][j].first[0] += dp[i][j].second[k];
                    dp[i - 1][j].first[0] %= MOD;
                    q2.insert({ i - 1,j });
                }
            }
            if (i - 1 >= 0) {
                /*for (auto it : dp[i][j].second[k]) {
                    it.push_back(1);
                    dp[i - 1][j].first[0].push_back(it);
                }*/
                dp[i - 1][j].first[0] += dp[i][j].second[k];
                dp[i - 1][j].first[0] %= MOD;
                q2.insert({ i - 1,j });
            }
        }
        if (q2.empty()) {
            break;
        }
        q1 = q2;
        q2.clear();
    }
    vector <vector <int> > res;
    for (i = 0; i < k1; i++) {
        /*for (auto it : dp[0][0].first[i]) {
            res.push_back(it);
        }*/
        ans += dp[0][0].first[i];
    }
    for (i = 0; i < k2; i++) {
        /*for (auto it : dp[0][0].second[i]) {
            res.push_back(it);
        }*/
        ans += dp[0][0].second[i];
    }
    /*sort(all(res));
    for (auto it : res) {
        for (auto it2 : it) {
            cout << it2;
        }
        cout << endl;
    }*/
    ans %= MOD;
    cout << ans << endl;
}

signed main() {
#ifdef _DEBUG 
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
#endif
    //freopen("longpath.in", "r", stdin);
    //freopen("longpath.out", "w", stdout);
    ios_base::sync_with_stdio(0);
    cin.tie(NULL);
    cout.tie(NULL);
    int t = 1;
    //cin >> t;
    while (t--) solve();
}
//Deisgned by skimono