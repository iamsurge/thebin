local args = {...}

-- Print usage information if no args passed
if #args == 0 then
	print(shell.getRunningProgram() .. " [-rb] <remote script name> [local script name]")
	print("  -r : Run program after download")
	print("  -b : Run program in background (Advanced computers only)")
	return
end

local options = {
	run = false,
	background = false,
	remote_name = nil,
	local_name = nil,
}

-- Parse switches
if args[1] and args[1]:sub(1,1) == "-" then
	local switches = args[1]:sub(2)
	
	for chr in switches:gmatch(".") do
		if chr == "r" then
			options.run = true
		elseif chr == "b" then
			options.run = true
			options.background = true
		end
	end
	
	table.remove(args,1)
end

options.remote_name = args[1]

if args[2] then
	options.local_name = args[2]
	print("Fetching script '" .. options.remote_name .. ".lua' as '" .. options.local_name .. "'...")
else
	options.local_name = options.remote_name
	print("Fetching script '" .. options.remote_name .. ".lua'...")
end

local http = http.get("http://tonyfox.ws/docs/minecraft/ccscripts/" .. options.remote_name .. ".lua")

if http == nil then
	if term.isColor() then
		term.setTextColor(colors.red)
	end
	
	print("Script '" .. options.remote_name .. ".lua' not found")
	return
end

if fs.exists(options.local_name) then
	print("Deleting existing program '" .. options.local_name .. "'...")
	fs.delete(options.local_name)
end

print("Saving script as '" .. options.local_name .. "'...")

f = fs.open(options.local_name, "w")
f.write(http.readAll())
f.close()
print("\nDone")

if options.run then
	if options.background then
		shell.run("bg " .. options.local_name)
	else
		shell.run(options.local_name)
	end
end