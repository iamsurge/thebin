#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>
#include <queue>
#include <iomanip>      

#define PI 3.14159265

using namespace std;

typedef double ll;

const double eps = 1e-5;

struct Point {
	ll x, y;
	Point(){}
	Point(ll x, ll y): x(x), y(y) {}
};

Point operator -(const Point& a, const Point& b) {
	return Point(a.x - b.x, a.y - b.y);
}

istream& operator >>(istream& in, Point& p) {
	in >> p.x >> p.y;
	return in;
}

inline double len(const Point& a, const Point& b) {
	return hypot(a.x - b.x, a.y - b.y);
}

inline ll dP(const Point& a, const Point& b) {
	return a.x * b.x + a.y * b.y;
}

inline ll cP(const Point& a, const Point& b) {
	return a.x * b.y - a.y * b.x;
}

inline bool isOnRay(const Point& a, const Point& b, const Point& p) {
	Point ab = b - a, ap = p - a;
	return cP(ab, ap) == 0 && dP(ab, ap) >= 0;
}

inline bool isUpRay(const Point& a, const Point& b, const Point& p) {
	Point ab = b - a, ap = p - a;
	return dP(ab, ap) >= 0;
}

inline bool dotInAngle(const Point& a, const Point& o, const Point& b, const Point& p) {
	return cP(a - o, p - o) * cP(a - o, b - o) >= 0 && cP(b - o, p - o) * cP(b - o, a - o) >= 0;
}

inline double getTriangleArea(const Point& a, const Point& b, const Point& c) {
	Point ab = b - a, ac = c - a;
	return abs(cP(ab, ac)) / 2.0;
}

inline double getTriangleAltitude(const Point& a, const Point& b, const Point& p) {
	double S = getTriangleArea(a, b, p);
	return S * 2.0 / len(a, b);
}

inline double getAngle(const Point& a, const Point& b) {
	return atan2(cP(a, b), dP(a, b));
}

inline bool intersect(ll a, ll b, ll c, ll d) {
	if (a > b) swap(a, b);
	if (c > d) swap(c, d);

	return max(a, c) <= min(b, d);
}


int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	Point a, b, c, d;

	cin >> a >> b >> c >> d;

	if (
	(cP(c - a, b - a) * cP(c - a, d - c) > 0) &&
	(cP(b - a, c - a) * cP(b - a, d - c) < 0) &&
	(cP(d - c, a - c) * cP(d - c, b - a) < 0)
		) cout << "YES";
	else if (isOnRay(a, b, c) || isOnRay(c, d, a)) cout << "YES";
	else cout << "NO";
}
