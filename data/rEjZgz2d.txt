<# Task:
		1. Check that values for updated attributes are in Azure AD as well (prepare report)
        Company Name, Department, Job Title, Subdivision (extensionAttribute1), Account Type (extensionAttribute2), Usage location, Country or Region, Manager.
Outcome:
excel file (report) with all identities and the above-mentioned columns.  #>

param(
  [Parameter(
    Mandatory = $false,
    HelpMessage = "Get the users manager"
  )]
  [switch]$getManager = $true,

  [Parameter(
    Mandatory = $false,
    HelpMessage = "Get accounts that are enabled, disabled or both"
  )]
    [ValidateSet("true", "false", "both")]
  [string]$enabled = "true",

  [Parameter(
    Mandatory = $false,
    HelpMessage = "Enter path to save the CSV file"
  )]
  [string]$path = ".\ADUsers-$((Get-Date -format "MMM-dd-yyyy").ToString()).csv"
)

$ErrorActionPreference = "Stop"

Function Get-Users {
    <#
    .SYNOPSIS
      Get users from the requested DN
    #>
    process{
      <# Set the properties to retrieve, 
	we have Subdivision → extensionAttribute1 (on-prem AD)
	Employee Type → extensionAttribute2 (on-prem AD) #>

      $properties = @(
        'ObjectId',
        'DisplayName',
        'userprincipalname',
        'Company Name',
        'jobtitle',
        'department',
        'mobile',
        'Country or Region',
        'AccountEnabled',
        'Manager'
         )

      # Get enabled, disabled or both users
      switch ($enabled)
      {
        "true" {$filter = "AccountEnabled eq true"}
        "false" {$filter = "AccountEnabled eq false"}
        "both" {$filter = ""}
      }

      # Get the users
      Get-AzureADUser -Filter $filter | select $properties
    }
}


Function Get-AllAzureADUsers {
  <#
    .SYNOPSIS
      Get all AD users
  #>
  process {
    Write-Host "Collecting users" -ForegroundColor Cyan
    $users = @()

    # Collect users
    $users += Get-Users

    # Loop through all users
    $users | ForEach {

      $manager = ""

      If (($getManager.IsPresent)) {
        # Get the users' manager
        $manager = Get-AzureADUserManager -ObjectId $_.ObjectId | Select -ExpandProperty DisplayName
      }

      [pscustomobject]@{
        "Name" = $_.DisplayName
        "UserPrincipalName" = $_.UserPrincipalName
        "Company Name" = $_.companyName
        "Department" = $_.Department
        "Job title" = $_.JobTitle
        "Subdivision" = $_.Subdivision
        "Employee Type" = $_.EmployeeType
        "Usage location" = $_.usagelocation
        "Country or Region" = $_.country
        "Manager" = $manager
      }
    }
  }
}

Get-AllAzureADUsers | Sort-Object Name | Export-CSV -Path $path -NoTypeInformation

if ((Get-Item $path).Length -gt 0) {
  Write-Host "Report finished and saved in $path" -ForegroundColor Green

  # Open the CSV file
  Invoke-Item $path

}else{
  Write-Host "Failed to create report" -ForegroundColor Red
}