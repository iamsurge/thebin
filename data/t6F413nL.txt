unit utils;

interface
type two_d_array = Array[1..20, 1..20] of integer;

procedure read_mtrx(var in_file: TextFile; n: integer; var mtrx: two_d_array);
procedure write_mtrx(var out_file: TextFile; n: integer; mtrx: two_d_array);

function matrix_max(n: integer; mtrx: two_d_array): integer;
function matrix_min(n: integer; mtrx: two_d_array): integer;
function process_matrix(n: integer; var mtrx: two_d_array): integer;

implementation
procedure read_mtrx(var in_file: TextFile; n: integer; var mtrx: two_d_array);
var i, j: integer;
begin
  for i := 1 to n do
    begin
      for j := 1 to n - 1 do
        read(in_file, mtrx[i][j]);
      readln(in_file, mtrx[i][n]);
    end;
end;


procedure write_mtrx(var out_file: TextFile; n: integer; mtrx: two_d_array);
var i, j: integer;
begin
  for i := 1 to n do
  begin
    for j := 1 to n - 1 do
      write(out_file, mtrx[i][j]:4, ' ');
    writeln(out_file, mtrx[i][n]:4);
  end;
end;

function matrix_max(n: integer; mtrx: two_d_array): integer;
var i, j: integer;
begin
  result := -1000000;
  for i := 1 to n do
    for j := 1 to n do
      if mtrx[i][j] > result then result := mtrx[i][j];
end;

function matrix_min(n: integer; mtrx: two_d_array): integer;
var i, j: integer;
begin
  result := 10000;
  for i := 1 to n do
    for j := 1 to n do
      if mtrx[i][j] < result then result := mtrx[i][j];
end;

function process_matrix(n: integer; var mtrx: two_d_array): integer;
var i, j: integer;
begin
  result := 0;
  for i := 1 to n do
    for j := 1 to n do
      if (mtrx[i][j] > 0) and (mtrx[i][j] <> 1) then begin
        mtrx[i][j] := 1;
        result := result + 1;
      end
      else if (mtrx[i][j] < 0) then begin
        mtrx[i][j] := 0;
        result := result + 1;
      end;
end;

end.