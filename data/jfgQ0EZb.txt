#include <iostream>
#include <vector>
#include <bitset>
#include <algorithm>
#include <map>
#include <unordered_map>
#include <set>
#include <unordered_set>
#include <cmath>
#include <iomanip>
#include <random>
#include <assert.h>

using namespace std;

typedef long long ll;
typedef long double ld;

struct point
{
    int x, y;

    point() {}

    point(int x1, int y1)
    {
        x = x1;
        y = y1;
    }

    int get_k() const
    {
        return max(abs(x), abs(y));
    }

    int get_side() const
    {
        int k = get_k();

        if (x == -k && y == k)
            return 0;
        else if (x == -k && y == -k)
            return 1;
        else if (x == k && y == -k)
            return 2;
        else if (x == k && y == k)
            return 3;
        
        if (x == -k)
            return 0;
        else if (y == -k)
            return 1;
        else if (x == k)
            return 2;
        else if (y == k)
            return 3;

        assert(false);
    }

    bool operator<(const point &o) const
    {
        int k1 = get_k();
        int k2 = o.get_k();
        if (k1 != k2)
            return k1 < k2;

        int s1 = get_side();
        int s2 = o.get_side();
        if (s1 != s2)
            return s1 < s2;

        switch (s1)
        {
        case 0:
            return o.y < y;
            break;
        case 1:
            return x < o.x;
            break;
        case 2:
            return y < o.y;
            break;
        case 3:
            return o.x < x;
            break;
        }

        assert(false);
    }

    bool operator==(const point &o) const
    {
        return x == o.x && y == o.y;
    }
};

ld get_dist(const point &a, const point &b)
{
    ld dx = a.x - b.x;
    ld dy = a.y - b.y;

    if (dx == 0)
        return abs(dy);
    else if (dy == 0)
        return abs(dx);

    return sqrt(dx * dx + dy * dy);
}

void print_point(const point &p)
{
    cout << '(' << p.x << ' ' << p.y << ')';
}

map<point, vector<pair<point, ld>>> graph;
unordered_map<int, vector<point>> affected;

map<point, ld> dist;
map<point, bool> used;

int main()
{
#ifdef HOME_DIDUK001
    freopen("in", "r", stdin);
    freopen("out", "w", stdout);
#endif

    cout << fixed << setprecision(12);
    ios_base::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);

    int k, n;
    cin >> n >> k;

    for (int i = 0; i < n; i++)
    {
        int xa, ya, xb, yb;
        cin >> xa >> ya >> xb >> yb;
        point a(xa, ya), b(xb, yb);

        ld dst = get_dist(a, b);
        graph[a].push_back({b, dst});
        graph[b].push_back({a, dst});

        if (a.get_k() <= k) affected[a.get_k()].push_back(a);
        if (b.get_k() <= k) affected[b.get_k()].push_back(b);
    }

    int xs, ys, xf, yf;
    cin >> xs >> ys >> xf >> yf;
    point start(xs, ys), finish(xf, yf);

    if (start.get_k() <= k) affected[start.get_k()].push_back(start);
    if (finish.get_k() <= k) affected[finish.get_k()].push_back(finish);

    for (int i = 1; i <= k; i++)
    {
        if (!affected.count(k))
            continue;

        affected[i].push_back(point(-i, -i));
        affected[i].push_back(point(-i, i));
        affected[i].push_back(point(i, i));
        affected[i].push_back(point(i, -i));

        sort(affected[i].begin(), affected[i].end());

        // cout << "K: " << i << '\n';
        // for (auto e : affected[i]) {
        //     print_point(e);
        //     cout << '\n';
        // }
        // cout << '\n';

        for (int j = 0; j + 1 < affected[i].size(); j++)
        {
            point cur = affected[i][j],
                  nxt = affected[i][j + 1];

            ld dst = get_dist(cur, nxt);
            if (dst == 0)
                continue;

            graph[cur].push_back({nxt, dst});
            graph[nxt].push_back({cur, dst});
        }

        point cur = affected[i].back(),
              nxt = affected[i].front();
        ld dst = get_dist(cur, nxt);

        if (dst != 0)
        {
            graph[cur].push_back({nxt, dst});
            graph[nxt].push_back({cur, dst});
        }
    }

    // for (auto &p1 : graph)
    // {
    //     point from = p1.first;
    //     cout << "FROM" << ' ';
    //     print_point(from);
    //     cout << '\n';

    //     cout << "TO" << '\n';
    //     for (auto &p2 : p1.second)
    //     {
    //         point to = p2.first;
    //         print_point(to);
    //         cout << ' ' << p2.second << '\n';
    //     }

    //     cout << '\n';
    // }

    set<pair<ld, point>> q;
    dist[start] = 0;

    q.insert({dist[start], start});

    while (!q.empty())
    {
        ld dv = q.begin()->first;
        point v = q.begin()->second;

        q.erase(q.begin());

        used[v] = true;
        if (v == finish)
            break;

        for (auto &p : graph[v])
        {
            point to = p.first;
            ld weight = p.second;

            if (!used[to] && ((dist.find(to) == dist.end()) || dv + weight < dist[to]))
            {
                q.erase({dist[to], to});
                dist[to] = dv + weight;
                q.insert({dist[to], to});
            }
        }
    }

    if (!used[finish])
    {
        cout << -1 << '\n';
    }
    else
    {
        cout << dist[finish] << '\n';
    }
}