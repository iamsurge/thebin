local Players = game:GetService("Players")
local DataStoreService = game:GetService("DataStoreService")
local Saver = DataStoreService:GetDataStore("SaveLeaderstats")
 
Players.PlayerAdded:Connect(function(player)
    local Data = nil
    local success, errormessage = pcall(function()
        Data = Saver:GetAsync(tostring(player.UserId))
    end)
 
    if success then
        if Data then
            for i, v in pairs(Data) do
                if not player:FindFirstChild(i) then
                    player:WaitForChild("leaderstats"):WaitForChild(i).Value = v
                else
                    player:FindFirstChild(i).Value = v
                end
            end
        end
    else
        error(errormessage)
    end
end)
 
local function Save(player)
    local SavedData = {}
    for _, v in pairs(player.leaderstats:GetChildren()) do
        SavedData[v.Name] = v.Value
    end
    
    for _, v in pairs(player:GetChildren()) do
        if v:IsA("IntValue") then
            SavedData[v.Name] = v.Value
        end
    end
 
    local success, errormessage = pcall(function()
        Saver:SetAsync(tostring(player.UserId), SavedData)
    end)
    if not success then
        error(errormessage)
    end
end
 
Players.PlayerRemoving:Connect(Save)
 
game:BindToClose(function()
    for _, v in pairs(Players:GetPlayers()) do
        Save(v)
    end
end)