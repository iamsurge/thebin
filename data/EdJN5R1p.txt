struct Skladowe
{
    bool nasz_bool;
    unsigned char nasz_uchar;
    float nasz_float;
};

struct Dane
{
    int liczba;
    std::string napis = ""; // moze = "", a moze nie
    std::string znak;

    Skladowe skladowa1;
    Skladowe skladowa2;
    Skladowe skladowa3;
    Skladowe skladowa4;
};

struct ZliczaneLiczby
{
    int liczba;
    int ilosc;
};


bool ladujDaneZliczajace(std::fstream &plik, ZliczaneLiczby &data1)
{
    plik >> data1.liczba;
    plik >> data1.ilosc;

    return !plik.eof();
}


void ZapiszDaneZliczajace(std::fstream &plik, ZliczaneLiczby data1)
{
    plik << data1.liczba << " ";
    plik << data1.ilosc << "\n";
}

bool ladujDane(std::fstream &plik, Dane &data1)
{
    std::string pomocniczy_string;
    int pomocniczy = 0;
    plik >> data1.liczba;
    plik.ignore(2, '\n');
    getline(plik, pomocniczy_string); // pobieramy 2 dana
    data1.napis = pomocniczy_string;
    getline(plik, pomocniczy_string);
    data1.znak = pomocniczy_string; // pobieramy 3 dana
    plik >> data1.skladowa1.nasz_bool;
    plik >> pomocniczy;
    data1.skladowa1.nasz_uchar = pomocniczy;
    (plik >> data1.skladowa1.nasz_float);
    //  getline(plik, pomocniczy_string);
    plik >> data1.skladowa2.nasz_bool;
    plik >> pomocniczy;
    data1.skladowa2.nasz_uchar = pomocniczy;
    (plik >> data1.skladowa2.nasz_float);
    //  getline(plik, pomocniczy_string);
    plik >> data1.skladowa3.nasz_bool;
    plik >> pomocniczy;
    data1.skladowa3.nasz_uchar = pomocniczy;
    (plik >> data1.skladowa3.nasz_float);
    //  getline(plik, pomocniczy_string);
    plik >> data1.skladowa4.nasz_bool;
    plik >> pomocniczy;
    data1.skladowa4.nasz_uchar = pomocniczy;
    (plik >> data1.skladowa4.nasz_float);
    //   getline(plik, pomocniczy_string);

    return !plik.eof();
}

void ZapiszDane(std::fstream &plik, Dane data1)
{
    std::string pomocniczy_string;
    int pomoczniczy;
    plik << data1.liczba << "\n";
    plik << data1.napis << "\n";
    plik << data1.znak << "\n";
    //  ---
    plik << data1.skladowa1.nasz_bool << " ";
    pomoczniczy = data1.skladowa1.nasz_uchar;
    plik << pomoczniczy << " ";
    plik << data1.skladowa1.nasz_float << "\n";
    //  ---
    plik << data1.skladowa2.nasz_bool << " ";
    pomoczniczy = data1.skladowa2.nasz_uchar;
    plik << pomoczniczy << " ";
    plik << data1.skladowa2.nasz_float << "\n";
    //  ---
    plik << data1.skladowa3.nasz_bool << " ";
    pomoczniczy = data1.skladowa3.nasz_uchar;
    plik << pomoczniczy << " ";
    plik << data1.skladowa3.nasz_float << "\n";
    //  ---
    plik << data1.skladowa4.nasz_bool << " ";
    pomoczniczy = data1.skladowa4.nasz_uchar;
    plik << pomoczniczy << " ";
    plik << data1.skladowa4.nasz_float << "\n";

}

bool porownajDane(Dane data1, Dane data2)
{
    return
    ((data1.liczba == data2.liczba) &&
    (data1.napis == data2.napis) &&
    (data1.znak == data2.znak) &&
    (data1.skladowa1.nasz_bool == data2.skladowa1.nasz_bool) &&
    (data1.skladowa1.nasz_float == data2.skladowa1.nasz_float ) &&
    (data1.skladowa1.nasz_uchar == data2.skladowa1.nasz_uchar ) &&
    (data1.skladowa2.nasz_bool ==  data2.skladowa2.nasz_bool ) &&
    (data1.skladowa2.nasz_float == data2.skladowa2.nasz_float ) &&
    (data1.skladowa2.nasz_uchar == data2.skladowa2.nasz_uchar ) &&
    (data1.skladowa3.nasz_bool ==  data2.skladowa3.nasz_bool ) &&
    (data1.skladowa3.nasz_float == data2.skladowa3.nasz_float ) &&
    (data1.skladowa3.nasz_uchar == data2.skladowa3.nasz_uchar ) &&
    (data1.skladowa4.nasz_bool ==  data2.skladowa4.nasz_bool ) &&
    (data1.skladowa4.nasz_float == data2.skladowa4.nasz_float ) &&
    (data1.skladowa4.nasz_uchar == data2.skladowa4.nasz_uchar ));
}

void SortCount(std::string nazwa_pliku, std::string plik_pomocniczy1, std::string plik_pomocniczy2)
{
    //sortujemy malejaco
    bool zamiana;

    std::fstream plik;
    std::fstream pomocniczy1;

    do
    {
        zamiana = false;

        Dane sprawdzana;
        Dane porownywana;

        plik.open(nazwa_pliku.c_str(), std::fstream::in );
        pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::out | std::fstream::trunc);

        if(ladujDane(plik, sprawdzana))
        {
            while (ladujDane(plik,porownywana))
            {
                if (sprawdzana.liczba < porownywana.liczba)
                {
                    ZapiszDane(pomocniczy1, porownywana);
                    zamiana = true;
                }
                else
                {
                    ZapiszDane(pomocniczy1,sprawdzana);
                    sprawdzana = porownywana;
                }
            }

            ZapiszDane(pomocniczy1, sprawdzana);
        }

        plik.close();
        pomocniczy1.close();

        if (zamiana)
        {
            //otwieramy, żeby być na początku plików
            pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::in);
            plik.open(nazwa_pliku.c_str(), std::fstream::out | std::fstream::trunc);

            std::string bufor;

            while (std::getline(pomocniczy1, bufor))
            {
                plik << bufor << '\n';
            }

            plik.close();
            pomocniczy1.close();
        }

    }while(zamiana);
    //koniec sortowania

    plik.open(nazwa_pliku.c_str(), std::fstream::in);

    Dane data1;

    if(ladujDane(plik, data1))
    {
        std::fstream pomocznicza_zliczajaca;

        pomocznicza_zliczajaca.open(plik_pomocniczy2.c_str(), std::fstream::out | std::fstream::trunc);

        int licznik = 1;
        int zliczana_liczba = data1.liczba;

        while (ladujDane(plik, data1))
        {
            if (data1.liczba == zliczana_liczba)
            {
                licznik++;
            }
            else
            {
                pomocznicza_zliczajaca << zliczana_liczba << " " << licznik << std::endl;
                zliczana_liczba = data1.liczba;
                licznik = 1;
            }
        }
        pomocznicza_zliczajaca << zliczana_liczba << " " << licznik << std::endl;
        pomocznicza_zliczajaca.close();
        plik.close();

        //sortujemy w przypadku rownosci wystapien wartosci skladowych wedlug wielkosci wartosci skladowych
        do
        {
            zamiana = false;

            ZliczaneLiczby sprawdzana;
            ZliczaneLiczby porownywana;

            pomocznicza_zliczajaca.open(plik_pomocniczy2.c_str(), std::fstream::in );
            pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::out | std::fstream::trunc);

            if(ladujDaneZliczajace(pomocznicza_zliczajaca, sprawdzana))
            {
                while (ladujDaneZliczajace(pomocznicza_zliczajaca,porownywana))
                {
                    if (sprawdzana.ilosc < porownywana.ilosc)
                    {
                        ZapiszDaneZliczajace(pomocniczy1, porownywana);
                        zamiana = true;
                    }
                    else
                    {
                        ZapiszDaneZliczajace(pomocniczy1,sprawdzana);
                        sprawdzana = porownywana;
                    }
                }

                ZapiszDaneZliczajace(pomocniczy1, sprawdzana);
            }

            pomocznicza_zliczajaca.close();
            pomocniczy1.close();

            if (zamiana)
            {
                //otwieramy, żeby być na początku plików
                pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::in);
                pomocznicza_zliczajaca.open(plik_pomocniczy2.c_str(), std::fstream::out | std::fstream::trunc);

                std::string bufor;

                while (std::getline(pomocniczy1, bufor))
                {
                    pomocznicza_zliczajaca << bufor << '\n';
                }

                pomocznicza_zliczajaca.close();
                pomocniczy1.close();
            }

        }while(zamiana);
        //kloniec sortowania

        pomocznicza_zliczajaca.open(plik_pomocniczy2.c_str(), std::fstream::in);
        pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::out | std::fstream::trunc);

        // liczba ilosc
        // liczba2 ilosc 2
        // zliczana_liczba
        // licznik jest uzyty dla latwiejszego wczytywania struktury, nie jest on uzywany w petli
        while (pomocznicza_zliczajaca >> zliczana_liczba >> licznik)
        {
            plik.open(nazwa_pliku.c_str(), std::fstream::in);

            while (ladujDane(plik, data1))
            {
                if (data1.liczba == zliczana_liczba)
                {
                    ZapiszDane(pomocniczy1, data1);
                }
            }
            plik.close();
        }
        pomocniczy1.close();
        pomocznicza_zliczajaca.close();
        // koniec licznika

        //kopiujemy

        //otwieramy, żeby być na początku plików
        plik.open(nazwa_pliku.c_str(), std::fstream::in | std::fstream::out);
        pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::in | std::fstream::out);

        std::string bufor;

        while (std::getline(pomocniczy1, bufor))
        {
            plik << bufor << '\n';
        }

        plik.close();
        pomocniczy1.close();

        //koniec kopiowania

        //sprawdzenie ostatniego warunku z sumą
        Dane porownywana;

        do {
            zamiana = false;

            plik.open(nazwa_pliku.c_str(), std::fstream::in);
            pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::out | std::fstream::trunc);

            if(ladujDane(plik, data1))
            {
                while (ladujDane(plik, porownywana))
                {
                    if (data1.liczba == porownywana.liczba)
                    {
                        int sum_data_1 = (data1.skladowa1.nasz_uchar + data1.skladowa2.nasz_uchar + data1.skladowa3.nasz_uchar + data1.skladowa4.nasz_uchar) % 256;
                        int sum_porownywana = (porownywana.skladowa1.nasz_uchar + porownywana.skladowa2.nasz_uchar + porownywana.skladowa3.nasz_uchar + porownywana.skladowa4.nasz_uchar) % 256;
                        if(sum_data_1 < sum_porownywana)
                        {
                            ZapiszDane(pomocniczy1, porownywana);
                            zamiana = true;
                        }
                    }
                    else {
                        ZapiszDane(pomocniczy1, data1);
                        data1 = porownywana;
                    }
                }
                ZapiszDane(pomocniczy1, data1);
            }

            plik.close();
            pomocniczy1.close();

            //kopiowanie
            if (zamiana)
            {
                //otwieramy, żeby być na początku plików
                plik.open(nazwa_pliku.c_str(), std::fstream::in | std::fstream::out);
                pomocniczy1.open(plik_pomocniczy1.c_str(), std::fstream::in | std::fstream::out);

                std::string bufor;

                while (std::getline(pomocniczy1, bufor))
                {
                    plik << bufor << '\n';
                }

                plik.close();
                pomocniczy1.close();
            }
        } while (zamiana);
    }
    else
    {
        plik.close();
    }
}