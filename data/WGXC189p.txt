----Variables
--Debug
local debugText = ""
--Rednet
--rednet.open("back")
---Icon Grid Size Prefrences
--Icon Grid Start Coordiantes (may automate centering later)
local startX = 2
local startY = 2
--Icon Grid Parameters
local columns = 2
local rows = 4
local width = 11
local height = 3
local gap = 2
---Colors
--Color Short Names
local gray = colors.gray
local black = colors.black
local white = colors.white
--Color Preferences
local pressedColor = gray
local termColor = black
local termTextColor = white
---Tables
--Icon Grid Layout Table
local layout = {}
--Icon Grid Color Prefrence Table
local originalColors = {
  colors.purple,
  colors.blue,
  colors.magenta,
  colors.magenta,
  colors.magenta,
  colors.magenta,
  colors.red,
  colors.red,
  navTopLeft = colors.white,
  navTopMiddle = colors.white,
  navTopRight = colors.white
}
--Icon Grid Color Variable Table
local currentColors = {
  colors.purple,
  colors.blue,
  colors.magenta,
  colors.magenta,
  colors.magenta,
  colors.magenta,
  colors.red,
  colors.red,
  navTopLeft = colors.white,
  navTopMiddle = colors.white,
  navTopRight = colors.white
}
--Icon Text Table
local textTable = {
  "EndyChest",
  "BackupLua",
  "DJ Prev",
  "DJ Next",
  "DJ Toggle",
  "DJ Info",
  "Open Door",
  "Shut Door",
  navTopLeft = debugText, --Debug/Back
  navTopMiddle = "",
  navTopRight = "X" --X
}
---Other Variables
--Math Shortening Variables
local cellWidthWithGap = width+gap
local cellHeightWithGap = height+gap
local xEnd = (cellWidthWithGap*(columns-1))+startX
local yEnd = (cellHeightWithGap*(rows-1))+startY
local totalIcons
--Shared Local Event
local event, param1, param2, param3, param4
----Functions
--Clear Terminal Screen Function
local function clearTerm(exit)
  term.setBackgroundColor(termColor)
  term.setTextColor(termTextColor)
  term.clear()
  term.setCursorPos(1,1)
  if exit == "exit" then
    error()
  end
end
--RednetMessage Function
local function rednetMessage(type)
  if type == "enderChest" then
    rednet.send(8,"toggle")
  elseif type == "demonDoorOpen" then
    rednet.send(20,"unlock","doorlock")
  elseif type == "demonDoorShut" then
    rednet.send(20,"lock","doorlock")
  elseif type == "DJ Prev" then
    rednet.send(31,"prev","dj")
  elseif type == "DJ Next" then
    rednet.send(31,"next","dj")
  elseif type == "DJ Toggle" then
    rednet.send(31,"toggle","dj")
  elseif type == "DJ Info" then
    rednet.send(31,"song","dj")
  end
end
--runShell Function
local function runShell(string)
  clearTerm()
  shell.run(string)
  error()
end
--Icon Functions Table
local functionTable = {
  rednetMessage,
  runShell,
  rednetMessage,
  rednetMessage,
  rednetMessage,
  rednetMessage,
  rednetMessage,
  rednetMessage,
  navTopLeft = nil, --Debug/Back
  navTopMiddle = nil,
  navTopRight = clearTerm --X
}
local parameterTable = {
  "enderChest",
  "backupClient",
  "DJprev",
  "DJnext",
  "DJtoggle",
  "DJinfo",
  "demonDoorOpen",
  "demonDoorShut",
  navTopLeft = nil, --Debug/Back
  navTopMiddle = nil,
  navTopRight = "exit"
}
--Redraw Terminal Function
local function termDraw(debugText)
  clearTerm()
  local newLayout = {}
  local i = 1
  for y = startY, yEnd, cellHeightWithGap  do
      for x = startX, xEnd, cellWidthWithGap do
        local buttonText = textTable[i]
        local buttonFunction = functionTable[i]
        local buttonParameter = parameterTable[i]
        paintutils.drawFilledBox(x,y,x+width-1,y+height-1,currentColors[i])
        term.setCursorPos(x+math.floor(width/2)-math.floor(string.len(buttonText)/2),y+math.floor(height/2))
        if currentColors[i] == termTextColor then
            term.setTextColor(termColor)
        else
            term.setTextColor(termTextColor)
        end
        print(buttonText)
        table.insert(newLayout, {x = x,y = y,xEnd=x+width-1,yEnd=y+height-1,bgColor=term.getBackgroundColor(),textColor=term.getTextColor(),text=buttonText,fun=buttonFunction,param=buttonParameter})
        i = i + 1
      end
  end
  totalIcons = i-1
  term.setBackgroundColor(termColor)
  local x, y, buttonText, buttonFunction, buttonParameter, buttonColor
  for z = 1, 3, 1 do
    if z == 1 then
      buttonText = debugText
      --buttonText = textTable.navTopLeft
      buttonFunction = functionTable.navTopLeft
      buttonParameter = parameterTable.navTopLeft
      buttonColor = currentColors.navTopLeft
      x, y = 1, 1
     newLayout.navTopLeft = {x = x,y = y,xEnd=x+string.len(buttonText)-1,yEnd=y,bgColor=buttonColor,textColor=buttonColor,text=buttonText,fun=buttonFunction,param=buttonParameter}
    elseif z == 2 then
      buttonText = textTable.navTopMiddle
      buttonFunction = functionTable.navTopMiddle
      buttonParameter = parameterTable.navTopMiddle
      buttonColor = currentColors.navTopMiddle
      x, y = math.floor(26/2)-math.floor(string.len(buttonText)/2), 1
      newLayout.navTopMiddle = {x = x,y = y,xEnd=x+string.len(buttonText)-1,yEnd=y,bgColor=buttonColor,textColor=buttonColor,text=buttonText,fun=buttonFunction,param=buttonParameter}
    elseif z == 3 then
      buttonText = textTable.navTopRight
      buttonFunction = functionTable.navTopRight
      buttonParameter = parameterTable.navTopRight
      buttonColor = currentColors.navTopRight
      x, y = 26, 1
      newLayout.navTopRight = {x = x-1,y = y,xEnd=x+string.len(buttonText)-1,yEnd=y+1,bgColor=buttonColor,textColor=buttonColor,text=buttonText,fun=buttonFunction,param=buttonParameter}
    end
    term.setCursorPos(x,y)
    term.setTextColor(buttonColor)
    print(buttonText)
    i = i + 1
  end
  for k, v in pairs(newLayout) do
    layout[k] = v
  end
end
----Main Loop
while true do
    termDraw(debugText)
    event, param1, param2, param3, param4 = os.pullEvent()
    if event == "mouse_click" then
        local button, x, y = param1, param2, param3
        for k, v in pairs(layout) do
           if x >= v.x and x <= v.xEnd and y >= v.y and y <= v.yEnd then
                currentColors[k] = pressedColor
           end
        end
    elseif event == "mouse_up" then
        local button, x, y = param1, param2, param3
        for k, v in pairs(layout) do
          if x >= v.x and x <= v.xEnd and y >= v.y and y <= v.yEnd and v.bgColor == pressedColor and v.fun then
            v.fun(v.param)
          end
        end
        for k, v in pairs(originalColors) do
          currentColors[k] = v
        end
    end
end