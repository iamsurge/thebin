#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>


using namespace std;

typedef long long ll;

const int SIZE = 100000;
const int INF = 1000000001;
ll a[SIZE];
vector<pair<ll, ll>> t(SIZE * 4, { -INF, INF });

/*int f(int av, int bv) {
	if (av == INF) return bv;
	if (bv == INF) return av;

	if (a[t[av]] > a[t[bv]]) {
		return av;
	}
	return bv;
}*/

void build(int v, int l, int r) {
	if (r - l == 1) {
		t[v].first = a[l];
		t[v].second = l;
		return;
	}
	int m = (l + r) / 2;
	build(v * 2 + 1, l, m);
	build(v * 2 + 2, m, r);
	
	t[v] = max(t[v * 2 + 1], t[v * 2 + 2]);
}

pair<ll, ll> ask(int v, int lv, int rv, int l, int r) {
	if (lv >= r || rv <= l) {
		return { -INF, INF };
	}
	if (l <= lv && rv <= r) {
		return t[v];
	}
	int m = (lv + rv) / 2;
	pair<ll, ll> r1 = ask(v * 2 + 1, lv, m, l, r);
	pair<ll, ll> r2 = ask(v * 2 + 2, m, rv, l, r);
	return max(r1, r2);
}


int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n;
	cin >> n;

	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}
	
	build(0, 0, n);

	int k;
	cin >> k;

	int l, r;
	for (int i = 0; i < k; i++) {
		cin >> l >> r;
		pair<ll, ll> index = ask(0, 0, n, --l, r);
		cout << index.first << ' ' << index.second + 1 << '\n';
	}
	/*for (ll n = 1; n <= SIZE; n++) {
		a[n - 1] = (n * n) % 12345 + (n * n * n) % 23456;
	}*/
	//build(0, 0, 100000);
}