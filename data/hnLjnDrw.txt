#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/mman.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <errno.h>
#include <pthread.h>
#include <semaphore.h>
#include <time.h>

int tcount, tcounter;
pthread_mutex_t mtx;
sem_t sem;

int barrier_point()
{
    pthread_mutex_lock(&mtx);
    tcounter++;
    pthread_mutex_unlock(&mtx);

    if (tcounter == tcount)
    {
        if (sem_post(&sem))
        {
            perror(NULL);
            return errno;
        }
    }

    if (sem_wait(&sem))
    {
        perror(NULL);
        return errno;
    }

    return 0;
}

void *tfun(void *v)
{
    int *tid = (int *)v;

    printf("%d reached the barrier\n", *tid);
    barrier_point();
    printf("%d passed the barrier\n", *tid);

    free(tid);

    return NULL;
}

int main()
{
    scanf("%d", &tcount);

    pthread_t *thr = (pthread_t *)malloc(tcount * sizeof(pthread_t *));

    if (pthread_mutex_init(&mtx, NULL))
    {
        perror(NULL);
        return errno;
    }

    if (sem_init(&sem, 0, 1))
    {
        perror(NULL);
        return errno;
    }

    for (int i = 0; i < tcount; i++)
    {
        if (pthread_create(&thr[i], NULL, tfun, (void *)&i))
        {
            perror(NULL);
            return errno;
        }
    }

    for (int i = 0; i < tcount; i++)
    {
        if (pthread_join(thr[i], NULL))
        {
            perror(NULL);
            return errno;
        }
    }

    pthread_mutex_destroy(&mtx);
    sem_destroy(&sem);

    return 0;
}
