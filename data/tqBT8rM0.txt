local function readTasks(t)
	if not fs.exists("tasks.txt") then
		return
	end
	local f = fs.open("tasks.txt", "r")
	f.readLine()
	local line = f.readLine()
	while line do
		table.insert(t, line)
		line = f.readLine()
	end
	f.close()
end

local function readPeople(p)
	if not fs.exists("people.txt") then
		return
	end
	local f = fs.open("people.txt", "r")
	local line = f.readLine()
	while line do
		local person = {}
		for arg in line:gmatch("[^ ]+") do
			table.insert(person, arg)
		end
		table.insert(p, person)
	end
end

tasks = {}
readTasks(tasks)

people = {}
readTasks(people)

m = peripheral.find("monitor")
w, h = m.getSize()
selected = -1

tx = -1
ty = -1

term.clear()
term.setCursorPos(1,1)

local function refreshScreen()
	m.clear()
	m.setCursorPos(1, 1)
	
	m.setTextColor(colors.cyan)
	m.write("TASKBOARD v0.5")
	
	m.setTextColor(colors.red)
	m.setCursorPos(1, 2)
	m.write("by Andres ;)")
	
	for n, t in pairs(tasks) do
		m.setTextColor(colors.white)
		if selected == n then 
			m.setTextColor(colors.yellow) 
		end
		m.setCursorPos(1, n + 3)
		m.write(tostring(n))
		m.write(" ")
		m.write(tostring(t))
	end
	if #tasks == 0 then
		m.setCursorPos(1, 4)
		m.setTextColor(colors.white)
		m.write("Write \"new [task description]\" in the terminal to begin...")
	end
end

local function textInput()
	local input = read()
	local args = {}
	for arg in input:gmatch("%S+") do
		table.insert(args, arg)
	end
	if args[1] == "new" then
		local task = ""
		for n, arg in pairs(args) do
			if n ~= 1 then
				if n ~= 2 then
					task = task.." "
				end
				task = task..arg
			end
		end
		
		table.insert(tasks, task)
		local f = fs.open("tasks.txt", "a")
		f.writeLine(task)
		f.close()
	end
	if args[1] == "clear" then
		tasks = {}
		
		local f = fs.open("tasks.txt", "w")
		f.write("balls to the walls")
		f.close()
	end
	if args[1] == "people" then
		for person in people do
			print(person[1].." "..person[2])
	end
end

local function touchInput()
	local _, _, x, y = os.pullEvent("monitor_touch")
	tx = x
	ty = y
	if selected == y - 3 then
	
	end
	if y >= 4 and y <= 3 + #tasks then
		selected = y - 3
	end
end
	
refreshScreen()
while true do
	parallel.waitForAny(textInput, touchInput)
	refreshScreen()
end