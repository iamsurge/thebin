"#include <algorithm>\r\n#include <iostream>\r\n#include <cstdio>\r\n#include <vector>\r\n\r\nint main1() {\r\n  int n = 34;\r\n  std::cin >> n;\r\n  std::cout << (std::cin.operator bool() ? \"Success\" : \"Fail\") << std::endl;\r\n  std::cout << n;\r\n  return 0;\r\n}\r\n\r\nint main2() {\r\n  std::vector<int> v;\r\n  int x = 23;\r\n  while (std::cin >> x) v.push_back(x);\r\n  for (int x : v) std::cout << x << \" \";\r\n  std::cout << std::endl;\r\n  return 0;\r\n}\r\n\r\nint main3() {\r\n  int n = 34, m = 2;\r\n  auto result = scanf(\"%d %d\", &n, &m);\r\n  std::cout << n << \" \" << m << std::endl;\r\n  std::cout << result << std::endl;\r\n  return 0;\r\n}\r\n\r\nint main4() {\r\n  unsigned int a = 0;\r\n  int b = 0;\r\n  std::cin >> a >> b;\r\n  // UNSIGNED!\r\n  auto result = (int)(b - a);\r\n  std::cout << result << std::endl;\r\n  return 0;\r\n}\r\n\r\nvoid BubbleSort(std::vector<int>& v) {\r\n  for (int i = 0; i < v.size(); ++i) {\r\n    bool swapped = false;\r\n    for (int j = 0; j < v.size() - i - 1; ++j) {\r\n      if (v[j + 1] < v[j]) {\r\n        std::swap(v[j], v[j + 1]);\r\n        swapped = true;\r\n      }\r\n    }\r\n    if (!swapped) break;\r\n  }\r\n}\r\n\r\nint main5() {\r\n  std::vector<int> v;\r\n  int x = 0;\r\n  while (std::cin >> x) v.push_back(x);\r\n  BubbleSort(v);\r\n\r\n  for (int x : v) std::cout << x << \" \";\r\n  std::cout << std::endl;\r\n  return 0;\r\n}\r\n\r\ntypedef long long ll;\r\ntypedef void (* TPrintFunction)(int);\r\n\r\n//void PrintVector(const std::vector<int>& v, void (* printer_function)(int)) {\r\nvoid PrintVector(const std::vector<int>& v, TPrintFunction printer_function) {\r\n  for (int x : v) printer_function(x);\r\n  std::cout << std::endl;\r\n}\r\n\r\nvoid SimplePrinter(int x) {\r\n  std::cout << x << \" \";\r\n}\r\n\r\nvoid BeautifulPrinter(int x) {\r\n  std::cout << \"**\" << x << \"** \";\r\n}\r\n\r\nint main6() {\r\n  std::vector<int> v;\r\n  int x = 0;\r\n  while (std::cin >> x) v.push_back(x);\r\n\r\n  PrintVector(v, SimplePrinter);\r\n  PrintVector(v, BeautifulPrinter);\r\n  return 0;\r\n}\r\n\r\nstruct Point {\r\n  int x = 0;\r\n  int y = 0;\r\n//  Вариант 1.\r\n//  bool operator<(const Point& right) {\r\n//    return x * x + y * y < right.x * right.x + right.y * right.y;\r\n//  }\r\n};\r\n\r\n// Вариант 1.\r\nbool operator<(const Point& left, const Point& right) {\r\n  return left.x * left.x + left.y * left.y < right.x * right.x + right.y * right.y;\r\n}\r\n\r\nvoid BubbleSort(std::vector<Point>& v) {\r\n  for (int i = 0; i < v.size(); ++i) {\r\n    bool swapped = false;\r\n    for (int j = 0; j < v.size() - i - 1; ++j) {\r\n      if (v[j + 1] < v[j]) {\r\n        std::swap(v[j], v[j + 1]);\r\n        swapped = true;\r\n      }\r\n    }\r\n    if (!swapped) break;\r\n  }\r\n}\r\n\r\n// Вариант 2. Функция сравнения.\r\nbool CompareByModule(const Point& left, const Point& right) {\r\n  return left.x * left.x + left.y * left.y < right.x * right.x + right.y * right.y;\r\n}\r\n\r\nvoid BubbleSort(std::vector<Point>& v, bool (* comp_function)(const Point&, const Point&)) {\r\n  for (int i = 0; i < v.size(); ++i) {\r\n    bool swapped = false;\r\n    for (int j = 0; j < v.size() - i - 1; ++j) {\r\n      if (comp_function(v[j + 1], v[j])) {\r\n        std::swap(v[j], v[j + 1]);\r\n        swapped = true;\r\n      }\r\n    }\r\n    if (!swapped) break;\r\n  }\r\n}\r\n\r\ntemplate <typename Compare>\r\nvoid BubbleSort2(std::vector<Point>& v, Compare c) {\r\n  for (int i = 0; i < v.size(); ++i) {\r\n    bool swapped = false;\r\n    for (int j = 0; j < v.size() - i - 1; ++j) {\r\n      if (c(v[j + 1], v[j])) {\r\n        std::swap(v[j], v[j + 1]);\r\n        swapped = true;\r\n      }\r\n    }\r\n    if (!swapped) break;\r\n  }\r\n}\r\n\r\n// Функтор.\r\nclass ComparatorByDistance {\r\n public:\r\n  explicit ComparatorByDistance(const Point& center_) : center(center_) {}\r\n  bool operator()(const Point& left, const Point& right) const {\r\n    return SqrDistToCenter(left) < SqrDistToCenter(right);\r\n  }\r\n\r\n private:\r\n  Point center;\r\n\r\n  int SqrDistToCenter(const Point& p) const {\r\n    return (p.x - center.x) * (p.x - center.x) + (p.y - center.y) * (p.y - center.y);\r\n  }\r\n};\r\n\r\nint main7() {\r\n  int n = 0;\r\n  std::cin >> n;\r\n  std::vector<Point> v(n);\r\n  for (int i = 0; i < n; ++i) {\r\n    std::cin >> v[i].x >> v[i].y;\r\n  }\r\n  // Вариант 2.\r\n  BubbleSort(v, CompareByModule);\r\n  // Вариант 2. Передаем лямбду.\r\n  BubbleSort(v, [](const Point& left, const Point& right) -> bool {\r\n    return left.x < right.x;\r\n  });\r\n  // Вариант 3. Передаем все, что имеет ()\r\n  BubbleSort2(v, CompareByModule);\r\n  Point center = {4, 5};\r\n  BubbleSort2(v, ComparatorByDistance(center));\r\n\r\n  BubbleSort2(v, [&center](const Point& left, const Point& right) -> bool {\r\n    auto dist_left = (left.x - center.x) * (left.x - center.x) + (left.y - center.y) * (left.y - center.y);\r\n    auto dist_right = (right.x - center.x) * (right.x - center.x) + (right.y - center.y) * (right.y - center.y);\r\n    return dist_left < dist_right;\r\n  });\r\n  for (const Point& p : v) {\r\n    std::cout << p.x << \" \" << p.y << std::endl;\r\n  }\r\n  return 0;\r\n}\r\n\r\nint main() {\r\n  int n = 0;\r\n  std::cin >> n;\r\n  std::vector<Point> v(n);\r\n  for (int i = 0; i < n; ++i) {\r\n    std::cin >> v[i].x >> v[i].y;\r\n  }\r\n\r\n  std::sort(v.begin(), v.end());\r\n  std::sort(v.begin(), v.end(), ComparatorByDistance({4, 5}));\r\n  // foo\r\n//  std::sort(v.begin(), v.end(), [](Point& left, Point& right) {\r\n//    left.x = 0;\r\n//    right.x = 0;\r\n//    return left.y < right.y;\r\n//  });\r\n\r\n  for (const Point& p : v) {\r\n    std::cout << p.x << \" \" << p.y << std::endl;\r\n  }\r\n  return 0;\r\n}"