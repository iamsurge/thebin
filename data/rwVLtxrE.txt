/*
    lit1numyt_ | Dong Huu Nguyen Khoa
    husband to trantran

    potential future hcmus/broward 's pupil

    codeforces_843DIV2_
*/

#include <iostream>
#include <cmath>
#include <algorithm>
#include <string>
#include <cstring>
#include <vector>
#include <queue>

#define yes cout << "YES" << endl
#define no cout << "NO" << endl

using namespace std;

const int MOD = 1e9 + 7;

    int n, x;
    
    string rev_bin_n;
    string rev_bin_x;

void get_info() {
    cin >> n >> x;
}

string int_to_revBinary(int a) {
    string s;

    while (a != 0) {
        if (a % 2 == 0) {
            s = '0' + s;
            a /= 2;
        }
        else {
            s = '1' + s;
            a /= 2;
        }
    }
    return s;
}

int revBin_to_int(string s) {
    int a;
    
    for (int i = 0; i < s.length() - 1; i++) {
        if (s[i] == '1') {
            a += pow(2, s.length() - i + 1);
        }
    }

    return a;
}

void solve() {
    bool temp_test = true;

    rev_bin_n = int_to_revBinary(n);
    rev_bin_x = int_to_revBinary(x);

    /*
    while (rev_bin_n.length() != rev_bin_x.length()) {
        if (rev_bin_n.length() > rev_bin_x.length()) {
            rev_bin_x = '0' + rev_bin_x;
        }
        else {
            rev_bin_n = '0' + rev_bin_n;
        }
    }
    

    for (int i = 0; i < rev_bin_n.length(); i++) {
        if () {}
    }
    */

    for (int i = 0; i < rev_bin_n.length(); i++) {
        if (rev_bin_n[rev_bin_n.length() - i - 1] == 0 && rev_bin_x[rev_bin_x.length() - i - 1] == 1) {
            temp_test = false;
            break;
        }
    }

    if (!temp_test) {
        cout << -1 << endl;
    }
    else {
        int m = n + 1;
        string temp_str = int_to_revBinary(m);

        while(temp_str.length() != rev_bin_n.length()) {
            rev_bin_n = '0' + rev_bin_n;
        }

        while (!temp_test) {
            for (int i = 0; i < temp_str.length(); i++) {
                if (rev_bin_n[i] != temp_str[i] || (rev_bin_n[i] == '0' && temp_str[i] == '0')) {
                    rev_bin_n[i] = '0';
                }
            }

            if (rev_bin_n == rev_bin_x) {
                cout << m;
                temp_test = true;
                break;
            }
        }
    }
}

void solve_2() {
    bool temp_test = true;

    rev_bin_n = int_to_revBinary(n);
    rev_bin_x = int_to_revBinary(x);

    for (int i = rev_bin_n.length() - 1; i >= 0; i--) {
        if (rev_bin_n[i] == '0' && rev_bin_x[i] == '1') {
            temp_test = false;
            break;
        }
        else {
            if (rev_bin_n[i] == '1' && rev_bin_x[i] == '0') {
                
            }
        }
    }

    while (temp_test) {
        for (int i = rev_bin_n.length() - 1; i >= 0; i--) {
            if (rev_bin_n[i] == '0' && rev_bin_x[i] == '1') {
                temp_test = false;
                break;
            }
            else {
                if (rev_bin_n[i] == '1' && rev_bin_x[i] == '0') {
                    for (int j = rev_bin_n.length() - 1; j >= i; j--) {
                        rev_bin_n[j] = '0';
                    }
                    break;
                }
            }
        }
        cout << revBin_to_int(rev_bin_n) << endl;
        break;
    }

    if (!temp_test) {
        cout << -1 << endl;
    }
}

int main() {
    cin.tie(0)->sync_with_stdio(0);

    freopen("test2.INP", "r", stdin);
    freopen("test2.OUT", "w", stdout);

    int t;
    cin >> t;

    while (t--) {
        get_info();
        if (n == x) {
            cout << n << endl;
        }
        else {
            if (x > n) {
                cout << -1 << endl;
            }
            else {
                solve_2();
            }
        }
    }

    return 0;
}