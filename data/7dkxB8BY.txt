import math
import secrets
from math import cos, sin
#from sympy import Plane, Point3D

import numpy
import numpy as np

x = [           [33.6932617188, 18.4898135437, 345.3688964844],
                [33.6953125, 18.4434756531, 338.1891479492],
                [33.7121582031, 18.424676825, 337.7958984375],
                [33.7905273438, 18.3524112, 335.6885375977],
                [33.7014160156, 18.5942569031, 323.0736694336],
                [33.6882324219, 18.6909854187, 323.0],
                [33.6198730469, 18.7347354187, 323.0],
                [33.5595703125, 18.7600283875, 320.0],
                [33.553125, 18.9066836609, 319.760925293],
                [33.4248046875, 19.2691104187, 314.3520202637],
                [33.3796386719, 19.4231631531, 308.0],
                [33.0849609375, 19.5268008484, 295.3800964355],
                [33.035546875, 19.5253360047, 293.0],
                [32.9620117188, 19.4608828797, 291.0],
                [32.7739257813, 19.3415713562, 290.5145263672],
                [32.7124023438, 19.2664248719, 288.221862793],
                [32.7006835938, 19.2251651062, 285.0],
                [32.5, 19.1013858094, 282.3333435059],
                [32.3553710938, 18.9135928406, 276.5589294434],
                [32.3204101563, 18.8897647156, 274.9507446289],
                [32.0537109375, 18.7986514344, 267.5918273926],
                [32.03671875, 18.7847842469, 258.5031433105],
                [32.0557617188, 18.7234072937, 258.1115722656],
                [32.0112304688, 18.5884951844, 258.0],
                [31.9423828125, 18.5727725281, 256.027130127],
                [31.9198242188, 18.5808779969, 248.632232666],
                [31.7663574219, 18.3506045594, 246.3273468018],
                [31.7037109375, 18.3036563172, 244.0],
                [31.3421875, 18.0427432312, 241.5537261963],
                [31.2072753906, 17.9843936219, 239.0],
                [31.1352539063, 18.0048281922, 237.0],
                [31.1146484375, 18.0086612, 237.0],
                [31.0265625, 18.0485293641, 237.0],
                [30.9840820313, 18.0464541687, 236.6885986328],
                [30.7577148438, 18.1867862, 234.0059204102],
                [30.709375, 18.4496524109, 232.0],
                [30.702734375, 18.4675479187, 232.0],
                [30.5869140625, 18.5934512391, 230.9683532715],
                [30.5047851563, 18.8341006531, 224.0],
                [30.487890625, 19.2046572937, 222.3779449463],
                [30.4909667969, 19.2221133484, 222.3111114502],
                [30.4736328125, 19.2660586609, 222.0],
                [30.4037109375, 19.5700137391, 216.0],
                [30.3985351563, 19.6633487, 213.0],
                [30.3711914063, 19.7247988953, 210.7326049805],
                [30.365625, 19.7727237, 207.9346923828],
                [30.3506835938, 19.7868838562, 206.5472106934],
                [30.5231933594, 20.3472842469, 201.7370300293],
                [30.4182128906, 20.348895575, 197.0605621338],
                [30.3602539063, 20.8142276062, 188.0],
                [30.4096679688, 20.8146426453, 187.3701019287],
                [30.6275390625, 21.0421817078, 184.0169830322],
                [30.69921875, 21.0736026062, 180.9853668213],
                [30.79296875, 21.2771182312, 180.4395446777],
                [30.8090820313, 21.2857119812, 175.8827514648],
                [32.8793945313, 23.9876651062, 133.5745849609],
                [32.880078125, 24.0082461609, 112.276222229],
                [32.87265625, 24.0733096375, 85.9764022827],
                [32.8856445313, 24.1447207703, 84.570892334],
                [32.87734375, 24.2451846375, 83.9794921875],
                [32.9072265625, 24.4104678406, 83.2484283447],
                [32.883203125, 24.5298526062, 82.6792755127],
                [32.930078125, 24.6489444031, 81.4298324585],
                [32.933984375, 24.6885928406, 80.4704742432],
                [32.9272460938, 24.7691104187, 79.9743041992],
                [32.86484375, 24.9275576844, 79.9209747314],
                [32.8813476563, 24.9568545594, 79.2886047363],
                [32.5833984375, 25.2534365906, 78.6028747559],
                [32.5537109375, 25.4241397156, 72.1342849731],
                [32.666015625, 25.7581240906, 71.7863464355],
                [32.7487792969, 25.7893252625, 70.0850830078],
                [32.734765625, 25.8656680359, 69.7865142822],
                [32.731640625, 25.90631745, 68.085609436],
                [32.7397460938, 25.9208438172, 67.9132537842],
                [32.731640625, 26.1385440125, 66.4046173096],
                [32.6171875, 26.1653994812, 65.8916015625],
                [32.0529785156, 26.1859072937, 65.5343780518],
                [32.0415039063, 26.1699404969, 60.4402122498],
                [32.0161132813, 26.1805362, 59.1671180725],
                [31.8926757813, 26.3507022156, 58.215877533],
                [31.8857421875, 26.3618350281, 54.0],
                [31.7901367188, 26.5641543641, 54.0],
                [31.7354492188, 26.5449404969, 54.0],
                [31.7251953125, 26.5430362, 54.0],
                [31.6826171875, 26.6411807312, 53.0],
                [31.4815429688, 26.9068057312, 52.7565536499],
                [31.3527832031, 27.0237490906, 49.3670959473],
                [31.2525390625, 27.1655947937, 47.0],
                [31.18125, 27.2077090516, 45.0],
                [31.1694335938, 27.216864325, 45.0],
                [31.1573242188, 27.2185733094, 45.0],
                [31.1416992188, 27.2065615906, 44.3100357056],
                [31.0077148438, 27.3189639344, 41.057849884],
                [30.8579101563, 27.4411807312, 40.9728126526],
                [30.8488769531, 27.4597842469, 40.576374054],
                [30.8510742188, 27.5777041687, 40.2550048828],
                [30.8575195313, 27.5971133484, 39.6143913269],
                [30.8962402344, 27.6682315125, 39.2733306885],
                [30.8622070313, 27.8155459656, 37.7099227905],
                [30.8563476563, 27.8299014344, 37.5819625854],
                [30.8482421875, 27.8432803406, 36.6074485779],
                [30.8423828125, 28.0065371766, 34.5615501404],
                [30.76171875, 28.1059024109, 33.7199287415],
                [30.7463378906, 28.1332461609, 33.371547699],
                [30.7424316406, 28.1502139344, 32.8322753906],
                [30.8198242188, 28.5076358094, 28.6058368683],
                [30.827734375, 28.5381533875, 28.2556324005],
                [30.83046875, 28.5547061219, 27.9080104828],
                [30.8310546875, 28.5640322937, 27.5567550659],
                [30.8444824219, 28.5976016297, 26.7686271667],
                [30.9073242188, 28.7599551453, 26.3641414642],
                [30.90625, 28.8150576844, 25.5464897156],
                [31.0104980469, 28.9419619812, 24.5177097321],
                [31.0427246094, 29.0083194031, 24.5035820007],
                [31.06640625, 29.0376162781, 23.1112976074],
                [31.1179199219, 29.072333075, 22.597410202],
                [31.2120117188, 29.3482119812, 18.9740695953],
                [31.2157226563, 29.4174258484, 17.9272441864],
                [31.2803710938, 29.696551825, 17.0],
                [31.2724609375, 29.7541690125, 17.0],
                [31.2901367188, 29.7843692078, 15.911854744],
                [31.2374023438, 30.1146182312, 15.0]]



def very_close(x, y):
    return abs(x-y)<=10**-9

def convert_long_lat_alt_to_x_y_z(lon, lat, alt):
    conv = 0.0174532925199
    x = (6378137 + alt) * cos(lat * conv) * cos(lon * conv)
    y = (6378137 + alt) * cos(lat * conv) * sin(lon * conv)
    z = (6378137 + alt) * sin(lat * conv)

    # verify
    distance_to_center_of_earth = 6378137 + alt
    calculated_distance = math.sqrt(x*x+y*y+z*z)
    assert very_close(calculated_distance, distance_to_center_of_earth)

    return [x, y, z]

def x_y_z_of_point(i):
    return convert_long_lat_alt_to_x_y_z(x[i][0], x[i][1], x[i][2])


def convert_long_lat_gravity_vector(lon, lat):
    conv = 0.0174532925199
    x = -cos(lat * conv) * cos(lon * conv)
    y = -cos(lat * conv) * sin(lon * conv)
    z = -sin(lat * conv)

    # verify that it is very close to 1.0
    assert very_close(1.0, (x**2+y**2+z**2))
    return [x,y,z]

def gravity_of_point(i):
    return convert_long_lat_gravity_vector(x[i][0], x[i][1])


def dist_from_line_segment_to_point(p, a, b):
    p=numpy.array(p)
    a=numpy.array(a)
    b=numpy.array(b)

    # this is not my code
    d = np.divide(b - a, np.linalg.norm(b - a))
    s = np.dot(a - p, d)
    t = np.dot(p - b, d)
    h = np.maximum.reduce([s, t, 0])
    c = np.cross(p - a, d)

    return np.hypot(h, np.linalg.norm(c))

#unit test
assert  very_close(1.0, dist_from_line_segment_to_point([3,2,0], [1,1,0], [400,1,0]))
assert  very_close(1.0, dist_from_line_segment_to_point([399,2,0], [1,1,0], [400,1,0]))
assert  very_close(2.0, dist_from_line_segment_to_point([200,3,0], [1,1,0], [400,1,0]))



def calc_bulge():
    print("Caculate the bulge: ")
    start = x_y_z_of_point(0)

    end = x_y_z_of_point(-1)

    ma = 0

    for i in range(1, len(x)):
        cur_point = x_y_z_of_point(i)
        calc = dist_from_line_segment_to_point(cur_point, start, end)
        if calc > ma:
            ma = calc

    # convert meters to miles
    ma /= 1609.344

    # round to the nearest tenth

    ma *= 10
    ma = int(ma)
    ma /= 10.0

    print(f"{ma} miles")
    print()

calc_bulge()



def distance(a, b):
    return math.sqrt(sum([(a[i] - b[i])**2 for i in range(3)]))

def calculate_downhill(a, b, gravity):
    # returns greater than 0 if b is uphill from a
    # returns less than 0 if b is downhill from a
    # return 0 if a == b
    # numbers close to zero may be inaccurate, and should be done with calculus because gravity changes as we move

    assert very_close(1, math.sqrt(sum(gravity[i]**2 for i in range(3))))  # gravity vector should be length 1
    dist = distance(a,b)
    if very_close(0.0, dist):
        return 0.0  # we'll define a point as being neither down nor up from itself, even though it should be undefined

    # plane = Plane(Point3D(a[0], a[1], a[2]), normal_vector=(gravity[0], gravity[1], gravity[2]))
    # if very_close(0.0, plane.distance(Point3D(b[0], b[1], b[2]))):
    #     return 0.0
    # val = plane.projection(Point3D(b[0], b[1], b[2]))
    # ret = -(float(b[0] - val.x) * gravity[0] + float(b[1] - val.y) * gravity[1] + float(b[2] - val.z) * gravity[2])

    dot_product = sum((a[i]-b[i]) * gravity[i] for i in range(3))
    #print(dot_product)

    return dot_product


# test calculate_downhill

for i in range(len(x)):
    assert 0 >  calculate_downhill(x_y_z_of_point(i), [0,0,0], gravity_of_point(i))  # center of earth is straight down from all points for their respective gravity
    assert 0 < calculate_downhill(x_y_z_of_point(i), [i+i for i in x_y_z_of_point(i)], gravity_of_point(i))  # doubling position should be straight up

assert very_close(0, calculate_downhill([5, 5, 5], [13,5,5], [0, -1, 0]))
assert very_close(0, calculate_downhill([5, 5, 5], [5,5,-12], [0, -1, 0]))
assert 0 < calculate_downhill([5, 5, 5], [5,10000,5], [0, -1, 0])
assert 0 <  calculate_downhill([5, 5, 5], [5,6,5], [0, -1, 0])
assert 0 >  calculate_downhill([5, 5, 5], [5,-10000, 5], [0, -1, 0])
assert 0 >  calculate_downhill([5, 5, 5], [5,-4 ,5], [0, -1, 0])

# Test calculate_downhill for points around a unit circle with a random Z, with gravity defined as down in y coord
for ix in range(100):
    xp = math.sin(2*math.pi / 100 * ix)
    yp = math.cos(2*math.pi / 100 * ix)
    zp = secrets.randbelow(10000) /10000.0 - 0.5
    downhill_calc = calculate_downhill([0,0,0], [xp,yp,zp], [0, -1, 0])
    if yp > 0:
        assert downhill_calc >= 0
    elif yp<0:
        assert downhill_calc <= 0

print("Checking every point is downhill from the last")
good, bad = 0, 0

# every point is downhill from the previous one
for i in range(len(x)-1):
    gravity = gravity_of_point(i)
    calc = calculate_downhill(x_y_z_of_point(i), x_y_z_of_point(i+1), gravity)
    if calc < 0.0:
        good += 1
    else:
        bad += 1

print(f"Good bad: {good, bad}")
print()

assert (len(x)-1, 0) == (good, bad)

good, bad = 0, 0
print("Checking every point is uphill from the last")

for i in range(1, len(x)):
    gravity = gravity_of_point(i-1)
    calc = calculate_downhill(x_y_z_of_point(i), x_y_z_of_point(i-1), gravity)
    #print(calc)
    if calc > 0.0:
        good += 1
    else:
        bad += 1

print(f"Good bad: {good, bad}")
print()

assert (len(x)-1, 0) == (good, bad)


good, bad = 0, 0
good2, bad2 = 0, 0
good3, bad3 = 0, 0
print("Erroneously checking every point is downhill from the next using gravity vector at start, at middle, and at end")

for i in range(len(x)-1):
    gravity = gravity_of_point(0)
    calc = calculate_downhill(x_y_z_of_point(i), x_y_z_of_point(i+1), gravity)
    if calc < 0.0:
        good += 1
    else:
        bad += 1
    gravity = gravity_of_point(len(x)//2)
    calc = calculate_downhill(x_y_z_of_point(i), x_y_z_of_point(i+1), gravity)
    if calc < 0.0:
        good2 += 1
    else:
        bad2 += 1
    gravity = gravity_of_point(-1)
    calc = calculate_downhill(x_y_z_of_point(i), x_y_z_of_point(i+1), gravity)
    if calc < 0.0:
        good3 += 1
    else:
        bad3 += 1

print(f"Good bad (WRONG: Gravity start): {good, bad}")
print(f"Good bad (WRONG: Gravity middle): {good2, bad2}")
print(f"Good bad (WRONG: Gravity end): {good3, bad3}")


