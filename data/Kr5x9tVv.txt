/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode mergeTwoLists(ListNode list1, ListNode list2) {

        if(list1 == null) return list2;
        if(list2 == null) return list1;

        ListNode result = new ListNode();
        ListNode result2 = result;

        ListNode pointer1 = list1;
        ListNode pointer2 = list2;

        while(pointer1 != null || pointer2 != null) {
            result.next = new ListNode();
            result = result.next;

            if(pointer1 == null) {
                result.val = pointer2.val;
                pointer2 = pointer2.next;
                continue;
            }

            if(pointer2 == null) {
                result.val = pointer1.val;
                pointer1 = pointer1.next;
                continue;
            }

            if(pointer1.val < pointer2.val) {
                result.val = pointer1.val;
                pointer1 = pointer1.next;
            } else if(pointer2.val < pointer1.val) {
                result.val = pointer2.val;
                pointer2 = pointer2.next;
            } else {
                result.val = pointer1.val;
                result.next = new ListNode();
                result = result.next;
                result.val = pointer2.val;

                pointer1 = pointer1.next;
                pointer2 = pointer2.next;
            }
        }
        
        return result2.next;
    }
}