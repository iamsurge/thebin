import sys

def minInTab( tab) :
    res = sys.maxsize
    for i in tab:
        if i[1]<res:
            res = i[1]
    return res

def maxInTab( tab) :
    res = -sys.maxsize
    for i in tab:
        if i[1]>res:
            res = i[1]
    return res

def lastIndex( tab , direction) -> int:
    if(len(tab) > 1):
        if( 'U' in direction and tab[-1][0] == 'D'):
            return (tab[-2][1] - tab[-1][1])
        if('D' in direction and tab[-1][0] == 'U'):
            return tab[-2][1] - tab[-1][1]   
        if('L' in direction and tab[-1][0] == 'R'):
            return tab[-2][1] - tab[-1][1]
        if('R' in direction and tab[-1][0] == 'L'):
            return tab[-2][1] - tab[-1][1]
        if('D' in direction and tab[-1][0] == 'D' and tab[-1][1] != maxInTab( tab)):
            return  maxInTab( tab) - tab[-1][1]
        if('U' in direction and tab[-1][0] == 'U' and tab[-1][1] != minInTab( tab)):
            return  minInTab( tab) - tab[-1][1]
        if('R' in direction and tab[-1][0] == 'R' and tab[-1][1] != maxInTab( tab)):
            return  maxInTab( tab) - tab[-1][1]
        if('L' in direction and tab[-1][0] == 'L' and tab[-1][1] != minInTab( tab)):
            return  minInTab( tab) - tab[-1][1]
    else:
        return tab[-1][1]
    return -1


# Auto-generated code below aims at helping you parse
# the standard input according to the problem statement.

# w: width of the building.
# h: height of the building.
w, h = [int(i) for i in input().split()]
n = int(input())  # maximum number of turns before game over.
x0, y0 = [int(i) for i in input().split()]


ord = []
abs = []


# game loop
while True:
    bomb_dir = input()  # the direction of the bombs from batman's current location (U, UR, R, DR, D, DL, L or UL)
    print("Debug ",bomb_dir, ord,  file=sys.stderr, flush=True)
    print("Debug abs",bomb_dir, abs,  file=sys.stderr, flush=True)
    # Write an action using print
    # To debug: print("Debug messages...", file=sys.stderr, flush=True)
    if(bomb_dir == 'U'):
        if(len(ord) !=0):
            if(lastIndex(ord, bomb_dir) != -1):
                y0-= -1 * (lastIndex(ord, bomb_dir)) //2 if (lastIndex(ord, bomb_dir)) //2<0 else (lastIndex(ord, bomb_dir)) //2                
            else:
                y0-= y0 //2
        else:
            y0-= y0 //2
        ord.append(('U', y0))
    if(bomb_dir == 'UR'):
        if(len(ord) !=0):
            if(lastIndex(ord, bomb_dir) != -1):
                y0-= -1 * (lastIndex(ord, bomb_dir)) //2 if (lastIndex(ord, bomb_dir)) //2<0 else (lastIndex(ord, bomb_dir)) //2
            else:
                y0-= y0 //2                
        else:
            y0-= y0 //2

        if(len(abs) !=0):
            if(lastIndex(abs, bomb_dir) != -1):
                x0+= -1 * (lastIndex(abs, bomb_dir)) //2 if (lastIndex(abs, bomb_dir)) //2<0 else (lastIndex(abs, bomb_dir)) //2
            else:
                x0 += (w - x0) //2
        else:
            x0 += (w - x0) //2
        ord.append(('U', y0))
        abs.append(('R', x0))
    if(bomb_dir == 'R'):
        if(len(abs) !=0):
            if(lastIndex(abs, bomb_dir) != -1):
                x0+= -1 * (lastIndex(abs, bomb_dir)) //2 if (lastIndex(abs, bomb_dir)) //2<0 else (lastIndex(abs, bomb_dir)) //2
            else:
                x0 += (w - x0) //2
        else:
            x0 += (w - x0) //2
        abs.append(('R', x0))
    if(bomb_dir == 'DR'):
        if(len(ord) !=0):
            if(lastIndex(ord, bomb_dir) != -1):
                y0+= -1 * (lastIndex(ord, bomb_dir)) //2 if (lastIndex(ord, bomb_dir)) //2 <0 else (lastIndex(ord, bomb_dir)) //2
            else:
                y0 += (h - y0) //2              
        else:
            y0 += (h - y0) //2
        if(len(abs) !=0):
            if(lastIndex(abs, bomb_dir) != -1):
                x0+= -1 * (lastIndex(abs, bomb_dir)) //2 if (lastIndex(abs, bomb_dir)) //2<0 else (lastIndex(abs, bomb_dir)) //2
            else:
                x0 += (w - x0) //2
        else:
            x0 += (w - x0) //2
        ord.append(('D', y0))
        abs.append(('R', x0))
    if(bomb_dir == 'D'):
        if(len(ord) !=0):
            if(lastIndex(ord, bomb_dir) != -1):
                y0+= -1 * (lastIndex(ord, bomb_dir)) //2 if (lastIndex(ord, bomb_dir)) //2<0 else (lastIndex(ord, bomb_dir)) //2
            else:
                y0 += (h - y0) //2              
        else:
            y0 += (h - y0) //2
        ord.append(('D', y0))
    if(bomb_dir == 'DL'):
        if(len(abs) !=0):
            if(lastIndex(abs, bomb_dir) != -1):
                x0-= -1 * (lastIndex(abs, bomb_dir)) //2 if (lastIndex(abs, bomb_dir)) //2<0 else (lastIndex(abs, bomb_dir)) //2
            else:
                x0-= x0 //2
        else:
            x0-= x0 //2
        if(len(ord) !=0):
            if(lastIndex(ord, bomb_dir) != -1):
                y0+= -1 * (lastIndex(ord, bomb_dir)) //2 if (lastIndex(ord, bomb_dir)) //2<0 else (lastIndex(ord, bomb_dir)) //2
            else:
                y0 += (h - y0) //2              
        else:
            y0 += (h - y0) //2
        ord.append(('D', y0))
        abs.append(('L', x0))
    if(bomb_dir == 'L'):
        if(len(abs) !=0):
            if(lastIndex(abs, bomb_dir) != -1):
                x0-= -1 * (lastIndex(abs, bomb_dir)) //2 if (lastIndex(abs, bomb_dir)) //2<0 else (lastIndex(abs, bomb_dir)) //2
            else:
                x0-= x0 //2
        else:
            x0-= x0 //2
        abs.append(('L', x0))
    if(bomb_dir == 'UL'):
        if(len(ord) !=0):
            if(lastIndex(ord, bomb_dir) != -1):
                y0-= -1 * (lastIndex(ord, bomb_dir)) //2 if (lastIndex(ord, bomb_dir)) //2<0 else (lastIndex(ord, bomb_dir)) //2
            else:
                y0-= y0 //2
        else:
            y0-= y0 //2

        if(len(abs) !=0):
            if(lastIndex(abs, bomb_dir) != -1):
                x0-= -1 * (lastIndex(abs, bomb_dir)) //2 if (lastIndex(abs, bomb_dir)) //2<0 else (lastIndex(abs, bomb_dir)) //2
            else:
                x0-= x0 //2
        else:
            x0-= x0 //2
        ord.append(('U', y0))
        abs.append(('L', x0))
    print(x0,y0)

