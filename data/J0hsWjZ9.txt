What is JavaScript?
A scripting programming language used to communicate with machines through logical instructions.
It is a best practise to used JavaScript along with HTML and CSS.

Also know as ECMAScript (ES5,ES6)

#1 Data Types

Primitive Data Types:
1. Undefined: Exist's but isn't defined. 

--> Let a;
    console.log(a)  // Undefined

2. Null: Empty 

--> Let a=null;
    console.log(a) // Null

3. String: A character or a group of chharacters   | Name="KAran";

--> Let a='Karan';
    console.log(a)  / Karan

4. Number: A digit or sequence of digits

--> Let a=5;
    console.log(a)  // 5

5. Symbol: Symbol is an integrated or built-in constructor in Javascript which returns a symbol in primitive data types.

--> const symbol1 = Symbol();   // true
    const symbol1 = Symbol('foo');  // true

    const ('xyz') = Symbol('foo');  // false
    const symbol = new Symbol();  // TypeError

6. Boolean: A logical datatype with true and false as output

--> Let a=10;
    Let b=20;
    if(a > b ) {
        console.log(a)  // false
    }


--> Boolean('')           // flase
--> Boolean(0)            // false
--> Boolean(-0)           // flase
--> Boolean(null)         // false
--> Boolean(NaN)          // flase
--> Boolean(undefined)    // flase
--> Boolean(false)        // false

--> Boolean([])           // true
--> Boolean({})           // true
--> Boolean(Symbol())     // true
--> Boolean(1)            // true
--> Boolean(NaN)          // flase
--> Boolean(undefined)    // flase
--> Boolean(false)        // false

7. BigInt: 
8. Strict: "==="

#3 Let | Var | Const

    Let: Scope: Block {} | Redeclare = No | Reassign = yes 
    Var: Scope: Function () | Redeclare = Yes | Reassign = yes 
    Const:  Scope: Block {} | Redeclare = No | Reassign = No 


    Reassign : 
    Let a = 5;
    a = 6;

    Redeclare : 
    Let a = 5;
    var a = 6;

#4  Function

    Function hello(){
     console.log("Hello dear!")
    }

    Parameter | Argument
    function(a)
    function(a,b)  // Parameter
    function("a","b")  // Argument
    function("hello",a,b)  // Argument and Parameters

    Function Declaration
        function hello();  // Semicolon means decalred;

    Function Expression
    const hello = Hello(){
        ///
        ///
    }

    Example:
    Expression -->
                    console.log(error());
                    let error = function(){
                        return "Error in the code";
                    }

    Declaration -->  Never loaded before the execution of code
                    console.log(error());
                    function error(){
                        return "Error in the code";
                    }

#5 Arrow Function  // Anonymous
    
    const hello = function(a,b){   // Regular Function
        console.log("hello",a,b)
    }

    const hello = (a,b) => {   // Arrow Function
        console.log("hello",a,b)
    }


#6 Loops

    For
        for(<start>; <stop>; <step>)
            {
                ///// codes
            }


    While
    <script>
         let a=1,b=1,c;
         console.log("Fibonacci Series");

         while(a<30)
            {
                console.log(a + "&nbsp;");
                c=a+b;
                a=b;
                b=c;
            }
    </script>        

#7 Return Value
    A function always return certain value when called, its known as return value.
    If value is not defined in the function the it will return "undefined".


#8 Scope
    
    Global Scope: All the variables defined outside the function.
    Local/Function Scope: All the variables defined inside the function.

#9 Shadowing:

    Global variable can be overridden inside a function.
    Ex: 
        let var1 = 10;
        let var2 = 15;
        const sum = var1 + var2;
        if(true){
            Add();
            function Add(){
                let var1 = 15;
                console.log(sum)  // 30 
            }
        }
#10 Hoisting

--> All the function declaration are hoisted on the top of the scope before the execution of javascript.
--> Function can be called before defining.
--> Only declaration is hoisted, Assignment paer doesn't.
--> Best practise: 1. Define the function at the top of the script.
                   2. Define the variable at the top of function.

Ex: // Declaration is hoisted only
        function hello(){           // hello dear
            console.log(Hi);
            let Hi = "hello dear";
        }

Ex: // Equivalent function
        function hello(){           // hello dear
            let Hi;
            console.log(Hi);
            Hi =  "hello dear";
        }

Ex: // Preventing the global access for hoisting
        let Hi = "hello";
        funcion hello(){
            console.log(Hi);   // undefined
            let Hi = "how are you doing?"
        }
        hello();   // undefined

#11 Function as a Parameters

--> A function can be passed as a parameter inside another function.
    Ex: function Sum(Add()){
        /////
    }

    1. Function Expression
        --> Function stored in a variable. | Ex: Let Sum = function Add(){  //  }
        --> Anonymous function
        --> function must be called using variable name.

              Let Sum = function Add(){
                  // body codes
             }

                Sum();
        --> Function expression are not hoisted.


        Ex: 
            hello();  // It is not a function
            let hello = function(){
                console.log("hello");
            }


            let hello;   // Equivalent function
            hello();
            hello = function(){
                console.log("hello");
            }