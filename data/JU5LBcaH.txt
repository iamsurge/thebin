海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥向风而行@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"displayName\":\"麒麟.D🐰\",\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"动态分类\",\"path\":\"dt\",\"rule\":\"const empty = \\\"hiker://empty\\\"\\n\\ntry {\\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\\n} catch (e) {\\n    var categories = pdfa(html, 大类定位)\\n}\\n\\nlet init_cate = []\\n\\nfor (let i = 0; i < 20; i++) {\\n    init_cate.push(\\\"0\\\")\\n}\\n\\nconst fold = getVar(MY_RULE.group, \\\"0\\\")\\nconst cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))\\nconst cate_temp = JSON.parse(cate_temp_json)\\n\\nif (parseInt(page) === 1) {\\n\\n    d.push({\\n        title: \\\"🔍\\\",\\n        url: \\\"'hiker://search?rule=\\\" + MY_RULE.title + \\\"&s='+input\\\",\\n        desc: \\\"搜你想看...\\\",\\n        col_type: \\\"input\\\"\\n    });\\n\\n    d.push({\\n        title: fold === '1' ? '““””<b><span style=\\\"color: #19B89D\\\">: (</span></b>' : '““””<b><span style=\\\"color: #910113\\\">: )</span></b>',\\n        url: $().lazyRule((fold) => {\\n            putVar(MY_RULE.group, fold === '1' ? '0' : '1');\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, fold),\\n        col_type: 'scroll_button',\\n    })\\n\\ncategories.forEach((category, index) => {\\n        let sub_categories = pdfa(category, 小类定位);\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = []\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putVar(MY_RULE.title, JSON.stringify(new_cate))\\n                        putVar(MY_RULE.url, input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        } else if (fold === '1') {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        params.cate_temp[params.index] = params.key.toString()\\n\\n                        putVar(MY_RULE.title, JSON.stringify(params.cate_temp))\\n                        putVar(MY_RULE.url, input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        index: index,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        }\\n    })\\n}\\n\"}],\"saved\":false,\"title\":\"轻合集.家娃\",\"version\":0,\"url\":\"https://www.viplanguang.com/index.php/vod/detail/id/50892.html#immersiveTheme#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_1\",\"find_rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\n\\nvar lazy = $('').lazyRule(() => {\\n\\n    function toUrl(playUrl) {\\n        if (/mgtv|sohu/.test(playUrl)) {\\n            return playUrl + \\\";{User-Agent@Mozilla/5.0 (Windows NT 10.0)}\\\";\\n        } else if (/bili/.test(playUrl)) {\\n            return playUrl + \\\";{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com}\\\";\\n        } else if (/ixigua/.test(playUrl)) {\\n            return playUrl + \\\"#isVideo=true#\\\" + \\\"#.mp4;{Referer@https://www.ixigua.com/&&User-Agent@Mozilla/5.0}\\\";\\n        } else {\\n            return playUrl;\\n        }\\n    }\\n\\n    var playUrl = \\\"\\\";\\n    try {\\n        var html = request(input, {});\\n        var player_data = JSON.parse(html.match(/r player_.*?=(.*?)</)[1]);\\n        playUrl = player_data.url;\\n        if (player_data.encrypt == '1') {\\n            playUrl = unescape(player_data.url);\\n        } else if (player_data.encrypt == '2') {\\n            playUrl = unescape(base64Decode(player_data.url));\\n        };\\n        //如果播放地址存在m3u8等扩展名直接返回\\n        var exclude = /playm3u8|m3u8\\\\.tv|min\\\\.css|404\\\\.m3u8|\\\\.css/;\\n        var contain = /\\\\.mp4|\\\\.m3u8|\\\\.flv|\\\\.avi|\\\\.mpeg|\\\\.wmv|\\\\.mov|\\\\.rmvb|\\\\.dat|qqBFdownload|mime=video%2F|video_mp4/;\\n        if (!exclude.test(playUrl) && contain.test(playUrl)) {\\n            return toUrl(playUrl);\\n        }\\n        var apiUrl = 'https://jx.quankan.app/api.php';\\n        var jsonStr = request(apiUrl, {\\n            headers: {\\n                \\\"User-Agent\\\": MOBILE_UA\\n            },\\n            body: \\\"url=\\\" + playUrl + \\\"&ac=jx\\\",\\n            method: \\\"POST\\\"\\n        });\\n        if (jsonStr != '') {\\n            var json = JSON.parse(jsonStr);\\n            if (json.code == 200) {\\n                playUrl = json.url;\\n                return toUrl(playUrl);\\n            } else {\\n                return 'toast://解析失败。'\\n            }\\n        } else {\\n            return 'toast://解析失败。'\\n        }\\n\\n    } catch (e) {\\n        //setError(e);\\n        return 'toast://嗅探异常，可能链接无法访问。'\\n    }\\n});\\n\\n//线路名列表的定位\\nvar arts = parseDomForArray(html, 'body&&.module-tab-item');\\n\\n//线路名列表名称的定位\\nvar tabs = [];\\nfor (var i in arts) {\\n    tabs.push(parseDomForHtml(arts[i], 'span&&Text'))\\n}\\n\\n//播放列表的列表的定位\\nvar conts = parseDomForArray(html, 'body&&.scroll-box-y');\\nvar lists = [];\\nfor (var i in conts) {\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\n}\\n\\nvar 导演 = parseDomForHtml(html, '.video-info-items:contains(导演)&&Text').replace(/\\\\//g, ' ');\\n\\nvar 主演 = parseDomForHtml(html, '.video-info-items:contains(主演)&&Text').replace(/\\\\//g, ' ');\\n\\nvar 更新 =  parseDomForHtml(html, '.video-info-items:contains(上映||备注)&&Text').replace(/\\\\//g, ' ');\\n\\nvar 状态 = parseDomForHtml(html, '.video-info-items:contains(集数)&&Text').replace(/\\\\//g, ' ');\\n\\nvar 图片 =  parseDom(html, '.lazyload&&data-src') + '@Referer=';\\n\\nvar 简介 = parseDomForHtml(html, '.vod_content&&span&&Text').replace(/\\\\//g, ' ');\\n\\n\\n\\nvar Color = \\\"#f13b66a\\\";\\nvar Color1 = \\\"#098AC1\\\";\\n\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"' + Color + '\\\">' + title + '</front></strong>';\\n}\\nlet line_model = 8;\\nlet line_type_model = 'blank_block';\\nd.push({\\n    title: 导演 + '\\\\n' + 主演,\\n    desc: 更新 + '\\\\n' + 状态,\\n    pic_url: 图片,\\n    url: MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\nd.push({\\n    title: '‘‘’’<small><font color=\\\"#ff148e8e\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\"red\\\">详情</font></small></small>',\\n    url: 'hiker://empty#' + '\\\\n' + 简介 + `@rule=js:var res = {}; var d = [];d.push({title:'影片简介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\n    col_type: 'text_1'\\n});\\nfor (let i = 0; i < line_model; i++) {\\n    d.push({\\n        col_type: line_type_model\\n    })\\n}\\n\\nfunction setTabs(tabs, vari) {\\n    for (var i in tabs) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? getHead(tabs[i]) : tabs[i],\\n            url: url,\\n            col_type: 'scroll_button'\\n        })\\n    }\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\n\\nfunction setLists(lists, index) {\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\nif (getVar('shsort') == '1') {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#0aa344\\\">↑</font></small>' + '<small><font color=\\\"#ff4c00\\\">↓</font></small>';\\n} else {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#ff4c00\\\">↑</font></small>' + '<small><font color=\\\"#0aa344\\\">↓</font></small>';\\n}\\n\\nfunction setLists(lists, index) {\\n    d.push({\\n        title: '‘‘’’<span style=\\\"color:' + Color1 + '\\\"><small>选集列表</small>' + '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span style=\\\"float:right\\\">' + '<small>' + sx + '</small>',\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功';'#noHistory#hiker://empty'`,\\n        col_type: 'text_center_1'\\n    })\\n    var list = lists[index];\\n\\n    if (getVar('shsort') == '1') {\\n        try {\\n            for (var j = list.length - 1; j >= 0; j--) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url: parseDom(list[j], 'a&&href') + lazy,\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2',\\n                    extra: {\\n    blockRules: ['.css', '.gif', '.jpg', '.jpeg', '.png', '.ico', '.svg', 'cnzz', 'google', 'xn--*:*', 'hm.baidu.com', '/ads/*.js', '.m3u8', '.mp4'],\\n    jsLoadingInject: true\\n}\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n    } else {\\n        try {\\n            for (var j = 0; j < list.length; j++) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url: parseDom(list[j], 'a&&href') + lazy,\\n                    col_type: list.length > 4 ? 'text_5' : 'text_2',\\n                    extra: {\\n    blockRules: ['.css', '.gif', '.jpg', '.jpeg', '.png', '.ico', '.svg', 'cnzz', 'google', 'xn--*:*', 'hm.baidu.com', '/ads/*.js', '.m3u8', '.mp4'],\\n    jsLoadingInject: true\\n}\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n\\n    }\\n}\\nsetTabs(tabs, MY_URL);\\nsetLists(lists, getVar(MY_URL, '0'));\\nd.push({\\n    title: '<br>',\\n    col_type: 'rich_text'\\n});\\nsetResult(d);\",\"group\":\"轻合集.家娃\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"动态分类\\\",\\\"path\\\":\\\"dt\\\",\\\"rule\\\":\\\"const empty = \\\\\\\"hiker://empty\\\\\\\"\\\\n\\\\ntry {\\\\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\\\\n} catch (e) {\\\\n    var categories = pdfa(html, 大类定位)\\\\n}\\\\n\\\\nlet init_cate = []\\\\n\\\\nfor (let i = 0; i < 20; i++) {\\\\n    init_cate.push(\\\\\\\"0\\\\\\\")\\\\n}\\\\n\\\\nconst fold = getVar(MY_RULE.group, \\\\\\\"0\\\\\\\")\\\\nconst cate_temp_json = getVar(MY_RULE.title, JSON.stringify(init_cate))\\\\nconst cate_temp = JSON.parse(cate_temp_json)\\\\n\\\\nif (parseInt(page) === 1) {\\\\n\\\\n    d.push({\\\\n        title: \\\\\\\"🔍\\\\\\\",\\\\n        url: \\\\\\\"'hiker://search?rule=\\\\\\\" + MY_RULE.title + \\\\\\\"&s='+input\\\\\\\",\\\\n        desc: \\\\\\\"搜你想看...\\\\\\\",\\\\n        col_type: \\\\\\\"input\\\\\\\"\\\\n    });\\\\n\\\\n    d.push({\\\\n        title: fold === '1' ? '““””<b><span style=\\\\\\\"color: #19B89D\\\\\\\">: (</span></b>' : '““””<b><span style=\\\\\\\"color: #910113\\\\\\\">: )</span></b>',\\\\n        url: $().lazyRule((fold) => {\\\\n            putVar(MY_RULE.group, fold === '1' ? '0' : '1');\\\\n            refreshPage(false);\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, fold),\\\\n        col_type: 'scroll_button',\\\\n    })\\\\n\\\\ncategories.forEach((category, index) => {\\\\n        let sub_categories = pdfa(category, 小类定位);\\\\n        if (index === 0) {\\\\n            sub_categories.forEach((item, key) => {\\\\n                let title = pdfh(item, 分类标题)\\\\n                d.push({\\\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\\\\\"color: ' + 分类颜色 + '\\\\\\\">' + title + '</span></b>' : title,\\\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\\\n                        let new_cate = []\\\\n                        params.cate_temp.forEach((cate, index) => {\\\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\\\\\"0\\\\\\\")\\\\n                        })\\\\n                        putVar(MY_RULE.title, JSON.stringify(new_cate))\\\\n                        putVar(MY_RULE.url, input)\\\\n                        refreshPage(true)\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, {\\\\n                        cate_temp: cate_temp,\\\\n                        key: key,\\\\n                        page: page,\\\\n                    }),\\\\n                    col_type: 'scroll_button',\\\\n                })\\\\n            })\\\\n            d.push({\\\\n                col_type: \\\\\\\"blank_block\\\\\\\"\\\\n            });\\\\n        } else if (fold === '1') {\\\\n            sub_categories.forEach((item, key) => {\\\\n                let title = pdfh(item, 分类标题)\\\\n                d.push({\\\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\\\\\"color: ' + 分类颜色 + '\\\\\\\">' + title + '</span></b>' : title,\\\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\\\n                        params.cate_temp[params.index] = params.key.toString()\\\\n\\\\n                        putVar(MY_RULE.title, JSON.stringify(params.cate_temp))\\\\n                        putVar(MY_RULE.url, input)\\\\n                        refreshPage(true)\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, {\\\\n                        cate_temp: cate_temp,\\\\n                        index: index,\\\\n                        key: key,\\\\n                        page: page,\\\\n                    }),\\\\n                    col_type: 'scroll_button',\\\\n                })\\\\n            })\\\\n            d.push({\\\\n                col_type: \\\\\\\"blank_block\\\\\\\"\\\\n            });\\\\n        }\\\\n    })\\\\n}\\\\n\\\"}]\"}","picUrl":"https://pic6.iqiyipic.com/image/20221226/c7/cc/a_100493610_m_601_m10_260_360.jpg@Referer=","title":"向风而行"}