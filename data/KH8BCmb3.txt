海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥小小说月刊·下半月@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"目录\",\"path\":\"catalogue\",\"rule\":\"js:\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet readTheme = getItem('readTheme', 'false') == 'true' ? '#readTheme#' : '',\\n    fullTheme = getItem('fullTheme', 'true') == 'true' ? '#fullTheme#' : '',\\n    url = MY_PARAMS.href,\\n    data_list = JSON.parse(request(url, {\\n        headers: headers\\n    })).data_list;\\n\\nlet d = [];\\nd.push({\\n    title: data_list.title + \\\"\\\\n\\\" + data_list.qishu,\\n    desc: \\\"““””\\\" + \\\"点我查看往期期刊\\\".bold().big(),\\n    img: data_list.img,\\n    col_type: 'movie_1_vertical_pic_blur',\\n    url: \\\"hiker://page/history\\\",\\n    extra: {\\n        href: \\\"https://api.lifves.com/magazine/history?mag_id=\\\" + data_list.mag_id,\\n        title: data_list.title,\\n        img: data_list.img\\n    }\\n})\\nd.push({\\n    title: '目录'.big().bold(),\\n    col_type: 'rich_text'\\n})\\n\\nlet stroge = {};\\nfor (let i in data_list.ml) {\\n    let list = data_list.ml[i].list;\\n    for (let j in list) {\\n        stroge[list[j].title] = \\\"https://api.lifves.com/magazine/read?read_id=\\\" + list[j].read_id;\\n    }\\n}\\nsaveFile('stroge', JSON.stringify(stroge));\\nlet star = Object.keys(stroge);\\n\\nfor (let i in data_list.ml) {\\n    let item = data_list.ml[i];\\n    d.push({\\n        title: '““””<strong>▶' + item.title + '</strong>',\\n        col_type: 'text_1',\\n        url: \\\"hiker://empty\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n\\n    item.list.forEach(e => {\\n        let index = star.indexOf(e.title);\\n        d.push({\\n            title: '““””&nbsp;&nbsp;&nbsp;&nbsp;•' + e.title,\\n            col_type: 'text_1',\\n            url: 'hiker://page/text' + fullTheme + readTheme,\\n            extra: {\\n                lineVisible: false,\\n                href: \\\"https://api.lifves.com/magazine/read?read_id=\\\" + e.read_id,\\n                index: index\\n            }\\n        })\\n    })\\n}\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"获取请求头\",\"path\":\"getHeaders\",\"rule\":\" function random_char(t) {\\n     for (var n = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], i = '', e = 0; e < t; e++) {\\n         var o = Math.ceil(35 * Math.random())\\n         i += n[o]\\n     }\\n     return i\\n }\\n\\n function getSecretdate() {\\n     var t = parseInt((new Date()).getTime() / 1e3)\\n     var n = random_char(32)\\n     var i = 'timestamp=' + t + '&nonce=' + n\\n     return i\\n }\\n\\n\\n var secretdate = getSecretdate()\\n var secreted = md5(secretdate + 'apilifves5201314')\\n\\n var headers = {\\n     'Secret-Date': secretdate,\\n     'Secreted': secreted,\\n     \\\"Content-Type\\\": \\\"application/json;charset=utf-8\\\"\\n }\"},{\"col_type\":\"movie_3\",\"name\":\"往期期刊\",\"path\":\"history\",\"rule\":\"js:\\naddListener('onClose', 'clearVar(\\\"year\\\")');\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet d = [],\\n    {\\n        href: url,\\n        title: name,\\n        img\\n    } = MY_PARAMS,\\n    collection = JSON.parse(readFile('collection') || '{}'),\\n    isCollected = !!(collection[name] && collection[name].url == url),\\n    data_list = JSON.parse(request(url, {\\n        headers: headers\\n    })).data_list;\\nsetPageTitle(name);\\nsetLastChapterRule('js:' + $.toString(() => {\\n    eval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\n    let url = MY_PARAMS.href,\\n        data_list = JSON.parse(request(url, {\\n            headers: headers\\n        })).data_list,\\n        data = data_list[0].data[0].qishu;\\n    setResult('最新：' + data);\\n}));\\nd.push({\\n    title: isCollected ? '♥已收藏' : '♡添加收藏',\\n    url: $().lazyRule((is, url, name, img) => {\\n        let collection = JSON.parse(readFile('collection') || '{}');\\n        if (is) {\\n            delete collection[name];\\n            saveFile('collection', JSON.stringify(collection));\\n            refreshPage();\\n            return 'toast://已取消收藏'\\n        } else {\\n            collection[name] = {\\n                url: url,\\n                img: img\\n            };\\n            saveFile('collection', JSON.stringify(collection));\\n            refreshPage();\\n            return 'toast://已添加收藏'\\n        }\\n    }, isCollected, url, name, img),\\n    col_type: \\\"scroll_button\\\",\\n});\\n\\nlet data = {},\\n    now = getVar('year', String(data_list[0].year));\\nfor (let list of data_list) {\\n    if (now == list.year) data = list.data;\\n    d.push({\\n        title: '““””' + (list.year == now ? '<font color=red>' + list.year + '</font>' : list.year),\\n        col_type: 'scroll_button',\\n        url: $().lazyRule((year) => {\\n            putVar('year', String(year));\\n            refreshPage();\\n            return 'hiker://empty'\\n        }, list.year)\\n    });\\n}\\nfor (let item of data) {\\n    d.push({\\n        title: item.qishu,\\n        url: 'hiker://page/catalogue#immersiveTheme#',\\n        img: item.img,\\n        extra: {\\n            href: \\\"https://api.lifves.com/magazine/book?mag_id=\\\" + item.mag_id + \\\"&qishu=\\\" + item.qishu\\n        }\\n    });\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"文章\",\"path\":\"text\",\"rule\":\"js:\\naddListener('onClose', $.toString(() => {\\n    clearVar('texthref');\\n    clearVar('texttitle');\\n    clearVar('textindex');\\n}));\\nlet click = getItem('click', 'true'),\\n    fontsize = parseInt(getItem('fontsize', String(17))),\\n    indent = parseInt(getItem('indent', String(7))),\\n    indents = '';\\nfor (let i = 0; i < indent; i++) {\\n    indents += '&nbsp;';\\n}\\nlet stroge = JSON.parse(readFile('stroge')),\\n    star = Object.keys(stroge);\\n\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet index = parseInt(getVar('textindex') || MY_PARAMS.index),\\n    href = getVar('texthref', '') || MY_PARAMS.href,\\n    data_list = JSON.parse(request(href, {\\n        headers: headers\\n    })).data_list;\\n\\nlet d = [];\\nd.push({\\n    title: '““””<h2>' + data_list.title + '</h2>',\\n    col_type: 'text_center_1',\\n    url: \\\"http://qk.demo.lifves.com/book/read/\\\" + data_list.mag_id + \\\"/\\\" + data_list.qishu + \\\"/\\\" + data_list.read_id,\\n    extra: {\\n        lineVisible: false\\n    }\\n}, {\\n    title: data_list.content.replace(/\\\\>[a-zA-Z0-9+=\\\\-\\\\/]*\\\\</g, '><').replace(/(\\\\<p\\\\>\\\\s*)+\\\\</g,'<').replace(/\\\\<p\\\\>/g, '<p>' + indents),\\n    col_type: 'rich_text',\\n    extra: {\\n        textSize: fontsize,\\n        click: click\\n    }\\n})\\nif (index != 0) {\\n    let title = star[index - 1];\\n    let href = stroge[title];\\n    d.push({\\n        title: '上一篇:' + title,\\n        col_type: 'text_center_1',\\n        url: $('hiker://empty#noLoading#').lazyRule((href, title, index) => {\\n            putVar('texthref', href);\\n            putVar('texttitle', title);\\n            putVar('textindex', String(index - 1));\\n            refreshPage();\\n            return 'hiker://empty'\\n        }, href, title, index),\\n        extra: {\\n            href: href,\\n            lineVisible: false\\n        }\\n    })\\n}\\nif (index != star.index) {\\n    let title = star[index + 1];\\n    let href = stroge[title];\\n    d.push({\\n        title: '下一篇:' + title,\\n        col_type: 'text_center_1',\\n        url: $('hiker://empty#noLoading#').lazyRule((href, title, index) => {\\n            putVar('texthref', href);\\n            putVar('texttitle', title);\\n            putVar('textindex', String(index + 1));\\n            refreshPage();\\n            return 'hiker://empty'\\n        }, href, title, index),\\n        extra: {\\n            href: href,\\n            lineVisible: false\\n        }\\n    })\\n}\\nfor (let i = 0; i < 10; i++) {\\n    d.push({\\n        col_type: 'blank_block'\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"设置页\",\"path\":\"setting\",\"rule\":\"js:\\nlet d = [];\\nlet fontsize = parseInt(getItem('fontsize', String(17)));\\nlet indent = parseInt(getItem('indent', String(7)));\\nlet indents = '';\\nfor (let i = 0; i < indent; i++) {\\n    indents += '&nbsp;';\\n}\\nlet readTheme = getItem('readTheme','false');\\nlet fullTheme = getItem('fullTheme', 'true');\\nlet click = getItem('click', 'true');\\n\\nd.push({\\n    title: '阅读模式' + (readTheme == 'true' ? '✔' : '✘'),\\n    col_type: 'text_3',\\n    url: readTheme == 'true' ? $('hiker://empty#noLoading#').lazyRule(() => {\\n        setItem('readTheme', 'false');\\n        refreshPage();\\n        return 'hiker://empty';\\n    }) :$('注意：开启阅读模式后,全屏模式设置和字号设置将不起作用！').confirm(() => {\\n        setItem('readTheme', 'true');\\n        refreshPage();\\n        return 'hiker://empty';\\n    })\\n})\\nd.push({\\n    title: '全屏模式' + (fullTheme == 'true' ? '✔' : '✘'),\\n    col_type: 'text_3',\\n    url: $('hiker://empty#noLoading#').lazyRule((i) => {\\n        setItem('fullTheme', i == 'true' ? 'false' : 'true');\\n        refreshPage();\\n        return 'hiker://empty';\\n    }, fullTheme)\\n})\\nd.push({\\n    title: '点击翻页' + (click == 'true' ? '✔' : '✘'),\\n    col_type: 'text_3',\\n    url: $('hiker://empty#noLoading#').lazyRule((i) => {\\n        setItem('click', i == 'true' ? 'false' : 'true');\\n        refreshPage();\\n        return 'hiker://empty';\\n    }, click)\\n})\\n\\nd.push({\\n    title: '调整字号'.big().bold(),\\n    col_type: 'rich_text'\\n})\\nd.push({\\n    title: '字号➕',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('fontsize', String(s + 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, fontsize)\\n}, {\\n    title: '字号➖',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('fontsize', String(s - 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, fontsize)\\n})\\n\\nd.push({\\n    col_type: 'line'\\n})\\n\\nd.push({\\n    title: '调整缩进'.big().bold(),\\n    col_type: 'rich_text'\\n})\\nd.push({\\n    title: '缩进➕',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('indent', String(s + 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, indent)\\n}, {\\n    title: '缩进➖',\\n    col_type: 'flex_button',\\n    url: $(\\\"hiker://empty#noLoading#\\\").lazyRule((s) => {\\n        setItem('indent', String(s - 1));\\n        refreshPage(false);\\n        return \\\"hiker://empty\\\"\\n    }, indent)\\n})\\n\\nd.push({\\n    col_type: 'line'\\n})\\n\\nd.push({\\n    title: '预览'.big() + '(字号:' + fontsize + ',缩进:' + indent + ')',\\n    col_type: 'rich_text'\\n}, {\\n    title: '<p>小棉袄帅吗?</p><p>小棉袄怎么这么帅？</p><p>小棉袄真是超超超超超超超超级帅!!!!帅炸了好不好？举世颜无双!!!!</p>'.replace(/\\\\<p\\\\>/g, '<p>' + indents),\\n    col_type: 'rich_text',\\n    extra: {\\n        textSize: fontsize\\n    }\\n})\\nsetResult(d);\"}],\"params\":\"{\\\"href\\\":\\\"https://api.lifves.com/magazine/book?mag_id=705&qishu=2022年7期\\\"}\",\"saved\":false,\"title\":\"期刊杂志demo\",\"version\":0,\"url\":\"hiker://page/catalogue#immersiveTheme#\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\neval(JSON.parse(fetch(\\\"hiker://page/getHeaders\\\")).rule);\\nlet readTheme = getItem('readTheme', 'false') == 'true' ? '#readTheme#' : '',\\n    fullTheme = getItem('fullTheme', 'true') == 'true' ? '#fullTheme#' : '',\\n    url = MY_PARAMS.href,\\n    data_list = JSON.parse(request(url, {\\n        headers: headers\\n    })).data_list;\\n\\nlet d = [];\\nd.push({\\n    title: data_list.title + \\\"\\\\n\\\" + data_list.qishu,\\n    desc: \\\"““””\\\" + \\\"点我查看往期期刊\\\".bold().big(),\\n    img: data_list.img,\\n    col_type: 'movie_1_vertical_pic_blur',\\n    url: \\\"hiker://page/history\\\",\\n    extra: {\\n        href: \\\"https://api.lifves.com/magazine/history?mag_id=\\\" + data_list.mag_id,\\n        title: data_list.title,\\n        img: data_list.img\\n    }\\n})\\nd.push({\\n    title: '目录'.big().bold(),\\n    col_type: 'rich_text'\\n})\\n\\nlet stroge = {};\\nfor (let i in data_list.ml) {\\n    let list = data_list.ml[i].list;\\n    for (let j in list) {\\n        stroge[list[j].title] = \\\"https://api.lifves.com/magazine/read?read_id=\\\" + list[j].read_id;\\n    }\\n}\\nsaveFile('stroge', JSON.stringify(stroge));\\nlet star = Object.keys(stroge);\\n\\nfor (let i in data_list.ml) {\\n    let item = data_list.ml[i];\\n    d.push({\\n        title: '““””<strong>▶' + item.title + '</strong>',\\n        col_type: 'text_1',\\n        url: \\\"hiker://empty\\\",\\n        extra: {\\n            lineVisible: false\\n        }\\n    })\\n\\n    item.list.forEach(e => {\\n        let index = star.indexOf(e.title);\\n        d.push({\\n            title: '““””&nbsp;&nbsp;&nbsp;&nbsp;•' + e.title,\\n            col_type: 'text_1',\\n            url: 'hiker://page/text' + fullTheme + readTheme,\\n            extra: {\\n                lineVisible: false,\\n                href: \\\"https://api.lifves.com/magazine/read?read_id=\\\" + e.read_id,\\n                index: index\\n            }\\n        })\\n    })\\n}\\n\\nsetResult(d);\",\"group\":\"①推荐\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"目录\\\",\\\"path\\\":\\\"catalogue\\\",\\\"rule\\\":\\\"js:\\\\neval(JSON.parse(fetch(\\\\\\\"hiker://page/getHeaders\\\\\\\")).rule);\\\\nlet readTheme = getItem('readTheme', 'false') == 'true' ? '#readTheme#' : '',\\\\n    fullTheme = getItem('fullTheme', 'true') == 'true' ? '#fullTheme#' : '',\\\\n    url = MY_PARAMS.href,\\\\n    data_list = JSON.parse(request(url, {\\\\n        headers: headers\\\\n    })).data_list;\\\\n\\\\nlet d = [];\\\\nd.push({\\\\n    title: data_list.title + \\\\\\\"\\\\\\\\n\\\\\\\" + data_list.qishu,\\\\n    desc: \\\\\\\"““””\\\\\\\" + \\\\\\\"点我查看往期期刊\\\\\\\".bold().big(),\\\\n    img: data_list.img,\\\\n    col_type: 'movie_1_vertical_pic_blur',\\\\n    url: \\\\\\\"hiker://page/history\\\\\\\",\\\\n    extra: {\\\\n        href: \\\\\\\"https://api.lifves.com/magazine/history?mag_id=\\\\\\\" + data_list.mag_id,\\\\n        title: data_list.title,\\\\n        img: data_list.img\\\\n    }\\\\n})\\\\nd.push({\\\\n    title: '目录'.big().bold(),\\\\n    col_type: 'rich_text'\\\\n})\\\\n\\\\nlet stroge = {};\\\\nfor (let i in data_list.ml) {\\\\n    let list = data_list.ml[i].list;\\\\n    for (let j in list) {\\\\n        stroge[list[j].title] = \\\\\\\"https://api.lifves.com/magazine/read?read_id=\\\\\\\" + list[j].read_id;\\\\n    }\\\\n}\\\\nsaveFile('stroge', JSON.stringify(stroge));\\\\nlet star = Object.keys(stroge);\\\\n\\\\nfor (let i in data_list.ml) {\\\\n    let item = data_list.ml[i];\\\\n    d.push({\\\\n        title: '““””<strong>▶' + item.title + '</strong>',\\\\n        col_type: 'text_1',\\\\n        url: \\\\\\\"hiker://empty\\\\\\\",\\\\n        extra: {\\\\n            lineVisible: false\\\\n        }\\\\n    })\\\\n\\\\n    item.list.forEach(e => {\\\\n        let index = star.indexOf(e.title);\\\\n        d.push({\\\\n            title: '““””&nbsp;&nbsp;&nbsp;&nbsp;•' + e.title,\\\\n            col_type: 'text_1',\\\\n            url: 'hiker://page/text' + fullTheme + readTheme,\\\\n            extra: {\\\\n                lineVisible: false,\\\\n                href: \\\\\\\"https://api.lifves.com/magazine/read?read_id=\\\\\\\" + e.read_id,\\\\n                index: index\\\\n            }\\\\n        })\\\\n    })\\\\n}\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"获取请求头\\\",\\\"path\\\":\\\"getHeaders\\\",\\\"rule\\\":\\\" function random_char(t) {\\\\n     for (var n = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'], i = '', e = 0; e < t; e++) {\\\\n         var o = Math.ceil(35 * Math.random())\\\\n         i += n[o]\\\\n     }\\\\n     return i\\\\n }\\\\n\\\\n function getSecretdate() {\\\\n     var t = parseInt((new Date()).getTime() / 1e3)\\\\n     var n = random_char(32)\\\\n     var i = 'timestamp=' + t + '&nonce=' + n\\\\n     return i\\\\n }\\\\n\\\\n\\\\n var secretdate = getSecretdate()\\\\n var secreted = md5(secretdate + 'apilifves5201314')\\\\n\\\\n var headers = {\\\\n     'Secret-Date': secretdate,\\\\n     'Secreted': secreted,\\\\n     \\\\\\\"Content-Type\\\\\\\": \\\\\\\"application/json;charset=utf-8\\\\\\\"\\\\n }\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"往期期刊\\\",\\\"path\\\":\\\"history\\\",\\\"rule\\\":\\\"js:\\\\naddListener('onClose', 'clearVar(\\\\\\\"year\\\\\\\")');\\\\neval(JSON.parse(fetch(\\\\\\\"hiker://page/getHeaders\\\\\\\")).rule);\\\\nlet d = [],\\\\n    {\\\\n        href: url,\\\\n        title: name,\\\\n        img\\\\n    } = MY_PARAMS,\\\\n    collection = JSON.parse(readFile('collection') || '{}'),\\\\n    isCollected = !!(collection[name] && collection[name].url == url),\\\\n    data_list = JSON.parse(request(url, {\\\\n        headers: headers\\\\n    })).data_list;\\\\nsetPageTitle(name);\\\\nsetLastChapterRule('js:' + $.toString(() => {\\\\n    eval(JSON.parse(fetch(\\\\\\\"hiker://page/getHeaders\\\\\\\")).rule);\\\\n    let url = MY_PARAMS.href,\\\\n        data_list = JSON.parse(request(url, {\\\\n            headers: headers\\\\n        })).data_list,\\\\n        data = data_list[0].data[0].qishu;\\\\n    setResult('最新：' + data);\\\\n}));\\\\nd.push({\\\\n    title: isCollected ? '♥已收藏' : '♡添加收藏',\\\\n    url: $().lazyRule((is, url, name, img) => {\\\\n        let collection = JSON.parse(readFile('collection') || '{}');\\\\n        if (is) {\\\\n            delete collection[name];\\\\n            saveFile('collection', JSON.stringify(collection));\\\\n            refreshPage();\\\\n            return 'toast://已取消收藏'\\\\n        } else {\\\\n            collection[name] = {\\\\n                url: url,\\\\n                img: img\\\\n            };\\\\n            saveFile('collection', JSON.stringify(collection));\\\\n            refreshPage();\\\\n            return 'toast://已添加收藏'\\\\n        }\\\\n    }, isCollected, url, name, img),\\\\n    col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n});\\\\n\\\\nlet data = {},\\\\n    now = getVar('year', String(data_list[0].year));\\\\nfor (let list of data_list) {\\\\n    if (now == list.year) data = list.data;\\\\n    d.push({\\\\n        title: '““””' + (list.year == now ? '<font color=red>' + list.year + '</font>' : list.year),\\\\n        col_type: 'scroll_button',\\\\n        url: $().lazyRule((year) => {\\\\n            putVar('year', String(year));\\\\n            refreshPage();\\\\n            return 'hiker://empty'\\\\n        }, list.year)\\\\n    });\\\\n}\\\\nfor (let item of data) {\\\\n    d.push({\\\\n        title: item.qishu,\\\\n        url: 'hiker://page/catalogue#immersiveTheme#',\\\\n        img: item.img,\\\\n        extra: {\\\\n            href: \\\\\\\"https://api.lifves.com/magazine/book?mag_id=\\\\\\\" + item.mag_id + \\\\\\\"&qishu=\\\\\\\" + item.qishu\\\\n        }\\\\n    });\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"文章\\\",\\\"path\\\":\\\"text\\\",\\\"rule\\\":\\\"js:\\\\naddListener('onClose', $.toString(() => {\\\\n    clearVar('texthref');\\\\n    clearVar('texttitle');\\\\n    clearVar('textindex');\\\\n}));\\\\nlet click = getItem('click', 'true'),\\\\n    fontsize = parseInt(getItem('fontsize', String(17))),\\\\n    indent = parseInt(getItem('indent', String(7))),\\\\n    indents = '';\\\\nfor (let i = 0; i < indent; i++) {\\\\n    indents += '&nbsp;';\\\\n}\\\\nlet stroge = JSON.parse(readFile('stroge')),\\\\n    star = Object.keys(stroge);\\\\n\\\\neval(JSON.parse(fetch(\\\\\\\"hiker://page/getHeaders\\\\\\\")).rule);\\\\nlet index = parseInt(getVar('textindex') || MY_PARAMS.index),\\\\n    href = getVar('texthref', '') || MY_PARAMS.href,\\\\n    data_list = JSON.parse(request(href, {\\\\n        headers: headers\\\\n    })).data_list;\\\\n\\\\nlet d = [];\\\\nd.push({\\\\n    title: '““””<h2>' + data_list.title + '</h2>',\\\\n    col_type: 'text_center_1',\\\\n    url: \\\\\\\"http://qk.demo.lifves.com/book/read/\\\\\\\" + data_list.mag_id + \\\\\\\"/\\\\\\\" + data_list.qishu + \\\\\\\"/\\\\\\\" + data_list.read_id,\\\\n    extra: {\\\\n        lineVisible: false\\\\n    }\\\\n}, {\\\\n    title: data_list.content.replace(/\\\\\\\\>[a-zA-Z0-9+=\\\\\\\\-\\\\\\\\/]*\\\\\\\\</g, '><').replace(/(\\\\\\\\<p\\\\\\\\>\\\\\\\\s*)+\\\\\\\\</g,'<').replace(/\\\\\\\\<p\\\\\\\\>/g, '<p>' + indents),\\\\n    col_type: 'rich_text',\\\\n    extra: {\\\\n        textSize: fontsize,\\\\n        click: click\\\\n    }\\\\n})\\\\nif (index != 0) {\\\\n    let title = star[index - 1];\\\\n    let href = stroge[title];\\\\n    d.push({\\\\n        title: '上一篇:' + title,\\\\n        col_type: 'text_center_1',\\\\n        url: $('hiker://empty#noLoading#').lazyRule((href, title, index) => {\\\\n            putVar('texthref', href);\\\\n            putVar('texttitle', title);\\\\n            putVar('textindex', String(index - 1));\\\\n            refreshPage();\\\\n            return 'hiker://empty'\\\\n        }, href, title, index),\\\\n        extra: {\\\\n            href: href,\\\\n            lineVisible: false\\\\n        }\\\\n    })\\\\n}\\\\nif (index != star.index) {\\\\n    let title = star[index + 1];\\\\n    let href = stroge[title];\\\\n    d.push({\\\\n        title: '下一篇:' + title,\\\\n        col_type: 'text_center_1',\\\\n        url: $('hiker://empty#noLoading#').lazyRule((href, title, index) => {\\\\n            putVar('texthref', href);\\\\n            putVar('texttitle', title);\\\\n            putVar('textindex', String(index + 1));\\\\n            refreshPage();\\\\n            return 'hiker://empty'\\\\n        }, href, title, index),\\\\n        extra: {\\\\n            href: href,\\\\n            lineVisible: false\\\\n        }\\\\n    })\\\\n}\\\\nfor (let i = 0; i < 10; i++) {\\\\n    d.push({\\\\n        col_type: 'blank_block'\\\\n    })\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"设置页\\\",\\\"path\\\":\\\"setting\\\",\\\"rule\\\":\\\"js:\\\\nlet d = [];\\\\nlet fontsize = parseInt(getItem('fontsize', String(17)));\\\\nlet indent = parseInt(getItem('indent', String(7)));\\\\nlet indents = '';\\\\nfor (let i = 0; i < indent; i++) {\\\\n    indents += '&nbsp;';\\\\n}\\\\nlet readTheme = getItem('readTheme','false');\\\\nlet fullTheme = getItem('fullTheme', 'true');\\\\nlet click = getItem('click', 'true');\\\\n\\\\nd.push({\\\\n    title: '阅读模式' + (readTheme == 'true' ? '✔' : '✘'),\\\\n    col_type: 'text_3',\\\\n    url: readTheme == 'true' ? $('hiker://empty#noLoading#').lazyRule(() => {\\\\n        setItem('readTheme', 'false');\\\\n        refreshPage();\\\\n        return 'hiker://empty';\\\\n    }) :$('注意：开启阅读模式后,全屏模式设置和字号设置将不起作用！').confirm(() => {\\\\n        setItem('readTheme', 'true');\\\\n        refreshPage();\\\\n        return 'hiker://empty';\\\\n    })\\\\n})\\\\nd.push({\\\\n    title: '全屏模式' + (fullTheme == 'true' ? '✔' : '✘'),\\\\n    col_type: 'text_3',\\\\n    url: $('hiker://empty#noLoading#').lazyRule((i) => {\\\\n        setItem('fullTheme', i == 'true' ? 'false' : 'true');\\\\n        refreshPage();\\\\n        return 'hiker://empty';\\\\n    }, fullTheme)\\\\n})\\\\nd.push({\\\\n    title: '点击翻页' + (click == 'true' ? '✔' : '✘'),\\\\n    col_type: 'text_3',\\\\n    url: $('hiker://empty#noLoading#').lazyRule((i) => {\\\\n        setItem('click', i == 'true' ? 'false' : 'true');\\\\n        refreshPage();\\\\n        return 'hiker://empty';\\\\n    }, click)\\\\n})\\\\n\\\\nd.push({\\\\n    title: '调整字号'.big().bold(),\\\\n    col_type: 'rich_text'\\\\n})\\\\nd.push({\\\\n    title: '字号➕',\\\\n    col_type: 'flex_button',\\\\n    url: $(\\\\\\\"hiker://empty#noLoading#\\\\\\\").lazyRule((s) => {\\\\n        setItem('fontsize', String(s + 1));\\\\n        refreshPage(false);\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, fontsize)\\\\n}, {\\\\n    title: '字号➖',\\\\n    col_type: 'flex_button',\\\\n    url: $(\\\\\\\"hiker://empty#noLoading#\\\\\\\").lazyRule((s) => {\\\\n        setItem('fontsize', String(s - 1));\\\\n        refreshPage(false);\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, fontsize)\\\\n})\\\\n\\\\nd.push({\\\\n    col_type: 'line'\\\\n})\\\\n\\\\nd.push({\\\\n    title: '调整缩进'.big().bold(),\\\\n    col_type: 'rich_text'\\\\n})\\\\nd.push({\\\\n    title: '缩进➕',\\\\n    col_type: 'flex_button',\\\\n    url: $(\\\\\\\"hiker://empty#noLoading#\\\\\\\").lazyRule((s) => {\\\\n        setItem('indent', String(s + 1));\\\\n        refreshPage(false);\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, indent)\\\\n}, {\\\\n    title: '缩进➖',\\\\n    col_type: 'flex_button',\\\\n    url: $(\\\\\\\"hiker://empty#noLoading#\\\\\\\").lazyRule((s) => {\\\\n        setItem('indent', String(s - 1));\\\\n        refreshPage(false);\\\\n        return \\\\\\\"hiker://empty\\\\\\\"\\\\n    }, indent)\\\\n})\\\\n\\\\nd.push({\\\\n    col_type: 'line'\\\\n})\\\\n\\\\nd.push({\\\\n    title: '预览'.big() + '(字号:' + fontsize + ',缩进:' + indent + ')',\\\\n    col_type: 'rich_text'\\\\n}, {\\\\n    title: '<p>小棉袄帅吗?</p><p>小棉袄怎么这么帅？</p><p>小棉袄真是超超超超超超超超级帅!!!!帅炸了好不好？举世颜无双!!!!</p>'.replace(/\\\\\\\\<p\\\\\\\\>/g, '<p>' + indents),\\\\n    col_type: 'rich_text',\\\\n    extra: {\\\\n        textSize: fontsize\\\\n    }\\\\n})\\\\nsetResult(d);\\\"}]\",\"proxy\":\"\"}","picUrl":"https://cimg.fx361.com/images/2022/07/20/cnqkimagesguscgusc202207-l.jpg","title":"小小说月刊·下半月"}