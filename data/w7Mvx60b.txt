Set = {}
Set.prototype = {}
Set.mt = {}

function Set.new(t) -- 2nd version
    local set = {}
    setmetatable(set, Set.mt)
    for _, l in ipairs(t) do set[l] = true end
    return set
end

Set.mt.__add = function(a, b)
    if getmetatable(a) ~= Set.mt or
        getmetatable(b) ~= Set.mt then
        error("attempt to `add' a set with a non-set value", 2)
    end

    local res = Set.new {}
    for k in pairs(a) do res[k] = true end
    for k in pairs(b) do res[k] = true end
    return res
end

Set.mt.__mul = function(a, b)
    if getmetatable(a) ~= Set.mt or
        getmetatable(b) ~= Set.mt then
        error("attempt to `mul' a set with a non-set value", 2)
    end

    local res = Set.new {}
    for k in pairs(a) do
        res[k] = b[k]
    end
    return res
end

Set.mt.__le = function(a, b)
    if getmetatable(a) ~= Set.mt or
        getmetatable(b) ~= Set.mt then
        error("attempt to `<=' a set with a non-set value", 2)
    end
    for k in pairs(a) do
        if not b[k] then return false end
    end
    return true
end

Set.mt.__lt = function(a, b)
    if getmetatable(a) ~= Set.mt or
        getmetatable(b) ~= Set.mt then
        error("attempt to `<' a set with a non-set value", 2)
    end
    return a <= b and not (b <= a)
end

Set.mt.__eq = function(a, b)
    return a <= b and b <= a
end

Set.mt.__tostring = function (set)
    local s = "{"
    local sep = ""
    for e in pairs(set) do
        s = s .. sep .. e
        sep = ", "
    end
    return s .. "}"
end

function Set.print(s)
    print(Set.tostring(s))
end

Set.mt.__metatable = "private"