esphome:
  name: seng
  platform: ESP8266
  board: d1_mini
  arduino_version: latest

wifi:
  ssid: "xxx"
  password: "xxx"
  power_save_mode: none
    

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Seng Fallback Hotspot"
    password: "flNAudh7es6k"

captive_portal:

globals:
  - id: tare
    type: float
    #initial_value: '0'
    
  - id: auto_tare_difference
    type: float
    restore_value: yes
    initial_value: '0'
    
  - id: initial_zero
    type: float
    restore_value: yes
    # NOTE: make sure to align this value to the one used in "calibrate_linear" below!
    initial_value: '1636270.0'
     

sensor:
  - platform: hx711
    id: smart_scale_hx711_value_raw
    internal: True
    dout_pin: D0
    clk_pin: D1
    gain: 128
    accuracy_decimals: 3
    update_interval: 250ms  #1.0s
    filters:
      - lambda: |-
            float MIN_VALUE = 1.0;
            float MAX_VALUE = 8884595.0;
            if (MIN_VALUE <= x && x <= MAX_VALUE) return x;
            else return {};
      - sliding_window_moving_average:
          window_size: 3
          send_every: 1
      - delta: 800
    on_value:
      then:
        - if:
            condition:
              sensor.in_range:
                id: smart_scale_hx711_value_raw
                above: 1
            then:
              - sensor.template.publish:
                  id: smart_scale_hx711_value
                  state: !lambda 'return id(smart_scale_hx711_value_raw).state;'
        - if:
            condition:
              # current smart scale value is below approx. 10KG (raw value -275743) aka nobody is standing on the scale
              - lambda: 'return id(smart_scale_hx711_value).state < 10.0;'
              - sensor.in_range:
                  id: smart_scale_hx711_value_raw
                  above: 1
            then:
              - if:
                  condition:
                    # current raw scale value is below expected zero value
                    - lambda: 'return id(smart_scale_hx711_value_raw).state < (id(initial_zero) - id(auto_tare_difference));'
                  then:
                    # INcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) += 10;
                  else:
                    # DEcrease Auto-Tare offset to slowly align real zero value with expected zero value
                    - lambda: |-
                        id(auto_tare_difference) -= 10;
    on_raw_value:
      then:
        - if:
            condition:
              sensor.in_range:
                id: smart_scale_hx711_value_raw
                above: 1
            then:
              - sensor.template.publish:
                  id: advalue
                  state: !lambda "return x;"
            

    
  # Mapped value to KG
  - platform: template
    id: smart_scale_hx711_value
    name: "Seng belastning"
    icon: mdi:weight-kilogram
    internal: False
    filters:
      # apply auto_tare difference
      - lambda: 'return x + id(auto_tare_difference);'
      # apply rough calibration
      - calibrate_linear:
          # retrieve these values by evaluating the raw values with loads of known mass.
          # note that a bigger difference between measurements usually results in higher resolution,
          # so measure 0 Kg and the highest known mass you have (like f.ex. your own weight, measured by a normal scale with good accuracy)
          - 1636270.0 -> 0.0
          - 2424253.0 -> 80.0
      # map values below 0.1 to 0 (to decrease value changes due to random fluctuation)
      - lambda: |-
          if (x <= 0.1) {
            return 0.0;
          } else {
            return x;
          }
    unit_of_measurement: kg
    accuracy_decimals: 1
    update_interval: 1s #1s

#### Raw A/D værdi ####
  - platform: template
    name: "HX711 A/D værdi"
    id: advalue
    icon: mdi:draw
    unit_of_measurement: AD
    accuracy_decimals: 0
    filters:
      - delta: 400
    
  - platform: wifi_signal
    name: "WiFi Signal i soveværelset"
    update_interval: 60s
    
binary_sensor:
  - platform: status
    name: "Seng status"
    
switch:
  - platform: restart
    name: "ESP seng reboot"
# Enable logging
logger:
  level: INFO

# Enable Home Assistant API
api:

ota:
