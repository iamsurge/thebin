#include <iostream>
using namespace std;

void merge(int arr[], int from, int mid, int to)
{
	
	int leftSize = mid - from + 1;
	int rightArr = to - mid;

	int* leftArr = new int[leftSize];
	int* rigthArr = new int[rightArr];

	for (int i = 0; i < leftSize; i++) leftArr[i] = arr[from + i];
	for (int j = 0; j < rightArr; j++) rigthArr[j] = arr[mid + 1 + j];


	int leftIndex = 0;
	int rightIndex = 0;
	int newIndex = from;

	while (leftIndex < leftSize && rightIndex < rightArr) {
		if (leftArr[leftIndex] <= rigthArr[rightIndex]) arr[newIndex++] = leftArr[leftIndex++];
		else arr[newIndex++] = rigthArr[rightIndex++];
		cnt++;
	}

	while (leftIndex < leftSize) arr[newIndex++] = leftArr[leftIndex++];

	while (rightIndex < rightArr) arr[newIndex++] = rigthArr[rightIndex++];
}

void mergeSort(int array[], int const begin, int const end) {
	if (begin >= end) return;
	int mid = begin + (end - begin) / 2;
	mergeSort(array, begin, mid);
	mergeSort(array, mid + 1, end);
	merge(array, begin, mid, end);
}

void printArray(int A[], int size) {
	for (auto i = 0; i < size; i++) cout << A[i] << " ";
	cout << endl;
}

int main()
{
	int arr[] = { 1,2,3,5,7,8 };
	int arr_size = sizeof(arr) / sizeof(arr[0]);

	printArray(arr, arr_size);
	merge(arr, 0, 2, arr_size - 1);
	printArray(arr, arr_size);


	return 0;
}