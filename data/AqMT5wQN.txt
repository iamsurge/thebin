#include <bits/stdc++.h>

using namespace std;
using ll = long long;

constexpr int N = 1e5 + 5;
int n;
int a[N];
int cnt[N * 2];

void Read()
{
    cin >> n;
    for (int i = 1; i <= n; ++i)
    	cin >> a[i];
}

ll Cal(const vector<pair<int, int>> &lm, const vector<pair<int, int>> &rm, int m)
{
    ll ans = 0;

    // Maximum and minimum is in a[l..m-1]
    for (int i = 0, H = 0; i < lm.size(); ++i)
    {
        while (H < rm.size() && rm[H].first > lm[i].first && rm[H].second < lm[i].second)
            ++H;
        if (H > 0 && H + i >= lm[i].second - lm[i].first)
            ++ans;
    }

    // Minimum in a[l..m-1] and maximum in a[m+1..r]
    // Reset mang dem
    for (int i = 0; i < lm.size(); ++i)
        cnt[lm[i].first - (m - i) + N] = 0;

    for (int i = 0, L = 0, R = 0; i < lm.size(); ++i)
    {
        while (R < rm.size() && rm[R].first > lm[i].first)
        {
            ++cnt[rm[R].second - (R + m + 1) + N];
            ++R;
        }
        while (L < R && rm[L].second <= lm[i].second)
        {
            --cnt[rm[L].second - (L + m + 1) + N];
            ++L;
        }
        ans += cnt[lm[i].first - (m - i) + N];
    }

    return ans;
}

ll DAC(int l, int r)
{
    if (l > r)
        return 0;
    if (l == r)
        return 1;

    int m = (l + r) / 2;
    ll ans = DAC(l, m) + DAC(m + 1, r); // Bằng cách này, ta chỉ cần sử dụng một mảng đếm trong hàm Cal()

    vector<pair<int, int>> lm({{a[m], a[m]}}), rm({{a[m + 1], a[m + 1]}});

    for (int i = m - 1; i >= l; --i)
        lm.emplace_back(min(a[i], lm.back().first), max(a[i], lm.back().second));
    for (int i = m + 2; i <= r; ++i)
        rm.emplace_back(min(a[i], rm.back().first), max(a[i], rm.back().second));

    return ans + Cal(lm, rm, m) + Cal(rm, lm, n - (m + 1) + 1);
}

void Solve()
{
    cout << DAC(1, n);
}

int32_t main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    Read();
    Solve();
}
