void solve() {
    string s;
    cin >> s;
    int n = s.size();
    vector<int> p(n);
    iota(all(p), 0);
    double start = clock();
    while ((clock() - start) / CLOCKS_PER_SEC < 1.6) {
        shuffle(all(p), rnd);
        string t;
        for (int i = 0; i < n; i++) t += s[p[i]];
        int flag = 1;
        for (int i = 0; i < n; i++) {
            flag &= (s[i] != t[i]);
        }
        if (flag) {
            cout << s << "\n" << t << "\n";
            return;
        }
    }
    string t = s;
    sort(all(s));
    reverse(all(s));
    sort(all(t));
    for (int _ = 0; _ < n; _++) {
        int flag = 1;
        for (int i = 0; i < n; i++) {
            flag &= (s[i] != t[i]);
        }
        if (flag) {
            cout << s << "\n" << t << "\n";
            return;
        }
        char v = t[0];
        t.erase(t.begin());
        t += v;
    }
    reverse(all(s));
    for (int _ = 0; _ < n; _++) {
        int flag = 1;
        for (int i = 0; i < n; i++) {
            flag &= (s[i] != t[i]);
        }
        if (flag) {
            cout << s << "\n" << t << "\n";
            return;
        }
        char v = t[0];
        t.erase(t.begin());
        t += v;
    }
    cout << "IMPOSSIBLE\n";
}