

local turnFlag = "right"
local length = 100

if #arg == 1 then
  length = tonumber(arg[1])
end

local INVENTORY_SIZE = 16

-- List of accepted fuels
local ACCEPTED_FUELS = {
    "minecraft:coal_block",
    "minecraft:coal",
    "minecraft:charcoal_block",
    "minecraft:charcoal"
}


-- List of whitelisted items
local ACCEPTED_ITEMS = {
    "minecraft:coal_block",
    "minecraft:coal",
    "minecraft:charcoal_block",
    "minecraft:charcoal",
    "minecraft:raw_ore",
    "minecraft:raw_ore",
    "minecraft:redstone",
    "minecraft:diamond",
    "minecraft:emerald",
    -- "minecraft:cobblestone",
    -- "thermalfoundation:ore",
    -- "appliedenergistics2:material",
    -- "tconstruct:ore"
}

-- Perform inventory check
function inventoryCheck()
    -- Check for rubbish items
    for i = 1, INVENTORY_SIZE do
        local currentItem = turtle.getItemDetail(i)
        if currentItem ~= nil then
            local isAcceptedItem = false
            for x = 1, #ACCEPTED_ITEMS do
                if currentItem.name == ACCEPTED_ITEMS[x] then
                    isAcceptedItem = true
                end
            end
            if not isAcceptedItem then
                turtle.select(i)
                turtle.dropUp()
            end
        end
    end

    -- Group items together
    for j = 1, INVENTORY_SIZE do
        local currentItem = turtle.getItemDetail(j)

        if currentItem ~= nil then
            turtle.select(j)
            for k = j, INVENTORY_SIZE do
                if turtle.compareTo(k) then
                    turtle.select(k)
                    turtle.transferTo(j)
                    turtle.select(j)
                end
            end
        end
    end
end

-- Refuel using the found fuel
function refuel(slot_number)
    print("[TURTLE] Refueling... ")
    turtle.select(slot_number)
    turtle.refuel()
    print("[TURTLE] Nom. Nom. Nom.")
end

-- Check the current fuel level
function checkFuelLevel()
    -- local requiredFuelLevel = math.ceil((height * width * depth) + (heightMovement + widthMovement))
    local currentFuelLevel = turtle.getFuelLevel()

    print("[TURTLE] Current fuel level is: "..currentFuelLevel.." - Required: "..requiredFuelLevel)

    if currentFuelLevel < requiredFuelLevel then

        print("[TURTLE] Attempting to locate fuel.")

        for i = 1, INVENTORY_SIZE do
            local currentItem = turtle.getItemDetail(i)
            if currentItem ~= nil then
                for x = 1, #ACCEPTED_FUELS do
                    if currentItem.name == ACCEPTED_FUELS[x] then
                        print("[TURTLE] Acceptable fuel found: " ..ACCEPTED_FUELS[x])

                        if currentFuelLevel < requiredFuelLevel then
                            refuel(i)
                        else
                            return true
                        end
                    end
                end
            end
        end
        print("[TURTLE] No acceptable fuel or not enough found, terminating program...")
        return false
    else
        return true
    end
end

-- Combat gravel/sand
function moveUpAndDig()
    while turtle.up() == false do
        turtle.digUp()
    end
end

function moveForwardAndDig()
    while turtle.forward() == false do
        turtle.dig()
    end
end

function moveDownAndDig()
    while turtle.down() == false do
        turtle.digDown()
    end
end

function turnFunction()
    if turnFlag == "left" then
      turtle.turnLeft()
      turtle.dig()
      turtle.forward()
      turtle.turnLeft()
      turnFlag = "right"
    else
      turtle.turnRight()
      turtle.dig()
      turtle.forward()
      turtle.turnRight()
      turnFlag = "left"
    end
end

-- Mining Sequence
function mineSequence()
  turnFunction()
  moveForwardAndDig()
  moveUpAndDig()
  turnFunction()
  -- for i = 0, length do 
  --   turnFunction()
  --   moveForwardAndDig()
  --   moveUpAndDig()
  --   turnFunction()
  -- end
end

if checkFuelLevel() then
    mineSequence()
end
