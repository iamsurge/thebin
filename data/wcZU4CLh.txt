#include <iostream>
#include <unordered_map>
#include <vector>

const int INF = 1e9;

class Graph {
 public:
  // Constructor to create a graph with n vertices
  Graph(int n) : num_vertices_(n) {
    adjacency_list_.resize(num_vertices_);
  }

  // Add an undirected edge between vertices u and v with weight w
  void AddEdge(int u, int v, int w) {
    adjacency_list_[u].push_back({v, w});
    adjacency_list_[v].push_back({u, w});
  }

  // Compute the shortest path from source vertex s to all other vertices
  std::unordered_map<int, int> Dijkstra(int s) {
    std::vector<int> dist(num_vertices_, INF);
    std::unordered_map<int, int> previous;
    dist[s] = 0;

    // Use a set to efficiently find the vertex with the smallest distance
    std::set<std::pair<int, int>> set;
    set.insert({0, s});

    while (!set.empty()) {
      // Find the vertex with the smallest distance in the set
      int u = set.begin()->second;
      set.erase(set.begin());

      // Update the distance of each neighbor
      for (const auto& [v, w] : adjacency_list_[u]) {
        int alt = dist[u] + w;
        if (alt < dist[v]) {
          // If the new distance is smaller, update it and the predecessor
          set.erase({dist[v], v});
          dist[v] = alt;
          previous[v] = u;
          set.insert({dist[v], v});
        }
      }
    }

    return previous;
  }

 private:
  int num_vertices_;
  std::vector<std::vector<std::pair<int, int>>> adjacency_list_;
};

int main() {
  Graph g(5);
  g.AddEdge(0, 1, 10);
  g.AddEdge(0, 3, 5);
  g.AddEdge(1, 2, 1);
  g.AddEdge(1, 3, 2);
  g.AddEdge(2, 4, 4);
  g.AddEdge(3, 1, 3);
  g.AddEdge(3, 2, 9);
  g.AddEdge(3, 4, 2);
  g.AddEdge(4, 4, 6);

  std::unordered_map<int, int> previous = g.Dijkstra(0);

  // Print the shortest path from vertex 0 to each other vertex
  for (int v = 0; v < g.num_vertices_; ++v) {
    if (v == 0) continue;
    std::cout << "0 -> " << v << ": ";
    int u = v;
    std::vector<int> path;
    // Follow the predecessor chain to build the path
    while (u != 0) {
      path.push_back(u);
      u = previous[u];
    }
    path.push_back(0);
    std::reverse(path.begin(), path.end());

    for (const int& vertex : path) {
      std::cout << vertex << " ";
    }
    std::cout << std::endl;
  }

  return 0;
}
This will output the shortest path from vertex 0 to each other vertex in the graph. For example, if the graph is as follows:

   10
0 ----- 1
|       |
5       1
|       |
3 ----- 2
|       |
2       4
|       |
3 ----- 4
  \   /
   2 6
Then the output will be:
0 -> 1: 0 1 2
0 -> 2: 0 3 2
0 -> 3: 0 3
0 -> 4: 0 3 4