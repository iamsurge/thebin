--This is the Main program for Big Reactors in 1.16.5 made by Blushen. It can Automatically manage a Reactors heat and power output. It will prevent the reactor power from overflowing and wasting fuel. It will also turn down the insertion rods to prevent over heating and fuel loss--

print("running reactor 1.16.5")
pList = peripheral.getNames()
for i=1,#pList do
    print("I have a "..peripheral.getType(pList[i]).." attached as \""..pList[i].."\".")
    if peripheral.getType(pList[i]) == "monitor" then
    	mon = peripheral.wrap(pList[i])
   		print("Wrapped "..pList[i].." to mon")
    elseif peripheral.getType(pList[i]) == "BiggerReactors_Reactor" then
    	reactor = peripheral.wrap(pList[i])
   	 print("Wrapped "..pList[i].." to reactor")
    end
end

w,h = mon.getSize()
push = 1
auto = 1
high = 95
low = 5
control = 0
maxTemp = 2000
reactor.setAllControlRodLevels(control)
mon.setBackgroundColor(colors.black)
mon.setCursorPos(1,2)
mon.clearLine()
mon.setCursorPos(w/2-7,2)
mon.write("Reactor Control")
mon.setBackgroundColor(colors.black)
mon.setCursorPos(w/2-4,8)
mon.clearLine()
mon.setBackgroundColor(colors.green)
mon.write(string.rep(" ", 8))
mon.setBackgroundColor(colors.black)
mon.setCursorPos(w/2-4,9)
mon.clearLine()
mon.setBackgroundColor(colors.green)
mon.write(" Active ")
mon.setCursorPos(w/2-4,10)
mon.setBackgroundColor(colors.black)
mon.clearLine()
mon.setBackgroundColor(colors.green)
mon.write(string.rep(" ", 8))
mon.setCursorPos(w-5,h-1)
mon.setBackgroundColor(colors.gray)
mon.write("Exit")

button = function(self)
	event, side, xPos, yPos = os.pullEvent("monitor_touch")
	if xPos >= (w/2-4) and xPos <= (w/2+4) and yPos >= (8) and yPos <= (10) then --Active Button
		if push == 0 then
			push = 1
            mon.setBackgroundColor(colors.black)
			mon.setCursorPos(w/2-4,8)
			mon.clearLine()
			mon.setBackgroundColor(colors.green)
			mon.write(string.rep(" ", 8))
			mon.setBackgroundColor(colors.black)
			mon.setCursorPos(w/2-4,9)
			mon.clearLine()
			mon.setBackgroundColor(colors.green)
			mon.write(" Active ")
			mon.setCursorPos(w/2-4,10)
			mon.setBackgroundColor(colors.black)
			mon.clearLine()
			mon.setBackgroundColor(colors.green)
			mon.write(string.rep(" ", 8))
		else
			push = 0
        	mon.setBackgroundColor(colors.black)
			mon.setCursorPos(w/2-4,8)
			mon.clearLine()
			mon.setBackgroundColor(colors.red)
			mon.write(string.rep(" ", 8))
			mon.setBackgroundColor(colors.black)
			mon.setCursorPos(w/2-4,9)
			mon.clearLine()
			mon.setBackgroundColor(colors.red)
			mon.write(" Active ")
			mon.setCursorPos(w/2-4,10)
			mon.setBackgroundColor(colors.black)
			mon.clearLine()
			mon.setBackgroundColor(colors.red)
			mon.write(string.rep(" ", 8))
        end
    elseif xPos >= (w-5) and xPos <= (w-1) and yPos == (h-1) then --Exit Button
		reactor.setActive(false)
        mon.setBackgroundColor(colors.black)
        mon.setCursorPos(1,1)
        mon.clear()
        error()
    end
end

check = function(self)
	cap = reactor.getMaxEnergyStored()
	current = reactor.getEnergyStoredUnscaled()
	pro = math.floor(reactor.getEnergyProducedLastTick())
	percent = math.floor((current/cap)*100)
	temp = reactor.getCasingTemperature()
	mon.setBackgroundColor(colors.black)
	mon.setCursorPos(2,4)
	mon.clearLine()
	mon.write("Stored energy: "..current.."RF")
	mon.setCursorPos(2,5)
	mon.clearLine()
	mon.write("Energy produced: "..pro.." RF/t")
	mon.setCursorPos(2,6)
	mon.clearLine()
	mon.write("Percent Stored: "..percent.."%") 
    if temp > maxTemp then
    	control = control+1
        reactor.setAllControlRodLevels(control)
    end
    
    if percent > high then
       auto = 0 
    end
    if  percent < low then
        auto = 1
    end
    sleep(3)
end

automate = function(self)
    if push == 1 and auto == 1 then
        if reactor.getActive() == false then
       		reactor.setActive(true)
       	end
		sleep(2)
	else
        if reactor.getActive() == true then
       		reactor.setActive(false)
        end
		sleep(2)
    end 
end

while true do
	parallel.waitForAny(check,button,automate)
end