--+ <|=============== PUBLIC FUNCTIONS ===============|>
function CoinHandler:Handle(theFallingObject, theLandingPos, _)
    local coinTrove = Trove:new()  

    --# cache a reference to the falling object
    local coin: Model = theFallingObject 
    coinTrove:Add(coin)
    local landingPos: Vector3 = theLandingPos
    
    --# Check if the parent is null, if so clean all connections
    coinTrove:Add(RunService.Heartbeat:Connect(function()
        if not coin.Parent then 
            coinTrove:Destroy()
        end
    end))

    --# Update beam positions to be that of the coin (vfx related, see coin component file!)
    coinTrove:Add(RunService.Heartbeat:Connect(function()
        coin.CoinFallBeams:PivotTo(coin.PrimaryPart.CFrame)
        coin.IdleBeams:PivotTo(coin.PrimaryPart.CFrame)
    end))

    --# Emit particle fx's when the coin spawns
    --# Also start an interval of flashes for a cool
    --# visual effect

    self:EmitFlash(coin)
    self:EnableFlashEmitter(coin, true)
    self:EnableCoinFallBeams(coin, true)

    local startTime: number = time()
    local interval: number = .35

    coinTrove:Add(RunService.Heartbeat:Connect(function()
        if time() - startTime > interval then
            for _, flashPE: ParticleEmitter in ipairs(coin:FindFirstChild("FlashFXHolder", true):GetChildren()) do
                flashPE:Emit(2)
            end
            startTime = time()
        end
    end))

    
    --# When the coin spawns start a rotation and
    --# Downward tween toward the landing position

    local downWardTweenInfo: TweenInfo = TweenInfo.new(coin:GetAttribute("TravelTime"), Enum.EasingStyle.Quad, Enum.EasingDirection.InOut, 0, false, .2)
    local downWardTween: Tween         = TweenService:Create(coin.PrimaryPart, downWardTweenInfo, {Position = landingPos + Vector3.new(0, coin.PrimaryPart.Size.Y/2, 0)})
    local rotationTweenInfo: TweenInfo = TweenInfo.new(3, Enum.EasingStyle.Linear, Enum.EasingDirection.InOut, -1, false, 0)
    local rotationTween: Tween         = TweenService:Create(coin.PrimaryPart, rotationTweenInfo, {Orientation = Vector3.new(0, 360, 0)})
    
    rotationTween:Play()
    downWardTween:Play()

    --# Once the tween completes start a timer that is
    --# The lenght of the coin lifetime, after 1/2 of the time 
    --# Has passed start a transparency tween for visual feedback

    --!Note: The coin is dispossed off in the server!

    coinTrove:Add(downWardTween.Completed:Connect(function()
        task.delay(.25, function() --# gives a nice transition effect
            self:EnableCoinFallBeams(coin, false)
            self:EnableFlashEmitter(coin, false)
            self:EnableCoinFallBeams(coin, false)

            self:EmitFlash(coin, 3)
            self:EnableIdleBeams(coin, true)

            task.delay(coin:GetAttribute("LifeTime") * .5, function()
                if not coin.Parent then return end 

                local transparencyTweenInfo: TweenInfo = TweenInfo.new(
                    .5, 
                    Enum.EasingStyle.Sine,  
                    Enum.EasingDirection.InOut, 
                    -1,
                    true, 
                    0
                )
                local transparencyTween: Tween = TweenService:Create(coin.PrimaryPart, transparencyTweenInfo, {Transparency = 1})
                transparencyTween:Play()
            end)
        end)
    end))
end