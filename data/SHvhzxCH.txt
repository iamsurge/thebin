ERROR:root:Error while processing GQL query: {
  session {
    ...session
  }
  team {
    ...team
  }
  budget {
    ...budget
  }
  field {
    ...field
  }
  availabilities {
    ...availabilities
  }
  calculationState {
    ...calculationState
  }
  contracts {
    ...contracts
  }
}

fragment availabilities on Availabilities {
  contracts
  productionGathering {
    productionGathering
    changeDiameterOfChoke
  }
  waterSupplySystem
  survey
  formationPressure
  wellSurvey
  drilling
  boreholeFlowProfile
  temperatureProfile
  reservoirFlowProfile
  workovers
  oldWellsTargets
  wellCompleting
  sidetrackCompleting
  wellCompiling
  sidetrack
  noiseLogProfile
  verticalFlowControl
  seismicSurvey
  mdp
  injectionRateTest
  productionRateTest
  plt
  clusters
  buildUpFallOff
  functionality {
    returnToPreviousShotOrRestartSession
    shotButtonAvailability
    timerAvailability
    increaseWaterSupplyRateCapacity
  }
}

fragment budget on Budget {
  availableBudget
  typedCartCosts {
    tubingAssembly
    completionWellVertical {
      id
      cost
    }
    completionWellHorizontal {
      id
      cost
    }
    completionSidetrackVertical {
      id
      cost
    }
    completionSidetrackHorizontal {
      id
      cost
    }
    casedHoleLogging
    conversion
    drillWell
    flowProfile
    fracturing
    fracturingNewWell
    newWellPerforation
    perforation
    shutOff
    staticGradientSurvey
    stimulation
    wirelineFormationTest
    sidetrack
    seismicSurvey
    verticalFlowControl
    mdp
    injectionRateTest
    productionRateTest
    wirelineFormationTestSidetrack
    perforationSidetrack
    buildUpsFallOffsSurvey
    changeProductionFacilities
    changeWaterSupplyFacilities
    multiModeWellTest
    fracturingSidetrack
    clusters
  }
}

fragment calculationState on CalculationState {
  isActive
  blockingReason
  blockedCartsNames
}

fragment field on Field {
  wells {
    wellName
    x
    y
    head
    heel
    toe
    orientation
    wellType
    wellAbandoned
    wellCommissioned
    wellCased
    chokeDiam
    minDepth
    maxDepth
    casingDepth
    shankAdapterTopDepth
    msgrpPortValue
    filterPerforationInterval {
      max
      min
    }
    wellState
    drilledCurrentShot
    isWithNotCasedSidetrack
    isSideTrackCased
    isSideTrackFinished
    perforation {
      top
      bot
    }
    eventsAvailable {
      wellSurvey {
        sgs
        multiModeWellTest
        buildUpsFallOffs
        caseHoleLogging
      }
      newWells {
        wft
        perforation
        fracturing
        caseHoleLogging
        tubingAssembly
        commissioning
        liquidation
      }
      sideTrack {
        drillSideTrack
        wft
        perforationAndCasing
        fracturing
      }
      wellIntervention {
        shutOff
        stimulation
        fracturing
        conversion
        verticalFlowControl
        perforation
      }
    }
  }
  availableChemical {
    id
    type
    localizedValue
    availability {
      producer
      injector
    }
  }
  injectionLimit
  maxChokeDiameter
  newWellName
  pumps {
    maximumPressureOfPump
    maximumRateOfFeedingPump
    pumpId
  }
  chosenPump
  waterSupplyLimits
  wellLengthLimitationType
  maxWellLength
}

fragment session on Session {
  asset
  sessionType
  fieldType
  maxShotNumber
  currency
  isResetAvailable
  isRfpAvailable
  areTargetsByChokes
  areTargetByPumpFrequency
  noiseLogSurvey
}

fragment team on Team {
  name
  units
  language
  currentShot
  dataroomLink
  units
  language
}

fragment contracts on Contracts {
  contracts {
    id
    name
    nameOfCompany
    components {
      contractType
      baseCosts {
        name
        value
        unit
      }
      endCosts {
        name
        value
        unit
      }
    }
    duration
    dateOfCreate {
      day
      month
      year
    }
    dateOfEnd {
      day
      month
      year
    }
    discount
    minScope
    maxScope
    remainingScope
  }
  activeContracts
  availableContracts
  historyContracts
}
Traceback (most recent call last):
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\web\graphql_api\__init__.py", line 49, in post
    context = Context(api_interface=self._api, initial_state=self._api.get_state())
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\api.py", line 185, in get_state
    return self._controller.state_overrider.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\mixins\state_overrider.py", line 39, in get_state
    state = self._polyplan_controller.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\abstract_controller.py", line 55, in get_state
    facilities=self._get_facilities(),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 198, in _get_facilities
    self._get_water_supply_facilities(water_supply),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 181, in _get_water_supply_facilities
    return facilitiesCombiner.get_water_supply_facilities(_rate, include_splitter_on_cluster)
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\__init__.py", line 81, in get_water_supply_facilities
    *self.links_builder.get_water_supply_facilities_links,
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 44, in get_water_supply_facilities_links
    return [
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 47, in <listcomp>
    if (link := get_link(node))
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 34, in get_link
    diam = float(get_pipe_diameters(self._controller)[parent_node_id+'-'+node['node_id']])
KeyError: 'a8cd695870b3-BG_K1'
ERROR:root:Error while processing GQL query: {
  productionTargets {
    ...productionTargets
  }
}

fragment productionTargets on TargetsTable {
  targets {
    wellId
    wellName
    current
    next
    min
    max
  }
}
Traceback (most recent call last):
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\web\graphql_api\__init__.py", line 49, in post
    context = Context(api_interface=self._api, initial_state=self._api.get_state())
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\api.py", line 185, in get_state
    return self._controller.state_overrider.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\mixins\state_overrider.py", line 39, in get_state
    state = self._polyplan_controller.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\abstract_controller.py", line 55, in get_state
    facilities=self._get_facilities(),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 198, in _get_facilities
    self._get_water_supply_facilities(water_supply),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 181, in _get_water_supply_facilities
    return facilitiesCombiner.get_water_supply_facilities(_rate, include_splitter_on_cluster)
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\__init__.py", line 81, in get_water_supply_facilities
    *self.links_builder.get_water_supply_facilities_links,
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 44, in get_water_supply_facilities_links
    return [
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 47, in <listcomp>
    if (link := get_link(node))
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 34, in get_link
    diam = float(get_pipe_diameters(self._controller)[parent_node_id+'-'+node['node_id']])
KeyError: 'a8cd695870b3-BG_K1'
ERROR:root:Error while processing GQL query: {
  injectionTargets {
    ...injectionTargets
  }
}

fragment injectionTargets on TargetsTable {
  targets {
    wellId
    wellName
    current
    next
  }
}
Traceback (most recent call last):
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\web\graphql_api\__init__.py", line 49, in post
    context = Context(api_interface=self._api, initial_state=self._api.get_state())
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\api.py", line 185, in get_state
    return self._controller.state_overrider.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\mixins\state_overrider.py", line 39, in get_state
    state = self._polyplan_controller.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\abstract_controller.py", line 55, in get_state
    facilities=self._get_facilities(),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 198, in _get_facilities
    self._get_water_supply_facilities(water_supply),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 181, in _get_water_supply_facilities
    return facilitiesCombiner.get_water_supply_facilities(_rate, include_splitter_on_cluster)
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\__init__.py", line 81, in get_water_supply_facilities
    *self.links_builder.get_water_supply_facilities_links,
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 44, in get_water_supply_facilities_links
    return [
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 47, in <listcomp>
    if (link := get_link(node))
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 34, in get_link
    diam = float(get_pipe_diameters(self._controller)[parent_node_id+'-'+node['node_id']])
KeyError: 'a8cd695870b3-BG_K1'
ERROR:root:Error while processing GQL query: {
  temporarySessionData {
    ...TemporarySessionData
  }
}

fragment TemporarySessionData on TemporarySessionData {
  nextShotTime
  serverTime
}
Traceback (most recent call last):
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\web\graphql_api\__init__.py", line 49, in post
    context = Context(api_interface=self._api, initial_state=self._api.get_state())
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\api.py", line 185, in get_state
    return self._controller.state_overrider.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\mixins\state_overrider.py", line 39, in get_state
    state = self._polyplan_controller.get_state()
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\abstract_controller.py", line 55, in get_state
    facilities=self._get_facilities(),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 198, in _get_facilities
    self._get_water_supply_facilities(water_supply),
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\poly_plan_controller.py", line 181, in _get_water_supply_facilities
    return facilitiesCombiner.get_water_supply_facilities(_rate, include_splitter_on_cluster)
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\__init__.py", line 81, in get_water_supply_facilities
    *self.links_builder.get_water_supply_facilities_links,
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 44, in get_water_supply_facilities_links
    return [
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 47, in <listcomp>
    if (link := get_link(node))
  File "C:\polyplan\polyplan-app\.venv\lib\site-packages\polyplan_srv\core\controllers\combiners\facilities_combainer\links_builder.py", line 34, in get_link
    diam = float(get_pipe_diameters(self._controller)[parent_node_id+'-'+node['node_id']])
KeyError: 'a8cd695870b3-BG_K1'