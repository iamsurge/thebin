class Solution {
public:
    int n, m;
    
    const int dir[4][2] = {
        {0, -1}, {0, 1}, {-1, 0}, {1, 0}
    };
    bool vis[10][10];
    
    bool in(int x, int y) {
        return x >= 0 && x < n && y >= 0 && y < m;
    }
    
    bool dfs(vector<vector<char>> &board, int x, int y, const string &word, int depth) {
        if (depth == word.length()) {
            return true;
        }
        if (!in(x, y)) {
            return false;
        }
        if (vis[x][y]) {
            return false;
        }
        if (board[x][y] != word[depth]) {
            return false;
        }
        vis[x][y] = true;
        for (int i = 0; i < 4; ++i) {
            int xx = x + dir[i][0];
            int yy = y + dir[i][1];
            
            bool flag = dfs(board, xx, yy, word, depth + 1);
            if (flag) {
                return true;
            }
        }
        vis[x][y] = false;
        return false;
    }
    
    bool exist(vector<vector<char>>& board, string word) {
        n = board.size();
        m = board[0].size();
        memset(vis, 0, sizeof(vis));
        for (int i = 0; i < n; ++i) {
            for (int j = 0; j < m; ++j) {
                if (dfs(board, i, j, word, 0)) {
                    return true;
                }
            }
        }
        return false;
    }
};