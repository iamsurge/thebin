import axios from 'axios'

interface IClient {
  _id: string
  name: string
  email: string
  phone: string
  address: string
  cpf: number
}

interface IStoredToken {
  accessToken: string | null
  refreshToken: string | null
}

const CLIENT_API_BASE_URL = 'http://localhost:8000/clients'

class ClientService {
  storedToken: IStoredToken
  constructor() {
    this.storedToken = JSON.parse(localStorage.getItem('token') ?? '')
    if (this.storedToken.accessToken != null) {
      axios.defaults.headers.common.Authorization = `Bearer ${this.storedToken.accessToken}`
    }
  }

  async getClients() {
    return await axios.get(CLIENT_API_BASE_URL, { withCredentials: true })
  }

  async createClient(client: IClient) {
    return await axios.post(CLIENT_API_BASE_URL, client, { withCredentials: true })
  }

  async getClientById(clientId: string) {
    return await axios.get(CLIENT_API_BASE_URL + '/' + clientId, { withCredentials: true })
  }

  async updateClient(client: IClient, clientId: string) {
    return await axios.patch(CLIENT_API_BASE_URL + '/' + clientId, client, { withCredentials: true })
  }

  async deleteClient(clientId: string) {
    return await axios.delete(CLIENT_API_BASE_URL + '/' + clientId, { withCredentials: true })
  }
}

export default new ClientService()
