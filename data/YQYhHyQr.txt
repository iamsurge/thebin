#include <bits/stdc++.h>
// tiom4eg's precompiler options
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
// IO settings
#define fastIO ios_base::sync_with_stdio(false); cin.tie(0)
// Quick types
#define ll long long
#define ld long double
#define ull unsigned long long
#define pii pair <int, int>
#define vi vector <int>
#define mi vector <vector <int>>
// Quick functions
#define endl "\n"
#define F first
#define S second
#define all(a) a.begin(), a.end()
#define sz(a) (int)(a.size())
#define pb push_back
#define mp make_pair
// Quick fors
#define FOR(i, a, b) for (int i = a; i < b; ++i)
#define FORS(i, a, b, c) for (int i = a; i < b; i += c)
#define RFOR(i, a, b) for (int i = a; i >= b; --i)
#define EACH(e, a) for (auto& e : a)
// Pragmas
#ifndef TIOM4EG
#pragma GCC optimize("O3,unroll-loops") // let the chaos begin!
#pragma GCC target("avx,avx2,bmi,bmi2,popcnt,lzcnt,tune=native")
#pragma GCC comment(linker, "/stack:200000000")
#endif
// PBDS
#include <ext/pb_ds/assoc_container.hpp>
#include <ext/pb_ds/tree_policy.hpp>
#define ordered_set tree <int, null_type, less <int>, rb_tree_tag, tree_order_statistics_node_update>
#define ook order_of_key
#define fbo find_by_order
using namespace __gnu_pbds;
// POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS POGGERS
using namespace std;
mt19937 rng(chrono::duration_cast<chrono::milliseconds>(chrono::system_clock::now().time_since_epoch()).count());
//#define int long long
const int INF = 1e9 + 7, MD = 998244353, MAX = 2005, R = 1 << 19, MOD1 = 1e9 + 7, MOD2 = 1e9 + 9, MOD12 = MOD1 * MOD1, MOD22 = MOD2 * MOD2, LG = 20, B1 = 103, B2 = 107, S = 10008;
const ll INFLL = 1e18 + 7;

int p[MAX][MAX];

int get(int i, int j, int k) { return p[i + k][j + k] - p[i][j + k] - p[i + k][j] + p[i][j]; }

signed main() {
    fastIO;
    int n, k = 1; cin >> n;
    string f[n]; FOR(i, 0, n) cin >> f[i];
    FOR(i, 0, n) FOR(j, 0, n) p[i + 1][j + 1] = p[i][j + 1] + p[i + 1][j] - p[i][j] + (f[i][j] == '#');
    FOR(i, 0, n) FOR(j, 0, n) if (f[i][j] == '#') {
        while (i + k < n && j + k < n) {
            if (f[i + k][j] == '#' && f[i][j + k] == '#') ++k;
            else break;
        }
        break;
    }
    vector <pii> pog;
    FOR(i, 0, n - k + 1) FOR(j, 0, n - k + 1) if (get(i, j, k) == k * k) pog.pb({i, j});
    sort(all(pog));
    cout << k << endl << pog[0].F + 1 << ' ' << pog[0].S + 1 << endl << pog.back().F + 1 << ' ' << pog.back().S + 1;
}
