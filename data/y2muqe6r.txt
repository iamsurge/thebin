		let BulkReconcileSchema = db.collection('incentive_setups');
		let csvStream = fs.createReadStream(data.filePath);
		
		let bulk = BulkReconcileSchema.initializeOrderedBulkOp();
		let today = new Date(DateHelper.jakartaDate());
		let line = 1;
		let startLineData = 0;
		csv({
			delimiter: [',', ';', '|'],
			noheader: true,
			includeColumns: [0, 1, 2, 3, 4, 5]
		})
			.fromStream(csvStream)
			.on('csv', (row, key) => {
				if (startLineData > 0) {
					let object = null;
					if(data.typeIncentiveSetup == "basicIncentiveScheme"){ // basic incentive scheme
						let typeIncentive = parseInt(row[5]);
						if (row[5] == "calculated" || row[5] == "Calculated"){
							typeIncentive = -1
						}
						object = {
							admin_hub_code: row[0].trim(),
							hero_type: row[1].trim(),
							jobs_min: parseInt(row[2]),
							jobs_max: parseInt(row[3]),
							rate_job: parseInt(row[4]),
							basic_type_incentive: typeIncentive,
							type_incentive_setup: data.typeIncentiveSetup,
							created_at: today,
							updated_at: today,
							upload_by: data.uploadBy,
						}

						if (object != null) {
							bulk.find(
								{
									admin_hub_code: row[0].trim(),
									hero_type: row[1].trim(),
									jobs_min: parseInt(row[2]),
									jobs_max: parseInt(row[3]),
									type_incentive_setup: data.typeIncentiveSetup
								}).upsert().update(
									{
										$set: object
									});
						}
					}
					else if(data.typeIncentiveSetup == "advanceBonusProductivity"){
						if (startLineData > 1) {
							object = {
								admin_hub_code: row[0].trim(),
								hero_type: row[1].trim(),
								jobs_min: parseInt(row[2]),
								jobs_max: parseInt(row[3]),
								value: parseInt(row[4]),
								satuan: row[5].trim(),
								type_incentive_setup: data.typeIncentiveSetup,
								created_at: today,
								updated_at: today,
								upload_by: data.uploadBy,
							}
							if (object != null) {
								bulk.find(
									{
										admin_hub_code: row[0].trim(),
										hero_type: row[1].trim(),
										jobs_min: parseInt(row[2]),
										jobs_max: parseInt(row[3]),
										type_incentive_setup: data.typeIncentiveSetup
									}).upsert().update(
										{
											$set: object
										});
							}
						}
					}
					else if(data.typeIncentiveSetup == "advanceBonusPerformance"){
						if (startLineData > 1) {
							object = {
								admin_hub_code: row[0].trim(),
								hero_type: row[1].trim(),
								sla_min: parseInt(row[2]),
								sla_max: parseInt(row[3]),
								value: parseInt(row[4]),
								satuan: row[5].trim(),
								type_incentive_setup: data.typeIncentiveSetup,
								created_at: today,
								updated_at: today,
								upload_by: data.uploadBy,
							}
							if (object != null) {
								bulk.find(
									{
										admin_hub_code: row[0].trim(),
										hero_type: row[1].trim(),
										sla_min: parseInt(row[2]),
										sla_max: parseInt(row[3]),
										type_incentive_setup: data.typeIncentiveSetup
									}).upsert().update(
										{
											$set: object
										});
							}
						}
					}
					else if(data.typeIncentiveSetup == "advanceBonusBacan"){
						object = {
							admin_hub_code: row[0].trim(),
							jobs_min: parseInt(row[1]),
							jobs_max: parseInt(row[2]),
							sla_min: parseInt(row[3]),
							sla_max: parseInt(row[4]),
							bonus_bacan: parseInt(row[5]),
							type_incentive_setup: data.typeIncentiveSetup,
							created_at: today,
							updated_at: today,
							upload_by: data.uploadBy,
						}
						if (object != null) {
							bulk.find(
								{
									admin_hub_code: row[0].trim(),
									jobs_min: parseInt(row[1]),
									jobs_max: parseInt(row[2]),
									sla_min: parseInt(row[3]),
									sla_max: parseInt(row[4]),
									type_incentive_setup: data.typeIncentiveSetup
								}).upsert().update(
									{
										$set: object
									});
						}
					}
					else if(data.typeIncentiveSetup == "corporateProjectIncentive"){
						if(row[0].length == 0 || row[1].length == 0 || row[2].length == 0 || row[3].length == 0 || row[4].length == 0){
							process.send({
								status: false,
								msg: `Coorporate Code / Admin Hub Code / Task Type / Service Type / Rate Job cannot be empty at row ${key}. Please make sure!`,
							});
							process.exit();
						}
						var serviceType = row[3]
						if (serviceType.toUpperCase() == "PAXEL BIG"){
							serviceType="paxel_xl"
						}
						object = {
							corporate_code: row[0].trim(),
							admin_hub_code: row[1].trim(),
							task_type: row[2].trim().toLowerCase(),
							service_type: serviceType,
							rate_job: parseInt(row[4]),
							type_incentive_setup: data.typeIncentiveSetup,
							created_at: today,
							updated_at: today,
							upload_by: data.uploadBy,
						}
						if (object != null) {
							bulk.find(
								{
									corporate_code: row[0].trim(),
									admin_hub_code: row[1].trim(),
									task_type: row[2].trim().toLowerCase(),
									type_incentive_setup: data.typeIncentiveSetup,
								}).upsert().update(
									{
										$set: object
									});
						}
					}
					else if(data.typeIncentiveSetup == "incentiveByService"){
						if(row[0].length == 0 || row[1].length == 0 || row[2].length == 0 || row[3].length == 0){
							process.send({
								status: false,
								msg: `Service Type / Admin Hub Code / Task Type / Rate Job cannot be empty at row ${key}. Please make sure!`,
							});
							process.exit();
						}
						var serviceType = row[0].trim()
						if (serviceType.toUpperCase() == "PAXEL BIG"){
							serviceType="paxel_xl"
						}
						object = {
							service_type: serviceType,
							admin_hub_code: row[1].trim(),
							task_type: row[2].trim(),
							rate_job: parseInt(row[3]),
							type_incentive_setup: data.typeIncentiveSetup,
							created_at: today,
							updated_at: today,
							upload_by: data.uploadBy,
						}
						if (object != null) {
							bulk.find(
							{
								service_type: row[0].trim(),
								admin_hub_code: row[1].trim(),
								task_type: row[2].trim(),
								type_incentive_setup: data.typeIncentiveSetup,
							}).upsert().update(
								{
									$set: object
								});
						}
					}

					else if(data.typeIncentiveSetup == "incentiveBonusTask"){
						if(row[0].length == 0 || row[1].length == 0 || row[2].length == 0){
							process.send({
								status: false,
								msg: `Admin Hub Code / Hero Type / Rate Job cannot be empty at row ${key}. Please make sure!`,
							});
							process.exit();
						}
						object = {
							admin_hub_code: row[0].trim(),
							hero_type: row[1].trim(),
							rate_job: parseInt(row[2]),
							type_incentive_setup: data.typeIncentiveSetup,
							created_at: today,
							updated_at: today,
							upload_by: data.uploadBy,
						}
						if (object != null) {
							bulk.find(
							{
								admin_hub_code: row[0].trim(),
								hero_type: row[1].trim(),
								type_incentive_setup: data.typeIncentiveSetup,
							}).upsert().update(
								{
									$set: object
								});
						}
					}
					
					line++;
				}
				++startLineData;
			})
			.on('done', (err) => {

				fs.unlink(data.filePath, () => { });

				if (err) {
					console.log('done', err)
					process.send({
						status: false,
						msg: err
					});
				}
				if(bulk.s.currentIndex > 0){
					bulk.execute(function (err, result) {
						if (err) {
							process.send({
								status: false,
								msg: err
							});
						}
	
						db.close(() => { });
						process.send({
							status: true,
							msg: result
						});
					});
				}else{
					process.send({
						status: false,
						msg: "Data cannot be empty."
					});
				}
			});
