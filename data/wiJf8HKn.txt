海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥聚云盘@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"text_1\",\"name\":\"主页\",\"path\":\"home\",\"rule\":\"js:\\naddListener('onClose', () => {\\n    clearMyVar(\\\"paths\\\")\\n})\\nvar d = [];\\nif (!fileExist(\\\"hiker://files/rules/Joe/ali.json\\\")) {\\n    d.push({\\n        title: \\\"登陆以开启\\\",\\n        url: \\\"hiker://page/login\\\",\\n        col_type: \\\"text_center_1\\\"\\n    })\\n} else {\\n    function formatDate(time) {\\n        var date = new Date(time);\\n        var YY = date.getFullYear() + '-';\\n        var MM = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\\n        var DD = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate());\\n        var hh = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\\n        var mm = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\\n        var ss = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\\n        return YY + MM + DD + \\\" \\\" + hh + mm + ss;\\n    }\\n    $.require(\\\"hiker://page/api\\\").refreshToken()\\n    let config = JSON.parse(fetch(\\\"hiker://files/rules/Joe/ali.json\\\"))\\n    d.unshift({\\n        title: config.nick_name,\\n        img: config.avatar,\\n        url: $(\\\"确认退出登陆？\\\").confirm(() => {\\n            deleteFile(\\\"hiker://files/rules/Joe/ali.json\\\")\\n            refreshPage()\\n        }),\\n        col_type: \\\"avatar\\\"\\n    }, {\\n        desc: \\\"搜索我的文件或输入分享链接\\\",\\n        col_type: \\\"input\\\",\\n        url: \\\"'hiker://page/search?kw='+input\\\",\\n        extra: {\\n            titleVisible: false,\\n            onChange: \\\"putMyVar('kw',input)\\\"\\n        }\\n    })\\n    var paths = storage0.getMyVar(\\\"paths\\\", [{\\n        name: \\\"根目录\\\",\\n        id: \\\"root\\\"\\n    }])\\n    if (paths.length > 1) {\\n        d.push({\\n            title: \\\"<\\\",\\n            col_type: \\\"scroll_button\\\",\\n            url: $().lazyRule((paths) => {\\n                paths.pop()\\n                storage0.putMyVar(\\\"paths\\\", paths)\\n                refreshPage()\\n                return \\\"hiker://empty\\\"\\n            }, paths)\\n        })\\n    }\\n    paths.forEach((item, index) => {\\n        d.push({\\n            title: item.name,\\n            col_type: \\\"scroll_button\\\",\\n            url: $().lazyRule((item, paths, index) => {\\n                putMyVar(\\\"id\\\", item.id)\\n                storage0.putMyVar(\\\"paths\\\", paths.slice(0, index + 1))\\n                refreshPage()\\n                return \\\"hiker://empty\\\"\\n            }, item, paths, index)\\n        })\\n    })\\n    var list = $.require(\\\"hiker://page/api\\\").getFiles(paths[paths.length - 1].id).items\\n    d.push({\\n        title: \\\"聚云盘\\\",\\n        url: \\\"hiker://page/聚\\\",\\n        col_type: \\\"text_3\\\"\\n    }, {\\n        title: \\\"切换样式\\\",\\n        url: $([\\\"movie_1_left_pic\\\", \\\"movie_3\\\", \\\"avatar\\\", \\\"card_pic_3\\\"]).select((l) => {\\n            setItem(\\\"style\\\", input)\\n            for (let i = 0; i < l; i++) {\\n                updateItem(i + \\\"\\\", {\\n                    col_type: input\\n                })\\n            }\\n            return \\\"toast://已切换\\\"\\n        }, list.length),\\n        col_type: \\\"text_3\\\"\\n    }, {\\n        title: \\\"排序：\\\" + (getMyVar(\\\"order\\\", \\\"name\\\") == \\\"name\\\" ? \\\"名称\\\" : \\\"时间\\\"),\\n        url: $(\\\"#noRecordHistory##noLoading#\\\").lazyRule(() => {\\n            var o = getMyVar(\\\"order\\\", \\\"name\\\")\\n            putMyVar(\\\"order\\\", (o == \\\"name\\\" ? \\\"updated_at\\\" : \\\"name\\\"))\\n            refreshPage()\\n            return \\\"toast://切换成功\\\"\\n        }),\\n        col_type: \\\"text_3\\\"\\n    }, {\\n        col_type: \\\"blank_block\\\"\\n    })\\n    list.forEach((item, i) => {\\n        let fileName = item.name\\n        let len = 40;\\n        let len2 = len / 2;\\n        if (fileName.length >= len) {\\n            fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\n        }\\n        d.push({\\n            title: fileName,\\n            img: (item.thumbnail ? item.thumbnail : (item.type == \\\"folder\\\" ? \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\" : $.require(\\\"hiker://page/api\\\").getIcon(item.name))),\\n            url: (item.type == \\\"folder\\\" ? $().lazyRule((paths, name, id) => {\\n                paths.push({\\n                    name: name,\\n                    id: id\\n                })\\n                storage0.putMyVar(\\\"paths\\\", paths)\\n                refreshPage()\\n                return \\\"hiker://empty\\\"\\n            }, paths, item.name, item.file_id) : $().lazyRule((id, name) => {\\n                return $.require(\\\"hiker://page/api\\\").chuli(id, name)\\n            }, item.file_id, item.name)),\\n            desc: formatDate(Date.parse(item.updated_at)),\\n            col_type: getItem(\\\"style\\\", \\\"movie_3\\\"),\\n            extra: {\\n                id: i + \\\"\\\"\\n            }\\n        })\\n    })\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"登陆\",\"path\":\"login\",\"rule\":\"js:\\nvar d = [];\\nlet url = 'https://auth.aliyundrive.com/v2/oauth/authorize?login_type=custom&response_type=code&redirect_uri=https%3A%2F%2Fwww.aliyundrive.com%2Fsign%2Fcallback&client_id=25dzX3vbYqktVxyX&state=%7B%22origin%22%3A%22*%22%7D#/login'\\nvar js = $.toString(() => {\\n    const tokenFunction = function() {\\n        var token = JSON.parse(localStorage.getItem('token'))\\n        if (token && token.user_id) {\\n            let token_url = 'hiker://files/rules/Joe/ali.json';\\n            fy_bridge_app.writeFile(token_url, JSON.stringify(token))\\n            localStorage.clear();\\n            alert('TOKEN获取成功，请勿泄漏个人隐私!退出该页面后刷新重试！');\\n            fy_bridge_app.back();\\n            return;\\n        } else {\\n            token_timer();\\n        }\\n    }\\n    var token_timer = function() {\\n        setTimeout(tokenFunction, 300)\\n    };\\n    token_timer();\\n    tokenFunction();\\n})\\nd.push({\\n    url: url,\\n    col_type: 'x5_webview_single',\\n    desc: '100%&&float',\\n    extra: {\\n        canBack: true,\\n        js: js\\n    }\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"api\",\"path\":\"api\",\"rule\":\"var refreshToken = function() {\\n    var url = \\\"https://auth.aliyundrive.com/v2/account/token\\\"\\n    var config = JSON.parse(fetch(\\\"hiker://files/rules/Joe/ali.json\\\"))\\n    var res = JSON.parse(post(url, {\\n        body: JSON.stringify({\\n            \\\"refresh_token\\\": config.refresh_token,\\n            \\\"grant_type\\\": \\\"refresh_token\\\"\\n        })\\n    }))\\n    config[\\\"refresh_token\\\"] = res.refresh_token\\n    config[\\\"access_token\\\"] = res.access_token\\n    writeFile(\\\"hiker://files/rules/Joe/ali.json\\\", JSON.stringify(config))\\n}\\nvar getFiles = function(id, did) {\\n    var url = \\\"https://api.aliyundrive.com/adrive/v3/file/list\\\"\\n    var config = JSON.parse(fetch(\\\"hiker://files/rules/Joe/ali.json\\\"))\\n    var def = did ? did : config.default_drive_id\\n    let res = post(url, {\\n        body: JSON.stringify({\\n            \\\"drive_id\\\": def,\\n            \\\"parent_file_id\\\": id,\\n            \\\"limit\\\": 100,\\n            \\\"all\\\": false,\\n            \\\"url_expire_sec\\\": 1600,\\n            \\\"image_thumbnail_process\\\": \\\"image/resize,w_400/format,jpeg\\\",\\n            \\\"image_url_process\\\": \\\"image/resize,w_1920/format,jpeg\\\",\\n            \\\"video_thumbnail_process\\\": \\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\n            \\\"fields\\\": \\\"*\\\",\\n            \\\"order_by\\\": getMyVar(\\\"order\\\", \\\"name\\\"),\\n            \\\"order_direction\\\": \\\"ASC\\\"\\n        }),\\n        headers: {\\n            \\\"authorization\\\": config.access_token\\n        }\\n    })\\n    return JSON.parse(res)\\n}\\nvar chuli = function(id, name, did) {\\n    var config = JSON.parse(fetch(\\\"hiker://files/rules/Joe/ali.json\\\"))\\n    var did = did ? did : config.default_drive_id\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/api\\\")\\n    var Hzm = getHzm(name)\\n    if ($.movie.includes(Hzm)) {\\n        let durl = \\\"https://api.aliyundrive.com/v2/file/get_download_url\\\"\\n        let purl = \\\"https://api.aliyundrive.com/v2/file/get_video_preview_play_info\\\"\\n        var urls = []\\n        var names = [\\\"原画\\\"]\\n        let url = post(durl, {\\n            headers: {\\n                \\\"authorization\\\": config.access_token\\n            },\\n            body: JSON.stringify({\\n                \\\"expire_sec\\\": 115200,\\n                \\\"file_id\\\": id,\\n                \\\"drive_id\\\": did\\n            })\\n        })\\n        urls.push(JSON.parse(url).url + \\\"#isVideo=true#\\\")\\n        let pu = post(purl, {\\n            headers: {\\n                \\\"authorization\\\": config.access_token\\n            },\\n            body: JSON.stringify({\\n                \\\"drive_id\\\": did,\\n                \\\"category\\\": \\\"live_transcoding\\\",\\n                \\\"file_id\\\": id,\\n                \\\"template_id\\\": \\\"\\\"\\n            })\\n        })\\n        JSON.parse(pu).video_preview_play_info.live_transcoding_task_list.forEach(item => {\\n            urls.push(item.url + \\\"#isVideo=true#\\\")\\n            names.push(item.template_id)\\n        })\\n        return JSON.stringify({\\n            urls: urls,\\n            names: names,\\n            headers: [{\\n                \\\"Referer\\\": \\\"https://www.aliyundrive.com/\\\"\\n            }]\\n        })\\n    } else {\\n        let durl = \\\"https://api.aliyundrive.com/v2/file/get_download_url\\\"\\n        let url = post(durl, {\\n            headers: {\\n                \\\"authorization\\\": config.access_token\\n            },\\n            body: JSON.stringify({\\n                \\\"expire_sec\\\": 115200,\\n                \\\"file_id\\\": id,\\n                \\\"drive_id\\\": did\\n            })\\n        })\\n        return JSON.parse(url).url\\n    }\\n}\\n$.exports.getIcon = function(fileName) {\\n    let {\\n        getHzm\\n    } = $.require(\\\"hiker://page/api\\\")\\n    let root = \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\";\\n    let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\n    let hzm = getHzm(fileName)\\n    if (files.includes(hzm)) {\\n        img = root + hzm + '.svg';\\n    } else {\\n        img = root + \\\"文件.svg\\\"\\n    }\\n    return img\\n}\\n$.exports.getHzm = function(fileName) {\\n    return fileName.substr(fileName.lastIndexOf(\\\".\\\") + 1)\\n}\\n$.exports.sorts = function(list, method) {\\n    if (method.includes(\\\"名称\\\")) {\\n        list.sort(function(a, b) {\\n            return a.name.localeCompare(b.name)\\n        })\\n    } else if (method.includes(\\\"时间\\\")) {\\n        list.sort(function(a, b) {\\n            return a.modifyTimestamp - b.modifyTimestamp\\n        })\\n    }\\n    if (method.includes(\\\"反\\\")) {\\n        list.reverse();\\n    }\\n    return list\\n}\\n$.exports.refreshToken = refreshToken\\n$.exports.getFiles = getFiles\\n$.exports.chuli = chuli\"},{\"col_type\":\"movie_3\",\"name\":\"分享\",\"path\":\"share\",\"rule\":\"js:\\nvar d = [];\\n\\nfunction formatDate(time) {\\n    var date = new Date(time);\\n    var YY = date.getFullYear() + '-';\\n    var MM = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\\n    var DD = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate());\\n    var hh = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\\n    var mm = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\\n    var ss = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\\n    return YY + MM + DD + \\\" \\\" + hh + mm + ss;\\n}\\nif (getParam(\\\"share_id\\\").startsWith(\\\"https://www.aliyundrive.com/s/\\\")) {\\n    var shareId = getParam(\\\"share_id\\\")\\n    var share_id = shareId.split('com/s/')[1].split(\\\"/\\\")[0]\\n    if (getItem(share_id, \\\"\\\") != \\\"\\\") {\\n        var password = getItem(share_id)\\n    } else if (getParam(\\\"pwd\\\")) {\\n        var password = getParam(\\\"pwd\\\")\\n    } else {\\n        var password = \\\"\\\"\\n    }\\n    var res = JSON.parse(post(\\\"https://api.aliyundrive.com/adrive/v3/share_link/get_share_by_anonymous?share_id=\\\" + share_id, {\\n        body: JSON.stringify({\\n            \\\"share_id\\\": share_id\\n        })\\n    }))\\n    var sa = JSON.parse(post(\\\"https://api.aliyundrive.com/v2/share_link/get_share_token\\\", {\\n        body: JSON.stringify({\\n            \\\"share_pwd\\\": password,\\n            \\\"share_id\\\": share_id\\n        })\\n    }))\\n    if (sa.share_token) {\\n        var s = sa.share_token\\n        setPageTitle(res.share_name)\\n        var paths = storage0.getMyVar(share_id + \\\"paths\\\", [{\\n            name: \\\"根目录\\\",\\n            id: \\\"root\\\"\\n        }])\\n        if (paths.length > 1) {\\n            d.push({\\n                title: \\\"<\\\",\\n                col_type: \\\"scroll_button\\\",\\n                url: $().lazyRule((share_id, paths) => {\\n                    paths.pop()\\n                    storage0.putMyVar(share_id + \\\"paths\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, share_id, paths)\\n            })\\n        }\\n        paths.forEach((item, index) => {\\n            d.push({\\n                title: item.name,\\n                col_type: \\\"scroll_button\\\",\\n                url: $().lazyRule((share_id, item, paths, index) => {\\n                    putMyVar(\\\"id\\\", item.id)\\n                    storage0.putMyVar(share_id + \\\"paths\\\", paths.slice(0, index + 1))\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, share_id, item, paths, index)\\n            })\\n        })\\n        d.unshift({\\n            title: res.creator_name,\\n            img: res.avatar,\\n            col_type: \\\"avatar\\\"\\n        }, {\\n            title: \\\"““””<small>\\\" + formatDate(Date.parse(res.updated_at)) + \\\"</small>\\\",\\n            col_type: \\\"text_1\\\"\\n        }, {\\n            title: \\\"保存到我的网盘\\\",\\n            url: `smartdrive://share/browse?shareId=${share_id}&sharePwd=${password}`,\\n            col_type: \\\"text_center_1\\\"\\n        })\\n        var l = JSON.parse(post(\\\"https://api.aliyundrive.com/adrive/v3/file/list\\\", {\\n            headers: {\\n                \\\"x-share-token\\\": s\\n            },\\n            body: JSON.stringify({\\n                \\\"share_id\\\": share_id,\\n                \\\"parent_file_id\\\": paths[paths.length - 1].id,\\n                \\\"limit\\\": 100,\\n                \\\"image_thumbnail_process\\\": \\\"image/resize,w_160/format,jpeg\\\",\\n                \\\"image_url_process\\\": \\\"image/resize,w_1920/format,jpeg\\\",\\n                \\\"video_thumbnail_process\\\": \\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\n                \\\"order_by\\\": getItem(\\\"order\\\", \\\"name\\\"),\\n                \\\"order_direction\\\": \\\"ASC\\\"\\n            })\\n        })).items\\n        d.push({\\n            title: \\\"切换样式\\\",\\n            url: $([\\\"movie_1_left_pic\\\", \\\"movie_3\\\", \\\"avatar\\\", \\\"card_pic_3\\\"]).select(() => {\\n                setItem(\\\"style\\\", input)\\n                refreshPage()\\n                return \\\"toast://已切换\\\"\\n            }),\\n            col_type: \\\"text_2\\\"\\n        }, {\\n            title: \\\"排序：\\\" + (getMyVar(\\\"order\\\", \\\"name\\\") == \\\"name\\\" ? \\\"名称\\\" : \\\"时间\\\"),\\n            url: $(\\\"#noRecordHistory##noLoading#\\\").lazyRule(() => {\\n                var o = getMyVar(\\\"order\\\", \\\"name\\\")\\n                putMyVar(\\\"order\\\", (o == \\\"name\\\" ? \\\"updated_at\\\" : \\\"name\\\"))\\n                refreshPage()\\n                return \\\"toast://切换成功\\\"\\n            }),\\n            col_type: \\\"text_2\\\"\\n        }, {\\n            col_type: \\\"blank_block\\\"\\n        })        \\n        l.forEach((item, i) => {\\n            let fileName = item.name\\n            let len = 40;\\n            let len2 = len / 2;\\n            if (fileName.length >= len) {\\n                fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\n            }\\n            d.push({\\n                title: fileName,\\n                desc: formatDate(Date.parse(item.updated_at)),\\n                img: (item.thumbnail ? item.thumbnail : (item.type == \\\"folder\\\" ? \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\" : $.require(\\\"hiker://page/api\\\").getIcon(item.name))),\\n                url: (item.type == \\\"folder\\\" ? $().lazyRule((paths, name, id, share_id) => {\\n                    paths.push({\\n                        name: name,\\n                        id: id\\n                    })\\n                    storage0.putMyVar(share_id + \\\"paths\\\", paths)\\n                    refreshPage()\\n                    return \\\"hiker://empty\\\"\\n                }, paths, item.name, item.file_id, share_id) : $().lazyRule((share_id, id, name, s) => {\\n                    var config = JSON.parse(fetch(\\\"hiker://files/rules/Joe/ali.json\\\"))\\n                    let {\\n                        getHzm\\n                    } = $.require(\\\"hiker://page/api\\\")\\n                    var Hzm = getHzm(name)\\n                    if ($.movie.includes(Hzm)) {\\n                        log(\\\"是视频文件\\\")\\n                        let durl = \\\"https://api.aliyundrive.com/v2/file/get_share_link_download_url\\\"\\n                        let purl = \\\"https://api.aliyundrive.com/v2/file/get_share_link_video_preview_play_info\\\"\\n                        var urls = []\\n                        var names = [\\\"原画\\\"]\\n                        let url = post(durl, {\\n                            headers: {\\n                                \\\"x-share-token\\\": s,\\n                                \\\"authorization\\\": config.access_token\\n                            },\\n                            body: JSON.stringify({\\n                                \\\"expire_sec\\\": 600,\\n                                \\\"file_id\\\": id,\\n                                \\\"share_id\\\": share_id\\n                            })\\n                        })\\n                        urls.push(JSON.parse(url).url + \\\"#isVideo=true#\\\")\\n                        let pu = post(purl, {\\n                            headers: {\\n                                \\\"x-share-token\\\": s,\\n                                \\\"authorization\\\": config.access_token\\n                            },\\n                            body: JSON.stringify({\\n                                \\\"share_id\\\": share_id,\\n                                \\\"category\\\": \\\"live_transcoding\\\",\\n                                \\\"file_id\\\": id,\\n                                \\\"template_id\\\": \\\"\\\"\\n                            })\\n                        })\\n                        JSON.parse(pu).video_preview_play_info.live_transcoding_task_list.forEach(item => {\\n                            urls.push(item.url + \\\"#isVideo=true#\\\")\\n                            names.push(item.template_id)\\n                        })\\n                        return JSON.stringify({\\n                            urls: urls,\\n                            names: names,\\n                            headers: [{\\n                                \\\"Referer\\\": \\\"https://www.aliyundrive.com/\\\"\\n                            }]\\n                        })\\n                    } else {\\n                        let durl = \\\"https://api.aliyundrive.com/v2/file/get_share_link_download_url\\\"\\n                        let url = post(durl, {\\n                            headers: {\\n                                \\\"x-share-token\\\": s,\\n                                \\\"authorization\\\": config.access_token\\n                            },\\n                            body: JSON.stringify({\\n                                \\\"expire_sec\\\": 600,\\n                                \\\"file_id\\\": id,\\n                                \\\"share_id\\\": share_id\\n                            })\\n                        })\\n                        return JSON.parse(url).url\\n                    }\\n                }, share_id, item.file_id, item.name, s)),\\n                col_type: getItem(\\\"style\\\", \\\"movie_3\\\"),\\n                extra: {\\n                    id: i + \\\"\\\"\\n                }\\n            })\\n        })\\n    } else {\\n        setResult([{\\n            title: \\\"请输入提取码\\\",\\n            url: $(\\\"\\\").input((share_id) => {\\n                setItem(share_id, input)\\n                refreshPage()\\n            }, share_id),\\n            col_type: \\\"text_center_1\\\"\\n        }])\\n    }\\n}\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索\",\"path\":\"search\",\"rule\":\"js:\\nvar d = [];\\n\\nfunction formatDate(time) {\\n    var date = new Date(time);\\n    var YY = date.getFullYear() + '-';\\n    var MM = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\\n    var DD = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate());\\n    var hh = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\\n    var mm = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\\n    var ss = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\\n    return YY + MM + DD + \\\" \\\" + hh + mm + ss;\\n}\\nlet kw = getParam(\\\"kw\\\")\\nvar links = kw.match(/https:\\\\/\\\\/(www\\\\.aliyundrive\\\\.com\\\\/s|alywp\\\\.net)\\\\/\\\\w*/g) || []\\nif (links.length > 0) {\\n    d.push({\\n        title: \\\"识别到链接\\\",\\n        url: \\\"toast://ヽ(*⌒∇⌒*)ﾉ\\\",\\n        col_type: \\\"text_center_1\\\"\\n    })\\n    links.forEach(item => {\\n        d.push({\\n            title: item,\\n            url: \\\"hiker://page/share?share_id=\\\" + item,\\n            col_type: \\\"text_1\\\"\\n        })\\n    })\\n    setResult(d)\\n}\\nvar paths = storage0.getMyVar(\\\"paths\\\", [{\\n    name: \\\"根目录\\\",\\n    id: \\\"root\\\"\\n}])\\nlet u = \\\"https://api.aliyundrive.com/adrive/v3/file/search\\\"\\nvar config = JSON.parse(fetch(\\\"hiker://files/rules/Joe/ali.json\\\"))\\nvar list = JSON.parse(post(u, {\\n    body: JSON.stringify({\\n        \\\"drive_id\\\": \\\"1933181\\\",\\n        \\\"limit\\\": 100,\\n        \\\"image_thumbnail_process\\\": \\\"image/resize,w_400/format,jpeg\\\",\\n        \\\"image_url_process\\\": \\\"image/resize,w_1920/format,jpeg\\\",\\n        \\\"video_thumbnail_process\\\": \\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\",\\n        \\\"query\\\": `name match \\\\\\\"${kw}\\\\\\\"`,\\n        \\\"order_by\\\": \\\"name ASC\\\"\\n    }),\\n    headers: {\\n        \\\"authorization\\\": config.access_token\\n    }\\n})).items\\nd.unshift({\\n    title: `搜索 ${kw} 匹配项目${list.length}个`,\\n    col_type: \\\"text_center_1\\\"\\n})\\nlist.forEach(item => {\\n    let fileName = item.name\\n    let len = 40;\\n    let len2 = len / 2;\\n    if (fileName.length >= len) {\\n        fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\n    }\\n    d.push({\\n        title: fileName,\\n        img: (item.thumbnail ? item.thumbnail : (item.type == \\\"folder\\\" ? \\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\" : $.require(\\\"hiker://page/api\\\").getIcon(item.name))),\\n        url: (item.type == \\\"folder\\\" ? $().lazyRule((paths, name, id) => {\\n            paths.push({\\n                name: name,\\n                id: id\\n            })\\n            storage0.putMyVar(\\\"paths\\\", paths)\\n            return \\\"hiker://page/home?s=true\\\"\\n        }, paths, item.name, item.file_id) : $().lazyRule((id, name) => {\\n            return $.require(\\\"hiker://page/api\\\").chuli(id, name)\\n        }, item.file_id, item.name)),\\n        desc: formatDate(Date.parse(item.updated_at)),\\n        col_type: \\\"movie_3\\\"\\n    })\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"聚\",\"path\":\"聚\",\"rule\":\"js:\\nvar d = [];\\nlet urls = \\\"https://wpxz.org&https://yunpan1.com&https://www.yunpanziyuan.com&https://aipanxiaozhan.com&https://www.alipansou.com&https://u.gitcafe.net/&https://zhaoziyuan.me/so&https://www.pan666.cn/&https://www.upyunso.com&https://www.panjd.com/&https://yunpan1.com/&https://aliwp.cn/&https://jike.info/category/2/%E8%AE%A8%E8%AE%BA%E5%8C%BA?lang=en-US&https://dalao.ru/w/&https://yiso.fun/\\\"\\nlet names = \\\"网盘小站&云盘分享&云盘资源网&爱盼&喵搜&小纸条&找资源&小站&UP云搜&盘基地登陆&云盘资源&网盘资源&JIKE&更多&易搜\\\"\\nnames.split(\\\"&\\\").forEach((item, i) => {\\n    d.push({\\n        title: item,\\n        url: $().lazyRule((i) => {\\n            putMyVar(\\\"index\\\", i + \\\"\\\")\\n            refreshPage()\\n            return \\\"hiker://empty\\\"\\n        }, i),\\n        col_type: \\\"scroll_button\\\"\\n    })\\n})\\nvar u = urls.split(\\\"&\\\")[parseInt(getMyVar(\\\"index\\\", \\\"0\\\"))]\\nd.push({\\n    col_type: \\\"x5_webview_single\\\",\\n    url: u,\\n    desc: \\\"auto&&list\\\",\\n    extra: {\\n        canBack: true,\\n        urlInterceptor: $.toString(() => {\\n            if (input.startsWith('https://www.aliyundrive.com/s/')) {\\n                return $.toString((url) => {\\n                    fba.open(JSON.stringify({\\n                        rule: '阿里云盘',\\n                        url: 'hiker://page/share?rule=阿里云盘&share_id=' + url\\n                    }));\\n                }, input)\\n            }\\n        }),\\n        disableX5: true\\n    }\\n})\\nsetResult(d);\"}],\"saved\":false,\"title\":\"阿里云盘\",\"version\":0,\"url\":\"hiker://page/聚\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\nlet urls = \\\"https://wpxz.org&https://yunpan1.com&https://www.yunpanziyuan.com&https://aipanxiaozhan.com&https://www.alipansou.com&https://u.gitcafe.net/&https://zhaoziyuan.me/so&https://www.pan666.cn/&https://www.upyunso.com&https://www.panjd.com/&https://yunpan1.com/&https://aliwp.cn/&https://jike.info/category/2/%E8%AE%A8%E8%AE%BA%E5%8C%BA?lang=en-US&https://dalao.ru/w/&https://yiso.fun/\\\"\\nlet names = \\\"网盘小站&云盘分享&云盘资源网&爱盼&喵搜&小纸条&找资源&小站&UP云搜&盘基地登陆&云盘资源&网盘资源&JIKE&更多&易搜\\\"\\nnames.split(\\\"&\\\").forEach((item, i) => {\\n    d.push({\\n        title: item,\\n        url: $().lazyRule((i) => {\\n            putMyVar(\\\"index\\\", i + \\\"\\\")\\n            refreshPage()\\n            return \\\"hiker://empty\\\"\\n        }, i),\\n        col_type: \\\"scroll_button\\\"\\n    })\\n})\\nvar u = urls.split(\\\"&\\\")[parseInt(getMyVar(\\\"index\\\", \\\"0\\\"))]\\nd.push({\\n    col_type: \\\"x5_webview_single\\\",\\n    url: u,\\n    desc: \\\"auto&&list\\\",\\n    extra: {\\n        canBack: true,\\n        urlInterceptor: $.toString(() => {\\n            if (input.startsWith('https://www.aliyundrive.com/s/')) {\\n                return $.toString((url) => {\\n                    fba.open(JSON.stringify({\\n                        rule: '阿里云盘',\\n                        url: 'hiker://page/share?rule=阿里云盘&share_id=' + url\\n                    }));\\n                }, input)\\n            }\\n        }),\\n        disableX5: true\\n    }\\n})\\nsetResult(d);\",\"group\":\"①网盘\",\"ua\":\"mobile\",\"preRule\":\"$.extend({\\n    text: [\\\"htm\\\", \\\"html\\\", \\\"xml\\\", \\\"java\\\", \\\"properties\\\", \\\"sql\\\", \\\"js\\\", \\\"md\\\", \\\"json\\\", \\\"conf\\\", \\\"ini\\\", \\\"vue\\\", \\\"php\\\", \\\"py\\\", \\\"bat\\\", \\\"gitignore\\\", \\\"yml\\\", \\\"go\\\", \\\"sh\\\", \\\"c\\\", \\\"cpp\\\", \\\"h\\\", \\\"hpp\\\", \\\"tsx\\\"],\\n    audio: [\\\"mp3\\\", \\\"flac\\\", \\\"ogg\\\", \\\"m4a\\\", \\\"wav\\\", \\\"opus\\\"],\\n    movie: [\\\"mp4\\\", \\\"mkv\\\", \\\"avi\\\", \\\"mov\\\", \\\"rmvb\\\", \\\"webm\\\", \\\"flv\\\", \\\"m4v\\\", \\\"m3u8\\\", \\\"ts\\\"],\\n    img: [\\\"jpg\\\", \\\"png\\\", \\\"jpeg\\\", \\\"gif\\\", \\\"svg\\\", \\\"raw\\\"],\\n    subtitle: [\\\"vtt\\\", \\\"srt\\\", \\\"ass\\\"]\\n})\",\"pages\":\"[{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"主页\\\",\\\"path\\\":\\\"home\\\",\\\"rule\\\":\\\"js:\\\\naddListener('onClose', () => {\\\\n    clearMyVar(\\\\\\\"paths\\\\\\\")\\\\n})\\\\nvar d = [];\\\\nif (!fileExist(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\")) {\\\\n    d.push({\\\\n        title: \\\\\\\"登陆以开启\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/login\\\\\\\",\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n    })\\\\n} else {\\\\n    function formatDate(time) {\\\\n        var date = new Date(time);\\\\n        var YY = date.getFullYear() + '-';\\\\n        var MM = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\\\\n        var DD = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate());\\\\n        var hh = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\\\\n        var mm = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\\\\n        var ss = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\\\\n        return YY + MM + DD + \\\\\\\" \\\\\\\" + hh + mm + ss;\\\\n    }\\\\n    $.require(\\\\\\\"hiker://page/api\\\\\\\").refreshToken()\\\\n    let config = JSON.parse(fetch(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\"))\\\\n    d.unshift({\\\\n        title: config.nick_name,\\\\n        img: config.avatar,\\\\n        url: $(\\\\\\\"确认退出登陆？\\\\\\\").confirm(() => {\\\\n            deleteFile(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\")\\\\n            refreshPage()\\\\n        }),\\\\n        col_type: \\\\\\\"avatar\\\\\\\"\\\\n    }, {\\\\n        desc: \\\\\\\"搜索我的文件或输入分享链接\\\\\\\",\\\\n        col_type: \\\\\\\"input\\\\\\\",\\\\n        url: \\\\\\\"'hiker://page/search?kw='+input\\\\\\\",\\\\n        extra: {\\\\n            titleVisible: false,\\\\n            onChange: \\\\\\\"putMyVar('kw',input)\\\\\\\"\\\\n        }\\\\n    })\\\\n    var paths = storage0.getMyVar(\\\\\\\"paths\\\\\\\", [{\\\\n        name: \\\\\\\"根目录\\\\\\\",\\\\n        id: \\\\\\\"root\\\\\\\"\\\\n    }])\\\\n    if (paths.length > 1) {\\\\n        d.push({\\\\n            title: \\\\\\\"<\\\\\\\",\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n            url: $().lazyRule((paths) => {\\\\n                paths.pop()\\\\n                storage0.putMyVar(\\\\\\\"paths\\\\\\\", paths)\\\\n                refreshPage()\\\\n                return \\\\\\\"hiker://empty\\\\\\\"\\\\n            }, paths)\\\\n        })\\\\n    }\\\\n    paths.forEach((item, index) => {\\\\n        d.push({\\\\n            title: item.name,\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n            url: $().lazyRule((item, paths, index) => {\\\\n                putMyVar(\\\\\\\"id\\\\\\\", item.id)\\\\n                storage0.putMyVar(\\\\\\\"paths\\\\\\\", paths.slice(0, index + 1))\\\\n                refreshPage()\\\\n                return \\\\\\\"hiker://empty\\\\\\\"\\\\n            }, item, paths, index)\\\\n        })\\\\n    })\\\\n    var list = $.require(\\\\\\\"hiker://page/api\\\\\\\").getFiles(paths[paths.length - 1].id).items\\\\n    d.push({\\\\n        title: \\\\\\\"聚云盘\\\\\\\",\\\\n        url: \\\\\\\"hiker://page/聚\\\\\\\",\\\\n        col_type: \\\\\\\"text_3\\\\\\\"\\\\n    }, {\\\\n        title: \\\\\\\"切换样式\\\\\\\",\\\\n        url: $([\\\\\\\"movie_1_left_pic\\\\\\\", \\\\\\\"movie_3\\\\\\\", \\\\\\\"avatar\\\\\\\", \\\\\\\"card_pic_3\\\\\\\"]).select((l) => {\\\\n            setItem(\\\\\\\"style\\\\\\\", input)\\\\n            for (let i = 0; i < l; i++) {\\\\n                updateItem(i + \\\\\\\"\\\\\\\", {\\\\n                    col_type: input\\\\n                })\\\\n            }\\\\n            return \\\\\\\"toast://已切换\\\\\\\"\\\\n        }, list.length),\\\\n        col_type: \\\\\\\"text_3\\\\\\\"\\\\n    }, {\\\\n        title: \\\\\\\"排序：\\\\\\\" + (getMyVar(\\\\\\\"order\\\\\\\", \\\\\\\"name\\\\\\\") == \\\\\\\"name\\\\\\\" ? \\\\\\\"名称\\\\\\\" : \\\\\\\"时间\\\\\\\"),\\\\n        url: $(\\\\\\\"#noRecordHistory##noLoading#\\\\\\\").lazyRule(() => {\\\\n            var o = getMyVar(\\\\\\\"order\\\\\\\", \\\\\\\"name\\\\\\\")\\\\n            putMyVar(\\\\\\\"order\\\\\\\", (o == \\\\\\\"name\\\\\\\" ? \\\\\\\"updated_at\\\\\\\" : \\\\\\\"name\\\\\\\"))\\\\n            refreshPage()\\\\n            return \\\\\\\"toast://切换成功\\\\\\\"\\\\n        }),\\\\n        col_type: \\\\\\\"text_3\\\\\\\"\\\\n    }, {\\\\n        col_type: \\\\\\\"blank_block\\\\\\\"\\\\n    })\\\\n    list.forEach((item, i) => {\\\\n        let fileName = item.name\\\\n        let len = 40;\\\\n        let len2 = len / 2;\\\\n        if (fileName.length >= len) {\\\\n            fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\\\n        }\\\\n        d.push({\\\\n            title: fileName,\\\\n            img: (item.thumbnail ? item.thumbnail : (item.type == \\\\\\\"folder\\\\\\\" ? \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\\\\\" : $.require(\\\\\\\"hiker://page/api\\\\\\\").getIcon(item.name))),\\\\n            url: (item.type == \\\\\\\"folder\\\\\\\" ? $().lazyRule((paths, name, id) => {\\\\n                paths.push({\\\\n                    name: name,\\\\n                    id: id\\\\n                })\\\\n                storage0.putMyVar(\\\\\\\"paths\\\\\\\", paths)\\\\n                refreshPage()\\\\n                return \\\\\\\"hiker://empty\\\\\\\"\\\\n            }, paths, item.name, item.file_id) : $().lazyRule((id, name) => {\\\\n                return $.require(\\\\\\\"hiker://page/api\\\\\\\").chuli(id, name)\\\\n            }, item.file_id, item.name)),\\\\n            desc: formatDate(Date.parse(item.updated_at)),\\\\n            col_type: getItem(\\\\\\\"style\\\\\\\", \\\\\\\"movie_3\\\\\\\"),\\\\n            extra: {\\\\n                id: i + \\\\\\\"\\\\\\\"\\\\n            }\\\\n        })\\\\n    })\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"登陆\\\",\\\"path\\\":\\\"login\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet url = 'https://auth.aliyundrive.com/v2/oauth/authorize?login_type=custom&response_type=code&redirect_uri=https%3A%2F%2Fwww.aliyundrive.com%2Fsign%2Fcallback&client_id=25dzX3vbYqktVxyX&state=%7B%22origin%22%3A%22*%22%7D#/login'\\\\nvar js = $.toString(() => {\\\\n    const tokenFunction = function() {\\\\n        var token = JSON.parse(localStorage.getItem('token'))\\\\n        if (token && token.user_id) {\\\\n            let token_url = 'hiker://files/rules/Joe/ali.json';\\\\n            fy_bridge_app.writeFile(token_url, JSON.stringify(token))\\\\n            localStorage.clear();\\\\n            alert('TOKEN获取成功，请勿泄漏个人隐私!退出该页面后刷新重试！');\\\\n            fy_bridge_app.back();\\\\n            return;\\\\n        } else {\\\\n            token_timer();\\\\n        }\\\\n    }\\\\n    var token_timer = function() {\\\\n        setTimeout(tokenFunction, 300)\\\\n    };\\\\n    token_timer();\\\\n    tokenFunction();\\\\n})\\\\nd.push({\\\\n    url: url,\\\\n    col_type: 'x5_webview_single',\\\\n    desc: '100%&&float',\\\\n    extra: {\\\\n        canBack: true,\\\\n        js: js\\\\n    }\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"api\\\",\\\"path\\\":\\\"api\\\",\\\"rule\\\":\\\"var refreshToken = function() {\\\\n    var url = \\\\\\\"https://auth.aliyundrive.com/v2/account/token\\\\\\\"\\\\n    var config = JSON.parse(fetch(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\"))\\\\n    var res = JSON.parse(post(url, {\\\\n        body: JSON.stringify({\\\\n            \\\\\\\"refresh_token\\\\\\\": config.refresh_token,\\\\n            \\\\\\\"grant_type\\\\\\\": \\\\\\\"refresh_token\\\\\\\"\\\\n        })\\\\n    }))\\\\n    config[\\\\\\\"refresh_token\\\\\\\"] = res.refresh_token\\\\n    config[\\\\\\\"access_token\\\\\\\"] = res.access_token\\\\n    writeFile(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\", JSON.stringify(config))\\\\n}\\\\nvar getFiles = function(id, did) {\\\\n    var url = \\\\\\\"https://api.aliyundrive.com/adrive/v3/file/list\\\\\\\"\\\\n    var config = JSON.parse(fetch(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\"))\\\\n    var def = did ? did : config.default_drive_id\\\\n    let res = post(url, {\\\\n        body: JSON.stringify({\\\\n            \\\\\\\"drive_id\\\\\\\": def,\\\\n            \\\\\\\"parent_file_id\\\\\\\": id,\\\\n            \\\\\\\"limit\\\\\\\": 100,\\\\n            \\\\\\\"all\\\\\\\": false,\\\\n            \\\\\\\"url_expire_sec\\\\\\\": 1600,\\\\n            \\\\\\\"image_thumbnail_process\\\\\\\": \\\\\\\"image/resize,w_400/format,jpeg\\\\\\\",\\\\n            \\\\\\\"image_url_process\\\\\\\": \\\\\\\"image/resize,w_1920/format,jpeg\\\\\\\",\\\\n            \\\\\\\"video_thumbnail_process\\\\\\\": \\\\\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\\\\\",\\\\n            \\\\\\\"fields\\\\\\\": \\\\\\\"*\\\\\\\",\\\\n            \\\\\\\"order_by\\\\\\\": getMyVar(\\\\\\\"order\\\\\\\", \\\\\\\"name\\\\\\\"),\\\\n            \\\\\\\"order_direction\\\\\\\": \\\\\\\"ASC\\\\\\\"\\\\n        }),\\\\n        headers: {\\\\n            \\\\\\\"authorization\\\\\\\": config.access_token\\\\n        }\\\\n    })\\\\n    return JSON.parse(res)\\\\n}\\\\nvar chuli = function(id, name, did) {\\\\n    var config = JSON.parse(fetch(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\"))\\\\n    var did = did ? did : config.default_drive_id\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/api\\\\\\\")\\\\n    var Hzm = getHzm(name)\\\\n    if ($.movie.includes(Hzm)) {\\\\n        let durl = \\\\\\\"https://api.aliyundrive.com/v2/file/get_download_url\\\\\\\"\\\\n        let purl = \\\\\\\"https://api.aliyundrive.com/v2/file/get_video_preview_play_info\\\\\\\"\\\\n        var urls = []\\\\n        var names = [\\\\\\\"原画\\\\\\\"]\\\\n        let url = post(durl, {\\\\n            headers: {\\\\n                \\\\\\\"authorization\\\\\\\": config.access_token\\\\n            },\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"expire_sec\\\\\\\": 115200,\\\\n                \\\\\\\"file_id\\\\\\\": id,\\\\n                \\\\\\\"drive_id\\\\\\\": did\\\\n            })\\\\n        })\\\\n        urls.push(JSON.parse(url).url + \\\\\\\"#isVideo=true#\\\\\\\")\\\\n        let pu = post(purl, {\\\\n            headers: {\\\\n                \\\\\\\"authorization\\\\\\\": config.access_token\\\\n            },\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"drive_id\\\\\\\": did,\\\\n                \\\\\\\"category\\\\\\\": \\\\\\\"live_transcoding\\\\\\\",\\\\n                \\\\\\\"file_id\\\\\\\": id,\\\\n                \\\\\\\"template_id\\\\\\\": \\\\\\\"\\\\\\\"\\\\n            })\\\\n        })\\\\n        JSON.parse(pu).video_preview_play_info.live_transcoding_task_list.forEach(item => {\\\\n            urls.push(item.url + \\\\\\\"#isVideo=true#\\\\\\\")\\\\n            names.push(item.template_id)\\\\n        })\\\\n        return JSON.stringify({\\\\n            urls: urls,\\\\n            names: names,\\\\n            headers: [{\\\\n                \\\\\\\"Referer\\\\\\\": \\\\\\\"https://www.aliyundrive.com/\\\\\\\"\\\\n            }]\\\\n        })\\\\n    } else {\\\\n        let durl = \\\\\\\"https://api.aliyundrive.com/v2/file/get_download_url\\\\\\\"\\\\n        let url = post(durl, {\\\\n            headers: {\\\\n                \\\\\\\"authorization\\\\\\\": config.access_token\\\\n            },\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"expire_sec\\\\\\\": 115200,\\\\n                \\\\\\\"file_id\\\\\\\": id,\\\\n                \\\\\\\"drive_id\\\\\\\": did\\\\n            })\\\\n        })\\\\n        return JSON.parse(url).url\\\\n    }\\\\n}\\\\n$.exports.getIcon = function(fileName) {\\\\n    let {\\\\n        getHzm\\\\n    } = $.require(\\\\\\\"hiker://page/api\\\\\\\")\\\\n    let root = \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/\\\\\\\";\\\\n    let files = 'ai|apk|avi|css|dmg|exe|flv|gif|hiker|html|iso|jpg|js|json|log|mov|mp3|mp4|otf|php|png|ppt|psd|table|txt|wav|xls|zip|css|doc|epub|exc|htm|xlsx'.split('|');\\\\n    let hzm = getHzm(fileName)\\\\n    if (files.includes(hzm)) {\\\\n        img = root + hzm + '.svg';\\\\n    } else {\\\\n        img = root + \\\\\\\"文件.svg\\\\\\\"\\\\n    }\\\\n    return img\\\\n}\\\\n$.exports.getHzm = function(fileName) {\\\\n    return fileName.substr(fileName.lastIndexOf(\\\\\\\".\\\\\\\") + 1)\\\\n}\\\\n$.exports.sorts = function(list, method) {\\\\n    if (method.includes(\\\\\\\"名称\\\\\\\")) {\\\\n        list.sort(function(a, b) {\\\\n            return a.name.localeCompare(b.name)\\\\n        })\\\\n    } else if (method.includes(\\\\\\\"时间\\\\\\\")) {\\\\n        list.sort(function(a, b) {\\\\n            return a.modifyTimestamp - b.modifyTimestamp\\\\n        })\\\\n    }\\\\n    if (method.includes(\\\\\\\"反\\\\\\\")) {\\\\n        list.reverse();\\\\n    }\\\\n    return list\\\\n}\\\\n$.exports.refreshToken = refreshToken\\\\n$.exports.getFiles = getFiles\\\\n$.exports.chuli = chuli\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"分享\\\",\\\"path\\\":\\\"share\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\n\\\\nfunction formatDate(time) {\\\\n    var date = new Date(time);\\\\n    var YY = date.getFullYear() + '-';\\\\n    var MM = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\\\\n    var DD = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate());\\\\n    var hh = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\\\\n    var mm = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\\\\n    var ss = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\\\\n    return YY + MM + DD + \\\\\\\" \\\\\\\" + hh + mm + ss;\\\\n}\\\\nif (getParam(\\\\\\\"share_id\\\\\\\").startsWith(\\\\\\\"https://www.aliyundrive.com/s/\\\\\\\")) {\\\\n    var shareId = getParam(\\\\\\\"share_id\\\\\\\")\\\\n    var share_id = shareId.split('com/s/')[1].split(\\\\\\\"/\\\\\\\")[0]\\\\n    if (getItem(share_id, \\\\\\\"\\\\\\\") != \\\\\\\"\\\\\\\") {\\\\n        var password = getItem(share_id)\\\\n    } else if (getParam(\\\\\\\"pwd\\\\\\\")) {\\\\n        var password = getParam(\\\\\\\"pwd\\\\\\\")\\\\n    } else {\\\\n        var password = \\\\\\\"\\\\\\\"\\\\n    }\\\\n    var res = JSON.parse(post(\\\\\\\"https://api.aliyundrive.com/adrive/v3/share_link/get_share_by_anonymous?share_id=\\\\\\\" + share_id, {\\\\n        body: JSON.stringify({\\\\n            \\\\\\\"share_id\\\\\\\": share_id\\\\n        })\\\\n    }))\\\\n    var sa = JSON.parse(post(\\\\\\\"https://api.aliyundrive.com/v2/share_link/get_share_token\\\\\\\", {\\\\n        body: JSON.stringify({\\\\n            \\\\\\\"share_pwd\\\\\\\": password,\\\\n            \\\\\\\"share_id\\\\\\\": share_id\\\\n        })\\\\n    }))\\\\n    if (sa.share_token) {\\\\n        var s = sa.share_token\\\\n        setPageTitle(res.share_name)\\\\n        var paths = storage0.getMyVar(share_id + \\\\\\\"paths\\\\\\\", [{\\\\n            name: \\\\\\\"根目录\\\\\\\",\\\\n            id: \\\\\\\"root\\\\\\\"\\\\n        }])\\\\n        if (paths.length > 1) {\\\\n            d.push({\\\\n                title: \\\\\\\"<\\\\\\\",\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                url: $().lazyRule((share_id, paths) => {\\\\n                    paths.pop()\\\\n                    storage0.putMyVar(share_id + \\\\\\\"paths\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, share_id, paths)\\\\n            })\\\\n        }\\\\n        paths.forEach((item, index) => {\\\\n            d.push({\\\\n                title: item.name,\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\",\\\\n                url: $().lazyRule((share_id, item, paths, index) => {\\\\n                    putMyVar(\\\\\\\"id\\\\\\\", item.id)\\\\n                    storage0.putMyVar(share_id + \\\\\\\"paths\\\\\\\", paths.slice(0, index + 1))\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, share_id, item, paths, index)\\\\n            })\\\\n        })\\\\n        d.unshift({\\\\n            title: res.creator_name,\\\\n            img: res.avatar,\\\\n            col_type: \\\\\\\"avatar\\\\\\\"\\\\n        }, {\\\\n            title: \\\\\\\"““””<small>\\\\\\\" + formatDate(Date.parse(res.updated_at)) + \\\\\\\"</small>\\\\\\\",\\\\n            col_type: \\\\\\\"text_1\\\\\\\"\\\\n        }, {\\\\n            title: \\\\\\\"保存到我的网盘\\\\\\\",\\\\n            url: `smartdrive://share/browse?shareId=${share_id}&sharePwd=${password}`,\\\\n            col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n        })\\\\n        var l = JSON.parse(post(\\\\\\\"https://api.aliyundrive.com/adrive/v3/file/list\\\\\\\", {\\\\n            headers: {\\\\n                \\\\\\\"x-share-token\\\\\\\": s\\\\n            },\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"share_id\\\\\\\": share_id,\\\\n                \\\\\\\"parent_file_id\\\\\\\": paths[paths.length - 1].id,\\\\n                \\\\\\\"limit\\\\\\\": 100,\\\\n                \\\\\\\"image_thumbnail_process\\\\\\\": \\\\\\\"image/resize,w_160/format,jpeg\\\\\\\",\\\\n                \\\\\\\"image_url_process\\\\\\\": \\\\\\\"image/resize,w_1920/format,jpeg\\\\\\\",\\\\n                \\\\\\\"video_thumbnail_process\\\\\\\": \\\\\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\\\\\",\\\\n                \\\\\\\"order_by\\\\\\\": getItem(\\\\\\\"order\\\\\\\", \\\\\\\"name\\\\\\\"),\\\\n                \\\\\\\"order_direction\\\\\\\": \\\\\\\"ASC\\\\\\\"\\\\n            })\\\\n        })).items\\\\n        d.push({\\\\n            title: \\\\\\\"切换样式\\\\\\\",\\\\n            url: $([\\\\\\\"movie_1_left_pic\\\\\\\", \\\\\\\"movie_3\\\\\\\", \\\\\\\"avatar\\\\\\\", \\\\\\\"card_pic_3\\\\\\\"]).select(() => {\\\\n                setItem(\\\\\\\"style\\\\\\\", input)\\\\n                refreshPage()\\\\n                return \\\\\\\"toast://已切换\\\\\\\"\\\\n            }),\\\\n            col_type: \\\\\\\"text_2\\\\\\\"\\\\n        }, {\\\\n            title: \\\\\\\"排序：\\\\\\\" + (getMyVar(\\\\\\\"order\\\\\\\", \\\\\\\"name\\\\\\\") == \\\\\\\"name\\\\\\\" ? \\\\\\\"名称\\\\\\\" : \\\\\\\"时间\\\\\\\"),\\\\n            url: $(\\\\\\\"#noRecordHistory##noLoading#\\\\\\\").lazyRule(() => {\\\\n                var o = getMyVar(\\\\\\\"order\\\\\\\", \\\\\\\"name\\\\\\\")\\\\n                putMyVar(\\\\\\\"order\\\\\\\", (o == \\\\\\\"name\\\\\\\" ? \\\\\\\"updated_at\\\\\\\" : \\\\\\\"name\\\\\\\"))\\\\n                refreshPage()\\\\n                return \\\\\\\"toast://切换成功\\\\\\\"\\\\n            }),\\\\n            col_type: \\\\\\\"text_2\\\\\\\"\\\\n        }, {\\\\n            col_type: \\\\\\\"blank_block\\\\\\\"\\\\n        })        \\\\n        l.forEach((item, i) => {\\\\n            let fileName = item.name\\\\n            let len = 40;\\\\n            let len2 = len / 2;\\\\n            if (fileName.length >= len) {\\\\n                fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\\\n            }\\\\n            d.push({\\\\n                title: fileName,\\\\n                desc: formatDate(Date.parse(item.updated_at)),\\\\n                img: (item.thumbnail ? item.thumbnail : (item.type == \\\\\\\"folder\\\\\\\" ? \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\\\\\" : $.require(\\\\\\\"hiker://page/api\\\\\\\").getIcon(item.name))),\\\\n                url: (item.type == \\\\\\\"folder\\\\\\\" ? $().lazyRule((paths, name, id, share_id) => {\\\\n                    paths.push({\\\\n                        name: name,\\\\n                        id: id\\\\n                    })\\\\n                    storage0.putMyVar(share_id + \\\\\\\"paths\\\\\\\", paths)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"hiker://empty\\\\\\\"\\\\n                }, paths, item.name, item.file_id, share_id) : $().lazyRule((share_id, id, name, s) => {\\\\n                    var config = JSON.parse(fetch(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\"))\\\\n                    let {\\\\n                        getHzm\\\\n                    } = $.require(\\\\\\\"hiker://page/api\\\\\\\")\\\\n                    var Hzm = getHzm(name)\\\\n                    if ($.movie.includes(Hzm)) {\\\\n                        log(\\\\\\\"是视频文件\\\\\\\")\\\\n                        let durl = \\\\\\\"https://api.aliyundrive.com/v2/file/get_share_link_download_url\\\\\\\"\\\\n                        let purl = \\\\\\\"https://api.aliyundrive.com/v2/file/get_share_link_video_preview_play_info\\\\\\\"\\\\n                        var urls = []\\\\n                        var names = [\\\\\\\"原画\\\\\\\"]\\\\n                        let url = post(durl, {\\\\n                            headers: {\\\\n                                \\\\\\\"x-share-token\\\\\\\": s,\\\\n                                \\\\\\\"authorization\\\\\\\": config.access_token\\\\n                            },\\\\n                            body: JSON.stringify({\\\\n                                \\\\\\\"expire_sec\\\\\\\": 600,\\\\n                                \\\\\\\"file_id\\\\\\\": id,\\\\n                                \\\\\\\"share_id\\\\\\\": share_id\\\\n                            })\\\\n                        })\\\\n                        urls.push(JSON.parse(url).url + \\\\\\\"#isVideo=true#\\\\\\\")\\\\n                        let pu = post(purl, {\\\\n                            headers: {\\\\n                                \\\\\\\"x-share-token\\\\\\\": s,\\\\n                                \\\\\\\"authorization\\\\\\\": config.access_token\\\\n                            },\\\\n                            body: JSON.stringify({\\\\n                                \\\\\\\"share_id\\\\\\\": share_id,\\\\n                                \\\\\\\"category\\\\\\\": \\\\\\\"live_transcoding\\\\\\\",\\\\n                                \\\\\\\"file_id\\\\\\\": id,\\\\n                                \\\\\\\"template_id\\\\\\\": \\\\\\\"\\\\\\\"\\\\n                            })\\\\n                        })\\\\n                        JSON.parse(pu).video_preview_play_info.live_transcoding_task_list.forEach(item => {\\\\n                            urls.push(item.url + \\\\\\\"#isVideo=true#\\\\\\\")\\\\n                            names.push(item.template_id)\\\\n                        })\\\\n                        return JSON.stringify({\\\\n                            urls: urls,\\\\n                            names: names,\\\\n                            headers: [{\\\\n                                \\\\\\\"Referer\\\\\\\": \\\\\\\"https://www.aliyundrive.com/\\\\\\\"\\\\n                            }]\\\\n                        })\\\\n                    } else {\\\\n                        let durl = \\\\\\\"https://api.aliyundrive.com/v2/file/get_share_link_download_url\\\\\\\"\\\\n                        let url = post(durl, {\\\\n                            headers: {\\\\n                                \\\\\\\"x-share-token\\\\\\\": s,\\\\n                                \\\\\\\"authorization\\\\\\\": config.access_token\\\\n                            },\\\\n                            body: JSON.stringify({\\\\n                                \\\\\\\"expire_sec\\\\\\\": 600,\\\\n                                \\\\\\\"file_id\\\\\\\": id,\\\\n                                \\\\\\\"share_id\\\\\\\": share_id\\\\n                            })\\\\n                        })\\\\n                        return JSON.parse(url).url\\\\n                    }\\\\n                }, share_id, item.file_id, item.name, s)),\\\\n                col_type: getItem(\\\\\\\"style\\\\\\\", \\\\\\\"movie_3\\\\\\\"),\\\\n                extra: {\\\\n                    id: i + \\\\\\\"\\\\\\\"\\\\n                }\\\\n            })\\\\n        })\\\\n    } else {\\\\n        setResult([{\\\\n            title: \\\\\\\"请输入提取码\\\\\\\",\\\\n            url: $(\\\\\\\"\\\\\\\").input((share_id) => {\\\\n                setItem(share_id, input)\\\\n                refreshPage()\\\\n            }, share_id),\\\\n            col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n        }])\\\\n    }\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索\\\",\\\"path\\\":\\\"search\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\n\\\\nfunction formatDate(time) {\\\\n    var date = new Date(time);\\\\n    var YY = date.getFullYear() + '-';\\\\n    var MM = (date.getMonth() + 1 < 10 ? '0' + (date.getMonth() + 1) : date.getMonth() + 1) + '-';\\\\n    var DD = (date.getDate() < 10 ? '0' + (date.getDate()) : date.getDate());\\\\n    var hh = (date.getHours() < 10 ? '0' + date.getHours() : date.getHours()) + ':';\\\\n    var mm = (date.getMinutes() < 10 ? '0' + date.getMinutes() : date.getMinutes()) + ':';\\\\n    var ss = (date.getSeconds() < 10 ? '0' + date.getSeconds() : date.getSeconds());\\\\n    return YY + MM + DD + \\\\\\\" \\\\\\\" + hh + mm + ss;\\\\n}\\\\nlet kw = getParam(\\\\\\\"kw\\\\\\\")\\\\nvar links = kw.match(/https:\\\\\\\\/\\\\\\\\/(www\\\\\\\\.aliyundrive\\\\\\\\.com\\\\\\\\/s|alywp\\\\\\\\.net)\\\\\\\\/\\\\\\\\w*/g) || []\\\\nif (links.length > 0) {\\\\n    d.push({\\\\n        title: \\\\\\\"识别到链接\\\\\\\",\\\\n        url: \\\\\\\"toast://ヽ(*⌒∇⌒*)ﾉ\\\\\\\",\\\\n        col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n    })\\\\n    links.forEach(item => {\\\\n        d.push({\\\\n            title: item,\\\\n            url: \\\\\\\"hiker://page/share?share_id=\\\\\\\" + item,\\\\n            col_type: \\\\\\\"text_1\\\\\\\"\\\\n        })\\\\n    })\\\\n    setResult(d)\\\\n}\\\\nvar paths = storage0.getMyVar(\\\\\\\"paths\\\\\\\", [{\\\\n    name: \\\\\\\"根目录\\\\\\\",\\\\n    id: \\\\\\\"root\\\\\\\"\\\\n}])\\\\nlet u = \\\\\\\"https://api.aliyundrive.com/adrive/v3/file/search\\\\\\\"\\\\nvar config = JSON.parse(fetch(\\\\\\\"hiker://files/rules/Joe/ali.json\\\\\\\"))\\\\nvar list = JSON.parse(post(u, {\\\\n    body: JSON.stringify({\\\\n        \\\\\\\"drive_id\\\\\\\": \\\\\\\"1933181\\\\\\\",\\\\n        \\\\\\\"limit\\\\\\\": 100,\\\\n        \\\\\\\"image_thumbnail_process\\\\\\\": \\\\\\\"image/resize,w_400/format,jpeg\\\\\\\",\\\\n        \\\\\\\"image_url_process\\\\\\\": \\\\\\\"image/resize,w_1920/format,jpeg\\\\\\\",\\\\n        \\\\\\\"video_thumbnail_process\\\\\\\": \\\\\\\"video/snapshot,t_1000,f_jpg,ar_auto,w_300\\\\\\\",\\\\n        \\\\\\\"query\\\\\\\": `name match \\\\\\\\\\\\\\\"${kw}\\\\\\\\\\\\\\\"`,\\\\n        \\\\\\\"order_by\\\\\\\": \\\\\\\"name ASC\\\\\\\"\\\\n    }),\\\\n    headers: {\\\\n        \\\\\\\"authorization\\\\\\\": config.access_token\\\\n    }\\\\n})).items\\\\nd.unshift({\\\\n    title: `搜索 ${kw} 匹配项目${list.length}个`,\\\\n    col_type: \\\\\\\"text_center_1\\\\\\\"\\\\n})\\\\nlist.forEach(item => {\\\\n    let fileName = item.name\\\\n    let len = 40;\\\\n    let len2 = len / 2;\\\\n    if (fileName.length >= len) {\\\\n        fileName = fileName.substr(0, len2) + '...' + fileName.substr(fileName.length - len2);\\\\n    }\\\\n    d.push({\\\\n        title: fileName,\\\\n        img: (item.thumbnail ? item.thumbnail : (item.type == \\\\\\\"folder\\\\\\\" ? \\\\\\\"https://gitcode.net/qq_32394351/dr/-/raw/master/img/文件类型2/文件夹.svg\\\\\\\" : $.require(\\\\\\\"hiker://page/api\\\\\\\").getIcon(item.name))),\\\\n        url: (item.type == \\\\\\\"folder\\\\\\\" ? $().lazyRule((paths, name, id) => {\\\\n            paths.push({\\\\n                name: name,\\\\n                id: id\\\\n            })\\\\n            storage0.putMyVar(\\\\\\\"paths\\\\\\\", paths)\\\\n            return \\\\\\\"hiker://page/home?s=true\\\\\\\"\\\\n        }, paths, item.name, item.file_id) : $().lazyRule((id, name) => {\\\\n            return $.require(\\\\\\\"hiker://page/api\\\\\\\").chuli(id, name)\\\\n        }, item.file_id, item.name)),\\\\n        desc: formatDate(Date.parse(item.updated_at)),\\\\n        col_type: \\\\\\\"movie_3\\\\\\\"\\\\n    })\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"聚\\\",\\\"path\\\":\\\"聚\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nlet urls = \\\\\\\"https://wpxz.org&https://yunpan1.com&https://www.yunpanziyuan.com&https://aipanxiaozhan.com&https://www.alipansou.com&https://u.gitcafe.net/&https://zhaoziyuan.me/so&https://www.pan666.cn/&https://www.upyunso.com&https://www.panjd.com/&https://yunpan1.com/&https://aliwp.cn/&https://jike.info/category/2/%E8%AE%A8%E8%AE%BA%E5%8C%BA?lang=en-US&https://dalao.ru/w/&https://yiso.fun/\\\\\\\"\\\\nlet names = \\\\\\\"网盘小站&云盘分享&云盘资源网&爱盼&喵搜&小纸条&找资源&小站&UP云搜&盘基地登陆&云盘资源&网盘资源&JIKE&更多&易搜\\\\\\\"\\\\nnames.split(\\\\\\\"&\\\\\\\").forEach((item, i) => {\\\\n    d.push({\\\\n        title: item,\\\\n        url: $().lazyRule((i) => {\\\\n            putMyVar(\\\\\\\"index\\\\\\\", i + \\\\\\\"\\\\\\\")\\\\n            refreshPage()\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, i),\\\\n        col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n    })\\\\n})\\\\nvar u = urls.split(\\\\\\\"&\\\\\\\")[parseInt(getMyVar(\\\\\\\"index\\\\\\\", \\\\\\\"0\\\\\\\"))]\\\\nd.push({\\\\n    col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n    url: u,\\\\n    desc: \\\\\\\"auto&&list\\\\\\\",\\\\n    extra: {\\\\n        canBack: true,\\\\n        urlInterceptor: $.toString(() => {\\\\n            if (input.startsWith('https://www.aliyundrive.com/s/')) {\\\\n                return $.toString((url) => {\\\\n                    fba.open(JSON.stringify({\\\\n                        rule: '阿里云盘',\\\\n                        url: 'hiker://page/share?rule=阿里云盘&share_id=' + url\\\\n                    }));\\\\n                }, input)\\\\n            }\\\\n        }),\\\\n        disableX5: true\\\\n    }\\\\n})\\\\nsetResult(d);\\\"}]\",\"proxy\":\"\"}","title":"聚云盘"}