function drawGrid(disp)
  disp:reset()
  disp:fill({ symbol = "|", x = 17, color = "orange", direction = "verticle" })
  disp:fill({ symbol = "|", x = 34, color = "orange", direction = "verticle" })

  disp:fill({ symbol = "=", y = 1, color = "red" })
  disp:text(" Status ", { text_align = "center", y = 1 })
  disp:fill({ symbol = "=", y = 7, color = "red" })
  disp:fill({ symbol = "=", y = 13, color = "red" })
  disp:fill({ symbol = "=", y = 19, color = "red" })
end

local grid_boxes = {
  { start_pos = { y = 2, x = 1 }, end_pos = { y = 6, x = 16 } },
  { start_pos = { y = 2, x = 18 }, end_pos = { y = 6, x = 33 } },
  { start_pos = { y = 2, x = 35 }, end_pos = { y = 6, x = 50 } },

  { start_pos = { y = 8, x = 1 }, end_pos = { y = 12, x = 16 } },
  { start_pos = { y = 8, x = 18 }, end_pos = { y = 12, x = 33 } },
  { start_pos = { y = 8, x = 35 }, end_pos = { y = 12, x = 50 } },

  { start_pos = { y = 14, x = 1 }, end_pos = { y = 18, x = 16 } },
  { start_pos = { y = 14, x = 18 }, end_pos = { y = 18, x = 33 } },
  { start_pos = { y = 14, x = 35 }, end_pos = { y = 18, x = 50 } },
}

local box_height = 5
local box_width = 15

function renderBoxes(disp, data)
  data = data or {}

  for idx, val in ipairs(data) do
    local grid_box = grid_boxes[idx]
    local lines_printed = 0

    -- print(val)
    for k, v in pairs(val) do
      local print_y = (grid_box.start_pos.y + lines_printed)
      if print_y >= grid_box.end_pos.y then
        break
      end

      local text_str = k .. ": " .. v
      local line_length = #text_str
      if line_length > 16 then
        text_str = string.sub(text_str, 1, 13) .. "..."
      end

      disp:write(text_str, { x = grid_box.start_pos.x, y = print_y })
      lines_printed = lines_printed + 1
    end
  end
end
