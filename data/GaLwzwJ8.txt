#include <iostream>
#include <cmath>
#include <vector>
#include <string>

using namespace std;

vector<vector<int>> tree;
vector<int> h, t_in, t_out;

int o = -1, t = 0;

void dfs(int v, int d){
    t += 1;
    h[v] = d;
    t_in[v] = t;
    for (int i : tree[v]) {
        dfs(i, d+1);
    }
    t += 1;
    t_out[v] = t;
}

int main(){
    cin.tie(0);
    cout.tie(0);
    ios_base::sync_with_stdio(false);
    int n, m, k, x, v, u;
    cin >> n >> m >> k;
    tree.resize(n);
    h.resize(n);
    t_in.resize(n);
    t_out.resize(n);
    for (int i = 1; i < n; ++i) {
        cin >> x;
        tree[x-1].push_back(i);
    }
    dfs(0, 0);
    for (int i = 0; i < m; ++i) {
        cin >> v >> u;
        if (h[u-1] - h[v-1] <= k && t_in[v-1] <= t_in[u-1] && t_out[v-1] >= t_out[u-1]){
            cout << "yes\n";
        } else {
            cout << "no\n";
        }
    }
}