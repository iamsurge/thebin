function spacer(depth)
    return string.rep('  ', depth)
end

function dump(object, depth)
    if type(object) == 'table' then
        local text = '\r\n' .. spacer(depth) .. '{\r\n'
        for k, v in pairs(object) do
            if type(v) == 'function' then
            else
                if type(k) ~= 'number' then
                    k = '"' .. k .. '"'
                end
                text = text .. spacer(depth + 1) .. '[' .. k .. '] = ' .. dump(v, depth + 1) .. ',\r\n'
            end
        end
        return text .. spacer(depth) .. '}'
    else
        return tostring(object)
    end
end

function invert(table)
    local tempTable = {}
    for k, v in pairs(table) do
        tempTable[v] = k
    end
    return tempTable
end

function deepcopy(orig)
    local orig_type = type(orig)
    local copy
    if orig_type == 'table' then
        copy = {}
        for orig_key, orig_value in next, orig, nil do
            copy[deepcopy(orig_key)] = deepcopy(orig_value)
        end
    else -- number, string, boolean, etc
        copy = orig
    end
    return copy
end

return { dump = dump, invert = invert, deepcopy = deepcopy }