import sys
import threading


class Point:
    def __init__(self):
        self.cont = []
        self.len = 0
        self.pi1 = 0
        self.route = []
        self.name = ""


#1;3;2;Х;4;6;5;9;8;7;10;11;13;12;15;14
opd0 = 0 # up
opd1 = 1 # down
opd2 = 2 # left
opd3 = 3 # right


class Graph:
    def __init__(self):
        self.s = Point()
        self.o = []
        self.c = []
        self.name = 0
        self.a = 0

    def check_popd(self, pi):
        possible_opds = []
        if 2 <= pi <= 2:
            possible_opds.append(opd1)
            possible_opds.append(opd2)
            possible_opds.append(opd3)
        elif pi == 1:
            possible_opds.append(opd1)
            possible_opds.append(opd3)
        elif pi == 4:
            possible_opds.append(opd1)
            possible_opds.append(opd3)
        elif 14 <= pi <= 15:
            possible_opds.append(opd0)
            possible_opds.append(opd2)
            possible_opds.append(opd3)
        elif pi == 13:
            possible_opds.append(opd0)
            possible_opds.append(opd3)
        elif pi == 16:
            possible_opds.append(opd0)
            possible_opds.append(opd2)
        elif pi == 5 or pi == 9:
            possible_opds.append(opd0)
            possible_opds.append(opd1)
            possible_opds.append(opd3)
        elif pi == 8 or pi == 12:
            possible_opds.append(opd0)
            possible_opds.append(opd1)
            possible_opds.append(opd2)
        elif 0 < pi < 17:
            possible_opds.append(opd0)
            possible_opds.append(opd1)
            possible_opds.append(opd2)
            possible_opds.append(opd3)
        else:
            return []
        return possible_opds

    def get_c(self, lst, res_c):
        c_p = Point()
        c = 0
        for i in lst:
            l = 0
            for x in i.cont:
                if res_c.index(x) == i.cont.index(x):
                    l += 1
            if l > c:
                c = l
                c_p = i
        return c_p

    def get_c1(self, lst, res_c):
        c_p = Point()
        c = 0
        for i in lst:
            l = 0
            for x in i.cont:
                if res_c.index(x) == i.cont.index(x):
                    l += 1
            if l > c:
                c = l
        return c

    def get_p(self, pnt: Point, res_c: list) -> int:
        c = 0
        for i in self.check_popd(pnt.cont.index("X")):
            if i == 0:
                nlst = pnt.cont
                xi = pnt.cont.index("X")
                nlst[xi] = nlst[xi - 4]
                nlst[xi - 4] = "X"
                nxp = Point()
                nxp.cont = nlst
                nxpls = [nxp]
                if self.get_c1(nxpls, res_c) > c:
                    c = self.get_c1(nxpls, res_c)
            if i == 1:
                nlst = pnt.cont
                xi = pnt.cont.index("X")
                nlst[xi] = nlst[xi + 4]
                nlst[xi + 4] = "X"
                nxp = Point()
                nxp.cont = nlst
                nxpls = [nxp]
                if self.get_c1(nxpls, res_c) > c:
                    c = self.get_c1(nxpls, res_c)
            if i == 2:
                nlst = pnt.cont
                xi = pnt.cont.index("X")
                nlst[xi] = nlst[xi - 1]
                nlst[xi - 1] = "X"
                nxp = Point()
                nxp.cont = nlst
                nxpls = [nxp]
                if self.get_c1(nxpls, res_c) > c:
                    c = self.get_c1(nxpls, res_c)
            if i == 3:
                nlst = pnt.cont
                xi = pnt.cont.index("X")
                nlst[xi] = nlst[xi + 1]
                nlst[xi + 1] = "X"
                nxp = Point()
                nxp.cont = nlst
                nxpls = [nxp]
                if self.get_c1(nxpls, res_c) > c:
                    c = self.get_c1(nxpls, res_c)
        return c

    def get_l(self):
        return len(self.c)

    def start_analyse(self, s_cont, res_cont):
        s_x_index = s_cont.index("X") + 1
        pi = s_x_index
        self.s.cont = s_cont
        possible_opds = self.check_popd(s_x_index)
        self.s.name = str(self.name)
        self.name += 1
        for i in possible_opds:
            if i == 0:
                np = []
                p = Point()
                for j in s_cont:
                    np.append(j)
                np[s_x_index - 1] = np[s_x_index - 1 - 4]
                np[s_x_index - 1 - 4] = "X"
                p.cont = np
                p.pi1 = pi - 4
                p.name = str(self.name)
                p.route.append(self.name)
                self.name += 1
                if p not in self.c and p not in self.o:
                    self.o.append(p)
            elif i == 1:
                np = []
                p = Point()
                for j in s_cont:
                    np.append(j)
                np[s_x_index - 1] = np[s_x_index - 1 + 4]
                np[s_x_index - 1 + 4] = "X"
                p.cont = np
                p.pi1 = pi + 4
                p.name = str(self.name)
                p.route.append(self.name)
                self.name += 1
                if p not in self.c and p not in self.o:
                    self.o.append(p)
            elif i == 2:
                np = []
                p = Point()
                for j in s_cont:
                    np.append(j)
                np[s_x_index - 1] = np[s_x_index - 1 - 1]
                np[s_x_index - 1 - 1] = "X"
                p.cont = np
                p.pi1 = pi - 1
                p.name = str(self.name)
                p.route.append(self.name)
                self.name += 1
                if p not in self.c and p not in self.o:
                    self.o.append(p)
            elif i == 3:
                np = []
                p = Point()
                for j in s_cont:
                    np.append(j)
                np[s_x_index - 1] = np[s_x_index - 1 + 1]
                np[s_x_index - 1 + 1] = "X"
                p.cont = np
                p.pi1 = pi + 1
                p.name = str(self.name)
                p.route.append(self.name)
                self.name += 1
                if p not in self.c and p not in self.o:
                    self.o.append(p)
        self.c.append(self.s)
        while True:
            c = self.get_c1(self.o, res_cont)
            l = len(self.c)
            g = 0
            ppoint = Point()
            for i in self.o:
                if self.get_p(i, res_cont) + c - l > g:
                    g = self.get_p(i, res_cont) + c - l
                    ppoint = i
            #ppoint - точка для перебору
            if ppoint.cont == res_cont:
                return ppoint.route
            pd = self.check_popd(ppoint.pi1)
            for i in pd:
                if i == 0:
                    np = []
                    p = Point()
                    p.route = ppoint.route
                    for j in ppoint.cont:
                        np.append(j)
                    np[ppoint.pi1 - 1] = np[ppoint.pi1 - 1 - 4]
                    np[ppoint.pi1 - 1 - 4] = "X"
                    p.cont = np
                    p.pi1 = ppoint.pi1 - 4
                    p.name = str(self.name)
                    p.route.append(self.name)
                    self.name += 1
                    if p not in self.c and p not in self.o:
                        self.o.append(p)
                elif i == 1:
                    np = []
                    p = Point()
                    p.route = ppoint.route
                    for j in ppoint.cont:
                        np.append(j)
                    np[ppoint.pi1 - 1] = np[ppoint.pi1 - 1 + 4]
                    np[ppoint.pi1 - 1 + 4] = "X"
                    p.cont = np
                    p.pi1 = ppoint.pi1 + 4
                    p.name = str(self.name)
                    p.route.append(self.name)
                    self.name += 1
                    if p not in self.c and p not in self.o:
                        self.o.append(p)
                elif i == 2:
                    np = []
                    p = Point()
                    p.route = ppoint.route
                    for j in ppoint.cont:
                        np.append(j)
                    np[ppoint.pi1 - 1] = np[ppoint.pi1 - 1 - 1]
                    np[ppoint.pi1 - 1 - 1] = "X"
                    p.cont = np
                    p.pi1 = ppoint.pi1 - 1
                    p.name = str(self.name)
                    p.route.append(self.name)
                    self.name += 1
                    if p not in self.c and p not in self.o:
                        self.o.append(p)
                elif i == 3:
                    np = []
                    p = Point()
                    p.route = ppoint.route
                    for j in ppoint.cont:
                        np.append(j)
                    np[ppoint.pi1 - 1] = np[ppoint.pi1 - 1 + 1]
                    np[ppoint.pi1 - 1 + 1] = "X"
                    p.cont = np
                    p.pi1 = ppoint.pi1 + 1
                    p.name = str(self.name)
                    p.route.append(self.name)
                    self.name += 1
                    if p not in self.c and p not in self.o:
                        self.o.append(p)
            self.c.append(ppoint)
            sys.stdout.write("\r" + str(self.a))
            sys.stdout.flush()
            self.a += 1


gr = Graph()
print(gr.start_analyse([0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, "X", 15],
                 [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, "X"]))

print(len(gr.c))
print(len(gr.o))
