#include <nana/gui.hpp>
#include <nana/gui/widgets/button.hpp>
#include <nana/gui/widgets/listbox.hpp>

void move_items(nana::listbox::index_pairs items, nana::listbox& source, nana::listbox& dest);

int main() {
    auto rectangle = nana::API::make_center(600, 300);
    nana::form form(rectangle);
    form.bgcolor(nana::color(235, 235, 235));

    nana::listbox lb1(form);
    nana::button btn1(form, ">>"), btn2(form, ">"), btn3(form, "<"), btn4(form, "<<");
    nana::listbox lb2(form);

    lb1.append_header("Fruits");
    lb2.append_header("Favorite Fruits");

    auto category = lb1.at(0);

    std::vector<std::string> fruits{ "Banana", "Apple", "Orange", "Grape", "Pineapple", "Strawberry" };

    for (auto &fruit : fruits) {
        category.append(fruit);
    }

    btn1.events().click(
        [&](nana::arg_click args) {
            lb1.at(0).select(true);
            auto items = lb1.selected();

            move_items(items, lb1, lb2);
        }
    );

    btn2.events().click(
        [&](nana::arg_click args) {
            auto selectedItems = lb1.selected();

            move_items(selectedItems, lb1, lb2);
        }
    );

    btn3.events().click(
        [&](nana::arg_click args) {
            auto selectedItems = lb2.selected();

            move_items(selectedItems, lb2, lb1);
        }
    );

    btn4.events().click(
        [&](nana::arg_click args) {
            lb2.at(0).select(true);
            auto items = lb2.selected();

            move_items(items, lb2, lb1);
        }
    );

    nana::place layout(form);
    layout.div("<margin=[5, 5, 5, 5] <lb1><vertical margin=[5, 5, 5, 5] weight=100 gap=5 btns><lb2>>");
    layout.field("lb1") << lb1;
    layout.field("btns") << btn1 << btn2 << btn3 << btn4;
    layout.field("lb2") << lb2;
    layout.collocate();

    form.show();
    nana::exec();
}

void move_items(nana::listbox::index_pairs items, nana::listbox& source, nana::listbox& dest)
{
    auto dest_cat = dest.at(0);

    for (auto item : items) {
        dest_cat.append(source.at(item).text(0));
    }

    std::reverse(items.begin(), items.end());

    for (auto selected_item_pair : items) {
        source.erase(source.at(selected_item_pair));
    }
}
