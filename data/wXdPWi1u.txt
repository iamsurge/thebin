function sugRead(suggest)
    local typed = ""
    local loop = 0
    local typing = true
    while typing do
        local event, key = os.pullEvent("key")
        local x, y = term.getCursorPos()
        if keys.enter == key then
            typing = false
        elseif (keys.backspace == key) then
            if (not (x - 1 < 1)) then
                typed = string.sub(typed, 1, #typed - 1)
                term.setCursorPos(x - 1, y)
                term.write(" ")
                term.setCursorPos(x - 1, y)
            end
        elseif keys.space == key then
            typed = typed .. " "
            term.write(" ")
            term.setCursorPos(x + 1, y)
        elseif (key > 47) and (key < 58) then
            local num = tonumber(key) - 48
            term.write(num)
            typed = typed .. tostring(num)
            term.setCursorPos(x + 1, y)
        elseif (not (keys.down == key)) and (not (keys.up == key)) then
            typed = typed .. keys.getName(key)
            term.write(keys.getName(key))
            term.setCursorPos(x + 1, y)
        end
        --Suggesting
        term.setBackgroundColor(colors.gray)
        local pBColor = term.getBackgroundColor()
        local px, py = term.getCursorPos()
        local suggestions = tabMatch(suggest, typed)
        if not (suggestions == nil) then
            if keys.down == key then
                local suggestions = tabMatch(suggest, typed)
                loop = loop + 1
                local text = suggestions[math.fmod(math.abs(loop), #suggestions) + 1]
                term.write(string.sub(text, 2, #text))
            elseif keys.up == key then
                loop = loop - 1
                local text = suggestions[math.fmod(math.abs(loop), #suggestions) + 1]
                term.write(string.sub(text, 2, #text))
            else
                local text = suggestions[math.fmod(math.abs(loop), #suggestions) + 1]
                term.write(string.sub(text, 2, #text))
            end
            term.setBackgroundColor(pBColor)
            term.setCursorPos(px, py)
        end
    end
    return typed
end

function scroll()
end

function rel()
    os.loadAPI("komp")
end

function tabMatch(array, strMatch, orderMatch)
    local returnTab = {}
    for i = 1, #array do
        if not (string.find(array[i], strMatch) == nil) then
            table.insert(returnTab, array[i])
        end
    end
    if orderMatch then
        for i = 1, #array do
            if not (string.find(string.sub(array[i], 1, #strMatch) == nil)) then
                table.insert(returnTab, array[i])
            end
        end
    end
    return returnTab
end
function ranVal()
    local val = {"hello", "hell", "hella", "halo", "hexagon", "alphabet"}
    return val
end
