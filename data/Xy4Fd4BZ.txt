海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥常见寄生虫图谱-人体常见寄生虫学彩色图谱@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"text_1\",\"name\":\"搜索\",\"path\":\"搜索\",\"rule\":\"js:\\nvar d = [];\\ntry {\\n    if (MY_PAGE == 1) {\\n        var engines = [\\\"Ylibrary\\\", \\\"Zhelper_v5\\\", \\\"Zhelper_v4\\\", \\\"Libgen\\\", \\\"无名图书\\\", \\\"网盘\\\"]\\n        engines.forEach(item => {\\n            d.push({\\n                title: getItem(\\\"engine\\\", \\\"Ylibrary\\\") == item ? `‘‘’’<strong><font color=\\\"#f13b66a\\\">◉ </front></strong>${item}` : item,\\n                url: $().lazyRule((n) => {\\n                    setItem(\\\"engine\\\", n)\\n                    refreshPage()\\n                    return \\\"toast://已切换引擎：\\\" + n\\n                }, item),\\n                col_type: \\\"scroll_button\\\"\\n            })\\n        })\\n    }\\n    var history = storage0.getItem(\\\"history\\\", [])\\n    if (!history.includes(getParam(\\\"kw\\\"))) {\\n        history.unshift(getParam(\\\"kw\\\"))\\n        storage0.setItem(\\\"history\\\", history)\\n    }\\n    $.require(\\\"hiker://page/api\\\")[getItem(\\\"engine\\\", \\\"Ylibrary\\\")](getParam(\\\"kw\\\"), MY_PAGE)\\n} catch (e) {\\n    toast(\\\"搜索失败了，请切换引擎重试\\\")\\n    log(e.message)\\n}\\nsetResult(d);\"},{\"col_type\":\"text_1\",\"name\":\"api\",\"path\":\"api\",\"rule\":\"$.exports = {\\n    servers: [\\\"https://ipfsgw00.stariverpan.com:9095/ipfs/\\\", \\\"https://dweb.link/ipfs/\\\", \\\"https://ipfs.jpu.jp/ipfs/\\\", \\\"https://cf-ipfs.com/ipfs/\\\", \\\"https://gateway.pinata.cloud/ipfs/\\\", \\\"https://ipfs-gateway.cloud/ipfs/\\\"],\\n    getFileSize: function(size) {\\n        if (size <= 0) {\\n            return \\\"\\\";\\n        }\\n        let unitForm = [\\\"Byte\\\", \\\"KB\\\", \\\"MB\\\", \\\"GB\\\", \\\"TB\\\"];\\n        for (let i = 0, len = unitForm.length; i < len; i++) {\\n            if (size > 1024) {\\n                size /= 1024;\\n                continue;\\n            } else {\\n                return size.toFixed(2).replace(/(\\\\.00)$/, \\\"\\\") + unitForm[i];\\n            }\\n        }\\n        return \\\"ERROR:数值过大\\\";\\n    },\\n    Ylibrary: function(kw, page) {\\n        var res = JSON.parse(post(\\\"https://api.ylibrary.org/api/search/\\\", {\\n            body: JSON.stringify({\\n                \\\"keyword\\\": kw,\\n                \\\"page\\\": page,\\n                \\\"sensitive\\\": false\\n            })\\n        })).data\\n        res.forEach(item => {\\n            d.push({\\n                title: item.title,\\n                desc: `““””<small>作者:${item.author} 出版社:${item.publisher?item.publisher:\\\"暂无\\\"} ISBN:${item.isbn?item.isbn:\\\"暂无\\\"} 出版时间:${item.year?item.year:\\\"暂无\\\"} 文件格式:${item.extension} 文件大小:${$.require(\\\"api\\\").getFileSize(item.filesize)}</small>`,\\n                url: $().lazyRule((id) => {\\n                    try {\\n                        var res = JSON.parse(post(\\\"https://api.ylibrary.org/api/detail/\\\", {\\n                            body: JSON.stringify({\\n                                \\\"id\\\": id,\\n                                \\\"source\\\": \\\"zlibrary\\\"\\n                            })\\n                        }))\\n                        var servers = $.require(\\\"hiker://page/api\\\").servers\\n                        servers.unshift(\\\"ipfs下载\\\")\\n                        servers.unshift(\\\"百度云盘转存\\\")\\n                        if (res.in_libgen) {\\n                            servers.unshift(\\\"Libgen(推荐)\\\")\\n                        }\\n                        return $(servers, 1, \\\"选择线路\\\").select((res) => {\\n                            if (input == \\\"Libgen(推荐)\\\") {\\n                                return \\\"download://\\\" + pdfh(request(\\\"http://library.lol/main/\\\" + res.md5), \\\"#download&&a&&href\\\")\\n                            } else if (input == \\\"百度云盘转存\\\") {\\n                                return $.require(\\\"api\\\").baidu(res)\\n                            } else if (input == \\\"ipfs下载\\\") {\\n                                return `x5://https://ipfs-checker.1kbtool.com/${res.ipfs_cid}`\\n                            } else if (input.includes(\\\"ipfsgw00.stariverpan.com\\\")) {\\n                                return \\\"download://\\\" + input + res.ipfs_cid + \\\";{Referer@https://wx.stariverpan.com/}\\\"\\n                            } else {\\n                                return \\\"download://\\\" + input + res.ipfs_cid\\n                            }\\n                        }, res)\\n                    } catch (e) {\\n                        log(e.message)\\n                        return \\\"toast://解析失败\\\"\\n                    }\\n                }, item.id)\\n            })\\n        })\\n    },\\n    Zhelper_v5: function(kw, page) {\\n        var res = JSON.parse(post(\\\"https://api.v5.zhelper.net/api/search/\\\", {\\n            body: JSON.stringify({\\n                \\\"keyword\\\": kw,\\n                \\\"page\\\": page,\\n                \\\"sensitive\\\": false\\n            })\\n        })).data\\n        res.forEach(item => {\\n            d.push({\\n                title: item.title,\\n                desc: `““””<small>作者:${item.author} 出版社:${item.publisher?item.publisher:\\\"暂无\\\"} ISBN:${item.isbn?item.isbn:\\\"暂无\\\"} 出版时间:${item.year?item.year:\\\"暂无\\\"} 文件格式:${item.extension} 文件大小:${$.require(\\\"api\\\").getFileSize(item.filesize)}</small>`,\\n                url: $().lazyRule((id) => {\\n                    try {\\n                        var res = JSON.parse(post(\\\"https://api.v5.zhelper.net/api/detail/\\\", {\\n                            body: JSON.stringify({\\n                                \\\"id\\\": id,\\n                                \\\"source\\\": \\\"zlibrary\\\"\\n                            })\\n                        }))\\n                        var servers = $.require(\\\"hiker://page/api\\\").servers\\n                        servers.unshift(\\\"ipfs下载\\\")\\n                        servers.unshift(\\\"百度云盘转存\\\")\\n                        if (res.in_libgen) {\\n                            servers.unshift(\\\"Libgen(推荐)\\\")\\n                        }\\n                        return $(servers, 1, \\\"选择线路\\\").select((res) => {\\n                            if (input == \\\"Libgen(推荐)\\\") {\\n                                return \\\"download://\\\" + pdfh(request(\\\"http://library.lol/main/\\\" + res.md5), \\\"#download&&a&&href\\\")\\n                            } else if (input == \\\"百度云盘转存\\\") {\\n                                return $.require(\\\"api\\\").baidu(res)\\n                            } else if (input == \\\"ipfs下载\\\") {\\n                                return `x5://https://ipfs-checker.1kbtool.com/${res.ipfs_cid}`\\n                            } else if (input.includes(\\\"ipfsgw00.stariverpan.com\\\")) {\\n                                return \\\"download://\\\" + input + res.ipfs_cid + \\\";{Referer@https://wx.stariverpan.com/}\\\"\\n                            } else {\\n                                return \\\"download://\\\" + input + res.ipfs_cid\\n                            }\\n                        }, res)\\n                    } catch (e) {\\n                        log(e.message)\\n                        return \\\"toast://解析失败\\\"\\n                    }\\n                }, item.id)\\n            })\\n        })\\n    },\\n    Zhelper_v4: function(kw, page) {\\n        var res = JSON.parse(post(\\\"https://api.mibooks.tk/api/search/\\\", {\\n            body: JSON.stringify({\\n                \\\"keyword\\\": kw,\\n                \\\"page\\\": page,\\n                \\\"sensitive\\\": false\\n            })\\n        })).data\\n        res.forEach(item => {\\n            d.push({\\n                title: item.title,\\n                desc: `““””<small>作者:${item.author} 出版社:${item.publisher?item.publisher:\\\"暂无\\\"} ISBN:${item.isbn?item.isbn:\\\"暂无\\\"} 出版时间:${item.year?item.year:\\\"暂无\\\"} 文件格式:${item.extension} 文件大小:${$.require(\\\"api\\\").getFileSize(item.filesize)}</small>`,\\n                url: $().lazyRule((id) => {\\n                    try {\\n                        var servers = ['https://test1.zlib.download', 'https://test2.zlib.download', 'https://zlib.jg12123.one']\\n                        return $(servers, 1, \\\"请选择下载线路\\\").select((id) => {\\n                            return \\\"download://\\\" + input + \\\"/download/\\\" + id + \\\"/\\\"\\n                        }, id)\\n                    } catch (e) {\\n                        log(e.message)\\n                        return \\\"toast://解析失败\\\"\\n                    }\\n                }, item.id)\\n            })\\n        })\\n    },\\n    checkLibgen: function() {\\n        var domains = [\\\"http://libgen.rs\\\", \\\"http://libgen.is\\\", \\\"http://libgen.st\\\"]\\n        try {\\n            for (item of domains) {\\n                var code = JSON.parse(request(item, {\\n                    withStatusCode: true\\n                })).statusCode\\n                if (code == 200) {\\n                    setItem(\\\"libgen\\\", item)\\n                    toast(\\\"检测到可用镜像\\\")\\n                    refreshPage()\\n                    break\\n                }\\n            }\\n            toast(\\\"所有镜像都无法使用，请打开TZ使用\\\")\\n        } catch (e) {\\n            log(e.message)\\n        }\\n    },\\n    Libgen: function(kw, page) {\\n        if (getItem(\\\"libgen\\\", \\\"\\\") == \\\"\\\") {\\n            toast(\\\"无可用镜像，正在检测中...\\\")\\n            $.require(\\\"api\\\").checkLibgen()\\n        } else {\\n            var url = getItem(\\\"libgen\\\") + \\\"/search.php?req=\\\" + kw + \\\"&page=\\\" + page\\n            var r = JSON.parse(request(url, {\\n                withHeaders: true\\n            }))\\n            if (r.statusCode == 200) {\\n                var res = r.body\\n                var list = pdfa(res, \\\"body&&tr\\\").filter(item => {\\n                    if (item.includes(\\\"nowrap\\\")) {\\n                        return item\\n                    }\\n                })\\n                list.forEach(item => {\\n                    var li = item.match(new RegExp(\\\"<td(.*?)</td>\\\", \\\"g\\\"))\\n                    var desc = \\\"““””<small>\\\" + pdfh(li[1], \\\"a&&Text\\\")\\n                    for (let i = 3; i < li.length - 3; i++) {\\n                        desc += \\\"；\\\" + pdfh(li[i], \\\"Text\\\")\\n                    }\\n                    desc += \\\"</small>\\\"\\n                    d.push({\\n                        title: pdfh(li[2], \\\"Text\\\"),\\n                        desc: desc,\\n                        url: $().lazyRule((li) => {\\n                            return \\\"download://\\\" + pdfh(request(pdfh(li[9], \\\"a&&href\\\")), \\\"#download&&a&&href\\\")\\n                        }, li)\\n                    })\\n                })\\n            } else {\\n                toast(\\\"镜像失效，重新检测中...\\\")\\n                $.require(\\\"api\\\").checkLibgen()\\n            }\\n        }\\n    },\\n    网盘: function(kw, page) {\\n        var res = JSON.parse(post(\\\"https://api.bookpan.net/api/search/\\\", {\\n            body: JSON.stringify({\\n                \\\"keyword\\\": kw,\\n                \\\"page\\\": page,\\n                \\\"sensitive\\\": false\\n            })\\n        })).data\\n        res.forEach(item => {\\n            d.push({\\n                title: item.info,\\n                desc: \\\"““””<small>\\\" + item.source + \\\"</small>\\\",\\n                url: $().lazyRule((id, source) => {\\n                    try {\\n                        var res = JSON.parse(post(\\\"https://api.bookpan.net/api/detail/\\\", {\\n                            body: JSON.stringify({\\n                                \\\"id\\\": id,\\n                                \\\"source\\\": source\\n                            })\\n                        }))\\n                        if (res.download_link) {\\n                            var dict = {}\\n                            res.download_link.unshift({\\n                                name: \\\"原网页\\\",\\n                                url: res.url\\n                            })\\n                            return $(res.download_link.map(function(item) {\\n                                return item.name\\n                            }), 1, \\\"请选择下载线路\\\").select((links) => {\\n                                return links[links.map(function(item) {\\n                                    return item.name\\n                                }).indexOf(input)].url\\n                            }, res.download_link)\\n                        } else {\\n                            return res.url\\n                        }\\n                    } catch (e) {\\n                        log(e.message)\\n                        return \\\"toast://解析失败\\\"\\n                    }\\n                }, item.id, item.source)\\n            })\\n        })\\n    },\\n    无名图书: function(kw, page) {\\n        var url = \\\"https://www.book123.info/list?key=\\\" + kw + \\\"&page=\\\" + page\\n        var res = request(url)\\n        var list = pdfa(res, \\\".list_pageContent__z_yzv&&li\\\")\\n        list.forEach(item => {\\n            d.push({\\n                title: pdfh(item, \\\".list_title__06nt2&&Text\\\"),\\n                desc: \\\"““””<small>\\\" + pdfh(item, \\\".list_author__lPwpl&&Text\\\") + \\\"\\\\n\\\" + pdfh(item, \\\".list_rate__J7Ox1&&Text\\\") + \\\"\\\\n\\\" + pdfh(item, \\\".list_desc__kJj1Y&&Text\\\") + \\\"</small>\\\",\\n                url: $().lazyRule((url) => {\\n                    return \\\"download://\\\" + pdfh(request(url), \\\".detail_download_btn__v7b7k&&href\\\")\\n                }, \\\"https://www.book123.info\\\" + pdfh(item, \\\"a&&href\\\"))\\n            })\\n        })\\n    },\\n    baidu: function(res) {\\n        try {\\n            if (!fileExist(\\\"hiker://files/rules/Joe/baidu.txt\\\")) {\\n                toast(\\\"还未登陆\\\")\\n                return $().rule(() => {\\n                    setResult([{\\n                        url: \\\"https://pan.baidu.com/\\\",\\n                        col_type: \\\"x5_webview_single\\\",\\n                        desc: \\\"100%&&float\\\",\\n                        extra: {\\n                            js: $.toString(() => {\\n                                var url = location.href\\n                                if (url.includes(\\\"https://pan.baidu.com/wap\\\")) {\\n                                    fba.writeFile(\\\"hiker://files/rules/Joe/baidu.txt\\\", fba.getCookie(\\\"\\\"))\\n                                    alert(\\\"已获取到cookie，返回即可\\\")\\n                                    fba.back()\\n                                }\\n                            }),\\n                            ua: MOBILE_UA,\\n                            canBack: true\\n                        }\\n                    }])\\n                })\\n            } else {\\n                var bdstoken = JSON.parse(request(\\\"https://pan.baidu.com/api/gettemplatevariable?fields=[%22bdstoken%22]\\\", {\\n                    headers: {\\n                        Cookie: request(\\\"hiker://files/rules/Joe/baidu.txt\\\")\\n                    }\\n                })).result.bdstoken\\n                return $(\\\"/电子书/\\\" + res.title + \\\".\\\" + res.extension, \\\"请输入保存路径\\\").input((bdstoken, res) => {\\n                    var res = JSON.parse(post(\\\"https://pan.baidu.com/rest/2.0/xpan/file?method=create&bdstoken=\\\" + bdstoken, {\\n                        headers: {\\n                            Cookie: request(\\\"hiker://files/rules/Joe/baidu.txt\\\")\\n                        },\\n                        body: {\\n                            size: res.filesize + \\\"\\\",\\n                            path: input,\\n                            block_list: [res.md5],\\n                            rtype: 0\\n                        }\\n                    }))\\n                    if (res.errno == 0) {\\n                        return \\\"toast://转存成功\\\"\\n                    } else if (res.errno == -8) {\\n                        return \\\"toast://转存失败，已经保存过这个文件了\\\"\\n                    } else if (res.errno == 2) {\\n                        return \\\"toast://转存失败，错误的路径\\\"\\n                    } else {\\n                        log(res.errno)\\n                        return \\\"toast://转存失败\\\"\\n                    }\\n                }, bdstoken, res)\\n            }\\n        } catch (e) {\\n            log(e.message)\\n            return \\\"toast://转存失败\\\"\\n        }\\n    }\\n}\"}],\"saved\":false,\"title\":\"Zlib Pro\",\"version\":0,\"url\":\"hiker://empty\",\"col_type\":\"x5_webview_single\",\"find_rule\":\"js:setResult([{\\n    url:\\\"https://ipfs-checker.1kbtool.com/bafykbzacedroexoy2jmflke4mybbcbkg3tuaibfsflshjbhuplpjjwhm2nmwu\\\",\\ndesc:\\\"100%&&float\\\",\\nextra:{canBack: true}\\n}]);\",\"group\":\"阅读\",\"pages\":\"[{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"搜索\\\",\\\"path\\\":\\\"搜索\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\ntry {\\\\n    if (MY_PAGE == 1) {\\\\n        var engines = [\\\\\\\"Ylibrary\\\\\\\", \\\\\\\"Zhelper_v5\\\\\\\", \\\\\\\"Zhelper_v4\\\\\\\", \\\\\\\"Libgen\\\\\\\", \\\\\\\"无名图书\\\\\\\", \\\\\\\"网盘\\\\\\\"]\\\\n        engines.forEach(item => {\\\\n            d.push({\\\\n                title: getItem(\\\\\\\"engine\\\\\\\", \\\\\\\"Ylibrary\\\\\\\") == item ? `‘‘’’<strong><font color=\\\\\\\"#f13b66a\\\\\\\">◉ </front></strong>${item}` : item,\\\\n                url: $().lazyRule((n) => {\\\\n                    setItem(\\\\\\\"engine\\\\\\\", n)\\\\n                    refreshPage()\\\\n                    return \\\\\\\"toast://已切换引擎：\\\\\\\" + n\\\\n                }, item),\\\\n                col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n            })\\\\n        })\\\\n    }\\\\n    var history = storage0.getItem(\\\\\\\"history\\\\\\\", [])\\\\n    if (!history.includes(getParam(\\\\\\\"kw\\\\\\\"))) {\\\\n        history.unshift(getParam(\\\\\\\"kw\\\\\\\"))\\\\n        storage0.setItem(\\\\\\\"history\\\\\\\", history)\\\\n    }\\\\n    $.require(\\\\\\\"hiker://page/api\\\\\\\")[getItem(\\\\\\\"engine\\\\\\\", \\\\\\\"Ylibrary\\\\\\\")](getParam(\\\\\\\"kw\\\\\\\"), MY_PAGE)\\\\n} catch (e) {\\\\n    toast(\\\\\\\"搜索失败了，请切换引擎重试\\\\\\\")\\\\n    log(e.message)\\\\n}\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"text_1\\\",\\\"name\\\":\\\"api\\\",\\\"path\\\":\\\"api\\\",\\\"rule\\\":\\\"$.exports = {\\\\n    servers: [\\\\\\\"https://ipfsgw00.stariverpan.com:9095/ipfs/\\\\\\\", \\\\\\\"https://dweb.link/ipfs/\\\\\\\", \\\\\\\"https://ipfs.jpu.jp/ipfs/\\\\\\\", \\\\\\\"https://cf-ipfs.com/ipfs/\\\\\\\", \\\\\\\"https://gateway.pinata.cloud/ipfs/\\\\\\\", \\\\\\\"https://ipfs-gateway.cloud/ipfs/\\\\\\\"],\\\\n    getFileSize: function(size) {\\\\n        if (size <= 0) {\\\\n            return \\\\\\\"\\\\\\\";\\\\n        }\\\\n        let unitForm = [\\\\\\\"Byte\\\\\\\", \\\\\\\"KB\\\\\\\", \\\\\\\"MB\\\\\\\", \\\\\\\"GB\\\\\\\", \\\\\\\"TB\\\\\\\"];\\\\n        for (let i = 0, len = unitForm.length; i < len; i++) {\\\\n            if (size > 1024) {\\\\n                size /= 1024;\\\\n                continue;\\\\n            } else {\\\\n                return size.toFixed(2).replace(/(\\\\\\\\.00)$/, \\\\\\\"\\\\\\\") + unitForm[i];\\\\n            }\\\\n        }\\\\n        return \\\\\\\"ERROR:数值过大\\\\\\\";\\\\n    },\\\\n    Ylibrary: function(kw, page) {\\\\n        var res = JSON.parse(post(\\\\\\\"https://api.ylibrary.org/api/search/\\\\\\\", {\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"keyword\\\\\\\": kw,\\\\n                \\\\\\\"page\\\\\\\": page,\\\\n                \\\\\\\"sensitive\\\\\\\": false\\\\n            })\\\\n        })).data\\\\n        res.forEach(item => {\\\\n            d.push({\\\\n                title: item.title,\\\\n                desc: `““””<small>作者:${item.author} 出版社:${item.publisher?item.publisher:\\\\\\\"暂无\\\\\\\"} ISBN:${item.isbn?item.isbn:\\\\\\\"暂无\\\\\\\"} 出版时间:${item.year?item.year:\\\\\\\"暂无\\\\\\\"} 文件格式:${item.extension} 文件大小:${$.require(\\\\\\\"api\\\\\\\").getFileSize(item.filesize)}</small>`,\\\\n                url: $().lazyRule((id) => {\\\\n                    try {\\\\n                        var res = JSON.parse(post(\\\\\\\"https://api.ylibrary.org/api/detail/\\\\\\\", {\\\\n                            body: JSON.stringify({\\\\n                                \\\\\\\"id\\\\\\\": id,\\\\n                                \\\\\\\"source\\\\\\\": \\\\\\\"zlibrary\\\\\\\"\\\\n                            })\\\\n                        }))\\\\n                        var servers = $.require(\\\\\\\"hiker://page/api\\\\\\\").servers\\\\n                        servers.unshift(\\\\\\\"ipfs下载\\\\\\\")\\\\n                        servers.unshift(\\\\\\\"百度云盘转存\\\\\\\")\\\\n                        if (res.in_libgen) {\\\\n                            servers.unshift(\\\\\\\"Libgen(推荐)\\\\\\\")\\\\n                        }\\\\n                        return $(servers, 1, \\\\\\\"选择线路\\\\\\\").select((res) => {\\\\n                            if (input == \\\\\\\"Libgen(推荐)\\\\\\\") {\\\\n                                return \\\\\\\"download://\\\\\\\" + pdfh(request(\\\\\\\"http://library.lol/main/\\\\\\\" + res.md5), \\\\\\\"#download&&a&&href\\\\\\\")\\\\n                            } else if (input == \\\\\\\"百度云盘转存\\\\\\\") {\\\\n                                return $.require(\\\\\\\"api\\\\\\\").baidu(res)\\\\n                            } else if (input == \\\\\\\"ipfs下载\\\\\\\") {\\\\n                                return `x5://https://ipfs-checker.1kbtool.com/${res.ipfs_cid}`\\\\n                            } else if (input.includes(\\\\\\\"ipfsgw00.stariverpan.com\\\\\\\")) {\\\\n                                return \\\\\\\"download://\\\\\\\" + input + res.ipfs_cid + \\\\\\\";{Referer@https://wx.stariverpan.com/}\\\\\\\"\\\\n                            } else {\\\\n                                return \\\\\\\"download://\\\\\\\" + input + res.ipfs_cid\\\\n                            }\\\\n                        }, res)\\\\n                    } catch (e) {\\\\n                        log(e.message)\\\\n                        return \\\\\\\"toast://解析失败\\\\\\\"\\\\n                    }\\\\n                }, item.id)\\\\n            })\\\\n        })\\\\n    },\\\\n    Zhelper_v5: function(kw, page) {\\\\n        var res = JSON.parse(post(\\\\\\\"https://api.v5.zhelper.net/api/search/\\\\\\\", {\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"keyword\\\\\\\": kw,\\\\n                \\\\\\\"page\\\\\\\": page,\\\\n                \\\\\\\"sensitive\\\\\\\": false\\\\n            })\\\\n        })).data\\\\n        res.forEach(item => {\\\\n            d.push({\\\\n                title: item.title,\\\\n                desc: `““””<small>作者:${item.author} 出版社:${item.publisher?item.publisher:\\\\\\\"暂无\\\\\\\"} ISBN:${item.isbn?item.isbn:\\\\\\\"暂无\\\\\\\"} 出版时间:${item.year?item.year:\\\\\\\"暂无\\\\\\\"} 文件格式:${item.extension} 文件大小:${$.require(\\\\\\\"api\\\\\\\").getFileSize(item.filesize)}</small>`,\\\\n                url: $().lazyRule((id) => {\\\\n                    try {\\\\n                        var res = JSON.parse(post(\\\\\\\"https://api.v5.zhelper.net/api/detail/\\\\\\\", {\\\\n                            body: JSON.stringify({\\\\n                                \\\\\\\"id\\\\\\\": id,\\\\n                                \\\\\\\"source\\\\\\\": \\\\\\\"zlibrary\\\\\\\"\\\\n                            })\\\\n                        }))\\\\n                        var servers = $.require(\\\\\\\"hiker://page/api\\\\\\\").servers\\\\n                        servers.unshift(\\\\\\\"ipfs下载\\\\\\\")\\\\n                        servers.unshift(\\\\\\\"百度云盘转存\\\\\\\")\\\\n                        if (res.in_libgen) {\\\\n                            servers.unshift(\\\\\\\"Libgen(推荐)\\\\\\\")\\\\n                        }\\\\n                        return $(servers, 1, \\\\\\\"选择线路\\\\\\\").select((res) => {\\\\n                            if (input == \\\\\\\"Libgen(推荐)\\\\\\\") {\\\\n                                return \\\\\\\"download://\\\\\\\" + pdfh(request(\\\\\\\"http://library.lol/main/\\\\\\\" + res.md5), \\\\\\\"#download&&a&&href\\\\\\\")\\\\n                            } else if (input == \\\\\\\"百度云盘转存\\\\\\\") {\\\\n                                return $.require(\\\\\\\"api\\\\\\\").baidu(res)\\\\n                            } else if (input == \\\\\\\"ipfs下载\\\\\\\") {\\\\n                                return `x5://https://ipfs-checker.1kbtool.com/${res.ipfs_cid}`\\\\n                            } else if (input.includes(\\\\\\\"ipfsgw00.stariverpan.com\\\\\\\")) {\\\\n                                return \\\\\\\"download://\\\\\\\" + input + res.ipfs_cid + \\\\\\\";{Referer@https://wx.stariverpan.com/}\\\\\\\"\\\\n                            } else {\\\\n                                return \\\\\\\"download://\\\\\\\" + input + res.ipfs_cid\\\\n                            }\\\\n                        }, res)\\\\n                    } catch (e) {\\\\n                        log(e.message)\\\\n                        return \\\\\\\"toast://解析失败\\\\\\\"\\\\n                    }\\\\n                }, item.id)\\\\n            })\\\\n        })\\\\n    },\\\\n    Zhelper_v4: function(kw, page) {\\\\n        var res = JSON.parse(post(\\\\\\\"https://api.mibooks.tk/api/search/\\\\\\\", {\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"keyword\\\\\\\": kw,\\\\n                \\\\\\\"page\\\\\\\": page,\\\\n                \\\\\\\"sensitive\\\\\\\": false\\\\n            })\\\\n        })).data\\\\n        res.forEach(item => {\\\\n            d.push({\\\\n                title: item.title,\\\\n                desc: `““””<small>作者:${item.author} 出版社:${item.publisher?item.publisher:\\\\\\\"暂无\\\\\\\"} ISBN:${item.isbn?item.isbn:\\\\\\\"暂无\\\\\\\"} 出版时间:${item.year?item.year:\\\\\\\"暂无\\\\\\\"} 文件格式:${item.extension} 文件大小:${$.require(\\\\\\\"api\\\\\\\").getFileSize(item.filesize)}</small>`,\\\\n                url: $().lazyRule((id) => {\\\\n                    try {\\\\n                        var servers = ['https://test1.zlib.download', 'https://test2.zlib.download', 'https://zlib.jg12123.one']\\\\n                        return $(servers, 1, \\\\\\\"请选择下载线路\\\\\\\").select((id) => {\\\\n                            return \\\\\\\"download://\\\\\\\" + input + \\\\\\\"/download/\\\\\\\" + id + \\\\\\\"/\\\\\\\"\\\\n                        }, id)\\\\n                    } catch (e) {\\\\n                        log(e.message)\\\\n                        return \\\\\\\"toast://解析失败\\\\\\\"\\\\n                    }\\\\n                }, item.id)\\\\n            })\\\\n        })\\\\n    },\\\\n    checkLibgen: function() {\\\\n        var domains = [\\\\\\\"http://libgen.rs\\\\\\\", \\\\\\\"http://libgen.is\\\\\\\", \\\\\\\"http://libgen.st\\\\\\\"]\\\\n        try {\\\\n            for (item of domains) {\\\\n                var code = JSON.parse(request(item, {\\\\n                    withStatusCode: true\\\\n                })).statusCode\\\\n                if (code == 200) {\\\\n                    setItem(\\\\\\\"libgen\\\\\\\", item)\\\\n                    toast(\\\\\\\"检测到可用镜像\\\\\\\")\\\\n                    refreshPage()\\\\n                    break\\\\n                }\\\\n            }\\\\n            toast(\\\\\\\"所有镜像都无法使用，请打开TZ使用\\\\\\\")\\\\n        } catch (e) {\\\\n            log(e.message)\\\\n        }\\\\n    },\\\\n    Libgen: function(kw, page) {\\\\n        if (getItem(\\\\\\\"libgen\\\\\\\", \\\\\\\"\\\\\\\") == \\\\\\\"\\\\\\\") {\\\\n            toast(\\\\\\\"无可用镜像，正在检测中...\\\\\\\")\\\\n            $.require(\\\\\\\"api\\\\\\\").checkLibgen()\\\\n        } else {\\\\n            var url = getItem(\\\\\\\"libgen\\\\\\\") + \\\\\\\"/search.php?req=\\\\\\\" + kw + \\\\\\\"&page=\\\\\\\" + page\\\\n            var r = JSON.parse(request(url, {\\\\n                withHeaders: true\\\\n            }))\\\\n            if (r.statusCode == 200) {\\\\n                var res = r.body\\\\n                var list = pdfa(res, \\\\\\\"body&&tr\\\\\\\").filter(item => {\\\\n                    if (item.includes(\\\\\\\"nowrap\\\\\\\")) {\\\\n                        return item\\\\n                    }\\\\n                })\\\\n                list.forEach(item => {\\\\n                    var li = item.match(new RegExp(\\\\\\\"<td(.*?)</td>\\\\\\\", \\\\\\\"g\\\\\\\"))\\\\n                    var desc = \\\\\\\"““””<small>\\\\\\\" + pdfh(li[1], \\\\\\\"a&&Text\\\\\\\")\\\\n                    for (let i = 3; i < li.length - 3; i++) {\\\\n                        desc += \\\\\\\"；\\\\\\\" + pdfh(li[i], \\\\\\\"Text\\\\\\\")\\\\n                    }\\\\n                    desc += \\\\\\\"</small>\\\\\\\"\\\\n                    d.push({\\\\n                        title: pdfh(li[2], \\\\\\\"Text\\\\\\\"),\\\\n                        desc: desc,\\\\n                        url: $().lazyRule((li) => {\\\\n                            return \\\\\\\"download://\\\\\\\" + pdfh(request(pdfh(li[9], \\\\\\\"a&&href\\\\\\\")), \\\\\\\"#download&&a&&href\\\\\\\")\\\\n                        }, li)\\\\n                    })\\\\n                })\\\\n            } else {\\\\n                toast(\\\\\\\"镜像失效，重新检测中...\\\\\\\")\\\\n                $.require(\\\\\\\"api\\\\\\\").checkLibgen()\\\\n            }\\\\n        }\\\\n    },\\\\n    网盘: function(kw, page) {\\\\n        var res = JSON.parse(post(\\\\\\\"https://api.bookpan.net/api/search/\\\\\\\", {\\\\n            body: JSON.stringify({\\\\n                \\\\\\\"keyword\\\\\\\": kw,\\\\n                \\\\\\\"page\\\\\\\": page,\\\\n                \\\\\\\"sensitive\\\\\\\": false\\\\n            })\\\\n        })).data\\\\n        res.forEach(item => {\\\\n            d.push({\\\\n                title: item.info,\\\\n                desc: \\\\\\\"““””<small>\\\\\\\" + item.source + \\\\\\\"</small>\\\\\\\",\\\\n                url: $().lazyRule((id, source) => {\\\\n                    try {\\\\n                        var res = JSON.parse(post(\\\\\\\"https://api.bookpan.net/api/detail/\\\\\\\", {\\\\n                            body: JSON.stringify({\\\\n                                \\\\\\\"id\\\\\\\": id,\\\\n                                \\\\\\\"source\\\\\\\": source\\\\n                            })\\\\n                        }))\\\\n                        if (res.download_link) {\\\\n                            var dict = {}\\\\n                            res.download_link.unshift({\\\\n                                name: \\\\\\\"原网页\\\\\\\",\\\\n                                url: res.url\\\\n                            })\\\\n                            return $(res.download_link.map(function(item) {\\\\n                                return item.name\\\\n                            }), 1, \\\\\\\"请选择下载线路\\\\\\\").select((links) => {\\\\n                                return links[links.map(function(item) {\\\\n                                    return item.name\\\\n                                }).indexOf(input)].url\\\\n                            }, res.download_link)\\\\n                        } else {\\\\n                            return res.url\\\\n                        }\\\\n                    } catch (e) {\\\\n                        log(e.message)\\\\n                        return \\\\\\\"toast://解析失败\\\\\\\"\\\\n                    }\\\\n                }, item.id, item.source)\\\\n            })\\\\n        })\\\\n    },\\\\n    无名图书: function(kw, page) {\\\\n        var url = \\\\\\\"https://www.book123.info/list?key=\\\\\\\" + kw + \\\\\\\"&page=\\\\\\\" + page\\\\n        var res = request(url)\\\\n        var list = pdfa(res, \\\\\\\".list_pageContent__z_yzv&&li\\\\\\\")\\\\n        list.forEach(item => {\\\\n            d.push({\\\\n                title: pdfh(item, \\\\\\\".list_title__06nt2&&Text\\\\\\\"),\\\\n                desc: \\\\\\\"““””<small>\\\\\\\" + pdfh(item, \\\\\\\".list_author__lPwpl&&Text\\\\\\\") + \\\\\\\"\\\\\\\\n\\\\\\\" + pdfh(item, \\\\\\\".list_rate__J7Ox1&&Text\\\\\\\") + \\\\\\\"\\\\\\\\n\\\\\\\" + pdfh(item, \\\\\\\".list_desc__kJj1Y&&Text\\\\\\\") + \\\\\\\"</small>\\\\\\\",\\\\n                url: $().lazyRule((url) => {\\\\n                    return \\\\\\\"download://\\\\\\\" + pdfh(request(url), \\\\\\\".detail_download_btn__v7b7k&&href\\\\\\\")\\\\n                }, \\\\\\\"https://www.book123.info\\\\\\\" + pdfh(item, \\\\\\\"a&&href\\\\\\\"))\\\\n            })\\\\n        })\\\\n    },\\\\n    baidu: function(res) {\\\\n        try {\\\\n            if (!fileExist(\\\\\\\"hiker://files/rules/Joe/baidu.txt\\\\\\\")) {\\\\n                toast(\\\\\\\"还未登陆\\\\\\\")\\\\n                return $().rule(() => {\\\\n                    setResult([{\\\\n                        url: \\\\\\\"https://pan.baidu.com/\\\\\\\",\\\\n                        col_type: \\\\\\\"x5_webview_single\\\\\\\",\\\\n                        desc: \\\\\\\"100%&&float\\\\\\\",\\\\n                        extra: {\\\\n                            js: $.toString(() => {\\\\n                                var url = location.href\\\\n                                if (url.includes(\\\\\\\"https://pan.baidu.com/wap\\\\\\\")) {\\\\n                                    fba.writeFile(\\\\\\\"hiker://files/rules/Joe/baidu.txt\\\\\\\", fba.getCookie(\\\\\\\"\\\\\\\"))\\\\n                                    alert(\\\\\\\"已获取到cookie，返回即可\\\\\\\")\\\\n                                    fba.back()\\\\n                                }\\\\n                            }),\\\\n                            ua: MOBILE_UA,\\\\n                            canBack: true\\\\n                        }\\\\n                    }])\\\\n                })\\\\n            } else {\\\\n                var bdstoken = JSON.parse(request(\\\\\\\"https://pan.baidu.com/api/gettemplatevariable?fields=[%22bdstoken%22]\\\\\\\", {\\\\n                    headers: {\\\\n                        Cookie: request(\\\\\\\"hiker://files/rules/Joe/baidu.txt\\\\\\\")\\\\n                    }\\\\n                })).result.bdstoken\\\\n                return $(\\\\\\\"/电子书/\\\\\\\" + res.title + \\\\\\\".\\\\\\\" + res.extension, \\\\\\\"请输入保存路径\\\\\\\").input((bdstoken, res) => {\\\\n                    var res = JSON.parse(post(\\\\\\\"https://pan.baidu.com/rest/2.0/xpan/file?method=create&bdstoken=\\\\\\\" + bdstoken, {\\\\n                        headers: {\\\\n                            Cookie: request(\\\\\\\"hiker://files/rules/Joe/baidu.txt\\\\\\\")\\\\n                        },\\\\n                        body: {\\\\n                            size: res.filesize + \\\\\\\"\\\\\\\",\\\\n                            path: input,\\\\n                            block_list: [res.md5],\\\\n                            rtype: 0\\\\n                        }\\\\n                    }))\\\\n                    if (res.errno == 0) {\\\\n                        return \\\\\\\"toast://转存成功\\\\\\\"\\\\n                    } else if (res.errno == -8) {\\\\n                        return \\\\\\\"toast://转存失败，已经保存过这个文件了\\\\\\\"\\\\n                    } else if (res.errno == 2) {\\\\n                        return \\\\\\\"toast://转存失败，错误的路径\\\\\\\"\\\\n                    } else {\\\\n                        log(res.errno)\\\\n                        return \\\\\\\"toast://转存失败\\\\\\\"\\\\n                    }\\\\n                }, bdstoken, res)\\\\n            }\\\\n        } catch (e) {\\\\n            log(e.message)\\\\n            return \\\\\\\"toast://转存失败\\\\\\\"\\\\n        }\\\\n    }\\\\n}\\\"}]\"}","title":"常见寄生虫图谱-人体常见寄生虫学彩色图谱"}