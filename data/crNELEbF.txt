#include<bits/stdc++.h>

using namespace std;

using ll = long long;
using ld = long double;
using ull = unsigned long long;

using pii = pair<int, int>;
using pll = pair<ll, ll>;
using pld = pair<ld, ld>;

#define fi first
#define se second
#define pb push_back
#define pf push_front
#define mp make_pair
#define ins insert
#define btpc __builtin_popcount
#define btclz __builtin_clz

#define sz(x) (int)(x.size());
#define all(x) x.begin(), x.end()
#define debug(...) " [" << #__VA_ARGS__ ": " << (__VA_ARGS__) << "] "

mt19937 rng(chrono::steady_clock::now().time_since_epoch().count());

int d4x[4] = {1, 0, -1, 0}; int d4y[4] = {0, 1, 0, -1};
int d8x[8] = {0, 1, 1, 1, 0, -1, -1, -1};
int d8y[8] = {1, 1, 0, -1, -1, -1, 0, 1};

template<class X, class Y>
    bool minimize(X &x, const Y &y) {
        if (x > y)
        {
            x = y;
            return true;
        }
        return false;
    }
template<class X, class Y>
    bool maximize(X &x, const Y &y) {
        if (x < y)
        {
            x = y;
            return true;
        }
        return false;
    }

const int MOD = 1e9 + 7; //998244353

template<class X, class Y>
	void add(X &x, const Y &y) {
		x = (x + y);
		if(x >= MOD) x -= MOD;
	}

template<class X, class Y> 
	void sub(X &x, const Y &y) {
		x = (x - y);
		if(x < 0) x += MOD;
	}

/* Author : Le Ngoc Bao Anh, 12A5, LQD High School for Gifted Student*/

const ll INF = 1e9;
const int N = 1e5 + 10;

struct Edges {
	int u, v, w;
} ed[N];

int par[N];
ll dp[N];
int w[N];

int find_par(int u) {
	if(par[u] < 0) return u;
	return find_par(par[u]);
}

void merge(int u, int v, int we) {
	u = find_par(u), v = find_par(v);
	if(par[u] > par[v]) swap(u, v);
	dp[u] += we * -par[v];
	dp[v] += we * -par[u];
	dp[v] -= dp[u];

	par[u] += par[v];
	par[v] = u;
}

ll get_ans(int u, int w) {
	return dp[u] + (par[u] > 0 ? get_ans(par[u], w) : 0);
}

void solve() {
	int n; cin >> n;

	for(int i = 1; i < n; i++) {
		int u, v;
		u = i + 1; cin >> v;
		ed[i] = {u, v, 0};
	}

	for(int i = 1; i <= n; i++) par[i] = -1;
	for(int i = 1; i <= n; i++) cin >> w[i];
	for(int i = 1; i < n; i++) {
		ed[i].w = min(w[ed[i].u], w[ed[i].v]);		
	}

	sort(ed + 1, ed + n, [&](Edges _x, Edges _y) {
		return _x.w > _y.w;
	});

	for(int i = 1; i < n; i++) {
		merge(ed[i].u, ed[i].v, ed[i].w);
	};

	for(int i = 1; i <= n; i++) {
		cout << w[i] + get_ans(i, w[i]) << " ";
	}
}

int main()
{
    ios_base::sync_with_stdio(0); cin.tie(0); cout.tie(0);
    #ifndef ONLINE_JUDGE
    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);
    #else 
    //online
    #endif

    int tc = 1, ddd = 0;
    // cin >> tc;
    while(tc--) {
        //ddd++;
        //cout << "Case #" << ddd << ": ";
        solve();
    }
}