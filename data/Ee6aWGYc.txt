public class Matrix
{
            static void MatrixDecompose(ref int[][] matrix, out int toggle)
            {
                //LU matrix decomposition 
              //https://learn.microsoft.com/ru-ru/archive/msdn-magazine/2012/december/csharp-matrix-decomposition
                int n = matrix.Length;
                toggle = 1;
                for (int j = 0; j < n - 1; ++j)
                {
                    double colMax = Math.Abs(matrix[j][j]);
                    int pRow = j;
                    for (int i = j + 1; i < n; ++i)
                    {
                        if (matrix[i][j] > colMax)
                        {
                            colMax = matrix[i][j];
                            pRow = i;
                        }
                    }
                    if (pRow != j)
                    {
                        int[] rowPtr = matrix[pRow];
                        matrix[pRow] = matrix[j];
                        matrix[j] = rowPtr;
                        toggle = -toggle;
                    }
                    for (int i = j + 1; i < n; ++i)
                    {
                        matrix[i][j] /= matrix[j][j];
                        for (int k = j + 1; k < n; ++k)
                            matrix[i][k] -= matrix[i][j] * matrix[j][k];
                    }
                }
            }

            public static int Determinant(int[][] matrix)
            {
                if (matrix.Length.Equals(1))
                {
                    return matrix[0][0];
                }
                if (matrix.Length.Equals(2))
                {
                    return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0];
                }
                int toggle;
                MatrixDecompose(ref matrix, out toggle);
                int result = toggle;
                for (int i = 0; i < matrix.Length; i++)
                {
                    result *= matrix[i][i];
                }
                return result;
            }
}