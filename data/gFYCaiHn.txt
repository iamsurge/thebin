

import module
from module import function
class classname(parentclass):
  def functionname(arg):
    return expr

if expr:
  elif expr:
    else:
	  ...
for var in iterable:
  while expr:
    try:
      except Exception as var:
        with expr as var:
          raise Exception
          break
          continue
          pass
          del var
          assert expr
          yield expr
          lambda arguments: expr
          global var
          nonlocal var
          async
		  def functionname(arg):
            await expr
            range(start, stop, step)
            in
            not in
            and
            or
            not
            len(obj)
            type(obj)
            str(obj)
            repr(obj)
            int(x, base)
            float(x)
            complex(real, imag)
            divmod(x, y)
            pow(x, y, z)
            round(number, ndigits)
            max(iterable, *args, key)
            min(iterable, *args, key)
            sum(iterable, start)
            any(iterable)
            all(iterable)
            sorted(iterable, key, reverse)
            reversed(sequence)
            enumerate(iterable, start)
            zip(*iterables)
            map(function, iterable, *iterables)
            filter(function, iterable)
            abs(x)
            chr(i)
            ord(c)
            bin(x)
            oct(x)
            hex(x)
            bool(x)
            bytearray(source, encoding, errors)
            bytes(source, encoding, errors)
            complex(real, imag)
            dict(mapping, **kwargs)
            dir(obj)
            frozenset(iterable)
            list(iterable)
            set(iterable)
            tuple(iterable)
            type(obj, base_type, dict)
            vars(obj)
            repr(obj)
            format(value, format_spec)
            hash(obj)
            memoryview(obj)
            property(fget=None, fset=None, fdel=None, doc=None)
            staticmethod(function)
            classmethod(function)
            isinstance(obj, classinfo)
            compile(source, filename, mode, flags=0, dont_inherit=False, optimize=-1)
            exec(source, globals=None, locals=None)
            eval(expr, globals=None, locals=None)
            globals()
            locals()
            vars()
            dir()
            help(obj)
            ascii(obj)
            repr(obj)
            input(prompt)
            print(*objs, sep=' ', end='\n', file=sys.stdout, flush=False)
