#include "lab1.h"
#include "lab2.h"
#include "lab3.h"
#include "test.h"

using namespace std;


void dfs(lab2::Graph g, string name, vector<string>& res, long long int k, string way = "") {
    if (g.IsVisited(name) || k < 0)
        return;
    way += ' ' + name;
    if (k == 0) {
        res.push_back(way);
        return;
    }
    g.Edit_V(name, true);
    for (long long index = g.First(name); index != -1; index = g.Next(name, index)) {
        auto v = g.Vertex(name, index);
        dfs(g, v, res, k - g.GetWeight(name, v), way);
    }
    g.Edit_V(name, false);
}

vector<string> get_ways(lab2::Graph g, long long int k) {
    vector<string> res;
    for (auto& x : g.ItN) {
        string way = "";
        dfs(g, x, res, k, way);
    }
    return res;
}

int main(){
    int size;
    cin >> size;
    lab2::Graph G(size);
    set<int> visited;
    int cCount, n;
    cin >> cCount >> n;
    for(int i = 0; i < cCount; ++i){
        string first_v, second_v;
        int weight;
        cin >> first_v >> second_v >> weight;
        G.Add_E(first_v, second_v, weight);
    }
    G.print();
    cout << endl;
    vector<string> ways = get_ways(G, n);
    for(int i = 0; i < ways.size(); ++i)
        cout << ways[i] << endl;

    return 0;
}
/*
5 11
a b 3
b d 8
b c 4
c d 4
d a 7

d e 2
c e 6
 */
