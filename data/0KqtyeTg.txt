#include <bits/stdc++.h>
using namespace std;

typedef long long LL;
const int maxn = 100000 + 100;

struct SegmentTree {
    int ll[maxn << 2], rr[maxn << 2], mx[maxn << 2], lazy[maxn << 2];

    inline int lson(int rt) {
        return rt << 1;
    }

    inline int rson(int rt) {
        return rt << 1 | 1;
    }

    void pushUp(int rt, int n) {
        int l = lson(rt);
        int r = rson(rt);
        int rn = n >> 1;
        int ln = n - rn;
        if (ll[l] == ln) {
            ll[rt] = ll[l] + ll[r];
        }
        if (rr[r] == rn) {
            rr[rt] = rr[r] + rr[l];
        }
        mx[rt] = max(max(max(mx[l], mx[r]), max(ll[rt], rr[rt])), rr[l] + ll[r]);
    }

    void pushDown(int rt, int n) {
        if (lazy[rt] == -1) {
            return ;
        }
        int l = lson(rt);
        int r = rson(rt);
        int rn = n >> 1;
        int ln = n - rn;
        lazy[l] = lazy[rt];
        lazy[r] = lazy[rt];
        if (lazy[rt] == 0) {
            ll[l] = rr[l] = mx[l] = ln;
            ll[r] = rr[r] = mx[r] = rn;
        } else {
            ll[l] = rr[l] = mx[l] = 0;
            ll[r] = rr[r] = mx[r] = 0;
        }
        lazy[rt] = -1;
    }

    void build(int rt, int l, int r) {
        lazy[rt] = -1;
        if(l == r) {
            ll[rt] = rr[rt] = mx[rt] = 1;
            return ;
        }
        int m = (l + r) >> 1;
        build(lson(rt), l, m);
        build(rson(rt), m + 1, r);
        pushUp(rt);
    }

    void update(int rt, int l, int r, int L, int R, int x) {
        if(L <= l && r <= R) {
            lazy[rt] = x;
            ll, rr, mx;
            if (x == 0) {
                ll[rt] = rr[rt] = mx[rt] = r - l + 1;
            } else {
                ll[rt] = rr[rt] = mx[rt] = 0;
            }
            return ;
        }
        pushDown(rt, r - l + 1);
        int m = (l + r) >> 1;
        if(L <= m) {
            update(lson(rt), l, m, L, R, x);
        }
        if(m < R) {
            update(rson(rt), m + 1, r, L, R, x);
        }
        pushUp(rt);
    }

    int query(int rt, int l, int r, int L, int R, int len) {
        if (mx[rt] < len) {
            return -1;
        }
        if(L <= l && r <= R) {
            return 
        }
        pushDown(rt, r - l + 1);
        int m = (l + r) >> 1;
        int ret = 0;
        if(L <= m) {
            ret += query(lson(rt), l, m, L, R);
        }
        if(R > m) {
            ret += query(rson(rt), m + 1, r, L, R);
        }
        return ret;
    }
};

int T, n, m, cmd, a, b;
SegmentTree t;

int bs(int low, int high, int a, int f) {
    int mid;
    while (high - low > 1) {
        mid = (high + low) >> 1;
        if (mid - a + 1 - t.query(1, 1, n, a, mid) >= f) {
            high = mid;
        } else {
            low = mid;
        }
    }
    return high;
}

void solve1(int a, int f) {
    ++a;
    int l = bs(a - 1, n, a, 1);
    if (t.query(1, 1, n, l, l) == 1) {
        printf("Can not put any one.\n");
        return ;
    }
    int r = bs(l - 1, n, l, f);
    if (t.query(1, 1, n, r, r) == 1) {
        r = bs(l - 1, n, l, n - l + 1 - t.query(1, 1, n, l, n));
    }
    t.update(1, 1, n, l, r, 1);
    printf("%d %d\n", l - 1, r - 1);
}

void solve2(int l, int r) {
    ++l;
    ++r;
    printf("%d\n", t.query(1, 1, n, l, r));
    t.update(1, 1, n, l, r, 0);
}

int main() {
    #ifdef ExRoc
    freopen("test.txt", "r", stdin);
    #endif // ExRoc
    ios::sync_with_stdio(false);

    scanf("%d", &T);
    while (T--) {
        scanf("%d%d", &n, &m);
        t.build(1, 1, n);
        while (m--) {
            scanf("%d%d%d", &cmd, &a, &b);
            switch (cmd) {
            case 1:
                solve1(a, b);
                break;
            case 2:
                solve2(a, b);
                break;
            }
        }
        printf("\n");
    }

    return 0;
}
