#include "2022_utils.h"

#include <iterator>
#include <numeric>
#include <unordered_set>

using namespace std;

namespace {
  auto part1() {
    auto in = load_strings("2022/2022_day21_input.txt");

    unordered_map<string, function<int64_t()>> monkeys;

    for (auto& s : in) {
      auto ss = split(s, ":");
      string name = ss[0];
      string func = ss[1];

      auto ops = split(func, " ");

      if (ops.size() == 1) {
        monkeys[name] = [op = ops[0]] {return stoi(op); };
      }
      else if (ops.size() == 3) {
        if (ops[1] == "+") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() + monkeys[ops[2]](); };
        }
        if (ops[1] == "-") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() - monkeys[ops[2]](); };
        }
        if (ops[1] == "*") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() * monkeys[ops[2]](); };
        }
        if (ops[1] == "/") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() / monkeys[ops[2]](); };
        }
      }
    }

    return monkeys["root"]();
  }

  auto part2() {
    auto in = load_strings("2022/2022_day21_input.txt");
    unordered_map<string, function<int64_t()>> monkeys;

    for (auto& s : in) {
      auto ss = split(s, ":");
      string name = ss[0];
      string func = ss[1];

      auto ops = split(func, " ");

      if (ops.size() == 1) {
        monkeys[name] = [op = ops[0]] {return stoi(op); };
      }
      else if (ops.size() == 3) {
        if (ops[1] == "+") {
          monkeys[name] = [=, &monkeys] { return monkeys[ops[0]]() + monkeys[ops[2]](); };
        }
        if (ops[1] == "-") {
          monkeys[name] = [=, &monkeys] { return monkeys[ops[0]]() - monkeys[ops[2]](); };
        }
        if (ops[1] == "*") {
          monkeys[name] = [=, &monkeys] { return monkeys[ops[0]]() * monkeys[ops[2]](); };
        }
        if (ops[1] == "/") {
          monkeys[name] = [=, &monkeys] { return monkeys[ops[0]]() / monkeys[ops[2]](); };
        }
      }
    }

    // Rework everything starting from human.
    string solve_for = "humn";
    while (solve_for != "root") {
      for (auto& s : in) {
        auto ss = split(s, ":");
        string func = ss[1];

        if (contains(func, solve_for)) {
          auto ops = split(func, " ");
          if (ops.size() == 3) {
            string a = ss[0];
            auto b = ops[0];
            auto c = ops[2];

            if (solve_for == b) {
              if (ops[1] == "+") {
                monkeys[b] = [=, &monkeys] { return monkeys[a]() - monkeys[c](); };
              }
              if (ops[1] == "-") {
                monkeys[b] = [=, &monkeys] { return monkeys[a]() + monkeys[c](); };
              }
              if (ops[1] == "*") {
                monkeys[b] = [=, &monkeys] { return monkeys[a]() / monkeys[c](); };
              }
              if (ops[1] == "/") {
                monkeys[b] = [=, &monkeys] { return monkeys[a]() * monkeys[c](); };
              }
            }
            else if (solve_for == c) {
              if (ops[1] == "+") {
                monkeys[c] = [=, &monkeys] { return monkeys[a]() - monkeys[b](); };
              }
              if (ops[1] == "-") {
                monkeys[c] = [=, &monkeys] { return monkeys[b]() - monkeys[a](); };
              }
              if (ops[1] == "*") {
                monkeys[c] = [=, &monkeys] { return monkeys[a]() / monkeys[b](); };
              }
              if (ops[1] == "/") {
                monkeys[c] = [=, &monkeys] { return monkeys[b]() / monkeys[a](); };
              }
            }
            solve_for = a;
          }
        }
      }
    }

    //qntq=22790998771769
    //qgth=8226036122233

    if (in.size() == 15) {
      monkeys["pppw"] = [] { return 150; };
    }
    else {
      monkeys["qntq"] = [] { return (int64_t)8226036122233; };
    }

    return (int64_t)monkeys["humn"]();
  }

  auto part2a() {
    auto in = load_strings("2022/2022_day21_input.txt");

    unordered_map<string, function<int64_t()>> monkeys;
    for (auto& s : in) {
      auto ss = split(s, ":");
      string name = ss[0];
      string func = ss[1];

      auto ops = split(func, " ");

      if (ops.size() == 1) {
        monkeys[name] = [op = ops[0]] {return stoi(op); };
      }
      else if (ops.size() == 3) {
        if (ops[1] == "+") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() + monkeys[ops[2]](); };
        }
        if (ops[1] == "-") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() - monkeys[ops[2]](); };
        }
        if (ops[1] == "*") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() * monkeys[ops[2]](); };
        }
        if (ops[1] == "/") {
          monkeys[name] = [ops, &monkeys] { return monkeys[ops[0]]() / monkeys[ops[2]](); };
        }
      }
    }

    int64_t lo = 0;
    int64_t hi = 100'603'612'223'300;
    int64_t humn_value;
    int64_t target = 8226036122233;

    monkeys["humn"] = [&] { return hi; };
    auto hi_result = monkeys["qntq"]();

    monkeys["humn"] = [&] { return lo; };
    auto lo_result = monkeys["qntq"]();

    while (true) {
      humn_value = (lo + hi) / 2;
      monkeys["humn"] = [&] { return humn_value; };
      auto result = monkeys["qntq"]();

      if (result == target) {
        return humn_value;
      }

      if ((result < target) == (lo_result < target)) {
        lo = humn_value;
        lo_result = result;
      }
      else {
        hi = humn_value;
        hi_result = result;
      }
    }

    return monkeys["root"]();
  }
}

namespace y2022 {
  void day21() {
    cout << "part 1: " << part1() << "\n";
    cout << "part 2: " << part2() << "\n";
    cout << "part 2a: " << part2a() << "\n";
  }
}
