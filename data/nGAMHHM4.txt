海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"gmtModified\":0,\"id\":0,\"last_chapter_rule\":\"\\n\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"detail\",\"path\":\"detail\",\"rule\":\"js:\\nvar url_ss = getVar('list_url_wallhaven', getVar('url_ss', MY_URL));\\r\\nlog('url_ss:' + url_ss);\\r\\nif (/search_id|tag|search/.test(url_ss)) {\\r\\n    var d = [];\\r\\n    var urltmp = getVar('list_url_wallhaven', getVar('url_ss', MY_URL));\\r\\n    if (/source/.test(urltmp)) {\\r\\n        var true_url = urltmp.split('source=')[1];\\r\\n    } else {\\r\\n        var true_url = urltmp;\\r\\n    }\\r\\n    if (/tag/.test(true_url)) true_url = true_url.replace(/tag\\\\/(\\\\d+)/, 'search?q=id%3A' + '$1') +\\r\\n        '&categories=111&purity=110&sorting=relevance&order=desc&page=' + MY_PAGE;\\r\\n    else true_url = true_url.replace(/page.+/, 'page=' + MY_PAGE);\\r\\n\\r\\n    log('true_url:' + true_url);\\r\\n    if (MY_PAGE == 1) {\\r\\n        var html = fetch(true_url.replace(/page.+/, ''));\\r\\n    } else {\\r\\n        var html = fetch(true_url);\\r\\n    }\\r\\n    if (MY_PAGE == 1) {\\r\\n        d.push({\\r\\n            title: '““””<b><font color=#3f72af>Related Tags:</font></b>',\\r\\n            col_type: 'flex_button',\\r\\n        });\\r\\n        var list = pdfa(html, \\\"body&&a.tagname\\\");\\r\\n        for (var k in list) {\\r\\n            var url = pdfh(list[k], 'a&&href')\\r\\n                .replace(/tag\\\\/(\\\\d+)/, 'search?q=id%3A' + '$1') +\\r\\n                '&categories=111&purity=110&sorting=relevance&order=desc&page=1';\\r\\n            d.push({\\r\\n                title: k == getVar('list_index', '0') ?\\r\\n                    '‘‘’’<strong><font color= \\\"#993399\\\">' +\\r\\n                    pdfh(list[k], 'a&&Text') + '</font></strong>' : pdfh(list[k], 'a&&Text'),\\r\\n                url: (url + '##' + k) + `@lazyRule=.js:\\r\\n                        putVar('list_url_wallhaven', input.split('##')[0]);\\r\\n                        putVar('list_index',0);\\r\\n                        refreshPage(false);\\r\\n                        'hiker://empty'`,\\r\\n                col_type: 'flex_button',\\r\\n            });\\r\\n        }\\r\\n        d.push({\\r\\n            title: '““””<b><font color=#3f72af></font></b>',\\r\\n            url: getVar('url', MY_URL),\\r\\n            col_type: 'flex_button',\\r\\n        });\\r\\n    }\\r\\n    var html = fetch(true_url);\\r\\n    var list = pdfa(html, 'section.thumb-listing-page&&li');\\r\\n    for (var list of list) {\\r\\n        var lazy = '@lazyRule=.js:putVar(\\\"url_ss\\\",\\\"hiker://page/detail?source=' + pd(list, \\\"a&&href\\\") +\\r\\n            '\\\");clearVar(\\\"list_url_wallhaven\\\");clearVar(\\\"list_index\\\");refreshPage();\\\"hiker://empty\\\"';\\r\\n        d.push({\\r\\n            desc: pdfh(list, 'span.wall-res&&Text'),\\r\\n            img: pd(list, 'figure&&img&&data-src') + '@Referer=',\\r\\n            url: \\\"hiker://empty\\\" + lazy,\\r\\n        });\\r\\n    }\\r\\n    setResult(d);\\r\\n} else {\\r\\n    var d = [];\\r\\n    var true_url = url_ss.split('source=')[1];\\r\\n    log('true_url:' + true_url);\\r\\n    var html = fetch(true_url);\\r\\n    var list_dt = pdfa(html, 'body&&dt')\\r\\n        .map(h => pdfh(h, 'body&&Text')).slice(0, -1);\\r\\n    var list_dd = pdfa(html, 'body&&dd')\\r\\n        .map(h => pdfh(h, 'body&&Text')).slice(0, -1);\\r\\n    var dl = '';\\r\\n    for (var k in list_dt) {\\r\\n        dl = dl + list_dt[k] + ': ' + list_dd[k] + '\\\\n';\\r\\n    }\\r\\n    dl = dl + 'Link:' + true_url;\\r\\n    d.push({\\r\\n        title: '““””<b><big><font color=#3f72af>' +\\r\\n            pdfh(html, '.showcase-resolution&&Text') + '</font></big></b>',\\r\\n        pic: '#f9f7f7',\\r\\n        col_type: 'card_pic_2',\\r\\n        desc: '0',\\r\\n    });\\r\\n    d.push({\\r\\n        title: '““””<font color=#3f72af>' + dl + '</font>',\\r\\n        pic: '#f9f7f7',\\r\\n        col_type: 'card_pic_2',\\r\\n        desc: '0',\\r\\n    });\\r\\n    d.push({\\r\\n        title: '““””<b><font color=#3f72af>Tags:</font></b>',\\r\\n        col_type: \\\"flex_button\\\",\\r\\n    });\\r\\n    var list = pdfa(html, \\\"body&&.sidebar-section&&a\\\").slice(1, );\\r\\n    list = list.concat(pdfa(html, \\\"body&&.color-palette&&a\\\"));\\r\\n    for (var list of list) {\\r\\n        var title = pdfh(list, \\\"a&&Text\\\");\\r\\n        if (title == '') {\\r\\n            var col = pdfh(list, \\\"a&&href\\\").split('=')[1];\\r\\n            title = '““””<b><font color=#' + col + '>#' + col + '</font></b>';\\r\\n        } else {\\r\\n            title = '““””<b><font color=#993399>' + title + '</font></b>';\\r\\n        }\\r\\n        var lazy = '@lazyRule=.js:putVar(\\\"url_ss\\\",\\\"hiker://page/search_id?source=' + pd(list, \\\"a&&href\\\") + '\\\");clearVar(\\\"list_url_wallhaven\\\");clearVar(\\\"list_index\\\");refreshPage();\\\"hiker://empty\\\"';\\r\\n        d.push({\\r\\n            title: title,\\r\\n            url: \\\"hiker://empty\\\" + lazy,\\r\\n            col_type: \\\"flex_button\\\",\\r\\n        });\\r\\n    }\\r\\n    d.push({\\r\\n        title: '',\\r\\n        img: pdfh(html, '#wallpaper&&data-cfsrc') || pdfh(html, '#wallpaper&&src'),\\r\\n        url: pdfh(html, '#wallpaper&&data-cfsrc') || pdfh(html, '#wallpaper&&src'),\\r\\n        col_type: 'pic_1_full',\\r\\n    });\\r\\n    d.push({\\r\\n        col_type: 'big_blank_block'\\r\\n    });\\r\\n    clearVar(\\\"url_ss\\\");\\r\\n    setResult(d);\\r\\n}\\r\\nclearVar(\\\"url_ss\\\");\"}],\"saved\":false,\"title\":\"wallhaven.dy\",\"version\":0,\"url\":\"hiker://page/detail?source=https://wallhaven.cc/w/l83grq\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar url_ss = getVar('list_url_wallhaven', getVar('url_ss', MY_URL));\\r\\nlog('url_ss:' + url_ss);\\r\\nif (/search_id|tag|search/.test(url_ss)) {\\r\\n    var d = [];\\r\\n    var urltmp = getVar('list_url_wallhaven', getVar('url_ss', MY_URL));\\r\\n    if (/source/.test(urltmp)) {\\r\\n        var true_url = urltmp.split('source=')[1];\\r\\n    } else {\\r\\n        var true_url = urltmp;\\r\\n    }\\r\\n    if (/tag/.test(true_url)) true_url = true_url.replace(/tag\\\\/(\\\\d+)/, 'search?q=id%3A' + '$1') +\\r\\n        '&categories=111&purity=110&sorting=relevance&order=desc&page=' + MY_PAGE;\\r\\n    else true_url = true_url.replace(/page.+/, 'page=' + MY_PAGE);\\r\\n\\r\\n    log('true_url:' + true_url);\\r\\n    if (MY_PAGE == 1) {\\r\\n        var html = fetch(true_url.replace(/page.+/, ''));\\r\\n    } else {\\r\\n        var html = fetch(true_url);\\r\\n    }\\r\\n    if (MY_PAGE == 1) {\\r\\n        d.push({\\r\\n            title: '““””<b><font color=#3f72af>Related Tags:</font></b>',\\r\\n            col_type: 'flex_button',\\r\\n        });\\r\\n        var list = pdfa(html, \\\"body&&a.tagname\\\");\\r\\n        for (var k in list) {\\r\\n            var url = pdfh(list[k], 'a&&href')\\r\\n                .replace(/tag\\\\/(\\\\d+)/, 'search?q=id%3A' + '$1') +\\r\\n                '&categories=111&purity=110&sorting=relevance&order=desc&page=1';\\r\\n            d.push({\\r\\n                title: k == getVar('list_index', '0') ?\\r\\n                    '‘‘’’<strong><font color= \\\"#993399\\\">' +\\r\\n                    pdfh(list[k], 'a&&Text') + '</font></strong>' : pdfh(list[k], 'a&&Text'),\\r\\n                url: (url + '##' + k) + `@lazyRule=.js:\\r\\n                        putVar('list_url_wallhaven', input.split('##')[0]);\\r\\n                        putVar('list_index',0);\\r\\n                        refreshPage(false);\\r\\n                        'hiker://empty'`,\\r\\n                col_type: 'flex_button',\\r\\n            });\\r\\n        }\\r\\n        d.push({\\r\\n            title: '““””<b><font color=#3f72af></font></b>',\\r\\n            url: getVar('url', MY_URL),\\r\\n            col_type: 'flex_button',\\r\\n        });\\r\\n    }\\r\\n    var html = fetch(true_url);\\r\\n    var list = pdfa(html, 'section.thumb-listing-page&&li');\\r\\n    for (var list of list) {\\r\\n        var lazy = '@lazyRule=.js:putVar(\\\"url_ss\\\",\\\"hiker://page/detail?source=' + pd(list, \\\"a&&href\\\") +\\r\\n            '\\\");clearVar(\\\"list_url_wallhaven\\\");clearVar(\\\"list_index\\\");refreshPage();\\\"hiker://empty\\\"';\\r\\n        d.push({\\r\\n            desc: pdfh(list, 'span.wall-res&&Text'),\\r\\n            img: pd(list, 'figure&&img&&data-src') + '@Referer=',\\r\\n            url: \\\"hiker://empty\\\" + lazy,\\r\\n        });\\r\\n    }\\r\\n    setResult(d);\\r\\n} else {\\r\\n    var d = [];\\r\\n    var true_url = url_ss.split('source=')[1];\\r\\n    log('true_url:' + true_url);\\r\\n    var html = fetch(true_url);\\r\\n    var list_dt = pdfa(html, 'body&&dt')\\r\\n        .map(h => pdfh(h, 'body&&Text')).slice(0, -1);\\r\\n    var list_dd = pdfa(html, 'body&&dd')\\r\\n        .map(h => pdfh(h, 'body&&Text')).slice(0, -1);\\r\\n    var dl = '';\\r\\n    for (var k in list_dt) {\\r\\n        dl = dl + list_dt[k] + ': ' + list_dd[k] + '\\\\n';\\r\\n    }\\r\\n    dl = dl + 'Link:' + true_url;\\r\\n    d.push({\\r\\n        title: '““””<b><big><font color=#3f72af>' +\\r\\n            pdfh(html, '.showcase-resolution&&Text') + '</font></big></b>',\\r\\n        pic: '#f9f7f7',\\r\\n        col_type: 'card_pic_2',\\r\\n        desc: '0',\\r\\n    });\\r\\n    d.push({\\r\\n        title: '““””<font color=#3f72af>' + dl + '</font>',\\r\\n        pic: '#f9f7f7',\\r\\n        col_type: 'card_pic_2',\\r\\n        desc: '0',\\r\\n    });\\r\\n    d.push({\\r\\n        title: '““””<b><font color=#3f72af>Tags:</font></b>',\\r\\n        col_type: \\\"flex_button\\\",\\r\\n    });\\r\\n    var list = pdfa(html, \\\"body&&.sidebar-section&&a\\\").slice(1, );\\r\\n    list = list.concat(pdfa(html, \\\"body&&.color-palette&&a\\\"));\\r\\n    for (var list of list) {\\r\\n        var title = pdfh(list, \\\"a&&Text\\\");\\r\\n        if (title == '') {\\r\\n            var col = pdfh(list, \\\"a&&href\\\").split('=')[1];\\r\\n            title = '““””<b><font color=#' + col + '>#' + col + '</font></b>';\\r\\n        } else {\\r\\n            title = '““””<b><font color=#993399>' + title + '</font></b>';\\r\\n        }\\r\\n        var lazy = '@lazyRule=.js:putVar(\\\"url_ss\\\",\\\"hiker://page/search_id?source=' + pd(list, \\\"a&&href\\\") + '\\\");clearVar(\\\"list_url_wallhaven\\\");clearVar(\\\"list_index\\\");refreshPage();\\\"hiker://empty\\\"';\\r\\n        d.push({\\r\\n            title: title,\\r\\n            url: \\\"hiker://empty\\\" + lazy,\\r\\n            col_type: \\\"flex_button\\\",\\r\\n        });\\r\\n    }\\r\\n    d.push({\\r\\n        title: '',\\r\\n        img: pdfh(html, '#wallpaper&&data-cfsrc') || pdfh(html, '#wallpaper&&src'),\\r\\n        url: pdfh(html, '#wallpaper&&data-cfsrc') || pdfh(html, '#wallpaper&&src'),\\r\\n        col_type: 'pic_1_full',\\r\\n    });\\r\\n    d.push({\\r\\n        col_type: 'big_blank_block'\\r\\n    });\\r\\n    clearVar(\\\"url_ss\\\");\\r\\n    setResult(d);\\r\\n}\\r\\nclearVar(\\\"url_ss\\\");\",\"group\":\"⑧图片\",\"ua\":\"pc\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"detail\\\",\\\"path\\\":\\\"detail\\\",\\\"rule\\\":\\\"js:\\\\nvar url_ss = getVar('list_url_wallhaven', getVar('url_ss', MY_URL));\\\\r\\\\nlog('url_ss:' + url_ss);\\\\r\\\\nif (/search_id|tag|search/.test(url_ss)) {\\\\r\\\\n    var d = [];\\\\r\\\\n    var urltmp = getVar('list_url_wallhaven', getVar('url_ss', MY_URL));\\\\r\\\\n    if (/source/.test(urltmp)) {\\\\r\\\\n        var true_url = urltmp.split('source=')[1];\\\\r\\\\n    } else {\\\\r\\\\n        var true_url = urltmp;\\\\r\\\\n    }\\\\r\\\\n    if (/tag/.test(true_url)) true_url = true_url.replace(/tag\\\\\\\\/(\\\\\\\\d+)/, 'search?q=id%3A' + '$1') +\\\\r\\\\n        '&categories=111&purity=110&sorting=relevance&order=desc&page=' + MY_PAGE;\\\\r\\\\n    else true_url = true_url.replace(/page.+/, 'page=' + MY_PAGE);\\\\r\\\\n\\\\r\\\\n    log('true_url:' + true_url);\\\\r\\\\n    if (MY_PAGE == 1) {\\\\r\\\\n        var html = fetch(true_url.replace(/page.+/, ''));\\\\r\\\\n    } else {\\\\r\\\\n        var html = fetch(true_url);\\\\r\\\\n    }\\\\r\\\\n    if (MY_PAGE == 1) {\\\\r\\\\n        d.push({\\\\r\\\\n            title: '““””<b><font color=#3f72af>Related Tags:</font></b>',\\\\r\\\\n            col_type: 'flex_button',\\\\r\\\\n        });\\\\r\\\\n        var list = pdfa(html, \\\\\\\"body&&a.tagname\\\\\\\");\\\\r\\\\n        for (var k in list) {\\\\r\\\\n            var url = pdfh(list[k], 'a&&href')\\\\r\\\\n                .replace(/tag\\\\\\\\/(\\\\\\\\d+)/, 'search?q=id%3A' + '$1') +\\\\r\\\\n                '&categories=111&purity=110&sorting=relevance&order=desc&page=1';\\\\r\\\\n            d.push({\\\\r\\\\n                title: k == getVar('list_index', '0') ?\\\\r\\\\n                    '‘‘’’<strong><font color= \\\\\\\"#993399\\\\\\\">' +\\\\r\\\\n                    pdfh(list[k], 'a&&Text') + '</font></strong>' : pdfh(list[k], 'a&&Text'),\\\\r\\\\n                url: (url + '##' + k) + `@lazyRule=.js:\\\\r\\\\n                        putVar('list_url_wallhaven', input.split('##')[0]);\\\\r\\\\n                        putVar('list_index',0);\\\\r\\\\n                        refreshPage(false);\\\\r\\\\n                        'hiker://empty'`,\\\\r\\\\n                col_type: 'flex_button',\\\\r\\\\n            });\\\\r\\\\n        }\\\\r\\\\n        d.push({\\\\r\\\\n            title: '““””<b><font color=#3f72af></font></b>',\\\\r\\\\n            url: getVar('url', MY_URL),\\\\r\\\\n            col_type: 'flex_button',\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n    var html = fetch(true_url);\\\\r\\\\n    var list = pdfa(html, 'section.thumb-listing-page&&li');\\\\r\\\\n    for (var list of list) {\\\\r\\\\n        var lazy = '@lazyRule=.js:putVar(\\\\\\\"url_ss\\\\\\\",\\\\\\\"hiker://page/detail?source=' + pd(list, \\\\\\\"a&&href\\\\\\\") +\\\\r\\\\n            '\\\\\\\");clearVar(\\\\\\\"list_url_wallhaven\\\\\\\");clearVar(\\\\\\\"list_index\\\\\\\");refreshPage();\\\\\\\"hiker://empty\\\\\\\"';\\\\r\\\\n        d.push({\\\\r\\\\n            desc: pdfh(list, 'span.wall-res&&Text'),\\\\r\\\\n            img: pd(list, 'figure&&img&&data-src') + '@Referer=',\\\\r\\\\n            url: \\\\\\\"hiker://empty\\\\\\\" + lazy,\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n    setResult(d);\\\\r\\\\n} else {\\\\r\\\\n    var d = [];\\\\r\\\\n    var true_url = url_ss.split('source=')[1];\\\\r\\\\n    log('true_url:' + true_url);\\\\r\\\\n    var html = fetch(true_url);\\\\r\\\\n    var list_dt = pdfa(html, 'body&&dt')\\\\r\\\\n        .map(h => pdfh(h, 'body&&Text')).slice(0, -1);\\\\r\\\\n    var list_dd = pdfa(html, 'body&&dd')\\\\r\\\\n        .map(h => pdfh(h, 'body&&Text')).slice(0, -1);\\\\r\\\\n    var dl = '';\\\\r\\\\n    for (var k in list_dt) {\\\\r\\\\n        dl = dl + list_dt[k] + ': ' + list_dd[k] + '\\\\\\\\n';\\\\r\\\\n    }\\\\r\\\\n    dl = dl + 'Link:' + true_url;\\\\r\\\\n    d.push({\\\\r\\\\n        title: '““””<b><big><font color=#3f72af>' +\\\\r\\\\n            pdfh(html, '.showcase-resolution&&Text') + '</font></big></b>',\\\\r\\\\n        pic: '#f9f7f7',\\\\r\\\\n        col_type: 'card_pic_2',\\\\r\\\\n        desc: '0',\\\\r\\\\n    });\\\\r\\\\n    d.push({\\\\r\\\\n        title: '““””<font color=#3f72af>' + dl + '</font>',\\\\r\\\\n        pic: '#f9f7f7',\\\\r\\\\n        col_type: 'card_pic_2',\\\\r\\\\n        desc: '0',\\\\r\\\\n    });\\\\r\\\\n    d.push({\\\\r\\\\n        title: '““””<b><font color=#3f72af>Tags:</font></b>',\\\\r\\\\n        col_type: \\\\\\\"flex_button\\\\\\\",\\\\r\\\\n    });\\\\r\\\\n    var list = pdfa(html, \\\\\\\"body&&.sidebar-section&&a\\\\\\\").slice(1, );\\\\r\\\\n    list = list.concat(pdfa(html, \\\\\\\"body&&.color-palette&&a\\\\\\\"));\\\\r\\\\n    for (var list of list) {\\\\r\\\\n        var title = pdfh(list, \\\\\\\"a&&Text\\\\\\\");\\\\r\\\\n        if (title == '') {\\\\r\\\\n            var col = pdfh(list, \\\\\\\"a&&href\\\\\\\").split('=')[1];\\\\r\\\\n            title = '““””<b><font color=#' + col + '>#' + col + '</font></b>';\\\\r\\\\n        } else {\\\\r\\\\n            title = '““””<b><font color=#993399>' + title + '</font></b>';\\\\r\\\\n        }\\\\r\\\\n        var lazy = '@lazyRule=.js:putVar(\\\\\\\"url_ss\\\\\\\",\\\\\\\"hiker://page/search_id?source=' + pd(list, \\\\\\\"a&&href\\\\\\\") + '\\\\\\\");clearVar(\\\\\\\"list_url_wallhaven\\\\\\\");clearVar(\\\\\\\"list_index\\\\\\\");refreshPage();\\\\\\\"hiker://empty\\\\\\\"';\\\\r\\\\n        d.push({\\\\r\\\\n            title: title,\\\\r\\\\n            url: \\\\\\\"hiker://empty\\\\\\\" + lazy,\\\\r\\\\n            col_type: \\\\\\\"flex_button\\\\\\\",\\\\r\\\\n        });\\\\r\\\\n    }\\\\r\\\\n    d.push({\\\\r\\\\n        title: '',\\\\r\\\\n        img: pdfh(html, '#wallpaper&&data-cfsrc') || pdfh(html, '#wallpaper&&src'),\\\\r\\\\n        url: pdfh(html, '#wallpaper&&data-cfsrc') || pdfh(html, '#wallpaper&&src'),\\\\r\\\\n        col_type: 'pic_1_full',\\\\r\\\\n    });\\\\r\\\\n    d.push({\\\\r\\\\n        col_type: 'big_blank_block'\\\\r\\\\n    });\\\\r\\\\n    clearVar(\\\\\\\"url_ss\\\\\\\");\\\\r\\\\n    setResult(d);\\\\r\\\\n}\\\\r\\\\nclearVar(\\\\\\\"url_ss\\\\\\\");\\\"}]\",\"proxy\":\"\"}","picUrl":"https://th.wallhaven.cc/small/l8/l83grq.jpg@Referer=","title":""}