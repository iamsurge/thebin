#include <cmath>
#include <string>
#include <utility>
#include <iostream>
#include <algorithm>

struct Element {
    int key;
    int left;
    int right;
    char color;
};

struct Node {
    char color;
    int key;
    struct Node *left;
    struct Node *right;
    struct Node *parent;
};

class BST {
private:
    Node *root_;

    void clear(Node *n) {
        if (n == nullptr) {
            return;
        }
        clear(n->left);
        clear(n->right);
        delete n;
    }

    std::pair<bool, int> chk(Node *n) {
        if (n == nullptr) {
            return {true, 1};
        }
        if ((n->left && (n->left->key >= n->key)) || (n->right && (n->right->key <= n->key))) {
            return {false, -1};
        }
        int cnt;
        if (n->color == 'R') {
            cnt = 0;
            if ((n->left && n->left->color == 'R') || (n->right && n->right->color)) {
                return {false, -1};
            }
        } else {
            cnt = 1;
        }
        std::pair<bool, int> pr = chk(n->right);
        std::pair<bool, int> pl = chk(n->left);
        return {pr.first && pl.first && (pr.second == pl.second), pr.second + cnt};
    }

public:
    BST() {
        root_ = nullptr;
    }

    BST(Node *root) {
        root_ = root;
    }

    bool isBalanced() {
        if (root_->color == 'R') {
            return false;
        }
        return chk(root_).first;
    }

    ~BST() {
        clear(root_);
    }
};

int main() {
    int n = 0, root_num = 0;
    std::cin >> n >> root_num;
    auto elems = new Element[n + 1];
    auto nodes = new Node *[n + 1];
    for (int i = 1; i < n + 1; ++i) {
        nodes[i] = new Node;
    }
    int _;
    std::string left, right;
    for (int i = 1; i <= n; ++i) {
        std::cin >> _ >> elems[i].key >> left >> right >> elems[i].color;
        elems[i].left = (left == "null") ? -1 : std::stoi(left);
        elems[i].right = (right == "null") ? -1 : std::stoi(right);
    }
    for (int i = 1; i <= n; ++i) {
        nodes[i]->key = elems[i].key;
        nodes[i]->color = elems[i].color;
        if (elems[i].left != -1) {
            nodes[i]->left = nodes[elems[i].left];
            nodes[elems[i].left]->parent = nodes[i];
        } else {
            nodes[i]->left = nullptr;
        }
        if (elems[i].right != -1) {
            nodes[i]->right = nodes[elems[i].right];
            nodes[elems[i].right]->parent = nodes[i];
        } else {
            nodes[i]->right = nullptr;
        }
    }
    BST tree(nodes[root_num]);
    if (tree.isBalanced()) {
        std::cout << "YES\n";
    } else {
        std::cout << "NO\n";
    }
    delete[] nodes;
    delete[] elems;
    return 0;
}