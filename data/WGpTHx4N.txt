/// Find the surface area of a group of cubes
/// 1) as given
/// 2) excluding interior voids

import 'package:collection/collection.dart';
import 'package:more/more.dart';

var d6 = [
  Point(1, 0, 0),
  Point(-1, 0, 0),
  Point(0, 1, 0),
  Point(0, -1, 0),
  Point(0, 0, 1),
  Point(0, 0, -1)
];

class Point {
  int x, y, z;
  Point(this.x, this.y, this.z);
  Point operator +(Point other) => Point(x + other.x, y + other.y, z + other.z);

  Point minWith(Point other) =>
      Point([x, other.x].min, [y, other.y].min, [z, other.z].min);
  Point maxWith(Point other) =>
      Point([x, other.x].max, [y, other.y].max, [z, other.z].max);

  @override
  int get hashCode => Object.hash(x, y, z);

  @override
  bool operator ==(Object other) =>
      other is Point && other.x == x && other.y == y && other.z == z;

  @override
  String toString() => '($x, $y, $z)';
}

int surfaceArea(List<Point> cubes) => cubes
    .map((e) => 6 - d6.where((d) => cubes.any((c) => c == e + d)).length)
    .sum;
Point minP(cubes) => cubes.fold(cubes.first, (s, t) => s.minWith(t));
Point maxP(cubes) => cubes.fold(cubes.first, (s, t) => s.maxWith(t));

buildCubes(List<String> lines) => lines
    .map((e) => e.split(',').map(int.parse).toList())
    .map((e) => Point(e[0], e[1], e[2]))
    .toList();

part1(List<String> lines) => surfaceArea(buildCubes(lines));

part2(List<String> lines) {
  var cubes = buildCubes(lines);
  var minPs = minP(cubes) + Point(-1, -1, -1);
  var maxPs = maxP(cubes) + Point(2, 2, 2);

  var spaces = [
    for (var x in (minPs.x).to(maxPs.x))
      for (var y in (minPs.y).to(maxPs.y))
        for (var z in (minPs.z).to(maxPs.z)) Point(x, y, z)
  ].where((e) => !cubes.contains(e)).toSet();

  var q = {spaces.first};
  var seen = {spaces.first};
  while (q.isNotEmpty) {
    var here = q.first;
    q.remove(here);
    seen.add(here);
    for (var n in d6.map((d) => here + d)) {
      if (seen.contains(n)) continue;
      if (!spaces.contains(n)) continue;
      q.add(n);
    }
  }
  // any spaces that are not seen are voids. Fill them.
  for (var p in spaces) {
    if (seen.contains(p)) continue;
    cubes.add(p);
  }
  return surfaceArea(cubes);
}
