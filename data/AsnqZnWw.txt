Креирање на граф Problem 1 (0 / 0)
Ваша задача е да креирате неориентиран нетежински граф со матрица на соседство, каде темињата како информација содржат буква. Графот го креирате според наредбите кои се добиваат. Ќе ви биде дадена низа од команди што можат да бидат од следните типови:
 
CREATE [број] - треба да креирате нов граф со дадениот број на темиња. Вредностите во темињата ќе бидат буквите од англиската азбука, според нивниот редослед. Така ако имате 3 темиња буквите ќе бидат: A, B и C. ADDEDGE [број1] [број2] - треба да креирате ребро меѓу темињата со реден број број1 и реден број број2. DELETEEDGE [број1] [број2] - треба да го избришете реброто меѓу темињата со реден број број1 и реден број број2. ADЈACENT [број1] [број2] - треба да испечатите 1 доколку темињата со реден број број1 и реден број број2 се соседни, во спротивност 0. PRINTMATRIX - Треба да ја испечатите матрицата на соседство PRINTNODE [број] - Треба да ја испечатите информацијата (т.е. буквата) за дадениот реден број на теме
 
Во првата линија на влезот е даден бројот на команди кои ќе следуваат.
 
Име на класа: GraphCreate
 
 
 
import java.util.Scanner;
 
public class GraphCreate {
 
 
    public static void main(String[] args) {
 
        Scanner scan = new Scanner(System.in);
 
        int n = scan.nextInt();
        scan.next();
        int nodes = scan.nextInt();
        Graph graph = new Graph(nodes);
 
        for (int i=0; i<n; ++i) {
            String line = scan.nextLine();
            String parts[] = line.split(" ");
 
            switch(parts[0]) {
 
            case "ADDEDGE": graph.addEdge(Integer.parseInt(parts[1]), Integer.parseInt(parts[2]));
                break;
            case "DELETEEDGE": graph.deleteEdge(Integer.parseInt(parts[1]), Integer.parseInt(parts[2]));
                break;
            case "ADJACENT": System.out.println(graph.adjacent(Integer.parseInt(parts[1]), Integer.parseInt(parts[2])));
                break;
            case "PRINTMATRIX": graph.printMatrix();
                break;
            case "PRINTNODE": System.out.println(graph.get_node_value(Integer.parseInt(parts[1])));
            }
        }
    }
}
 
class Graph {
 
    int num_nodes; // broj na jazli
    Character nodes[];    // informacija vo jazlite - moze i ne mora?
    int adjMat[][];  // matrica na sosednost
 
 
    @SuppressWarnings("unchecked")
    public Graph(int num_nodes) {
        this.num_nodes = num_nodes;
        nodes = new Character[num_nodes];
        for (int i=0; i< num_nodes; ++i)
            nodes[i] = (char)(i + 'A');
        adjMat = new int[num_nodes][num_nodes];
 
        for(int i=0;i<this.num_nodes;i++)
            for(int j=0;j<this.num_nodes;j++)
                adjMat[i][j]=0;
    }
 
 
    int adjacent(int x,int y)
    {  // proveruva dali ima vrska od jazelot so indeks x do jazelot so indeks y
       return (adjMat[x][y]!=0)?1:0;
    }
 
    void addEdge(int x,int y)
    {  // dodava vrska megu jazlite so indeksi x i y
       adjMat[x][y]=1;
       adjMat[y][x]=1;
    }
 
 
    void deleteEdge(int x,int y)
    {
       // ja brise vrskata megu jazlite so indeksi x i y
       adjMat[x][y]=0;
       adjMat[y][x]=0;
    }
 
    // Moze i ne mora?
    Character get_node_value(int x)
    {  // ja vraka informacijata vo jazelot so indeks x
          return nodes[x];
    }
 
    // Moze i ne mora?
    void set_node_value(int x, Character a)
    {  // ja postavuva informacijata vo jazelot so indeks na a
       nodes[x]=a;
    }
 
 
    public int getNum_nodes() {
        return num_nodes;
    }
 
    public void setNum_nodes(int num_nodes) {
        this.num_nodes = num_nodes;
    }
 
 
    void printMatrix() {
        for (int i=0; i < adjMat.length; ++i) {
            for (int j=0; j < adjMat[0].length; ++j)
                System.out.print(adjMat[i][j] + " ");
            System.out.println();
        }
    }
}
 
 
Sample input
5
CREATE 4
ADDEDGE 0 3
PRINTMATRIX
PRINTNODE 2
ADJACENT 0 2
DELETEEDGE 3 0
Sample output
0 0 0 1
0 0 0 0
0 0 0 0
1 0 0 0
C
0