package whileStatement;

import java.util.Scanner;

enum RPS {
	
	// 0
	QUIT('q', 
		"You quit.", 
		"You quit."
		),

	// 1
	ROCK('r', 
		"Your rock demolished the scissor, shattering it into multiple pieces.", 
		"Your rock was covered by the paper and it died due to lack of sunlight."
		),

	// 2
	SCISSORS('s', 
		"Your scissors brutally murdered the paper by cutting it in half and eating its remains", 
		"Your scissors died from being rocked to death."
		),

	// 3
	PAPER('p', 
		"Your paper suffocated the rock to death",
		"Your paper suffered the consequences of being cut in half and died"
		);

	private final char initial;
	private final String winnerMessage, loserMessage;

	RPS(char initial, String winnerMessage, String loserMessage) {
		this.initial = initial;
		this.winnerMessage = winnerMessage;
		this.loserMessage = loserMessage;
	}

	public static RPS get(char initial) {
		for (RPS rps : RPS.values()) if (rps.initial == initial) return rps;
		return RPS.QUIT;
	}

	public static String getMessage(RPS rps, boolean isWinner) {return rps.getMessage(isWinner);}

	public String getMessage(boolean isWinner) {return isWinner ? winnerMessage : loserMessage;}

}

class RockPaperScissors {

	private static final RPS[] RPS_VALUES = RPS.values();
	private static final Scanner SCAN = new Scanner(System.in);

	private static RPS userSelection, computerSelection;

	/**
	 * Determines the winner.
	 * @return true - Player won.
	 * @return false - Computer won.
	 */
	private static boolean determineWinner(RPS plr1, RPS plr2){
		int leftPriority = plr1.ordinal() - plr2.ordinal();

		// WINS:
		// 		r - s = 1 - 2 = -1
		//		s - p = 2 - 3 = -1
		//		p - r = 3 - 1 = 2

		if (leftPriority == 2 || leftPriority == -1) return true; else return false;
	}

	/**
	 * Prints the message.
	 */

	private static void displayOutput(String message) {
		System.out.println("-----------------------------");
		System.out.println(message);
		System.out.println("Your move: " + userSelection.name());
		System.out.println("Computer move: " + computerSelection.name());
		System.out.println("-----------------------------");
	}

	public static void main(String[] args) {

		// Initializing counter variables
		int games = 0, wins = 0, losses = 0, ties = 0;

		//good practice to use try-catch if there are any errors
		try {
			for (;;) {
				//instructions and input
				System.out.println("Options:\n"
						+ "\tq - QUIT\n"
						+ "\tr - ROCK\n"
						+ "\tp - PAPER\n"
						+ "\ts - SCISSORS\n");
				System.out.print("Select your choice: ");

				// Collect choice.
				String input = SCAN.nextLine().trim().toLowerCase();
				while(!input.matches("[rpsq]")) {
					System.out.println("Make sure to follow the instructions" + "\nEnter your move: ");
					input = SCAN.nextLine().trim().toLowerCase();
				}

				userSelection = RPS.get(input.charAt(0));
				computerSelection = RPS_VALUES[1 + (int) (Math.random()*3)];
				if (userSelection == RPS.QUIT) break;

				// Ties
				if (userSelection == computerSelection) {
					displayOutput("[\u001B[33;5mTIE\u001b[0m]\nIt is a tie.");
					ties++;
				// Player wins.
				} else if (determineWinner(userSelection, computerSelection)) {
					displayOutput("[\u001B[32;5mWIN\u001b[0m]\n" + userSelection.getMessage(true));
					wins++;
				// Player loses.
				} else {
					displayOutput("[\u001B[31;5mLOSE\u001b[0m]\n" + userSelection.getMessage(false));
					losses++;
				}
				games++;
			}

			// If no games are played, win rate is 0.
			float winrate = games == 0 ? 0 : (float) wins / games * 100;

			System.out.println("Games: " + games
				+ "\nWins: " + wins
				+ "\nLosses: " + losses 
				+ "\nTies: " + ties 
				+ "\nWinrate: " + winrate + "%");
			System.out.println("------------------------------");

			System.out.print("Enter f if you want a fun fact: ");
			String funFact = SCAN.nextLine().trim();

			if (funFact.equalsIgnoreCase("f")) {
				System.out.println("According to Psychology Today and The World Rock Paper scissors association,");
				System.out.println("\trock is played roughly 35.4 percent of the time per round, ");
				System.out.println("\tpaper is played about 35 percent of the time, and"); 
				System.out.println("\tscissors is played 29.6 percent of the time.");
			}
		} catch (Exception a) {
			System.out.println(a);
		}
	}
}
