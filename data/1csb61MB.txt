--[[
    Elevator Controller

A script for an all-in-one elevator with floor selection, sounds, doors, and
more.
]]

local FLOORS = {
    {
        label = "0",
        name = "Ground Floor",
        speaker = "speaker_1",
        doorRedstone = "redstoneIntegrator_7",
        contactRedstone = "redstoneIntegrator_6",
        monitor = "monitor_1",
        height = 68
    },
    {
        label = "1",
        name = "Mechanical Room",
        speaker = "speaker_0",
        doorRedstone = "redstoneIntegrator_4",
        contactRedstone = "redstoneIntegrator_5",
        monitor = "monitor_0",
        height = 58
    }
}

local SPEEDS = {
    {
        rpm = 16,
        redstone = "redstoneIntegrator_11"
    },
    {
        rpm = 32,
        redstone = "redstoneIntegrator_10"
    },
    {
        rpm = 64,
        redstone = "redstoneIntegrator_9"
    },
    {
        rpm = 128,
        redstone = "redstoneIntegrator_8"
    }
}

local DIRECTION_UP = true
local DIRECTION_DOWN = false
local DIRECTION_REDSTONE = "redstoneIntegrator_13"

-- Sets the speed of the elevator motion.
-- Positive numbers move the elevator up.
-- Zero sets the elevator as motionless.
-- Negative numbers move the elevator down.
-- The nearest possible RPM is used, via SPEEDS.
local function setSpeed(rpm)
    for _, speed in pairs(SPEEDS) do
        peripheral.call(speed.redstone, "setOutput", "top", false)
    end
    if rpm == 0 then return end
    if rpm > 0 then
        peripheral.call(DIRECTION_REDSTONE, "setOutput", "top", DIRECTION_UP)
    else
        peripheral.call(DIRECTION_REDSTONE, "setOutput", "top", DIRECTION_DOWN)
    end
    local closestSpeed = nil
    local closestRpmDist = 1000000
    for _, speed in pairs(SPEEDS) do
        local dist = speed.rpm - math.abs(rpm)
        if dist < closestRpmDist then
            closestRpmDist = dist
            closestSpeed = speed
        end
    end
    if closestSpeed == nil then
        closestSpeed = SPEEDS[1]
    end
    peripheral.call(speed.redstone, "setOutput", "top", true)
end