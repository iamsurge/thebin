typedef long long LL;
const int maxn = 50000 + 100;
const LL MOD = 1000000009;
int n;
LL hash1[maxn], hash2[maxn];
LL p[maxn];

class Solution {
public:
    Solution() {
        p[0] = 1;
        for (int i = 1; i < maxn; ++i) {
            p[i] = p[i - 1] * 26 % MOD;
        }
    }
    
    LL getHash2(int l, int r) {
        LL ret = hash2[l];
        if (r == n - 1) {
            return hash2[l];
        }
        LL tmp = hash2[r + 1] * p[r - l + 1] % MOD;
        return ((ret - tmp) % MOD + MOD) % MOD;
    }
    
    string shortestPalindrome(string s) {
        n = s.length();
        LL pre = 0;
        for (int i = 0; i < n; ++i) {
            hash1[i] = (pre * 26 + s[i] - 'a' + 1) % MOD;
            pre = hash1[i];
        }
        pre = 0;
        for (int i = n - 1; i >= 0; --i) {
            hash2[i] = (pre * 26 + s[i] - 'a' + 1) % MOD;
            pre = hash2[i];
        }
        int maxLen = 1;
        for (int i = 0; i + i + 1 < n; ++i) {
            if (hash1[i] == getHash2(i + 1, i + i + 1)) {
                maxLen = max(maxLen, (i + 1) * 2);
            }
            if (i + i + 2 < n && hash1[i] == getHash2(i + 2, i + i + 2)) {
                maxLen = max(maxLen, (i + 1) * 2 + 1);
            }
        }
        string rs = s;
        reverse(rs.begin(), rs.end());
        return rs.substr(0, s.length() - maxLen) + s;
    }
};