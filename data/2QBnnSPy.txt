def cockroach_move(cases, noise, cv, state, states):
    res = []
    res_movenment = []
    for sound in noise:
        if state == cases["z1"]:
            if sound > 0:
                f = states[1][state]
                res.append(f)
                next = cv[cases["z1"]].index(f)
                state = cases[("z" + (str)(next + 1))]
            # print("F - {0}, next - {1}".format(f, state+1))
            else:
                f = states[sound][state]
                res.append(f)
                next = cv[cases["z1"]].index(f)
                state = cases[("z" + (str)(next + 1))]
            # print("F - {0}, next - {1}".format(f, state+1))
        elif state == cases["z2"]:
            if sound > 0:
                f = states[1][state]
                res.append(f)
                next = cv[cases["z2"]].index(f)
                state = cases[("z" + (str)(next + 1))]
            # print("F - {0}, next - {1}".format(f, state+1))
            else:
                f = states[sound][state]
                res.append(f)
                next = cv[cases["z2"]].index(f)
                state = cases[("z" + (str)(next + 1))]
            # print("F - {0}, next - {1}".format(f, state+1))
        elif state == cases["z3"]:
            if sound > 0:
                f = states[1][state]
                res.append(f)
                next = cv[cases["z3"]].index(f)
                state = cases[("z" + (str)(next + 1))]
            # print("F - {0}, next - {1}".format(f, state+1))
            else:
                f = states[sound][state]
                res.append(f)
                next = cv[cases["z3"]].index(f)
                state = cases[("z" + (str)(next + 1))]
                # print("F - {0}, next - {1}".format(f, state+1))
        if sound > 0:
            f = [i * sound for i in f]
        res_movenment.append(f)
    res_degree = 0
    res_path = 0
    for r in res:
        res_degree += r[1]
        res_path += r[0]
    return [res_path, res_degree % 360], res_movenment, state