fuelReq = 11*8
    -- if turtle.getFuel() < fuelReq:
    --     exit()

function swapInventory()
    turtle.select( (turtle.getSelectedSlot()+1) % 10 )

function move(direction)
    if direction == "up" then
        if not turtle.up() then error("obstructed")
        end
    if direction == "forward" then
        if not turtle.forward() then error("obstructed")
        end

function carve()
    for z=1, 7 do
        turtle.digUp() -- next layer
        move("up")
        turtle.turnRight() -- u turn
        turtle.turnRight()

        for y=1, 10 do 
            if y%2 == 1 then turtle.turnRight() else turtle.turnLeft() end -- switch between turning left and right
            turtle.dig()
            move("forward")
            if y%2 == 1 then turtle.turnRight() else turtle.turnLeft() end

            for x=1, 10 do 
                turtle.dig()
                move("forward")
            end
        end
    end

function floor()
    for y=0, 10, 1 do 
        if y%2 == 0 then turtle.turnRight() else turtle.turnLeft() end
        turtle.dig()
        move("forward")
        if not turtle.detectDown() then
            while not turtle.placeDown() do
                swapInventory()
            end
        end
        if y%2 == 0 then turtle.turnRight() else turtle.turnLeft() end

        for x=0, 10, 1 do 
            turtle.dig()
            move("forward")
            if not turtle.detectDown() then
                while not turtle.placeDown() do
                    swapInventory()
                end
            end
            if x == 5 and y == 5 then turtle.digDown() end
        end
    end

function returnToStart()
    turtle.turnLeft()
    turtle.forward(10)
    turtle.turnLeft()
    turtle.forward(10)
    turtle.down(7)
    turtle.forward()



turtle.dig()
if not turtle.forward() 
    then 
        print("obstructed")
        exit()

floor()
carve()
returnToStart()
