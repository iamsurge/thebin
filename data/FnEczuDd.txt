def traverse(node):
    if node.kind == clang.cindex.CursorKind.MACRO_INSTANTIATION:
        if node.displayname == 'REGISTER_MODULE_INITIALIZER':
            macro_locations.append([node.extent.start.line, node.extent.start.column, node.extent.start.file.name])
    elif node.kind == clang.cindex.CursorKind.FUNCTION_DECL:
        if [node.extent.start.line, node.extent.start.column, node.extent.start.file.name] in macro_locations \
            and node.displayname.endswith('__Register()'):
            nsp = get_namespace(node.lexical_parent)
            nsp.objects.append(node.displayname)
    print(str(node.kind) + ' ' + node.displayname)
    for child in node.get_children():
        traverse(child)

parser_args = ['-std=c++17']

clang.cindex.Config.set_library_path(clang_lib_path)
index = clang.cindex.Index.create()

tu = index.parse('test.cpp',
                 options=clang.cindex.TranslationUnit.PARSE_DETAILED_PROCESSING_RECORD |
                 clang.cindex.TranslationUnit.PARSE_INCOMPLETE,
                 args=parser_args)
traverse(tu.cursor)