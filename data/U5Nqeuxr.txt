// Question 1
// Given the Time class, modify it such that it can be sorted using the sort methods from Arrays or Collections.
 ...
class Time implements Comparable<Time> {
    private int seconds;
    private int minutes;
    private int hours;
    public Time(int h, int m, int s) {
        if (seconds < 0 || seconds > 59) {
            throw new IllegalArgumentException("Seconds must be between 0 and 59");
        }
        if (minutes < 0 || minutes > 59) {
            throw new IllegalArgumentException("Minutes must be between 0 and 59");
        }
        if (hours < 0 || hours > 23) {
            throw new IllegalArgumentException("Hours must be between 0 and 23");
        }
        seconds = s;
        minutes =  m;
        hours = h;
    }

    public int getSeconds() {
        return seconds;
    }

    public int getMinutes() {
        return minutes;
    }

    public int getHours() {
        return hours;
    }
    
    public int compareTo(Time ano) {
        Integer allTime = hours * 3600 + minutes * 60 + seconds;
        Integer anoAllTime = ano.getHours() * 3600 + ano.getMinutes() * 60 + ano.getSeconds();
        return allTime.compareTo(anoAllTime);
    }

    public String toString() {
        return String.format("%02d:%02d:%02d", getHours(), getMinutes(), getSeconds());
    }
}


// Question 2
// Given the Time class which you may not modify, create a comparator (named TimeComparator) such that it can be sorted using the sort methods from Arrays or Collections. The time values should be sorted into descending order.
 ...
public class TimeComparator implements Comparator<Time> {
    public int compare(Time a, Time b) {
        Integer allTime_a = a.getHours() * 3600 + a.getMinutes() * 60 + a.getSeconds();
        Integer allTime_b = b.getHours() * 3600 + b.getMinutes() * 60 + b.getSeconds();
        return allTime_b.compareTo(allTime_a);
    }
}

