海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥恋爱FLOPS@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"动态分类\",\"path\":\"dt\",\"rule\":\"const empty = \\\"hiker://empty\\\"\\nvar cates = pdfa(html, 大类定位);\\n//log(Cates[1])\\nvar all = \\\"<a href=\\\\\\\"\\\\\\\">全部</a>\\\";\\nvar onecates = cates[1].split(/<label>.*?<\\\\/label>/);\\n//log(onecates.length);\\nvar onesub = [onecates[2]].concat(onecates[3]).concat(onecates[1]);\\n//log(onesub)\\nvar towsub = [cates[0]].concat(cates[2]);\\n\\ntry {\\n    var categories = onesub.concat(towsub)\\n} catch (e) {\\n    var categories = onesub;\\n} \\n//log(categories)\\nlet init_cate = []\\n\\nfor (let i = 0; i < 20; i++) {\\n    init_cate.push(\\\"0\\\")\\n}\\n\\nconst fold = getMyVar('header.group', \\\"0\\\")\\nconst cate_temp_json = getMyVar('header.category', JSON.stringify(init_cate))\\nconst cate_temp = JSON.parse(cate_temp_json)\\n\\nif (parseInt(page) === 1) {\\n    d.push({\\n        title: fold === '1' ? '““””<b><span style=\\\"color: #FF0000\\\">∨</span></b>' : '““””<b><span style=\\\"color: #1aad19\\\">∧</span></b>',\\n        url: $('#noLoading#').lazyRule((fold) => {\\n            putMyVar('header.group', fold === '1' ? '0' : '1');\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, fold),\\n        col_type: 'scroll_button',\\n    })\\n\\n    categories.forEach((category, index) => {\\n        let sub_categories = pdfa(category, 小类定位);\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = []\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar('header.category', JSON.stringify(new_cate))\\n                        putMyVar('header.url', input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        } else if (fold === '1') {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        params.cate_temp[params.index] = params.key.toString()\\n\\n                        putMyVar('header.category', JSON.stringify(params.cate_temp))\\n                        putMyVar('header.url', input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        index: index,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        }\\n    })\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"解析\",\"path\":\"lazy\",\"rule\":\"var lazy = $('').lazyRule((MY_HOME) => {\\n    var url = pdfh(request(input), '#playbox&&data-vid').replace('$mp4', '')\\n    return url\\n}, MY_HOME);\"}],\"saved\":false,\"title\":\"樱花动漫.dr\",\"version\":0,\"url\":\"http://www.yinghuacd.com/show/5736.html#immersiveTheme#;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_1\",\"find_rule\":\"js:\\naddListener(\\\"onClose\\\", $.toString(() => {\\n    clearMyVar(\\\"顺序\\\");\\n    clearMyVar(\\\"tabnum\\\");\\n}))\\nvar d = [];\\nMY_URL = MY_URL.split(\\\"#\\\")[0];\\nlet html = fetch(MY_URL)\\n\\nd.push({\\n    title: pdfh(html, 'h1&&Text') + \\\"\\\\n评分：\\\" + pdfh(html, '.score&&Text'),\\n    url: MY_URL,\\n    col_type: \\\"movie_1_vertical_pic_blur\\\",\\n    desc: pdfh(html, '.sinfo&&span&&Text') + \\\"\\\\n\\\" + pdfh(html, '.sinfo&&span,1&&Text') + \\\"\\\\n\\\" + pdfh(html, '.sinfo&&span,2&&Text'),\\n    pic_url: pd(html, '.thumb&&img&&src') + \\\"@Referer=\\\"\\n});\\nlet contents = pdfh(html, '.info&&Text');\\nd.push({\\n    title: '‘‘’’<font color=\\\"#098AC1\\\">剧情简介</font>',\\n    desc: '‘‘’’<font color=\\\"\\\">' + contents.substr(0, 50) + '</font>' + '<small><font color=\\\"red\\\">详情</font></small>',\\n    col_type: 'text_1',\\n    extra: {\\n        //lineVisible: false\\n    },\\n    url: $().rule((text) => {\\n        setResult([{\\n            title: text,\\n            col_type: 'long_text',\\n        }])\\n    }, contents)\\n});\\n\\nvar playlists = pdfa(html, \\\".main0&&li\\\");\\nvar tabs = pdfa(html, \\\".menu0&&li\\\");\\neval(JSON.parse(request('hiker://page/lazy')).rule);\\n//图标来自顺佬小程序\\nvar icon_s = 'http://82.156.222.77/weisyr/icon/';\\nif (getMyVar('顺序', '正序') == '正序') {\\n    var avatar = icon_s + '正序.svg';\\n    var ordtext = \\\"★正序↓\\\";\\n} else {\\n    var avatar = icon_s + '反序.svg';\\n    var ordtext = \\\"☆逆序↑\\\";\\n}\\n\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"#f13b66a\\\">' + title + '</front></strong>';\\n}\\n\\n//默认数据列表\\nfunction setLists(d, pdata, lazy) {\\n    for (var i in pdata) {\\n        d.push({\\n            title: pdfh(pdata[i], 'a&&Text'),\\n            url: pd(pdata[i], 'a&&href') + lazy,            \\n            col_type: 'text_3',\\n            extra: {\\n                id: pd(pdata[i], \\\"a&&href\\\"),\\n                cls: MY_RULE + \\\"itemid\\\"\\n            }\\n        });\\n    }\\n}\\nvar setLists = setLists;\\n//线路匹配，加载对应数据\\ntabs.forEach((Tabname, i) => {\\n    //log(Tabname)\\n    d.push({\\n        title: getMyVar('tabnum', '0') == i ? getHead(Tabname) : Tabname,\\n        url: $(\\\"#noLoading#\\\").lazyRule((orderid, cls, setLists, getHead, tabs, Tabname, playlists, i, lazy) => {\\n            deleteItemByCls(cls);\\n            let d = [];\\n            let list = playlists;\\n            if (getMyVar('顺序', '') != '') {\\n                if (getMyVar('顺序', '正序') == '逆序') {\\n                    setLists(d, list, lazy)\\n                } else {\\n                    list = list.reverse();\\n                    setLists(d, list, lazy)\\n                }\\n            } else {\\n                setLists(d, list, lazy)\\n            }\\n\\n            //在排序id后面添加列表\\n            addItemAfter(orderid, d);\\n            updateItem(\\\"tabid\\\" + getMyVar(\\\"tabnum\\\", \\\"0\\\"), {\\n                title: tabs[parseInt(getMyVar(\\\"tabnum\\\", \\\"0\\\"))]\\n            });\\n            //log(Tabname)\\n\\n            updateItem(\\\"tabid\\\" + i, {\\n                title: getHead(Tabname)\\n            });\\n            \\n            putMyVar(\\\"tabnum\\\", i);\\n            //return 'toast://切换成功!'\\n            return \\\"hiker://empty\\\"\\n        }, \\\"orderid\\\", MY_RULE + \\\"itemid\\\", setLists, getHead, tabs, Tabname, playlists, i, lazy),\\n        col_type: \\\"text_3\\\",\\n        extra: {\\n            id: \\\"tabid\\\" + i\\n        }\\n    });\\n})\\n\\n//排序设置\\nd.push({\\n    title: '‘‘’’<span style=\\\"color:#098AC1\\\"><small>播放列表</small>' + '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span style=\\\"float:right\\\">' + '<small>' + ordtext + '</small>',\\n    url: $('#noLoading#').lazyRule((orderid, cls, setLists, playlists, lazy) => {\\n        deleteItemByCls(cls);\\n        var d = [];\\n        let list = playlists;\\n        if (getMyVar('顺序', '') == '') {\\n            putMyVar('顺序', '逆序');\\n        }\\n        if (getMyVar('顺序', '正序') == '正序') {\\n            putMyVar('顺序', '逆序');\\n            var ordtext = \\\"★正序↓\\\";\\n            setLists(d, list, lazy)\\n        } else {\\n            putMyVar('顺序', '正序');\\n            var ordtext = \\\"☆逆序↑\\\";\\n            list = list.reverse();\\n            setLists(d, list, lazy)\\n        }\\n\\n        //log(d[0])\\n        addItemAfter(orderid, d);\\n        //refreshPage(true);\\n        updateItem(orderid, {\\n            title: '‘‘’’<span style=\\\"color:#098AC1\\\"><small>播放列表</small>' + '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span style=\\\"float:right\\\">' + '<small>' + ordtext + '</small>'\\n        });\\n        return 'hiker://empty'\\n    }, \\\"orderid\\\", MY_RULE + \\\"itemid\\\", setLists, playlists, lazy),\\n    col_type: 'text_center_1',\\n    extra: {\\n        id: \\\"orderid\\\",\\n    }\\n})\\n\\nsetLists(d, playlists, lazy)\\nlet newstip = pdfh(html, \\\".sinfo&&p&&Text\\\")\\nsetLastChapterRule('js:' + $.toString((newstip) => {\\n    setResult(newstip);\\n}, newstip));\\n\\nsetResult(d);\",\"group\":\"①动漫\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"动态分类\\\",\\\"path\\\":\\\"dt\\\",\\\"rule\\\":\\\"const empty = \\\\\\\"hiker://empty\\\\\\\"\\\\nvar cates = pdfa(html, 大类定位);\\\\n//log(Cates[1])\\\\nvar all = \\\\\\\"<a href=\\\\\\\\\\\\\\\"\\\\\\\\\\\\\\\">全部</a>\\\\\\\";\\\\nvar onecates = cates[1].split(/<label>.*?<\\\\\\\\/label>/);\\\\n//log(onecates.length);\\\\nvar onesub = [onecates[2]].concat(onecates[3]).concat(onecates[1]);\\\\n//log(onesub)\\\\nvar towsub = [cates[0]].concat(cates[2]);\\\\n\\\\ntry {\\\\n    var categories = onesub.concat(towsub)\\\\n} catch (e) {\\\\n    var categories = onesub;\\\\n} \\\\n//log(categories)\\\\nlet init_cate = []\\\\n\\\\nfor (let i = 0; i < 20; i++) {\\\\n    init_cate.push(\\\\\\\"0\\\\\\\")\\\\n}\\\\n\\\\nconst fold = getMyVar('header.group', \\\\\\\"0\\\\\\\")\\\\nconst cate_temp_json = getMyVar('header.category', JSON.stringify(init_cate))\\\\nconst cate_temp = JSON.parse(cate_temp_json)\\\\n\\\\nif (parseInt(page) === 1) {\\\\n    d.push({\\\\n        title: fold === '1' ? '““””<b><span style=\\\\\\\"color: #FF0000\\\\\\\">∨</span></b>' : '““””<b><span style=\\\\\\\"color: #1aad19\\\\\\\">∧</span></b>',\\\\n        url: $('#noLoading#').lazyRule((fold) => {\\\\n            putMyVar('header.group', fold === '1' ? '0' : '1');\\\\n            refreshPage(false);\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, fold),\\\\n        col_type: 'scroll_button',\\\\n    })\\\\n\\\\n    categories.forEach((category, index) => {\\\\n        let sub_categories = pdfa(category, 小类定位);\\\\n        if (index === 0) {\\\\n            sub_categories.forEach((item, key) => {\\\\n                let title = pdfh(item, 分类标题)\\\\n                d.push({\\\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\\\\\"color: ' + 分类颜色 + '\\\\\\\">' + title + '</span></b>' : title,\\\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\\\n                        let new_cate = []\\\\n                        params.cate_temp.forEach((cate, index) => {\\\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\\\\\"0\\\\\\\")\\\\n                        })\\\\n                        putMyVar('header.category', JSON.stringify(new_cate))\\\\n                        putMyVar('header.url', input)\\\\n                        refreshPage(true)\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, {\\\\n                        cate_temp: cate_temp,\\\\n                        key: key,\\\\n                        page: page,\\\\n                    }),\\\\n                    col_type: 'scroll_button',\\\\n                })\\\\n            })\\\\n            d.push({\\\\n                col_type: \\\\\\\"blank_block\\\\\\\"\\\\n            });\\\\n        } else if (fold === '1') {\\\\n            sub_categories.forEach((item, key) => {\\\\n                let title = pdfh(item, 分类标题)\\\\n                d.push({\\\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\\\\\"color: ' + 分类颜色 + '\\\\\\\">' + title + '</span></b>' : title,\\\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\\\n                        params.cate_temp[params.index] = params.key.toString()\\\\n\\\\n                        putMyVar('header.category', JSON.stringify(params.cate_temp))\\\\n                        putMyVar('header.url', input)\\\\n                        refreshPage(true)\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, {\\\\n                        cate_temp: cate_temp,\\\\n                        index: index,\\\\n                        key: key,\\\\n                        page: page,\\\\n                    }),\\\\n                    col_type: 'scroll_button',\\\\n                })\\\\n            })\\\\n            d.push({\\\\n                col_type: \\\\\\\"blank_block\\\\\\\"\\\\n            });\\\\n        }\\\\n    })\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"解析\\\",\\\"path\\\":\\\"lazy\\\",\\\"rule\\\":\\\"var lazy = $('').lazyRule((MY_HOME) => {\\\\n    var url = pdfh(request(input), '#playbox&&data-vid').replace('$mp4', '')\\\\n    return url\\\\n}, MY_HOME);\\\"}]\"}","picUrl":"http://css.yhdmtu.me/news/2022/10/12/20221012102437667.jpg@Referer=","title":"恋爱FLOPS"}