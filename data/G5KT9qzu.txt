import java.io.*;
import java.util.*;

public class Main {
    static PrintWriter out;
    BufferedReader br;
    StringTokenizer in;


    public static void main(String[] args) throws IOException {
        new Main().run();
    }

    public void solve() throws IOException {
        Deque<Integer> queue = new ArrayDeque<>();
        
        String a;
        do {
            a = nextToken();

            switch (a) {
                case "push_front":
                    queue.addFirst(nextInt());
                    out.println("ok");
                    break;
                case "push_back":
                    queue.addLast(nextInt());
                    out.println("ok");
                    break;

                case "pop_front":
                    if (queue.size() == 0) out.println("error");
                    else out.println(queue.pollFirst());
                    break;

                case "pop_back":
                    if (queue.size() == 0) out.println("error");
                    else out.println(queue.pollLast());
                    break;
                case "front":
                    if (queue.size() == 0) out.println("error");
                    else out.println(queue.peekFirst());
                    break;
                case "back":
                    if (queue.size() == 0) out.println("error");
                    else out.println(queue.peekLast());
                    break;
                case "size":
                    out.println(queue.size());
                    break;
                case "clear":
                    queue.clear();
                    out.println("ok");
                    break;
            }
        } while (!a.equals("exit"));

        out.println("bye");
    }

    public void run() {
        try {
            br = new BufferedReader(new InputStreamReader(System.in));
            out = new PrintWriter(System.out);

            solve();

            out.close();
        } catch (IOException e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public String nextToken() throws IOException {
        while (in == null || !in.hasMoreTokens()) {
            in = new StringTokenizer(br.readLine());
        }
        return in.nextToken();
    }

    public int nextInt() throws IOException {
        return Integer.parseInt(nextToken());
    }

}
