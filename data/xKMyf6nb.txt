vector <ll> a;
vector <pair <ll, ll>> b;
ll n, k = 2;

ll get(ll l, ll r) {
    ll res = 0;
    while (l <= r) {
        if (l % k == 0 && l + k - 1 <= r) {
            res = max(b[l / k].first + b[l / k].second, res);
            l += k;
        }
        else {
            res = max(a[l] + b[l / k].second, res);
            l += 1;
        }
    }
    return res;
}

void upd_point(ll pos, ll x) {
    a[pos] += x;
    b[pos / k].first = max(b[pos / k].first, a[pos]);
}

void upd_block(ll num, ll x) {
    b[num].second += x;
}

void solve() {
    ll n, K, m;
    cin >> n >> K >> m;
    a.resize(n, 0);
    //a[0] - (0 && 1)
    //a[1] - (1 && 2)
    //a[n-1] - (n - 1 && n)
    b.resize(n, { 0, 0 });
    //first - max, second - boost
    while (m--) {
        ll l, r;
        cin >> l >> r;
        r--;
        if (get(l, r) >= K) {
            cout << 0 << endl;
            continue;
        }
        cout << 1 << endl;
        while (l <= r) {
            if (l % k == 0 && l + k - 1 <= r) {
                upd_block(l / k, 1);
                l += k;
            }
            else {
                upd_point(l, 1);
                l += 1;
            }
        }
    }
}