void TestCommentsAreIgnored() {
    {
        istringstream is(R"(# comment
)"s);
        Lexer lexer(is);

        ASSERT_EQUAL(lexer.CurrentToken(), Token(token_type::Eof{}));
    }
    {
        istringstream is(R"(# comment

)"s);
        Lexer lexer(is);
        ASSERT_EQUAL(lexer.CurrentToken(), Token(token_type::Eof{}));
    }
    {
        istringstream is(R"(# comment
x #another comment
abc#
'#'
"#123"
#)"s);

        Lexer lexer(is);
        ASSERT_EQUAL(lexer.CurrentToken(), Token(token_type::Id{"x"s}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::Newline{}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::Id{"abc"s}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::Newline{}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::String{"#"s}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::Newline{}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::String{"#123"s}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::Newline{}));
        ASSERT_EQUAL(lexer.NextToken(), Token(token_type::Eof{}));
    }
}