#define _CRT_SECURE_NO_WARNINGS
#define debug(tl) cerr<<#tl<<' '<<tl<<'\n';
#include "bits/stdc++.h"
using namespace std;
#define all(mask) mask.begin(), mask.end()
typedef long long ll;
typedef pair<ll, ll> pll;
typedef pair<int, int> pii;
typedef long double ld;

int gr[41][41];
int deg[41], mask[41];
int depth, n;
void dfs(int j, int c){
    if (c + n - j + 1 <= depth)
        return;
    bool fl;
    if (j == n + 1){
        if (c > depth) {
            depth = c;
        }
        return;
    }
    fl = true;
    if (deg[j] <= depth - 1) {
        fl = false;
    }
    else {
        for (int i = 1; i <= c; i++) {
            if (gr[mask[i]][j] == 0) {
                fl = false;
                break;
            }
        }
    }
    if (fl) {
        mask[c + 1] = j;
        dfs(j + 1, c + 1);
    }
    dfs(j + 1, c);
}
signed main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#endif
	ios_base::sync_with_stdio(false);
	cin.tie(nullptr);
	cout.tie(nullptr);
    cout << fixed << setprecision(8);
    int k;
    ld ans;
    cin >> n >> k;
    for (int i = 0; i < 41; i++) {
        deg[i] = 0;
        mask[i] = 0;
    }
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= n; j++) {
            cin >> gr[i][j];
            if (gr[i][j] == 1) {
                deg[i]++;
            }
        }
    }
    depth = 1;
    dfs(1, 0);
    cout << (ld)((depth - 1) * k * k) / (ld)(2 * depth) << '\n';
}