// Cuda notes

// Includes
#include <cuda_runtime.h>
#include <curand.h>
#include <curand_kernel.h>

// Cuda function 
__global__ void add(int *a, int *b, int *c, int n);

// Index calculation
int index = threadIdx.x + blockIdx.x * blockDim.x;

// Constants 
#define BLOCKS 1
#define THREADS_PER_BLOCK 5
#define N 6

// Call the method
add<<<(N + BLOCKS) / THREADS_PER_BLOCK, THREADS_PER_BLOCK>>>(d_a, d_b, d_c, N);

// Note for method
if (index < n) 

// Memory allocations
cudaMalloc((void **)&d_a, size);
cudaMemcpy(d_a, a, size, cudaMemcpyHostToDevice);
cudaMemcpy(c, d_c, size, cudaMemcpyDeviceToHost);
cudaFree(d_a);

// MPI remarks
// Define a new type
MPI_Datatype MPI_INITIAL;
    
MPI_Aint lb, extent;
MPI_Type_get_extent(MPI_FLOAT, &lb, &extent);

int count = 2;
int lengths[2] = { 4, 2 };
MPI_Aint displacements[2] = { 0, 4 * extent };
MPI_Datatype types[2] = { MPI_FLOAT, MPI_INT };

MPI_Type_create_struct(count, lengths, displacements, types, &MPI_INITIAL);
MPI_Type_commit(&MPI_INITIAL);


// Custom reduction
void myMax(INITIAL *inbuf, INITIAL *outbuf, int *len, MPI_Datatype type)
{
    *outbuf = (*inbuf).n > (*outbuf).n ? *inbuf : *outbuf;
}

MPI_Op MPI_MY_MAX;
MPI_Op_create((MPI_User_function *)myMax, 1, &MPI_MY_MAX);