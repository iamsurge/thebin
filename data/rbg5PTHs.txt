#include <iostream>
#include <chrono>
#include <thread>

using namespace std;

const int THREAD_NUMBER = 6;
const unsigned long long MAX_NUMBER = 1e10;

// Функция для вычисления суммы ряда для каждого треда
void rowSum(int iterator, unsigned long long* result);


int main() {
	cout << "Fadeev 8V91 LW2" << endl;

	thread threads[THREAD_NUMBER];
	
	unsigned long long res[THREAD_NUMBER];
	unsigned long long multiThreadRes = 0;
	unsigned long long singleThreadRes = 0;

	auto start = chrono::high_resolution_clock::now();

	for (int i = 0; i < THREAD_NUMBER; i++) {
		threads[i] = thread(rowSum, i, res);
	}

	for (int i = 0; i < THREAD_NUMBER; i++) {
		threads[i].join();
	}

	for (int i = 0; i < THREAD_NUMBER; i++) {
		multiThreadRes += res[i];
	}

	auto end = chrono::high_resolution_clock::now();
	chrono::duration<double> elapsed_seconds = end - start;
	double timer = elapsed_seconds.count();
	cout << "Total time of " << THREAD_NUMBER << " threads: " << timer << "sec" << endl;

	auto start2 = chrono::high_resolution_clock::now();

	for (unsigned long long i = 1; i <= MAX_NUMBER; i++) {
		singleThreadRes += i;
	}

	auto end2 = chrono::high_resolution_clock::now();
	chrono::duration<double> elapsed_seconds2 = end2 - start2;
	double timer2 = elapsed_seconds2.count();
	cout << "Total time without multithreading: " << timer2 << "sec" << endl;

	if (multiThreadRes == singleThreadRes) {
		cout << "The results are equal: "<< multiThreadRes << " = " << singleThreadRes << endl;
	}
	else {
		cout << "The results aren't equal" << endl;
	}

	return 0;
}

void rowSum(int iterator, unsigned long long* res) {
	unsigned long long res_ = 0;
	for (unsigned long long i = iterator; i <= MAX_NUMBER; i += THREAD_NUMBER) {
		res_ += i;
	}
	res[iterator] = res_;
	cout << "The sum of thread number" << iterator << ": " << res[iterator] << endl;
}