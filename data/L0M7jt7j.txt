using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace Digger
{
    public class Terrain : ICreature
    {
        public string GetImageFileName() => "Terrain.png";
        public int GetDrawingPriority() => 4;
        public CreatureCommand Act(int x, int y) => new CreatureCommand();
        public bool DeadInConflict(ICreature conflictedObject) => true;
    }

    public class Player : ICreature
    {
        public string GetImageFileName() => "Digger.png";
        public int GetDrawingPriority() => 1;

        public static int X = 0;
        public static int Y = 0;

        (int, int) KeyToDelta(Keys key)
        {
            switch (key)
            {
                case Keys.Up:
                    return (0, -1);
                case Keys.Down:
                    return (0, 1);
                case Keys.Left:
                    return (-1, 0);
                case Keys.Right:
                    return (1, 0);
            }

            return (0, 0);
        }

        public CreatureCommand Act(int x, int y)
        {
            (X, Y) = (x, y);

            var (dx, dy) = KeyToDelta(Game.KeyPressed);
            var (xnew, ynew) = (x + dx, y + dy);

            var widthOk = 0 <= xnew && xnew < Game.MapWidth;
            var heightOk = 0 <= ynew && ynew < Game.MapHeight;
            var outOfField = (!widthOk) || (!heightOk);
            var isNextSack = !outOfField && Game.Map[xnew, ynew] is Digger.Sack;
            if (outOfField || isNextSack)
                (dx, dy) = (0, 0);

            return new CreatureCommand()
            {
                DeltaX = dx,
                DeltaY = dy,
            };
        }

        public bool DeadInConflict(ICreature conflictedObject)
        {
            if (conflictedObject is Digger.Sack)
            {
                Game.IsOver = true;
                return true;
            }
            if (conflictedObject is Digger.Gold)
                Game.Scores += 10;

            return false;
        }
    }

    class Sack : ICreature
    {
        public string GetImageFileName() => "Sack.png";
        public int GetDrawingPriority() => 2;

        int cellFalled = 0;

        public CreatureCommand Act(int x, int y)
        {
            var canFall = y+1 < Game.MapHeight;
            var nextIsEmpty = canFall && Game.Map[x, y+1] == null;
            var nextIsKillable = canFall
                && cellFalled > 0
                && (Game.Map[x, y+1] is Digger.Player);

            if (nextIsEmpty || nextIsKillable)
            {
                cellFalled++;
                return new CreatureCommand() { DeltaY = 1 };
            }

            var cmd = cellFalled > 1
                ? new CreatureCommand() { TransformTo = new Gold() }
                : new CreatureCommand();

            cellFalled = 0;

            return cmd;
        }

        public bool DeadInConflict(ICreature conflictedObject) => false;
    }

    class Gold : ICreature
    {
        public string GetImageFileName() => "Gold.png";
        public int GetDrawingPriority() => 3;
        public CreatureCommand Act(int x, int y) => new CreatureCommand();
        public bool DeadInConflict(ICreature conflictedObject) => true;
    }
}
