local EV

getgenv().Egg = false;
getgenv().Buy = false;
getgenv().Lift = false;
getgenv().Sell = false;
getgenv().Attack = false;
getgenv().Territory = false;

function Open()
    spawn(function ()
        while getgenv().Egg == true do
if EV == "Creature Egg" then local args = {[1] = 1,[2] = 1,[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Pets.PurchaseEgg:InvokeServer(unpack(args)) wait(0.1) end
if EV == "Wildlife Egg" then local args = {[1] = 2,[2] = 1,[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Pets.PurchaseEgg:InvokeServer(unpack(args)) wait(0.1) end
if EV == "Xtended Egg" then local args = {[1] = 3,[2] = 1,[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Pets.PurchaseEgg:InvokeServer(unpack(args)) wait(0.1) end
if EV == "Emerald Egg" then local args = {[1] = 4,[2] = 1,[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Pets.PurchaseEgg:InvokeServer(unpack(args)) wait(0.1) end
if EV == "Heaven's Egg" then local args = {[1] = 5,[2] = 1,[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Pets.PurchaseEgg:InvokeServer(unpack(args)) wait(0.1) end
if EV == "Santa's Egg" then local args = {[1] = 1,[2] = 1,[3] = "Christmas"} game:GetService("ReplicatedStorage").Remotes.Pets.PurchaseEgg:InvokeServer(unpack(args)) wait(0.1) end
        end
    end)
end
function Byer()
spawn(function () while getgenv().Buy == true do
local args = {[1] = "Weight",[2] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestBuyAll:InvokeServer(unpack(args)) wait(0.5)
        end
    end)
spawn(function () while getgenv().Buy == true do
local args = {[1] = 2,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 3,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 4,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 5,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 6,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 7,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 8,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 9,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 10,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 11,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 12,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 13,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 14,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 15,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
local args = {[1] = 16,[2] = "BodyUpgrade",[3] = "Islands"} game:GetService("ReplicatedStorage").Remotes.Shop.RequestPurchase:InvokeServer(unpack(args)) wait(1)
        end
    end)
end
function Lift()
    spawn(function ()
        while getgenv().Lift == true do
game:GetService("ReplicatedStorage").Remotes.LiftWeight:FireServer() wait(0.1)
        end
    end)
end
function Sell()
    spawn(function ()
        while getgenv().Sell == true do
game:GetService("ReplicatedStorage").Remotes.SellStrengthRequest:FireServer() wait(0.1)
        end
    end)
end
function Attack()
    spawn(function ()
        while getgenv().Attack == true do
local args = {[1] = "Punch",[2] = 2} game:GetService("ReplicatedStorage").Remotes.PVP.AttackAttempt:FireServer(unpack(args)) wait(0.1)
        end
    end)
end
function Territorial()
    spawn(function ()
        while getgenv().Territory == true do
TPTo(game:GetService("Workspace").RingAreas.Territories.T1.CFrame) wait(10)
TPTo(game:GetService("Workspace").RingAreas.Territories.T2.CFrame) wait(10)
TPTo(game:GetService("Workspace").RingAreas.Territories.T3.CFrame) wait(10)
TPTo(game:GetService("Workspace").RingAreas.Territories.T4.CFrame) wait(10)
TPTo(game:GetService("Workspace").RingAreas.Territories.T5.CFrame) wait(10)
        end
    end)
end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow("Get Huge Simulator")

local b = w:CreateFolder("Autofarm")

b:Toggle("Auto Lift",function(val)
getgenv().Lift = val
Lift()
end)
b:Toggle("Auto Upgrade",function(val)
getgenv().Buy = val
Byer()
end)
b:Toggle("Auto Sell",function(val)
getgenv().Sell = val
Sell()
end)
b:Toggle("Auto Attack",function(val)
getgenv().Attack = val
Attack()
end)
b:Toggle("Capture Territory",function(val)
getgenv().Territory = val
Territorial()
end)
b:Toggle("Auto Hatch",function(val)
getgenv().Egg = val
Open()
end)

b:Dropdown("Select Egg to Hatch",{"Creature Egg","Wildlife Egg","Xtended Egg","Emerald Egg","Heaven's Egg","Santa's Egg"},true,function(val)
EV = val
end)

local b = w:CreateFolder("Credits")
 
b:Button("Copy Discord Invite",function() setclipboard("discord.gg/8tRb8MQcW5") end)
 
b:Label("Made by X_LuaF#0705",{
    TextSize = 21;
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
})
 
local b = w:CreateFolder("LocalPlayer")
 
local S
local J
local H
local G
 
b:Box("Speed","number",function(val)
S = val
end)
b:Box("Jump","number",function(val)
J = val
end)
b:Box("Hip Height","number",function(val)
H = val
end)
b:Box("Gravity","number",function(val)
G = val
end)
 
b:Toggle("Speed",function(bool)
getgenv().Speed = bool
Speed(S)
end)
b:Toggle("Jump",function(bool)
getgenv().Jump = bool
Jump(J)
end)
b:Toggle("Hip Height",function(bool)
getgenv().Hip = bool
Hip(H)
end)
b:Toggle("Gravity",function(bool)
getgenv().Grav = bool
Grav(G)
end)
 
b:Slider("FOV (Default is 70)",{min = 0;max = 120;precise = true;},function(val)
    game.workspace.CurrentCamera.FieldOfView = val
end)
 
b:Button("Full LocalPlayer",function()
    loadstring(game:HttpGet("https://pastebin.com/raw/GphZf9Xe"))()
end)
 
 
function TPTo(PCFrame)
    local plr = game.Players.LocalPlayer;
           if plr.Character then
            plr.Character.HumanoidRootPart.CFrame = PCFrame
        end
    end
 
getgenv().Speed = false;
getgenv().Jump = false;
getgenv().Hip = false;
getgenv().Chat = false;
getgenv().Grav = false;
 
function Chat(Mes, Freq)
    spawn(function ()
        while getgenv().Chat == true do
local args = {[1] = Mes,[2] = "All"} game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(Freq)
        end
    end)
end
 
function Speed(Nume)
    spawn(function ()
        if getgenv().Speed == true then
            while getgenv().Speed == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Nume
                wait()
            end
        elseif getgenv().Speed == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end)
end
function Jump(Nume)
    spawn(function ()
        if getgenv().Jump == true then
            while getgenv().Jump == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Nume
                wait()
        end
    elseif getgenv().Jump == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    end)
end
function Hip(Nume)
    spawn(function ()
        if getgenv().Hip == true then
            while getgenv().Hip == true do
            game:GetService("Players").LocalPlayer.Character.Humanoid.HipHeight = Nume
            wait()
        end
    elseif getgenv().Hip == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.HipHeight = 0.1
        end
    end)
end
function Grav(Nume)
    spawn(function ()
        if getgenv().Grav == true then
            while getgenv().Grav == true do
                game:GetService("Workspace").Gravity = Nume
            wait()
        end
    elseif getgenv().Grav == false then
        game:GetService("Workspace").Gravity = 196.2
        end
    end)
end