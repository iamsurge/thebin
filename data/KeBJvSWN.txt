-- Rex. E#0001
-- MOW MY LAWN 2 Get it all done in one package script
-- An autofarm that is aiming to be able to finish most, if not, all ingame events automatically. 
-- Makes autofarming very easy and will have an anti-afk system.
local Players = game:GetService("Players")
local Player = Players.LocalPlayer
local Character = Player.Character
local RunService = game:GetService("RunService")
local RenderStepped = RunService.RenderStepped
local Grass = workspace:FindFirstChild("GRASS")
local HeckYeah = workspace["Heck Yeah"]
local CutTime = 0.5
local StudRange = 30
_G.AutoMow = true
_G.AutoTerritory = true
_G.AutoGrassItems = true
_G.AutoBossKill = true
_G.AutoMults = true

function SwordFunction(Plr)
    if (Plr.Character or workspace:FindFirstChild(Plr.Name)) then
        if Plr == Player then Character = Plr.Character end
        Chr = Plr.Character
        if Chr:FindFirstChildOfClass("Tool") and Chr:FindFirstChildOfClass("Tool"):FindFirstChild("Handle") and Chr:FindFirstChildOfClass("Tool"):FindFirstChild("SmashMouth") then
            local Sword = Chr:FindFirstChildOfClass("Tool")
            local Blade = Sword:FindFirstChild("SmashMouth")
            for i, Boss in pairs(workspace:GetDescendants()) do
                if Boss:IsA("Model") and Boss:FindFirstChildOfClass("Humanoid") and not Players:GetPlayerFromCharacter(Boss) then
                    local Target = Boss:FindFirstChild("Torso")
                    if Boss:FindFirstChild("Torso") then
                        firetouchinterest(Blade, Target, 0)
                    end
                    if Boss:FindFirstChild("Torso") then
                        firetouchinterest(Blade, Target, 1)
                    end
                end
            end
        end
    end
end

coroutine.wrap(function()
    while _G.AutoMow and wait(CutTime) do
        if Player.Character then
            Character = Player.Character
            if Character:FindFirstChildOfClass("Tool") then
                local Mower = Character:FindFirstChildOfClass("Tool")
                if Mower:FindFirstChild("SmashMouth") then
                    local MowPart = Mower:FindFirstChild("SmashMouth")
                    for i,GrassPiece in pairs(Grass:GetChildren()) do
                        if GrassPiece:FindFirstChild("Slapped") then
                            local Slapped = GrassPiece:FindFirstChild("Slapped")
                            if Slapped.Value == false then
                                if Character:FindFirstChild("HumanoidRootPart") then
                                    local Root = Character.HumanoidRootPart
                                    local Dist = (GrassPiece.Position - Root.Position).magnitude 
                                    if Dist <= StudRange then
                                        firetouchinterest(MowPart,GrassPiece,0)
                                        firetouchinterest(MowPart,GrassPiece,1)
                                    end
                                end
                            end
                        end
                    end
                end
            end
        end
    end
end)()

coroutine.wrap(function()
    while _G.AutoMults and RenderStepped:Wait() do
        for i,part in pairs(workspace:GetDescendants()) do
            if (part.Name == "ARingadingding" and part:IsA("UnionOperation")) or (part.Name == "Mult_Pop") or (part.Name == "Part" and (part.Parent.Name == "BallChase" or part.Parent == workspace and workspace:FindFirstChild("Rain"))) then
                if Player.Character then
                    Character = Player.Character
                    if Character:FindFirstChild("HumanoidRootPart") then
                        local Root = Character:FindFirstChild("HumanoidRootPart")
						if part.Name == "ARingadingding" and part:IsA("UnionOperation") then
							Root.CFrame = part.CFrame
						end
                        firetouchinterest(Root,part,0)
                        firetouchinterest(Root,part,1)
                    end
                end
            end
        end
    end
end)()