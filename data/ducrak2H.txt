1
#include <iostream>
using namespace std;
int main(){
    long long a, b, c;
    cin>>a>>b>>c;
    long long ans;
    ans=min(b+c-a, min(a+c-b, b+a-c));
    cout<<ans<<endl;
}
2
#include <iostream>
using namespace std;
int main(){
    int n, f;
    cin>>n>>f;
    long long ans;
    if (f==0){
        ans=(n-2)*(n-2)*(n-2);
    }
    if (f==1){
        ans=(n-2)*(n-2)*6;
    }
    if (f==2){
        ans=(n-2)*12;
    }
    if (f==3){
        ans=8;
    }
    cout<<ans<<endl;
}
3
#include <iostream>
#include <vector>
using namespace std;
int main(){
    int n, m, d;
    cin>>n>>m>>d;
    vector <int> x(d);
    vector <int> y(d);
    int a=n;
    int b=m;
    for (int i=0; i<d; i++){
        cin>>x[i]>>y[i];
        if (x[i]<a){
            a=x[i];
        }
        if (y[i]<b){
            b=y[i];
        }
    }
    long long ans=a*b;
    cout<<ans<<" "<<d<<endl;
}
4
#include <iostream>
using namespace std;
int main(){
    int n, m;
    cin>>n>>m;
    long long ans=0;
    for (int i=1; i<m; i++){
        ans+=(m-i)/(n-1);
    }
    cout<<ans<<endl;
}
5
#include <iostream>
#include <vector>
using namespace std;
void dfs(vector<vector<int>>& graph, vector <bool>& used, vector <int>& comp, int u, int c){
    used[u]=true;
    comp[u]=c;
    for (int v: graph[u]){
        if (!used[v]){
            dfs(graph, used, comp, v, c);
        }
    }
}
int main(){
    int n;
    cin>>n;
    vector <int>a(n+1);
    for (int i=1; i<n+1; i++){
        cin>>a[i];
    }
    vector <vector <int>> graph(n+2);
    for (int i=1; i<n+1; i++){
        if (i+a[i]>=0 && i+a[i]<=n+1){
            (graph[i+a[i]]).push_back(i);
            //cout<<i<<" "<<i+a[i]<<"\n";
        }
        if (i+a[i]<0){
            graph[0].push_back(i);
        }
        if (i+a[i]>n+1){
            graph[n+1].push_back(i);
        }
    }
    for (int i=0; i<n+2; i++){
        //cout<<i<<" ";
        for (auto x:graph[i]){
            //cout<<x<<" ";
        }
        //cout<<"\n";
    }
    vector <int> comp(n+2);
    vector <bool> used(n+2);
    comp[0]=1;
    comp[n+1]=2;
    dfs(graph, used, comp, 0, 1);
    dfs(graph, used, comp, n+1, 2);
    for (int i=1; i<n+1; i++){
        if (comp[i]==0){
            cout<<"U";
        }
        if (comp[i]==1){
            cout<<"L";
        }
        if (comp[i]==2){
            cout<<"R";
        }
    }
}

