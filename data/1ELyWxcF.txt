/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * <h2><center>&copy; Copyright (c) 2020 STMicroelectronics.
  * All rights reserved.</center></h2>
  *
  * This software component is licensed by ST under BSD 3-Clause license,
  * the "License"; You may not use this file except in compliance with the
  * License. You may obtain a copy of the License at:
  *                        opensource.org/licenses/BSD-3-Clause
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"
#include "i2c.h"
#include "tim.h"
#include "usart.h"
#include "gpio.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "buzzer.h"
#include "kb.h"
#include "pca9538.h"
#include <stdlib.h>
#include <ctype.h>
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
#define MAX_NOTES_CNT 2048
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/

/* USER CODE BEGIN PV */

/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int is_test = 0;
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
	uint32_t megalovania_melody[] = {
			N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D3, N_D3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_C3, N_C3, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_B2, N_B2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_AS2, N_AS2, N_D4, N_A3, 0, N_GS3, N_G3, N_F3, N_D3, N_F3, N_G3, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_D4, N_D4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_C4, N_C4, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_B3, N_B3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_AS3, N_AS3, N_D5, N_A4, 0, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, N_F4, N_F4, N_F4, N_F4, N_F4, N_D4, N_D4, N_D4, N_F4, N_F4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_G4, 0, N_F4, N_F4, N_F4, N_G4, N_GS4, N_A4, N_C5, N_A4, N_D5, N_D5, N_D5, N_A4, N_D5, N_C5, N_F4, N_F4, N_F4, N_F4, N_F4, N_D4, N_D4, N_D4, N_F4, N_F4, N_F4, N_F4, N_D4, N_F4, N_E4, N_D4, N_C4, 0, N_G4, N_E4, N_D4, N_D4, N_D4, N_D4, N_F3, N_G3, N_AS3, N_C4, N_D4, N_F4, N_C5, 0, N_F4, N_D4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_F4, N_F4, N_GS4, N_A4, N_C5, N_A4, N_GS4, N_G4, N_F4, N_D4, N_E4, N_F4, N_G4, N_A4, N_C5, N_CS5, N_GS4, N_GS4, N_G4, N_F4, N_G4, N_F3, N_G3, N_A3, N_F4, N_E4, N_D4, N_E4, N_F4, N_G4, N_E4, N_A4, N_A4, N_G4, N_F4, N_DS4, N_CS4, N_DS4, 0, N_F4, N_D4, N_F4, N_G4, N_GS4, N_G4, N_F4, N_D4, N_GS4, N_G4, N_F4, N_D4, N_F4, N_F4, N_F4, N_GS4, N_A4, N_C5, N_A4, N_GS4, N_G4, N_F4, N_D4, N_E4, N_F4, N_G4, N_A4, N_C5, N_CS5, N_GS4, N_GS4, N_G4, N_F4, N_G4, N_F3, N_G3, N_A3, N_F4, N_E4, N_D4, N_E4, N_F4, N_G4, N_E4, N_A4, N_A4, N_G4, N_F4, N_DS4, N_CS4, N_DS4,
	};
	uint32_t megalovania_delays[] = {
			16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 16, 16, 8, 6, 32, 8, 8, 8, 16, 16, 16, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 16, 16, 16, 16, 16, 8, 8, 16, 8, 8, 8, 8, 8, 8, 8, 8, 16, 16, 16, 2, 8, 16, 8, 8, 8, 8, 4, 16, 8, 16, 8, 8, 8, 8, 8, 16, 8, 16, 8, 8, 8, 8, 8, 8, 8, 16, 8, 15, 8, 8, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 2, 3, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 8, 2, 16, 8, 16, 8, 16, 16, 16, 16, 16, 16, 8, 8, 8, 8,  8, 8, 16, 16, 16, 2, 8, 8, 8, 8, 4, 4, 4, 4, 4, 4, 2, 8, 8, 8, 8, 2, 1
	};
	uint32_t zelda_melody[] = {
			N_AS4, 0, 0, N_AS4, N_AS4, N_AS4, N_AS4, N_AS4, 0, N_GS4, N_AS4, 0, 0, N_AS4, N_AS4, N_AS4, N_AS4, N_AS4, 0, N_GS4, N_AS4, 0, 0, N_AS4, N_AS4, N_AS4, N_AS4, N_AS4, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_AS5, N_AS5, N_AS5, N_GS5, N_FS5, N_GS5, 0, N_FS5, N_F5, N_F5, N_DS5, N_DS5, N_F5, N_FS5, N_F5, N_DS5, N_CS5, N_CS5, N_DS5, N_F5, N_DS5, N_CS5, N_C5, N_C5, N_D5, N_E5, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_CS6, N_C6, N_A5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_D5, N_DS5, 0, N_FS5, N_F5, N_CS5, 0, N_AS4, N_C5, N_C5, N_D5, N_E5, 0, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_AS5, N_AS5, N_AS5, N_GS5, N_FS5, N_GS5, 0, N_FS5, N_F5, N_F5, N_DS5, N_DS5, N_F5, N_FS5, N_F5, N_DS5, N_CS5, N_CS5, N_DS5, N_F5, N_DS5, N_CS5, N_C5, N_C5, N_D5, N_E5, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_AS4, N_F3, N_F3, 0, N_AS4, N_AS4, N_C5, N_D5, N_DS5, N_F5, 0, N_F5, N_F5, N_FS5, N_GS5, N_AS5, 0, N_CS6, N_C6, N_A5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_F5, N_FS5, 0, N_AS5, N_A5, N_F5, 0, N_D5, N_DS5, 0, N_FS5, N_F5, N_CS5, 0, N_AS4, N_C5, N_C5, N_D5, N_E5, 0, N_G5, N_F5, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3, N_F3
	};
	uint32_t zelda_delays[] = {
			2, 8, 8, 8, 8, 8, 8, 6, 16, 16, 4, 8, 8, 8, 8, 8, 8, 6, 16, 16, 4, 8, 8, 8, 8, 8, 8, 8, 16, 16, 8, 16, 16, 8, 16, 16, 8, 8, 4, 4, 6, 16, 16, 16, 16, 16, 16, 2, 8, 8, 8 ,8 ,8, 2, 8, 8, 8 ,8 ,8, 8, 6, 16, 16, 2, 4, 8, 16, 16, 2, 8, 8, 8, 16, 16, 2, 8, 8, 8, 16, 16, 2, 4, 8, 16, 16, 8, 16, 16, 8, 16, 16, 8, 8, 4, 4, 6, 16, 16, 16, 16, 16, 16, 2, 8, 8, 8 ,8 ,8, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 16, 16, 4, 4, 4, 8, 16, 16, 8, 16, 16, 8, 16, 16, 8, 8, 4, 4, 6, 16, 16, 16, 16, 16, 16, 2, 8, 8, 8 ,8 ,8, 2, 8, 8, 8 ,8 ,8, 8, 6, 16, 16, 2, 4, 8, 16, 16, 2, 8, 8, 8, 16, 16, 2, 8, 8, 8, 16, 16, 2, 4, 8, 16, 16, 8, 16, 16, 8, 16, 16, 8, 8, 4, 4, 6, 16, 16, 16, 16, 16, 16, 2, 8, 8, 8 ,8 ,8, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 2, 4, 4, 4, 4, 4, 4, 8, 16, 16, 4, 4, 4, 8, 16, 16, 8, 16, 16, 8, 16, 16, 8, 8
	};
	uint32_t was_melody[] = {
			N_D4, N_D4, N_C4, N_B3, N_C4, N_A3, N_G3, N_A3, N_D4, N_D4, N_C4, N_B3, N_D4, N_D4, N_C4, N_B3, N_C4, N_A3, N_A3, N_B3, N_G3, N_A3, 0,
			N_A3, N_C4, N_D4, N_E4, N_E4, N_F4, N_D4, N_E4, 0,
			N_D4, N_D4, N_C4, N_B3, N_C4, N_A3, N_G3, N_A3, N_D4, N_D4, N_C4, N_B3, N_D4, N_D4, N_C4, N_B3, N_C4, N_A3, N_A3, N_B3, N_G3, N_A3, 0
	};
	uint32_t was_delays[] = {
			8, 8, 16, 16, 4, 6, 12 , 6, 8, 8, 8, 8, 8, 8, 16, 16, 4, 8, 8, 8, 8, 8, 4,
			8, 8, 8, 4, 4, 8, 8, 8, 4,
			8, 8, 16, 16, 4, 6, 12 , 6, 8, 8, 8, 8, 8, 8, 16, 16, 4, 8, 8, 8, 8, 8, 4
	};

	uint32_t pirate_melody[] = {
			N_E4, N_G4, N_A4, N_A4, 0, N_A4, N_B4, N_C5, N_C5, 0, N_C5, N_D5, N_B4, N_B4, 0, N_A4, N_G4, N_A4, 0,
			N_E4, N_G4, N_A4, N_A4, 0, N_A4, N_B4, N_C5, N_C5, 0, N_C5, N_D5, N_B4, N_B4, 0, N_A4, N_G4, N_A4, 0,
	};

	uint32_t pirate_delays[]={
			8, 8, 16, 8, 8, 8, 8, 16, 8, 8, 8, 8, 16, 8, 8, 8, 8, 375, 8,
			8, 8, 16, 8, 8, 8, 8, 16, 8, 8, 8, 8, 16, 8, 8, 8, 8, 375, 8,
};
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  MX_I2C1_Init();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART6_UART_Init();
  MX_TIM2_Init();
  MX_TIM6_Init();
  MX_I2C1_Init();
  /* USER CODE BEGIN 2 */
  Buzzer_Init();
  int calc_digit(int,int);
  char read_number();

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t input[0];
  uint32_t input_melody[MAX_NOTES_CNT] = {0};
  uint32_t input_delay[MAX_NOTES_CNT] = {0};
  uint16_t notes_count = 0;
  uint8_t defaultChar = '~';
  while (1)
  {
	  if (!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)) {
		  is_test = !is_test;
		  HAL_Delay(300);
	  }
	  TEST:
	  if (is_test) {
		  UART_Transmit("In test\n\r");
		  while (is_test) {
			  read_number();
			  if (!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)) {
				  is_test = !is_test;
				  HAL_Delay(300);
				  UART_Transmit("Test end\n\r");
			  }
		  }
	  }
	  input[0] = read_number();
	  if (input[0] == 'x') goto TEST;
	  if (input[0] != defaultChar) {
	  		switch (input[0])
	  		{
	  		  case '1':
	  			  UART_Transmit("melody 1 plays\n\r");
	  			  Buzzer_Play(was_melody, was_delays, sizeof(was_melody) / sizeof(uint32_t));
	  			  break;
	  		  case '2':
	  			  UART_Transmit("melody 2 plays\n\r");
	  			  Buzzer_Play(pirate_melody, pirate_delays, sizeof(pirate_melody) / sizeof(uint32_t));
	  			  break;
	  		  case '3':
	  			  UART_Transmit("melody 3 plays\n\r");
	  			  Buzzer_Play(zelda_melody, zelda_delays, sizeof(zelda_melody) / sizeof(uint32_t));
	  			  break;
	  		  case '4':
	  			  UART_Transmit("melody 4 plays\n\r");
	  			  Buzzer_Play(megalovania_melody, megalovania_delays, sizeof(megalovania_melody) / sizeof(uint32_t));
	  			  break;
	  		  case '5':
	  			  if (input_melody == NULL || input_delay == NULL || notes_count == 0) {
	  				  UART_Transmit("user melody is empty\n\r");
	  				  break;
	  			  }
	  			  UART_Transmit("user melody plays\n\r");
	  			  Buzzer_Play(input_melody, input_delay, notes_count);
	  			  break;
	  		  case '\r':
	  			START_SETTINGS:
	  			UART_Transmit("enter notes count\n\r");
	  			notes_count = 0;
	  			while(1) {
	  				input[0] = read_number();
	  				if (input[0] == '\r') {
	  					break;
	  				} else if (isdigit(input[0])) {
	  					notes_count = 10*notes_count + atoi((const char *)input);
	  				} else {
	  					UART_Transmit("\n\rinput error\n\r");
	  					goto START_SETTINGS;
	  				}
	  			}
	  			UART_Transmit("\n\rtype user notes\n\r");
	  			uint32_t current_note = 0;
	  			size_t i = 0;
	  			while(1) {
	  				input[0] = read_number();
	  				if (input[0] == '\r') {
		  				input_melody[i] = current_note;
	  					break;
	  				} else if (input[0] == ','){
		  				input_melody[i] = current_note;
	  					i++;
	  					current_note = 0;
	  				} else if (isdigit(input[0])) {
	  					current_note = 10*current_note + atoi((const char *)input);
	  				} else {
	  					UART_Transmit("\n\rinput error\n\r");
	  					goto START_SETTINGS;
	  				}
	  			}

	  			UART_Transmit("\n\rtype user delays\n\r");
	  			uint32_t current_delay = 0;
	  			i = 0;
	  			while(1) {
	  				input[0] = read_number();
	  				if (input[0] == '\r') {
		  				input_delay[i] = current_delay;
	  					break;
	  				} else if (input[0] == ',') {
		  				input_delay[i] = current_delay;
	  					i++;
	  					current_delay = 0;
	  				} else if (isdigit(input[0])) {
	  					current_delay = 10*current_delay + atoi((const char *)input);
	  				} else {
	  					UART_Transmit("\n\rinput error\n\r");
	  					goto START_SETTINGS;
	  				}
	  			}
	  			UART_Transmit("\n\ruser melody recorded\n\r");
	  			break;
	  		  default: {
				UART_Transmit("\n\rinput error\n\r");
	  			break;
	  		  }
	  		}
	  }
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
  {
    Error_Handler();
  }
}

/* USER CODE BEGIN 4 */
uint32_t last_pressing_time = 0;

char read_number() {
  int key;
  int oldKey;
  int Row[4] = {ROW4, ROW3, ROW2, ROW1};
  while (1) {
	if (!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_15)) {
	  	is_test = !is_test;
	  	HAL_Delay(300);
	  	return 'x';
	}
    for (int i = 0; i < 4; ++i) {
      oldKey = key;
      key = Check_Row(Row[i]);
      if (key == 0 || key == oldKey) continue;

      const uint32_t t = HAL_GetTick();
      if (t - last_pressing_time < 200) continue;
      last_pressing_time = t;
      if (i == 0) {
        switch (key) {
          case 0x04:
            // start
            UART_Transmit( (uint8_t*) ", pressed\n\r" );
            return ',';
            break;
          case 0x02:
            // 0
//            if (number/100000000 != 0) continue;
//            number *= 10;
            UART_Transmit( (uint8_t*)"0 pressed\n\r" );
            break;
          case 0x01:
            // reset
//            number = 0;
            UART_Transmit( (uint8_t*)"enter pressed\n\r" );
            return '\r';
            break;
        }
      } else {
    	char huy[1];
    	int digit = 0;
    	digit =	calc_digit(i, key);
    	itoa(digit, huy, 10);
    	UART_Transmit((uint8_t*) huy);
    	UART_Transmit(" pressed\n\r");
        return huy[0];
      }
      while (1) {
        if (Check_Row(Row[i]) == 0) break;
      }
    }
    HAL_Delay(50);
  }
}


int calc_digit(int row, int binary_key) {
  int key;
  if (binary_key == 0x01) key = 3;
  if (binary_key == 0x02) key = 2;
  if (binary_key == 0x04) key = 1;
  return 3 * (3 - row) + key;
}
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     tex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
