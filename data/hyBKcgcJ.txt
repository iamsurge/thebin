#include <iostream>
#include <vector>
#include <fstream>
#include <string>
 
using namespace std;
vector<vector<int>>graf;
vector<int> wierzcholki_z_nastepnikami;
vector<int>edge;
vector<int>top;


void wypisz2(vector<int>graf){
	for( int i = 0; i<graf.size(); i++ ){
    	cout<<graf[i]<<" ";
	}
	cout << endl;
} 

void separator(string linia){
    string slesz=" "; //spacja rozdziela w pliku poszczególne wierzchołki
    string wierzcholek;
    int a = 0; //czytam jako string, a chcę zapisać jako int, więc zapisuję do zmiennej a
    int numer_lini = 0;
    wierzcholki_z_nastepnikami.clear();
    if ((linia.size()==2)&&(linia.find(slesz)==string::npos)){ //tylko dla wierzchołków dwucyfrowych - tutaj korzystam z założenia, że wierzchołków będzie max 20 (czyli nie będzie trzycyfrowych)
		wierzcholek=linia;
    	a = atoi(wierzcholek.c_str()); //zamień string wierzchołek na int a
		wierzcholki_z_nastepnikami.push_back(a); //dodaj a do wektora intów
		linia.erase(0, 2); //usuwam dwucyfrowy
	}
	else { //to samo dla jednoelementowych
    	if (linia.size()==1){
    		wierzcholek=linia;
    		a = atoi(wierzcholek.c_str());
			wierzcholki_z_nastepnikami.push_back(a);
			linia.erase(0, 1);	
		}	

		else{
    		while (numer_lini=linia.find(slesz) != string::npos){
    			numer_lini=linia.find(slesz);
        		wierzcholek=linia.substr(0, numer_lini);
        		if (!wierzcholek.empty()){
        			a = atoi(wierzcholek.c_str());
        			wierzcholki_z_nastepnikami.push_back(a);
        			linia.erase(0, numer_lini+slesz.length());
    			}
    		}	
    	
    		if (!wierzcholek.empty()){
    			a = atoi(linia.c_str());
    			wierzcholki_z_nastepnikami.push_back(a);
			}
		}
	}
}
 
void odczyt_z_pliku(string akwb2){
    fstream plik;
    string linia;
    string wierzcholek;
    graf.clear();
    plik.open(akwb2);
    if(plik.good()) {
        while(getline(plik,linia)){
            separator(linia);
			graf.push_back(wierzcholki_z_nastepnikami);
        }
    }
	else if(plik.fail()){
        cout<<"ERROR 1 \n Błąd otwarcia pliku :("<<endl;
    }
}

// 2 popdunkt zadania -> sprawdzamy czy jest sprzezony
 
// 1 warunek -> czy graf jest multigrafem

bool multigraf(vector<vector<int>>graf){

    for(int a=0; a<graf.size(); a++){		//krawedz wielokrotna
    	if (graf[a].size()>1){
			for (int b = 0; b<(graf[a].size())-1;b++){
				for (int c=b+1;c<graf[a].size();c++){
					if (graf[a][b]==graf[a][c]){
						cout<<"krawedz wielokrotna"<<endl;
				 		return true;
					}
				}
    		}	
		}
	}
    return false;
}

// 2 warunek -> porównujemy następniki dla dowolnej pary wierzchołków

bool nastepniki_niepokrywaja_sie(vector<vector<int>>graf){
    for(int a=0; a<graf.size(); a++){
    	if (graf[a].size()>0){
        	for (int b = 0; b < graf[a].size(); b++) {
        		int w = graf[a][b];
        		for (int i = a + 1; i< graf.size() ; i++){
        			for (int j = 0; j< graf[i].size() ; j++){
        				if (w==graf[i][j]){
        					if (graf[a]!=graf[i]){
        						cout<<"wlasnosc 1-grafu nie jest spełniona"<<endl;
        						return true;
							}
						}
					}
				}
			}
        }
    }
    return false;
}
 
bool graf_sprzezony(vector<vector<int>>graf) { //sprawdzenie obu warunków
    if(multigraf(graf)== true){
        return false;
    }
    if(nastepniki_niepokrywaja_sie(graf)){
        return false;
    }    
    return true;
}
//wypisanie vector<vector<xxx>>graf, gdzie xxx to int lub string
void wypisz(vector<vector<int>>graf){ 
	for( auto const& string_vec : graf ){
    	for( auto const& s : string_vec ){
    		cout << s << " ";
		}
		cout << endl;
	}
	cout<<endl;
} 

// 3 podpunkt zadania ->sprawdzenie czy graf jest liniowy -> zmiana kolejności -> (tworzę graf H (o ile można) i sprawdzam, czy jest 1-grafem. Jeśli tak, to wyjściowy graf jest liniowy (tak zakładam))

// 4 -> utwórz graf H

void vector_wierzcholkow(vector<vector<int>>graf){ //tworzę wektor, którego emelentami będa kolejne int dla wszystkich krawędzi (takie wstępne H, jako zbiór łuków, tylko nie robię tutaj łuków)
	top.clear();
	for (int i = 0; i < 2*graf.size(); i++){
		top.push_back(i);
	}
}

void vector_krawedzi(vector<vector<int>>graf){ //do edge wpisuję krawędzie - nie jako pary, tylko kolejne wierzchołki, czyli pierwsza pozycja tworzy krawędź z drugą, trzecia z czwartą itd
	edge.clear();
	int q = 0;
	for (int i=0; i <graf.size();i++){
		if  (!(graf[i].empty())){
		for (int j = 0; j<graf[i].size();j++){
					edge.push_back(i);
    			edge.push_back(graf[i][j]);	
		}
	}
	else{		
	}
	}
}

void oryginalny(vector<int>t,vector<int>e){
	for (int a = 0; a < e.size(); a = a + 2) {
		 int x = t[2*e[a+1]];
		 int y = t[2*e[a]+1];
		 	for (int z = 0; z < e.size()+1;z++){
		 		if (t[z] == x){
		 			t[z]= y;
				} 
			}
	}
	top = t;
	edge = e;
}


void przeindeksowanie(vector<int>topp){
	int o = 0;
	int z = 0;
	for (int i = 0; i < topp.size(); i++){ 
		topp[i] = (topp[i] * (-1)) - 1; //zamieniam na ujemne (0 również - przez odjęcie 1) 
	}
	wypisz2(topp);
	for(int i = 0; i < topp.size(); i++){
		if (topp[i] < 0){
			z = topp[i];
			topp[i] = o;
			o++;
		}
		for (int j = 0; j < topp.size(); j++){ 
			if (topp[j] == z){
				topp[j] = o - 1;
			}
		}
	}
	top = topp;
}

void zapisz_do_pliku(vector<int>vec, string file){

	string linia;
    fstream plik;
    plik.open(file, ios::out);
    int a = 0;
    int max = 0;
	    for(int i = 0; i < vec.size(); i++){
	    	if (vec[i]>max){
	    		max = vec[i];
			}
		}	
	    for(int i = 0; i < max + 1; i++){
	    	a = 0;
			for (int j = 0; j < vec.size(); j=j+2){
				if (vec[j]==i){
					if (a==1){
						plik<<" ";
					}
					plik << vec[j+1];
					a = 1;
				}
			}
			plik << endl;	
		}	
        plik.close();
}
 
 
int main() {
	
	string filename;
    cout << "InputFile: "<< endl; //poproś użytkownika o podanie nazwy pliku (plik musi się znajdowac w tym samym katalogu)
    cin >> filename;			// użytkownik podaje nazwę, a algorytm zapisuje ją jako string
  	odczyt_z_pliku(filename);	// algorytm czyta z pliku
  	string extension = filename.substr(filename.find_last_of(".") + 1); //pobierz rozszerzenie ze stringa filename i zapisz do stringa extension
  	string outputfileName = "outputfiletest." + extension;
  	//cout<<"GRAF PIERWOTNY "<<endl; 
	//wypisz(graf); //wypisuję wczytany graf
	if (graf_sprzezony(graf)){
		cout << "Podany graf jest grafem sprzezonym." << endl;
		vector_wierzcholkow(graf);
		vector_krawedzi(graf);
    	oryginalny(top,edge);
    	cout<<"wypisz edge ";
    	wypisz2(edge);
    	cout<<"wypisz top przed przeindeksowaniem ";
    	wypisz2(top);
		przeindeksowanie(top);
		cout<<"wypisz przeindeksowany top ";
    	wypisz2(top);
		zapisz_do_pliku(top, outputfileName);
		cout << "Graf oryginalny został zapisany do pliku: " << outputfileName << endl;
		odczyt_z_pliku(outputfileName); //wczytuję graf H i sprawdzam, czy jest jednografem, jeśli tak - graf wejściowy G jest liniowy

		if (!multigraf(graf)){
			cout << "Podany graf jest grafem liniowym." << endl;
		}
		else {
			cout << "Podany graf NIE jest grafem liniowym." << endl;
		}
		
	}
	else{
		cout << "Podany graf NIE jest grafem sprzezonym." << endl;
	}

    return 0;
}