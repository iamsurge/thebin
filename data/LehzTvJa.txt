    public boolean isValid(String s) {
        Stack<Character> symbols = new Stack<>();
 
        if (s.length() % 2 != 0) {
            return false;
        }
        for (char symb : s.toCharArray()) {
            if (symb == '(' || symb == '[' || symb == '{') {
                symbols.push(symb);
            } else {
                if (symbols.isEmpty()) return false;
 
                if (symb == ')' && symbols.peek() == '(') {
                    symbols.pop();
                } else if (symb == ']' && symbols.peek() == '[') {
                    symbols.pop();
                } else if (symb == '}' && symbols.peek() == '{') {
                    symbols.pop();
                } else {
                    return false;
                }
            }
        }
        return symbols.isEmpty();
 
    }


    public int evalRPN(String[] tokens) {
        Stack<Integer> itemSt = new Stack<>();
        int first;
        int second;
        for (String item : tokens) {
            if ("+".equals(item)) {
                itemSt.push(itemSt.pop() + itemSt.pop());
            } else if ("-".equals(item)) {
                second = itemSt.pop();
                first = itemSt.pop();
                itemSt.push(first - second);
            } else if ("*".equals(item)) {
                itemSt.push(itemSt.pop() * itemSt.pop());
            } else if ("/".equals(item)) {
                second = itemSt.pop();
                first = itemSt.pop();
                itemSt.push(first / second);
            } else {
                itemSt.push(Integer.parseInt(item));
            }
        }
        return itemSt.pop();
    }