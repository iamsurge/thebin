//Make CSP great again
//Vengeance
#include <bits/stdc++.h>
#define TASK "TESTCODE"
using namespace std;
const int N = 1e5;
int lab[N + 1];
vector<int> adj[N + 1];
int FindSet(int u)
{
    return lab[u] < 0 ? u : lab[u] = FindSet(lab[u]);
}
bool unite(int u, int v)
{
    u = FindSet(u);
    v = FindSet(v);
    if (u == v)
    {
        return false;
    }
    if (lab[u] > lab[v])
    {
        swap(u, v);
    }
    lab[u] += lab[v];
    lab[v] = u;
    return true;
}
int n, x[N + 1], y[N + 1], tx[N + 1], ty[N + 1];
int dis(int i, int j)
{
    return abs(x[i] - x[j]) + abs(y[i] - y[j]);
}
int match[N + 1];
int id[N + 1], all[N + 1], tempa[N + 1], tempb[N + 1];
void DnC(int l, int r)
{
    if (l >= r)
    {
        return ;
    }
    int sz = r - l + 1;
    copy(all + l, all + r + 1, id);
    nth_element(id, id + sz/2, id + sz, [&](const int &a, const int &b)
                {
                    return y[a] < y[b];
                });
    int mid = id[sz/2];
    int cnt = 0;
    for (int k = l; k <= r; ++ k)
    {
        int i = all[k];
        if (ty[i] < ty[mid])
        {
            ++cnt;
        }
    }
    int tmp = 0;
    int ml = 0, mr = 0;
    for (int k = l; k <= r; ++ k)
    {
        int i = all[k];
        if (ty[i] < ty[mid])
        {
            tempa[++ml] = i;
        }
        if (ty[i] > ty[mid])
        {
            tempb[++mr] = i;
        }
        if (ty[i] == ty[mid])
        {
            if (cnt + tmp + 1 <= sz/2)
            {
                tempa[++ml] = i;
                ++tmp;
            }
            else
            {
                tempb[++mr] = i;
            }
        }
    }
    assert(abs(ml - mr) <= 1);
    int best = -1;
    int j = 1;
    for (int k = 1; k <= ml; ++ k)
    {
        int i = tempa[k];
        while(j <= mr && tx[i] + ty[i] > tx[tempb[j]] + ty[tempb[j]])
        {
            if (best == -1 || (tx[tempb[j]] - ty[tempb[j]] > tx[best] - ty[best]))
            {
                best = tempb[j];

            }
            ++j;
        }
        if (best == -1)
        {
            continue;
        }
        if (match[i] == -1 || dis(i, match[i]) > dis(i, best))
        {
            match[i] = best;
        }
    }
    int t = l;
    for (int i = 1; i <= ml; ++ i)
    {
        all[t++] = tempa[i];
    }
    for (int i = 1; i <= mr; ++ i)
    {
        all[t++] = tempb[i];
    }
    DnC(l, l + ml - 1);
    DnC(l + ml, r);
}
void read()
{
    cin >> n;
    for (int i = 1; i <= n; ++ i)
    {
        cin >> x[i] >> y[i];
        lab[i] = -1;
    }
}
void solve()
{
    vector<array<int, 2> > e;
    iota(all + 1, all + n + 1, 1);
    for (int k = 0; k < 2; ++ k)
    {
        for (int i = -1; i <= 1; i += 2)
        {
            for (int j = -1; j <= 1; j += 2)
            {
                for (int l = 1; l <= n; ++ l)
                {
                    tx[l] = x[l] * i;
                    ty[l] = y[l] * j;
                    match[l] = -1;
                }
                sort(all + 1, all + n + 1, [&](const int &a, const int &b)
                     {
                        return tx[a] + ty[a] < tx[b] + ty[b];
                     });
                DnC(1, n);
                for (int l = 1; l <= n; ++ l)
                {
                    if (match[l] != -1)
                    {
                        e.push_back({l, match[l]});
                    }
                }
            }
        }
        swap(x, y);
    }
    sort(e.begin(), e.end(), [&](const array<int, 2> &a, const array<int, 2> & b)
         {
             return dis(a[0], a[1]) < dis(b[0], b[1]);
         });
    for (auto p : e)
    {
        if (unite(p[0], p[1]))
        {
            adj[p[0]].push_back(p[1]);
            adj[p[1]].push_back(p[0]);
        }
    }
}
int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(nullptr);
    if (fopen(TASK".INP", "r"))
    {
        freopen(TASK".INP", "r", stdin);
        //freopen(TASK".OUT", "w", stdout);
    }
    int t = 1;
    bool typetest = false;
    if (typetest)
    {
        cin >> t;
    }
    for (int __ = 1; __ <= t; ++ __)
    {
        //cout << "Case " << __ << ": ";
        read();
        solve();
    }
}
