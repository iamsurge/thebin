海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥左拥义姐，右拥义妹@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\"js:\\nvar chapter = pdfa(getResCode(), \\\"#chapter-list-1&&li\\\");\\nvar delete_chapter = ['下载App','🔒'];\\ndelete_chapter.forEach(function (data) {\\nvar identification = chapter.findIndex(dataid => dataid.indexOf(data) != -1);\\nif(identification != -1){\\nchapter.splice(identification, 1)\\n};\\n});\\nvar jszj = \\\"最新：\\\"+pdfh(chapter.pop(), 'a&&Text');\\n\\nsetResult(jszj)\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"漫画详情\",\"path\":\"details\",\"rule\":\"if (getParam('Name') != \\\"undefined\\\") {\\n    setPageTitle(getParam('Name'))\\n}\\nvar d = [];\\nvar code = getResCode();\\nvar Icon_prefix = 'https://lanmeiguojiang.com/tubiao/q/';\\nvar Label_set_icon = ['107.png', '18.png', '32.png'];\\n\\nvar 头部 = pdfa(code, \\\"body&&.Introduct_Sub\\\")[0];\\nd.push({\\n    title: \\\"‘‘’’<b>\\\" + pdfh(code, '#comicName&&Text') + '</b> <small> \\\\n作者：<font color=\\\"#FA7298\\\">' + pdfh(头部, '.sub_r&&.txtItme,0&&Text') + '</font> \\\\n类型：' + pdfh(头部, '.sub_r&&.txtItme,1&&Text') + \\\"</small>\\\",\\n    desc: '‘‘’’<font color=\\\"#f8ecc9\\\">分类：' + pdfh(头部, '.sub_r&&.txtItme,2&&Text') + '\\\\n时间：' + pdfh(头部, '.sub_r&&.txtItme,3&&Text') + \\\"</font>\\\",\\n    pic_url: pd(头部, 'img&&src'),\\n    url: MY_URL + \\\"#noHistory#\\\",\\n    col_type: 'movie_1_vertical_pic_blur'\\n});\\n\\n//简介\\nvar 简介 = pdfh(code, \\\"#simple-des&&Text\\\").replace(\\\"介绍:\\\", \\\"\\\").replace(\\\"漫画简介：\\\", \\\"\\\");\\nvar 简介全 = pdfh(code, \\\"#full-des&&Text\\\").replace(\\\"介绍:\\\", \\\"\\\").replace(\\\"漫画简介：\\\", \\\"\\\").replace(/\\\"/g, '°');\\n简介全 = 简介全.length < 1 ? 简介 : 简介全\\nvar jj = getVar(MY_URL + \\\"简介收\\\", \\\"已收起\\\");\\nvar mztext = \\\"&nbsp;&nbsp;&nbsp;&nbsp;<small>简介</small><br>\\\"\\n\\n\\nvar bttitle = '<font color=\\\"#098AC1\\\">漫画简介  </font><small><small><font color=\\\"#f47983\\\">简介收></font></small></small>'\\n\\n\\nvar jjurl = $(\\\"#noLoading#\\\").lazyRule((简介全, 收, 收内容, 当前URL) => {\\n    var jsbl = 当前URL + \\\"简介收\\\";\\n    var jj = getVar(当前URL + \\\"简介收\\\", \\\"已收起\\\");\\n    jj = jj == \\\"已收起\\\" ? \\\"展开\\\" : \\\"已收起\\\";\\n    putVar(jsbl, jj)\\n    updateItem({\\n        extra: {\\n            id: 当前URL + \\\"_bt\\\"\\n        },\\n        title: 收.replace(\\\"简介收\\\", jj)\\n    })\\n\\n    updateItem({\\n        extra: {\\n            id: 当前URL + \\\"_mz\\\"\\n        },\\n        title: jj == \\\"已收起\\\" ? 收内容.replace(\\\"简介\\\", 简介全).substr(0, 75) + \\\" ...<br>\\\" : 收内容.replace(\\\"简介\\\", 简介全)\\n    })\\n    return \\\"hiker://empty\\\"\\n}, 简介全, bttitle, mztext, MY_URL)\\n\\nd.push({\\n    title: bttitle.replace(\\\"简介收\\\", jj),\\n    url: jjurl,\\n    col_type: \\\"avatar\\\",\\n    pic_url: Icon_prefix + Label_set_icon[0],\\n    extra: {\\n        id: MY_URL + \\\"_bt\\\"\\n    }\\n});\\n\\n\\nd.push({\\n    title: jj == \\\"已收起\\\" ? mztext.replace(\\\"简介\\\", 简介全).substr(0, 75) + \\\" ...<br>\\\" : mztext.replace(\\\"简介\\\", 简介全),\\n    col_type: \\\"rich_text\\\",\\n    extra: {\\n        id: MY_URL + \\\"_mz\\\"\\n    }\\n});\\n\\n\\nvar urljs = `@lazyRule=.js:var url = fetch(input.replace(\\\"m\\\",\\\"www\\\"),{});eval(pdfh(url, \\\"body&&script&&Html\\\"));if(chapterImages.length >=  1){\\\"pics://\\\"+chapterImages.join(\\\"&&\\\")}else{url = pdfh(request(input), \\\".image-content&&p&&Text\\\");var picss =[];if(url != \\\"\\\"){url = url.split(\\\"/\\\")[1] - 0;var fwsz = [];for (var i=1;i<=url;i++){picss.push(pd(request(input.replace(\\\".html\\\", \\\"-\\\"+i+\\\".html\\\")), \\\"#image&&src\\\"));}}\\\"pics://\\\"+picss.join(\\\"&&\\\")};`;\\n\\n\\nvar 章节 = pdfa(code, \\\"#chapter-list-1&&li\\\");\\nvar 排序 = getVar(MY_URL + \\\"章节排序\\\", \\\"正序\\\");\\nvar 提示 = 排序 == '倒序' ? '正序' : '倒序';\\nvar 排序名 = '<b>章节列表</b>  <small><small><font color=#f9906f>排序 ></font></small></small>'\\n\\n\\nvar 排序url = $(\\\"#noLoading#\\\").lazyRule((排序名, tjurl, lazy, 章节) => {\\n    var 排序 = getVar(tjurl + \\\"章节排序\\\", \\\"正序\\\");\\n    var 提示 = 排序 == '倒序' ? '正序' : '倒序';\\n    updateItem({\\n        extra: {\\n            id: tjurl + \\\"_排序\\\"\\n        },\\n        title: 排序名.replace('排序', 提示)\\n    })\\n\\n\\n\\n    \\n    if (提示 == '倒序') {\\n        章节.reverse()\\n    }\\n\\nvar 去除章节 = ['下载App', '🔒'];\\n去除章节.forEach(function(data) {\\n    var 标识id = 章节.findIndex(返回 => 返回.indexOf(data) != -1);\\n    if (标识id != -1) {\\n        章节.splice(标识id, 1)\\n    };\\n});\\n\\n    章节.forEach(function(data, ssid) {\\n        updateItem({\\n            title: pdfh(data, 'Text'),\\n            url: pd(data, 'a&&href') + lazy,\\n            extra: {\\n                id: tjurl + \\\"_选集\\\" + ssid\\n            }\\n        });\\n    });\\n\\n\\n    putVar(tjurl + \\\"章节排序\\\", 提示)\\n    return \\\"hiker://empty\\\"\\n}, 排序名, MY_URL, urljs, 章节)\\n\\n\\nd.push({\\n    title: \\\"<b>章节列表</b>  <small><small><font color='#f9906f'>\\\" + 排序 + \\\" ></font></small></small>\\\",\\n    pic_url: Icon_prefix + Label_set_icon[1],\\n    url: 排序url,\\n    col_type: \\\"avatar\\\",\\nextra: {\\n        id: MY_URL + \\\"_排序\\\"\\n    }\\n});\\n\\nif (排序 == '倒序') {\\n    章节.reverse()\\n}\\n\\nvar 去除章节 = ['下载App', '🔒'];\\n去除章节.forEach(function(data) {\\n    var 标识id = 章节.findIndex(返回 => 返回.indexOf(data) != -1);\\n    if (标识id != -1) {\\n        章节.splice(标识id, 1)\\n    };\\n});\\n\\n章节.forEach(function(data,id) {\\n    d.push({\\n        title: pdfh(data, 'Text'),\\n        url: pd(data, 'a&&href') + urljs,\\n        col_type: \\\"text_2\\\",\\nextra: {\\n            id: MY_URL + \\\"_选集\\\" + id\\n        }\\n    });\\n});\\n\\n\\nd.push({\\n    title: '<b>热门推荐</b>',\\n    pic_url: Icon_prefix + Label_set_icon[2],\\n    col_type: \\\"avatar\\\"\\n});\\n\\npdfa(code, \\\".imgBox&&ul&&li\\\").forEach(function(zdata) {\\n    d.push({\\n        title: pdfh(zdata, '.txtA&&Text'),\\n        url: pd(zdata, 'a&&href') + '#immersiveTheme##noHistory#?Name=' + pdfh(zdata, '.txtA&&Text') + '@rule=js:$.require(\\\"hiker://page/details\\\")',\\n        pic_url: pd(zdata, 'img&&src'),\\n        desc: pdfh(zdata, '.info&&Text')\\n    });\\n});\\n\\nd.push({\\n    title: '\\\\n',\\n    col_type: 'long_text'\\n});\\n\\nIcon_prefix = 'https://lanmeiguojiang.com/tubiao/more/';\\nvar sicon = ['213.png', '279.png'];\\nvar stitle = ['书架', '下载', '口令'];\\nvar surl = ['hiker://page/Main.view?rule=本地资源管理', 'hiker://page/download.view#noHistory##noRecordHistory##noRefresh#?rule=本地资源管理'];\\nvar downloadlazy = $.toString(() => {\\n    var url = fetch(input.replace(\\\"m\\\", \\\"www\\\"), {});\\n    eval(pdfh(url, \\\"body&&script&&Html\\\"));\\n    if (chapterImages.length >= 1) {\\n        return chapterImages\\n    } else {\\n        url = pdfh(request(input), \\\".image-content&&p&&Text\\\");\\n        var picss = [];\\n        if (url != \\\"\\\") {\\n            url = url.split(\\\"/\\\")[1] - 0;\\n            var fwsz = [];\\n            for (var i = 1; i <= url; i++) {\\n                picss.push(pd(request(input.replace(\\\".html\\\", \\\"-\\\" + i + \\\".html\\\")), \\\"#image&&src\\\"));\\n            }\\n        }\\n        return picss;\\n    };\\n});\\n\\nvar doList = [];\\n章节.forEach(function(data) {\\n    doList.push({\\n        title: pdfh(data, 'Text'),\\n        url: pd(data, 'a&&href'),\\n    });\\n});\\n\\n\\nvar sjss = {\\n    chapterList: doList,\\n    info: {\\n        bookName: pdfh(code, '#comicName&&Text'), //漫画名称\\n        ruleName: MY_RULE.title,\\n        bookTopPic: pd(头部, 'img&&src'), //漫画的展示图\\n        parseCode: downloadlazy\\n    },\\n    defaultView: \\\"1\\\"\\n};\\n\\n\\nfor (var i in sicon) {\\n    var sj = i == 1 ? sjss : \\\"\\\";\\n    var n = i;\\n    d.splice(3, 0, {\\n        title: stitle[n],\\n        pic_url: Icon_prefix + sicon[n],\\n        url: surl[n],\\n        col_type: 'scroll_button',\\n        extra: sj\\n    });\\n}\\n\\nsetResult(d)\"},{\"col_type\":\"movie_1_vertical_pic\",\"name\":\"更新\",\"path\":\"update\",\"rule\":\"js:\\nvar d = [];\\n\\npdfa(getResCode(), 'div.UpdateList&&div.itemBox').forEach(function (data) {\\n  d.push({\\n        title: '‘‘’’<b>'+pdfh(data, '.title&&Text')+'</b> <small>\\\\n最新：<font color=\\\"#FA7298\\\">'+pdfh(data, '.coll&&Text')+'</font>\\\\n作者：'+pdfh(data, '.itemTxt&&p,0&&Text')+'</small>',\\n        desc:'‘‘’’<font color=\\\"#274c5e\\\">分类：'+pdfh(data, '.itemTxt&&p,1&&Text')+'\\\\n时间：'+pdfh(data, '.itemTxt&&p,2&&Text')+'</font>' ,\\n        pic_url: pd(data, 'img&&src')+\\\"@Referer=\\\",\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.title&&Text')+'@rule=js:$.require(\\\"hiker://page/details\\\")',\\n       col_type: \\\"movie_1_vertical_pic\\\"\\n    });\\n});\\n\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"完结\",\"path\":\"wj\",\"rule\":\"js:\\nvar d = [];\\n\\npdfa(getResCode(), 'ul#comic-items&&li').forEach(function (data) {\\n  d.push({\\n        title: pdfh(data, '.txtA&&Text'),\\n        desc:pdfh(data, '.info&&Text') ,\\n        pic_url: pd(data, 'img&&src')+\\\"@Referer=\\\",\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.txtA&&Text')+'@rule=js:$.require(\\\"hiker://page/details\\\")',\\n       col_type: \\\"movie_3\\\"\\n    });\\n});\\n\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"排行榜\",\"path\":\"rdtfsup\",\"rule\":\"var d = [];\\nvar 前缀 = \\\"https://m.imitui.com\\\";\\nvar csid = \\\"\\\";\\nvar code = request(getVar(\\\"排行榜url\\\",\\\"https://m.imitui.com/rank/\\\"));\\n\\nfunction  List_of_options(列表, 点亮, 主id) {\\n    if (主id == 0) {\\n        d.push({\\n            col_type: 'blank_block'\\n        });\\n    }\\n    pdfa(code, 列表).forEach(function(data, id) {\\n        var title = pdfh(data, 'Text');\\n        if (data.indexOf(点亮) != -1) {\\n            title = '““””<b><font color=#FA7298>' + title + '</font></b>';\\n            if (主id != 0) {\\n                csid = id;\\n            }\\n        }\\n        var url = `@lazyRule=.js:putVar('排行榜url', '` + 前缀 + pdfh(data, 'a&&href') + `');refreshPage(false);'toast://切换成功...'`;\\n        d.push({\\n            title: title,\\n            url: url,\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    });\\n}\\n\\nList_of_options(\\\"#TopComTit&&li\\\", '\\\"cur\\\"', 1)\\nif (csid == 0) {\\nList_of_options(\\\"#FilterCon&&.classPanel&&li\\\", '\\\"Hov\\\"', 0)\\n}\\nif (csid <= 1) {\\nList_of_options(\\\"#FilterCon&&.dataPanel.select&&li\\\", '\\\"asc\\\"', 0)\\n}\\n\\npdfa(code, 'div.items.clearfix&&div.itemBox').forEach(function (data) {\\n  d.push({\\n        title: '‘‘’’<b>'+pdfh(data, '.title&&Text')+'</b> <small>\\\\n排名：<font color=\\\"#FA7298\\\">🏆<b> '+pdfh(data, '.number&&Text')+'  名</b></font>\\\\n作者：'+pdfh(data, '.itemTxt&&p,0&&Text')+'</small>',\\n        desc:'‘‘’’<font color=\\\"#004e66\\\">分类：'+pdfh(data, '.itemTxt&&p,1&&Text')+'\\\\n时间：'+pdfh(data, '.itemTxt&&p,2&&Text')+'</font>' ,\\n        pic_url: pd(data, 'img&&src')+\\\"@Referer=\\\",\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.title&&Text')+'@rule=js:$.require(\\\"hiker://page/details\\\")',\\n       col_type: \\\"movie_1_vertical_pic\\\"\\n    });\\n});\\n\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"分类\",\"path\":\"class\",\"rule\":\"var d = [];\\nvar 前缀 = \\\"https://m.imitui.com\\\";\\nvar 分类url = getVar(\\\"分类url\\\",\\\"https://m.imitui.com/list/\\\");\\nvar  当前页  = getParam('page');\\nvar code = request(分类url + \\\"?page=\\\" + 当前页);\\n\\n\\nfunction  List_of_options(数据源,列表, 点亮, 分割) {\\n    if (分割 == 0) {\\n        d.push({\\n            col_type: 'blank_block'\\n        });\\n    }\\n    pdfa(数据源, 列表).forEach(function(data, id) {\\n        var title = pdfh(data, 'Text');\\n        if (data.indexOf(点亮) != -1) {\\n            title = '““””<b><font color=#FA7298>' + title + '</font></b>';\\n        }\\n        var url = `@lazyRule=.js:putVar('分类url', '` + 前缀 + pdfh(data, 'a&&href') + `');refreshPage(false);'toast://切换成功...'`;\\n        d.push({\\n            title: title,\\n            url: url,\\n            col_type: \\\"scroll_button\\\"\\n        });\\n    });\\n}\\nif(当前页 == 1){\\npdfa(code, \\\".filter-nav.clearfix&&.filter-item\\\").forEach(function (data,id) {\\n List_of_options(data,\\\"ul&&li\\\", '\\\"active\\\"', id == 0?1:0)\\n});\\n}\\n\\n\\npdfa(code, 'ul#comic-items&&li').forEach(function (data) {\\n  d.push({\\n        title: pdfh(data, '.txtA&&Text'),\\n        desc:pdfh(data, '.info&&Text') ,\\n        pic_url: pd(data, 'img&&src')+\\\"@Referer=\\\",\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.txtA&&Text')+'@rule=js:$.require(\\\"hiker://page/details\\\")',\\n       col_type: \\\"movie_3\\\"\\n    });\\n});\\n\\nsetResult(d);\"}],\"saved\":false,\"title\":\"聚漫🔮\",\"version\":0,\"url\":\"https://m.imitui.com/manhua/zuoyongyijieyouyongyimei/#immersiveTheme#?Name=左拥义姐，右拥义妹;get;UTF-8;{User-Agent@Mozilla/5.0 (Linux；； Android 11；； Mi 10 Pro) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.152 Mobile Safari/537.36}\",\"col_type\":\"movie_3\",\"find_rule\":\"js:$.require(\\\"hiker://page/details\\\")\",\"group\":\"聚漫🔮\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"漫画详情\\\",\\\"path\\\":\\\"details\\\",\\\"rule\\\":\\\"if (getParam('Name') != \\\\\\\"undefined\\\\\\\") {\\\\n    setPageTitle(getParam('Name'))\\\\n}\\\\nvar d = [];\\\\nvar code = getResCode();\\\\nvar Icon_prefix = 'https://lanmeiguojiang.com/tubiao/q/';\\\\nvar Label_set_icon = ['107.png', '18.png', '32.png'];\\\\n\\\\nvar 头部 = pdfa(code, \\\\\\\"body&&.Introduct_Sub\\\\\\\")[0];\\\\nd.push({\\\\n    title: \\\\\\\"‘‘’’<b>\\\\\\\" + pdfh(code, '#comicName&&Text') + '</b> <small> \\\\\\\\n作者：<font color=\\\\\\\"#FA7298\\\\\\\">' + pdfh(头部, '.sub_r&&.txtItme,0&&Text') + '</font> \\\\\\\\n类型：' + pdfh(头部, '.sub_r&&.txtItme,1&&Text') + \\\\\\\"</small>\\\\\\\",\\\\n    desc: '‘‘’’<font color=\\\\\\\"#f8ecc9\\\\\\\">分类：' + pdfh(头部, '.sub_r&&.txtItme,2&&Text') + '\\\\\\\\n时间：' + pdfh(头部, '.sub_r&&.txtItme,3&&Text') + \\\\\\\"</font>\\\\\\\",\\\\n    pic_url: pd(头部, 'img&&src'),\\\\n    url: MY_URL + \\\\\\\"#noHistory#\\\\\\\",\\\\n    col_type: 'movie_1_vertical_pic_blur'\\\\n});\\\\n\\\\n//简介\\\\nvar 简介 = pdfh(code, \\\\\\\"#simple-des&&Text\\\\\\\").replace(\\\\\\\"介绍:\\\\\\\", \\\\\\\"\\\\\\\").replace(\\\\\\\"漫画简介：\\\\\\\", \\\\\\\"\\\\\\\");\\\\nvar 简介全 = pdfh(code, \\\\\\\"#full-des&&Text\\\\\\\").replace(\\\\\\\"介绍:\\\\\\\", \\\\\\\"\\\\\\\").replace(\\\\\\\"漫画简介：\\\\\\\", \\\\\\\"\\\\\\\").replace(/\\\\\\\"/g, '°');\\\\n简介全 = 简介全.length < 1 ? 简介 : 简介全\\\\nvar jj = getVar(MY_URL + \\\\\\\"简介收\\\\\\\", \\\\\\\"已收起\\\\\\\");\\\\nvar mztext = \\\\\\\"&nbsp;&nbsp;&nbsp;&nbsp;<small>简介</small><br>\\\\\\\"\\\\n\\\\n\\\\nvar bttitle = '<font color=\\\\\\\"#098AC1\\\\\\\">漫画简介  </font><small><small><font color=\\\\\\\"#f47983\\\\\\\">简介收></font></small></small>'\\\\n\\\\n\\\\nvar jjurl = $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((简介全, 收, 收内容, 当前URL) => {\\\\n    var jsbl = 当前URL + \\\\\\\"简介收\\\\\\\";\\\\n    var jj = getVar(当前URL + \\\\\\\"简介收\\\\\\\", \\\\\\\"已收起\\\\\\\");\\\\n    jj = jj == \\\\\\\"已收起\\\\\\\" ? \\\\\\\"展开\\\\\\\" : \\\\\\\"已收起\\\\\\\";\\\\n    putVar(jsbl, jj)\\\\n    updateItem({\\\\n        extra: {\\\\n            id: 当前URL + \\\\\\\"_bt\\\\\\\"\\\\n        },\\\\n        title: 收.replace(\\\\\\\"简介收\\\\\\\", jj)\\\\n    })\\\\n\\\\n    updateItem({\\\\n        extra: {\\\\n            id: 当前URL + \\\\\\\"_mz\\\\\\\"\\\\n        },\\\\n        title: jj == \\\\\\\"已收起\\\\\\\" ? 收内容.replace(\\\\\\\"简介\\\\\\\", 简介全).substr(0, 75) + \\\\\\\" ...<br>\\\\\\\" : 收内容.replace(\\\\\\\"简介\\\\\\\", 简介全)\\\\n    })\\\\n    return \\\\\\\"hiker://empty\\\\\\\"\\\\n}, 简介全, bttitle, mztext, MY_URL)\\\\n\\\\nd.push({\\\\n    title: bttitle.replace(\\\\\\\"简介收\\\\\\\", jj),\\\\n    url: jjurl,\\\\n    col_type: \\\\\\\"avatar\\\\\\\",\\\\n    pic_url: Icon_prefix + Label_set_icon[0],\\\\n    extra: {\\\\n        id: MY_URL + \\\\\\\"_bt\\\\\\\"\\\\n    }\\\\n});\\\\n\\\\n\\\\nd.push({\\\\n    title: jj == \\\\\\\"已收起\\\\\\\" ? mztext.replace(\\\\\\\"简介\\\\\\\", 简介全).substr(0, 75) + \\\\\\\" ...<br>\\\\\\\" : mztext.replace(\\\\\\\"简介\\\\\\\", 简介全),\\\\n    col_type: \\\\\\\"rich_text\\\\\\\",\\\\n    extra: {\\\\n        id: MY_URL + \\\\\\\"_mz\\\\\\\"\\\\n    }\\\\n});\\\\n\\\\n\\\\nvar urljs = `@lazyRule=.js:var url = fetch(input.replace(\\\\\\\"m\\\\\\\",\\\\\\\"www\\\\\\\"),{});eval(pdfh(url, \\\\\\\"body&&script&&Html\\\\\\\"));if(chapterImages.length >=  1){\\\\\\\"pics://\\\\\\\"+chapterImages.join(\\\\\\\"&&\\\\\\\")}else{url = pdfh(request(input), \\\\\\\".image-content&&p&&Text\\\\\\\");var picss =[];if(url != \\\\\\\"\\\\\\\"){url = url.split(\\\\\\\"/\\\\\\\")[1] - 0;var fwsz = [];for (var i=1;i<=url;i++){picss.push(pd(request(input.replace(\\\\\\\".html\\\\\\\", \\\\\\\"-\\\\\\\"+i+\\\\\\\".html\\\\\\\")), \\\\\\\"#image&&src\\\\\\\"));}}\\\\\\\"pics://\\\\\\\"+picss.join(\\\\\\\"&&\\\\\\\")};`;\\\\n\\\\n\\\\nvar 章节 = pdfa(code, \\\\\\\"#chapter-list-1&&li\\\\\\\");\\\\nvar 排序 = getVar(MY_URL + \\\\\\\"章节排序\\\\\\\", \\\\\\\"正序\\\\\\\");\\\\nvar 提示 = 排序 == '倒序' ? '正序' : '倒序';\\\\nvar 排序名 = '<b>章节列表</b>  <small><small><font color=#f9906f>排序 ></font></small></small>'\\\\n\\\\n\\\\nvar 排序url = $(\\\\\\\"#noLoading#\\\\\\\").lazyRule((排序名, tjurl, lazy, 章节) => {\\\\n    var 排序 = getVar(tjurl + \\\\\\\"章节排序\\\\\\\", \\\\\\\"正序\\\\\\\");\\\\n    var 提示 = 排序 == '倒序' ? '正序' : '倒序';\\\\n    updateItem({\\\\n        extra: {\\\\n            id: tjurl + \\\\\\\"_排序\\\\\\\"\\\\n        },\\\\n        title: 排序名.replace('排序', 提示)\\\\n    })\\\\n\\\\n\\\\n\\\\n    \\\\n    if (提示 == '倒序') {\\\\n        章节.reverse()\\\\n    }\\\\n\\\\nvar 去除章节 = ['下载App', '🔒'];\\\\n去除章节.forEach(function(data) {\\\\n    var 标识id = 章节.findIndex(返回 => 返回.indexOf(data) != -1);\\\\n    if (标识id != -1) {\\\\n        章节.splice(标识id, 1)\\\\n    };\\\\n});\\\\n\\\\n    章节.forEach(function(data, ssid) {\\\\n        updateItem({\\\\n            title: pdfh(data, 'Text'),\\\\n            url: pd(data, 'a&&href') + lazy,\\\\n            extra: {\\\\n                id: tjurl + \\\\\\\"_选集\\\\\\\" + ssid\\\\n            }\\\\n        });\\\\n    });\\\\n\\\\n\\\\n    putVar(tjurl + \\\\\\\"章节排序\\\\\\\", 提示)\\\\n    return \\\\\\\"hiker://empty\\\\\\\"\\\\n}, 排序名, MY_URL, urljs, 章节)\\\\n\\\\n\\\\nd.push({\\\\n    title: \\\\\\\"<b>章节列表</b>  <small><small><font color='#f9906f'>\\\\\\\" + 排序 + \\\\\\\" ></font></small></small>\\\\\\\",\\\\n    pic_url: Icon_prefix + Label_set_icon[1],\\\\n    url: 排序url,\\\\n    col_type: \\\\\\\"avatar\\\\\\\",\\\\nextra: {\\\\n        id: MY_URL + \\\\\\\"_排序\\\\\\\"\\\\n    }\\\\n});\\\\n\\\\nif (排序 == '倒序') {\\\\n    章节.reverse()\\\\n}\\\\n\\\\nvar 去除章节 = ['下载App', '🔒'];\\\\n去除章节.forEach(function(data) {\\\\n    var 标识id = 章节.findIndex(返回 => 返回.indexOf(data) != -1);\\\\n    if (标识id != -1) {\\\\n        章节.splice(标识id, 1)\\\\n    };\\\\n});\\\\n\\\\n章节.forEach(function(data,id) {\\\\n    d.push({\\\\n        title: pdfh(data, 'Text'),\\\\n        url: pd(data, 'a&&href') + urljs,\\\\n        col_type: \\\\\\\"text_2\\\\\\\",\\\\nextra: {\\\\n            id: MY_URL + \\\\\\\"_选集\\\\\\\" + id\\\\n        }\\\\n    });\\\\n});\\\\n\\\\n\\\\nd.push({\\\\n    title: '<b>热门推荐</b>',\\\\n    pic_url: Icon_prefix + Label_set_icon[2],\\\\n    col_type: \\\\\\\"avatar\\\\\\\"\\\\n});\\\\n\\\\npdfa(code, \\\\\\\".imgBox&&ul&&li\\\\\\\").forEach(function(zdata) {\\\\n    d.push({\\\\n        title: pdfh(zdata, '.txtA&&Text'),\\\\n        url: pd(zdata, 'a&&href') + '#immersiveTheme##noHistory#?Name=' + pdfh(zdata, '.txtA&&Text') + '@rule=js:$.require(\\\\\\\"hiker://page/details\\\\\\\")',\\\\n        pic_url: pd(zdata, 'img&&src'),\\\\n        desc: pdfh(zdata, '.info&&Text')\\\\n    });\\\\n});\\\\n\\\\nd.push({\\\\n    title: '\\\\\\\\n',\\\\n    col_type: 'long_text'\\\\n});\\\\n\\\\nIcon_prefix = 'https://lanmeiguojiang.com/tubiao/more/';\\\\nvar sicon = ['213.png', '279.png'];\\\\nvar stitle = ['书架', '下载', '口令'];\\\\nvar surl = ['hiker://page/Main.view?rule=本地资源管理', 'hiker://page/download.view#noHistory##noRecordHistory##noRefresh#?rule=本地资源管理'];\\\\nvar downloadlazy = $.toString(() => {\\\\n    var url = fetch(input.replace(\\\\\\\"m\\\\\\\", \\\\\\\"www\\\\\\\"), {});\\\\n    eval(pdfh(url, \\\\\\\"body&&script&&Html\\\\\\\"));\\\\n    if (chapterImages.length >= 1) {\\\\n        return chapterImages\\\\n    } else {\\\\n        url = pdfh(request(input), \\\\\\\".image-content&&p&&Text\\\\\\\");\\\\n        var picss = [];\\\\n        if (url != \\\\\\\"\\\\\\\") {\\\\n            url = url.split(\\\\\\\"/\\\\\\\")[1] - 0;\\\\n            var fwsz = [];\\\\n            for (var i = 1; i <= url; i++) {\\\\n                picss.push(pd(request(input.replace(\\\\\\\".html\\\\\\\", \\\\\\\"-\\\\\\\" + i + \\\\\\\".html\\\\\\\")), \\\\\\\"#image&&src\\\\\\\"));\\\\n            }\\\\n        }\\\\n        return picss;\\\\n    };\\\\n});\\\\n\\\\nvar doList = [];\\\\n章节.forEach(function(data) {\\\\n    doList.push({\\\\n        title: pdfh(data, 'Text'),\\\\n        url: pd(data, 'a&&href'),\\\\n    });\\\\n});\\\\n\\\\n\\\\nvar sjss = {\\\\n    chapterList: doList,\\\\n    info: {\\\\n        bookName: pdfh(code, '#comicName&&Text'), //漫画名称\\\\n        ruleName: MY_RULE.title,\\\\n        bookTopPic: pd(头部, 'img&&src'), //漫画的展示图\\\\n        parseCode: downloadlazy\\\\n    },\\\\n    defaultView: \\\\\\\"1\\\\\\\"\\\\n};\\\\n\\\\n\\\\nfor (var i in sicon) {\\\\n    var sj = i == 1 ? sjss : \\\\\\\"\\\\\\\";\\\\n    var n = i;\\\\n    d.splice(3, 0, {\\\\n        title: stitle[n],\\\\n        pic_url: Icon_prefix + sicon[n],\\\\n        url: surl[n],\\\\n        col_type: 'scroll_button',\\\\n        extra: sj\\\\n    });\\\\n}\\\\n\\\\nsetResult(d)\\\"},{\\\"col_type\\\":\\\"movie_1_vertical_pic\\\",\\\"name\\\":\\\"更新\\\",\\\"path\\\":\\\"update\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\n\\\\npdfa(getResCode(), 'div.UpdateList&&div.itemBox').forEach(function (data) {\\\\n  d.push({\\\\n        title: '‘‘’’<b>'+pdfh(data, '.title&&Text')+'</b> <small>\\\\\\\\n最新：<font color=\\\\\\\"#FA7298\\\\\\\">'+pdfh(data, '.coll&&Text')+'</font>\\\\\\\\n作者：'+pdfh(data, '.itemTxt&&p,0&&Text')+'</small>',\\\\n        desc:'‘‘’’<font color=\\\\\\\"#274c5e\\\\\\\">分类：'+pdfh(data, '.itemTxt&&p,1&&Text')+'\\\\\\\\n时间：'+pdfh(data, '.itemTxt&&p,2&&Text')+'</font>' ,\\\\n        pic_url: pd(data, 'img&&src')+\\\\\\\"@Referer=\\\\\\\",\\\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.title&&Text')+'@rule=js:$.require(\\\\\\\"hiker://page/details\\\\\\\")',\\\\n       col_type: \\\\\\\"movie_1_vertical_pic\\\\\\\"\\\\n    });\\\\n});\\\\n\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"完结\\\",\\\"path\\\":\\\"wj\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\n\\\\npdfa(getResCode(), 'ul#comic-items&&li').forEach(function (data) {\\\\n  d.push({\\\\n        title: pdfh(data, '.txtA&&Text'),\\\\n        desc:pdfh(data, '.info&&Text') ,\\\\n        pic_url: pd(data, 'img&&src')+\\\\\\\"@Referer=\\\\\\\",\\\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.txtA&&Text')+'@rule=js:$.require(\\\\\\\"hiker://page/details\\\\\\\")',\\\\n       col_type: \\\\\\\"movie_3\\\\\\\"\\\\n    });\\\\n});\\\\n\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"排行榜\\\",\\\"path\\\":\\\"rdtfsup\\\",\\\"rule\\\":\\\"var d = [];\\\\nvar 前缀 = \\\\\\\"https://m.imitui.com\\\\\\\";\\\\nvar csid = \\\\\\\"\\\\\\\";\\\\nvar code = request(getVar(\\\\\\\"排行榜url\\\\\\\",\\\\\\\"https://m.imitui.com/rank/\\\\\\\"));\\\\n\\\\nfunction  List_of_options(列表, 点亮, 主id) {\\\\n    if (主id == 0) {\\\\n        d.push({\\\\n            col_type: 'blank_block'\\\\n        });\\\\n    }\\\\n    pdfa(code, 列表).forEach(function(data, id) {\\\\n        var title = pdfh(data, 'Text');\\\\n        if (data.indexOf(点亮) != -1) {\\\\n            title = '““””<b><font color=#FA7298>' + title + '</font></b>';\\\\n            if (主id != 0) {\\\\n                csid = id;\\\\n            }\\\\n        }\\\\n        var url = `@lazyRule=.js:putVar('排行榜url', '` + 前缀 + pdfh(data, 'a&&href') + `');refreshPage(false);'toast://切换成功...'`;\\\\n        d.push({\\\\n            title: title,\\\\n            url: url,\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n        });\\\\n    });\\\\n}\\\\n\\\\nList_of_options(\\\\\\\"#TopComTit&&li\\\\\\\", '\\\\\\\"cur\\\\\\\"', 1)\\\\nif (csid == 0) {\\\\nList_of_options(\\\\\\\"#FilterCon&&.classPanel&&li\\\\\\\", '\\\\\\\"Hov\\\\\\\"', 0)\\\\n}\\\\nif (csid <= 1) {\\\\nList_of_options(\\\\\\\"#FilterCon&&.dataPanel.select&&li\\\\\\\", '\\\\\\\"asc\\\\\\\"', 0)\\\\n}\\\\n\\\\npdfa(code, 'div.items.clearfix&&div.itemBox').forEach(function (data) {\\\\n  d.push({\\\\n        title: '‘‘’’<b>'+pdfh(data, '.title&&Text')+'</b> <small>\\\\\\\\n排名：<font color=\\\\\\\"#FA7298\\\\\\\">🏆<b> '+pdfh(data, '.number&&Text')+'  名</b></font>\\\\\\\\n作者：'+pdfh(data, '.itemTxt&&p,0&&Text')+'</small>',\\\\n        desc:'‘‘’’<font color=\\\\\\\"#004e66\\\\\\\">分类：'+pdfh(data, '.itemTxt&&p,1&&Text')+'\\\\\\\\n时间：'+pdfh(data, '.itemTxt&&p,2&&Text')+'</font>' ,\\\\n        pic_url: pd(data, 'img&&src')+\\\\\\\"@Referer=\\\\\\\",\\\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.title&&Text')+'@rule=js:$.require(\\\\\\\"hiker://page/details\\\\\\\")',\\\\n       col_type: \\\\\\\"movie_1_vertical_pic\\\\\\\"\\\\n    });\\\\n});\\\\n\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"分类\\\",\\\"path\\\":\\\"class\\\",\\\"rule\\\":\\\"var d = [];\\\\nvar 前缀 = \\\\\\\"https://m.imitui.com\\\\\\\";\\\\nvar 分类url = getVar(\\\\\\\"分类url\\\\\\\",\\\\\\\"https://m.imitui.com/list/\\\\\\\");\\\\nvar  当前页  = getParam('page');\\\\nvar code = request(分类url + \\\\\\\"?page=\\\\\\\" + 当前页);\\\\n\\\\n\\\\nfunction  List_of_options(数据源,列表, 点亮, 分割) {\\\\n    if (分割 == 0) {\\\\n        d.push({\\\\n            col_type: 'blank_block'\\\\n        });\\\\n    }\\\\n    pdfa(数据源, 列表).forEach(function(data, id) {\\\\n        var title = pdfh(data, 'Text');\\\\n        if (data.indexOf(点亮) != -1) {\\\\n            title = '““””<b><font color=#FA7298>' + title + '</font></b>';\\\\n        }\\\\n        var url = `@lazyRule=.js:putVar('分类url', '` + 前缀 + pdfh(data, 'a&&href') + `');refreshPage(false);'toast://切换成功...'`;\\\\n        d.push({\\\\n            title: title,\\\\n            url: url,\\\\n            col_type: \\\\\\\"scroll_button\\\\\\\"\\\\n        });\\\\n    });\\\\n}\\\\nif(当前页 == 1){\\\\npdfa(code, \\\\\\\".filter-nav.clearfix&&.filter-item\\\\\\\").forEach(function (data,id) {\\\\n List_of_options(data,\\\\\\\"ul&&li\\\\\\\", '\\\\\\\"active\\\\\\\"', id == 0?1:0)\\\\n});\\\\n}\\\\n\\\\n\\\\npdfa(code, 'ul#comic-items&&li').forEach(function (data) {\\\\n  d.push({\\\\n        title: pdfh(data, '.txtA&&Text'),\\\\n        desc:pdfh(data, '.info&&Text') ,\\\\n        pic_url: pd(data, 'img&&src')+\\\\\\\"@Referer=\\\\\\\",\\\\n        url: pd(data, 'a&&href')+'#immersiveTheme##noHistory#?Name='+pdfh(data, '.txtA&&Text')+'@rule=js:$.require(\\\\\\\"hiker://page/details\\\\\\\")',\\\\n       col_type: \\\\\\\"movie_3\\\\\\\"\\\\n    });\\\\n});\\\\n\\\\nsetResult(d);\\\"}]\"}","picUrl":"https://reso.qianwee.com/images/o/3a/35/4aef197f38ac91120ff5406b020e.jpg@Referer=","title":"左拥义姐，右拥义妹"}