const { SlashCommandBuilder } = require('@discordjs/builders')
const Canvas = require("@napi-rs/canvas");
const ImageFilters = require("canvas-filters")
const { AttachmentBuilder, EmbedBuilder, PermissionsBitField } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('sharpen-avatar')
        .setDescription('Sharpen a user\'s avatar.')
        .addUserOption(option => option.setName('user').setDescription('User to sharpen.').setRequired(true))
        .addNumberOption(option => option.setName('sharpen-factor').setDescription("Factor to sharpen by").setRequired(true))
        .addBooleanOption(option => option.setName('circle-avatar').setDescription("Sends the outputted avatar as a circle").setRequired(true))
        .addNumberOption(option => option.setName('result-size').setDescription("Resulting size to output the image as. Defaults to 256").setRequired(true).addChoices(
            { name: "16x16", value: 16 },
            { name: "32x32", value: 32 },
            { name: "64x64", value: 64 },
            { name: "128x128", value: 128 },
            { name: "256x256", value: 256 },
            { name: "512x512", value: 512 },
            { name: "1024x1024", value: 1024 },
            { name: "2048x2048", value: 2048 },
            { name: "4096x4096", value: 4096 },
        )),
    async execute(interaction, message) {
        const member = interaction.options.getUser('user');
        const sharpenFactor = interaction.options.getNumber('sharpen-factor')
        let resultsize = interaction.options.getNumber('result-size');
        const resultcircle = interaction.options.getBoolean('circle-avatar');

        if (!member) return message.channel.send("You must specify a member!")

        const canvas = Canvas.createCanvas(resultsize, resultsize)
        const context = canvas.getContext('2d')

        context.fillStyle = "rgba(255, 255, 255, 0)";
        context.fillRect(0, 0, canvas.width, canvas.height);

        const avatar = await Canvas.loadImage(member.displayAvatarURL({ extension: 'png', size: resultsize }));

        if (resultcircle) {
            // Pick up the pen
            context.beginPath();

            // Start the arc to form a circle
            context.arc(canvas.width / 2, canvas.height / 2, canvas.width / 2, 0, Math.PI * 2, true);

            // Put the pen down
            context.closePath();

            // Clip off the region you drew on
            context.clip();
        }

        context.drawImage(avatar, 0, 0, canvas.width, canvas.height)

        var iD = context.getImageData(0, 0, canvas.width, canvas.height)

        var filtered = ImageFilters.Sharpen(iD, sharpenFactor)

        context.putImageData(filtered, 0, 0);

        attachment = new AttachmentBuilder(await canvas.encode('png'), { name: `${member.username}_${member.discriminator}-sharpened-${sharpenFactor}_${resultsize}x${resultsize}.png` });

        interaction.reply({ files: [attachment] }).catch(err => {
            return;
        });
    }
}