package Practico3;

public class Ejercicio6 {
	
	private static SimpleLinkedList<Videos> vids;
	public static void main(String[] args) {
		// TODO Auto-generated method stub
		
		menu();
	}
	
	public static void menu() {
		int opcion;
		vids = new SimpleLinkedList<>();
		do {
			System.out.println("1 - Ingresar manualmente un video");
			System.out.println("2 - Generar aleatoriamente un video");
			System.out.println("3 - Buscar por...");
			System.out.println("4 - Finalizar");
			opcion = Helper.getPositiveInt("ingrese una opcion");
			
			switch(opcion) {
			case 1:
				cargarVideo();
				//System.out.println(vids.toString());
				Helper.espera();
				break;
			case 2:
				generarVideo();
				//System.out.println(vids.toString());
				Helper.espera();
				break;
			case 3:
				menu2();
				break;
			case 4:
				break;
			default:
				System.out.println("Opcion erronea");
			}
			
		}while(opcion!=7);
		System.out.println("GRacias :D");
	}
	
	public static void menu2() {
		int opcion;
		do {
			System.out.println("1. Buscar por titulo");
			System.out.println("2. Mostrar todos los videos de un creador");
			System.out.println("3. Mostrar una lista con videos aleatorios");
			System.out.println("4. Mostrar videos menor de una duracion");
			System.out.println("5. retornar");
			opcion = Helper.getPositiveInt("ingrese una opcion");
			switch(opcion) {
			case 1:
				buscarTitul(vids);
				Helper.espera();
				break;
			case 2:
				buscarCreador(vids);
				break;
			case 3:
				listaVidsAleat(vids);
				break;
			case 4:
				duracion(vids);
				break;
			case 5:
				break;
			default:
					System.out.println("opcion invalida");
			}
			
		}while(opcion!=6);
	}
	
	public static void listaVidsAleat(SimpleLinkedList<Videos> list) {

        SimpleLinkedList<Videos> vidsAleat = new SimpleLinkedList<Videos>();
        int numAleatorio1,cantVideos;
        cantVideos = Helper.getPositiveInt("Ingrese la cantidad de vides");
        for(int i=0;i<cantVideos;i++) {
            numAleatorio1=Helper.randomInt((list.size())+1);
            vidsAleat.addLast((Videos)list.get(numAleatorio1));
        } 
        System.out.println(vidsAleat.toString());
	}
	
	
	public static void buscarCreador(SimpleLinkedList<Videos> list) {
		String cread;
		SimpleLinkedList<Videos>vidsCread = new SimpleLinkedList<>();
		
		if (list.size()<=0) {
			System.out.println("La lista esta Vacia");
		}else {
			System.out.println("Que titulo desea buscar");
			cread = Helper.scanner.nextLine();
			for(Videos vids: list) {
				if(vids.getCreador().toLowerCase().replace('á', 'a').replace('é', 'e').replace('í', 'i').replace('ó', 'o').replace('ú', 'u')
						.contains(cread.toLowerCase().replace('á', 'a').replace('é', 'e').replace('í', 'i').replace('ó', 'o').replace('ú', 'u'))) {
					vidsCread.addFirst(vids);
				}
			}
		}
		System.out.println(vidsCread.toString());
	}
	
	public static void duracion(SimpleLinkedList<Videos> list) {
		int maxDur;
		SimpleLinkedList<Videos>vidDur = new SimpleLinkedList<Videos>();
		if (list.size()<=0) {
			System.out.println("La lista esta Vacia");
		}else {
			maxDur = Helper.getPositiveInt("Ingrese la duracion maxima(en minutos)");
			for(Videos vids: list) {
				if((int)vids.getDuracion() <= maxDur) {
					vidDur.addFirst(vids);
				}
			}
		}
		System.out.println(vidDur.toString());
	}

	public static void buscarTitul(SimpleLinkedList<Videos> list) {
		String title;
		float total = 0;
		SimpleLinkedList<Videos>vidsTit = new SimpleLinkedList<>();
		
		if (list.size()<=0) {
			System.out.println("La lista esta Vacia");
		}else {
			System.out.println("Que titulo desea buscar");
			title = Helper.scanner.nextLine();
			for(Videos vids: list) {
				
				if(vids.getTitulo().toLowerCase().replace('á', 'a').replace('é', 'e').replace('í', 'i').replace('ó', 'o').replace('ú', 'u')
						.contains(title.toLowerCase().replace('á', 'a').replace('é', 'e').replace('í', 'i').replace('ó', 'o').replace('ú', 'u'))) {
					vidsTit.addFirst(vids);
				}
			}
		}
		for(Videos vids: vidsTit) {
			total = total + vids.getDuracion();
		}
		
		System.out.println(vidsTit.toString());
		System.out.println("En total los videos son " + total + " minutos");
		//return vidsTit;
	}
	
	public static void duracionTotal() {
		
	}
	
	public static void cargarVideo() {
		String id, titulo, creador;
		float duracion;
		int opcion, posicion;
		do {
			id = generarId();
			System.out.println("Ingrese el titulo del video");
			titulo = Helper.scanner.nextLine();
			System.out.println("Ingrese el Nombre del creador");
			creador = Helper.scanner.nextLine();
			duracion = Helper.getPositiveFloat("Ingrese la duracion del video");
			if (vids.size()==0) {
				vids.addFirst(new Videos(id, titulo, creador, duracion));
			}else {
				
				do {
					posicion = Helper.getPositiveInt("Ingresar: \n1=Ingresar al principio \n2=Ingresar al final");
					switch(posicion) {
					case 1:
						vids.addFirst(new Videos(id, titulo, creador, duracion));
						break;
					case 2:
						vids.addLast(new Videos(id, titulo, creador, duracion));
						break;
					default:
						System.out.println("Opcion incorrecta");
					}
				}while(posicion!=1 && posicion!=2);
				
			}

			System.out.println("Video cargado correctamente");
			opcion = Helper.getPositiveInt("Desea cargar otro Video?? Si=1//No=2");
		}while(opcion!=2);
	}
	
	public static void generarVideo() {
		String id, titulo, creador;
		float duracion;
		int opcion, posicion;
		do {
			id = generarId();
			titulo = title[Helper.randomInt(title.length)];
			creador = creator[Helper.randomInt(creator.length)];
			duracion = timing();
			posicion = Helper.randomInt(2)+1;
			if (posicion == 1) {
				vids.addFirst(new Videos(id, titulo, creador, duracion));
			}else {
				if (posicion == 2) {
					vids.addLast(new Videos(id, titulo, creador, duracion));
				}
			}
			System.out.println("Video generado correctamente");
			opcion = Helper.getPositiveInt("Desea generar otro Video?? Si=1//No=2");
		}while(opcion!=2);
	}
	
	static String generarId() {
		String alfaNum = "abcdefghijklmnñopqrstuvwxyz"+"0123456789"; 
		StringBuilder idRan;
		int x = 7;
		idRan = new StringBuilder(x);
		for(int i = 0; i<x; i++) {
			int myInd = (int)(alfaNum.length() * Math.random());
			idRan.append(alfaNum.charAt(myInd)); 
		}
		return idRan.toString();
	}
	
	static String[] title = new String[] {
		"(TUTORIAL) Perseguir al tren | GTA S.A.", "Paseando por Paris | Vlog", "La Casa del Dragon | Spañol Lat | Cap 3", 
		"Verb to be||Clase 1||Tutorial", "Capitulo 1-Rick & Morty-Español Latino", "Compró 1 MILLON de gomillas (Vlog)", 
		"Vlog: Charlando por la calle", "Ley de Gauss para una figura cilindrica", "Como hacer albondigas en salsa|| Tutorial", 
		//"", "",
	};
	
	static String[] creator = new String[] {
		"Juanito Alcachofa", "PepitaLaPistolera", "DonComedia", "Fulanito98", "ElPibeCantina", "SuggarAngel"
	};
	
	static float timing() {
		float time;
		time = 1 + Helper.randomFloat(30);
		return time;
	}
}