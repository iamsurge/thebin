#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <set>


using namespace std;

typedef long long ll;

struct Node {
	int start, mx, end;
	//Node() {};
};

const int SIZE = 500001;
const int INF = 1000000001;
int a[SIZE];
Node t[SIZE * 4];

// v - для отладки
Node unite(Node t1, int len1, Node t2, int len2, int v) {
	Node res;

	if (t1.start == -1) {
		return t2;
	}
	if (t2.start == -1) {
		return t1;
	}

	// префикс
	res.start = max(t1.start, (t1.start + t2.start) * (t1.start == len1));

	// суффикс 
	res.end = max(t2.end, (t2.end + t1.end) * (t2.end == len2));

	// максимум

	res.mx = max({ res.end, res.start, t1.end + t2.start, t1.mx, t2.mx });
	return res;
}

void build(int v, int l, int r) {
	if (r - l == 1) {
		if (a[l] == 0) {
			t[v] = { 1, 1, 1 };
		}
		else {
			t[v] = { 0, 0,0 };
		}
		return;
	}

	int m = (l + r) / 2;
	build(v * 2 + 1, l, m);
	build(v * 2 + 2, m, r);
	t[v] = unite(t[v * 2 + 1], m - l,  t[v * 2 + 2], r - m, v);
}

Node ask(int v, int l, int r, int askl, int askr) {
	if (askr <= l || askl >= r) {
		return { -1, 0, 0 };
	}

	if (askl <= l && r <= askr) {
		return t[v];
	}

	int m = (l + r) / 2;
	Node t1 = ask(v * 2 + 1, l, m, askl, askr);
	Node t2 = ask(v * 2 + 2, m, r, askl, askr);

	return unite(t1, m - l, t2, r - m, v);
}


void change(int v, int l, int r, int aski, int val) {
	if (l == aski && r - l == 1) {
		if (val == 0) {
			t[v] = { 1, 1, 1 };
		}
		else {
			t[v] = { 0, 0,0 };
		}
		return;
	}

	int m = (l + r) / 2;

	if (aski < m) {
		change(v * 2 + 1, l, m, aski, val);
	}
	else {
		change(v * 2 + 2, m, r, aski, val);
	}

	t[v] = unite(t[v * 2 + 1], m - l, t[v * 2 + 2], r - m, v);
}

int main()
{
	ios_base::sync_with_stdio(0);
	cin.tie(0);
	cout.tie(0);

	int n, k;
	cin >> n;
	for (int i = 0; i < n; i++) {
		cin >> a[i];
	}

	build(0, 0, n);
	cin >> k;

	for (int i = 0; i < k; i++) {
		string s;
		cin >> s;
		if (s == "QUERY") {
			int l, r;
			cin >> l >> r;
			cout << ask(0, 0, n, --l, r).mx << '\n';
		}
		else {
			int aski, val;
			cin >> aski >> val;
			change(0, 0, n, --aski, val);
		}
	}
	k = 1;
}