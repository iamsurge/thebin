// Build by Ashutosh Yadav

// IF FF IS MAINFREIGHT
if (processData.freight_carrier_code == "MAIN") {
  if (processData.carrier_scac_mf != "VLSF") {
    var arr = [];
    for (var i = 0; i < processData.deliveryArray_mf.length; i++) {
      arr.push(processData.deliveryArray_mf[i]);
    }

    for (var i = 0; i < processData.containerArray_mf.length; i++) {
      var requestCombination =
        processData.containerArray_mf[i] + "_" + processData.mbol_mf;
      
      processData.genericReferenceNumber = requestCombination;
    
    fetchRecordsFromDataStore();
    processData.testAttribute = JSON.stringify(dataStoreData);
      for (var j = 0; j < dataStoreData.length; j++) {
          processData.testAttribute = "999";
        if (dataStoreData[j].key == 'genericReferenceNumber') {
            processData.testAttribute = "111";
          //update generic process
          var message = {
            referenceNumber:
              processData.containerArray_mf[i] + "_" + processData.mbol_mf,
            processMasterCode: "update_to_trn",
            flowCode: "hold_to_update",
            moveFlowForward: true,
            processData: {
              //optional
              container_id: processData.containerArray_mf[i],
              bl_number: processData.mbol_mf,
              job_number: processData.job_number_mf,
              del_array: arr,
              leg: processData.leg_number_mf.toString(),
              ff_code: processData.freight_carrier_code,
              dataFeed: "vendorToESCO",
              actualTime: processData.actual_time_mf
            },
          };
          throwIntermediateMessageEvent(
            "Intermediate Message Event",
            JSON.stringify(message),
            true
          );
        } else {
            processData.testAttribute = "222";
          // add to datastore
        //   var dataObj = {
        //     "dataStoreMasterCode": "gen_master",
        //     "data": {
        //       "unique_reference_number": requestCombination,
        //     },
        //     "hubCodeList": [],
        //     "userEmployeeCodeList": []
        //   };
        //   dataStore.push(dataObj);
          
          dataStore=[
                {
                    "dataStoreMasterCode": "gen_master",
                    "data": {
                        "unique_reference_number": processData.genericReferenceNumber
                    },
                    "hubCodeList": [],
                    "userEmployeeCodeList": []
                }
            ];

          //Add generic process
          var message = [
            {
              referenceNumber:
                processData.containerArray_mf[i] + "_" + processData.mbol_mf,
              processDefinitionCode: "update_to_trn",
              processData: {
                //optional
                container_id: processData.containerArray_mf[i],
                bl_number: processData.mbol_mf,
                job_number: processData.job_number_mf,
                del_array: arr,
                leg: processData.leg_number_mf.toString(),
                ff_code: processData.freight_carrier_code,
                dataFeed: "vendorToESCO",
                actualTime: processData.actual_time_mf
              },
              processUserMappings: [],
            },
          ];
          throwMessageEvent(
            "Start Message Event",
            JSON.stringify(message),
            true
          );
        }
      }
    }
  }
}

// TO BE DISCUSSED
//IF FF IS EXPEDITORS
if (processData.freight_carrier_code == "EXPD") {
  if (processData.carrier_scac_expd != "VLSF") {
    var arr1 = [];
    for (var i = 0; i < processData.hbol_array_expd.length; i++) {
      arr1.push(processData.hbol_array_expd[i]);
    }

    if (processData.mbol_expd_array.length == 1) {
      var arr2 = [];
      for (var i = 0; i < processData.poArray_expd.length; i++) {
        arr2.push(processData.poArray_expd[i]);
      }

      var requestCombination =
        processData.container_no_expd + "_" + processData.mbol_expd;
      
      for (var i = 0; i < dataStoreData.length; i++) {
        if (dataStoreData[i].key == requestCombination) {
          // update generic process master
          var message = {
            referenceNumber:
              processData.container_no_expd + "_" + processData.mbol_expd,
            processMasterCode: "update_to_trn",
            flowCode: "hold_to_update",
            moveFlowForward: true,
            processData: {
              //optional
              container_id: processData.container_no_expd,
              bl_number: processData.mbol_expd,
              del_array: arr2,
              house_bol: arr1[0],
              ff_code: processData.freight_carrier_code,
              roadDelivered: processData.roadDelivered_expd,
              leg: "1",
              dataFeed: "vendorToESCO",
            },
          };
          throwIntermediateMessageEvent(
            "Intermediate Message Event",
            JSON.stringify(message),
            true
          );
        } else {
          // add to datastore
          var dataObj = {
            dataStoreMasterCode: "gen_master",
            data: {
              unique_reference_number: requestCombination,
            },
          };
          dataStore.push(dataObj);

          //add generic process
          var message = [
            {
              referenceNumber:
                processData.container_no_expd + "_" + processData.mbol_expd,
              processDefinitionCode: "update_to_trn",
              processData: {
                //optional
                container_id: processData.container_no_expd,
                bl_number: processData.mbol_expd,
                del_array: arr2,
                house_bol: arr1[0],
                roadDelivered: processData.roadDelivered_expd,
                ff_code: processData.freight_carrier_code,
                dataFeed: "vendorToESCO",
              },
              processUserMappings: [],
            },
          ];
          throwMessageEvent(
            "Start Message Event",
            JSON.stringify(message),
            true
          );
        }
      }
    }
  }
}
