using System.Collections;

void TestThrowingEmptyReferencesList()
{
    List<A> emptyList = new();

    try
    {
        var first = emptyList.OrderByDescending(result => result.Timestamp).First();
    }
    catch (InvalidOperationException e)
    {
        Console.WriteLine("Throw on First for list of references");
    }

    try
    {
        var firstOrDefault = emptyList.OrderByDescending(result => result.Timestamp).FirstOrDefault();
    }
    catch (InvalidOperationException e)
    {
        Console.WriteLine("Throw on FirstOrDefault for list of references");
    }

    try
    {
        var maxBy = emptyList.MaxBy(result => result.Timestamp);
    }
    catch (InvalidOperationException e)
    {
        Console.WriteLine("Throw on MaxBy for list of references");
    }
}

void TestThrowingEmptyValuesList()
{
    List<int> emptyList = new();

    try
    {
        var first = emptyList.OrderByDescending(i => i * 2).First();
    }
    catch (InvalidOperationException e)
    {
        Console.WriteLine("Throw on First for list of values");
    }

    try
    {
        var firstOrDefault = emptyList.OrderByDescending(i => i * 2).FirstOrDefault();
    }
    catch (InvalidOperationException e)
    {
        Console.WriteLine("Throw on FirstOrDefault for list of values");
    }

    try
    {
        var maxBy = emptyList.MaxBy(i => i * 2);
    }
    catch (InvalidOperationException e)
    {
        Console.WriteLine("Throw on MaxBy for list of values");
    }
}


TestThrowingEmptyReferencesList();
TestThrowingEmptyValuesList();


internal class A
{
    public DateTime Timestamp { get; set; }
}