package main

import (
  "fmt"
  "math/rand"
  "sync"
  "time"
)

// Structure representing a module of the space shuttle
type Module struct {
  number int
  name   string
}

// Activate the specified module
func (m *Module) Activate() {
  fmt.Printf("[%d] Activating %s module...\n", m.number, m.name)
  time.Sleep(time.Duration(rand.Intn(4)+1) * time.Second) // Simulate a random activation time
  fmt.Printf("[%d] %s module activated\n", m.number, m.name)
}

// Activate the specified modules
func activateModules(modules []*Module, done chan bool) {
  var wg sync.WaitGroup
  wg.Add(len(modules))

  // Activate the modules in parallel
  for _, module := range modules {
    go func(m *Module) {
      defer wg.Done()
      m.Activate()
    }(module)
  }

  // Wait until all modules have been activated
  wg.Wait()

  // Notify the completion of the module activation procedure
  done <- true
}

func main() {
  fmt.Println("Starting space shuttle module activation procedure...")
  rand.Seed(time.Now().UnixNano()) // Initialize the random number generator

  // Define the space shuttle modules
  modules := []*Module{
    {1, "Propulsion"},
    {2, "Communication"},
    {3, "Life support"},
    {4, "Navigation"},
    {5, "Exploration"},
    {6, "Sensors"},
    {7, "Defense system"},
    {8, "Maintenance system"},
    {9, "Power generation system"},
    {10, "Waste management system"},
  }

  // Create the channel for the completion of the module activation procedure
  done := make(chan bool)

  // Activate the space shuttle modules
  go activateModules(modules, done)

  // Wait for the completion of the module activation procedure
  <-done

  fmt.Println("Module activation procedure completed")
}
