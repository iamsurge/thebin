class Fish:
    def __init__(self, size:int, name:str):
        self.size:int = int(size)
        self.name:str = name

    def eat_fish(self, other_fish):
        if self.size > other_fish.size:
            return self
        else:
            return other_fish 

    def feed(self, pellet_size:int):
        pass
        self.size += int(pellet_size)

def main():
    t = int(input())

    for i in range(t):
        lst_fish = dict()
        n_fishes, n_evt = [int(x) for x in input().split()]

        for _ in range(n_fishes):
            name_f, size_f = input().split(maxsplit=1)

            lst_fish[name_f] = Fish(size_f, name_f)
            

        for _ in range(n_evt):
            evt, evt_args = input().split(maxsplit=1)
            evt = evt.strip()

            if evt == 'feed':
                args = evt_args.split()
                lst_fish[args[0]].feed(int(args[1]))

            elif evt == 'eat':
                args = evt_args.split()

                winning:Fish = lst_fish[args[0]].eat_fish(lst_fish[args[1]])
                args.remove(winning.name)
                winning.feed(int(lst_fish[args[0]].size))
                del lst_fish[args[0]]



        print("Case #%d: Remaining fish(es): %d" % (i+1, len(lst_fish)))
        lst_fish_sorted = sorted(lst_fish.items(), key=lambda lst: lst[1], reverse=True)

        for key, value in lst_fish_sorted:
            print(key, value.size)



if __name__ == '__main__':
    main()


'''
Test Case
2
3 2
fish_a 1
fish_b 2
fish_c 3
eat fish_c fish_a
eat fish_c fish_b
3 2
fish_a 1
fish_b 1
fish_c 1
eat fish_a fish_b
eat fish_b fish_c
'''