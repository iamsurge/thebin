海阔视界规则分享，当前分享的是：二级页面详情￥page_detail￥筛选@@{"data":"{\"associatedModelsMapForJoinTable\":{},\"associatedModelsMapWithFK\":{},\"associatedModelsMapWithoutFK\":{},\"fieldsToSetToDefault\":[],\"id\":0,\"last_chapter_rule\":\".module-play-list-content&&a,-1&&Text.js:'更新至：'+input\",\"listToClearAssociatedFK\":[],\"listToClearSelfFK\":[],\"pageList\":[{\"col_type\":\"movie_3\",\"name\":\"动态分类\",\"path\":\"dt\",\"rule\":\"const empty = \\\"hiker://empty\\\"\\n\\ntry {\\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\\n} catch (e) {\\n    var categories = pdfa(html, 大类定位)\\n}\\n\\nlet init_cate = []\\n\\nfor (let i = 0; i < 20; i++) {\\n    init_cate.push(\\\"0\\\")\\n}\\n\\nconst fold = getMyVar('header.group', \\\"0\\\")\\nconst cate_temp_json = getMyVar('header.category', JSON.stringify(init_cate))\\nconst cate_temp = JSON.parse(cate_temp_json)\\n\\nif (parseInt(page) === 1) {\\n\\nd.push({\\n    title: \\\"🔍\\\",\\n    url: \\\"'hiker://search?s='+input+'&rule=蓝莓の影视♔'\\\",\\n    col_type: \\\"input\\\",\\n    desc: \\\"搜索你想要的影视、动漫、综艺等...\\\",\\n    });\\n\\n    d.push({\\n        title: fold === '1' ? '““””<b><span style=\\\"color: #FF0000\\\">📬</span></b>' : '““””<b><span style=\\\"color: #1aad19\\\">📪</span></b>',\\n        url: $('#noLoading#').lazyRule((fold) => {\\n            putMyVar('header.group', fold === '1' ? '0' : '1');\\n            refreshPage(false);\\n            return \\\"hiker://empty\\\"\\n        }, fold),\\n        col_type: 'scroll_button',\\n    })\\n\\n\\n    categories.forEach((category, index) => {\\n        let sub_categories = pdfa(category, 小类定位);\\n        if (index === 0) {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        let new_cate = []\\n                        params.cate_temp.forEach((cate, index) => {\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\"0\\\")\\n                        })\\n                        putMyVar('header.category', JSON.stringify(new_cate))\\n                        putMyVar('header.url', input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        } else if (fold === '1') {\\n            sub_categories.forEach((item, key) => {\\n                let title = pdfh(item, 分类标题)\\n                d.push({\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\"color: ' + 分类颜色 + '\\\">' + title + '</span></b>' : title,\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\n                        params.cate_temp[params.index] = params.key.toString()\\n\\n                        putMyVar('header.category', JSON.stringify(params.cate_temp))\\n                        putMyVar('header.url', input)\\n                        refreshPage(true)\\n                        return \\\"hiker://empty\\\"\\n                    }, {\\n                        cate_temp: cate_temp,\\n                        index: index,\\n                        key: key,\\n                        page: page,\\n                    }),\\n                    col_type: 'scroll_button',\\n                })\\n            })\\n            d.push({\\n                col_type: \\\"blank_block\\\"\\n            });\\n        }\\n    })\\n}\"},{\"col_type\":\"movie_3\",\"name\":\"解析页面\",\"path\":\"lazy\",\"rule\":\"var lazy = $('').lazyRule((MY_HOME) => {\\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\\n    eval(request(MY_HOME + '/static/js/playerconfig.js'));\\n    var jx = MacPlayerConfig.player_list[html.from].parse;\\n    if (jx == '') {\\n        jx = MacPlayerConfig.parse\\n    }\\n    if (html.from == '1920l') {\\n        jx = MY_HOME+'/lgplay/?url='\\n    }\\n    log(jx)\\n    if (/m3u8|mp4/.test(html.url)) {\\n        var play = html.url\\n    } else if (/play/.test(jx)) {\\n        eval(\\\"var config =\\\" + fetch(\\\"hiker://files/cache/MyParseSet.json\\\"));\\n        eval(fetch(config.cj))\\n        var play = ParseS.maoss(jx + html.url, false, 'A42EAC0C2B408472')\\n    } else {\\n        var play = request(jx + html.url).match(/url\\\":.*\\\"(.*?)\\\"/)[1]\\n    }\\n    if (/mgtv/.test(html.url)) {\\n        play += ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\\n\\n    } else if (/bili/.test(html.url)) {\\n        play += ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}'\\n    }\\n    return play\\n}, MY_HOME);\\n\"},{\"col_type\":\"movie_3\",\"name\":\"二级页面\",\"path\":\"ej\",\"rule\":\"js:\\nvar d = [];\\nvar html = getResCode();\\n\\neval(JSON.parse(request('hiker://page/lazy')).rule);\\n//线路名列表的定位\\nvar arts = parseDomForArray(html, 'body&&.module-tab-item');\\n\\n//线路名列表名称的定位\\nvar tabs = [];\\nfor (var i in arts) {\\n    tabs.push(parseDomForHtml(arts[i], 'span&&Text'))\\n}\\n\\n//播放列表的列表的定位\\nvar conts = parseDomForArray(html, 'body&&.module-play-list-content');\\nvar lists = [];\\nfor (var i in conts) {\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\n}\\n\\nvar 导演 = parseDomForHtml(html, '.module-info-tag&&Text').replace(/\\\\//g,' ').replace('  ','');\\n\\nvar 主演 = parseDomForHtml(html, '.module-info-item,1&&Text').replace(/\\\\//g,' ').replace('  ','');\\n\\nvar 更新 = parseDomForHtml(html, '.module-info-item,4&&Text');\\n\\nvar 状态 = parseDomForHtml(html, '.module-info-item,3&&Text');\\n\\nvar 图片 = parseDom(html, '.lazy&&data-original');\\n\\nvar 简介 = parseDomForHtml(html, '.module-info-introduction-content&&Text').replace('[收起部分]','');\\n\\nvar Color = \\\"#f13b66a\\\";\\nvar Color1 = \\\"#098AC1\\\";\\nfunction getHead(title) {\\n    return '‘‘’’<strong><font color=\\\"' + Color + '\\\">' + title + '</front></strong>';\\n}\\nlet line_model = 8;\\nlet line_type_model = 'blank_block';\\nd.push({\\n    title: 导演 + '\\\\n' + 主演,\\n    desc: 更新 + '\\\\n' + 状态,\\n    pic_url: 图片,\\n    url:MY_URL,\\n    col_type: 'movie_1_vertical_pic_blur',\\n    extra:{gradient: true}\\n});\\nd.push({\\n    title: '‘‘’’<small><font color=\\\"#ff148e8e\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\"red\\\">详情</font></small></small>',\\n    url: 'hiker://empty#' + '\\\\n' + 简介 + `@rule=js:var res = {}; var d = [];d.push({title:'影片简介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\n    col_type: 'text_1'\\n});\\n\\n\\nfor (let i = 0; i < line_model; i++) {\\n    d.push({\\n        col_type: line_type_model\\n    })\\n}\\nfunction setTabs(tabs, vari) {\\n    for (var i in tabs) {\\n        var url = \\\"#noLoading#@lazyRule=.js:putVar('\\\" + vari + \\\"', '\\\" + i + \\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\";\\n        d.push({\\n            title: getVar(vari, '0') == i ? getHead(tabs[i]) : tabs[i],\\n            url: url,\\n            col_type: 'scroll_button'\\n        })\\n    }\\n    \\n}\\nfunction setLists(lists, index) {\\n    d.push({\\n        col_type: 'line_blank'\\n    })\\n}\\nif (getVar('shsort') == '1') {\\n    var sx = '‘‘’’<font color=\\\"#6639a6\\\">排序</font></small>' + '<small><font color=\\\"#f6416c\\\">↑</font></small>' + '<small><font color=\\\"#2b2e4a\\\">↓</font></small>';\\n} else {\\n    var sx = '‘‘’’<font color=\\\"#0aa344\\\">排序</font></small>' + '<small><font color=\\\"#2b2e4a\\\">↑</font></small>' + '<small><font color=\\\"#f6416c\\\">↓</font></small>';\\n}\\n\\nvar Color = \\\"#3490de\\\";\\nvar Color1 = \\\"#ea5455\\\";\\n\\nfunction setLists(lists, index) {\\n    d.push({\\n        title: '‘‘’’<span style=\\\"color:' + Color1 + '\\\"><small>选集列表</small>' + '\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t\\\\t<span style=\\\"float:right\\\">' + '<small>' + sx + '</small>',\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功';'#noHistory#hiker://empty'`,\\n        col_type: 'text_center_1'\\n    })\\n    var list = lists[index];\\n\\n    if (getVar('shsort') == '1') {\\n        try {\\n            for (var j = list.length - 1; j >= 0; j--) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url:parseDom(list[j], 'a&&href')+lazy,\\n                    col_type: list.length > 3 ? 'text_4' : 'text_2'\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n    } else {\\n        try {\\n            for (var j = 0; j < list.length; j++) {\\n                d.push({\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\n                    url:parseDom(list[j], 'a&&href') +lazy,extra: {\\n                    blockRules: ['.css', '.gif', '.jpg', '.jpeg', '.png', '.ico', '.svg', '.m3u8', '.mp4']\\n                },\\n                    col_type: list.length > 3 ? 'text_4' : 'text_2'\\n                });\\n            }\\n        } catch (e) {\\n            d.push({\\n                title: '没有选集哟，不信点图片去看看👀',\\n                col_type: 'text_center_1'\\n            });\\n        }\\n\\n    }\\n}\\nsetTabs(tabs, MY_URL);\\nsetLists(lists, getVar(MY_URL, '0'));\\nd.push({\\n    title: '<br>',\\n    col_type: 'rich_text'\\n});\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"导航页面\",\"path\":\"category\",\"rule\":\"js:\\nvar d = [];\\nconst base_url = 'https://www.cybfun.top/vodshow/2--------2---.html';\\nvar getRangeColors = function() {       \\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \\n}\\nconst 分类颜色 = getRangeColors()\\nconst 大类定位 = 'body&&.navbar-items'\\nconst 小类定位 = 'body&&a:not(:matches(首|APP))'\\nconst 拼接分类 = 'body&&.module-class-items'\\nconst 拼接分类2 = 'body&&.nav'\\nconst 拼接定位 = 'body&&a'\\nconst 分类标题 = 'a&&Text'\\nconst 分类链接 = 'a&&href'\\nMY_URL=base_url;\\nlet true_url = getMyVar('header.url', MY_URL);\\nconst page = MY_PAGE;\\nif(getMyVar('header.url')){\\ntrue_url = true_url.replace(/type\\\\/(\\\\d+)\\\\.html/, 'show/$1-----------.html').replace(/---(\\\\d*)\\\\.html/, +page + '---.html')};\\n\\n\\n//log(true_url);\\nvar html = fetch(true_url, {\\n    headers: {\\n        'User-Agent': MOBILE_UA\\n    }\\n});\\n//log(html);\\neval(JSON.parse(request('hiker://page/dt')).rule);\\nconst list = pdfa(html, '.module-items&&.module-item')\\nlist.forEach(item => {  \\nvar urll =pd(item, 'a&&href') + '#immersiveTheme#';\\n    d.push({\\n        title: pdfh(item, 'a&&title'),\\n        desc: pdfh(item, '.module-item-text||.module-item-note&&Text'),\\n        img: pd(item, 'img||.lazy&&data-src||data-original') + \\\"@Referer=\\\",\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\n        extra: {\\n            url: urll,\\n        },\\n        col_type: 'movie_3_marquee',\\n    })\\n})\\nsetResult(d);\"},{\"col_type\":\"movie_3\",\"name\":\"搜索页面\",\"path\":\"ss\",\"rule\":\"js:\\nvar d = [];\\nMY_URL = MY_URL.split('##');\\nconst host = MY_URL[1];\\nvar html = fetch(host, {\\n    headers: {\\n        'User-Agent': MOBILE_UA\\n    }\\n});\\n\\nvar Icon_prefix = 'https://lanmeiguojiang.com/tubiao/more/';\\n\\nd.push({\\n            title: '返回',\\n            url: $().lazyRule(() => {\\n                refreshPage();     \\n                back(false)\\n                    return \\\"toast://返回规则首页\\\"  \\n            }),\\n            pic_url: Icon_prefix + '47.png'+ \\\"@Referer=\\\",\\n            col_type: \\\"icon_small_3\\\",\\n                    \\n        });\\n\\n\\nd.push({\\n            title: '筛选',\\n            url: 'hiker://page/category?page=fypage#noHistory#',\\n            pic_url: Icon_prefix + '213.png' + \\\"@Referer=\\\",\\n            col_type: \\\"icon_small_3\\\"\\n        });\\n\\nd.push({\\n            title: '历史',\\n            url: 'hiker://history',\\n            pic_url: Icon_prefix + '192.png' + \\\"@Referer=\\\",\\n            col_type: \\\"icon_small_3\\\"\\n        });\\n\\nd.push({\\n    title: \\\"🔍\\\",\\n    url: \\\"'hiker://search?s='+input+'&rule=次元动漫♔'\\\",\\n    col_type: \\\"input\\\",\\n    desc: \\\"搜索你想要的影视、动漫、综艺等...\\\",\\n});\\n    d.push({\\n        title: '<span style=\\\"color:#ff6600\\\"><b>\\\\t热搜榜\\\\t\\\\t\\\\t</b></span>',\\n        url: \\\"hiker://empty\\\",\\n        pic_url: 'https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3779990328,1416553241&fm=179&app=35&f=PNG?w=60&h=70&s=E7951B62A4639D153293A4E90300401B',\\n        col_type: 'icon_small_3'\\n    });\\nvar urll ='https://www.cybfun.top/voddetail/2889.html'+pdfh('a&&href') + '#immersiveTheme#';\\n    d.push({\\n        title: '““””<span style=\\\"color:#ff3300\\\">1</span>\\t   作为恶役大小姐就该养魔王',\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\n        extra: {url: urll},\\n        col_type: 'text_1',\\n    });\\nvar urll ='https://www.cybfun.top/voddetail/4219.html'+pdfh('a&&href') + '#immersiveTheme#';\\n    d.push({\\n        title: '““””<span style=\\\"color:#ff4400\\\">2</span>\\t   被勇者队伍开除的驯兽师，邂逅最强种猫耳少女',\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\n        extra: {url: urll},\\n        col_type: 'text_1',\\n    });\\n\\nsetResult(d);\"}],\"saved\":false,\"title\":\"次元动漫♔\",\"version\":0,\"url\":\"hiker://page/category?page=fypage#noHistory#\",\"col_type\":\"movie_3\",\"find_rule\":\"js:\\nvar d = [];\\nconst base_url = 'https://www.cybfun.top/vodshow/2--------2---.html';\\nvar getRangeColors = function() {       \\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \\n}\\nconst 分类颜色 = getRangeColors()\\nconst 大类定位 = 'body&&.navbar-items'\\nconst 小类定位 = 'body&&a:not(:matches(首|APP))'\\nconst 拼接分类 = 'body&&.module-class-items'\\nconst 拼接分类2 = 'body&&.nav'\\nconst 拼接定位 = 'body&&a'\\nconst 分类标题 = 'a&&Text'\\nconst 分类链接 = 'a&&href'\\nMY_URL=base_url;\\nlet true_url = getMyVar('header.url', MY_URL);\\nconst page = MY_PAGE;\\nif(getMyVar('header.url')){\\ntrue_url = true_url.replace(/type\\\\/(\\\\d+)\\\\.html/, 'show/$1-----------.html').replace(/---(\\\\d*)\\\\.html/, +page + '---.html')};\\n\\n\\n//log(true_url);\\nvar html = fetch(true_url, {\\n    headers: {\\n        'User-Agent': MOBILE_UA\\n    }\\n});\\n//log(html);\\neval(JSON.parse(request('hiker://page/dt')).rule);\\nconst list = pdfa(html, '.module-items&&.module-item')\\nlist.forEach(item => {  \\nvar urll =pd(item, 'a&&href') + '#immersiveTheme#';\\n    d.push({\\n        title: pdfh(item, 'a&&title'),\\n        desc: pdfh(item, '.module-item-text||.module-item-note&&Text'),\\n        img: pd(item, 'img||.lazy&&data-src||data-original') + \\\"@Referer=\\\",\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\n        extra: {\\n            url: urll,\\n        },\\n        col_type: 'movie_3_marquee',\\n    })\\n})\\nsetResult(d);\",\"group\":\"🎐 夢\",\"ua\":\"mobile\",\"preRule\":\"\",\"pages\":\"[{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"动态分类\\\",\\\"path\\\":\\\"dt\\\",\\\"rule\\\":\\\"const empty = \\\\\\\"hiker://empty\\\\\\\"\\\\n\\\\ntry {\\\\n    var categories = pdfa(html, 大类定位).concat(pdfa(html, 拼接分类))\\\\n} catch (e) {\\\\n    var categories = pdfa(html, 大类定位)\\\\n}\\\\n\\\\nlet init_cate = []\\\\n\\\\nfor (let i = 0; i < 20; i++) {\\\\n    init_cate.push(\\\\\\\"0\\\\\\\")\\\\n}\\\\n\\\\nconst fold = getMyVar('header.group', \\\\\\\"0\\\\\\\")\\\\nconst cate_temp_json = getMyVar('header.category', JSON.stringify(init_cate))\\\\nconst cate_temp = JSON.parse(cate_temp_json)\\\\n\\\\nif (parseInt(page) === 1) {\\\\n\\\\nd.push({\\\\n    title: \\\\\\\"🔍\\\\\\\",\\\\n    url: \\\\\\\"'hiker://search?s='+input+'&rule=蓝莓の影视♔'\\\\\\\",\\\\n    col_type: \\\\\\\"input\\\\\\\",\\\\n    desc: \\\\\\\"搜索你想要的影视、动漫、综艺等...\\\\\\\",\\\\n    });\\\\n\\\\n    d.push({\\\\n        title: fold === '1' ? '““””<b><span style=\\\\\\\"color: #FF0000\\\\\\\">📬</span></b>' : '““””<b><span style=\\\\\\\"color: #1aad19\\\\\\\">📪</span></b>',\\\\n        url: $('#noLoading#').lazyRule((fold) => {\\\\n            putMyVar('header.group', fold === '1' ? '0' : '1');\\\\n            refreshPage(false);\\\\n            return \\\\\\\"hiker://empty\\\\\\\"\\\\n        }, fold),\\\\n        col_type: 'scroll_button',\\\\n    })\\\\n\\\\n\\\\n    categories.forEach((category, index) => {\\\\n        let sub_categories = pdfa(category, 小类定位);\\\\n        if (index === 0) {\\\\n            sub_categories.forEach((item, key) => {\\\\n                let title = pdfh(item, 分类标题)\\\\n                d.push({\\\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\\\\\"color: ' + 分类颜色 + '\\\\\\\">' + title + '</span></b>' : title,\\\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\\\n                        let new_cate = []\\\\n                        params.cate_temp.forEach((cate, index) => {\\\\n                            new_cate.push(index === 0 ? params.key.toString() : \\\\\\\"0\\\\\\\")\\\\n                        })\\\\n                        putMyVar('header.category', JSON.stringify(new_cate))\\\\n                        putMyVar('header.url', input)\\\\n                        refreshPage(true)\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, {\\\\n                        cate_temp: cate_temp,\\\\n                        key: key,\\\\n                        page: page,\\\\n                    }),\\\\n                    col_type: 'scroll_button',\\\\n                })\\\\n            })\\\\n            d.push({\\\\n                col_type: \\\\\\\"blank_block\\\\\\\"\\\\n            });\\\\n        } else if (fold === '1') {\\\\n            sub_categories.forEach((item, key) => {\\\\n                let title = pdfh(item, 分类标题)\\\\n                d.push({\\\\n                    title: key.toString() === cate_temp[index] ? '““””<b><span style=\\\\\\\"color: ' + 分类颜色 + '\\\\\\\">' + title + '</span></b>' : title,\\\\n                    url: $(pd(item, 分类链接) + '#noLoading#').lazyRule((params) => {\\\\n                        params.cate_temp[params.index] = params.key.toString()\\\\n\\\\n                        putMyVar('header.category', JSON.stringify(params.cate_temp))\\\\n                        putMyVar('header.url', input)\\\\n                        refreshPage(true)\\\\n                        return \\\\\\\"hiker://empty\\\\\\\"\\\\n                    }, {\\\\n                        cate_temp: cate_temp,\\\\n                        index: index,\\\\n                        key: key,\\\\n                        page: page,\\\\n                    }),\\\\n                    col_type: 'scroll_button',\\\\n                })\\\\n            })\\\\n            d.push({\\\\n                col_type: \\\\\\\"blank_block\\\\\\\"\\\\n            });\\\\n        }\\\\n    })\\\\n}\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"解析页面\\\",\\\"path\\\":\\\"lazy\\\",\\\"rule\\\":\\\"var lazy = $('').lazyRule((MY_HOME) => {\\\\n    var html = JSON.parse(request(input).match(/r player_.*?=(.*?)</)[1])\\\\n    eval(request(MY_HOME + '/static/js/playerconfig.js'));\\\\n    var jx = MacPlayerConfig.player_list[html.from].parse;\\\\n    if (jx == '') {\\\\n        jx = MacPlayerConfig.parse\\\\n    }\\\\n    if (html.from == '1920l') {\\\\n        jx = MY_HOME+'/lgplay/?url='\\\\n    }\\\\n    log(jx)\\\\n    if (/m3u8|mp4/.test(html.url)) {\\\\n        var play = html.url\\\\n    } else if (/play/.test(jx)) {\\\\n        eval(\\\\\\\"var config =\\\\\\\" + fetch(\\\\\\\"hiker://files/cache/MyParseSet.json\\\\\\\"));\\\\n        eval(fetch(config.cj))\\\\n        var play = ParseS.maoss(jx + html.url, false, 'A42EAC0C2B408472')\\\\n    } else {\\\\n        var play = request(jx + html.url).match(/url\\\\\\\":.*\\\\\\\"(.*?)\\\\\\\"/)[1]\\\\n    }\\\\n    if (/mgtv/.test(html.url)) {\\\\n        play += ';{User-Agent@Mozilla/5.0 (Windows NT 10.0)}'\\\\n\\\\n    } else if (/bili/.test(html.url)) {\\\\n        play += ';{User-Agent@Mozilla/5.0&&Referer@https://www.bilibili.com/}'\\\\n    }\\\\n    return play\\\\n}, MY_HOME);\\\\n\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"二级页面\\\",\\\"path\\\":\\\"ej\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nvar html = getResCode();\\\\n\\\\neval(JSON.parse(request('hiker://page/lazy')).rule);\\\\n//线路名列表的定位\\\\nvar arts = parseDomForArray(html, 'body&&.module-tab-item');\\\\n\\\\n//线路名列表名称的定位\\\\nvar tabs = [];\\\\nfor (var i in arts) {\\\\n    tabs.push(parseDomForHtml(arts[i], 'span&&Text'))\\\\n}\\\\n\\\\n//播放列表的列表的定位\\\\nvar conts = parseDomForArray(html, 'body&&.module-play-list-content');\\\\nvar lists = [];\\\\nfor (var i in conts) {\\\\n    lists.push(parseDomForArray(conts[i], 'body&&a'))\\\\n}\\\\n\\\\nvar 导演 = parseDomForHtml(html, '.module-info-tag&&Text').replace(/\\\\\\\\//g,' ').replace('  ','');\\\\n\\\\nvar 主演 = parseDomForHtml(html, '.module-info-item,1&&Text').replace(/\\\\\\\\//g,' ').replace('  ','');\\\\n\\\\nvar 更新 = parseDomForHtml(html, '.module-info-item,4&&Text');\\\\n\\\\nvar 状态 = parseDomForHtml(html, '.module-info-item,3&&Text');\\\\n\\\\nvar 图片 = parseDom(html, '.lazy&&data-original');\\\\n\\\\nvar 简介 = parseDomForHtml(html, '.module-info-introduction-content&&Text').replace('[收起部分]','');\\\\n\\\\nvar Color = \\\\\\\"#f13b66a\\\\\\\";\\\\nvar Color1 = \\\\\\\"#098AC1\\\\\\\";\\\\nfunction getHead(title) {\\\\n    return '‘‘’’<strong><font color=\\\\\\\"' + Color + '\\\\\\\">' + title + '</front></strong>';\\\\n}\\\\nlet line_model = 8;\\\\nlet line_type_model = 'blank_block';\\\\nd.push({\\\\n    title: 导演 + '\\\\\\\\n' + 主演,\\\\n    desc: 更新 + '\\\\\\\\n' + 状态,\\\\n    pic_url: 图片,\\\\n    url:MY_URL,\\\\n    col_type: 'movie_1_vertical_pic_blur',\\\\n    extra:{gradient: true}\\\\n});\\\\nd.push({\\\\n    title: '‘‘’’<small><font color=\\\\\\\"#ff148e8e\\\\\\\">简介：' + 简介.substr(0, 55) + '...</font><small><font color=\\\\\\\"red\\\\\\\">详情</font></small></small>',\\\\n    url: 'hiker://empty#' + '\\\\\\\\n' + 简介 + `@rule=js:var res = {}; var d = [];d.push({title:'影片简介：'+ MY_URL.split('hiker://empty#')[1],col_type: 'long_text'});res.data = d; setHomeResult(res);`,\\\\n    col_type: 'text_1'\\\\n});\\\\n\\\\n\\\\nfor (let i = 0; i < line_model; i++) {\\\\n    d.push({\\\\n        col_type: line_type_model\\\\n    })\\\\n}\\\\nfunction setTabs(tabs, vari) {\\\\n    for (var i in tabs) {\\\\n        var url = \\\\\\\"#noLoading#@lazyRule=.js:putVar('\\\\\\\" + vari + \\\\\\\"', '\\\\\\\" + i + \\\\\\\"');refreshPage(false);'toast://切换成功！';'#noHistory#hiker://empty'\\\\\\\";\\\\n        d.push({\\\\n            title: getVar(vari, '0') == i ? getHead(tabs[i]) : tabs[i],\\\\n            url: url,\\\\n            col_type: 'scroll_button'\\\\n        })\\\\n    }\\\\n    \\\\n}\\\\nfunction setLists(lists, index) {\\\\n    d.push({\\\\n        col_type: 'line_blank'\\\\n    })\\\\n}\\\\nif (getVar('shsort') == '1') {\\\\n    var sx = '‘‘’’<font color=\\\\\\\"#6639a6\\\\\\\">排序</font></small>' + '<small><font color=\\\\\\\"#f6416c\\\\\\\">↑</font></small>' + '<small><font color=\\\\\\\"#2b2e4a\\\\\\\">↓</font></small>';\\\\n} else {\\\\n    var sx = '‘‘’’<font color=\\\\\\\"#0aa344\\\\\\\">排序</font></small>' + '<small><font color=\\\\\\\"#2b2e4a\\\\\\\">↑</font></small>' + '<small><font color=\\\\\\\"#f6416c\\\\\\\">↓</font></small>';\\\\n}\\\\n\\\\nvar Color = \\\\\\\"#3490de\\\\\\\";\\\\nvar Color1 = \\\\\\\"#ea5455\\\\\\\";\\\\n\\\\nfunction setLists(lists, index) {\\\\n    d.push({\\\\n        title: '‘‘’’<span style=\\\\\\\"color:' + Color1 + '\\\\\\\"><small>选集列表</small>' + '\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t\\\\\\\\t<span style=\\\\\\\"float:right\\\\\\\">' + '<small>' + sx + '</small>',\\\\n        url: `#noLoading#@lazyRule=.js:let conf = getVar('shsort');if(conf=='1'){putVar({key:'shsort', value:'0'});}else{putVar({key:'shsort', value:'1'})};refreshPage();'toast://切换排序成功';'#noHistory#hiker://empty'`,\\\\n        col_type: 'text_center_1'\\\\n    })\\\\n    var list = lists[index];\\\\n\\\\n    if (getVar('shsort') == '1') {\\\\n        try {\\\\n            for (var j = list.length - 1; j >= 0; j--) {\\\\n                d.push({\\\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\\\n                    url:parseDom(list[j], 'a&&href')+lazy,\\\\n                    col_type: list.length > 3 ? 'text_4' : 'text_2'\\\\n                });\\\\n            }\\\\n        } catch (e) {\\\\n            d.push({\\\\n                title: '没有选集哟，不信点图片去看看👀',\\\\n                col_type: 'text_center_1'\\\\n            });\\\\n        }\\\\n    } else {\\\\n        try {\\\\n            for (var j = 0; j < list.length; j++) {\\\\n                d.push({\\\\n                    title: parseDomForHtml(list[j], 'a&&Text').replace(/第|集|话|期/g, ''),\\\\n                    url:parseDom(list[j], 'a&&href') +lazy,extra: {\\\\n                    blockRules: ['.css', '.gif', '.jpg', '.jpeg', '.png', '.ico', '.svg', '.m3u8', '.mp4']\\\\n                },\\\\n                    col_type: list.length > 3 ? 'text_4' : 'text_2'\\\\n                });\\\\n            }\\\\n        } catch (e) {\\\\n            d.push({\\\\n                title: '没有选集哟，不信点图片去看看👀',\\\\n                col_type: 'text_center_1'\\\\n            });\\\\n        }\\\\n\\\\n    }\\\\n}\\\\nsetTabs(tabs, MY_URL);\\\\nsetLists(lists, getVar(MY_URL, '0'));\\\\nd.push({\\\\n    title: '<br>',\\\\n    col_type: 'rich_text'\\\\n});\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"导航页面\\\",\\\"path\\\":\\\"category\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nconst base_url = 'https://www.cybfun.top/vodshow/2--------2---.html';\\\\nvar getRangeColors = function() {       \\\\n    return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).substr(-6);     \\\\n}\\\\nconst 分类颜色 = getRangeColors()\\\\nconst 大类定位 = 'body&&.navbar-items'\\\\nconst 小类定位 = 'body&&a:not(:matches(首|APP))'\\\\nconst 拼接分类 = 'body&&.module-class-items'\\\\nconst 拼接分类2 = 'body&&.nav'\\\\nconst 拼接定位 = 'body&&a'\\\\nconst 分类标题 = 'a&&Text'\\\\nconst 分类链接 = 'a&&href'\\\\nMY_URL=base_url;\\\\nlet true_url = getMyVar('header.url', MY_URL);\\\\nconst page = MY_PAGE;\\\\nif(getMyVar('header.url')){\\\\ntrue_url = true_url.replace(/type\\\\\\\\/(\\\\\\\\d+)\\\\\\\\.html/, 'show/$1-----------.html').replace(/---(\\\\\\\\d*)\\\\\\\\.html/, +page + '---.html')};\\\\n\\\\n\\\\n//log(true_url);\\\\nvar html = fetch(true_url, {\\\\n    headers: {\\\\n        'User-Agent': MOBILE_UA\\\\n    }\\\\n});\\\\n//log(html);\\\\neval(JSON.parse(request('hiker://page/dt')).rule);\\\\nconst list = pdfa(html, '.module-items&&.module-item')\\\\nlist.forEach(item => {  \\\\nvar urll =pd(item, 'a&&href') + '#immersiveTheme#';\\\\n    d.push({\\\\n        title: pdfh(item, 'a&&title'),\\\\n        desc: pdfh(item, '.module-item-text||.module-item-note&&Text'),\\\\n        img: pd(item, 'img||.lazy&&data-src||data-original') + \\\\\\\"@Referer=\\\\\\\",\\\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\\\n        extra: {\\\\n            url: urll,\\\\n        },\\\\n        col_type: 'movie_3_marquee',\\\\n    })\\\\n})\\\\nsetResult(d);\\\"},{\\\"col_type\\\":\\\"movie_3\\\",\\\"name\\\":\\\"搜索页面\\\",\\\"path\\\":\\\"ss\\\",\\\"rule\\\":\\\"js:\\\\nvar d = [];\\\\nMY_URL = MY_URL.split('##');\\\\nconst host = MY_URL[1];\\\\nvar html = fetch(host, {\\\\n    headers: {\\\\n        'User-Agent': MOBILE_UA\\\\n    }\\\\n});\\\\n\\\\nvar Icon_prefix = 'https://lanmeiguojiang.com/tubiao/more/';\\\\n\\\\nd.push({\\\\n            title: '返回',\\\\n            url: $().lazyRule(() => {\\\\n                refreshPage();     \\\\n                back(false)\\\\n                    return \\\\\\\"toast://返回规则首页\\\\\\\"  \\\\n            }),\\\\n            pic_url: Icon_prefix + '47.png'+ \\\\\\\"@Referer=\\\\\\\",\\\\n            col_type: \\\\\\\"icon_small_3\\\\\\\",\\\\n                    \\\\n        });\\\\n\\\\n\\\\nd.push({\\\\n            title: '筛选',\\\\n            url: 'hiker://page/category?page=fypage#noHistory#',\\\\n            pic_url: Icon_prefix + '213.png' + \\\\\\\"@Referer=\\\\\\\",\\\\n            col_type: \\\\\\\"icon_small_3\\\\\\\"\\\\n        });\\\\n\\\\nd.push({\\\\n            title: '历史',\\\\n            url: 'hiker://history',\\\\n            pic_url: Icon_prefix + '192.png' + \\\\\\\"@Referer=\\\\\\\",\\\\n            col_type: \\\\\\\"icon_small_3\\\\\\\"\\\\n        });\\\\n\\\\nd.push({\\\\n    title: \\\\\\\"🔍\\\\\\\",\\\\n    url: \\\\\\\"'hiker://search?s='+input+'&rule=次元动漫♔'\\\\\\\",\\\\n    col_type: \\\\\\\"input\\\\\\\",\\\\n    desc: \\\\\\\"搜索你想要的影视、动漫、综艺等...\\\\\\\",\\\\n});\\\\n    d.push({\\\\n        title: '<span style=\\\\\\\"color:#ff6600\\\\\\\"><b>\\\\\\\\t热搜榜\\\\\\\\t\\\\\\\\t\\\\\\\\t</b></span>',\\\\n        url: \\\\\\\"hiker://empty\\\\\\\",\\\\n        pic_url: 'https://ss1.baidu.com/6ONXsjip0QIZ8tyhnq/it/u=3779990328,1416553241&fm=179&app=35&f=PNG?w=60&h=70&s=E7951B62A4639D153293A4E90300401B',\\\\n        col_type: 'icon_small_3'\\\\n    });\\\\nvar urll ='https://www.cybfun.top/voddetail/2889.html'+pdfh('a&&href') + '#immersiveTheme#';\\\\n    d.push({\\\\n        title: '““””<span style=\\\\\\\"color:#ff3300\\\\\\\">1</span>\\\\t   作为恶役大小姐就该养魔王',\\\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\\\n        extra: {url: urll},\\\\n        col_type: 'text_1',\\\\n    });\\\\nvar urll ='https://www.cybfun.top/voddetail/4219.html'+pdfh('a&&href') + '#immersiveTheme#';\\\\n    d.push({\\\\n        title: '““””<span style=\\\\\\\"color:#ff4400\\\\\\\">2</span>\\\\t   被勇者队伍开除的驯兽师，邂逅最强种猫耳少女',\\\\n        url: 'hiker://page/ej#noHistory##immersiveTheme#',\\\\n        extra: {url: urll},\\\\n        col_type: 'text_1',\\\\n    });\\\\n\\\\nsetResult(d);\\\"}]\",\"proxy\":\"\"}","title":"筛选"}