from typing import Type


class APIError(Exception):
    errors: dict[int, Type["APIError"]] = {}

    def __init_subclass__(cls, **kwargs):
        if not kwargs.get("code"):
            raise ValueError("APIError subclasses must have a code")
        cls.errors[kwargs["code"]] = cls

    @classmethod
    def match(cls, code: int):
        return cls.errors.get(code)


class UserNotFound(APIError, code=404):
    def __init__(self, message, url):
        self.url = url
        super().__init__(message)

class UserFound(APIError, code=200):
    def __init__(self, message, success_message, another_thing):
        self.success_message = success_message
        self.another_thing = another_thing
        super().__init__(message)


obj1 = APIError.match(404)
try:
    raise obj1('man, that was sad', 'given\\url')
except obj1:
    print('first exception raised ok')
obj2 = APIError.match(200)
try:
    raise obj2('boom', 'somehow it worked')
except obj2:
    print('acc it does not work')
