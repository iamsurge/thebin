vector<vector<ll>> g;
vector<ll> used, sz;
vector<ll> color;
vector<pair <ll, ll> > kom;

void dfs(ll v, ll clr) {
    used[v] = 1;
    sz[v] = 1;
    color[v] = clr;
    for (auto to : g[v]) {
        if (!used[to]) {
            dfs(to, clr);
            sz[v] += sz[to];
        }
    }
}


void solve() {
    ll n, m, clr = 0;
    cin >> n >> m;
    g.resize(n);
    used.resize(n, 0);
    sz.resize(n, 0);
    color.resize(n);
    vector<pair <int, int> > ed(m);
    for (ll i = 0; i < m; i++) {
        ll x, y;
        cin >> x >> y;
        --x; --y;
        g[x].push_back(y);
        g[y].push_back(x);
        ed[i] = { x,y };
    }
    for (ll i = 0; i < n; i++) {
        if (!used[i]) {
            dfs(i, clr);
            kom.push_back({ i, sz[i] });
            clr++;
        }
    }
    ll q;
    cin >> q;
    while (q--) {
        ll e;
        cin >> e;
        --e;
        ll v = ed[e].first;
        ll u = ed[e].second;
        clr = color[v];
        if (sz[v] > sz[u]) {
            cout << sz[u] * (kom[clr].second - sz[u]) << endl;
        }
        else {
            cout << sz[v] * (kom[clr].second - sz[v]) << endl;
        }
    }
}