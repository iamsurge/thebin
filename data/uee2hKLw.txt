bool ProcessNPCInfoXMLFile()
{
	if (!AionInfoDB.IsOpen())
		OpenAionInfoDB();

	AionInfoDB_Updater_mutex.lock();
	printf("AionInfoDB:: - Adding NPCInfo...      [ This may take some time ]");

	if (!DoDataFilesExist(DATAFILE_NPCINFO))
	{
		AionInfoDB_Updater_mutex.unlock();
		ExtractDataFilesFromClient(DATAFILE_NPCINFO);
		AionInfoDB_Updater_mutex.lock();
	}
	
	CppSQLite3Buffer bufSQL;
	TiXmlNode* node = 0;
	TiXmlElement* element = 0;
	char buf[MAX_STRING] = {0};
	strcpy(buf,GetDecloakedString(XSTR_TO_CLIENTDATADIR));

	char NPCInfoXMLFileName[MAX_PATH];				sprintf(NPCInfoXMLFileName,buf,ModulePath,GetDecloakedString(XSTR_AIONNPCINFOXML));


	int id;							string name;					string desc;					string disk_type;					string ui_type;					string cursor_type;
	string fxc_type;				string ui_race_type;			int erect;						int scale;							float altitude;					float move_speed_normal_walk;
	float move_speed_normal_run;	float move_speed_combat_run;	int hpgauge_level;				int ammo_speed;						int magical_skill_boost;		string game_lang;
	string ai_name;					string quest_ai_name;			string tribe;					float sensory_range;				float attack_range;				float attack_rate;
	string npc_type;				float talking_distance;			string abyss_npc_type;			string ment;						int undetectable;				int give_item_proc;
	int remove_item_option;			int artifact_id;				string user_animation;			string spawn_animation;				int use_script;					string bindstone_type;
	int bindstone_capacity;			int bindstone_usecount;			int check_can_see;				int attack_delay;					int magical_skill_boost_resist;	string npc_title;
	int hide_path;

	
	TiXmlDocument doc(NPCInfoXMLFileName);
	bool loadOkay = doc.LoadFile();
	if ( !loadOkay )
	{
		printf( GetDecloakedString(XSTR_PROCESSGDATAXMLFILE_ERROR_1), NPCInfoXMLFileName, doc.ErrorDesc() );
		AionInfoDB_Updater_mutex.unlock();
		return false;
	}

	try 
	{
		AionInfoDB.execDML( "BEGIN TRANSACTION;" );
	}
	catch (CppSQLite3Exception& e)
	{
		printf("AionInfoDB:: Error beginning SQLite Transaction. (Error: %d:%s)",e.errorCode(),e.errorMessage());
		AionInfoDB_Updater_mutex.unlock();
		return false;
	}

	node = doc.RootElement();
	for (node = node->FirstChild(); node; node = node->NextSibling())
	{
		id = 0;						name.clear();				desc.clear();				disk_type.clear();			ui_type.clear();				cursor_type.clear();			fxc_type.clear();
		ui_race_type.clear();		erect = 0;					scale = 0;					altitude = 0.0f;			move_speed_normal_walk = 0.0f;	move_speed_normal_run = 0.0f;	move_speed_combat_run = 0.0f;
		hpgauge_level = 0;			ammo_speed = 0;				magical_skill_boost = 0;	game_lang.clear();			ai_name.clear();				quest_ai_name.clear();			tribe.clear();
		sensory_range = 0.0f;		attack_range = 0.0f;		npc_type.clear();			talking_distance = 0.0f;	abyss_npc_type.clear();			ment.clear();					undetectable = 0;
		give_item_proc = 0;			attack_rate = 0.0f;			remove_item_option = 0;		artifact_id = 0;			user_animation.clear();			spawn_animation.clear();		use_script = 0;			
		bindstone_type.clear();		bindstone_capacity = 0;		bindstone_usecount = 0;		check_can_see = 0;			attack_delay = 0;				magical_skill_boost_resist = 0;
		npc_title.clear();			hide_path = 0;


		for (element = node->FirstChildElement(); element; element = element->NextSiblingElement())
		{
			if (element && element->FirstChild())
			{
				if (!stricmp(element->Value(),"id"))
					id = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"name"))
					name = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"desc"))
					desc = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"disk_type"))
					disk_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"ui_type"))
					ui_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"cursor_type"))
					cursor_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"fxc_type"))
					fxc_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"ui_race_type"))
					ui_race_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"erect"))
					erect = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"scale"))
					scale = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"altitude"))
					altitude = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"move_speed_normal_walk"))
					move_speed_normal_walk = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"move_speed_normal_run"))
					move_speed_normal_run = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"move_speed_combat_run"))
					move_speed_combat_run = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"hpgauge_level"))
					hpgauge_level = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"ammo_speed"))
					ammo_speed = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"magical_skill_boost"))
					magical_skill_boost = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"game_lang"))
					game_lang = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"ai_name"))
					ai_name = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"quest_ai_name"))
					quest_ai_name = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"tribe"))
					tribe = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"sensory_range"))
					sensory_range = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"attack_range"))
					attack_range = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"npc_type"))
					npc_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"talking_distance"))
					talking_distance = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"abyss_npc_type"))
					abyss_npc_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"ment"))
					ment = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"undetectable"))
					undetectable = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"give_item_proc"))
					give_item_proc = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"attack_rate"))
					attack_rate = (float)atof(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"remove_item_option"))
					remove_item_option = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"artifact_id"))
					artifact_id = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"user_animation"))
					user_animation = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"spawn_animation"))
					spawn_animation = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"use_script"))
					use_script = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"bindstone_type"))
					bindstone_type = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"bindstone_capacity"))
					bindstone_capacity = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"bindstone_usecount"))
					bindstone_usecount = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"check_can_see"))
					check_can_see = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"attack_delay"))
					attack_delay = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"magical_skill_boost_resist"))
					magical_skill_boost_resist = atoi(element->FirstChild()->Value());
				else if (!stricmp(element->Value(),"npc_title"))
					npc_title = element->FirstChild()->Value();
				else if (!stricmp(element->Value(),"hide_path"))
					hide_path = atoi(element->FirstChild()->Value());
			}
		}

		try 
		{
			bufSQL.format("insert into NPCInfo (id,desc,name,disk_type,ui_type,cursor_type,fxc_type,ui_race_type,erect,scale,altitude,move_speed_normal_walk,move_speed_normal_run,						\
						   move_speed_combat_run, hpgauge_level,ammo_speed,magical_skill_boost,game_lang,ai_name,quest_ai_name,tribe,sensory_range,attack_range,attack_rate,npc_type,talking_distance,	\
						   abyss_npc_type,ment,undetectable,give_item_proc,remove_item_option,artifact_id,user_animation,spawn_animation,use_script,bindstone_type,bindstone_capacity,					\
						   bindstone_usecount,check_can_see,attack_delay,magical_skill_boost_resist,npc_title,hide_path) values (%d,%Q,%Q,%Q,%Q,%Q,%Q,%Q,%d,%d,%1.4f,%1.4f,%1.4f,%1.4f,%d,%d,%d,%Q,%Q,  \
						   %Q,%Q,%1.4f,%1.4f,%1.4f,%Q,%1.4f,%Q,%Q,%d,%d,%d,%d,%Q,%Q,%d,%Q,%d,%d,%d,%d,%d,%Q,%d);",id,desc.c_str(),name.c_str(),disk_type.c_str(),ui_type.c_str(),cursor_type.c_str(),   \
						   fxc_type.c_str(),ui_race_type.c_str(),erect,scale,altitude,move_speed_normal_walk,move_speed_normal_run,move_speed_combat_run,hpgauge_level,ammo_speed,magical_skill_boost,  \
						   game_lang.c_str(),ai_name.c_str(),quest_ai_name.c_str(),tribe.c_str(),sensory_range,attack_range,attack_rate,npc_type.c_str(),talking_distance,abyss_npc_type.c_str(),       \
						   ment.c_str(),undetectable,give_item_proc,remove_item_option,artifact_id,user_animation.c_str(),spawn_animation.c_str(),use_script,bindstone_type.c_str(),bindstone_capacity, \
						   bindstone_usecount,check_can_see,attack_delay,magical_skill_boost_resist,npc_title.c_str(),hide_path);
			AionInfoDB.execDML(bufSQL);
		}
		catch (CppSQLite3Exception& e)
		{
			printf("AionInfoDB:: Error inserting record into 'NPCInfo' table. (Error: %s)",e.errorMessage());
		}
	}

	try 
	{
		AionInfoDB.execDML( "END TRANSACTION;" );
	}
	catch (CppSQLite3Exception& e)
	{
		printf("AionInfoDB:: Error ending SQLite Transaction. (Error: %s)",e.errorMessage());
		AionInfoDB_Updater_mutex.unlock();
		return false;
	}



	printf("AionInfoDB:: - Finished with NPCInfo.");

	AionInfoDB_Updater_mutex.unlock();
	return true;
}