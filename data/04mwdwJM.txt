local EV
local CV

getgenv().ABall = false;
getgenv().AUpg = false;
getgenv().ARUpg = false;
getgenv().AChest = false;
getgenv().ACard = false;
getgenv().ARe = false;
getgenv().APTR = false;
getgenv().AWorld = false;

function ABall()
    spawn(function ()
        while getgenv().ABall == true do
local args = {[1] = "Throw",[2] = 1} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
        end
    end)
end
function AutoUpgrade()
    spawn(function ()
        while getgenv().AUpg == true do
local args = {[1] = "UpgradeStats",[2] = "KickPower",[3] = 1,[4] = "Money"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
local args = {[1] = "UpgradeStats",[2] = "KickAccuracy",[3] = 1,[4] = "Money"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
local args = {[1] = "UpgradeStats",[2] = "Speed",[3] = 1,[4] = "Money"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
        end
    end)
end
function AutoRUpgrade()
    spawn(function ()
        while getgenv().ARUpg == true do
local args = {[1] = "RebirthUpgrade",[2] = "CoinMulti"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
local args = {[1] = "RebirthUpgrade",[2] = "XPMulti"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
local args = {[1] = "RebirthUpgrade",[2] = "StarSlots"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
local args = {[1] = "RebirthUpgrade",[2] = "Luck"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.02)
        end
    end)
end
function ACard()
    spawn(function ()
        while getgenv().ACard == true do
            if CV == "Basic" then
local args = {[1] = "PromptPurchasePack",[2] = workspace.Environment.Cards.Basic} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(1)
            end
            if CV == "Big" then
local args = {[1] = "PromptPurchasePack",[2] = workspace.Environment.Cards.Basic} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(1)
            end
            if CV == "Super" then
local args = {[1] = "PromptPurchasePack",[2] = workspace.Environment.Cards.Basic} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(1)
            end
        end
    end)
end
function ARe()
    spawn(function ()
        while getgenv().ARe == true do
local args = {[1] = "Rebirth"}game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
        end
    end)
end
function AutoChest(C)
    spawn(function ()
        while getgenv().AChest == true do
local args = {[1] = "PromptPurchaseChest",[2] = workspace.ChestStands:FindFirstChild(C)} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
        end
    end)
end
function AutoPTR()
    spawn(function ()
        while getgenv().APTR == true do
local args = {[1] = "ClaimPlayTimeReward",[2] = "300"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "600"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "900"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "1500"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "2100"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "3600"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "4500"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "5400"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
local args = {[1] = "ClaimPlayTimeReward",[2] = "7200"} game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args)) wait(0.1)
        end
    end)
end

local library = loadstring(game:HttpGet(('https://raw.githubusercontent.com/bloodball/-back-ups-for-libs/main/wall%20v3')))()

local w = library:CreateWindow("Goal Kick Simulator")

local b = w:CreateFolder("Autofarm")

b:Toggle("Auto Kick 100%",function(val)
getgenv().ABall = val
ABall()
end)

b:Toggle("Auto Rebirth",function(val)
getgenv().ARe = val
ARe()
end)

b:Toggle("Auto Upgrade",function(val)
getgenv().AUpg = val
AutoUpgrade()
end)

b:Toggle("Auto ReUpgrade",function(val)
getgenv().ARUpg = val
AutoRUpgrade()
end)

b:Toggle("Auto Playtime",function(val)
getgenv().APTR = val
AutoPTR()
end)

b:Toggle("Auto Chest",function(val)
getgenv().AChest = val
AutoChest(EV)
end)

b:Toggle("Auto Card",function(val)
getgenv().ACard = val
ACard()
end)

b:Box("Chest Name","Name",function(val)
    EV = val
end)

b:Dropdown("Select Card",{"Basic","Big","Super"},true,function(val)
    CV = val
end)

local w = library:CreateWindow("Areas")

local b = w:CreateFolder("World 1")

b:Button("Unlock Park",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Park}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Park Tree",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Park Tree")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Distorted Skyscraper",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Distorted Skyscraper")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Desert",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Desert}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Grand Pyramid",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Grand Pyramid")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Rocket City",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.City}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Beach",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Beach}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Rocket Ship",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Rocket Ship")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Moon",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Moon}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Moon Base",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Moon Base")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Moon Extractor",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Moon Extractor")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Mars",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Mars}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock World 2 Portal",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("World 2 Portal")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Mars Rocket Ship",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones:FindFirstChild("Mars Rocket Ship")}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Jupiter",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Jupiter}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

b:Button("Unlock Saturn",function()
local args = {[1] = "UnlockArea",[2] = workspace.Environment.Zones.World1.Zones.Saturn}
game:GetService("ReplicatedStorage").Remote.RemoteFunction:InvokeServer(unpack(args))
end)

local w = library:CreateWindow("LocalPlayer")

local S
local J
local H
local G
local C
local CF

local b = w:CreateFolder("Values")

b:Box("Speed","number",function(val)
    S = val
end)
b:Box("Jump","number",function(val)
    J = val
end)
b:Box("Hip Height","number",function(val)
    H = val
end)
b:Box("Gravity","number",function(val)
    G = val
end)

b:Toggle("Speed",function(bool)
getgenv().Speed = bool
    Speed(S)
end)
b:Toggle("Jump",function(bool)
getgenv().Jump = bool
    Jump(J)
end)
b:Toggle("Hip Height",function(bool)
getgenv().Hip = bool
    Hip(H)
end)
b:Toggle("Gravity",function(bool)
    getgenv().Grav = bool
        Grav(G)
    end)

b:Slider("FOV (Default is 70)",{min = 0;max = 120;precise = true;},function(val)
game.workspace.CurrentCamera.FieldOfView = val
end)

local b = w:CreateFolder("Stuff")

b:Box("Chat","Message",function(val)
    C = val
end)

b:Box("Cooldown","Speed",function(val)
    CF = val
end)

b:Toggle("Spam",function(bool)
    getgenv().Chat = bool
    Chat(C, CF)
end)

b:Button("Rejoin",function()
    loadstring(game:HttpGet("https://pastebin.com/raw/mM7JBG5h", true))()
end)

b:Button("Giant",function()
    loadstring(game:HttpGet("https://pastebin.com/raw/2jnKKARG", true))()
end)

b:Button("Noclip",function()
    loadstring(game:HttpGet("https://pastebin.com/raw/hd03Vdwm", true))()
end)

b:Button("Reset",function()
    loadstring(game:HttpGet("https://pastebin.com/raw/EEY6SATj", true))()
end)

b:Button("Print Current XYZ",function()
function GetPOS() return game.Players.LocalPlayer.Character.HumanoidRootPart.CFrame end print(GetPOS())
end)

local b = w:CreateFolder("Credits & Stuff")

b:Button("RTX Summer",function()
    loadstring(game:HttpGet("https://paste.ee/r/h4fL2", true))()
end)

b:Button("RTX Autumn",function()
    loadstring(game:HttpGet("https://paste.ee/r/9eV0M", true))()
end)

b:Button("Anti-Report",function()
    loadstring(game:HttpGet("https://paste.ee/r/GphmF", true))()
end)

b:Label("Made by X_Lua#7795",{
    TextSize = 22;
    TextColor = Color3.fromRGB(255,255,255);
    BgColor = Color3.fromRGB(69,69,69);
    
}) 

b:Button("Copy Discord Invite",function()
    setclipboard("discord.gg/vkDVfNxBTH")
end)

b:DestroyGui()

getgenv().Speed = false;
getgenv().Jump = false;
getgenv().Hip = false;
getgenv().Chat = false;
getgenv().Grav = false;

function Chat(Mes, Freq)
    spawn(function ()
        while getgenv().Chat == true do
local args = {[1] = Mes,[2] = "All"} game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(unpack(args))
wait(Freq)
        end
    end)
end

function Speed(Nume)
    spawn(function ()
        if getgenv().Speed == true then
            while getgenv().Speed == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = Nume
                wait()
            end
        elseif getgenv().Speed == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.WalkSpeed = 16
        end
    end)
end
function Jump(Nume)
    spawn(function ()
        if getgenv().Jump == true then
            while getgenv().Jump == true do
                game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = Nume
                wait()
        end
    elseif getgenv().Jump == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.JumpPower = 50
        end
    end)
end
function Hip(Nume)
    spawn(function ()
        if getgenv().Hip == true then
            while getgenv().Hip == true do
            game:GetService("Players").LocalPlayer.Character.Humanoid.HipHeight = Nume
            wait()
        end
    elseif getgenv().Hip == false then
            game:GetService("Players").LocalPlayer.Character.Humanoid.HipHeight = 2.7
        end
    end)
end
function Grav(Nume)
    spawn(function ()
        if getgenv().Grav == true then
            while getgenv().Grav == true do
                game:GetService("Workspace").Gravity = Nume
            wait()
        end
    elseif getgenv().Grav == false then
        game:GetService("Workspace").Gravity = 196.2
        end
    end)
end

function TPTo(PCFrame)
    local plr = game.Players.LocalPlayer;
           if plr.Character then
            plr.Character.HumanoidRootPart.CFrame = PCFrame
        end
    end