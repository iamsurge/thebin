Write C program that parses xml file and creates tag tree

#include <stdio.h>
#include <stdlib.h> 
#include <string.h>

// Structure for the tag tree 
struct tagTree 
{ 
    char* tagName; 
    int numOfChildren; 
    struct tagTree** children; 
}; 

// Function to add a tag to the tag tree 
struct tagTree* addTag(struct tagTree* node, char* tagName) 
{ 
    struct tagTree* newNode = (struct tagTree*)malloc(sizeof(struct tagTree)); 
    newNode->tagName = tagName; 
    newNode->numOfChildren = 0; 
    newNode->children = NULL; 
  
    if (node->children == NULL) 
    { 
        node->children = (struct tagTree**)malloc(sizeof(struct tagTree*)); 
        node->children[0] = newNode; 
        node->numOfChildren++; 
    } 
    else 
    { 
        node->children = (struct tagTree**)realloc(node->children, 
                        (node->numOfChildren+1)*sizeof(struct tagTree*)); 
        node->children[node->numOfChildren] = newNode; 
        node->numOfChildren++; 
    } 
    return newNode; 
} 

// Function to parse the xml file and create the tag tree 
struct tagTree* parseXml(char* xml) 
{ 
    if (xml == NULL) 
        return NULL; 
  
    struct tagTree* root = (struct tagTree*)malloc(sizeof(struct tagTree)); 
    struct tagTree* currentNode = root; 
  
    int i = 0; 
    while (xml[i] != '\0') 
    { 
        // If the tag has started 
        if (xml[i] == '<') 
        { 
            // Find the tag name 
            char* tagName = (char*)malloc(20); 
            int j = 0; 
            i++; 
            while (xml[i] != '>') 
            { 
                tagName[j++] = xml[i++]; 
            } 
            tagName[j] = '\0'; 
  
            // Add the tag to the tag tree 
            currentNode = addTag(currentNode, tagName); 
        } 
  
        // If the tag has ended 
        else if (xml[i] == '/') 
        { 
            // Move the current node to the parent of the current node 
            currentNode = currentNode->parent; 
        } 
        i++; 
    } 
    return root; 
} 

// Function to print the tag tree 
void printTagTree(struct tagTree* node, int space) 
{ 
    if (node == NULL) 
        return; 
  
    // Increase the space between levels 
    space += 10; 
  
    // Print the current node 
    printf("\n"); 
    for (int i = 10; i < space; i++) 
        printf(" "); 
    printf("%s", node->tagName); 
  
    // Print the children of the current node 
    for (int i = 0; i < node->numOfChildren; i++) 
        printTagTree(node->children[i], space); 
} 

// Main function 
int main() 
{ 
    char* xml = "<html><head><title>Sample XML File</title></head><body><p>This is a sample xml file.</p></body></html>"; 
  
    // Create the tag tree 
    struct tagTree* root = parseXml(xml); 
  
    // Print the tag tree 
    printTagTree(root, 0); 
  
    return 0; 
}