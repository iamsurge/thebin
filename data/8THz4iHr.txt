/**
 * Solution of {@link https://www.codewars.com/kata/530e15517bc88ac656000716/train/javascript}
 * @param {string} input a message for encrypt
 * @returns the message encrypted by ROT-13 cypher on a latin-alphabet base
 */
function rot13(input) {
    const offset = 13, alphabet = getLatinAlphabet();
    let output = "";
    for (let char of input) {
        output += char.isLetter() ? char.shift(alphabet, offset).toTargetCase(char) : char;
    }
    return output;
}

/**
 * @returns {string} lower case latin alphabet as whole string
 */
 function getLatinAlphabet() {
    let alphabet = ""
    for (let i = "a".charCodeAt(0); i <= "z".charCodeAt(0); i++) {
        alphabet += String.fromCharCode(i);
    }
    return alphabet;
}

/**
 * @returns {boolean} true if char is an latin ASCII-letter, false in other cases
 */
String.prototype.isLetter = function () {
    return this.length === 1 && this.toLocaleLowerCase() !== this.toLocaleUpperCase();
}

/**
 * @returns {boolean} is char is a lower-case letter
 * @see {@link String.prototype.isLetter} 
 */
String.prototype.isLowerCase = function () {
    return this.isLetter() && this == this.toLocaleLowerCase();
}

/**
 * @param {string} char single character expected 
 * @returns {boolean} is char is an upper-case letter
 * @see {@link String.prototype.isLetter} 
 */
String.prototype.isUpperCase = function () {
    return this.isLetter() && this === this.toLocaleUpperCase();
}

/**
 * @param {target} target a letter
 * @returns {string} current string converted to case of target letter
 */
String.prototype.toTargetCase = function toTargetCase (target) {
    if (!target.isLetter()) {
        throw Error("Invalid argument! Single letter expected, got instead: " + target)
    }
    return target.isLowerCase() ? this.toLocaleLowerCase() : this.toLocaleUpperCase();
}

/**
 * @param {string} alphabet lower case target alphabet as whole string
 * @param {number} offset alphabet right-shift offset value
 * @returns {string} a letter 
 */
String.prototype.shift = function (alphabet, offset) {
    if (!this.isLetter()) {
        throw Error("Invalid argument! Single letter expected, got instead: " + this.toString())
    }
    alphabet = alphabet.toLocaleLowerCase();
    return alphabet[(alphabet.indexOf(this.toLocaleLowerCase()) + offset) % alphabet.length];
}