#include <iostream>

using namespace std;

void merge(int * arr, int from, int mid, int to){
    int leftSize = mid - from+1;
    int rightSize = to - mid;
    
    int * leftArr = new int[leftSize];
    int * rightArr = new int[rightSize];
    
    for(int i = 0; i < leftSize; i++){
        leftArr[i] = arr[from+i];
    }
    
     for(int i = 0; i < rightSize; i++){
        rightArr[i] = arr[mid+i+1];
    }
    
    cout << "left" << endl;
    cout << leftSize << " " << rightSize << endl;
    for(int i = 0; i < leftSize; i++){
        cout << leftArr[i] << " ";
    }
    cout << endl;
    
    cout << "right" << endl;
     for(int i = 0; i < rightSize; i++){
        cout << rightArr[i] << " ";
    }
    cout << endl;
    
    int rind = 0, lind = 0, ind = from;
    
    while(rind<rightSize && lind<leftSize){
        if(leftArr[lind] <= rightArr[rind]){
            arr[ind] = leftArr[lind];
            lind++;
        }
        else{
            arr[ind] = rightArr[rind];
            rind++;
        }
        ind++;
    }
    
   while (lind < leftSize) {
		arr[ind] = leftArr[lind];
		lind++;
		ind++;
	}
    
   while (rind < rightSize) {
		arr[ind] = rightArr[rind];
		rind++;
		ind++;
	} 
	
    for(int i = 0; i < to; i++){
        cout << arr[i]<< " ";
    }
    cout << endl;

}
void merge_sort(int * arr, int from, int to){
    if(from >= to) return;
    int mid = (from+to)/2;
    merge_sort(arr,from,mid);
    merge_sort(arr,mid+1,to);
    merge(arr,from,mid,to);
}

int main()
{
    int arr[] = {1,5,6,4,3,1,9,0,3,10};
    int sz = 10;
    merge_sort(arr,0,sz);
    for(int i = 0; i < sz; i++){
        cout << arr[i] << " ";
    }
    return 0;
}