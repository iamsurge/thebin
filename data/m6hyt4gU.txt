"""

@author: Nicusor-Lucian Barbu

TRAVEL AGENCY

Create an application for the management of the travel packages
offeredm by the travel agency.
The application stores the travel packages offered
to the clients like the following:
the start and end date of the travel, the destination & the price.
The application should allow to:

F1: Add a new travel package
F2: Modify a travel package
F3: Delete travel packages for a given destination
F4: Delete travel packages that have a shorter duration than
    a given number of days
F5: Delete travel packages that have the price bigger than a given price
F6: Print travel packages that include a stay in a given interval of
    time (e.g. 10/08/2018 - 24/08/2018)
        valid packages:
        - start date is equal or greater than the input date and
            less or equal than the end date
        - end date is equal or less that the input date and
            equal or greater than the start date of the interval
F7: Print travel packages that have specific destination and a price 
less than a given price
F8: Print travel packages with a specific end date
F9: Print number of offers for a specific destination
F10: Print available travel packages in a certain period sorted by price
F11: Print medium price for a specific destination
F12: Remove offers that have a higher price than the input price
     and a different destination than the input destination
F13: Remove offers where the stay requires rent days in a specific month
     (input by the user in console between 1 and 12)
F14: Undo the last operation (Package list rewinds to the previous state)
     - do not use deepCopy
-----------------------------------------------------------------------

I1: F1, F2
I2: F3, F4, F5
I3: F6, F7, F8
I4: F9, F10, F11
I5: F12, F13
I6: F14

"""


################# domain #################
# def set_package (package, name):
#     package["name"] = name
    
# def get_package (package):
#     return package["name"]


def set_start_date(package, start_date):
    """
    set the start date of a package
    input: package - dictionary
           start_date - string
    """
    package["start_date"] = start_date
    
    
def get_start_date(package):
    """
    get the start date of a package
    input: package - dictionary
    return: start_date - string
    """
    return package["start_date"]


def set_end_date(package, end_date):
    """
    set the end date of a package
    input: package - dictionary
           end_date - string
    """
    package["end_date"] = end_date
    
    
def get_end_date(package):
    """
    get the end date of a package
    input: package - dictionary
    return: end_date - string
    """
    return package["end_date"]


def set_destination(package, destination):
    """
    set the destination of a package
    input: package - dictionary
           destination - string
    """
    package["destination"] = destination
    
    
def get_destination(package):
    """
    get the destination of a package
    input: package - dictionary
    return: destination - string
    """
    return package["destination"]


def set_price(package, price):
    """
    set the price of a package
    input: package - dictionary
           price - float
    """
    package["price"] = price

   
def get_price(package):
    """
    get the price of a package
    input: package - dictionary
    return: price - float
    """
    return package["price"]


def set_month(month):
    '''
    set the month of travel
    input: month - integer
    '''
    if month < 1 or month > 12:
        raise ValueError("Invalid month!")
    return month


def create_package (start_date, end_date, destination, price):
    """
    create a new package
    input: start_date - string
           end_date - string
           destination - string
           price - float
    return: package - dictionary
    """
    return {"start_date": start_date, "end_date": end_date, "destination": destination, "price": price}


################# operations #################
def add_package(all_packages, start_date, end_date, destination, price):
    '''
    add a new package to the list of packages
    input: all_packages - list of packages
           start_date - string
           end_date - string
           destination - string
           price - float
    '''
    package = create_package(start_date, end_date, destination, price)
    all_packages.append(package)
    
    
def modify_package(all_packages, start_date, end_date, destination, price):
    '''
    modify a package from the list of packages
    input: all_packages - list of packages
           start_date - string
           end_date - string
           destination - string
           price - float
    '''
    for i in range(len(all_packages)):
        if get_start_date(all_packages[i]) == start_date and get_end_date(all_packages[i]) == end_date and get_destination(all_packages[i]) == destination:
            set_price(all_packages[i], price)
            
            
def delete_packages_for_destination(all_packages, destination):
    '''
    delete packages for a given destination
    input: all_packages - list of packages
           destination - string
    '''
    for i in range(len(all_packages)-1, -1, -1):
        if get_destination(all_packages[i]) == destination:
            del all_packages[i]
            
            
def delete_packages_for_shorter_duration(all_packages, days):
    '''
    delete packages that have a shorter duration than a given number of days
    input: all_packages - list of packages
           days - integer
    '''
    for i in range(len(all_packages)-1, -1, -1):
        if get_end_date(all_packages[i]) - get_start_date(all_packages[i]) < days:
            del all_packages[i]
            
            
def delete_packages_for_price(all_packages, price):
    '''
    delete packages that have the price bigger than a given price
    input: all_packages - list of packages
           price - float
    '''
    for i in range(len(all_packages)-1, -1, -1):
        if get_price(all_packages[i]) > price:
            del all_packages[i]
            
            
def print_packages_for_interval(all_packages, start_date, end_date):
    '''
    print packages that include a stay in a given interval of time
    input: all_packages - list of packages
           start_date - string
           end_date - string
    '''
    for i in range(len(all_packages)):
        if get_start_date(all_packages[i]) >= start_date and get_start_date(all_packages[i]) <= end_date:
            print(all_packages[i])
        elif get_end_date(all_packages[i]) >= start_date and get_end_date(all_packages[i]) <= end_date:
            print(all_packages[i])
                
                
def print_packages_for_destination(all_packages, destination, price):
    '''
    print packages that have a given destination
    input: all_packages - list of packages
           destination - string
           price - float
    '''
    for i in range(len(all_packages)):
        if get_destination(all_packages[i]) == destination and get_price(all_packages[i]) < price:
            print(all_packages[i])
            
            
def print_packages_for_end_date(all_packages, end_date):
    '''
    print packages that have a given end date
    input: all_packages - list of packages
           end_date - string
    '''
    for i in range(len(all_packages)):
        if get_end_date(all_packages[i]) == end_date:
            print(all_packages[i])
            
            
def print_number_of_packages_for_destination(all_packages, destination):
    '''
    print the number of packages that have a given destination
    input: all_packages - list of packages
           destination - string
    '''
    count = 0
    for i in range(len(all_packages)):
        if get_destination(all_packages[i]) == destination:
            count += 1
    print(count)
    

def print_packages_for_duration_and_price(all_packages, days, price):
    '''
    print packages that have a given duration and price
    input: all_packages - list of packages
           days - integer
           price - float
    '''
    for i in range(len(all_packages)):
        if get_end_date(all_packages[i]) - get_start_date(all_packages[i]) == days and get_price(all_packages[i]) < price:
            print(all_packages[i])


def print_medium_price_for_destination(all_packages, destination):
    '''
    print the medium price for packages that have a given destination
    input: all_packages - list of packages
           destination - string
    '''
    count = 0
    sum = 0
    for i in range(len(all_packages)):
        if get_destination(all_packages[i]) == destination:
            count += 1
            sum += get_price(all_packages[i])
    print(sum/count)
    
    
def remove_package_for_destination_higher_price(all_packages, destination, price):
    '''
    remove offers that have a higher price that have a different location
    than the input price and a higher price than the input price
    input: all_packages - list of packages
           destination - string
           price - float
    '''
    for i in range(len(all_packages)-1, -1, -1):
        if get_destination(all_packages[i]) != destination or get_price(all_packages[i]) > price:
            del all_packages[i]
            
        
def remove_package_for_other_month(all_packages, month):
    '''
    remove packages that have a different month than the input month
    input: all_packages - list of packages
           month - integer
    '''
    for i in range(len(all_packages)-1, -1, -1):
        if get_start_date(all_packages[i]).month != month:
            del all_packages[i]
            

def undo_last_operation(all_packages, all_packages_copy):
    '''
    undo the last operation
    input: all_packages - list of packages
           all_packages_copy - list of packages
    '''
    all_packages.clear()
    for i in range(len(all_packages_copy)):
        all_packages.append(all_packages_copy[i])