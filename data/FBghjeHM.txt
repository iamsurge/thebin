class Solution:
    def exist(self, board: List[List[str]], word: str) -> bool:
        m,n=len(board),len(board[0])
        visit= [[False]*n for _ in range(m)]
        directions=[[1,0],[-1,0],[0,1],[0,-1]]
        
        def backtrack(r,c,i):
            # print(visit)
            if i==len(word):
                return True
            for dr,dc in directions:
                rdr = r + dr
                cdc = c + dc
                if (rdr < 0 or rdr >= m or 
                    cdc < 0 or cdc >= n or
                    board[rdr][cdc][0]!=word[i] or
                    visit[rdr][cdc]):
                    continue
                visit[rdr][cdc] = True
                if backtrack(rdr,cdc,i+1):
                    return True
                visit[rdr][cdc] = False
            return False
        
        for i in range(m):
            for j in range(n):
                if (board[i][j][0] != word[0]):
                    continue
                visit[i][j] = True
                if backtrack(i,j,1):
                    return True
                visit[i][j] = False
        return False