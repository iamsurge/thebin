#[...]

class User(db.Model, UserMixin):
    id = db.Column(db.Integer, primary_key=True)
    username = db.Column(db.String(20), nullable=False, unique=True)
    email = db.Column(db.String(120), nullable=False, unique=True)
    password = db.Column(db.String(60), nullable=False)
    image_file = db.Column(db.String(30), nullable=False,
                           default="default_img.jpg")
    posts = db.relationship('Post', backref="author", lazy=True)

    def generate_reset_token(self, expire_sec=1800):
        payload = {'user_id': self.id}
        return jwt.generate_jwt(payload, app.config['JWK_KEY'], 'PS256', timedelta(seconds=expire_sec))

    @staticmethod
    def verify_reset_token(jwk_token):
        try:
            _, claims = jwt.verify_jwt(
                jwk_token, app.config['JWK_KEY'], ['PS256'])
            print(claims)
            user_id = claims['user_id']
        except:
            return None
        User.query.get(user_id)
        return User.query.get(user_id)

    def __repr__(self):
        return f"User('{self.id}', '{self.username}', '{self.email}', '{self.image_file}')"

#[...]
@app.route("/passwordrecovery/<token>", methods=['POST', 'GET'])
def resetpassword(token):
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    user_from_token = User.verify_reset_token(token)
    print('user_id:', user_from_token)
    user = User.query.get(user_from_token.id)
    print('user_id:', user)

    if user is None:
        flash('Invalid reset request', category='warning')
        return redirect(url_for('passwordrecovery'))

    form = ResetPasswordForm()
    if form.validate_on_submit():
        hashed_pwd = bcrypt.generate_password_hash(
            form.password.data).decode('utf-8')
        with app.app_context():
            print('Old user_id.password=', user.password)
            user.password = hashed_pwd
            print('hashed_pwd', hashed_pwd)
            db.session.commit()
            print('New user.password', user.password)
            flash(
                f"Password reset completed for {user.username}", category="success")
        return redirect('/login')

    return render_template("resetpassword.html", title="Reset your password", form=form)
