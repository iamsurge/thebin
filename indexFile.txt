["3WFG30UV.txt","4AKGnDsg.txt","4W2PTcjX.txt","5bAukCcT.txt","8SswykMz.txt","8eT1eZFY.txt","8hKqiUNJ.txt","9AvzZJpX.txt","9LwE3dFn.txt","9bBRAMdj.txt","9dw7hGsk.txt","9ejatkXc.txt","AF0q0ULG.txt","BCKYbTeZ.txt","E7BM31WH.txt","ELd9GETv.txt","EXzVYPpA.txt","EzunSXNY.txt","G7pYhxc0.txt","JWhqCbwp.txt","JzW6Nz25.txt","M8kB91kC.txt","MarT9zQd.txt","NMrKCivj.txt","NZ6EZGt3.txt","QqecJeLH.txt","Qr26wGJV.txt","SKinVcxN.txt","TRCXsTd6.txt","TXKGg1xv.txt","UUJ866UG.txt","Ux09ENdd.txt","VW67BPxM.txt","VcajLwRx.txt","Vzv55ryP.txt","WRjXkkqc.txt","XpRH1MNX.txt","XsFquNWY.txt","Y8TLVpLU.txt","ZRL2SQxg.txt","ZVUMDqtR.txt","b42GW2W1.txt","bCMT0gG0.txt","bifw15Zi.txt","cCDaWvmc.txt","cHdiYAeM.txt","ceUL3Txg.txt","cpiAuJaV.txt","d2Ww99fU.txt","f0aJz67p.txt","f4FzK1VQ.txt","gEsFXbSG.txt","hwSyzdV1.txt","iLVJqnrz.txt","j1Svm81x.txt","jNtm8f8X.txt","jRtpvGNT.txt","jSLwSN0L.txt","jV7YCdAG.txt","k5pWbUtt.txt","neqwruyV.txt","pV1wp1eW.txt","qurt1f8h.txt","r9xvGPWH.txt","rcMY8v02.txt","sbLShWCF.txt","shdJM7FK.txt","t9YanMr5.txt","uNs3AB68.txt","uviGLSuR.txt","vXyUSYeF.txt","xAvBxwE7.txt","xECUhWEt.txt"]//index-files

use std::env;
use std::io::{self, prelude::*, BufReader};
use std::fs::File;
use std::collections::HashMap;

use point2d::point2d::Point2D;

const ORIGIN_X: i64 = 500;
const ORIGIN_Y: i64 = 0;
const ORIGIN: Point2D = Point2D { x: ORIGIN_X, y: ORIGIN_Y };

enum MapType {
    Origin,
    Rock,
    Sand,
}

fn can_move(sand_map: &HashMap<Point2D,MapType>, pt: &Point2D) -> bool {
    match sand_map.get(&pt) {
        None => true,
        Some(_) => false,
    }
}

fn drop_sand(sand_map: &mut HashMap<Point2D,MapType>, abyss: i64, part1: bool) -> bool {

    let mut new_pt = Point2D { x: ORIGIN_X, y: ORIGIN_Y };
    loop {

        // Assess movements
        let try_down  = Point2D { x: new_pt.x,   y: new_pt.y+1 };
        let try_left  = Point2D { x: new_pt.x-1, y: new_pt.y+1 };
        let try_right = Point2D { x: new_pt.x+1, y: new_pt.y+1 };

        let can_down  = can_move(&sand_map, &try_down);
        let can_left  = can_move(&sand_map, &try_left);
        let can_right = can_move(&sand_map, &try_right);

        // Assign movements
        if can_down {
            new_pt = try_down;
            if part1 && new_pt.y + 1 == abyss { return false; } // Fell to the abyss
        } else if can_left {
            new_pt = try_left;
        } else if can_right {
            new_pt = try_right;
        } else {
            if !part1 && new_pt == ORIGIN { return false; } // Blocking origin
            sand_map.insert(new_pt,MapType::Sand);
            return true; // At rest
        }
    }
}

fn build_map(input: &Vec<String>) -> HashMap<Point2D,MapType> {
    let mut sand_map: HashMap<Point2D,MapType> = HashMap::new();
    let origin = Point2D { x: ORIGIN_X, y: ORIGIN_Y };
    sand_map.insert(origin, MapType::Origin);
    for line in input {
        let segments: Vec<_> = line.split("->").collect();
        for segment in segments.windows(2) {
            let p1: Vec<_> = segment[0].split(",").map(|v| v.trim().parse::<i64>().unwrap()).collect();
            let p2: Vec<_> = segment[1].split(",").map(|v| v.trim().parse::<i64>().unwrap()).collect();
            let (x1,y1) = (p1[0], p1[1]);
            let (x2,y2) = (p2[0], p2[1]);
            let xrange = if x2 > x1 { x1..=x2 } else { x2..=x1 };
            let yrange = if y2 > y1 { y1..=y2 } else { y2..=y1 };
            for x in xrange.clone() {
                for y in yrange.clone() {
                    sand_map.insert(Point2D { x: x, y: y }, MapType::Rock);
                }
            }
        }
    }
    sand_map
}

fn solve(input: &str) -> io::Result<()> {
    let file = File::open(input).expect("Input file not found.");
    let reader = BufReader::new(file);

    // Input
    let input: Vec<String> = match reader.lines().collect() {
        Err(err) => panic!("Unknown error reading input: {}", err),
        Ok(result) => result,
    };

    // Part 1
    let mut sand_map = build_map(&input);

    // Identify the extent of the abyss
    let abyss = &sand_map.keys().map(|&pt| pt.y).max().unwrap() + 2;

    // Simulate sand
    'sand_lp: for sand in 0.. {
        let result = drop_sand(&mut sand_map,abyss,true);
        if !result { println!("Part 1: {sand}"); break 'sand_lp; } // 1061
    }

    // Part 2 (reset map)
    let mut sand_map = build_map(&input);

    // Build floor
    for x in 0..=1000 {
        sand_map.insert(Point2D { x: x, y: abyss },MapType::Rock);
    }

    'sand_lp2: for sand in 1.. {
        let result = drop_sand(&mut sand_map,abyss,false);
        if !result { println!("Part 2: {sand}"); break 'sand_lp2; } //  25055
    }

    Ok(())
}

fn main() {
    let args: Vec<String> = env::args().collect();
    let filename = &args[1];
    solve(&filename).unwrap();
}


import java.io.*;
import java.util.*;

public class Solution {
    public static long pow(long base,long pow){
        if(pow==1){
            return base;
        }
        if(pow==0){
            return 1;
        }
        long halfpow=pow(base,pow/2);
        if(pow%2==0){
            return halfpow*halfpow;
        }
        else{
            return halfpow*halfpow*base;
        }
    }
    public static void main(String[] args) {
        Scanner sc=new Scanner(System.in);
        int t=sc.nextInt();
        while(t-->0){
            long x=sc.nextLong();
            long y=sc.nextLong();
            long ans=(pow(2,x)+pow(2,y))%(int)(1e9+7);
            System.out.println(ans);
        }
    }
}

#include <bits/stdc++.h>
#include <unistd.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <cmath>
#include <windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
using namespace std;

float speed=20;
int Gamex=20,Gamey=20;
int step=0,cntr=0;
int x=Gamex/2,y=0;
int xrand=(rand()%Gamex),yrand=Gamey-1;
bool Over=false,eaten=true;

int randColorfood=0,randColorbox=0,res1=0,res2=0;


void Box(){
    if(step==1 and x-2>0)x--;
    else if(step==3 and x+1<Gamex-1)x++;
    glColor3f(1,randColorbox,randColorbox);
    glRectd(x-2,y,x+2,y+1);
    res2=1+2*randColorbox;
    if(y==yrand and (x-1==xrand or x-2==xrand or x==xrand or x+1==xrand)){
        if(res1==res2){//Same Color
            eaten=true;
            cntr++;
        }else
            Over=true;
    }
}
void food(){
    if(eaten==true or yrand<0){
        randColorfood=(rand()%2);
        randColorbox=(rand()%2);
        xrand=(rand()%Gamex)-1,yrand=Gamey-1;
        eaten=false;

    }


    int rr=1;
    if(randColorfood==0)rr=1;
    if(rr==0 and randColorfood==0)rr=1;
    glColor3f(rr,randColorfood,randColorfood);
    res1=rr+2*randColorfood;
    glRectd(xrand,yrand,xrand+1,yrand+1);
    yrand--;
}



void keyboard(int k,int x,int y){
    // 1 Left
    // 3 Right
    if(k==GLUT_KEY_LEFT)step=1;
    else if(k==GLUT_KEY_RIGHT)step=3;
}
void reshape(int a,int b){
    glViewport(0,0,(GLsizei)a,(GLsizei)b);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0,Gamex,0,Gamey,-1,1);
    glMatrixMode(GL_MODELVIEW);
}

void timer(int){
    glutPostRedisplay();
    glutTimerFunc(1000/speed,timer,0);
}


void MainGame(){
    glClear(GL_COLOR_BUFFER_BIT);
    food();
    Box();
    glutSwapBuffers();
    if(Over==true){
        char c[20]={0},res[9]="Score : ";
        itoa(cntr,c,10);
        strcat(res,c);
        MessageBox(NULL,res,"Don't Cry :(",0);
        // Try to add MaxScore
        exit(0);
    }
}

int main(int argc, char** argv)
{
    //Initialize GLUT and creat The Window
    glutInit(&argc, argv);
    glutInitWindowPosition(80,50);
    glutInitWindowSize(600, 600);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
    glutCreateWindow("Game");

    //Create Main Functions
    glutDisplayFunc(MainGame);
    glutReshapeFunc(reshape);
    glutSpecialFunc(keyboard);
    glutTimerFunc(0,timer,0);


    //change Color of Window
    glClearColor(0,0,0,0);
    glutMainLoop();
    return 0;
}



#include <stdio.h>
#include <stdlib.h>
#include <wctype.h>
#include <wchar.h>
#include <locale.h>
#include <time.h>

#define BUFF_SIZE 200
#define MEM_STEP 20
struct Sentence {
    wchar_t *str;
    int length;
};

struct Text {
    struct Sentence **text;
    int length;
};

struct SubTime {
    double time_dif;
    int sent_numb;
};

typedef struct Sentence Sentence;
typedef struct Text Text;
typedef struct SubTime SubTime;

Sentence *readSentence() {
    wchar_t c;
    int length = 0;
    int size = MEM_STEP;
    wchar_t *str;
    str = (wchar_t *) malloc(size * sizeof(wchar_t));
    do {
        if (length >= size - 2) {
            wchar_t *tmp;
            size += MEM_STEP;
            tmp = (wchar_t *) realloc(str, size * sizeof(wchar_t));
            if (tmp == NULL) {
                free(str);
                return NULL;
            }
            str = tmp;
        }
        c = (wchar_t) getwchar();
        str[length] = c;
        length++;
    } while (c != L'\n' && c != L'.' && c != L'!' && c != L'?');
    str[length] = L'\0';
    Sentence *sentence = (Sentence *) malloc(sizeof(Sentence));
    sentence->str = str;
    sentence->length = length;
    return sentence;
}


Sentence *fix_of_sentence(Sentence *sentence) {
    if (sentence->str[0] == '\t' || sentence->str[0] == ' ' || sentence->str[0] == '\n' || sentence->str[0] == '.') {
        for (int i = 0; i <= sentence->length; i++)
            sentence->str[i] = sentence->str[i + 1];
        sentence->length--;
    }
    return sentence;
}


Text readText() {
    int size = BUFF_SIZE;
    int length = 0;
    int nlcount = 0;
    Sentence **text = malloc(size * sizeof(Sentence *));
    Sentence *sentence;
    do {
        sentence = readSentence();
        sentence->length != 1 ? fix_of_sentence(sentence) : sentence;
        if (sentence->str[0] == L'\n') {
            nlcount++;
            free(sentence);
        } else {
            nlcount = 0;
            text[length++] = sentence;
            if (length == size - 2) {
                size += MEM_STEP;
                text = realloc(text, size * sizeof(wchar_t *));
                if (text == NULL) {
                    for (int i = 0; i < length; i++) {
                        free(text[i]->str);
                        free(text[i]);
                    }
                    Text txt;
                    txt.text = NULL;
                    txt.length = length;
                    return txt;
                }
            }
        }
    } while (nlcount < 2);
    Text txt;
    txt.text = text;
    txt.length = length;
    return txt;
}


SubTime *check_time(Text txt, struct tm timeinfo, int *len) {
    int size = MEM_STEP, fl;
    SubTime *times = (SubTime *) malloc(size * sizeof(SubTime *));
    SubTime time_stamp;
    struct tm tmp = timeinfo;
    for (int i = 0; i < txt.length; i++) {
        fl = 0;
        for (int j = 0; j < txt.text[i]->length - 5; j++) {
            if (iswdigit(txt.text[i]->str[j]) && iswdigit(txt.text[i]->str[j + 1]) && iswdigit(txt.text[i]->str[j + 3]) &&
                iswdigit(txt.text[i]->str[j + 4]) && txt.text[i]->str[j + 2] == L':'){
                wchar_t hours[2] = {txt.text[i]->str[j], txt.text[i]->str[j + 1]};
                wchar_t minutes[2] = {txt.text[i]->str[j + 3], txt.text[i]->str[j + 4]};
                tmp.tm_hour = atoi((char *)hours);
                tmp.tm_min = atoi((char *)minutes);
                printf("%s", asctime(&timeinfo));
                double seconds = difftime(mktime(&timeinfo), mktime(&tmp));
                time_stamp.time_dif = seconds;
                time_stamp.sent_numb = i;
                fl = 1;
            }
        }
        if(fl) {
            times[*len] = time_stamp;
            ++*len;
        }
    }
    return times;
}

void printSubTime(SubTime *times, int len){
    for(int i = 0; i < len; i++){
        printf("%lf %d\n", times[i].time_dif, times[i].sent_numb);
    }
}

void free_text(Text text) {
    for (int i = 0; i < text.length; i++) {
        free(text.text[i]->str);
    }
    free(text.text);
}


void print_txt(Text txt) {
    for (int i = 0; i < txt.length; i++) {
        wprintf(L"%ls\n", txt.text[i]->str);
    }
}


Text del_copy(Text txt) {
    int i, j;
    int size = txt.length;
    for (i = 0; i < size; i++) {
        for (j = i + 1; j < size; j++) {
            if (!wcscasecmp(txt.text[i]->str, txt.text[j]->str)) {
                free(txt.text[j]->str);
                free(txt.text[j]);
                txt.text[j] = txt.text[--size];
                j--;
            }
        }
    }
    txt.length = size;
    return txt;
}

//добавить удаление по спец символу к удалению копий

void del_caps(Text txt) {
    for (int k = 0; k < txt.length; k++) {
        int i = 0;
        Sentence *sentence = txt.text[k];
        while (sentence->str[i]) {
            if (iswupper(sentence->str[i])) {
                for (int j = i; sentence->str[j]; j++)
                    sentence->str[j] = sentence->str[j + 1];
                i--;
            }
            i++;
        }
        fix_of_sentence(sentence);
    }
}

int count_cyrillic(Sentence *sentence) {
    int count = 0;
    for (int i = 0; i < sentence->length; i++) {
        if ((65 > (int) sentence->str[i] || (int) sentence->str[i] > 122) && iswalpha(sentence->str[i])) {
            count++;
        }
    }
    return count;
}

int cmp(const void *s1, const void *s2) {
    Sentence **f1 = (Sentence **) s1;
    Sentence **f2 = (Sentence **) s2;
    if (count_cyrillic(*f1) < count_cyrillic(*f2))
        return 1;
    if (count_cyrillic(*f1) > count_cyrillic(*f2))
        return -1;
    return 0;
}


Text del_sent_without_spec_symbols(Text txt) {
    int i, j;
    int size = txt.length;
    for (i = 0; i < size; i++) {
        int sent_size = txt.text[i]->length, fl = 0;
        for (j = 0; j < sent_size; j++) {
            if (iswcntrl(txt.text[i]->str[j])) {
                fl = 1;
                break;
            }
        }
        if (fl) {
            continue;
        } else {
            free(txt.text[i]->str);
            free(txt.text[i]);
            txt.text[i] = txt.text[--size];
            i--;
        }
    }
    txt.length = size;
    return txt;
}

void sort_txt(Text txt) {
    qsort(txt.text, txt.length, sizeof(Sentence *), cmp);
}

int main() {
    setlocale(LC_ALL, "");
    time_t rawtime;
    time(&rawtime);
    struct tm timeinfo;
    timeinfo = *localtime (&rawtime);
    Text txt = readText();
    txt = del_copy(txt);
    del_caps(txt);
    sort_txt(txt);
    int len = 0;
    SubTime *times = check_time(txt, timeinfo, &len);
    printSubTime(times, len);
//    txt = del_sent_without_spec_symbols(txt);
//    print_txt(txt);
    free_text(txt);
    return 0;
}


void GenerateAllMoves(const S_BOARD *pos, S_MOVELIST *list) {
	
	ASSERT(CheckBoard(pos));
	
	list->count = 0;	
	
	int pce = EMPTY;
	int side = pos->side;
	int sq = 0; int t_sq = 0;
	int pceNum = 0;
	int dir = 0;
	int index = 0;
	int pceIndex = 0;
	
	if(side == WHITE) {
		
		for(pceNum = 0; pceNum < pos->pceNum[wP]; ++pceNum) {
			sq = pos->pList[wP][pceNum];
			ASSERT(SqOnBoard(sq));
			
			if(pos->pieces[sq + 10] == EMPTY) {
				AddWhitePawnMove(pos, sq, sq+10, list);
				if(RanksBrd[sq] == RANK_2 && pos->pieces[sq + 20] == EMPTY) {
					AddQuietMove(pos, MOVE(sq,(sq+20),EMPTY,EMPTY,MFLAGPS),list);
				}
			} 
			
			if(!SQOFFBOARD(sq + 9) && PieceCol[pos->pieces[sq + 9]] == BLACK) {
				AddWhitePawnCapMove(pos, sq, sq+9, pos->pieces[sq + 9], list);
			}  
			if(!SQOFFBOARD(sq + 11) && PieceCol[pos->pieces[sq + 11]] == BLACK) {
				AddWhitePawnCapMove(pos, sq, sq+11, pos->pieces[sq + 11], list);
			} 
			
			if(sq + 9 == pos->enPas) {
				AddCaptureMove(pos, MOVE(sq,sq + 9,EMPTY,EMPTY,MFLAGEP), list);
			} 
			if(sq + 11 == pos->enPas) {
				AddCaptureMove(pos, MOVE(sq,sq + 11,EMPTY,EMPTY,MFLAGEP), list);
			}
		}
		
		if(pos->castlePerm & WKCA) {
			if(pos->pieces[F1] == EMPTY && pos->pieces[G1] == EMPTY) {
				if(!SqAttacked(E1,BLACK,pos) && !SqAttacked(F1,BLACK,pos) ) {
					AddQuietMove(pos, MOVE(E1, G1, EMPTY, EMPTY, MFLAGCA), list);
				}
			}
		}
		
		if(pos->castlePerm & WQCA) {
			if(pos->pieces[D1] == EMPTY && pos->pieces[C1] == EMPTY && pos->pieces[B1] == EMPTY) {
				if(!SqAttacked(E1,BLACK,pos) && !SqAttacked(D1,BLACK,pos) ) {
					AddQuietMove(pos, MOVE(E1, C1, EMPTY, EMPTY, MFLAGCA), list);
				}
			}
		}
		
	} else {
		
		for(pceNum = 0; pceNum < pos->pceNum[bP]; ++pceNum) {
			sq = pos->pList[bP][pceNum];
			ASSERT(SqOnBoard(sq));
			
			if(pos->pieces[sq - 10] == EMPTY) {
				AddBlackPawnMove(pos, sq, sq-10, list);
				if(RanksBrd[sq] == RANK_7 && pos->pieces[sq - 20] == EMPTY) {
					AddQuietMove(pos, MOVE(sq,(sq-20),EMPTY,EMPTY,MFLAGPS),list);
				}
			} 
			
			if(!SQOFFBOARD(sq - 9) && PieceCol[pos->pieces[sq - 9]] == WHITE) {
				AddBlackPawnCapMove(pos, sq, sq-9, pos->pieces[sq - 9], list);
			} 
			
			if(!SQOFFBOARD(sq - 11) && PieceCol[pos->pieces[sq - 11]] == WHITE) {
				AddBlackPawnCapMove(pos, sq, sq-11, pos->pieces[sq - 11], list);
			} 
			
			if(sq - 9 == pos->enPas) {
				AddCaptureMove(pos, MOVE(sq,sq - 9,EMPTY,EMPTY,MFLAGEP), list);
			} 
			if(sq - 11 == pos->enPas) {
				AddCaptureMove(pos, MOVE(sq,sq - 11,EMPTY,EMPTY,MFLAGEP), list);
			}
		}		
		
		// castling
		if(pos->castlePerm &  BKCA) {
			if(pos->pieces[F8] == EMPTY && pos->pieces[G8] == EMPTY) {
				if(!SqAttacked(E8,WHITE,pos) && !SqAttacked(F8,WHITE,pos) ) {
					AddQuietMove(pos, MOVE(E8, G8, EMPTY, EMPTY, MFLAGCA), list);
				}
			}
		}
		
		if(pos->castlePerm &  BQCA) {
			if(pos->pieces[D8] == EMPTY && pos->pieces[C8] == EMPTY && pos->pieces[B8] == EMPTY) {
				if(!SqAttacked(E8,WHITE,pos) && !SqAttacked(D8,WHITE,pos) ) {
					AddQuietMove(pos, MOVE(E8, C8, EMPTY, EMPTY, MFLAGCA), list);
				}
			}
		}
	}
	
	/* Loop for slide pieces */
	pceIndex = LoopSlideIndex[side];
	pce = LoopSlidePce[pceIndex++];
	while( pce != 0) {
		ASSERT(PieceValid(pce));		
		
		for(pceNum = 0; pceNum < pos->pceNum[pce]; ++pceNum) {
			sq = pos->pList[pce][pceNum];
			ASSERT(SqOnBoard(sq));
			
			for(index = 0; index < NumDir[pce]; ++index) {
				dir = PceDir[pce][index];
				t_sq = sq + dir;
				
				while(!SQOFFBOARD(t_sq)) {				
					// BLACK ^ 1 == WHITE       WHITE ^ 1 == BLACK
					if(pos->pieces[t_sq] != EMPTY) {
						if( PieceCol[pos->pieces[t_sq]] == (side ^ 1)) {
							AddCaptureMove(pos, MOVE(sq, t_sq, pos->pieces[t_sq], EMPTY, 0), list);
						}
						break;
					}	
					AddQuietMove(pos, MOVE(sq, t_sq, EMPTY, EMPTY, 0), list);
					t_sq += dir;
				}
			}
		}
		
		pce = LoopSlidePce[pceIndex++];
	}

	/* Loop for non slide */
	pceIndex = LoopNonSlideIndex[side];
	pce = LoopNonSlidePce[pceIndex++];
	
	while( pce != 0) {
		ASSERT(PieceValid(pce));
		
		for(pceNum = 0; pceNum < pos->pceNum[pce]; ++pceNum) {
			sq = pos->pList[pce][pceNum];
			ASSERT(SqOnBoard(sq));
			
			for(index = 0; index < NumDir[pce]; ++index) {
				dir = PceDir[pce][index];
				t_sq = sq + dir;
				
				if(SQOFFBOARD(t_sq)) {				    
					continue;
				}
				
				// BLACK ^ 1 == WHITE       WHITE ^ 1 == BLACK
				if(pos->pieces[t_sq] != EMPTY) {
					if( PieceCol[pos->pieces[t_sq]] == (side ^ 1)) {
						AddCaptureMove(pos, MOVE(sq, t_sq, pos->pieces[t_sq], EMPTY, 0), list);
					}
					continue;
				}	
				AddQuietMove(pos, MOVE(sq, t_sq, EMPTY, EMPTY, 0), list);
			}
		}
				
		pce = LoopNonSlidePce[pceIndex++];
	}
}


from src.utils import now_utc
from src.document_reader import *
import aiobotocore
import datetime


s3 = AsyncS3Storage()
await s3.create_file(
            str(urns.s3_id),
            b't' * 1024 * 10 
        )

urns = FileURNs.create(str('test'), 'income_document')
await s3.create_file(
            str(urns.s3_id),
            b't' * 1024 * 10 
        )
await s3.delete_file(urns.s3_id)


session = aiobotocore.get_session()
async def listfiles(client):
    paginator = client.get_paginator('list_objects')
    async for res in paginator.paginate(Bucket=s3._bucket, Prefix=prefix):
        for fileinfo in res.get('Contents', {}):
            yield fileinfo
                
    

prefix = ''
i = 0
async with session.create_client('s3', **s3._config) as client:
    async for f in listfiles(client):
        if i > 10: 
            break
        i += 1
        print(f)
    

prefix = 'hub/meta/documents/'
end_date = now_utc() - datetime.timedelta(days=30*3)
i = 0
async with session.create_client('s3', **s3._config) as client:
    async for f in listfiles(client):
        if i > 1000: 
            break
        if f['LastModified'] < end_date:
            print(f)
            # await s3.delete_file(f['Key'])
            await client.delete_object(Bucket=s3._bucket, Key=f['Key'])
            logger.debug("File from s3 {} deleted.", f['Key'])
            i += 1



/******************************************************************************

                            Online C Compiler.
                Code, Compile, Run and Debug C program online.
Write your code in this editor and press "Run" button to compile and execute it.

*******************************************************************************/

#include <stdio.h>

int main()
{
    int n, m, min, max, diff;
    
    scanf("%d%d", &n, &m);
    
    int matrix[n][m];    

    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            scanf("%d", &matrix[i][j]);
        }
    }
    
    min = matrix[0][0];
    max = matrix[0][0];
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (matrix[i][j] < min) {
                min = matrix[i][j];
            }
            if (matrix[i][j] > max) {
                max = matrix[i][j];
            }
        }
    }
    
    diff = max - min;
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (i == j) {
                matrix[i][j] = diff;
            }
        }
    }
    
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            printf("%d ", matrix[i][j]);
        }
        printf("\n");
    }

    return 0;
}


#include<stdio.h>
#include<math.h>


double eexp(double x, double eps){
    int items = 0;
    double lol = 1;
    double ans = 0;

    while(fabs(lol) > eps){
        ans += lol;
        items += 1;
        lol *= x / items;
    }
    double actual = exp(x);
    printf("Value: %f\n", ans);
    printf("Actual value: %f\n\n", actual);
    printf("Number of items: %d\n", items);
    printf("Difference: %e\n", fabs(ans - actual));

    return 0;
}

int main(void){

    double x, eps;
    printf("Enter the x and the eps:\n");
    scanf("%lf", &x);
    scanf("%lf", &eps);
    eexp(x, eps);

    return 0;
}


local TeleportService = game:GetService("TeleportService")
local ItemsFolder = game.ServerStorage:FindFirstChild("SavedItems")
local DataStoreService = game:GetService("DataStoreService")

local SaveData = DataStoreService:GetDataStore("SaveData")

game.Players.PlayerAdded:Connect(function(player)
	local ItemData = SaveData:GetAsync(player.UserId)
	
	local Backpack = player:WaitForChild("Backpack")
	local StarterGear = player:WaitForChild("StarterGear")
	
	if ItemData ~= nil then
		for i, v in pairs(SaveData) do
			if ItemsFolder:FindFirstChild(v) and Backpack:FindFirstChild(v) == nil and StarterGear:FindFirstChild(v) == nil then
				ItemsFolder[v]:Clone().Parent = Backpack
				ItemsFolder[v]:Clone().Parent = StarterGear
			end
		end
	end
	
	player.CharacterRemoving:Connect(function(character)
		character:WaitForChild("Humanoid"):UnequipTools()
	end)
end)

game.Players.PlayerRemoving:Connect(function(player)
	local ItemTable = {}
	
	for i, v in pairs(player.Backpack:GetChildren()) do
		table.insert(ItemTable, v.Name)
	end
	if ItemTable ~= nil then
		SaveData:SetAsync(player.UserId, ItemTable)
	end
end)


using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.IO;

namespace test2._2
{
    public partial class Form1 : Form
    {
        

        public Form1()
        {
           
            InitializeComponent();

        }

        private void button1_Click(object sender, EventArgs e)
        {
            Random rnd = new Random();
            List<int> c = new List<int>();
            List<int> v = new List<int>();
            List<int> b = new List<int>();

            for (int j = 0; j < 10; j++)
            {
                c.Add(rnd.Next(-10, 15));
                if (c[j] < 0 && c[j] > -10)
                {
                    v.Add(c[j]);
                }
                else if (c[j] > 0 && c[j] >= 10)
                {
                    b.Add(c[j]);
                }

            }
            c.Sort();
            listBox1.DataSource = c;
            listBox2.DataSource = v;
            listBox3.DataSource = b;
            String a = string.Join(",", c) +"\n "+ string.Join(",", b) +"\n "+ string.Join(",",v); 
            StreamWriter s = new StreamWriter(@"Rezultat.txt");
                s.Write(a);
                s.Close();
            
        }

    }
}

print("My id = C193033")
print("My name is Arman Hossain")
print("I am enrolled is 6th semester")
print("My section is 6AM")

#This is a single line comment
"""
I am arman hossain.I am Bangladeshi.
But i dont like this country.I wanto go abroad
"""

#string functionalities
name = "Arman Hossain"
age = 25
institution = "Internaional Islamic University Chittagong"
contact = "+8801874015451"
print("My name is " + name)
print("My age is" , age)
print("My institution is " + institution)
print("My contact is " + contact)

#int type variable functionalities
number1 = 100
number2 = 200
print(number1 + number2)
print(number1 * number2)
print(number1 - number2)
print(number1 / number2)


#float type variable functionalities
a = 10.45
b = 20.58
print(a + b)
print(a - b)
print(a * b)
print(a / b)




--[[
▀▀█▀▀ █▀▀█ █▀▀█ █▀▀▄ █▀▀ █   █▀▀█ ▀▀█▀▀ █▀▀ █▀▀▄ 　 █▀▀▄ █  █ 　 
  █   █▄▄▀ █▄▄█ █  █ ▀▀█ █   █▄▄█   █   █▀▀ █  █ 　 █▀▀▄ █▄▄█ 　  
  █   ▀ ▀▀ ▀  ▀ ▀  ▀ ▀▀▀ ▀▀▀ ▀  ▀   ▀   ▀▀▀ ▀▀▀  　 ▀▀▀  ▄▄▄█ 　 
      https://www.gmodstore.com/users/tenebris_dominus
▀▀█▀▀ █▀▀ █▀▀▄ █▀▀ █▀▀▄ █▀▀█  ▀  █▀▀   █▀▀▄ █▀▀█ █▀▄▀█  ▀  █▀▀▄ █  █ █▀▀ 
  █   █▀▀ █  █ █▀▀ █▀▀▄ █▄▄▀ ▀█▀ ▀▀█   █  █ █  █ █ ▀ █ ▀█▀ █  █ █  █ ▀▀█ 
  █   ▀▀▀ ▀  ▀ ▀▀▀ ▀▀▀  ▀ ▀▀ ▀▀▀ ▀▀▀   █▄▄▀ ▀▀▀▀ ▀   ▀ ▀▀▀ ▀  ▀  ▀▀  ▀▀▀
             for the addon «Juk Hacking System»
 https://www.gmodstore.com/market/view/juk-hacking-system-the-best-hacking-system-2
--]]

JukHackingSystem.Languages["russian"] = {
    ["hackingPanelTitle"] = "Juk OS - Панель взлома",
    ["loginPanelTitle"] = "Juk OS - Панель входа",
    ["hackingProtectionPanelTitle"] = "Защита от взлома - Магазин",
    ["welcomeAnonymous"] = "Добро пожаловать, аноним",
    ["wrongPassword"] = "Неверный пароль",
    ["noPlayersFound"] = "Игроки не найдены",
    ["noPlayersDetected"] = "Игроки не обнаружены",
    ["noVehDetected"] = "Транспорт не обнаружен",
    ["successful"] = "Успешно",
    ["miss"] = "Неудачно",
    ["hackType"] = "Тип взлома",
    ["hackName"] = "Название взлома",
    ["targetName"] = "Цель",
    ["date"] = "Дата",
    ["hour"] = "Час",
    ["status"] = "Статус",
    ["comment"] = "Комментарий",
    ["searchHack"] = "Поиск взлома",
    ["search"] = "Поиск",
    ["hack"] = "Взломать",
    ["refreshInSeconds"] = "Обновление через %s c",
    ["upgradeFull"] = "Полное улучшение",
    ["buyValue"] = "Купить %s",
    ["firewall"] = "Файервол",
    ["timeToHack"] = "Время взлома",
    ["moreChancePolice"] = "Больше шансов,\nчто вызовут полицию",
    ["lessTimeToHack"] = "Меньше времени\nу хакера на взлом",
    ["bought"] = "Куплено",
    ["forMinutes"] = "%s на %s мин",
    ["hackProtectionExplains"] = "Добро пожаловать, как вы, возможно, знаете,\nв городе есть хакеры, которые могут доставить вам неприятности.\nВот почему мы предлагаем вам нашу защиту от взлома.",
    ["actualProtection"] = "Текущая защита:\n%s",
    ["none"] = "Нет",
    ["expiration"] = "Действует",
    ["name"] = "Название",
    ["createNpc"] = "Создать NPC",
    ["pressToOpen"] = "Нажмите %s, чтобы открыть",
    ["pressToClose"] = "Нажмите %s, чтобы закрыть",
    ["choose"] = "Выбрать",
    ["startPhoneHacking"] = "Вы начали взлом телефона",
    ["failedPhoneHacking"] = "Вы потерпели неудачу со взломом телефона",
    ["phoneDistance"] = "Расстояние до телефона",
    ["numsOfHacks"] = "Количество взломов",
    ["nothing"] = "Ничего",
    ["removeIn"] = "Удалится через",
    ["lookAtComputer"] = "Вы должны посмотреть на компьютер",
    ["lookAtNpc"] = "Вы должны посмотреть на NPC",
    ["alreadyCarHack"] = "Вы уже взламываете транспорт!",
    ["alreadyPlayerHack"] = "Вы уже взламываете игрока!",
    ["needToWait"] = "Вам нужно подождать %s с",
    ["timeIsUp"] = "Взлом был прерван, потому что время вышло!",
    ["policeContacted"] = "Полиция была вызвана!",
    ["startToHackSomeone"] = "Вы начали кого-то взламывать!",
    ["startToHackVeh"] = "Вы начали взламывать транспорт!",
    ["interuptTargetDisconnected"] = "Взлом был прерван, потому что цель отключилась!",
    ["targetTooFar"] = "Взлом был прерван, потому что цель слишком далеко!",
    ["succesfulyHackSomeone"] = "Вы успешно взломали кого-то!",
    ["interuptVehDontExist"] = "Взлом был прерван, потому что этого транспорта не существует!",
    ["succesfulyHackCar"] = "Вы успешно взломали транспорт!",
    ["hackerHaveBeenDetected"] = "Сигналы хакера были обнаружены!",
    ["dontEnoughMoney"] = "У вас недостаточно денег",
    ["boughtLevel"] = "Вы купили %s уровень улучшения «%s»!",
    ["alreadyHaveHackProtec"] = "У вас уже есть защита от взлома",
    ["boughtProtection"] = "Вы купили защиту «%s» за %s",
    ["npcCreated"] = "NPC был создан!",
    ["reloadNPC"] = "Перезагрузить всех NPC",
    ["npcReloaded"] = "Все NPC были перезагружены",
    ["removeNPC"] = "Удалить всех NPC",
    ["npcRemoved"] = "Все NPC были удалены",
    ["npcSpawned"] = "NPC заспавнены",
    ["targetInHistory"] = "Цель в истории",
    ["no"] = "Нет",
    ["yes"] = "Да",
    ["protectionExpire"] = "Срок действия вашей защиты от взлома истёк!",
    ["lastTracked"] = "Последний объект,\nкоторый был отслежен",
    ["owner"] = "Владелец",
    ["computerBattery"] = "Аккумулятор компьютера",
    ["batteryLow"] = "У вашего компьютера низкий заряд аккумулятора",
    ["noBattery"] = "Аккумулятор вашего компьютера разряжен",
    ["shoppingCart"] = "Корзина",
    ["addToCart"] = "Добавить в корзину",
    ["createDeliveryPoint"] = "Вы создали пункт доставки",
    ["removePoints"] = "Удалить пункты доставки",
    ["pointsRemoved"] = "Все пункты доставки были удалены",
    ["price"] = "Цена",
    ["shippingFee"] = "Стоимость доставки",
    ["free"] = "Бесплатно",
    ["alreadyDelivery"] = "У вас уже есть доставка в процессе",
    ["noDeliveryPoints"] = "Доступных пунктов доставки нет",
    ["package"] = "Посылка",
    ["notTheOwner"] = "Вы не являетесь владельцем этой посылки",
    ["offerToSomeone"] = "Подарить кому-нибудь (или нет)",
}

using System;

namespace ConsoleApp7
{
    internal class Program
    {
        static void Main(string[] args)
        {
            string name = "Noname";
            string consoleColor = "Black";
            string password = "123456";

            const string CommandSetName = "set name";
            const string CommandChangeFontColor = "change color";
            const string CommandSetPassword = "set password";
            const string CommandWriteName = "write name";
            const string CommandShowAll = "show all";
            const string CommandEsc = "quit";
            const string ColorWhite = "white";
            const string ColorRed = "red";
            const string ColorMagenta = "magenta";
            const string ColorBlue = "blue";

            bool isExitStatus = false;

            Console.WriteLine("Поддерживаемые команды:\n" +
            $"{CommandSetName} – установить имя;\n" +
            $"{CommandChangeFontColor} - изменить цвет фона консоли;\n" +
            $"{CommandSetPassword} – установить пароль;\n" +
            $"{CommandWriteName} – вывести имя(после ввода пароля);\n" +
            $"{CommandShowAll} - показать все параметры\n" +
            $"{CommandEsc} – выход из программы.\n");

            while (isExitStatus == false)
            {
                Console.Write("Введите команду: ");
                string currentCommand = Console.ReadLine();

                switch (currentCommand)
                {
                    case CommandSetName:
                        Console.Write("Введите новое имя: ");
                        name = Console.ReadLine();

                        Console.WriteLine("Смена имени прошла успешно.");
                        break;

                    case CommandChangeFontColor:
                        Console.Write($"Возможные значения: {ColorWhite}, {ColorRed}, {ColorMagenta}, {ColorBlue}." +
                            $"Введите новый цвет консоли: ");
                        consoleColor = Console.ReadLine();

                        if (consoleColor == ColorWhite)
                            Console.ForegroundColor = ConsoleColor.White;
                        if (consoleColor == ColorRed)
                            Console.ForegroundColor = ConsoleColor.Red;
                        if (consoleColor == ColorMagenta)
                            Console.ForegroundColor = ConsoleColor.Magenta;
                        if (consoleColor == ColorBlue)
                            Console.ForegroundColor = ConsoleColor.Blue;
                        break;

                    case CommandSetPassword:
                        Console.Write("Введите новое имя: ");
                        password = Console.ReadLine();

                        Console.WriteLine("Смена пароля прошла успешно.");
                        break;

                    case CommandWriteName:
                        Console.WriteLine("Для отображения текущего имени введите пароль: ");
                        string checkPassword = Console.ReadLine();

                        if (checkPassword == password)
                        {
                            Console.WriteLine("Проверка пройдена успешно! Текущее имя: " + name);
                        }
                        else
                        {
                            Console.WriteLine("Пароль не подходит. Прощайте!");
                        }

                        break;

                    case CommandShowAll:
                        Console.WriteLine("\n-------------------\nИмя: " + name);
                        Console.WriteLine("Цвет шрифта: " + consoleColor);
                        Console.WriteLine("Пароль: " + password + "\n-------------------\n");
                        break;

                    case CommandEsc:
                        isExitStatus = true;
                        break;
                }
            }
        }
    }
}

{% if "Ford" in event.Collections %}https://bushwrapz.com.au/pages/ford-video-tutorials
{% elif "Toyota" in event.Collections %}https://bushwrapz.com.au/pages/video-tutorial
{% elif "Holden" in event.Collections %}https://bushwrapz.com.au/pages/holden-tutorial-videos
{% elif "Isuzu" in event.Collections %}https://bushwrapz.com.au/pages/isuzu-video-tutorials
{% elif "Jeep" in event.Collections %}https://bushwrapz.com.au/pages/jeep-video-tutorials
{% elif "Land Rover" in event.Collections %}https://bushwrapz.com.au/pages/landrover-video-tutorials
{% elif "Mazda" in event.Collections %}https://bushwrapz.com.au/pages/mazda-video-tutorials
{% elif "Mitsubishi" in event.Collections %}https://bushwrapz.com.au/pages/mitsubishi-video-tutorials
{% elif "Nissan" in event.Collections %}https://bushwrapz.com.au/pages/nissan-video-tutorials
{% elif "Ram" in event.Collections %}https://bushwrapz.com.au/pages/ram-video-tutorials
{% elif "Suzuki" in event.Collections %}https://bushwrapz.com.au/pages/suzuki-video-tutorials
{% elif "Volkswagen" in event.Collections %}https://bushwrapz.com.au/pages/volkswagen-video-tutorials
{% else %}https://bushwrapz.com.au/pages/install-tips{% endif %}

- Download Nitro Pro 12 -
32bit: https://www.filehorse.com/download-nitro-pro-32/41690/download/
64bit: https://www.filehorse.com/download-nitro-pro-64/41691/download/

Buy Serial:
https://www.almaftuchin.com/product/license-nitro-pro-12-lifetime/

One tarot Card for day - 2022-12-15.

Today's daily tarot card is #Two of Cups .

Two of Cups meaning
Meaning Two of Cups: unity, partnership, connection .

https://atarotcards.com/free-tarot-readings/ Free tarot card reading

Detailed description
Two of Cups tarot card meaning
https://atarotcards.com/meaning/50-twoofcups/

Shuffle tarot card for today: https://atarotcards.com/1card/

Evernote link: https://www.evernote.com/shard/s351/sh/aaa54677-213e-41e5-9842-dfafe3539943/f42be72211afd0be6d1abac57ea61870



excursion_price = float(input())
number_of_puzzles = int(input())
number_of_dolls = int(input())
number_of_bears = int(input())
number_of_minions = int(input())
number_of_trucks = int(input())
number_of_toys = number_of_trucks + number_of_minions + number_of_bears + number_of_dolls + number_of_puzzles
puzzles_price = number_of_puzzles * 2.60
dolls_price = number_of_dolls * 3
bears_price = number_of_bears * 4.10
minions_price = number_of_minions * 8.20
trucks_price = number_of_trucks * 2
sum_of_prices = puzzles_price + dolls_price + bears_price + minions_price + trucks_price

if number_of_toys >= 50:
    sum_of_prices -= ((sum_of_prices / 100) * 25)

sum_of_prices -= (sum_of_prices / 10)

if sum_of_prices >= excursion_price:
    left_money = sum_of_prices - excursion_price
    print(f'Yes! {left_money:.2f} lv left.')
else:
    needed_money = excursion_price - sum_of_prices
    print(f'Not enough money! {needed_money:.2f} lv needed.')

# formula: total_savings = principal * (1 + interest_rate) ** duration

def get_savings(cost, principal, interest_rate):
    total_savings = 0
    duration = 0

    while total_savings < cost:
        total_savings = principal * (1 + interest_rate) ** duration
        # print('Interest after {} months: {}'.format(duration, total_savings - principal))
        # print('Total savings after {} months: {}'.format(duration, total_savings))
        duration += 1

    return total_savings, duration


def main():
    cost = int(input('Enter cost of laptop: '))
    interest_rate = 0.5
    allowance = 20000
    saving_factor = 0.1

    total_savings, duration = get_savings(cost, allowance * saving_factor, interest_rate)
    print('Months required to purchase laptop: {}'.format(duration))
    print('Savings left over after purchasing laptop: {}'.format(total_savings - cost))


if __name__ == '__main__':
    main()


SELECT
	DATE(paymentDateTime) paymentDate,
  COUNT(DISTINCT userID) usersWithFirstSubsPaymentCount

FROM
  payments

WHERE 
  paymentNewUpgradeRenewal = 1
  AND paymentPeriod IN (1,12)
	AND paymentStatus = 1 
  AND userID IS NOT NULL

GROUP BY
	paymentDate
	

ORDER BY 
	paymentDate DESC

function proceed()
	turtle.digUp()
	turtle.suckUp()
	turtle.digDown()
	turtle.suckDown()
	turtle.dig()
	turtle.suck()
	turtle.forward()
end

function row2()
	for i = 2,1,-1
	do
		proceed()
	end
	turtle.turnRight()
	proceed()
	turtle.turnRight()
	for i = 2,1,-1
	do
		proceed()
	end
	for ss = 15,1,-1
	do
		turtle.select(ss)
		turtle.refuel(10)
		local data = turtle.getItemDetail(ss)
		if data then
			if data.name == "minecraft:cobblestone" then
				turtle.drop(64)
			end
			if data.name == "minecraft:diorite" then
				turtle.drop(64)
			end
			if data.name == "minecraft:granite" then
				turtle.drop(64)
			end
			if data.name == "minecraft:andesite" then
				turtle.drop(64)
			end
			if data.name == "minecraft:dirt" then
				turtle.drop(64)
			end
		end
	end
	turtle.turnLeft()
	proceed()
	turtle.turnLeft()
end

for i = 3,1,-1
do
	for i = 100,1,-1
	do
		row2()
	end
	turtle.turnRight()
	turtle.turnRight()
	turtle.select(16)
	turtle.dig()
	turtle.place()
	for ss = 15,1,-1
	do
		turtle.select(ss)
		turtle.drop(64)
	end
	turtle.turnLeft()
	turtle.turnLeft()
end

import re

scan_row = 2000000
non_beacons = set()

discs = []

with open('input', 'r') as f:
    for line in f.readlines():
        sx, sy, bx, by = (int(z[1:]) for z in re.findall(r'=-?\d+', line))
        radius = abs(bx-sx) + abs(by-sy)
        discs.append((sx, sy, radius))

        dist_to_scan_row = abs(scan_row - sy)
        num_steps_left = radius - dist_to_scan_row

        if num_steps_left < 0:
            continue

        for x in range(sx - num_steps_left, sx + num_steps_left + 1):
            pos = (x, scan_row)
            if pos != (bx, by):
                non_beacons.add(pos)

print("part 1:", len(non_beacons))

def get_boundary(x, y, r):
    temp = (x, y+r)
    while temp != (x+r, y):
        temp = (temp[0]+1, temp[1]-1)
        yield temp
    while temp != (x, y-r):
        temp = (temp[0]-1, temp[1]-1)
        yield temp
    while temp != (x-r, y):
        temp = (temp[0]-1, temp[1]+1)
        yield temp
    while temp != (x, y+r):
        temp = (temp[0]+1, temp[1]+1)
        yield temp

# part 2
for x, y, r in discs:
    print("disc {} {} {}".format(x, y, r))
    for px, py in get_boundary(x, y, r+1):
        if 0 <= px <= 4000000 and 0 <= py <= 4000000:
            for dx, dy, dr in discs:
                if (abs(px-dx) + abs(py-dy)) <= dr:

                    break
            else:
                print("beacon:", px, py)
                print("tuning freq:", 4000000 * px + py)
                break


<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <style>
        canvas{
            background-color: black;
        }
    </style>
	<title>Document</title>
    <script>
	     document.addEventListener('DOMContentLoaded', () => {
            let canvas = document.querySelector('canvas');
            let context = canvas.getContext('2d');

            let btns = document.querySelectorAll('.btn');
            btns.forEach(item => {
                item.addEventListener('click', (e) => {
                    e.preventDefault();
                    let dt = e.target.dataset.canvas;
                    context.clearRect(0, 0, canvas.width, canvas.height);

                    fetch('data-'+dt+'.json')
                    .then(r => r.json())
                    .then(data => {
                        console.log(data);
                        for(let i = 0; i < 25; i++){
                            for(let j = 0; j < 25; j++){
                                context.fillStyle = data[i*25 + j];
                                context.fillRect(i*25, j*25, 25, 25);
                            }
                        }
                    });
                });
            });
                
        });

	</script>
</head>
<body>
    <div class="container">
        <div class="row">
            <div class="col">
                <canvas width="625" height="625"></canvas>
            </div>
            <div class="col">
                <ul class="list-group">
                    <li class="list-group-item">
                        <a href="" class="btn btn-primary" data-canvas="1">Load Canvas 1</a>
                    </li>
                    <li class="list-group-item">
                        <a href="" class="btn btn-primary" data-canvas="2">Load Canvas 2</a>
                    </li>
                    <li class="list-group-item">
                        <a href="" class="btn btn-primary" data-canvas="3">Load Canvas 3</a>
                    </li>
                    <li class="list-group-item">
                        <a href="" class="btn btn-primary" data-canvas="4">Load Canvas 4</a>
                    </li>
                    <li class="list-group-item">
                        <a href="" class="btn btn-primary" data-canvas="5">Load Canvas 5</a>
                    </li>
                </ul>
            </div>
        </div>
    </div>
	
    
</body>
</html>

[{"DataID":"1","KodeWilayah":"AW24","KodeLokasi":"401A","KepalaWilayah":"Ashari","KepalaKebun":"Susilo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Sedang","LuasBruto":"5.53","LuasNetto":"4.16","LuasAktif":"4.16","AwalTanam":"07/03/2022","TanggalPerawatan":"13/03/2022","UmurSaatIni":"7","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1F-F-i7Tuo_WJLSNiXkfJkKsDdLrLLuPB","ImgUrlLokasiPdf":"1E-sUA4j9Ci_pFyxc05vC8nYd9KJkAMv0"},{"DataID":"105","KodeWilayah":"AW25","KodeLokasi":"417C","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Hargo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Sedang","LuasBruto":"7.8","LuasNetto":"6.09","LuasAktif":"6.09","AwalTanam":"15/06/2022","TanggalPerawatan":"22/06/2022","UmurSaatIni":"4","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1OdQ2EOyAQTVPbBm76iBTfD-Y2Z41wJcT","ImgUrlLokasiPdf":"1J-7bfRC8Uuuv9_tA6-AfkvOV8L968HhS"},{"DataID":"2","KodeWilayah":"AW24","KodeLokasi":"401B","KepalaWilayah":"Ashari","KepalaKebun":"Susilo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"7.19","LuasNetto":"5.41","LuasAktif":"5.41","AwalTanam":"07/09/2022","TanggalPerawatan":"16/09/2022","UmurSaatIni":"1","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"119g4gUDr2F2vjhg3Un-4uftmJi1Ev_DM","ImgUrlLokasiPdf":"1C8gPv_gqtutfgn0iqj9BVyKsjRLtR3ue"},{"DataID":"107","KodeWilayah":"AW25","KodeLokasi":"417G","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Hargo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Sedang","LuasBruto":"5.96","LuasNetto":"4.46","LuasAktif":"4.46","AwalTanam":"09/08/2021","TanggalPerawatan":"15/08/2021","UmurSaatIni":"14","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1a1zbFHjhp9n15dR2aRofC-VowGtrCbtd","ImgUrlLokasiPdf":"1c_3z6lTi49Nyug7wsCQfiWffhlTg8gPu"},{"DataID":"106","KodeWilayah":"AW25","KodeLokasi":"417F1","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Hargo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"5.7","LuasNetto":"4.22","LuasAktif":"4.22","AwalTanam":"01/12/2021","TanggalPerawatan":"13/01/2022","UmurSaatIni":"9","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"17vFphQPicZYjpCEyRRXz49LYmULKwTqW","ImgUrlLokasiPdf":"1K09zRVu8973cpNLRMe7vgyL9NfHI7Al-"},{"DataID":"171","KodeWilayah":"AW25","KodeLokasi":"426D2","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Kuswara","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Sedang","LuasBruto":"8.71","LuasNetto":"7.15","LuasAktif":"7.15","AwalTanam":"03/09/2021","TanggalPerawatan":"12/09/2021","UmurSaatIni":"13","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1lwB722fnpudVlFK_QPcEJ4GccBsF0UhL","ImgUrlLokasiPdf":"1oTm472Aszx7xB-gRG1MRfYnomPntJpSa"},{"DataID":"81","KodeWilayah":"AW24","KodeLokasi":"413B2","KepalaWilayah":"Ashari","KepalaKebun":"Suharno","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"6.3","LuasNetto":"5.04","LuasAktif":"5.04","AwalTanam":"30/08/2022","TanggalPerawatan":"08/09/2022","UmurSaatIni":"2","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1_p5JOe_gWs1l45HXSfKvxppPWP1a0csM","ImgUrlLokasiPdf":"128Vw4YlqhORSquENpwY0S6QcKJ5LSr3M"},{"DataID":"4","KodeWilayah":"AW24","KodeLokasi":"401R","KepalaWilayah":"Ashari","KepalaKebun":"Susilo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"4.62","LuasNetto":"3.39","LuasAktif":"3.39","AwalTanam":"29/07/2021","TanggalPerawatan":"07/08/2021","UmurSaatIni":"15","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1QnHbAfHHsOBbZaqrWusQ5bM9nndibI7E","ImgUrlLokasiPdf":"1cajCmvLEUTkqCK3BrEoETET7xYqL3SNW"},{"DataID":"139","KodeWilayah":"AW25","KodeLokasi":"421C1","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Wasna","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"10","LuasNetto":"8.14","LuasAktif":"8.14","AwalTanam":"29/07/2022","TanggalPerawatan":"11/08/2022","UmurSaatIni":"3","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1H1pkOwik0ewMyH8NpP8PuDJWuBePlDxe","ImgUrlLokasiPdf":"1TtyHhyVNO3ur22tA13t_L536GDHteNzD"},{"DataID":"45","KodeWilayah":"AW24","KodeLokasi":"408F3","KepalaWilayah":"Ashari","KepalaKebun":"Yudi S","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Crown","KelasBibit":"Kecil","LuasBruto":"4.81","LuasNetto":"3.53","LuasAktif":"3.53","AwalTanam":"24/09/2022","TanggalPerawatan":"02/10/2022","UmurSaatIni":"1","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1ob_K7ton9gKFln1zU1ROJ1dm2CCUsL-n","ImgUrlLokasiPdf":"16TFEWDoMaBc5vNWgnvFN_37wg4OfukQP"},{"DataID":"18","KodeWilayah":"AW24","KodeLokasi":"404D5","KepalaWilayah":"Ashari","KepalaKebun":"Susilo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Crown","KelasBibit":"Kecil","LuasBruto":"6.37","LuasNetto":"5.04","LuasAktif":"5.04","AwalTanam":"14/10/2022","TanggalPerawatan":"25/10/2022","UmurSaatIni":"0","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1SY3DF72oCbw72vJGNbv6dD1xfg8x4Zlw","ImgUrlLokasiPdf":"19dBd2ANzg92JQ0Np_5ahbtinv6RYBJw-"},{"DataID":"54","KodeWilayah":"AW24","KodeLokasi":"409F2","KepalaWilayah":"Ashari","KepalaKebun":"Yudi S","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Crown","KelasBibit":"Kecil","LuasBruto":"5.1","LuasNetto":"3.98","LuasAktif":"3.98","AwalTanam":"29/06/2022","TanggalPerawatan":"21/07/2022","UmurSaatIni":"3","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1AfUuHVED2jx1Wvw33yQXYUAC5gbYnAx3","ImgUrlLokasiPdf":"1P1xAXO2poBxGSrhaFJLdSsDa8gcp0SDo"},{"DataID":"62","KodeWilayah":"AW24","KodeLokasi":"409M","KepalaWilayah":"Ashari","KepalaKebun":"Yudi S","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"4.3","LuasNetto":"3.22","LuasAktif":"3.22","AwalTanam":"08/08/2022","TanggalPerawatan":"31/08/2022","UmurSaatIni":"2","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1l1q8IWtdd6ojMsw5XfB7yexz1y9RGVok","ImgUrlLokasiPdf":"1a_Anw0z-5Ro0Zp1A50Ob1LELlac7lgR8"},{"DataID":"108","KodeWilayah":"AW25","KodeLokasi":"417I2","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Hargo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Besar","LuasBruto":"2.31","LuasNetto":"1.69","LuasAktif":"1.69","AwalTanam":"20/03/2022","TanggalPerawatan":"09/04/2022","UmurSaatIni":"7","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1aveDayj4VrGnIAHrsedv_l61IrhBjZuc","ImgUrlLokasiPdf":"1sA_T9B7EjbiWAMrpeLdZFores4ey9Oxp"},{"DataID":"124","KodeWilayah":"AW25","KodeLokasi":"418L","KepalaWilayah":"M. Ismail Rabbani","KepalaKebun":"Hargo","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Crown","KelasBibit":"Kecil","LuasBruto":"6.28","LuasNetto":"4.89","LuasAktif":"4.89","AwalTanam":"21/10/2021","TanggalPerawatan":"31/10/2021","UmurSaatIni":"12","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"1PvtI06CnKrgiIjMTtCFTS-W4E78fw9tE","ImgUrlLokasiPdf":"1swbMj0RksQp63qLoAYmkggyT2GqDEa4t"},{"DataID":"144","KodeWilayah":"AW24","KodeLokasi":"422Q2","KepalaWilayah":"Ashari","KepalaKebun":"Suharno","StatusLokasi":"NFFC","VarietasBibit":"MD2","JenisBibit":"Sucker","KelasBibit":"Sedang","LuasBruto":"6.6","LuasNetto":"5.27","LuasAktif":"5.27","AwalTanam":"21/09/2022","TanggalPerawatan":"28/09/2022","UmurSaatIni":"1","FPlus":"","MinHSF":"","MaxHSF":"","StandardForcing":"","RencanaForcing":"","RealMinForcing":"","RealMaxForcing":"","RencanaPanen":"","PrediksiTon":"","PrediksiTonHa":"","RealTon":"","RealTonHa":"","ProgresPanen":"","Tonase":"","Yield":"","PG":"4","Komoditas":"Nanas","ImgUrlLokasi":"14VaB8SE0pAkYb6G5Jr4sFyz3IXkaTVjx","ImgUrlLokasiPdf":"1ebtrrqCtfS379SO596GE-Mokt5jiDQc7"}]

--LITTLE SKID

--[[
Better than ever!
Bad gun system.

ChangeLogs:
	
	--x100
	Version 100:
		First version, can't do much.
	Version 100x:
		Now has a annoying sound that is unused and unequip sound as well the mesh being smaller
	Version 100x-:
		Annoying sound plays.
	--x200
	Version 200:
		Now shoots with bullets and is smaller

]]

local Debris = game:GetService("Debris")
local CanPlay = false --hahahahah, if you want cave to play then set this to true.

--credit
local MSG = Instance.new("Message", workspace)
MSG.Name = "Credits"
MSG.Text = "The worst gun system, made by IAmBanFor.(annoy 200)"

Debris:AddItem(MSG, 5)

--main
local tool = Instance.new("Tool", game:GetService("Players").IAmBanFor.Backpack)
local Part = Instance.new("Part", tool)
local Mesh = Instance.new("SpecialMesh", Part)

local equip = Instance.new("Sound", Part)
local shot = Instance.new("Sound", Part)
local unequip = Instance.new("Sound", Part)
local cave = Instance.new("Sound", Part)

tool.Name = "gun"
Part.Name = "Handle"
Part.Size = Vector3.new(1.203, 0.936, 0.265)

Mesh.MeshId = "rbxassetid://623102664"
Mesh.TextureId = "rbxassetid://623102879"
Mesh.Scale = Vector3.new(0.0005, 0.0005, 0.0005)

equip.Volume = 10
equip.SoundId = "rbxassetid://7405483764"

shot.Volume = 10
shot.SoundId = "rbxassetid://2811598570"

unequip.Volume = 10
unequip.SoundId = "http://www.roblox.com/asset/?id=169310310"


cave.Volume = 10
cave.SoundId = "rbxassetid://6806320369"

if CanPlay then
	cave:Play()
end

local function _shoot()
	local coolBullet = Instance.new("Part", workspace)
    coolBullet.CFrame = Part.CFrame * CFrame.new(0, 0, 2)
	local bv = Instance.new("BodyVelocity", coolBullet)
	bv.Velocity = coolBullet.CFrame.LookVector * 20
	
	coolBullet.Touched:Connect(function(hit)
		if hit.Parent:FindFirstChild("Humanoid") then
			hit.Parent:FindFirstChild("Humanoid").Health = 0
		end
	end)
end

tool.Equipped:Connect(function() equip:Play()  end)
tool.Activated:Connect(function() shot:Play() _shoot() end)
tool.Unequipped:Connect(function() unequip:Play() end)

/* Glitch by Nezumimousey */
/* And Coded by AlthIndor */

:root {
  --aqua-full: #00FFFFFF;
  --aqua-part: #00FFFF80;
  --pink-full: #FF68B4FF;
  --pink-part: #FF68B440;
}

html, body {
  background: url('https://i.ibb.co/YTnX1yK/animated.webp') no-repeat bottom center / cover;
  overflow: hidden;
}

body a {
  text-decoration: none !important;
  transition: all .5s ease-in-out;
}

/* Atlas Control */

#viewer #gaia_header ul, #column_2, #column_2 .custom_panel, #id_store a, #id_contact li *, #column_3::before {background: url('https://i.ibb.co/r4Xs6kp/layout-new.png') no-repeat border-box;}
#viewer #gaia_header ul {background-position: bottom left;}
#column_3::before {background-position: -388px bottom;}

#column_2 .custom_panel, #id_store a, #id_contact li * {background-position-x: right;}
#column_2 .custom_panel:nth-of-type(4) {background-position-y: -39px;}
#column_2 .custom_panel:nth-of-type(6) {background-position-y: -78px;}
#column_2 .custom_panel:nth-of-type(8) {background-position-y: -117px;}
#id_store a {background-position-y: -156px;}
#id_contact li:nth-of-type(1) * {background-position-y: -195px;}
#id_contact li:nth-of-type(2) * {background-position-y: -234px;}
#id_contact li:nth-of-type(3) * {background-position-y: -273px;}

/* Fonts */

@font-face {
  font-family: 'Open Sans';
  font-style: normal;
  font-weight: 400;
  src: local('Open Sans'), local('OpenSans-Regular'), url('https://fonts.gstatic.com/s/opensans/v34/memvYaGs126MiZpBA-UvWbX2vVnXBbObj2OVTS-muw.woff2') format('woff2');
}

@font-face {
  font-family: 'Open Sans';
  font-style: normal;
  font-weight: 700;
  src: local('Open Sans Bold'), local('OpenSans-Bold'), url('https://fonts.gstatic.com/s/opensans/v34/memSYaGs126MiZpBA-UvWbX2vVnXBbObj2OVZyOOSr4dVJWUgsg-1x4gaVI.woff2') format('woff2');
}

@font-face {
  font-family: 'Font Awesome 5 Free';
  font-style: normal;
  font-weight: 900;
  src: url('https://ka-f.fontawesome.com/releases/v5.15.4/webfonts/free-fa-solid-900.woff2') format('woff2');
}

/* Header */

#gaia_header {background: none !important;}
#gaia_header li.spacer {display: none !important;}
#gaia_header li {margin: 0 5px;}

#gaia_header ul {
  width: 378px !important;
  height: 53px !important;
  font: 0/52px 'Open Sans', sans-serif !important;
  padding: 0 15px !important;
  margin: 10px !important;
  box-sizing: border-box !important;
}

#gaia_header #header_right {
  float: right;
  display: flex !important;
  justify-content: end;
}
#gaia_header #header_right li:nth-of-type(n+2) {order: 1;}
#gaia_header #header_right li:nth-of-type(4) {order: 0;}

#header_left li:nth-of-type(2) a, #header_left img {transition: all .5s ease-in-out;}
#header_left li:nth-of-type(2) a {filter: drop-shadow(0 0 8px var(--aqua-full));}
#header_left li:nth-of-type(2) a:hover {filter: drop-shadow(0 0 8px var(--pink-full));}

#header_left img {
  -webkit-mask: url('https://i.imgur.com/5FTB40o.png') no-repeat 0 3px;
  mask: url('https://i.imgur.com/5FTB40o.png') no-repeat 0 3px;
  background: currentColor;
  width: 0 !important;
  padding: 0 37px 0 0;
}

#gaia_header a {
  color: #FFFFFF !important;
  text-shadow: 0 0 10px var(--aqua-full);
  text-transform: uppercase;
}

#gaia_header a:hover {
  color: var(--pink-full) !important;
  text-shadow: 0 0 10px var(--pink-full);
}

#gaia_header a, #gaia_header a::before {font-size: 12px;}
#header_right a[href*='edit'], #header_right a[href*='report'] {font-size: 0;}
#header_right a[href*='edit']::before {content: 'Edit Mine';}
#header_right a[href*='report']::before {content: 'Report Profile';}

/* Columns */

#columns {display: contents;}
#column_2, #column_3::before {position: absolute;}

#columns .column {
  float: none;
  display: block;
  font-size: 0;
}

#column_1, #column_3 {
  width: 100%;
  margin: 0;
  position: fixed;
  top: 0;
  left: 0;
}
#column_1 {height: 100%;}
#column_3 {height: 50%;}

#column_2, #column_3 {
  opacity: 0;
  transition: opacity .5s ease-in-out;
}
#column_2:hover, #column_2:hover ~ #column_3 {opacity: 1;}

#column_2 {
  width: 828px;
  height: 203px;
  margin: 172px 0 0 0;
  left: calc(50% - 414px);
  border: 7px solid transparent;
  box-sizing: border-box;
  contain: layout;
}

/* Username */

#column_3::before {
  content: '';
  width: 452px;
  height: 60px;
  top: 20%;
  left: calc(50% - 226px);
  filter: drop-shadow(3px 0 var(--pink-full)) drop-shadow(-3px 0 var(--aqua-full)); 
}

/* Scrollbars */

#columns ::-webkit-scrollbar {
  background: var(--pink-part);
  width: 8px;
}
#columns ::-webkit-scrollbar-thumb {background: var(--pink-full);}

.panel {
  scrollbar-color: var(--pink-full) var(--pink-part);
  scrollbar-width: thin;
}

/* Panels */

.panel, .panel h2 {
  background: none;
  color: #FFFFFF;
  font: 12px/1.6 'Open Sans', sans-serif;
  margin: 0;
  padding: 0;
  box-sizing: border-box;
  overflow: hidden;
}
.panel {position: absolute;}

.panel a {
  color: var(--aqua-full);
  text-shadow: 0 0 10px currentColor;
}
.panel a:hover {color: var(--pink-full);}

#id_wishlist, #id_comments, #id_footprints, .media_panel {
  background: rgba(0, 192, 255, .2);
  width: 464px;
  height: 100% !important;
  text-shadow: 0 0 10px var(--aqua-full);
  bottom: -100%;
  left: 175px;
  border: 19px solid transparent;
  opacity: 0;
  transition: opacity .5s ease-in-out, bottom 0s linear .5s;
  z-index: 1;
}

#id_wishlist:hover, #id_comments:hover, #id_footprints:hover, .media_panel:hover {
  bottom: 0;
  opacity: 1;
  transition: opacity .5s ease-in-out, bottom 0s linear 0s;
}

#id_comments, #id_wishlist, #id_footprints {
  padding-right: 15px;
  overflow-y: scroll;
}

/* Buttons */

#column_2 :where(h2, .custom_panel), #id_store a, #id_contact li * {
  width: 164px;
  height: 39px !important;
  font-size: 0;
}
#column_1 h2, #id_store h2, #id_contact h2 {display: none;}
#id_store a, #id_contact li * {display: block;}

.panel h2 {position: fixed;}
.panel:hover h2 {width: 180px;}

#column_2 :where(h2, .custom_panel) {left: 0;}
.custom_panel:nth-of-type(2), .panel:nth-of-type(1) h2 {top: 0;}
.custom_panel:nth-of-type(4), .panel:nth-of-type(3) h2 {top: 50px;}
.custom_panel:nth-of-type(6), .panel:nth-of-type(5) h2 {top: 100px;}
.custom_panel:nth-of-type(8), .panel:nth-of-type(7) h2 {top: 150px;}

#column_2 .custom_panel, #id_store a, #id_contact a {
  filter: drop-shadow(0 0 var(--pink-full)) drop-shadow(0 0 var(--aqua-full));
  transition: filter .5s ease-in-out;
}
#column_2 .panel:hover + .custom_panel, #id_store a:hover, #id_contact a:hover {filter: drop-shadow(2px 0 var(--pink-full)) drop-shadow(-2px 0 var(--aqua-full));}

#id_store, #id_contact {right: 0;}
#id_contact {bottom: 0;}

#id_store :is(h3, div, p:first-of-type) {display: none;}
#id_store p:last-of-type {display: contents;}
#id_contact li:nth-last-of-type(n+2) {margin-bottom: 11px;}

/* Comments */

#id_comments {
  display: flex;
  flex-flow: row wrap;
  justify-content: right;
}

#id_comments #alerts_banner, #id_comments h2 + div .clear {display: none;}
#id_comments h2 + div, #id_comments h2 ~ p, #id_comments #alert_container {display: contents;}
#id_comments dt, #id_comments .postcontent {text-align: left !important;}
#id_comments .postcontent img {max-width: 100% !important;}

#id_comments dt {
  display: flex;
  align-items: baseline;
  padding: 1px 0 0 67px;
  height: 0;
  line-height: inherit;
  position: relative;
  border: none;
}

#id_comments .date {
  flex-grow: 1;
  display: inline-flex;
  flex-flow: row-reverse nowrap;
  justify-content: space-between;
  font-size: 10px;
}

#id_comments .username {
  float: none;
  display: revert;
  margin-right: .3em;
}

#id_comments dd {
  display: grid;
  grid-template-columns: 52px calc(100% - 52px - 15px);
  gap: 0 15px;
  margin: 0 0 20px 0;
  overflow: visible;
}
#id_comments dd:last-of-type {margin: 0 0 5px 0;}

#id_comments .dropBox {
  background: #FFFFFF;
  width: 48px;
  height: 48px;
  margin: -1px 15px 0 0;
  border: 2px solid var(--aqua-full);
  border-radius: 50%;
  overflow: hidden;
}

#id_comments .dropBox img {
  width: 120px;
  height: 150px;
  margin: -30px 0 0 -47px;
}

#id_comments .postcontent::before {
  content: ' ';
  display: block;
  white-space: pre;
  margin: 5px 0;
  border-bottom: 1px dotted var(--aqua-part);
}

#id_comments .deletecomment {
  display: flex;
  grid-area: 2/2/3/3;
  margin: 5px 0 0 0;
  padding: 5px 0 0 0;
  border-top: 1px dotted var(--aqua-part);
}
#id_comments .deletecomment a:last-of-type {order: 3;}
#id_comments .deletecomment br {display: none;}

#id_comments .deletecomment::after {
  content: ' or ';
  order: 2;
  white-space: pre;
}

/* Comments Links */

#id_comments h2 + div a, #id_comments h2 ~ p a {
  display: block;
  background: var(--aqua-full);
  width: 39px;
  height: 39px;
  color: #FFFFFF;
  font-size: 0;
  text-align: center;
  text-shadow: none;
  margin-bottom: 15px;
  border-radius: 5px;
}
#id_comments h2 + div a:hover, #id_comments h2 ~ p a:hover {background: var(--pink-full);}
#id_comments h2 + div a {margin-right: 11px;}

#id_comments h2 + div a::before, #id_comments h2 ~ p a::before {font: 20px/39px 'Font Awesome 5 Free';}
#id_comments h2 + div a::before {content: '';}
#id_comments h2 ~ p a::before {content: '';}

/* Wish List */

#id_wishlist {
  display: grid;
  grid-template-columns: repeat(8, 49px);
  grid-auto-rows: 49px;
  gap: 1px;
  scroll-snap-type: y mandatory;
}
#id_wishlist .clear, .premium_sparkle {display: none;}

#id_wishlist .item, #id_wishlist .item a {
  display: flex;
  justify-content: center;
  align-items: center;
}

#id_wishlist .item {
  position: relative;
  scroll-snap-align: start;
}

#id_wishlist a {
  background: #FFFFFF20;
  width: 37px;
  height: 37px;
  border: 1px solid var(--aqua-full);
  border-radius: 5px;
}

#id_wishlist a:hover {
  background: #FFFFFF;
  border-color: var(--pink-full);
}

.owner_checkmark {
  margin: 0;
  bottom: 10px;
  left: 10px;
  filter: brightness(500%) hue-rotate(30deg);
  pointer-events: none;
}

/* Visitors */

#id_footprints .item {
  display: grid;
  grid-auto-flow: column;
  justify-content: start;
  line-height: 2.1;
  padding: 0 0 0 5px;
}

#id_footprints .item::before {
  content: ' visited ';
  grid-column: 2;
  white-space: pre;
}
#id_footprints .item::after {content: '.';}

/* Media */

.media_panel iframe {
  width: 100%;
  height: 100%;
  border-radius: 5px;
}

/* Avatar */

@keyframes FadeAvi {
  from {opacity: 0;}
  to {opacity: 1;}
}

#id_details {
  width: 140px;
  height: 375px;
  left: calc(50% - 70px);
  overflow: visible;
  animation: FadeAvi 5s 30s ease-in-out 1 both;
}
#id_details p:nth-of-type(n+2), .forum_userstatus {display: none;}
#id_details p {margin: 0;}

#id_details img {
  position: relative;
  filter: drop-shadow(0 0 10px powderblue);
}

#id_details::before {
  content: '';
  background: #FFFFFF;
  width: 100%;
  height: 20px;
  position: absolute;
  top: 138px;
  left: 0;
  border-radius: 50%;
  box-shadow: 0 0 15px pink;
}

/* Falling Feathers */

@keyframes DropFeather {
  000% {transform: translateY(000vh) rotate(-30deg); animation-timing-function: ease-in-out;}
  010% {transform: translateY(010vh) rotate(+30deg); animation-timing-function: ease-in-out;}
  020% {transform: translateY(020vh) rotate(-30deg); animation-timing-function: ease-in-out;}
  030% {transform: translateY(030vh) rotate(+30deg); animation-timing-function: ease-in-out;}
  040% {transform: translateY(040vh) rotate(-30deg); animation-timing-function: ease-in-out;}
  050% {transform: translateY(050vh) rotate(+30deg); animation-timing-function: ease-in-out;}
  060% {transform: translateY(060vh) rotate(-30deg); animation-timing-function: ease-in-out;}
  070% {transform: translateY(070vh) rotate(+30deg); animation-timing-function: ease-in-out;}
  080% {transform: translateY(080vh) rotate(-30deg); animation-timing-function: ease-in-out;}
  090% {transform: translateY(090vh) rotate(+30deg); animation-timing-function: ease-in-out;}
  100% {transform: translateY(100vh) rotate(-30deg);}
}
@keyframes BonusMotion {from {translate: 0 -200px;} to {translate: 0 200px;}}

#column_1 .custom_panel, #column_1 .custom_panel div {
  width: 1200px;
  height: 100% !important;
  top: 0;
}

#column_1 .custom_panel {
  left: calc(50% - 600px);
  overflow: visible;
}

#column_1 b {
  background: url('https://i.imgur.com/9tdPlho.png');
  position: absolute;
  transform-origin: center -100px;
  animation: DropFeather 45s ease-in-out infinite, BonusMotion 45s ease-out infinite;
}
@media (prefers-reduced-motion) {#column_1 b {animation-play-state: paused;}}

#column_1 b:nth-of-type(7n+1) {
  width: 74px;
  height: 50px;
}

#column_1 b:nth-of-type(7n+2) {
  background-position-x: -84px;
  width: 75px;
  height: 36px;
}

#column_1 b:nth-of-type(7n+3) {
  background-position-x: -169px;
  width: 77px;
  height: 43px;
}

#column_1 b:nth-of-type(7n+4) {
  background-position-x: -256px;
  width: 78px;
  height: 47px;
}

#column_1 b:nth-of-type(7n+5) {
  background-position-x: -344px;
  width: 89px;
  height: 44px;
}

#column_1 b:nth-of-type(7n+6) {
  background-position-x: -443px;
  width: 90px;
  height: 39px;
}

#column_1 b:nth-of-type(7n+7) {
  background-position-x: -543px;
  width: 95px;
  height: 40px;
}

#column_1 b:nth-of-type(01) {left: 1073px; animation-duration: 42s, 42s; animation-delay: -09s, -09s;}
#column_1 b:nth-of-type(02) {left: 0375px; animation-duration: 43s, 43s; animation-delay: -34s, -34s;}
#column_1 b:nth-of-type(03) {left: 0864px; animation-duration: 41s, 41s; animation-delay: -25s, -25s;}
#column_1 b:nth-of-type(04) {left: 0637px; animation-duration: 45s, 45s; animation-delay: -18s, -18s;}
#column_1 b:nth-of-type(05) {left: 0612px; animation-duration: 40s, 40s; animation-delay: -02s, -02s;}
#column_1 b:nth-of-type(06) {left: 0891px; animation-duration: 43s, 43s; animation-delay: -19s, -19s;}
#column_1 b:nth-of-type(07) {left: 0486px; animation-duration: 45s, 45s; animation-delay: -31s, -31s;}
#column_1 b:nth-of-type(08) {left: 0648px; animation-duration: 48s, 48s; animation-delay: -30s, -30s;}
#column_1 b:nth-of-type(09) {left: 0025px; animation-duration: 49s, 49s; animation-delay: -20s, -20s;}
#column_1 b:nth-of-type(10) {left: 0410px; animation-duration: 49s, 49s; animation-delay: -28s, -28s;}
#column_1 b:nth-of-type(11) {left: 0272px; animation-duration: 41s, 41s; animation-delay: -36s, -36s;}
#column_1 b:nth-of-type(12) {left: 0801px; animation-duration: 45s, 45s; animation-delay: -20s, -20s;}
#column_1 b:nth-of-type(13) {left: 0109px; animation-duration: 43s, 43s; animation-delay: -38s, -38s;}
#column_1 b:nth-of-type(14) {left: 0158px; animation-duration: 44s, 44s; animation-delay: -18s, -18s;}

/* Misc */

#pictures_container, #texts_container {
  width: 0;
  height: 375px;
  position: absolute;
  left: calc(50% - 414px);
}
.bbcode-swapping-image {background: url('https://i.imgur.com/Fk5mUXF.png');}

#id_details, #column_2, #pictures_container, #texts_container {bottom: 14px;}
@media (min-height: 720px) {#id_details, #column_2, #pictures_container, #texts_container {top: calc(50% - 30px);}}

/*C++ Program that calculates the Compound Interest*/
#include <iostream>
#include <cmath>
using namespace std;

int main() {
    char loop = 'y'; //Declaration of variables
    int P, R, T;
    float CI;

    while (loop == 'y'){ //Input of necessary information
        printf("Enter principal: ");
        cin >> P;

        printf("Enter interest rate: ");
        cin >> R;

        printf("Enter number of years to pay: ");
        cin >> T;

        printf("Year\tCompound Interest\n");

        int ctr = 1;
        while (ctr <= T) { //Calculates and prints CI
            CI = P * pow((1 + (R/100.00)), ctr);
            cout << ctr << "\t" << CI << endl;
            ctr++;
        }

        cout << "Compound interest for " << T << " years is " << CI << endl;
        printf("Try again? "); //Outputs the end CI
        cin >> loop;
        if (loop != 'y') { //Stops the loop when encounterd different char
            break;
        }
    }
}


WITH 
	preparedData as ( 
		SELECT
			p.userID,
      p.productID,
      pr.productValue,
			paymentAmount,
			paymentPeriod,
			paymentDateTime,
			DATE_TRUNC(DATETIME(paymentDateTime), MONTH) as prepaidPeriodStart,
      DATE_TRUNC(DATE_ADD(DATETIME(paymentDateTime), INTERVAL paymentPeriod MONTH), MONTH) as prepaidPeriodEnd,
      DATE_TRUNC(DATE_ADD(DATETIME(paymentDateTime), INTERVAL paymentPeriod MONTH), DAY) as prepaidPeriodEndDay,
			DATE_ADD(DATETIME(paymentDateTime), INTERVAL paymentPeriod MONTH) as prepaidPeriodEndDateTime
		FROM
			`uptimerobot-001.ur.payments` p

    LEFT JOIN
    `uptimerobot-001.ur.products` pr
      
      ON p.productID = pr.productID

		LEFT JOIN	(
			SELECT
				userID,
				MAX(paymentDateTime) lastPaymentDateTime
			FROM
				`uptimerobot-001.ur.payments`
			
			WHERE
				paymentStatus = 1 
				AND paymentPeriod IN (1,12)
				AND userID IS NOT NULL
			GROUP BY
				userID
			) lp
			ON p.userID =lp.userID AND p.paymentDateTime = lp.lastPaymentDateTime
  
		WHERE
			paymentStatus = 1 
			AND paymentPeriod IN (1,12)
			AND p.userID IS NOT NULL
			AND lp.lastPaymentDateTime IS NOT NULL
	),
	calendar as (
		SELECT 
		DATE_TRUNC(DATETIME(paymentDateTime), DAY) as reportingYearMonthDay
		FROM `uptimerobot-001.ur.payments`
		GROUP BY 
			reportingYearMonthDay
	)

  SELECT
		reportingYearMonthDay,
		COUNT(DISTINCT userID) churnedCustomers,
		(CASE 
			WHEN DATE_ADD(reportingYearMonthDay, INTERVAL 17 DAY) >= CURRENT_DATE THEN 1
			WHEN DATE_ADD(reportingYearMonthDay, INTERVAL 17 DAY) < CURRENT_DATE THEN 0
		ELSE 99999999999999
		END) isGracePeriod

  FROM
  	preparedData pd
	
	LEFT JOIN calendar cal
		ON pd.prepaidPeriodEndDateTime > reportingYearMonthDay AND pd.prepaidPeriodEndDay < DATE_ADD(cal.reportingYearMonthDay, INTERVAL 1 DAY)
	
	GROUP BY
		reportingYearMonthDay
	
	ORDER BY
		reportingYearMonthDay DESC

	

a = 25
b = 4
print("Addition:",a+b)
print("Subtraction:",a-b)
print("Multiplication:",a*b)
print("Quotient:",a/b)
print("Remainder:",a%b)
print("Floor value of a/b = ", a//b)
print("power of a^b = ", pow(a,b))

{"Copy":[],"Skilltree":{"Trash":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Trash"}},"Stats":{"kek":{"ObjectValue":"18","ObjectClass":"IntValue","ObjectName":"kek"},"WeaveSpeed":{"ObjectValue":"20","ObjectClass":"IntValue","ObjectName":"WeaveSpeed"},"Village":{"ObjectValue":"6","ObjectClass":"IntValue","ObjectName":"Village"},"Wiped":{"ObjectValue":"5","ObjectClass":"IntValue","ObjectName":"Wiped"},"startnewlife":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"startnewlife"},"Key5":{"ObjectValue":"5","ObjectClass":"StringValue","ObjectName":"Key5"},"MissionSuccess":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MissionSuccess"},"AnbuLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AnbuLog"},"Title":{"ObjectValue":"Academy Student","ObjectClass":"StringValue","ObjectName":"Title"},"Slot8":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot8"},"LeftEye":{"ObjectValue":"Default","ObjectClass":"StringValue","ObjectName":"LeftEye"},"PDLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PDLog"},"Influence":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Influence"},"ToggleAccessories":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"ToggleAccessories"},"Slot1":{"ObjectValue":"Crystal Blade","ObjectClass":"StringValue","ObjectName":"Slot1"},"EyeColorB":{"ObjectValue":"248","ObjectClass":"IntValue","ObjectName":"EyeColorB"},"Slot2":{"ObjectValue":"Crystal Crossing","ObjectClass":"StringValue","ObjectName":"Slot2"},"Trauma":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Trauma"},"ResetPos":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ResetPos"},"Key6":{"ObjectValue":"6","ObjectClass":"StringValue","ObjectName":"Key6"},"Ryo":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"Ryo"},"CurrentWep":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CurrentWep"},"SpentSkillPoints":{"ObjectValue":"-8","ObjectClass":"IntValue","ObjectName":"SpentSkillPoints"},"BerserkTimes":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BerserkTimes"},"EyeColorG":{"ObjectValue":"109","ObjectClass":"IntValue","ObjectName":"EyeColorG"},"Slot7":{"ObjectValue":"Earth Dragon Bomb","ObjectClass":"StringValue","ObjectName":"Slot7"},"Slot5":{"ObjectValue":"Earth Pillar","ObjectClass":"StringValue","ObjectName":"Slot5"},"Blindness":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blindness"},"Slot3":{"ObjectValue":"Crystal Prison","ObjectClass":"StringValue","ObjectName":"Slot3"},"RightEye":{"ObjectValue":"Default","ObjectClass":"StringValue","ObjectName":"RightEye"},"SkillPoints":{"ObjectValue":"8","ObjectClass":"IntValue","ObjectName":"SkillPoints"},"mapmove1":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"mapmove1"},"PrimaryAmmo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PrimaryAmmo"},"HairColorG":{"ObjectValue":"124","ObjectClass":"IntValue","ObjectName":"HairColorG"},"Slot10":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot10"},"Name":{"ObjectValue":"MEEZY","ObjectClass":"StringValue","ObjectName":"Name"},"MaxTails":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxTails"},"LINDAMINISTARTUP":{"ObjectValue":"9","ObjectClass":"IntValue","ObjectName":"LINDAMINISTARTUP"},"logcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"logcheck"},"ParentID":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ParentID"},"PosX":{"ObjectValue":"3447","ObjectClass":"IntValue","ObjectName":"PosX"},"LastChakra":{"ObjectValue":"519","ObjectClass":"IntValue","ObjectName":"LastChakra"},"LastHealth":{"ObjectValue":"239","ObjectClass":"IntValue","ObjectName":"LastHealth"},"OriginalVillage":{"ObjectValue":"6","ObjectClass":"IntValue","ObjectName":"OriginalVillage"},"WeaponSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"WeaponSave"},"TimesRerolled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TimesRerolled"},"Key12":{"ObjectValue":"=","ObjectClass":"StringValue","ObjectName":"Key12"},"ItemSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ItemSave"},"Age":{"ObjectValue":"14","ObjectClass":"IntValue","ObjectName":"Age"},"LastKilledUser":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastKilledUser"},"TailedBeast":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeast"},"CColorB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorB"},"RESTORE":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RESTORE"},"MaxRank":{"ObjectValue":"24","ObjectClass":"IntValue","ObjectName":"MaxRank"},"Elo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Elo"},"TailedBeastEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastEXP"},"BijuuSealed":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuSealed"},"AgeLimit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AgeLimit"},"WipeLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"WipeLog"},"FamilyID":{"ObjectValue":"MEEZY(18)1875443","ObjectClass":"StringValue","ObjectName":"FamilyID"},"Mastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mastered"},"Slot4":{"ObjectValue":"Crystal Command","ObjectClass":"StringValue","ObjectName":"Slot4"},"AwakenCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AwakenCD"},"Parentq":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Parentq"},"Key11":{"ObjectValue":"-","ObjectClass":"StringValue","ObjectName":"Key11"},"Scar":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Scar"},"LastAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastAge"},"Slot0":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot0"},"Mangekyo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mangekyo"},"BonusSkillPoints":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BonusSkillPoints"},"TailedBeastMastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastMastered"},"RU":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RU"},"LastStomach":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastStomach"},"KillStreak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"KillStreak"},"MaxAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxAge"},"DefaultMouth":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"DefaultMouth"},"TrainingEXP":{"ObjectValue":"10","ObjectClass":"IntValue","ObjectName":"TrainingEXP"},"CloakTime":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CloakTime"},"Key8":{"ObjectValue":"8","ObjectClass":"StringValue","ObjectName":"Key8"},"Key3":{"ObjectValue":"3","ObjectClass":"StringValue","ObjectName":"Key3"},"Key1":{"ObjectValue":"1","ObjectClass":"StringValue","ObjectName":"Key1"},"RP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RP"},"BijuuXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuXP"},"Slot12":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot12"},"Kids":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Kids"},"Deaths":{"ObjectValue":"8","ObjectClass":"IntValue","ObjectName":"Deaths"},"berserkcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"berserkcheck"},"HairColorB":{"ObjectValue":"151","ObjectClass":"IntValue","ObjectName":"HairColorB"},"RaidCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RaidCD"},"Slot6":{"ObjectValue":"Rock Gun","ObjectClass":"StringValue","ObjectName":"Slot6"},"PrimaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"PrimaryWep"},"RecentTrainings":{"ObjectValue":"[\"Kunai Training\",\"Kunai Training\",\"Kunai Training\"]","ObjectClass":"StringValue","ObjectName":"RecentTrainings"},"Key9":{"ObjectValue":"9","ObjectClass":"StringValue","ObjectName":"Key9"},"ChakraArmorRGB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ChakraArmorRGB"},"SecondaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"SecondaryWep"},"GripCount":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"GripCount"},"EyeColorR":{"ObjectValue":"103","ObjectClass":"IntValue","ObjectName":"EyeColorR"},"bald":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"bald"},"GrandParentID":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"GrandParentID"},"Slot=":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot="},"Ken":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ken"},"HairColorR":{"ObjectValue":"104","ObjectClass":"IntValue","ObjectName":"HairColorR"},"CombatEXP":{"ObjectValue":"-17","ObjectClass":"IntValue","ObjectName":"CombatEXP"},"jincooldown":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"jincooldown"},"BijuuConvo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuConvo"},"Slot-":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot-"},"CColorR":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorR"},"Version":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Version"},"SPR":{"ObjectValue":"12","ObjectClass":"IntValue","ObjectName":"SPR"},"HandsignTraining":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"HandsignTraining"},"Genjutsu":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"BDAYS":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"BDAYS"},"CurseMarkEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkEXP"},"CurseMarkLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkLevel"},"Key4":{"ObjectValue":"4","ObjectClass":"StringValue","ObjectName":"Key4"},"KPos":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"KPos"},"DateRecord":{"ObjectValue":"2349","ObjectClass":"IntValue","ObjectName":"DateRecord"},"UnlockedCloak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"UnlockedCloak"},"SeenDeaths":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SeenDeaths"},"RyoRES":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RyoRES"},"Slot9":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot9"},"PosY":{"ObjectValue":"217","ObjectClass":"IntValue","ObjectName":"PosY"},"PosZ":{"ObjectValue":"-5870","ObjectClass":"IntValue","ObjectName":"PosZ"},"SecondaryCN":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"SecondaryCN"},"Rank":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"Rank"},"MissionEXP":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"MissionEXP"},"Slot11":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot11"},"LastGripped":{"ObjectValue":"142229086","ObjectClass":"IntValue","ObjectName":"LastGripped"},"HideName":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HideName"},"HBChoice":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"HBChoice"},"Prestige":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Prestige"},"PrimaryCN":{"ObjectValue":"5","ObjectClass":"IntValue","ObjectName":"PrimaryCN"},"SkinColor":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"SkinColor"},"Key2":{"ObjectValue":"2","ObjectClass":"StringValue","ObjectName":"Key2"},"Key7":{"ObjectValue":"7","ObjectClass":"StringValue","ObjectName":"Key7"},"TailedBeastLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastLevel"},"Gender":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Gender"},"CColorG":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorG"},"IsExiled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"IsExiled"},"CanRank":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CanRank"},"Marking":{"ObjectValue":"69","ObjectClass":"IntValue","ObjectName":"Marking"},"SecondaryAmmo":{"ObjectValue":"10","ObjectClass":"IntValue","ObjectName":"SecondaryAmmo"},"Key10":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"Key10"},"BijuuRelation":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuRelation"},"Blind":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blind"},"SwordSave":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SwordSave"},"Personality":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Personality"}}}

#include<stdio.h>
#include<stdlib.h>
#define READ	10
#define WRITE	11
#define LOAD	20
#define STORE	21
#define ADD		30
#define SUBTRACT 31
#define DIVIDE	32
#define MULTIPLY 33
#define BRANCH 40
#define BRANCHNEG 41
#define BRANCHZERO 42
#define HALT 43



int main()
{
	int memory[100] = { 0 };
	int accumulator = 0;
	int instruction_counter = 0; //boot address - 0000
	int instruction_register = 0;
	int operation_code = 0;
	int operand = 0;
	//LOAD PROGRAM INTO MEMORY
	memory[0] = 1050;
	memory[1] = 2050;
	memory[2] = 1051;
	memory[3] = 3051;
	memory[4] = 2152;
	memory[5] = 1152;
	memory[6] = 4300;

	while (1)
	{
		instruction_register = memory[instruction_counter++];
		operation_code = instruction_register / 100;
		operand = instruction_register % 100;
		switch (operation_code)
		{
		case 10: 
			scanf_s("%d", &memory[operand]);
			break;
		case 11:
			printf("%d", memory[operand]);
			break;
		case 20:
			accumulator = memory[operand];
			break;
		case 21:
			memory[operand] = accumulator;
			break;
		case 30:
			accumulator += memory[operand];
			break;
		case 31:
			accumulator -= memory[operand];
			break;
		case 32:
			accumulator /= memory[operand];
			break;
		case 33:
			accumulator *= memory[operand];
			break;
		case 40:
			instruction_counter = operand;
			break;
		case 41:
			if (accumulator < 0)
			{
				instruction_counter = operand;
			}
			break;
		case 42:
			if (accumulator == 0)
			{
				instruction_counter = operand;
			}
			break;
		case 43:
			printf("Program is terminated!");
			exit(0);
			break;
		default: 
			printf("Err! No such instruction!!!! . Program is terminated!");
			exit(0);
			break;
		}

	}


	return 0;
}

#include <bits/stdc++.h>
#include <stdio.h>
#include <stdlib.h>
#include <string>
#include <cmath>
#include <windows.h>
#include <GL/gl.h>
#include <GL/glut.h>
using namespace std;

float speed=10;
int Gamex=30,Gamey=30;
int step=0,cntr=0,eatenCounter=0,length=1;
int x[100]={Gamex/2,0},y[100]={Gamey/2,0};
int xrand=(rand()%Gamex)+1,yrand=(rand()%Gamey)+1;
bool Over=false,eaten=true;



void Snake(){

    for(int i=length-1;i>0;i--){
        x[i]=x[i-1];
        y[i]=y[i-1];
    }

    if(step==1)x[0]--;
    else if(step==2)y[0]++;
    else if(step==3)x[0]++;
    else if(step==4)y[0]--;

    if(x[0]>=Gamex)x[0]=0;
    if(x[0]<0)x[0]=Gamex;
    if(y[0]<0)y[0]=Gamey-1;
    if(y[0]>=Gamey)y[0]=0;

    for(int i=0;i<length;i++){
        glColor3f(1,0,0);
        glRectd(x[i],y[i],x[i]+1,y[i]+1);
    }

    for(int i=1;i<length;i++){
        if(x[i]==x[0] and y[i]==y[0])Over=true;
    }

    if(x[0]==xrand and y[0]==yrand){
        eaten=true;
        length++;
        cntr++;
    }

    if(eatenCounter%2==0)speed+=0;

}

void food(){
    if(eaten==true){
        xrand=(rand()%Gamex),yrand=(rand()%Gamey);
        eaten=false;
        eatenCounter++;
    }

    glColor3f(0,1,0);
    glRectd(xrand,yrand,xrand+1,yrand+1);

}



void keyboard(int k,int x,int y){
    // 1 l
    // 2 u
    // 3
    if(k==GLUT_KEY_RIGHT){
        if(step!=1 and step!=3)step=3;
    }else if(k==GLUT_KEY_LEFT){
        if(step!=3 and step!=1)step=1;
    }else if(k==GLUT_KEY_UP){
        if(step!=4 and step!=2)step=2;
    }else if(k==GLUT_KEY_DOWN){
        if(step!=2 and step!=4)step=4;
    }
}
void reshape(int a,int b){
    glViewport(0,0,(GLsizei)a,(GLsizei)b);
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(0,Gamex,0,Gamey,-1,1);
    glMatrixMode(GL_MODELVIEW);
}

void timer(int){
    glutPostRedisplay();
    glutTimerFunc(1000/speed,timer,0);
}


void MainGame(){
    glClear(GL_COLOR_BUFFER_BIT);
    Snake();
    food();
    glutSwapBuffers();
    if(Over==true){
        char c[20]={0},res[9]="Score : ";
        itoa(cntr,c,10);
        strcat(res,c);
        MessageBox(NULL,res,"Don't Cry :(",0);
        // Try to add MaxScore
        exit(0);
    }
}

int main(int argc, char** argv)
{
    //Initialize GLUT and creat The Window
    glutInit(&argc, argv);
    glutInitWindowPosition(80,50);
    glutInitWindowSize(600, 600);
    glutInitDisplayMode(GLUT_DOUBLE|GLUT_RGB);
    glutCreateWindow("Game");

    //Create Main Functions
    glutDisplayFunc(MainGame);
    glutReshapeFunc(reshape);
    glutSpecialFunc(keyboard);
    glutTimerFunc(0,timer,0);


    //change Color of Window
    glClearColor(0,0,0,0);
    glutMainLoop();
    return 0;
}



Pasted at: 15/12/2022 09:20
25c6bddb-c1f1-47ef-86b5-9ec184bfec52@gmail.com

-- Duplicates the logs into workspace
for i, v in pairs(LogsFolder:GetChildren()) do
    v:Clone().Parent = game.Workspace
end
 
wait(1) -- Just to make sure there are no bugs
 
-- Makes the players able to pick up logs
for i, v in pairs(game.Workspace:GetChildren()) do
    if v.Name == "Log" then
        v.Touched:Connect(function(hit)
            if hit.Parent:FindFirstChild("Humanoid") then
                v:Destroy()
                LogsCollected.Value = LogsCollected.Value + 1
            end
        end)
    end
end
 
-- Checks if all the logs have been collected
while true do
    if LogsCollected.Value == 3 then
        break
    end
    wait(1)
end

// FORM 1
using System.Collections.Generic;
using System.Text;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace KP2_V4
{

    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void button1_Click(object sender, EventArgs e)
        {
            double value1 = 0;
            double value2 = 0;
            double value3 = 0;
            try
            {
                listBox1.Items.Add(textBox1.Text);
                listBox1.Items.Add(textBox2.Text);
                listBox1.Items.Add(textBox3.Text);
                listBox1.Items.Add(textBox4.Text);
                listBox1.Items.Add(dateTimePicker1.Value);
                textBox1.Clear();
                textBox2.Clear();
                textBox3.Clear();
                foreach (RadioButton rad in groupBox1.Controls)
                {
                    if (rad.Checked)
                        listBox1.Items.Add(rad.Text);
                }
                if (radioButton1.Checked)
                    value1 = 3.09;
                else if (radioButton2.Checked)
                    value1 = 5.30;
                else if (radioButton3.Checked)
                    value1 = 4.00;
                foreach (RadioButton rad in groupBox2.Controls)
                {
                    if (rad.Checked)
                        listBox1.Items.Add(rad.Text);
                }
                if (radioButton4.Checked)
                    value2 = 5.50;
                else if (radioButton5.Checked)
                    value2 = 6.00;
                else if (radioButton6.Checked)
                    value2 = 7.23;
                foreach (RadioButton rad in groupBox3.Controls)
                {
                    if (rad.Checked)
                        listBox1.Items.Add(rad.Text);
                }
                if (radioButton7.Checked)
                    value3 = 9.00;
                else if (radioButton8.Checked)
                    value3 = 6.00;
                else if (radioButton9.Checked)
                    value3 = 4.50;
                double value = value1 + value2 + value3;
                textBox5.Text = ((value * (double.Parse(textBox4.Text) / 100)) * 1.2).ToString();
                foreach(RadioButton rad in groupBox1.Controls)
                { rad.Checked = false;}
                foreach (RadioButton rad in groupBox2.Controls)
                { rad.Checked = false; }
                foreach (RadioButton rad in groupBox3.Controls)
                { rad.Checked = false; }
                textBox4.Clear();
            }
            catch{ }
        }

        private void button2_Click(object sender, EventArgs e)
        {
            textBox5.Clear();
            listBox1.Items.Clear();
        }

        private void button3_Click(object sender, EventArgs e)
        {
            Form2 form = new Form2(listBox1.Items);
            form.Show();
        }
    }
}

// FORM 2
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace KP2_V4
{
    public partial class Form2 : Form
    {
        public Form2()
        {
            InitializeComponent();
        }

        public Form2(ListBox.ObjectCollection objectCollection)
        {
            InitializeComponent();
            this.listBox1.DataSource = objectCollection; 
        }

        private void button1_Click(object sender, EventArgs e)
        {
            TextWriter txt = new StreamWriter(@"listbox.txt");
            txt.Write(listBox1.Text);
            txt.Close();
            MessageBox.Show("Saved");
        }


    }
}

#include<stdio.h>
#include<stdlib.h>
#define READ	10
#define WRITE	11
#define LOAD	20
#define STORE	21
#define ADD		30
#define SUBTRACT 31
#define DIVIDE	32
#define MULTIPLY 33
#define BRANCH 40
#define BRANCHNEG 41
#define BRANCHZERO 42
#define HALT 43



int main()
{
	int memory[100] = { 0 };
	int accumulator = 0;
	int instruction_counter = 0; //boot address - 0000
	int instruction_register = 0;
	int operation_code = 0;
	int operand = 0;
	/*
	FILE* fp;
	fopen_s(&fp,"d:\\test.txt", "w");
	if (fp != NULL)
	{
		fprintf_s(fp, "%d\n", 1050);
		fprintf_s(fp, "%d\n", 2050);
		fprintf_s(fp, "%d\n", 1051);
		fprintf_s(fp, "%d\n", 3051);
		fprintf_s(fp, "%d\n", 2152);
		fprintf_s(fp, "%d\n", 1152);
		fprintf_s(fp, "%d\n", 4300);
		fclose(fp);
	}
	*/
	int index = 0;
	FILE* fin;
	fopen_s(&fin, "D:\\test.txt", "r");
	printf("EOF = %d\n\n", EOF);
	if (fin != NULL)
	{
		while (fscanf_s(fin, "%d", &memory[index++]) > 0)
		{

		}
	
		
		fclose(fin);
	}



	//LOAD PROGRAM INTO MEMORY
	//memory[0] = 1050;
	//memory[1] = 2050;
	//memory[2] = 1051;
	//memory[3] = 3051;
	//memory[4] = 2152;
	//memory[5] = 1152;
	//memory[6] = 4300;

	while (1)
	{
		instruction_register = memory[instruction_counter++];
		operation_code = instruction_register / 100;
		operand = instruction_register % 100;
		switch (operation_code)
		{
		case 10:
			scanf_s("%d", &memory[operand]);
			break;
		case 11:
			printf("%d", memory[operand]);
			break;
		case 20:
			accumulator = memory[operand];
			break;
		case 21:
			memory[operand] = accumulator;
			break;
		case 30:
			accumulator += memory[operand];
			break;
		case 31:
			accumulator -= memory[operand];
			break;
		case 32:
			accumulator /= memory[operand];
			break;
		case 33:
			accumulator *= memory[operand];
			break;
		case 40:
			instruction_counter = operand;
			break;
		case 41:
			if (accumulator < 0)
			{
				instruction_counter = operand;
			}
			break;
		case 42:
			if (accumulator == 0)
			{
				instruction_counter = operand;
			}
			break;
		case 43:
			printf("Program is terminated!");
			exit(0);
			break;
		default:
			printf("Err! No such instruction!!!! . Program is terminated!");
			exit(0);
			break;
		}

	}


	return 0;
}

{"Copy":[],"Skilltree":{"Gate of View":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Gate of View"},"Demon Flip":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Demon Flip"},"Substitution":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Substitution"},"Leaf Rising Wind":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Leaf Rising Wind"},"Dynamic Entry":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Dynamic Entry"},"Gate of Limit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Gate of Limit"},"Eight Gates":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Eight Gates"},"Dosaku":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Dosaku"},"Genjutsu":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"Hemorrhage":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Hemorrhage"},"Gate of Wonder":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Gate of Wonder"},"Primary Lotus":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Primary Lotus"},"Ketsuryugan":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ketsuryugan"},"Leaf Whirlwind":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Leaf Whirlwind"},"1000 Years of Death":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"1000 Years of Death"}},"Stats":{"WeaveSpeed":{"ObjectValue":"20","ObjectClass":"IntValue","ObjectName":"WeaveSpeed"},"kek":{"ObjectValue":"14","ObjectClass":"IntValue","ObjectName":"kek"},"KillStreak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"KillStreak"},"LastStomach":{"ObjectValue":"533","ObjectClass":"IntValue","ObjectName":"LastStomach"},"MaxAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxAge"},"AnbuLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AnbuLog"},"startnewlife":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"startnewlife"},"Deaths":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Deaths"},"Key5":{"ObjectValue":"x","ObjectClass":"StringValue","ObjectName":"Key5"},"MissionSuccess":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MissionSuccess"},"EyeColorG":{"ObjectValue":"50","ObjectClass":"IntValue","ObjectName":"EyeColorG"},"Key1":{"ObjectValue":"1","ObjectClass":"StringValue","ObjectName":"Key1"},"Key8":{"ObjectValue":"8","ObjectClass":"StringValue","ObjectName":"Key8"},"Key3":{"ObjectValue":"3","ObjectClass":"StringValue","ObjectName":"Key3"},"Ryo":{"ObjectValue":"137","ObjectClass":"IntValue","ObjectName":"Ryo"},"Influence":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Influence"},"Slot1":{"ObjectValue":"Primary Lotus","ObjectClass":"StringValue","ObjectName":"Slot1"},"EyeColorB":{"ObjectValue":"194","ObjectClass":"IntValue","ObjectName":"EyeColorB"},"HideName":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HideName"},"CurrentWep":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CurrentWep"},"SpentSkillPoints":{"ObjectValue":"-17","ObjectClass":"IntValue","ObjectName":"SpentSkillPoints"},"Slot5":{"ObjectValue":"Demon Flip","ObjectClass":"StringValue","ObjectName":"Slot5"},"Blindness":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blindness"},"Slot3":{"ObjectValue":"Hemorrhage","ObjectClass":"StringValue","ObjectName":"Slot3"},"RightEye":{"ObjectValue":"Ketsuryugan","ObjectClass":"StringValue","ObjectName":"RightEye"},"SkillPoints":{"ObjectValue":"17","ObjectClass":"IntValue","ObjectName":"SkillPoints"},"mapmove1":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"mapmove1"},"PrimaryAmmo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PrimaryAmmo"},"Name":{"ObjectValue":"Max","ObjectClass":"StringValue","ObjectName":"Name"},"HairColorG":{"ObjectValue":"91","ObjectClass":"IntValue","ObjectName":"HairColorG"},"Slot10":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot10"},"MaxTails":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxTails"},"PosX":{"ObjectValue":"2355","ObjectClass":"IntValue","ObjectName":"PosX"},"LastChakra":{"ObjectValue":"698","ObjectClass":"IntValue","ObjectName":"LastChakra"},"RU":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RU"},"Slot7":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot7"},"SecondaryCN":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"SecondaryCN"},"Village":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"Village"},"LastHealth":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"LastHealth"},"OriginalVillage":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"OriginalVillage"},"WeaponSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"WeaponSave"},"TimesRerolled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TimesRerolled"},"Slot=":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot="},"Ken":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ken"},"GrandParentID":{"ObjectValue":"Sad(40)855519","ObjectClass":"StringValue","ObjectName":"GrandParentID"},"Age":{"ObjectValue":"11","ObjectClass":"IntValue","ObjectName":"Age"},"LastKilledUser":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastKilledUser"},"TailedBeast":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeast"},"CColorB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorB"},"RESTORE":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RESTORE"},"MaxRank":{"ObjectValue":"24","ObjectClass":"IntValue","ObjectName":"MaxRank"},"Elo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Elo"},"TailedBeastEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastEXP"},"BijuuSealed":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuSealed"},"AgeLimit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AgeLimit"},"WipeLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"WipeLog"},"FamilyID":{"ObjectValue":"Max(14)186002","ObjectClass":"StringValue","ObjectName":"FamilyID"},"Mastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mastered"},"Slot4":{"ObjectValue":"Leaf Whirlwind","ObjectClass":"StringValue","ObjectName":"Slot4"},"AwakenCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AwakenCD"},"LastGripped":{"ObjectValue":"45920680","ObjectClass":"IntValue","ObjectName":"LastGripped"},"Scar":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Scar"},"LastAge":{"ObjectValue":"1671060439","ObjectClass":"IntValue","ObjectName":"LastAge"},"Slot0":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot0"},"Mangekyo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mangekyo"},"ParentID":{"ObjectValue":"yameii(14)1772970","ObjectClass":"StringValue","ObjectName":"ParentID"},"TrainingEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TrainingEXP"},"DefaultMouth":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"DefaultMouth"},"CloakTime":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CloakTime"},"BijuuXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuXP"},"Slot12":{"ObjectValue":"Eight Gates","ObjectClass":"StringValue","ObjectName":"Slot12"},"RP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RP"},"Kids":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Kids"},"berserkcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"berserkcheck"},"HairColorB":{"ObjectValue":"79","ObjectClass":"IntValue","ObjectName":"HairColorB"},"RaidCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RaidCD"},"Slot6":{"ObjectValue":"Leaf Rising Wind","ObjectClass":"StringValue","ObjectName":"Slot6"},"PrimaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"PrimaryWep"},"RecentTrainings":{"ObjectValue":"[\"Pushup Training\",\"Kunai Training\",\"Block Training\"]","ObjectClass":"StringValue","ObjectName":"RecentTrainings"},"BerserkTimes":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BerserkTimes"},"Slot8":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot8"},"Title":{"ObjectValue":"Chuunin","ObjectClass":"StringValue","ObjectName":"Title"},"logcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"logcheck"},"LINDAMINISTARTUP":{"ObjectValue":"9","ObjectClass":"IntValue","ObjectName":"LINDAMINISTARTUP"},"HairColorR":{"ObjectValue":"107","ObjectClass":"IntValue","ObjectName":"HairColorR"},"CombatEXP":{"ObjectValue":"-18","ObjectClass":"IntValue","ObjectName":"CombatEXP"},"jincooldown":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"jincooldown"},"BijuuConvo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuConvo"},"Slot-":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot-"},"CColorR":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorR"},"Version":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Version"},"SPR":{"ObjectValue":"12","ObjectClass":"IntValue","ObjectName":"SPR"},"TailedBeastMastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastMastered"},"BonusSkillPoints":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BonusSkillPoints"},"SkinColor":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"SkinColor"},"RyoRES":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RyoRES"},"Slot9":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot9"},"SeenDeaths":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SeenDeaths"},"HandsignTraining":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HandsignTraining"},"Genjutsu":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"BDAYS":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"BDAYS"},"CurseMarkEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkEXP"},"CurseMarkLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkLevel"},"Key4":{"ObjectValue":"4","ObjectClass":"StringValue","ObjectName":"Key4"},"KPos":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"KPos"},"DateRecord":{"ObjectValue":"3430","ObjectClass":"IntValue","ObjectName":"DateRecord"},"bald":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"bald"},"Key9":{"ObjectValue":"9","ObjectClass":"StringValue","ObjectName":"Key9"},"ChakraArmorRGB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ChakraArmorRGB"},"SecondaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"SecondaryWep"},"GripCount":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"GripCount"},"EyeColorR":{"ObjectValue":"136","ObjectClass":"IntValue","ObjectName":"EyeColorR"},"UnlockedCloak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"UnlockedCloak"},"PosY":{"ObjectValue":"34","ObjectClass":"IntValue","ObjectName":"PosY"},"PosZ":{"ObjectValue":"193","ObjectClass":"IntValue","ObjectName":"PosZ"},"Rank":{"ObjectValue":"16","ObjectClass":"IntValue","ObjectName":"Rank"},"MissionEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MissionEXP"},"Slot11":{"ObjectValue":"Genjutsu","ObjectClass":"StringValue","ObjectName":"Slot11"},"Personality":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Personality"},"Parentq":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Parentq"},"Key11":{"ObjectValue":"z","ObjectClass":"StringValue","ObjectName":"Key11"},"ToggleAccessories":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ToggleAccessories"},"HBChoice":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"HBChoice"},"Prestige":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Prestige"},"PrimaryCN":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"PrimaryCN"},"Trauma":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Trauma"},"ResetPos":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ResetPos"},"Key6":{"ObjectValue":"6","ObjectClass":"StringValue","ObjectName":"Key6"},"Slot2":{"ObjectValue":"Dosaku","ObjectClass":"StringValue","ObjectName":"Slot2"},"Key2":{"ObjectValue":"2","ObjectClass":"StringValue","ObjectName":"Key2"},"Key7":{"ObjectValue":"7","ObjectClass":"StringValue","ObjectName":"Key7"},"TailedBeastLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastLevel"},"SwordSave":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SwordSave"},"PDLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PDLog"},"LeftEye":{"ObjectValue":"Ketsuryugan","ObjectClass":"StringValue","ObjectName":"LeftEye"},"Gender":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Gender"},"ItemSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ItemSave"},"Key12":{"ObjectValue":"=","ObjectClass":"StringValue","ObjectName":"Key12"},"CColorG":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorG"},"IsExiled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"IsExiled"},"CanRank":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CanRank"},"Marking":{"ObjectValue":"69","ObjectClass":"IntValue","ObjectName":"Marking"},"Key10":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"Key10"},"SecondaryAmmo":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"SecondaryAmmo"},"BijuuRelation":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuRelation"},"Blind":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blind"}}}

<?php
/**
 * Deals with fields used for ordering.
 *
 * First, it allows backend admin ordering.
 * Then, it makes sure numbers in order fields cannot be duplicated, or in wrong sequence.
 * It also deals with delete posts.
 */

/**
 * Dynamic Values
 */
$field_slug     = 'wpcf-order';
$post_type_slug = 'features';

add_filter( 'manage_' . $post_type_slug . '_posts_columns', 'pp_filter_posts_order_columns' );
add_action( 'manage_' . $post_type_slug . '_posts_custom_column', 'pp_filter_posts_order_column', 10, 2 );
add_filter( 'manage_edit-' . $post_type_slug . '_sortable_columns', 'pp_filter_posts_order_sortable_columns' );
add_action( 'pre_get_posts', 'pp_posts_orderby_order_field' );
add_action( 'wp_trash_post', 'pp_orchestrate_orderby_fields_on_delete' );
add_action( 'save_post', 'pp_orchestrate_orderby_fields', 10, 2 );

/**
 * Add order by in WP Admin for order number fields
 */
function pp_filter_posts_order_columns( $columns ) {
	$columns[ $field_slug ] = __( 'Order' );
	return $columns;
}
/**
 * Add order by in WP Admin for order number fields
 */
function pp_filter_posts_order_column( $column, $post_id ) {
	// Image column
	if ( $field_slug === $column ) {
		echo (int) get_post_meta( $post_id, $field_slug, true );
	}
}
/**
 * Add order by in WP Admin for order number fields
 */
function pp_filter_posts_order_sortable_columns( $columns ) {
	$columns[ $field_slug ] = $field_slug;
	return $columns;
}

/**
 * Add order by in WP Admin for order number fields
 */
function pp_posts_orderby_order_field( $query ) {
	if ( ! is_admin() || ! $query->is_main_query() ) {
		return;
	}

	if ( $field_slug === $query->get( 'orderby' ) ) {
		$query->set( 'orderby', 'meta_value' );
		$query->set( 'meta_key', $field_slug );
		$query->set( 'meta_type', 'numeric' );
	}
}

/**
 * Ensure logic to update fields when post is trashed
 *
 * Does not yet deal with "what if removed, but the number actually was wrong" (such as duplicated)
 * Technically this should never happen, because validated on save... but, you know.
 */
function pp_orchestrate_orderby_fields_on_delete( $post_id ) {

	// If this is just a revision, don't send the email.
	if ( wp_is_post_revision( $post_id ) ) {
		return;
	}

	if ( get_post_type( $post_id ) == $post_type_slug ) {

		$args = array(
			'numberposts' => -1,
			'post_type'   => $post_type_slug,
			'fields'      => 'ids',
		);

		$all_posts_of_this_type = get_posts( $args );

		$removed_value = get_post_meta( $post_id, $field_slug, true );

		$all_field_values = array();
		foreach ( $all_posts_of_this_type as  $post_id_available ) {
			$all_field_values[ $post_id_available ] = get_post_meta( $post_id_available, $field_slug, true );
		}
		asort( $all_field_values, SORT_NUMERIC );

		ksort( $all_field_values, SORT_NUMERIC );
		$post_id_to_start_from = array_search( $removed_value + 1, $all_field_values );
		$position_in_array     = array_search( $post_id_to_start_from, array_keys( $all_field_values ) );
		$posts_to_update       = array_slice( $all_field_values, $position_in_array, null, true );
		foreach ( $posts_to_update as $post_to_update ) {
			update_post_meta( $post_to_update, $field_slug, $all_field_values[ $post_to_update ] - 1 );
		}
	}

}

/**
 * Ensure logic to update felds when field a field is updated.
 */
function pp_orchestrate_orderby_fields( $post_id, $post ) {

	// If this is just a revision, don't send the email.
	if ( wp_is_post_revision( $post_id ) ) {
		return;
	}

	if ( $post->post_type == $post_type_slug ) {

		$field_value_added = $_POST[ $field_slug ];
		$args              = array(
			'numberposts' => -1,
			'post_type'   => $post_type_slug,
			'fields'      => 'ids',
		);

		$all_posts_of_this_type = get_posts( $args );
		$all_field_values       = array();
		foreach ( $all_posts_of_this_type as  $post_id_available ) {
			$all_field_values[ $post_id_available ] = get_post_meta( $post_id_available, $field_slug, true );
		}
		asort( $all_field_values, SORT_NUMERIC );

		/**
		 * If number added matches a already used number, it keeps the number and increase all others
		 */
		if ( in_array( $field_value_added, $all_field_values ) ) {
			ksort( $all_field_values, SORT_NUMERIC );
			$post_id_to_start_from = array_search( $field_value_added, $all_field_values );
			$position_in_array     = array_search( $post_id_to_start_from, array_keys( $all_field_values ) );
			$posts_to_update       = array_slice( $all_field_values, $position_in_array, null, true );
			foreach ( $posts_to_update as $post_to_update ) {
				update_post_meta( $post_to_update, $field_slug, $all_field_values[ $post_to_update ] + 1 );
			}
		}

		/**
		 * If there are missing numbers in the array, it adds this new number in the empty slot
		 */
		$missing_number = missing_number( $all_field_values );
		if ( ! empty( $missing_number ) ) {
			asort( $missing_number, SORT_NUMERIC );
			$field_value_added = $missing_number[0];
		}

		update_post_meta( $post_id, $field_slug, $field_value_added );

	}

}

function missing_number( $num_list ) {

	$new_arr = range( $num_list[0], max( $num_list ) );

	return array_diff( $new_arr, $num_list );

}

{"Copy":[],"Skilltree":{"Leaf Rising Wind":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Leaf Rising Wind"},"Substitution":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Substitution"},"Eight Gates":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Eight Gates"},"Strike":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Strike"},"Water Clone":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Water Clone"},"Demon Mode":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Demon Mode"},"1000 Years of Death":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"1000 Years of Death"},"Leaf Whirlwind":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Leaf Whirlwind"}},"Stats":{"kek":{"ObjectValue":"44","ObjectClass":"IntValue","ObjectName":"kek"},"ChakraArmorRGB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ChakraArmorRGB"},"AnbuLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AnbuLog"},"Slot8":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot8"},"Title":{"ObjectValue":"Genin","ObjectClass":"StringValue","ObjectName":"Title"},"Influence":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Influence"},"Key5":{"ObjectValue":"5","ObjectClass":"StringValue","ObjectName":"Key5"},"MissionSuccess":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MissionSuccess"},"ParentID":{"ObjectValue":"Frank(43)2015010","ObjectClass":"StringValue","ObjectName":"ParentID"},"Deaths":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Deaths"},"startnewlife":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"startnewlife"},"LastStomach":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"LastStomach"},"MaxAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxAge"},"KillStreak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"KillStreak"},"Key3":{"ObjectValue":"3","ObjectClass":"StringValue","ObjectName":"Key3"},"Key1":{"ObjectValue":"1","ObjectClass":"StringValue","ObjectName":"Key1"},"Key8":{"ObjectValue":"8","ObjectClass":"StringValue","ObjectName":"Key8"},"WeaveSpeed":{"ObjectValue":"20","ObjectClass":"IntValue","ObjectName":"WeaveSpeed"},"Slot1":{"ObjectValue":"Demon Mode","ObjectClass":"StringValue","ObjectName":"Slot1"},"EyeColorB":{"ObjectValue":"202","ObjectClass":"IntValue","ObjectName":"EyeColorB"},"Ryo":{"ObjectValue":"497","ObjectClass":"IntValue","ObjectName":"Ryo"},"CurrentWep":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CurrentWep"},"SpentSkillPoints":{"ObjectValue":"-7","ObjectClass":"IntValue","ObjectName":"SpentSkillPoints"},"BerserkTimes":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BerserkTimes"},"Slot5":{"ObjectValue":"Leaf Whirlwind","ObjectClass":"StringValue","ObjectName":"Slot5"},"Blindness":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blindness"},"Slot3":{"ObjectValue":"Katana","ObjectClass":"StringValue","ObjectName":"Slot3"},"PosX":{"ObjectValue":"-4765","ObjectClass":"IntValue","ObjectName":"PosX"},"LastChakra":{"ObjectValue":"460","ObjectClass":"IntValue","ObjectName":"LastChakra"},"Slot7":{"ObjectValue":"Eight Gates","ObjectClass":"StringValue","ObjectName":"Slot7"},"RightEye":{"ObjectValue":"Default","ObjectClass":"StringValue","ObjectName":"RightEye"},"SkillPoints":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"SkillPoints"},"mapmove1":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"mapmove1"},"PrimaryAmmo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PrimaryAmmo"},"HairColorG":{"ObjectValue":"56","ObjectClass":"IntValue","ObjectName":"HairColorG"},"Slot10":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot10"},"Name":{"ObjectValue":"Gyro","ObjectClass":"StringValue","ObjectName":"Name"},"MaxTails":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxTails"},"RU":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RU"},"SecondaryCN":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"SecondaryCN"},"Key4":{"ObjectValue":"4","ObjectClass":"StringValue","ObjectName":"Key4"},"Village":{"ObjectValue":"21","ObjectClass":"IntValue","ObjectName":"Village"},"LastHealth":{"ObjectValue":"248","ObjectClass":"IntValue","ObjectName":"LastHealth"},"OriginalVillage":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"OriginalVillage"},"WeaponSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"WeaponSave"},"TimesRerolled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TimesRerolled"},"Slot=":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot="},"Ken":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ken"},"GrandParentID":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"GrandParentID"},"Age":{"ObjectValue":"11","ObjectClass":"IntValue","ObjectName":"Age"},"LastKilledUser":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastKilledUser"},"TailedBeast":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeast"},"CColorB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorB"},"RESTORE":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RESTORE"},"Elo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Elo"},"MaxRank":{"ObjectValue":"24","ObjectClass":"IntValue","ObjectName":"MaxRank"},"TailedBeastEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastEXP"},"BijuuSealed":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuSealed"},"AgeLimit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AgeLimit"},"WipeLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"WipeLog"},"FamilyID":{"ObjectValue":"Gyro(9)151575","ObjectClass":"StringValue","ObjectName":"FamilyID"},"Mastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mastered"},"Slot4":{"ObjectValue":"Strike","ObjectClass":"StringValue","ObjectName":"Slot4"},"AwakenCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AwakenCD"},"Key10":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"Key10"},"BijuuRelation":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuRelation"},"SecondaryAmmo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SecondaryAmmo"},"Scar":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Scar"},"LastAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastAge"},"Slot0":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot0"},"Mangekyo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mangekyo"},"BonusSkillPoints":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BonusSkillPoints"},"TailedBeastMastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastMastered"},"DefaultMouth":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"DefaultMouth"},"TrainingEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TrainingEXP"},"CloakTime":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CloakTime"},"RP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RP"},"BijuuXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuXP"},"Slot12":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot12"},"Kids":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Kids"},"berserkcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"berserkcheck"},"HairColorB":{"ObjectValue":"50","ObjectClass":"IntValue","ObjectName":"HairColorB"},"RaidCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RaidCD"},"Slot6":{"ObjectValue":"Leaf Rising Wind","ObjectClass":"StringValue","ObjectName":"Slot6"},"PrimaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"PrimaryWep"},"RecentTrainings":{"ObjectValue":"[\"Pushup Training\",\"Weighted Gear\",\"Pushup Training\"]","ObjectClass":"StringValue","ObjectName":"RecentTrainings"},"Key9":{"ObjectValue":"9","ObjectClass":"StringValue","ObjectName":"Key9"},"SecondaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"SecondaryWep"},"GripCount":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"GripCount"},"EyeColorR":{"ObjectValue":"32","ObjectClass":"IntValue","ObjectName":"EyeColorR"},"bald":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"bald"},"logcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"logcheck"},"LINDAMINISTARTUP":{"ObjectValue":"9","ObjectClass":"IntValue","ObjectName":"LINDAMINISTARTUP"},"HairColorR":{"ObjectValue":"72","ObjectClass":"IntValue","ObjectName":"HairColorR"},"CombatEXP":{"ObjectValue":"89","ObjectClass":"IntValue","ObjectName":"CombatEXP"},"jincooldown":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"jincooldown"},"BijuuConvo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuConvo"},"Slot-":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot-"},"CColorR":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorR"},"Version":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Version"},"SPR":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SPR"},"SkinColor":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"SkinColor"},"RyoRES":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RyoRES"},"Slot9":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot9"},"SeenDeaths":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SeenDeaths"},"HandsignTraining":{"ObjectValue":"4","ObjectClass":"IntValue","ObjectName":"HandsignTraining"},"Genjutsu":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"BDAYS":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"BDAYS"},"CurseMarkEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkEXP"},"CurseMarkLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkLevel"},"KPos":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"KPos"},"DateRecord":{"ObjectValue":"2705","ObjectClass":"IntValue","ObjectName":"DateRecord"},"UnlockedCloak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"UnlockedCloak"},"PosY":{"ObjectValue":"519","ObjectClass":"IntValue","ObjectName":"PosY"},"PosZ":{"ObjectValue":"-552","ObjectClass":"IntValue","ObjectName":"PosZ"},"Rank":{"ObjectValue":"5","ObjectClass":"IntValue","ObjectName":"Rank"},"MissionEXP":{"ObjectValue":"113","ObjectClass":"IntValue","ObjectName":"MissionEXP"},"Slot11":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot11"},"Personality":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Personality"},"Parentq":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Parentq"},"Key11":{"ObjectValue":"-","ObjectClass":"StringValue","ObjectName":"Key11"},"ToggleAccessories":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ToggleAccessories"},"LastGripped":{"ObjectValue":"89491908","ObjectClass":"IntValue","ObjectName":"LastGripped"},"HideName":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HideName"},"HBChoice":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"HBChoice"},"Prestige":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Prestige"},"PrimaryCN":{"ObjectValue":"5","ObjectClass":"IntValue","ObjectName":"PrimaryCN"},"Trauma":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Trauma"},"ResetPos":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ResetPos"},"Key6":{"ObjectValue":"6","ObjectClass":"StringValue","ObjectName":"Key6"},"Slot2":{"ObjectValue":"Water Clone","ObjectClass":"StringValue","ObjectName":"Slot2"},"Key2":{"ObjectValue":"2","ObjectClass":"StringValue","ObjectName":"Key2"},"Key7":{"ObjectValue":"7","ObjectClass":"StringValue","ObjectName":"Key7"},"TailedBeastLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastLevel"},"SwordSave":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SwordSave"},"PDLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PDLog"},"LeftEye":{"ObjectValue":"Default","ObjectClass":"StringValue","ObjectName":"LeftEye"},"EyeColorG":{"ObjectValue":"228","ObjectClass":"IntValue","ObjectName":"EyeColorG"},"Gender":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Gender"},"ItemSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ItemSave"},"Key12":{"ObjectValue":"=","ObjectClass":"StringValue","ObjectName":"Key12"},"CColorG":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorG"},"IsExiled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"IsExiled"},"CanRank":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CanRank"},"Marking":{"ObjectValue":"69","ObjectClass":"IntValue","ObjectName":"Marking"},"Blind":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blind"}}}

<!DOCTYPE html>
<html lang="en">
<head>
	<meta charset="UTF-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	<title>Document</title>
	<script>
		document.addEventListener('DOMContentLoaded', (e) => {
			let canvas = document.querySelector('canvas');
			let ctx = canvas.getContext('2d');

			let x, y;

			canvas.addEventListener('mousedown', (e) => {
				ctx.beginPath();
				x = e.offsetX;
				y = e.offsetY;
				ctx.moveTo(x, y);
				canvas.addEventListener('mousemove', draw);
			});

			canvas.addEventListener('mouseup', (e) => {
				canvas.removeEventListener('mousemove', draw);
				ctx.closePath();
			});

			function draw(evt){
				x = evt.offsetX;
				y = evt.offsetY;
				ctx.lineTo(x, y);
				ctx.stroke();
			}
		});
	</script>
	<style>
		canvas{
			border:solid 2px black;
		}
	</style>
</head>
<body>
	<canvas width="1000" height="1000"></canvas>
</body>
</html>

{"ip":{"103.176.160.20":2855,"44.200.187.250":6623,"23.26.252.86":531,"174.138.17.237":578,"23.26.252.66":1144,"143.107.166.120":29,"112.214.84.13":560,"152.89.196.54":56,"112.171.126.149":4,"185.14.62.10":12,"162.241.158.17":40,"211.23.8.133":22,"64.111.24.165":5,"200.69.84.118":3,"104.168.136.197":1,"185.135.72.240":2,"161.82.250.253":1,"92.255.57.25":3,"63.135.161.39":1,"114.113.139.191":4,"103.150.143.103":2,"3.71.184.133":1,"152.89.198.133":1,"87.251.67.97":1,"194.165.16.76":4,"193.118.53.210":1,"109.248.175.80":2,"190.171.228.186":3,"219.235.233.238":2,"59.125.196.15":5,"190.104.168.51":3,"87.251.75.64":1,"186.122.150.34":7,"190.210.215.244":16,"185.170.144.3":2,"5.149.64.4":1,"87.251.75.145":2,"117.248.251.174":6,"42.61.211.101":2,"138.197.16.243":1,"115.227.59.179":1,"45.143.201.62":1,"103.8.114.195":6,"138.3.214.54":2,"203.130.20.146":4,"87.251.75.120":1,"115.227.59.145":2,"103.8.114.199":1,"8.210.54.158":1,"176.113.115.140":1,"81.60.200.105":2,"139.162.221.44":6,"139.59.99.183":4,"200.54.195.203":5,"81.0.220.101":7,"40.115.49.158":47,"122.163.120.143":1,"162.142.125.7":1,"185.73.125.124":1,"186.208.139.104":56,"152.89.196.52":1,"188.121.106.248":5,"41.67.5.5":1,"119.73.154.210":3,"87.251.75.179":1,"178.238.226.226":2,"45.239.176.45":2,"176.113.115.106":1,"5.161.114.11":3,"54.37.116.149":6,"36.91.222.100":1,"198.235.24.6":5,"110.171.165.57":1,"70.183.29.58":1,"45.77.107.49":11,"189.113.181.21":2,"103.168.205.199":15,"137.220.38.49":12,"87.236.176.62":2,"193.46.255.41":1,"194.28.112.140":4,"20.119.164.88":3,"165.232.152.58":1,"213.55.90.51":1,"37.18.73.128":1},"asn":{"AS141526":2855,"AS14618":6623,"AS400536":1675,"AS14061":584,"AS28571":29,"AS10036":560,"AS57523":61,"AS4766":4,"AS202813":12,"AS19871":40,"AS3462":27,"AS33302":5,"AS262186":3,"AS54290":1,"AS55720":2,"AS132280":1,"AS206092":1,"AS134700":4,"AS133296":2,"AS16509":1,"AS208091":7,"AS48721":4,"AS21859":1,"AS25227":2,"AS25620":3,"AS9809":2,"AS27895":3,"AS11664":7,"AS16814":16,"AS48080":2,"AS57888":1,"AS9829":6,"AS3758":5,"AS58461":3,"AS210950":1,"AS133495":7,"AS31898":2,"AS24435":4,"AS45102":1,"AS57678":2,"AS12430":2,"AS63949":6,"AS16629":5,"AS51167":9,"AS8075":50,"AS24560":1,"AS398324":1,"AS28265":56,"AS202468":5,"AS37197":1,"AS268370":2,"AS213230":3,"AS16276":6,"AS7713":1,"AS396982":5,"AS17552":1,"AS22773":1,"AS20473":23,"AS270334":2,"AS132925":15,"AS211298":2,"AS47890":1,"AS50968":4,"AS24757":1,"AS208677":1},"isp":{"Jbn Online Private Limited":2855,"Amazon.com":6623,"Ace Data Centers":1675,"DigitalOcean, LLC":580,"Universidade De SAO Paulo":29,"DLIVE":560,"Chang Way Technologies Co. Limited":61,"Korea Telecom":4,"Liberatel Comunicaciones":12,"Unified Layer":40,"Chunghwa Telecom Co., Ltd.":27,"Data102":5,"TV AZTECA SUCURSAL COLOMBIA":3,"Hostwinds LLC.":1,"Gigabit Hosting Sdn Bhd":2,"Symphony Communication Public Company Limited":1,"Rockion LLC":1,"Times Network Technology Co":4,"Web Werks India Pvt. Ltd.":2,"Amazon Technologies Inc.":1,"Xhost Internet Solutions LP":7,"Flyservers S.A.":4,"Zenlayer Inc":1,"JSC Avantel":2,"Cotas Ltda.":3,"SHENZHEN NOVA TECHNOLOGIES DEVELOPMENT., LTD.":2,"Núcleo S.A.":3,"Techtel LMDS Comunicaciones Interactivas S.A.":7,"NSS S.A.":16,"Dmitriy Panchenko":2,"Dsl-elektronika D.O.O":1,"BSNL Internet":6,"SingNet Pte Ltd":5,"Chinanet":3,"TOV E-RISHENNYA":1,"Vision Telecom Lahore":7,"Oracle Corporation":2,"Supernet 32":4,"Alibaba.com LLC":1,"Red Bytes LLC":2,"Ono":2,"Linode, LLC":6,"DIGITALOCEAN":4,"CTC. CORP S.A. (TELEFONICA EMPRESAS)":5,"Casablanca INT fraction":7,"Microsoft Corporation":50,"Bharti Airtel Ltd.":1,"Censys, Inc.":1,"Abcrede Provedor De Internet Eireli":56,"Noyan Abr Arvan Co. ( Private Joint Stock)":5,"University of Gadarif":1,"Contabo GmbH":2,"Ceara Networks Telecomunicacoes Ltda - ME":2,"Hetzner Online GmbH":3,"OVH SAS":6,"PT Telekomunikasi Indonesia":1,"Google LLC":5,"True Internet Corporation CO. Ltd.":1,"Cox Communications Inc.":1,"The Constant Company":23,"NET 100A":2,"Ideastack Solutions Private Limited":15,"Constantine Cybersecurity Ltd.":2,"Unmanaged LTD":1,"Hostmaster, Ltd.":4,"Ethio Telecom":1,"Cloud technology Limited (Ltd.)":1},"org":{"JBN Solution Private Limited":2855,"AWS EC2 (us-east-1)":6623,"Ipxo LLC":1676,"DigitalOcean, LLC":583,"Universidade De SAO Paulo":29,"DLIVE Woori Cable TV":560,"Starcrecium Limited":58,"Korea Telecom":4,"Ftth Pilas":12,"WEBSITEWELCOME.COM":40,"Chunghwa Telecom Co. Ltd.":27,"Data102":5,"TV AZTECA SUCURSAL COLOMBIA":3,"Hostwinds LLC":1,"Data Center Network Limited":2,"Unknown":30,"Chang Way Technologies Co. Limited":3,"Guangdong Hanoi Times Network Technology Co., Ltd":4,"Linkstack Solution Private Limited":2,"AWS EC2 (eu-central-1)":1,"Xhost Internet Solutions":6,"UAB Host Baltic":4,"Zenlayer Inc":1,"JSC Avantel":2,"MARIELA A#EZ VIERA":3,"Shenzhen Nova Technology Development Co., Ltd.":2,"Núcleo S.A":3,"AMX Argentina S.A":7,"Xhostis":3,"SingNet Pte Ltd":2,"Digital Ocean":1,"Chinanet ZJ":3,"TOV VAIZ PARTNER":1,"Vision Telecom (pvt) Ltd":7,"Oracle Cloud Infrastructure (ap-tokyo-1)":2,"Hong Kong":1,"Red Bytes LLC":2,"ONO_Mobile&Wifi":2,"LINODE-UK":6,"Soltex Chile S.A.":5,"Casablanca INT":7,"Microsoft Azure Cloud (westeurope)":47,"BHARTI":1,"Censys Inc":1,"Abcrede Provedor De Internet Eireli":56,"Noyan Abr Arvan Co. ( Private Joint Stock)":5,"Cogri Asia Pacific PTE LTD":3,"Contabo GmbH":2,"Ceara Networks Telecomunicacoes Ltda - ME":2,"HETZNER-DC":3,"OVH GmbH":6,"Telekomunikasi Indonesia":1,"Palo Alto Networks, Inc":5,"Truenet CM":1,"Cox Communications Inc.":1,"Vultr Holdings, LLC":23,"NET 100A":2,"Bluesp":15,"Internetmeasurement C":2,"Unmanaged LTD":1,"Network Systems Ltd":4,"Microsoft Azure Cloud (eastus2)":3,"Cloud technology Limited (Ltd.)":1},"regionName":{"Maharashtra":2857,"Virginia":8301,"South West":582,"Sao Paulo":85,"Gyeonggi-do":560,"Moscow":64,"Seoul":4,"Andalusia":12,"Utah":40,"New Taipei":22,"Colorado":5,"Bogota D.C.":3,"Washington":13,"Kowloon City":2,"Bangkok":1,"New York":1,"Guangdong":4,"Hesse":1,"Lower Silesia":1,"Vilnius":4,"North Holland":60,"Departamento de Santa Cruz":3,"Beijing":2,"Tainan":5,"Asuncion":3,"Santa Fe":7,"Buenos Aires F.D.":16,"Federation of B&H":1,"Gujarat":6,"Central Singapore":5,"New Jersey":12,"Zhejiang":3,"Kyiv City":1,"Punjab":11,"Tokyo":2,"Central and Western District":1,"St.-Petersburg":2,"Madrid":2,"England":16,"Santiago Metropolitan":5,"West Bengal":1,"Michigan":1,"Tehran":5,"Khartoum":1,"Bavaria":2,"Ceara":2,"District of Columbia":3,"Saarland":6,"Jakarta":1,"California":7,"Maha Sarakham":1,"Rio de Janeiro":2,"Uttar Pradesh":15,"Amhara":1},"country":{"India":2879,"United States":8383,"Singapore":587,"Brazil":89,"South Korea":564,"Russia":66,"Spain":14,"Taiwan":27,"Colombia":3,"Hong Kong":3,"Thailand":2,"China":9,"Germany":9,"Poland":1,"Lithuania":4,"Netherlands":60,"Bolivia":3,"Paraguay":3,"Argentina":23,"Bosnia and Herzegovina":1,"Ukraine":1,"Pakistan":11,"Japan":2,"United Kingdom":16,"Chile":5,"Iran":5,"Sudan":1,"Indonesia":1,"Ethiopia":1},"account":{"hello":12581,"Domain":63,"142.93.8.59":91,"r702xffo":2,"Unknown":2,"(empty)":5,"Administr":11,"Test":7,"4pyn0nk0":1,"BdwoBoO":1,"RKLJfUG":1,"oePOLXjCP":1,"JtQiNBZbu":1,"vLOROPbYR":1,"wGxWhsTvi":1,"oSlxby":1,"eltons":2,"mailuk04$":1},"keyboard":{"Unknown":12755,"English - United States":14,"English - United Kingdom":4},"client_build":{"Unknown":12755,"client_build-17134":2,"RDP 7.1":1,"RDP 5.1":14,"RDP 5.2":1},"client_name":{"Unknown":12755,"DESKTOP-F840GIK":2,"WEBSERVERPR":1,"sina-VirtualBox":1,"rdpscan":1,"rdesktop":1,"MSTSC":3,"EMP-LAP-0014":4,"ELTONS-DEV2":1,"WIN-H2H4BC9LHEV":1,"WIN-FIIELPTB25M":3},"ip_type":{"Unknown":5377,"hosting":7383,"hosting & proxy":3,"proxy":1,"mobile":9}}

#include "2022_utils.h"

using namespace std;

namespace {
  struct V {
    int x, y;
  };

  bool operator==(const V& l, const V& r) { return l.x == r.x && l.y == r.y; }
  bool operator<(const V& l, const V& r) { return l.x == r.x ? l.y < r.y : l.x < r.x; }
}

namespace std {
  template <>
  struct hash<V>
  {
    std::size_t operator()(const V& k) const {
      return std::hash<int>()(k.x ^ (k.y << 16));
    }
  };
}

namespace {
  struct S {
    // Position.
    V p;

    // Nearest beacon.
    V nb;
  };

  auto part1() {
    auto in = load_strings("2022/2022_day15_input.txt");
    
    vector<S> sensors;
    for (auto& str : in) {
      S s;
      sscanf_s(str.c_str(), "Sensor at x=%d, y=%d: closest beacon is at x=%d, y=%d",
        &s.p.x, &s.p.y, &s.nb.x, &s.nb.y);
      sensors.push_back(s);
    }

    int row = 2000000;
    set<int> no_distress_x;

    for (auto& s : sensors) {
      int signal_radius = (abs(s.p.x - s.nb.x) + abs(s.p.y - s.nb.y));
      int radius_at_row = signal_radius - abs(s.p.y - row);

      if (radius_at_row <= 0) continue;

      for (int x = s.p.x - radius_at_row; x <= s.p.x + radius_at_row; ++x) {
        // Skip beacon itself.
        if (s.nb == V(x, row)) continue;
        no_distress_x.insert(x);
      }
    }

    return no_distress_x.size();
  }

  auto part2() {
    auto in = load_strings("2022/2022_day15_input.txt");

    vector<S> sensors;
    for (auto& str : in) {
      S s;
      sscanf_s(str.c_str(), "Sensor at x=%d, y=%d: closest beacon is at x=%d, y=%d",
        &s.p.x, &s.p.y, &s.nb.x, &s.nb.y);
      sensors.push_back(s);
    }

    int max_coord = 4000000;
    //int max_coord = 20;
    for (int i = 0; i < sensors.size(); ++i) {
      auto& s = sensors[i];
      int signal_radius_i = (abs(s.p.x - s.nb.x) + abs(s.p.y - s.nb.y));

      // Start with 4 positions to walk each edge of the perimeter.
      V p_top_left(s.p.x, s.p.y - signal_radius_i - 1);
      V p_top_right = p_top_left;
      V p_bottom_left(s.p.x, s.p.y + signal_radius_i + 1);
      V p_bottom_right = p_bottom_left;

      // Check each position against each sensor.
      for (int r = 0; r <= signal_radius_i; ++r) {
        for (V p : vector<V>{ p_top_left, p_top_right, p_bottom_left, p_bottom_right }) {
          if (p.x < 0 || p.y < 0 || p.x > max_coord || p.y > max_coord) continue;

          bool detected = false;
          for (int j = 0; j < sensors.size(); ++j) {
            if (i == j) continue;

            // Check whether the sensor could detect this position.
            auto& ss = sensors[j];
            int signal_radius_j = (abs(ss.p.x - ss.nb.x) + abs(ss.p.y - ss.nb.y));
            int d = abs(p.x - ss.p.x) + abs(p.y - ss.p.y);
            if (d <= signal_radius_j) {
              detected = true;
              break;
            }
          }

          if (!detected) {
            return (int64_t)p.x * 4000000 + p.y;
          }
        }

        p_top_left.x -= 1;
        p_top_left.y += 1;
        p_top_right.x += 1;
        p_top_right.y += 1;
        p_bottom_left.x -= 1;
        p_bottom_left.y -= 1;
        p_bottom_right.x += 1;
        p_bottom_right.y -= 1;
      }
    }


    return (int64_t)(-1);
  }
}

namespace y2022 {
  void day15() {
    {
      Profile p("duration");
      cout << "part 1: " << part1() << "\n";
    }

    {
      Profile p("duration");
      cout << "part 2: " << part2() << "\n";
    }
  }
}


#include <iostream>
#include <string>

using namespace std;

template <typename T>
void RunTestImpl(
        T func
        ,const string& testName
//        ,const string& file
//        , const string& funcN
//        , unsigned line
//        , const string& hint
        ) {
    cerr 
//           << "begin " 
           << testName
//         << ", in func "s<<  funcN
//         <<" in file "s<<  file
//         << " on line "s<< line
//         << " ("s<< hint<<")"s
//         << endl
           << "... "s
           ;
    func();
    cerr
           << "OK"s
//         << "end "
//         << testName
//         << ", in func "s<<  funcN
//         <<" in file "s
//         <<  file<< " on line "s
//         << line<< " ("s
//         << hint<<")"s
         << endl;

}

#define RUN_TEST(func)  RunTestImpl((func), #func/*, __FILE__, __FUNCTION__, __LINE__, ""s*/)

void Test1() {
}

int main() {
    RUN_TEST(Test1);
}


/*C++ Program that simulates an ordering system*/

#include <iostream>
using namespace std;

int main() {
    char choice; //Declare choices for user input and total bill
    float T_Bill = 0;

    printf("Welcome to 'Maes-Resto'!\n");
    printf("May I take your order?\n");
    printf("Press '1' - Yes, Press '2' - No: ");
    cin >> choice;

    if (choice == '1'){
        cout << "===================================\n";
        printf("Do you want an appetizer?\n");
        printf("Press '1' - Yes, Press '2' - No: ");
        cin >> choice;

        cout << "===================================\n";
        switch (choice){
        case '1':
            printf("Choose from the following options:\n");
            printf("A: Salad\tB:Soup\n");
            printf("Your Choice: ");
            cin >> choice;
            switch (choice){ //Jumps to labels' SALAD, SOUP, or MAINMENU
            case 'A':
                goto SALAD;
            case 'B':
                goto SOUP;
            }
        case '2':
            goto MAINMENU;
        }
    }
    else {
        printf("Thank you so much for coming to 'Maes-Resto'!");
        exit(0); //Terminates the code
    }

    SALAD:
        {
        const float TV_Salad = 7.95, C_Salad = 5.00; //Price of products
        cout << "===================================\n";
        printf("SALAD MENU:\n");
        cout << "A: Thai Vermicelli Salad     $" << TV_Salad << endl;
        cout << "B: Ceasar Salad              $" << C_Salad << endl;
        printf("Your Choice: ");
        cin >> choice;
        switch (choice){ //Adds the price to the total bill
        case 'A':
            T_Bill += TV_Salad;
            break;
        case 'B':
            T_Bill += C_Salad;
            break;
        }
        goto MAINMENU; //Jumps to MAINMENU
        }

    SOUP:
        {
        const float TY_Soup = 10.95, CT_Soup = 9.00;
        cout << "===================================\n";
        printf("SOUP MENU:\n");
        cout << "A: Tom Yum Soup              $" << TY_Soup << endl;
        cout << "B: Clear Tofu Soup           $" << CT_Soup << endl;
        printf("Your Choice: ");
        cin >> choice;
        switch (choice){
        case 'A':
            T_Bill += TY_Soup;
            break;
        case 'B':
            T_Bill += CT_Soup;
            break;
        }
        goto MAINMENU;
        }


    MAINMENU:
        {
        const float EBF_Fillets = 20.05, MG_Salmon = 25.25, CC_Bleu = 22.99;
        cout << "===================================\n";
        printf("MAIN COURSE MENU:\n");
        cout << "A: Easy Baked Fish Fillets   $" << EBF_Fillets << endl;
        cout << "B: Miso-Glazed Salmon        $" << MG_Salmon << endl;
        cout << "C: Chicken Cordon Bleu       $" << CC_Bleu << endl;
        printf("Your Choice: ");
        cin >> choice;
        switch (choice){
        case 'A':
            T_Bill += EBF_Fillets;
            break;
        case 'B':
            T_Bill += MG_Salmon;
            break;
        case 'C':
            T_Bill += CC_Bleu;
            break;
        }
        goto CHECKOUT; // Jumps to CHECKOUT
        }

    CHECKOUT:
        float pay;
        while (true) { //Loops infinetely until user provided sufficient payment
            cout << "===================================\n";
            cout << "Total amount: $" << T_Bill << endl;
            cout << "Payment: $";
            cin >> pay;
            if (pay >= T_Bill){
                cout << "Change: $" << (pay - T_Bill) << endl;
                cout << "Thank you so much for coming to 'Maes-Resto'!\n";
                break; //Stops the loop
            }
            cout << "Insufficient amount!\n";
        }
}



<a href="mailto:kerryspointer@gmail.com">kerryspointer@gmail.com</a>
<a href="mailto:kerryspointer+14216@gmail.com">kerryspointer+14216@gmail.com</a>
<a href="mailto:kerryspointer+29704@gmail.com">kerryspointer+29704@gmail.com</a>
<a href="mailto:kerryspointer+7018@gmail.com">kerryspointer+7018@gmail.com</a>
<a href="mailto:kerryspointer+14538@gmail.com">kerryspointer+14538@gmail.com</a>
<a href="mailto:kerryspointer+9281@gmail.com">kerryspointer+9281@gmail.com</a>
<a href="mailto:kerryspointer+6333@gmail.com">kerryspointer+6333@gmail.com</a>
<a href="mailto:kerryspointer+6438@gmail.com">kerryspointer+6438@gmail.com</a>
<a href="mailto:kerryspointer+4125@gmail.com">kerryspointer+4125@gmail.com</a>
<a href="mailto:kerryspointer+18674@gmail.com">kerryspointer+18674@gmail.com</a>
<a href="mailto:kerryspointer+6800@gmail.com">kerryspointer+6800@gmail.com</a>
<a href="mailto:kerryspointer+23864@gmail.com">kerryspointer+23864@gmail.com</a>
<a href="mailto:kerryspointer+20147@gmail.com">kerryspointer+20147@gmail.com</a>
<a href="mailto:kerryspointer+8793@gmail.com">kerryspointer+8793@gmail.com</a>
<a href="mailto:kerryspointer+6419@gmail.com">kerryspointer+6419@gmail.com</a>
<a href="mailto:kerryspointer+13303@gmail.com">kerryspointer+13303@gmail.com</a>
<a href="mailto:kerryspointer+4853@gmail.com">kerryspointer+4853@gmail.com</a>
<a href="mailto:kerryspointer+2500@gmail.com">kerryspointer+2500@gmail.com</a>
<a href="mailto:kerryspointer+12258@gmail.com">kerryspointer+12258@gmail.com</a>
<a href="mailto:kerryspointer+15248@gmail.com">kerryspointer+15248@gmail.com</a>
<a href="mailto:kerryspointer+13405@gmail.com">kerryspointer+13405@gmail.com</a>
<a href="mailto:kerryspointer+26121@gmail.com">kerryspointer+26121@gmail.com</a>
<a href="mailto:kerryspointer+3988@gmail.com">kerryspointer+3988@gmail.com</a>
<a href="mailto:kerryspointer+2470@gmail.com">kerryspointer+2470@gmail.com</a>
<a href="mailto:kerryspointer+12942@gmail.com">kerryspointer+12942@gmail.com</a>
<a href="mailto:kerryspointer+15914@gmail.com">kerryspointer+15914@gmail.com</a>
<a href="mailto:kerryspointer+11589@gmail.com">kerryspointer+11589@gmail.com</a>
<a href="mailto:kerryspointer+13564@gmail.com">kerryspointer+13564@gmail.com</a>
<a href="mailto:kerryspointer+2914@gmail.com">kerryspointer+2914@gmail.com</a>
<a href="mailto:kerryspointer+29867@gmail.com">kerryspointer+29867@gmail.com</a>
<a href="mailto:kerryspointer+29252@gmail.com">kerryspointer+29252@gmail.com</a>
<a href="mailto:kerryspointer+3163@gmail.com">kerryspointer+3163@gmail.com</a>
<a href="mailto:kerryspointer+15276@gmail.com">kerryspointer+15276@gmail.com</a>
<a href="mailto:kerryspointer+13076@gmail.com">kerryspointer+13076@gmail.com</a>
<a href="mailto:kerryspointer+8749@gmail.com">kerryspointer+8749@gmail.com</a>
<a href="mailto:kerryspointer+16426@gmail.com">kerryspointer+16426@gmail.com</a>
<a href="mailto:kerryspointer+419@gmail.com">kerryspointer+419@gmail.com</a>
<a href="mailto:kerryspointer+32577@gmail.com">kerryspointer+32577@gmail.com</a>
<a href="mailto:kerryspointer+21888@gmail.com">kerryspointer+21888@gmail.com</a>
<a href="mailto:kerryspointer+15166@gmail.com">kerryspointer+15166@gmail.com</a>
<a href="mailto:kerryspointer+20243@gmail.com">kerryspointer+20243@gmail.com</a>
<a href="mailto:kerryspointer+22683@gmail.com">kerryspointer+22683@gmail.com</a>
<a href="mailto:kerryspointer+14744@gmail.com">kerryspointer+14744@gmail.com</a>
<a href="mailto:kerryspointer+32237@gmail.com">kerryspointer+32237@gmail.com</a>
<a href="mailto:kerryspointer+6314@gmail.com">kerryspointer+6314@gmail.com</a>
<a href="mailto:kerryspointer+20886@gmail.com">kerryspointer+20886@gmail.com</a>
<a href="mailto:kerryspointer+18386@gmail.com">kerryspointer+18386@gmail.com</a>
<a href="mailto:kerryspointer+341@gmail.com">kerryspointer+341@gmail.com</a>
<a href="mailto:kerryspointer+25674@gmail.com">kerryspointer+25674@gmail.com</a>
<a href="mailto:kerryspointer+9343@gmail.com">kerryspointer+9343@gmail.com</a>
<a href="mailto:kerryspointer+1012@gmail.com">kerryspointer+1012@gmail.com</a>
<a href="mailto:kerryspointer+8858@gmail.com">kerryspointer+8858@gmail.com</a>
<a href="mailto:kerryspointer+28050@gmail.com">kerryspointer+28050@gmail.com</a>
<a href="mailto:kerryspointer+16291@gmail.com">kerryspointer+16291@gmail.com</a>
<a href="mailto:kerryspointer+6901@gmail.com">kerryspointer+6901@gmail.com</a>
<a href="mailto:kerryspointer+20435@gmail.com">kerryspointer+20435@gmail.com</a>
<a href="mailto:kerryspointer+24798@gmail.com">kerryspointer+24798@gmail.com</a>
<a href="mailto:kerryspointer+18905@gmail.com">kerryspointer+18905@gmail.com</a>
<a href="mailto:kerryspointer+10390@gmail.com">kerryspointer+10390@gmail.com</a>
<a href="mailto:kerryspointer+28438@gmail.com">kerryspointer+28438@gmail.com</a>
<a href="mailto:kerryspointer+30627@gmail.com">kerryspointer+30627@gmail.com</a>
<a href="mailto:kerryspointer+22401@gmail.com">kerryspointer+22401@gmail.com</a>
<a href="mailto:kerryspointer+11283@gmail.com">kerryspointer+11283@gmail.com</a>
<a href="mailto:kerryspointer+26972@gmail.com">kerryspointer+26972@gmail.com</a>
<a href="mailto:kerryspointer+26653@gmail.com">kerryspointer+26653@gmail.com</a>
<a href="mailto:kerryspointer+24294@gmail.com">kerryspointer+24294@gmail.com</a>
<a href="mailto:kerryspointer+22158@gmail.com">kerryspointer+22158@gmail.com</a>
<a href="mailto:kerryspointer+26697@gmail.com">kerryspointer+26697@gmail.com</a>
<a href="mailto:kerryspointer+10931@gmail.com">kerryspointer+10931@gmail.com</a>
<a href="mailto:kerryspointer+32279@gmail.com">kerryspointer+32279@gmail.com</a>
<a href="mailto:kerryspointer+6571@gmail.com">kerryspointer+6571@gmail.com</a>
<a href="mailto:kerryspointer+6182@gmail.com">kerryspointer+6182@gmail.com</a>
<a href="mailto:kerryspointer+6622@gmail.com">kerryspointer+6622@gmail.com</a>
<a href="mailto:kerryspointer+731@gmail.com">kerryspointer+731@gmail.com</a>
<a href="mailto:kerryspointer+18422@gmail.com">kerryspointer+18422@gmail.com</a>
<a href="mailto:kerryspointer+23386@gmail.com">kerryspointer+23386@gmail.com</a>
<a href="mailto:kerryspointer+15471@gmail.com">kerryspointer+15471@gmail.com</a>
<a href="mailto:kerryspointer+17169@gmail.com">kerryspointer+17169@gmail.com</a>
<a href="mailto:kerryspointer+18927@gmail.com">kerryspointer+18927@gmail.com</a>
<a href="mailto:kerryspointer+8662@gmail.com">kerryspointer+8662@gmail.com</a>
<a href="mailto:kerryspointer+21699@gmail.com">kerryspointer+21699@gmail.com</a>
<a href="mailto:kerryspointer+22027@gmail.com">kerryspointer+22027@gmail.com</a>
<a href="mailto:kerryspointer+25724@gmail.com">kerryspointer+25724@gmail.com</a>
<a href="mailto:kerryspointer+14530@gmail.com">kerryspointer+14530@gmail.com</a>
<a href="mailto:kerryspointer+28114@gmail.com">kerryspointer+28114@gmail.com</a>
<a href="mailto:kerryspointer+3677@gmail.com">kerryspointer+3677@gmail.com</a>
<a href="mailto:kerryspointer+1089@gmail.com">kerryspointer+1089@gmail.com</a>
<a href="mailto:kerryspointer+29392@gmail.com">kerryspointer+29392@gmail.com</a>
<a href="mailto:kerryspointer+16191@gmail.com">kerryspointer+16191@gmail.com</a>
<a href="mailto:kerryspointer+24003@gmail.com">kerryspointer+24003@gmail.com</a>
<a href="mailto:kerryspointer+32354@gmail.com">kerryspointer+32354@gmail.com</a>
<a href="mailto:kerryspointer+10817@gmail.com">kerryspointer+10817@gmail.com</a>
<a href="mailto:kerryspointer+3211@gmail.com">kerryspointer+3211@gmail.com</a>
<a href="mailto:kerryspointer+32339@gmail.com">kerryspointer+32339@gmail.com</a>
<a href="mailto:kerryspointer+1230@gmail.com">kerryspointer+1230@gmail.com</a>
<a href="mailto:kerryspointer+9410@gmail.com">kerryspointer+9410@gmail.com</a>
<a href="mailto:kerryspointer+31680@gmail.com">kerryspointer+31680@gmail.com</a>
<a href="mailto:kerryspointer+5127@gmail.com">kerryspointer+5127@gmail.com</a>
<a href="mailto:kerryspointer+24196@gmail.com">kerryspointer+24196@gmail.com</a>
<a href="mailto:kerryspointer+25375@gmail.com">kerryspointer+25375@gmail.com</a>
<a href="mailto:kerryspointer+20486@gmail.com">kerryspointer+20486@gmail.com</a>
<a href="mailto:minhalqamar92@gmail.com">minhalqamar92@gmail.com</a>
<a href="mailto:minhalqamar92+22264@gmail.com">minhalqamar92+22264@gmail.com</a>
<a href="mailto:minhalqamar92+28919@gmail.com">minhalqamar92+28919@gmail.com</a>
<a href="mailto:minhalqamar92+31454@gmail.com">minhalqamar92+31454@gmail.com</a>
<a href="mailto:minhalqamar92+5415@gmail.com">minhalqamar92+5415@gmail.com</a>
<a href="mailto:minhalqamar92+9418@gmail.com">minhalqamar92+9418@gmail.com</a>
<a href="mailto:minhalqamar92+11603@gmail.com">minhalqamar92+11603@gmail.com</a>
<a href="mailto:minhalqamar92+26315@gmail.com">minhalqamar92+26315@gmail.com</a>
<a href="mailto:minhalqamar92+15445@gmail.com">minhalqamar92+15445@gmail.com</a>
<a href="mailto:minhalqamar92+12692@gmail.com">minhalqamar92+12692@gmail.com</a>
<a href="mailto:minhalqamar92+26230@gmail.com">minhalqamar92+26230@gmail.com</a>
<a href="mailto:minhalqamar92+30188@gmail.com">minhalqamar92+30188@gmail.com</a>
<a href="mailto:minhalqamar92+4850@gmail.com">minhalqamar92+4850@gmail.com</a>
<a href="mailto:minhalqamar92+14906@gmail.com">minhalqamar92+14906@gmail.com</a>
<a href="mailto:minhalqamar92+26778@gmail.com">minhalqamar92+26778@gmail.com</a>
<a href="mailto:minhalqamar92+23224@gmail.com">minhalqamar92+23224@gmail.com</a>
<a href="mailto:minhalqamar92+26911@gmail.com">minhalqamar92+26911@gmail.com</a>
<a href="mailto:minhalqamar92+1963@gmail.com">minhalqamar92+1963@gmail.com</a>
<a href="mailto:minhalqamar92+17275@gmail.com">minhalqamar92+17275@gmail.com</a>
<a href="mailto:minhalqamar92+29453@gmail.com">minhalqamar92+29453@gmail.com</a>
<a href="mailto:minhalqamar92+30574@gmail.com">minhalqamar92+30574@gmail.com</a>
<a href="mailto:minhalqamar92+24173@gmail.com">minhalqamar92+24173@gmail.com</a>
<a href="mailto:minhalqamar92+21327@gmail.com">minhalqamar92+21327@gmail.com</a>
<a href="mailto:minhalqamar92+14401@gmail.com">minhalqamar92+14401@gmail.com</a>
<a href="mailto:minhalqamar92+17300@gmail.com">minhalqamar92+17300@gmail.com</a>
<a href="mailto:minhalqamar92+16925@gmail.com">minhalqamar92+16925@gmail.com</a>
<a href="mailto:minhalqamar92+7598@gmail.com">minhalqamar92+7598@gmail.com</a>
<a href="mailto:minhalqamar92+4583@gmail.com">minhalqamar92+4583@gmail.com</a>
<a href="mailto:minhalqamar92+17826@gmail.com">minhalqamar92+17826@gmail.com</a>
<a href="mailto:minhalqamar92+31627@gmail.com">minhalqamar92+31627@gmail.com</a>
<a href="mailto:minhalqamar92+15670@gmail.com">minhalqamar92+15670@gmail.com</a>
<a href="mailto:minhalqamar92+16413@gmail.com">minhalqamar92+16413@gmail.com</a>
<a href="mailto:minhalqamar92+6775@gmail.com">minhalqamar92+6775@gmail.com</a>
<a href="mailto:minhalqamar92+2166@gmail.com">minhalqamar92+2166@gmail.com</a>
<a href="mailto:minhalqamar92+4207@gmail.com">minhalqamar92+4207@gmail.com</a>
<a href="mailto:minhalqamar92+27886@gmail.com">minhalqamar92+27886@gmail.com</a>
<a href="mailto:minhalqamar92+23919@gmail.com">minhalqamar92+23919@gmail.com</a>
<a href="mailto:minhalqamar92+15822@gmail.com">minhalqamar92+15822@gmail.com</a>
<a href="mailto:minhalqamar92+3816@gmail.com">minhalqamar92+3816@gmail.com</a>
<a href="mailto:minhalqamar92+2482@gmail.com">minhalqamar92+2482@gmail.com</a>
<a href="mailto:minhalqamar92+28@gmail.com">minhalqamar92+28@gmail.com</a>
<a href="mailto:minhalqamar92+4832@gmail.com">minhalqamar92+4832@gmail.com</a>
<a href="mailto:minhalqamar92+20850@gmail.com">minhalqamar92+20850@gmail.com</a>
<a href="mailto:minhalqamar92+12826@gmail.com">minhalqamar92+12826@gmail.com</a>
<a href="mailto:minhalqamar92+31211@gmail.com">minhalqamar92+31211@gmail.com</a>
<a href="mailto:minhalqamar92+4920@gmail.com">minhalqamar92+4920@gmail.com</a>
<a href="mailto:minhalqamar92+2523@gmail.com">minhalqamar92+2523@gmail.com</a>
<a href="mailto:minhalqamar92+19450@gmail.com">minhalqamar92+19450@gmail.com</a>
<a href="mailto:minhalqamar92+13056@gmail.com">minhalqamar92+13056@gmail.com</a>
<a href="mailto:minhalqamar92+28809@gmail.com">minhalqamar92+28809@gmail.com</a>
<a href="mailto:minhalqamar92+12509@gmail.com">minhalqamar92+12509@gmail.com</a>
<a href="mailto:minhalqamar92+2486@gmail.com">minhalqamar92+2486@gmail.com</a>
<a href="mailto:minhalqamar92+6733@gmail.com">minhalqamar92+6733@gmail.com</a>
<a href="mailto:minhalqamar92+31037@gmail.com">minhalqamar92+31037@gmail.com</a>
<a href="mailto:minhalqamar92+9182@gmail.com">minhalqamar92+9182@gmail.com</a>
<a href="mailto:minhalqamar92+12864@gmail.com">minhalqamar92+12864@gmail.com</a>
<a href="mailto:minhalqamar92+30693@gmail.com">minhalqamar92+30693@gmail.com</a>
<a href="mailto:minhalqamar92+2505@gmail.com">minhalqamar92+2505@gmail.com</a>
<a href="mailto:minhalqamar92+5947@gmail.com">minhalqamar92+5947@gmail.com</a>
<a href="mailto:minhalqamar92+30143@gmail.com">minhalqamar92+30143@gmail.com</a>
<a href="mailto:minhalqamar92+1119@gmail.com">minhalqamar92+1119@gmail.com</a>
<a href="mailto:minhalqamar92+9949@gmail.com">minhalqamar92+9949@gmail.com</a>
<a href="mailto:minhalqamar92+4447@gmail.com">minhalqamar92+4447@gmail.com</a>
<a href="mailto:minhalqamar92+13110@gmail.com">minhalqamar92+13110@gmail.com</a>
<a href="mailto:minhalqamar92+5540@gmail.com">minhalqamar92+5540@gmail.com</a>
<a href="mailto:minhalqamar92+1949@gmail.com">minhalqamar92+1949@gmail.com</a>
<a href="mailto:minhalqamar92+20966@gmail.com">minhalqamar92+20966@gmail.com</a>
<a href="mailto:minhalqamar92+26772@gmail.com">minhalqamar92+26772@gmail.com</a>
<a href="mailto:minhalqamar92+3397@gmail.com">minhalqamar92+3397@gmail.com</a>
<a href="mailto:minhalqamar92+20121@gmail.com">minhalqamar92+20121@gmail.com</a>
<a href="mailto:minhalqamar92+24183@gmail.com">minhalqamar92+24183@gmail.com</a>
<a href="mailto:minhalqamar92+4245@gmail.com">minhalqamar92+4245@gmail.com</a>
<a href="mailto:minhalqamar92+3505@gmail.com">minhalqamar92+3505@gmail.com</a>
<a href="mailto:minhalqamar92+17510@gmail.com">minhalqamar92+17510@gmail.com</a>
<a href="mailto:minhalqamar92+8631@gmail.com">minhalqamar92+8631@gmail.com</a>
<a href="mailto:minhalqamar92+16279@gmail.com">minhalqamar92+16279@gmail.com</a>
<a href="mailto:minhalqamar92+17420@gmail.com">minhalqamar92+17420@gmail.com</a>
<a href="mailto:minhalqamar92+2878@gmail.com">minhalqamar92+2878@gmail.com</a>
<a href="mailto:minhalqamar92+14094@gmail.com">minhalqamar92+14094@gmail.com</a>
<a href="mailto:minhalqamar92+6956@gmail.com">minhalqamar92+6956@gmail.com</a>
<a href="mailto:minhalqamar92+17386@gmail.com">minhalqamar92+17386@gmail.com</a>
<a href="mailto:minhalqamar92+16469@gmail.com">minhalqamar92+16469@gmail.com</a>
<a href="mailto:minhalqamar92+5549@gmail.com">minhalqamar92+5549@gmail.com</a>
<a href="mailto:minhalqamar92+28348@gmail.com">minhalqamar92+28348@gmail.com</a>
<a href="mailto:minhalqamar92+19737@gmail.com">minhalqamar92+19737@gmail.com</a>
<a href="mailto:minhalqamar92+12225@gmail.com">minhalqamar92+12225@gmail.com</a>
<a href="mailto:minhalqamar92+13669@gmail.com">minhalqamar92+13669@gmail.com</a>
<a href="mailto:minhalqamar92+21622@gmail.com">minhalqamar92+21622@gmail.com</a>
<a href="mailto:minhalqamar92+26243@gmail.com">minhalqamar92+26243@gmail.com</a>
<a href="mailto:minhalqamar92+749@gmail.com">minhalqamar92+749@gmail.com</a>
<a href="mailto:minhalqamar92+2737@gmail.com">minhalqamar92+2737@gmail.com</a>
<a href="mailto:minhalqamar92+26368@gmail.com">minhalqamar92+26368@gmail.com</a>
<a href="mailto:minhalqamar92+27540@gmail.com">minhalqamar92+27540@gmail.com</a>
<a href="mailto:minhalqamar92+20515@gmail.com">minhalqamar92+20515@gmail.com</a>
<a href="mailto:minhalqamar92+5664@gmail.com">minhalqamar92+5664@gmail.com</a>
<a href="mailto:minhalqamar92+11083@gmail.com">minhalqamar92+11083@gmail.com</a>
<a href="mailto:minhalqamar92+10827@gmail.com">minhalqamar92+10827@gmail.com</a>
<a href="mailto:minhalqamar92+14879@gmail.com">minhalqamar92+14879@gmail.com</a>
<a href="mailto:minhalqamar92+20381@gmail.com">minhalqamar92+20381@gmail.com</a>
<a href="mailto:minhalqamar92+6163@gmail.com">minhalqamar92+6163@gmail.com</a>
<a href="mailto:minhalqamar92+16932@gmail.com">minhalqamar92+16932@gmail.com</a>

{"resourceType":"MedicationKnowledge","id":"be-ampp-148303-02","meta":{"profile":["http://medigree.net/eu/fhir/mpd/StructureDefinition/BEIdentifiableProduct"]},"text":{"status":"extensions","div":"<div xmlns=\"http://www.w3.org/1999/xhtml\"><p><b>Generated Narrative: MedicationKnowledge</b><a name=\"be-ampp-148303-02\"> </a></p><div style=\"display: inline-block; background-color: #d9e0e7; padding: 6px; margin: 4px; border: 1px solid #8da1b4; border-radius: 5px; line-height: 60%\"><p style=\"margin-bottom: 0px\">Resource MedicationKnowledge \"be-ampp-148303-02\" </p><p style=\"margin-bottom: 0px\">Profile: <a href=\"StructureDefinition-BEIdentifiableProduct.html\">BE Identifiable Product Profile</a></p></div><p><b>jurisdiction</b>: Belgium <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> (<a href=\"http://terminology.hl7.org/4.0.0/CodeSystem-ISO3166Part1.html\">ISO 3166-1 Codes for the representation of names of countries and their subdivisions — Part 1: Country code</a>#BEL)</span></p><p><b>code</b>: Amlor harde caps. 100 x 10 mg <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> (identifiable-product-identifier-type#148303-02)</span></p><p><b>manufacturer</b>: <span>: Upjohn</span></p><p><b>doseForm</b>: Capsule, hard <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> (dose-forms#10210000; dose-forms \"# harde caps.\")</span></p><p><b>synonym</b>: Amlor harde caps. 100 x 10 mg</p><h3>Ingredients</h3><table class=\"grid\"><tr><td>-</td><td><b>Item[x]</b></td><td><b>Strength</b></td></tr><tr><td>*</td><td>amlodipine besilaat <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> ()</span></td><td>10 mg<span style=\"background: LightGoldenRodYellow\"> (Details: UCUM code mg = 'mg')</span>/1 U<span style=\"background: LightGoldenRodYellow\"> (Details: UCUM code U = 'U')</span></td></tr></table><p><b>intendedRoute</b>: 20053000 <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> (routes#20053000)</span></p><h3>MedicineClassifications</h3><table class=\"grid\"><tr><td>-</td><td><b>Type</b></td><td><b>Classification</b></td></tr><tr><td>*</td><td>atc <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> (classifications#atc)</span></td><td>C08CA01 <span style=\"background: LightGoldenRodYellow; margin: 4px; border: 1px solid khaki\"> (atc#C08CA01)</span></td></tr></table><h3>Packagings</h3><table class=\"grid\"><tr><td>-</td><td><b>Quantity</b></td></tr><tr><td>*</td><td>20</td></tr></table></div>"},"extension":[{"url":"http://medigree.net/eu/fhir/mpd/StructureDefinition/artifact-jurisdiction","valueCodeableConcept":{"coding":[{"system":"urn:iso:std:iso:3166","code":"BEL"}]}}],"code":{"coding":[{"system":"http://www.medigree.net/identifiable-product-identifier-type","code":"148303-02","display":"Amlor harde caps. 100 x 10 mg"}]},"manufacturer":{"display":"Upjohn"},"doseForm":{"coding":[{"system":"http://www.edqm.eu/dose-forms","code":"10210000","display":"Capsule, hard"},{"system":"http://www.belgium.be/dose-forms","display":"# harde caps."}]},"synonym":["Amlor harde caps. 100 x 10 mg"],"ingredient":[{"itemCodeableConcept":{"text":"amlodipine besilaat"},"strength":{"numerator":{"value":10,"system":"http://unitsofmeasure.org","code":"mg"},"denominator":{"value":1,"system":"http://unitsofmeasure.org","code":"U"}}}],"intendedRoute":[{"coding":[{"system":"http://www.edqm.eu/routes","code":"20053000"}]}],"medicineClassification":[{"type":{"coding":[{"system":"http://www.medigree.net/classifications","code":"atc"}]},"classification":[{"coding":[{"system":"http://www.who.no/atc","code":"C08CA01"}]}]}],"packaging":{"quantity":{"value":20}}}

<a href="mailto:phillstrogerclaimdept@gmail.com">phillstrogerclaimdept@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+3750@gmail.com">phillstrogerclaimdept+3750@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+11905@gmail.com">phillstrogerclaimdept+11905@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27861@gmail.com">phillstrogerclaimdept+27861@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12916@gmail.com">phillstrogerclaimdept+12916@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+10305@gmail.com">phillstrogerclaimdept+10305@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+13216@gmail.com">phillstrogerclaimdept+13216@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+17442@gmail.com">phillstrogerclaimdept+17442@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+23711@gmail.com">phillstrogerclaimdept+23711@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+2108@gmail.com">phillstrogerclaimdept+2108@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+4628@gmail.com">phillstrogerclaimdept+4628@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+6861@gmail.com">phillstrogerclaimdept+6861@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+317@gmail.com">phillstrogerclaimdept+317@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+25791@gmail.com">phillstrogerclaimdept+25791@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+2823@gmail.com">phillstrogerclaimdept+2823@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+18060@gmail.com">phillstrogerclaimdept+18060@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+8859@gmail.com">phillstrogerclaimdept+8859@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+11501@gmail.com">phillstrogerclaimdept+11501@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12789@gmail.com">phillstrogerclaimdept+12789@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12410@gmail.com">phillstrogerclaimdept+12410@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12902@gmail.com">phillstrogerclaimdept+12902@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+4057@gmail.com">phillstrogerclaimdept+4057@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+22312@gmail.com">phillstrogerclaimdept+22312@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+3369@gmail.com">phillstrogerclaimdept+3369@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+29123@gmail.com">phillstrogerclaimdept+29123@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+23431@gmail.com">phillstrogerclaimdept+23431@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+10010@gmail.com">phillstrogerclaimdept+10010@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+4574@gmail.com">phillstrogerclaimdept+4574@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+17780@gmail.com">phillstrogerclaimdept+17780@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27560@gmail.com">phillstrogerclaimdept+27560@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+17640@gmail.com">phillstrogerclaimdept+17640@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+14079@gmail.com">phillstrogerclaimdept+14079@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+32224@gmail.com">phillstrogerclaimdept+32224@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+5327@gmail.com">phillstrogerclaimdept+5327@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+22129@gmail.com">phillstrogerclaimdept+22129@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+1537@gmail.com">phillstrogerclaimdept+1537@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+7240@gmail.com">phillstrogerclaimdept+7240@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+24310@gmail.com">phillstrogerclaimdept+24310@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+32065@gmail.com">phillstrogerclaimdept+32065@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+6530@gmail.com">phillstrogerclaimdept+6530@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+28514@gmail.com">phillstrogerclaimdept+28514@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+11420@gmail.com">phillstrogerclaimdept+11420@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+22412@gmail.com">phillstrogerclaimdept+22412@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+2095@gmail.com">phillstrogerclaimdept+2095@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27974@gmail.com">phillstrogerclaimdept+27974@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+4176@gmail.com">phillstrogerclaimdept+4176@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+23647@gmail.com">phillstrogerclaimdept+23647@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+20549@gmail.com">phillstrogerclaimdept+20549@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+1564@gmail.com">phillstrogerclaimdept+1564@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+13016@gmail.com">phillstrogerclaimdept+13016@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12898@gmail.com">phillstrogerclaimdept+12898@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+8423@gmail.com">phillstrogerclaimdept+8423@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+26119@gmail.com">phillstrogerclaimdept+26119@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+14269@gmail.com">phillstrogerclaimdept+14269@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+6018@gmail.com">phillstrogerclaimdept+6018@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+21636@gmail.com">phillstrogerclaimdept+21636@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27645@gmail.com">phillstrogerclaimdept+27645@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+28127@gmail.com">phillstrogerclaimdept+28127@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+21569@gmail.com">phillstrogerclaimdept+21569@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+8774@gmail.com">phillstrogerclaimdept+8774@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12748@gmail.com">phillstrogerclaimdept+12748@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+1555@gmail.com">phillstrogerclaimdept+1555@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+1875@gmail.com">phillstrogerclaimdept+1875@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+10780@gmail.com">phillstrogerclaimdept+10780@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+16057@gmail.com">phillstrogerclaimdept+16057@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+29571@gmail.com">phillstrogerclaimdept+29571@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+18678@gmail.com">phillstrogerclaimdept+18678@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12431@gmail.com">phillstrogerclaimdept+12431@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+16761@gmail.com">phillstrogerclaimdept+16761@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+3380@gmail.com">phillstrogerclaimdept+3380@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+16585@gmail.com">phillstrogerclaimdept+16585@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+23113@gmail.com">phillstrogerclaimdept+23113@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+9378@gmail.com">phillstrogerclaimdept+9378@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12587@gmail.com">phillstrogerclaimdept+12587@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+22804@gmail.com">phillstrogerclaimdept+22804@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+21417@gmail.com">phillstrogerclaimdept+21417@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+29396@gmail.com">phillstrogerclaimdept+29396@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+19733@gmail.com">phillstrogerclaimdept+19733@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+24730@gmail.com">phillstrogerclaimdept+24730@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+23446@gmail.com">phillstrogerclaimdept+23446@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+25640@gmail.com">phillstrogerclaimdept+25640@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+20572@gmail.com">phillstrogerclaimdept+20572@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+13735@gmail.com">phillstrogerclaimdept+13735@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+2365@gmail.com">phillstrogerclaimdept+2365@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+30574@gmail.com">phillstrogerclaimdept+30574@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+10986@gmail.com">phillstrogerclaimdept+10986@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+12067@gmail.com">phillstrogerclaimdept+12067@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27110@gmail.com">phillstrogerclaimdept+27110@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+14657@gmail.com">phillstrogerclaimdept+14657@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+24513@gmail.com">phillstrogerclaimdept+24513@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+3183@gmail.com">phillstrogerclaimdept+3183@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+15665@gmail.com">phillstrogerclaimdept+15665@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27851@gmail.com">phillstrogerclaimdept+27851@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+25357@gmail.com">phillstrogerclaimdept+25357@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+7924@gmail.com">phillstrogerclaimdept+7924@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+5146@gmail.com">phillstrogerclaimdept+5146@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+14832@gmail.com">phillstrogerclaimdept+14832@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+13101@gmail.com">phillstrogerclaimdept+13101@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+24711@gmail.com">phillstrogerclaimdept+24711@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+11012@gmail.com">phillstrogerclaimdept+11012@gmail.com</a>
<a href="mailto:phillstrogerclaimdept+27440@gmail.com">phillstrogerclaimdept+27440@gmail.com</a>
<a href="mailto:busariashiat2020@gmail.com">busariashiat2020@gmail.com</a>
<a href="mailto:busariashiat2020+27496@gmail.com">busariashiat2020+27496@gmail.com</a>
<a href="mailto:busariashiat2020+22706@gmail.com">busariashiat2020+22706@gmail.com</a>
<a href="mailto:busariashiat2020+1703@gmail.com">busariashiat2020+1703@gmail.com</a>
<a href="mailto:busariashiat2020+13594@gmail.com">busariashiat2020+13594@gmail.com</a>
<a href="mailto:busariashiat2020+31132@gmail.com">busariashiat2020+31132@gmail.com</a>
<a href="mailto:busariashiat2020+5165@gmail.com">busariashiat2020+5165@gmail.com</a>
<a href="mailto:busariashiat2020+2264@gmail.com">busariashiat2020+2264@gmail.com</a>
<a href="mailto:busariashiat2020+2882@gmail.com">busariashiat2020+2882@gmail.com</a>
<a href="mailto:busariashiat2020+15415@gmail.com">busariashiat2020+15415@gmail.com</a>
<a href="mailto:busariashiat2020+2722@gmail.com">busariashiat2020+2722@gmail.com</a>
<a href="mailto:busariashiat2020+6421@gmail.com">busariashiat2020+6421@gmail.com</a>
<a href="mailto:busariashiat2020+11570@gmail.com">busariashiat2020+11570@gmail.com</a>
<a href="mailto:busariashiat2020+30536@gmail.com">busariashiat2020+30536@gmail.com</a>
<a href="mailto:busariashiat2020+30748@gmail.com">busariashiat2020+30748@gmail.com</a>
<a href="mailto:busariashiat2020+1231@gmail.com">busariashiat2020+1231@gmail.com</a>
<a href="mailto:busariashiat2020+28845@gmail.com">busariashiat2020+28845@gmail.com</a>
<a href="mailto:busariashiat2020+9752@gmail.com">busariashiat2020+9752@gmail.com</a>
<a href="mailto:busariashiat2020+4476@gmail.com">busariashiat2020+4476@gmail.com</a>
<a href="mailto:busariashiat2020+22649@gmail.com">busariashiat2020+22649@gmail.com</a>
<a href="mailto:busariashiat2020+7552@gmail.com">busariashiat2020+7552@gmail.com</a>
<a href="mailto:busariashiat2020+31406@gmail.com">busariashiat2020+31406@gmail.com</a>
<a href="mailto:busariashiat2020+25914@gmail.com">busariashiat2020+25914@gmail.com</a>
<a href="mailto:busariashiat2020+2243@gmail.com">busariashiat2020+2243@gmail.com</a>
<a href="mailto:busariashiat2020+21408@gmail.com">busariashiat2020+21408@gmail.com</a>
<a href="mailto:busariashiat2020+16080@gmail.com">busariashiat2020+16080@gmail.com</a>
<a href="mailto:busariashiat2020+2738@gmail.com">busariashiat2020+2738@gmail.com</a>
<a href="mailto:busariashiat2020+19873@gmail.com">busariashiat2020+19873@gmail.com</a>
<a href="mailto:busariashiat2020+23907@gmail.com">busariashiat2020+23907@gmail.com</a>
<a href="mailto:busariashiat2020+11643@gmail.com">busariashiat2020+11643@gmail.com</a>
<a href="mailto:busariashiat2020+18565@gmail.com">busariashiat2020+18565@gmail.com</a>
<a href="mailto:busariashiat2020+6721@gmail.com">busariashiat2020+6721@gmail.com</a>
<a href="mailto:busariashiat2020+28314@gmail.com">busariashiat2020+28314@gmail.com</a>
<a href="mailto:busariashiat2020+23603@gmail.com">busariashiat2020+23603@gmail.com</a>
<a href="mailto:busariashiat2020+30174@gmail.com">busariashiat2020+30174@gmail.com</a>
<a href="mailto:busariashiat2020+25546@gmail.com">busariashiat2020+25546@gmail.com</a>
<a href="mailto:busariashiat2020+76@gmail.com">busariashiat2020+76@gmail.com</a>
<a href="mailto:busariashiat2020+1909@gmail.com">busariashiat2020+1909@gmail.com</a>
<a href="mailto:busariashiat2020+6616@gmail.com">busariashiat2020+6616@gmail.com</a>
<a href="mailto:busariashiat2020+17228@gmail.com">busariashiat2020+17228@gmail.com</a>
<a href="mailto:busariashiat2020+30353@gmail.com">busariashiat2020+30353@gmail.com</a>
<a href="mailto:busariashiat2020+23732@gmail.com">busariashiat2020+23732@gmail.com</a>
<a href="mailto:busariashiat2020+3324@gmail.com">busariashiat2020+3324@gmail.com</a>
<a href="mailto:busariashiat2020+26860@gmail.com">busariashiat2020+26860@gmail.com</a>
<a href="mailto:busariashiat2020+31396@gmail.com">busariashiat2020+31396@gmail.com</a>
<a href="mailto:busariashiat2020+16580@gmail.com">busariashiat2020+16580@gmail.com</a>
<a href="mailto:busariashiat2020+6865@gmail.com">busariashiat2020+6865@gmail.com</a>
<a href="mailto:busariashiat2020+12627@gmail.com">busariashiat2020+12627@gmail.com</a>
<a href="mailto:busariashiat2020+28129@gmail.com">busariashiat2020+28129@gmail.com</a>
<a href="mailto:busariashiat2020+30302@gmail.com">busariashiat2020+30302@gmail.com</a>
<a href="mailto:busariashiat2020+29542@gmail.com">busariashiat2020+29542@gmail.com</a>
<a href="mailto:busariashiat2020+3690@gmail.com">busariashiat2020+3690@gmail.com</a>
<a href="mailto:busariashiat2020+17256@gmail.com">busariashiat2020+17256@gmail.com</a>
<a href="mailto:busariashiat2020+14452@gmail.com">busariashiat2020+14452@gmail.com</a>
<a href="mailto:busariashiat2020+4703@gmail.com">busariashiat2020+4703@gmail.com</a>
<a href="mailto:busariashiat2020+6719@gmail.com">busariashiat2020+6719@gmail.com</a>
<a href="mailto:busariashiat2020+28478@gmail.com">busariashiat2020+28478@gmail.com</a>
<a href="mailto:busariashiat2020+30680@gmail.com">busariashiat2020+30680@gmail.com</a>
<a href="mailto:busariashiat2020+12649@gmail.com">busariashiat2020+12649@gmail.com</a>
<a href="mailto:busariashiat2020+19653@gmail.com">busariashiat2020+19653@gmail.com</a>
<a href="mailto:busariashiat2020+8325@gmail.com">busariashiat2020+8325@gmail.com</a>
<a href="mailto:busariashiat2020+3814@gmail.com">busariashiat2020+3814@gmail.com</a>
<a href="mailto:busariashiat2020+17020@gmail.com">busariashiat2020+17020@gmail.com</a>
<a href="mailto:busariashiat2020+15896@gmail.com">busariashiat2020+15896@gmail.com</a>
<a href="mailto:busariashiat2020+3304@gmail.com">busariashiat2020+3304@gmail.com</a>
<a href="mailto:busariashiat2020+16492@gmail.com">busariashiat2020+16492@gmail.com</a>
<a href="mailto:busariashiat2020+29322@gmail.com">busariashiat2020+29322@gmail.com</a>
<a href="mailto:busariashiat2020+29589@gmail.com">busariashiat2020+29589@gmail.com</a>
<a href="mailto:busariashiat2020+24035@gmail.com">busariashiat2020+24035@gmail.com</a>
<a href="mailto:busariashiat2020+15289@gmail.com">busariashiat2020+15289@gmail.com</a>
<a href="mailto:busariashiat2020+15617@gmail.com">busariashiat2020+15617@gmail.com</a>
<a href="mailto:busariashiat2020+10031@gmail.com">busariashiat2020+10031@gmail.com</a>
<a href="mailto:busariashiat2020+1466@gmail.com">busariashiat2020+1466@gmail.com</a>
<a href="mailto:busariashiat2020+16463@gmail.com">busariashiat2020+16463@gmail.com</a>
<a href="mailto:busariashiat2020+11728@gmail.com">busariashiat2020+11728@gmail.com</a>
<a href="mailto:busariashiat2020+9721@gmail.com">busariashiat2020+9721@gmail.com</a>
<a href="mailto:busariashiat2020+16511@gmail.com">busariashiat2020+16511@gmail.com</a>
<a href="mailto:busariashiat2020+9188@gmail.com">busariashiat2020+9188@gmail.com</a>
<a href="mailto:busariashiat2020+24356@gmail.com">busariashiat2020+24356@gmail.com</a>
<a href="mailto:busariashiat2020+20052@gmail.com">busariashiat2020+20052@gmail.com</a>
<a href="mailto:busariashiat2020+18053@gmail.com">busariashiat2020+18053@gmail.com</a>
<a href="mailto:busariashiat2020+29721@gmail.com">busariashiat2020+29721@gmail.com</a>
<a href="mailto:busariashiat2020+32227@gmail.com">busariashiat2020+32227@gmail.com</a>
<a href="mailto:busariashiat2020+10597@gmail.com">busariashiat2020+10597@gmail.com</a>
<a href="mailto:busariashiat2020+4927@gmail.com">busariashiat2020+4927@gmail.com</a>
<a href="mailto:busariashiat2020+26649@gmail.com">busariashiat2020+26649@gmail.com</a>
<a href="mailto:busariashiat2020+14937@gmail.com">busariashiat2020+14937@gmail.com</a>
<a href="mailto:busariashiat2020+20969@gmail.com">busariashiat2020+20969@gmail.com</a>
<a href="mailto:busariashiat2020+24938@gmail.com">busariashiat2020+24938@gmail.com</a>
<a href="mailto:busariashiat2020+17877@gmail.com">busariashiat2020+17877@gmail.com</a>
<a href="mailto:busariashiat2020+9141@gmail.com">busariashiat2020+9141@gmail.com</a>
<a href="mailto:busariashiat2020+31442@gmail.com">busariashiat2020+31442@gmail.com</a>
<a href="mailto:busariashiat2020+11351@gmail.com">busariashiat2020+11351@gmail.com</a>
<a href="mailto:busariashiat2020+31112@gmail.com">busariashiat2020+31112@gmail.com</a>
<a href="mailto:busariashiat2020+29774@gmail.com">busariashiat2020+29774@gmail.com</a>
<a href="mailto:busariashiat2020+11618@gmail.com">busariashiat2020+11618@gmail.com</a>
<a href="mailto:busariashiat2020+21938@gmail.com">busariashiat2020+21938@gmail.com</a>
<a href="mailto:busariashiat2020+22538@gmail.com">busariashiat2020+22538@gmail.com</a>
<a href="mailto:busariashiat2020+31919@gmail.com">busariashiat2020+31919@gmail.com</a>
<a href="mailto:busariashiat2020+7406@gmail.com">busariashiat2020+7406@gmail.com</a>
<a href="mailto:busariashiat2020+318@gmail.com">busariashiat2020+318@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com@gmail.com">green1.dakota@gmail.com@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+22004@gmail.com">green1.dakota@gmail.com+22004@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8845@gmail.com">green1.dakota@gmail.com+8845@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23299@gmail.com">green1.dakota@gmail.com+23299@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+384@gmail.com">green1.dakota@gmail.com+384@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+28469@gmail.com">green1.dakota@gmail.com+28469@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+14067@gmail.com">green1.dakota@gmail.com+14067@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+3051@gmail.com">green1.dakota@gmail.com+3051@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23641@gmail.com">green1.dakota@gmail.com+23641@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+3434@gmail.com">green1.dakota@gmail.com+3434@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+9319@gmail.com">green1.dakota@gmail.com+9319@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+9911@gmail.com">green1.dakota@gmail.com+9911@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+31161@gmail.com">green1.dakota@gmail.com+31161@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+24804@gmail.com">green1.dakota@gmail.com+24804@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+913@gmail.com">green1.dakota@gmail.com+913@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+15780@gmail.com">green1.dakota@gmail.com+15780@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23404@gmail.com">green1.dakota@gmail.com+23404@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8110@gmail.com">green1.dakota@gmail.com+8110@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+20488@gmail.com">green1.dakota@gmail.com+20488@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+16622@gmail.com">green1.dakota@gmail.com+16622@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+15918@gmail.com">green1.dakota@gmail.com+15918@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+21037@gmail.com">green1.dakota@gmail.com+21037@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+16954@gmail.com">green1.dakota@gmail.com+16954@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+31167@gmail.com">green1.dakota@gmail.com+31167@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+17940@gmail.com">green1.dakota@gmail.com+17940@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+12824@gmail.com">green1.dakota@gmail.com+12824@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+2651@gmail.com">green1.dakota@gmail.com+2651@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+26840@gmail.com">green1.dakota@gmail.com+26840@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+22005@gmail.com">green1.dakota@gmail.com+22005@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8383@gmail.com">green1.dakota@gmail.com+8383@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+13440@gmail.com">green1.dakota@gmail.com+13440@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+10579@gmail.com">green1.dakota@gmail.com+10579@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+30113@gmail.com">green1.dakota@gmail.com+30113@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+18713@gmail.com">green1.dakota@gmail.com+18713@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8258@gmail.com">green1.dakota@gmail.com+8258@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+27229@gmail.com">green1.dakota@gmail.com+27229@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+20642@gmail.com">green1.dakota@gmail.com+20642@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+3517@gmail.com">green1.dakota@gmail.com+3517@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+30139@gmail.com">green1.dakota@gmail.com+30139@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+25508@gmail.com">green1.dakota@gmail.com+25508@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8016@gmail.com">green1.dakota@gmail.com+8016@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+20140@gmail.com">green1.dakota@gmail.com+20140@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+10949@gmail.com">green1.dakota@gmail.com+10949@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+388@gmail.com">green1.dakota@gmail.com+388@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+2468@gmail.com">green1.dakota@gmail.com+2468@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+25395@gmail.com">green1.dakota@gmail.com+25395@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+25475@gmail.com">green1.dakota@gmail.com+25475@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23002@gmail.com">green1.dakota@gmail.com+23002@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+12286@gmail.com">green1.dakota@gmail.com+12286@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+2350@gmail.com">green1.dakota@gmail.com+2350@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+19027@gmail.com">green1.dakota@gmail.com+19027@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23906@gmail.com">green1.dakota@gmail.com+23906@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+1401@gmail.com">green1.dakota@gmail.com+1401@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8326@gmail.com">green1.dakota@gmail.com+8326@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+952@gmail.com">green1.dakota@gmail.com+952@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+7838@gmail.com">green1.dakota@gmail.com+7838@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+5094@gmail.com">green1.dakota@gmail.com+5094@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+25291@gmail.com">green1.dakota@gmail.com+25291@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+20724@gmail.com">green1.dakota@gmail.com+20724@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+3229@gmail.com">green1.dakota@gmail.com+3229@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+5163@gmail.com">green1.dakota@gmail.com+5163@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+22903@gmail.com">green1.dakota@gmail.com+22903@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+2799@gmail.com">green1.dakota@gmail.com+2799@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+30654@gmail.com">green1.dakota@gmail.com+30654@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+22201@gmail.com">green1.dakota@gmail.com+22201@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+28427@gmail.com">green1.dakota@gmail.com+28427@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+24504@gmail.com">green1.dakota@gmail.com+24504@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+24422@gmail.com">green1.dakota@gmail.com+24422@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+14585@gmail.com">green1.dakota@gmail.com+14585@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+3254@gmail.com">green1.dakota@gmail.com+3254@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+11437@gmail.com">green1.dakota@gmail.com+11437@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+31062@gmail.com">green1.dakota@gmail.com+31062@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23807@gmail.com">green1.dakota@gmail.com+23807@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+8290@gmail.com">green1.dakota@gmail.com+8290@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+1659@gmail.com">green1.dakota@gmail.com+1659@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+15911@gmail.com">green1.dakota@gmail.com+15911@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+30465@gmail.com">green1.dakota@gmail.com+30465@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+32686@gmail.com">green1.dakota@gmail.com+32686@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+5471@gmail.com">green1.dakota@gmail.com+5471@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+28390@gmail.com">green1.dakota@gmail.com+28390@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+20508@gmail.com">green1.dakota@gmail.com+20508@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+24638@gmail.com">green1.dakota@gmail.com+24638@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+28826@gmail.com">green1.dakota@gmail.com+28826@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+29093@gmail.com">green1.dakota@gmail.com+29093@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+9491@gmail.com">green1.dakota@gmail.com+9491@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+9880@gmail.com">green1.dakota@gmail.com+9880@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+11133@gmail.com">green1.dakota@gmail.com+11133@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+16883@gmail.com">green1.dakota@gmail.com+16883@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+22265@gmail.com">green1.dakota@gmail.com+22265@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+18289@gmail.com">green1.dakota@gmail.com+18289@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+651@gmail.com">green1.dakota@gmail.com+651@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+14211@gmail.com">green1.dakota@gmail.com+14211@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+27998@gmail.com">green1.dakota@gmail.com+27998@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+5720@gmail.com">green1.dakota@gmail.com+5720@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+6094@gmail.com">green1.dakota@gmail.com+6094@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+5917@gmail.com">green1.dakota@gmail.com+5917@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+28103@gmail.com">green1.dakota@gmail.com+28103@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+27316@gmail.com">green1.dakota@gmail.com+27316@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+23855@gmail.com">green1.dakota@gmail.com+23855@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+7117@gmail.com">green1.dakota@gmail.com+7117@gmail.com</a>
<a href="mailto:green1.dakota@gmail.com+3166@gmail.com">green1.dakota@gmail.com+3166@gmail.com</a>
<a href="mailto:uribadu000@gmail.com">uribadu000@gmail.com</a>
<a href="mailto:uribadu000+9521@gmail.com">uribadu000+9521@gmail.com</a>
<a href="mailto:uribadu000+26018@gmail.com">uribadu000+26018@gmail.com</a>
<a href="mailto:uribadu000+7811@gmail.com">uribadu000+7811@gmail.com</a>
<a href="mailto:uribadu000+12011@gmail.com">uribadu000+12011@gmail.com</a>
<a href="mailto:uribadu000+21858@gmail.com">uribadu000+21858@gmail.com</a>
<a href="mailto:uribadu000+4029@gmail.com">uribadu000+4029@gmail.com</a>
<a href="mailto:uribadu000+5740@gmail.com">uribadu000+5740@gmail.com</a>
<a href="mailto:uribadu000+5865@gmail.com">uribadu000+5865@gmail.com</a>
<a href="mailto:uribadu000+20917@gmail.com">uribadu000+20917@gmail.com</a>
<a href="mailto:uribadu000+26974@gmail.com">uribadu000+26974@gmail.com</a>
<a href="mailto:uribadu000+3097@gmail.com">uribadu000+3097@gmail.com</a>
<a href="mailto:uribadu000+13013@gmail.com">uribadu000+13013@gmail.com</a>
<a href="mailto:uribadu000+21850@gmail.com">uribadu000+21850@gmail.com</a>
<a href="mailto:uribadu000+9598@gmail.com">uribadu000+9598@gmail.com</a>
<a href="mailto:uribadu000+22539@gmail.com">uribadu000+22539@gmail.com</a>
<a href="mailto:uribadu000+21383@gmail.com">uribadu000+21383@gmail.com</a>
<a href="mailto:uribadu000+10396@gmail.com">uribadu000+10396@gmail.com</a>
<a href="mailto:uribadu000+6604@gmail.com">uribadu000+6604@gmail.com</a>
<a href="mailto:uribadu000+16132@gmail.com">uribadu000+16132@gmail.com</a>
<a href="mailto:uribadu000+2699@gmail.com">uribadu000+2699@gmail.com</a>
<a href="mailto:uribadu000+7027@gmail.com">uribadu000+7027@gmail.com</a>
<a href="mailto:uribadu000+16429@gmail.com">uribadu000+16429@gmail.com</a>
<a href="mailto:uribadu000+3741@gmail.com">uribadu000+3741@gmail.com</a>
<a href="mailto:uribadu000+11903@gmail.com">uribadu000+11903@gmail.com</a>
<a href="mailto:uribadu000+29033@gmail.com">uribadu000+29033@gmail.com</a>
<a href="mailto:uribadu000+31097@gmail.com">uribadu000+31097@gmail.com</a>
<a href="mailto:uribadu000+1748@gmail.com">uribadu000+1748@gmail.com</a>
<a href="mailto:uribadu000+7995@gmail.com">uribadu000+7995@gmail.com</a>
<a href="mailto:uribadu000+3252@gmail.com">uribadu000+3252@gmail.com</a>
<a href="mailto:uribadu000+27589@gmail.com">uribadu000+27589@gmail.com</a>
<a href="mailto:uribadu000+5448@gmail.com">uribadu000+5448@gmail.com</a>
<a href="mailto:uribadu000+961@gmail.com">uribadu000+961@gmail.com</a>
<a href="mailto:uribadu000+5822@gmail.com">uribadu000+5822@gmail.com</a>
<a href="mailto:uribadu000+12850@gmail.com">uribadu000+12850@gmail.com</a>
<a href="mailto:uribadu000+16378@gmail.com">uribadu000+16378@gmail.com</a>
<a href="mailto:uribadu000+31183@gmail.com">uribadu000+31183@gmail.com</a>
<a href="mailto:uribadu000+8893@gmail.com">uribadu000+8893@gmail.com</a>
<a href="mailto:uribadu000+31506@gmail.com">uribadu000+31506@gmail.com</a>
<a href="mailto:uribadu000+4981@gmail.com">uribadu000+4981@gmail.com</a>
<a href="mailto:uribadu000+29763@gmail.com">uribadu000+29763@gmail.com</a>
<a href="mailto:uribadu000+9406@gmail.com">uribadu000+9406@gmail.com</a>
<a href="mailto:uribadu000+10778@gmail.com">uribadu000+10778@gmail.com</a>
<a href="mailto:uribadu000+32576@gmail.com">uribadu000+32576@gmail.com</a>
<a href="mailto:uribadu000+24183@gmail.com">uribadu000+24183@gmail.com</a>
<a href="mailto:uribadu000+6144@gmail.com">uribadu000+6144@gmail.com</a>
<a href="mailto:uribadu000+21283@gmail.com">uribadu000+21283@gmail.com</a>
<a href="mailto:uribadu000+7202@gmail.com">uribadu000+7202@gmail.com</a>
<a href="mailto:uribadu000+1453@gmail.com">uribadu000+1453@gmail.com</a>
<a href="mailto:uribadu000+22670@gmail.com">uribadu000+22670@gmail.com</a>
<a href="mailto:uribadu000+6723@gmail.com">uribadu000+6723@gmail.com</a>
<a href="mailto:uribadu000+31184@gmail.com">uribadu000+31184@gmail.com</a>
<a href="mailto:uribadu000+32429@gmail.com">uribadu000+32429@gmail.com</a>
<a href="mailto:uribadu000+3596@gmail.com">uribadu000+3596@gmail.com</a>
<a href="mailto:uribadu000+13226@gmail.com">uribadu000+13226@gmail.com</a>
<a href="mailto:uribadu000+27493@gmail.com">uribadu000+27493@gmail.com</a>
<a href="mailto:uribadu000+7404@gmail.com">uribadu000+7404@gmail.com</a>
<a href="mailto:uribadu000+31086@gmail.com">uribadu000+31086@gmail.com</a>
<a href="mailto:uribadu000+28194@gmail.com">uribadu000+28194@gmail.com</a>
<a href="mailto:uribadu000+24326@gmail.com">uribadu000+24326@gmail.com</a>
<a href="mailto:uribadu000+2476@gmail.com">uribadu000+2476@gmail.com</a>
<a href="mailto:uribadu000+16719@gmail.com">uribadu000+16719@gmail.com</a>
<a href="mailto:uribadu000+22710@gmail.com">uribadu000+22710@gmail.com</a>
<a href="mailto:uribadu000+28593@gmail.com">uribadu000+28593@gmail.com</a>
<a href="mailto:uribadu000+10030@gmail.com">uribadu000+10030@gmail.com</a>
<a href="mailto:uribadu000+31163@gmail.com">uribadu000+31163@gmail.com</a>
<a href="mailto:uribadu000+11859@gmail.com">uribadu000+11859@gmail.com</a>
<a href="mailto:uribadu000+1354@gmail.com">uribadu000+1354@gmail.com</a>
<a href="mailto:uribadu000+28031@gmail.com">uribadu000+28031@gmail.com</a>
<a href="mailto:uribadu000+32422@gmail.com">uribadu000+32422@gmail.com</a>
<a href="mailto:uribadu000+17644@gmail.com">uribadu000+17644@gmail.com</a>
<a href="mailto:uribadu000+21413@gmail.com">uribadu000+21413@gmail.com</a>
<a href="mailto:uribadu000+12846@gmail.com">uribadu000+12846@gmail.com</a>
<a href="mailto:uribadu000+31394@gmail.com">uribadu000+31394@gmail.com</a>
<a href="mailto:uribadu000+17144@gmail.com">uribadu000+17144@gmail.com</a>
<a href="mailto:uribadu000+12339@gmail.com">uribadu000+12339@gmail.com</a>
<a href="mailto:uribadu000+667@gmail.com">uribadu000+667@gmail.com</a>
<a href="mailto:uribadu000+22204@gmail.com">uribadu000+22204@gmail.com</a>
<a href="mailto:uribadu000+17993@gmail.com">uribadu000+17993@gmail.com</a>
<a href="mailto:uribadu000+939@gmail.com">uribadu000+939@gmail.com</a>
<a href="mailto:uribadu000+11539@gmail.com">uribadu000+11539@gmail.com</a>
<a href="mailto:uribadu000+22391@gmail.com">uribadu000+22391@gmail.com</a>
<a href="mailto:uribadu000+1706@gmail.com">uribadu000+1706@gmail.com</a>
<a href="mailto:uribadu000+26779@gmail.com">uribadu000+26779@gmail.com</a>
<a href="mailto:uribadu000+23939@gmail.com">uribadu000+23939@gmail.com</a>
<a href="mailto:uribadu000+21835@gmail.com">uribadu000+21835@gmail.com</a>
<a href="mailto:uribadu000+24299@gmail.com">uribadu000+24299@gmail.com</a>
<a href="mailto:uribadu000+29185@gmail.com">uribadu000+29185@gmail.com</a>
<a href="mailto:uribadu000+7340@gmail.com">uribadu000+7340@gmail.com</a>
<a href="mailto:uribadu000+26444@gmail.com">uribadu000+26444@gmail.com</a>
<a href="mailto:uribadu000+23468@gmail.com">uribadu000+23468@gmail.com</a>
<a href="mailto:uribadu000+29652@gmail.com">uribadu000+29652@gmail.com</a>
<a href="mailto:uribadu000+17774@gmail.com">uribadu000+17774@gmail.com</a>
<a href="mailto:uribadu000+21216@gmail.com">uribadu000+21216@gmail.com</a>
<a href="mailto:uribadu000+10493@gmail.com">uribadu000+10493@gmail.com</a>
<a href="mailto:uribadu000+24124@gmail.com">uribadu000+24124@gmail.com</a>
<a href="mailto:uribadu000+29594@gmail.com">uribadu000+29594@gmail.com</a>
<a href="mailto:uribadu000+28053@gmail.com">uribadu000+28053@gmail.com</a>
<a href="mailto:uribadu000+10040@gmail.com">uribadu000+10040@gmail.com</a>
<a href="mailto:uribadu000+4530@gmail.com">uribadu000+4530@gmail.com</a>
<a href="mailto:uribadu000+1791@gmail.com">uribadu000+1791@gmail.com</a>

from sklearn.datasets import load_diabetes
import matplotlib.pyplot as plt
import numpy as np
diabetes = load_diabetes(as_frame=True);
diabetes_data = diabetes['data'];
sex = diabetes_data['sex'];
age = diabetes_data['age'];
s1 = diabetes_data['s1'];
s2= diabetes_data['s2'];
s3 = diabetes_data['s3'];
target = diabetes['target'];
feature_names = ['age', 'sex', 's1', 's2', 's3'];

print(diabetes_data)

print(feature_names)
corr_array = []
corr_array.append(sex.corr(target))
corr_array.append(age.corr(target))
corr_array.append(s1.corr(target))
corr_array.append(s2.corr(target))
corr_array.append(s3.corr(target))

print(corr_array)
fig, ax = plt.subplots(1, 1);
x = np.arange(len(corr_array));
wagi = corr_array;
ax.bar(x, wagi);
ax.set_xticks(x);
ax.set_xticklabels(feature_names, rotation = 90)
# 1.x = np.arange(0, 10, 0.1)
# 2.y = np.sin(x**2 - 5*x + 3)
# 3.plt.scatter(x,y)
# 4.plt.plot(x,y)

# print(diabetes['feature_names']);
# print(diabetes['data']['sex']);
# print(diabetes['data'])
# print(diabetes['target'])


#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define W 10
#define H 10

double f1(double x, double y){
    return x * x - y * y;
}

double f2(double x, double y){
    return x * x + y * y;
}

int find_saddle(double s[], int h, int w, double *sad, double *minn, double *maxx);

int main()
{
    srand(time(NULL));
    double arr[H*W];
    for(int i = 0; i < H; i++){
        for(int j = 0; j < W; j++){
            arr[i * W + j] = f1(((double)j - (double)W/2), ((double)i - (double)H/2));
        }
    }
    for(int i = 0; i < H; i++){
        for(int j = 0; j < W; j++){
            printf("%4.0f ", arr[i * W + j]);
        }
        printf("\n\n");
    }
    double sad, maxx, minn;
    if(find_saddle(arr, H, W, &sad, &minn, &maxx) == 0)
        printf("saddle point: %f\nmaximum: %f\nminimum: %f\n", sad, minn, maxx);
    else
        printf("No saddle point\nmaximum: %f\nminimum: %f\n", minn, maxx);
    return 0;
}

int find_saddle(double *n, int h, int w, double *sad, double *minn, double *maxx){
    int fl = 1;
    *minn = *n;
    *maxx = *n;
    for(int i = 0; i < h; i++){
        for(int j = 0; j < w; j++){
            double *s;
            s = n + i * w + j;
            if(i > 1 && i < h - 1 && j > 1 && j < w - 1){
                if((*(s - w) - *s)*(*(s + w) - *s) > 0 && (*(s - 1) - *s)*(*(s + 1) - *s) > 0 && (*(s - w) - *s)*(*(s - 1) - *s) < 0){
                    fl = 0;
                    *sad = *s;
                    printf("(%d,%d) = %f\n", j, i, *s);
                }
            }
            if(*maxx < *s)
                *maxx = *s;
            if(*minn > *s)
                *minn = *s;
        }
    }
    return fl;
}


html,body {
    font-family: Arial, Helvetica, Sans-Serif;
    font-size: 10pt;
}

html {
    background: url("https://salmaochan.org/css/salmao-chan/dots_bottom.png") bottom center repeat-x !important;
	background-color: #e9e8fd !important;
}

body {
    background: url("https://salmaochan.org/css/salmao-chan/salmao.png") top right fixed no-repeat, url("https://salmaochan.org/css/salmao-chan/dots_top.png") repeat-x !important;
}

div.post.reply.highlighted{
  box-shadow: 6px 0 2px -2px rgb(255 0 0 / 80%), -6px 0 2px -2px rgb(255 0 0 / 80%);
  background-color: white;
  color: #515151;
}

a.quick-reply-btn{
  visibility: hidden !important;
visibility: collapse !important;
}

div.post.reply{
  border: 1px solid #828fac;
  border-left: 5px solid #828fac;
  padding: 2px;
  background-color: white;
  color: #515151;
}

div.boardlist a{
  text-shadow: #000 1px 1px 1px !important;
  color: #ffffff !important;
  text-decoration: none !important;
}

div.boardlist a:hover{
  color: #515151 !important;
}

div.boardlist a:visited{
  color: #FF7800 !important; 
  text-shadow: black 0 0 2px !important;
  font-weight: bold !important;
}

div.boardlist a:visited:hover{
  color: orange !important;
}

a, a:visited, div.post.reply div.body a{
    color: #4F6DAF;
}

a:hover, a:visited:hover, div.post.reply div.body a:hover{
  border: 1px grey dashed;
  color: #899CC2 !important;
}

form table tr th{
  border: 1px solid #696969;
  font-size: 7pt;
  padding: 0 5px;
  line-height: 20px;
  background: #ffffff;
  color: #696969;
}

h1, h2, h3, h4, div.ban h2{
clear: both;
    text-align: center;
    font-size: 25pt;
    color: white;
    text-shadow: #928fac 1px -1px 1px, #928fac -1px 1px 1px, #928fac -1px -1px 1px, #928fac 1px 1px 1px;
    width: 100%;
}

div.subtitle{
    color: white !important;
    text-shadow: #928fac 1px -1px 1px, #928fac -1px 1px 1px, #928fac -1px -1px 1px, #928fac 1px 1px 1px;
    width: 100%;
}

.boardlist{
  position: absolute!important;
  background: none !important;
  border: none !important;
  box-shadow: none !important;
}

.theme-catalog div.grid-size-small, .theme-catalog div.grid-size-small:hover{
  background: transparent;
  border: 1px grey dashed;
}

.theme-catalog div.threads {
    text-align: center;
    margin-left: 10px;
}

Лозинки Problem 1 (3 / 3) 
Потребно е да се симулира најава на еден систем. Притоа корисникот внесува корисничко име и лозинка. Доколку корисничкото име одговара со лозинката тогаш се печати Najaven, доколку не одговара се печати Nenajaven и на корисникот му се дава повторна шанса на корисникот да внесе корисничко име и лозинка. Во моментот кога корисникот ќе биде најавен престануваат обидите за најава.
 
Влез: Прво се дава број N на кориснички имиња и лозинки кои ќе бидат внесени во системот. Во наредните N реда се дадени корисничките имиња и лозинки разделени со едно празно место. Потоа се даваат редови со кориснички имиња и лозинки на корисници кои се обидувата да се најават (Пр. ana banana) За означување на крај на обидите во редицата се дава зборот KRAJ
 
Излез: За секој од влезовите кои се обид за најава се печати Nenajaven се додека не дoбиеме Najaven или додека имаме обиди за најава.
 
Пример. Влез: 3 ana banana pero zdero trpe trpi ana ana ana banana trpe trpi KRAJ
 
Излез: Nenajaven Najaven
 
Забелешка: Работете со хеш табела со затворени кофички. Самите решавате за големината на хеш табела, а хеш функцијата ви е дадена.
 
Име на класа: Lozinki
 
 
// 1
 
/*import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.Hashtable;
 
public class Lozinki {
    public static void main (String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        
        Hashtable<String, String> map = new Hashtable<>();
        for(int i=1;i<=N;i++){
            String imelozinka = br.readLine();
            String[] pom = imelozinka.split(" ");
            String name = pom[0];
            String password = pom[1];
            map.put(name, password);
        }
        
        while (true) {
            String line = br.readLine();
            if (line.equals("KRAJ"))
                break;
            String parts[] = line.split(" ");
            String name = parts[0];
            String password = parts[1];
            if (map.containsKey(name)) {
                if (map.get(name).equals(password)) {
                    System.out.println("Najaven");
                    break;
                }
                else 
                    System.out.println("Nenajaven");
            }
            else 
                System.out.println("Nenajaven");
        }
        
        
    }
}*/
 
 
// 2
 
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
 
 
public class Lozinki {
    public static void main (String[] args) throws IOException {
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        int N = Integer.parseInt(br.readLine());
        
        
        CBHT<String,String> table = new CBHT<>(2*N);
        for(int i=1;i<=N;i++){
            String imelozinka = br.readLine();
            String[] pom = imelozinka.split(" ");
            table.insert(pom[0], pom[1]);
        }
        
        while (true) {
            String line = br.readLine();
            if (line.equals("KRAJ"))
                break;
            String parts [] = line.split(" ");
            SLLNode<MapEntry<String,String>> temp = table.search(parts[0]);
            if (temp == null || !(temp.getElement().value.equals(parts[1])))
                System.out.println("Nenajaven");
            else {
                System.out.println("Najaven");
                break;
            }
            
        }
        
    }
}
 
class CBHT<K extends Comparable<K>,E> {
    
    private SLLNode<MapEntry<K,E>>[] buckets;
 
    @SuppressWarnings("unchecked")
    public CBHT(int m) {
        
        buckets = (SLLNode<MapEntry<K,E>>[]) new SLLNode[m];
    }
    
    private int hash(K key) {
        // Translate key to an index of the array buckets.
        return Math.abs(key.hashCode()) % buckets.length;
    }
    
    public SLLNode<MapEntry<K,E>> search(K targetKey) {
        // Find which if any node of this CBHT contains an entry whose key is
        // equal
        // to targetKey. Return a link to that node (or null if there is none).
        int b = hash(targetKey);
        SLLNode<MapEntry<K,E>> curr = buckets[b];
        for (; curr != null; curr = curr.succ) {
            if (targetKey.equals(curr.getElement().key)) {
                return curr;
            }
        }
        return null;
        
    }
    
    public void insert(K key, E value) {
        
        MapEntry<K,E> newEntry = new MapEntry<K,E>(key, value);
        int b = hash(key);
        SLLNode<MapEntry<K,E>> curr = buckets[b];
        for (; curr != null; curr = curr.succ) {
            if (key.equals(curr.getElement().key)) {
                curr.setElement(newEntry);
                return;
            }
        }
        buckets[b] = new SLLNode<MapEntry<K,E>>(newEntry, buckets[b]);
    }
    
    public void delete (K key) {
        // Delete the entry (if any) whose key is equal to key from this CBHT.
        int b = hash(key);
        SLLNode<MapEntry<K,E>> pred = null, curr = buckets[b];
        for (; curr != null; pred = curr, curr = curr.succ) {
            if (key.equals(curr.getElement().key)) {
                if (pred == null)
                    buckets[b] = curr.succ;
                else
                    pred.succ = curr.succ;                  
                return;
            }
        }
    }
    
    public String toString() {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            for (SLLNode<MapEntry<K,E>> curr = buckets[i]; curr != null; curr = curr.succ) {
                temp += curr.getElement().toString() + " ";
            }
            temp += "\n";
        }
        return temp;
    }
 
}
 
class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {
    
    K key;
    E value;
    
    public MapEntry(K key, E value) {
        this.key = key;
        this.value = value;
    }
    
    @Override
    public int compareTo(K that) {
        return this.key.compareTo(that);
    }
    
    @Override 
    public String toString () {
        return "<" + key + "," + value + ">";
    }
}
 
class SLLNode<E> {
 
    private E element;
    public SLLNode<E> succ;
    
    public SLLNode(E element, SLLNode<E> succ) {
        this.setElement(element);
        this.succ = succ;
    }
    
    @Override
    public String toString() {
        return getElement().toString();
    }
 
    public E getElement() {
        return element;
    }
 
    public void setElement(E element) {
        this.element = element;
    }
 
}
 
Sample input
3
ana banana
pero zdero
trpe trpi
ana ana
ana bannana
trpe trpe
KRAJ
Sample output
Nenajaven
Nenajaven
Nenajaven

# Import the required libraries
import homeassistant.components.thermostat as thermostat

# Set up the American Standard thermostat
thermostat.setup(hass, 'thermostat.american_standard', {
  'username': 'my_username',
  'password': 'my_password',
  'device_id': 'my_device_id'
})

# Set the initial state of the thermostat
thermostat.set_temperature(hass, 'thermostat.american_standard', 72)
thermostat.set_hvac_mode(hass, 'thermostat.american_standard', 'cool')

# Define a function to handle temperature changes
def temperature_changed(entity, old_state, new_state):
  new_temperature = new_state.attributes.get('temperature')

  # Set the temperature on the American Standard thermostat
  thermostat.set_temperature(hass, 'thermostat.american_standard', new_temperature)

# Listen for changes to the temperature
hass.states.listen('sensor.temperature', temperature_changed)


{"Copy":[],"Skilltree":{"Gate of View":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Gate of View"},"Demon Flip":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Demon Flip"},"Dynamic Entry":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Dynamic Entry"},"Gate of Limit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Gate of Limit"},"Substitution":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Substitution"},"Leaf Rising Wind":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Leaf Rising Wind"},"Dosaku":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Dosaku"},"Genjutsu":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"Eight Gates":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Eight Gates"},"Hemorrhage":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Hemorrhage"},"Ketsuryugan":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ketsuryugan"},"Leaf Whirlwind":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Leaf Whirlwind"},"1000 Years of Death":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"1000 Years of Death"},"Primary Lotus":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Primary Lotus"}},"Stats":{"kek":{"ObjectValue":"14","ObjectClass":"IntValue","ObjectName":"kek"},"Village":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"Village"},"ParentID":{"ObjectValue":"yameii(14)1772970","ObjectClass":"StringValue","ObjectName":"ParentID"},"startnewlife":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"startnewlife"},"MaxAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxAge"},"KillStreak":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"KillStreak"},"LastStomach":{"ObjectValue":"431","ObjectClass":"IntValue","ObjectName":"LastStomach"},"Key3":{"ObjectValue":"3","ObjectClass":"StringValue","ObjectName":"Key3"},"Key1":{"ObjectValue":"1","ObjectClass":"StringValue","ObjectName":"Key1"},"Key5":{"ObjectValue":"5","ObjectClass":"StringValue","ObjectName":"Key5"},"MissionSuccess":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MissionSuccess"},"WeaveSpeed":{"ObjectValue":"20","ObjectClass":"IntValue","ObjectName":"WeaveSpeed"},"Ryo":{"ObjectValue":"91","ObjectClass":"IntValue","ObjectName":"Ryo"},"ToggleAccessories":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ToggleAccessories"},"KPos":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"KPos"},"DateRecord":{"ObjectValue":"3430","ObjectClass":"IntValue","ObjectName":"DateRecord"},"SecondaryCN":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"SecondaryCN"},"Key4":{"ObjectValue":"4","ObjectClass":"StringValue","ObjectName":"Key4"},"Slot1":{"ObjectValue":"Primary Lotus","ObjectClass":"StringValue","ObjectName":"Slot1"},"EyeColorB":{"ObjectValue":"194","ObjectClass":"IntValue","ObjectName":"EyeColorB"},"Slot2":{"ObjectValue":"Dosaku","ObjectClass":"StringValue","ObjectName":"Slot2"},"Trauma":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Trauma"},"ResetPos":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ResetPos"},"Key6":{"ObjectValue":"6","ObjectClass":"StringValue","ObjectName":"Key6"},"CurrentWep":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CurrentWep"},"SpentSkillPoints":{"ObjectValue":"-16","ObjectClass":"IntValue","ObjectName":"SpentSkillPoints"},"Slot5":{"ObjectValue":"Demon Flip","ObjectClass":"StringValue","ObjectName":"Slot5"},"Blindness":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blindness"},"Slot3":{"ObjectValue":"Hemorrhage","ObjectClass":"StringValue","ObjectName":"Slot3"},"RightEye":{"ObjectValue":"Ketsuryugan","ObjectClass":"StringValue","ObjectName":"RightEye"},"SkillPoints":{"ObjectValue":"16","ObjectClass":"IntValue","ObjectName":"SkillPoints"},"mapmove1":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"mapmove1"},"PrimaryAmmo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PrimaryAmmo"},"Slot10":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot10"},"HairColorG":{"ObjectValue":"91","ObjectClass":"IntValue","ObjectName":"HairColorG"},"Name":{"ObjectValue":"Max","ObjectClass":"StringValue","ObjectName":"Name"},"MaxTails":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxTails"},"RU":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RU"},"Elo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Elo"},"TailedBeastEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastEXP"},"MaxRank":{"ObjectValue":"24","ObjectClass":"IntValue","ObjectName":"MaxRank"},"Slot7":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot7"},"PosX":{"ObjectValue":"3586","ObjectClass":"IntValue","ObjectName":"PosX"},"LastChakra":{"ObjectValue":"930","ObjectClass":"IntValue","ObjectName":"LastChakra"},"LastHealth":{"ObjectValue":"326","ObjectClass":"IntValue","ObjectName":"LastHealth"},"OriginalVillage":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"OriginalVillage"},"WeaponSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"WeaponSave"},"TimesRerolled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TimesRerolled"},"Key12":{"ObjectValue":"=","ObjectClass":"StringValue","ObjectName":"Key12"},"ItemSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ItemSave"},"Age":{"ObjectValue":"11","ObjectClass":"IntValue","ObjectName":"Age"},"LastKilledUser":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastKilledUser"},"TailedBeast":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeast"},"CColorB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorB"},"RESTORE":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RESTORE"},"AgeLimit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AgeLimit"},"WipeLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"WipeLog"},"FamilyID":{"ObjectValue":"Max(14)186002","ObjectClass":"StringValue","ObjectName":"FamilyID"},"Mastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mastered"},"Slot4":{"ObjectValue":"Leaf Whirlwind","ObjectClass":"StringValue","ObjectName":"Slot4"},"AwakenCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AwakenCD"},"Parentq":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Parentq"},"Key11":{"ObjectValue":"z","ObjectClass":"StringValue","ObjectName":"Key11"},"Scar":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Scar"},"LastAge":{"ObjectValue":"1671060439","ObjectClass":"IntValue","ObjectName":"LastAge"},"Slot0":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot0"},"Mangekyo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mangekyo"},"TrainingEXP":{"ObjectValue":"1145","ObjectClass":"IntValue","ObjectName":"TrainingEXP"},"DefaultMouth":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"DefaultMouth"},"CloakTime":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CloakTime"},"Key8":{"ObjectValue":"8","ObjectClass":"StringValue","ObjectName":"Key8"},"RP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RP"},"BijuuXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuXP"},"Slot12":{"ObjectValue":"Eight Gates","ObjectClass":"StringValue","ObjectName":"Slot12"},"Kids":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Kids"},"Deaths":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Deaths"},"berserkcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"berserkcheck"},"HairColorB":{"ObjectValue":"79","ObjectClass":"IntValue","ObjectName":"HairColorB"},"RaidCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RaidCD"},"Slot6":{"ObjectValue":"Leaf Rising Wind","ObjectClass":"StringValue","ObjectName":"Slot6"},"PrimaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"PrimaryWep"},"RecentTrainings":{"ObjectValue":"[\"Pushup Training\",\"Kunai Training\",\"Block Training\"]","ObjectClass":"StringValue","ObjectName":"RecentTrainings"},"BerserkTimes":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BerserkTimes"},"GrandParentID":{"ObjectValue":"Sad(40)855519","ObjectClass":"StringValue","ObjectName":"GrandParentID"},"Slot=":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot="},"Ken":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ken"},"BijuuConvo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuConvo"},"Slot-":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot-"},"CColorR":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorR"},"Version":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Version"},"SPR":{"ObjectValue":"12","ObjectClass":"IntValue","ObjectName":"SPR"},"TailedBeastMastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastMastered"},"BonusSkillPoints":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BonusSkillPoints"},"SkinColor":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"SkinColor"},"RyoRES":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RyoRES"},"Slot9":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot9"},"SeenDeaths":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SeenDeaths"},"PosY":{"ObjectValue":"158","ObjectClass":"IntValue","ObjectName":"PosY"},"PosZ":{"ObjectValue":"3044","ObjectClass":"IntValue","ObjectName":"PosZ"},"HandsignTraining":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HandsignTraining"},"Genjutsu":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"BDAYS":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"BDAYS"},"CurseMarkEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkEXP"},"CurseMarkLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkLevel"},"bald":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"bald"},"Key9":{"ObjectValue":"9","ObjectClass":"StringValue","ObjectName":"Key9"},"ChakraArmorRGB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ChakraArmorRGB"},"SecondaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"SecondaryWep"},"GripCount":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"GripCount"},"EyeColorR":{"ObjectValue":"136","ObjectClass":"IntValue","ObjectName":"EyeColorR"},"UnlockedCloak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"UnlockedCloak"},"Rank":{"ObjectValue":"15","ObjectClass":"IntValue","ObjectName":"Rank"},"MissionEXP":{"ObjectValue":"322","ObjectClass":"IntValue","ObjectName":"MissionEXP"},"Slot11":{"ObjectValue":"Genjutsu","ObjectClass":"StringValue","ObjectName":"Slot11"},"LastGripped":{"ObjectValue":"45920680","ObjectClass":"IntValue","ObjectName":"LastGripped"},"HideName":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HideName"},"HBChoice":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"HBChoice"},"Prestige":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Prestige"},"PrimaryCN":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"PrimaryCN"},"Key2":{"ObjectValue":"2","ObjectClass":"StringValue","ObjectName":"Key2"},"Slot8":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot8"},"Title":{"ObjectValue":"Chuunin","ObjectClass":"StringValue","ObjectName":"Title"},"Influence":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Influence"},"jincooldown":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"jincooldown"},"logcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"logcheck"},"LINDAMINISTARTUP":{"ObjectValue":"9","ObjectClass":"IntValue","ObjectName":"LINDAMINISTARTUP"},"HairColorR":{"ObjectValue":"107","ObjectClass":"IntValue","ObjectName":"HairColorR"},"CombatEXP":{"ObjectValue":"-110","ObjectClass":"IntValue","ObjectName":"CombatEXP"},"AnbuLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AnbuLog"},"BijuuSealed":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuSealed"},"Key7":{"ObjectValue":"7","ObjectClass":"StringValue","ObjectName":"Key7"},"TailedBeastLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastLevel"},"SwordSave":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SwordSave"},"PDLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PDLog"},"LeftEye":{"ObjectValue":"Ketsuryugan","ObjectClass":"StringValue","ObjectName":"LeftEye"},"EyeColorG":{"ObjectValue":"50","ObjectClass":"IntValue","ObjectName":"EyeColorG"},"Gender":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Gender"},"CColorG":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorG"},"CanRank":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CanRank"},"IsExiled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"IsExiled"},"Marking":{"ObjectValue":"69","ObjectClass":"IntValue","ObjectName":"Marking"},"SecondaryAmmo":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"SecondaryAmmo"},"Key10":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"Key10"},"BijuuRelation":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuRelation"},"Blind":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blind"},"Personality":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Personality"}}}

#include <iostream>
#include <string>
#include <cmath>
#include <iomanip>
#include <limits>

int checkForBadFormat(std::string);
double fact(double);
double E(double, double);
double sec(double, double);
void printStr(double, double);

std::string modifyString(std::string);

int main() {
	setlocale(LC_CTYPE, "Russian");

	std::string tempString;

	double absError = 0;
	double xMin = 1.7;
	double xMax = 1.7;
	double step = 0;
	double xIdeal = 1.7;


	do {
		std::cout << "Введите точность E от 10^(-7) до 10^(-1): ";
		std::cin >> tempString;

		if (modifyString(tempString).size() != 0) {
			absError = std::stod(modifyString(tempString));
		}
		else {
			std::cout << "Введите корректное значение!\n";

			continue;
		}

		if (absError < pow(10, -7) || absError > pow(10, -1) || checkForBadFormat(tempString)) {
			std::cout << "Введите корректное значение!\n";
		}

	} while (absError < pow(10, -7) || absError > pow(10, -1) || checkForBadFormat(tempString));

	do {
		std::cout << "Введите x_start: ";
		std::cin >> tempString;

		if (modifyString(tempString).size() != 0) {
			xMin = std::stod(modifyString(tempString));
		}
		else {
			std::cout << "Введите корректное значение!\n";

			continue;
		}

		if (xMin < -1.57 || xMin > 1.57 || checkForBadFormat(tempString)) {
			std::cout << "Введите корректное значение!\n";
		}

	} while (xMin < -1.57 || xMin > 1.57 || checkForBadFormat(tempString));

	do {
		std::cout << "Введите xEnd: ";
		std::cin >> tempString;

		if (modifyString(tempString).size() != 0) {
			xMax = std::stod(modifyString(tempString));
		}
		else {
			std::cout << "Введите корректное значение!\n";

			continue;
		}

		if (xMax < -1.57 || xMax > 1.57 || checkForBadFormat(tempString)) {
			std::cout << "Введите корректное значение!\n";
		}

	} while (xMax < -1.57 || xMax > 1.57 || checkForBadFormat(tempString));

	bool flag = false;

	do {
		std::cout << "Введите шаг: ";
		std::cin >> tempString;


		if (modifyString(tempString).size() != 0) {
			step = std::stod(modifyString(tempString));
			flag = false;
		}
		else {
			std::cout << "Введите корректное значение!\n";
			flag = true;
			continue;
		}


		if (flag || (std::fabs(xMax - xMin) >= std::numeric_limits<double>::epsilon() && std::fabs(step) < std::numeric_limits<double>::epsilon()) || (step < 0 && xMin < xMax) || (step > 0 && xMin > xMax) || checkForBadFormat(tempString)) {
			std::cout << "Введите корректное значение!\n";
		}

	} while (flag || (std::fabs(xMax - xMin) >= std::numeric_limits<double>::epsilon() && std::fabs(step) < std::numeric_limits<double>::epsilon()) || (step < 0 && xMin < xMax) || (step > 0 && xMin > xMax) || checkForBadFormat(tempString));


	printf("_________________________________________________________________________________________________\n");
	printf("|           x           |         f(x)          |        F(x)           |          del          |\n");
	printf("|_______________________|_______________________|_______________________|_______________________|\n");

	bool pFlag = false;

	if (xMax > xMin) {
		for (double x = xMin; x <= xMax; x = round((x + step) * 100000000) / 100000000) {

			if (std::fabs(x - xMax) < pow(10, -7)) {
				pFlag = true;
				break;
			}

			printStr(x, absError);
		}

		if (pFlag) {
			printStr(xMax, absError);
		}
	}
	else {
		for (double x = xMin; x >= xMax; x = round((x + step) * 100000000) / 100000000) {
			if (std::fabs(x - xMax) < pow(10, -7)) {
				pFlag = true;
				break;
			}
			std::cout << "oao" << std::endl;

			printStr(x, absError);
		}
		if (pFlag) {
			printStr(xMax, absError);
		}
	}


	std::cout << "\n\n";

	do {
		std::cout << "Введите Xideal: ";
		std::cin >> tempString;

		if (modifyString(tempString).size() != 0 && !checkForBadFormat(tempString)) {
			xIdeal = std::stod(modifyString(tempString));
		}
		else {
			std::cout << "Введите корректное значение!\n";

			continue;
		}

	} while (xIdeal < -1.6 || xIdeal >= 1.6 || checkForBadFormat(tempString));

	double systemAnswer = 1 / cos(xIdeal);

	printf("_________________________________________________________________________________________________\n");
	printf("|           e           |         f(x)          |        F(x)           |          del          |\n");
	printf("|_______________________|_______________________|_______________________|_______________________|\n");
	for (double i = 0.1; i > 0.0000001; i /= 10)
	{
		printf("| %-15.7f       | %-15.6f       | %-15.6f       | %-15.6f       |\n", i, sec(xIdeal, i), systemAnswer, sqrt(fabs(sec(xIdeal, i) * sec(xIdeal, i) - systemAnswer * systemAnswer)));
		printf("|_______________________|_______________________|_______________________|_______________________|\n");
	}
}

int checkForBadFormat(std::string a) {
	return a[0] == '.' || (a[0] == '-' && a[1] == '.');
}

double fact(double N)
{
	if (N < 0)
		return 0;
	if (N == 0)
		return 1;
	else
		return N * fact(N - 1);
}

double E(double n, double absError) {
	double res = std::pow(2, 2 * n + 2) * fact(2 * n) / std::pow(atan(1) * 4, 2 * n + 1);
	double summ = 0;
	double la = 0, a = 0;

	int k = 0;
	while (true) {
		la = a;
		a = pow(-1, k % 2) / pow(2 * k + 1, 2 * n + 1);
		if (isnan(a + summ) || !isfinite(a + summ) || abs(abs(a) - abs(la)) < absError) break;
		summ += a;
		k++;
	}

	if (isnan(summ * res) || !isfinite(summ * res)) return 1;

	return summ * res;
}

double sec(double x, double absError) {
	double pi = atan(1) * 4;
	double summ = E(0, absError);
	double last_a = 0, a = E(0, absError);
	double n = 1;

	do {
		last_a = a;
		a *= fabs(E(n, absError) / E(n - 1, absError)) * x * x /
			static_cast<double>(2 * n) / static_cast<double>(2 * n - 1);
		summ += a;
		++n;
	} while (absError <= fabs(fabs(a) - fabs(last_a)));

	return summ;
}

std::string modifyString(const std::string st) {
	std::string newStr = "";

	for (size_t i = 0; i < st.size(); i++) {
		if ((st[i] >= '0' && st[i] <= '9') || st[i] == '.' || st[i] == '-') {
			newStr += st[i];
		}
		else {
			return "";
		}
	}

	if (newStr == "." || newStr == "-") {
		return "";
	}

	return newStr;
}

void printStr(double x, double absError) {
	double systemAnswer = 1 / cos(x);

	printf("| %-15f       | %-15f       | %-15f       | %-15f       |\n", x, sec(x, absError), systemAnswer, sqrt(fabs(sec(x, absError) * sec(x, absError) - systemAnswer * systemAnswer)));
	printf("|_______________________|_______________________|_______________________|_______________________|\n");
}


/** Fix JKIT conflict with Dynamic Visibility for Elementor plugin */
function enqueue_dce_visibility_script() {
	wp_enqueue_script( 'dce-visibility' );
}
add_action( 'wp_enqueue_scripts', 'enqueue_dce_visibility_script' );

local TS = game:GetService("TeleportService")
local TweenService = game:GetService("TweenService")
local placeId = "6476627996" -- Enter a second Id Place.
local leaveGuiEvent = game.ReplicatedStorage.LeaveGuiEvent
local TransitionEvent = game.ReplicatedStorage.TransitionEvent
local list = {}
local billboard = script.Parent.billboardPart.billboardGui
local timer
local teleporting = false
local spawnTeleport = script.Parent.spawn
local MinPlayers = 2
local Bus = script.Parent.Parent.Bus
local Seats = Bus.Seats
local Debounce = false

local function updateGui()
	billboard.Frame.players.Text = "Players: " ..#list.. "/12" -- Change the number 16 according to the Max Player who want to be teleported.
end

local function removeFromList(character)
	for i=1,#list do
		if list[i] == character.Name then
			table.remove(list,i)
			updateGui()
		end
	end
end

local function teleportPlayers()
	if #list >= MinPlayers then
		billboard.Frame.Status.Text = "TELEPORTING"
		billboard.Frame.Status.TextColor3 = Color3.fromRGB(255, 0, 0)
		local playersToTeleport = {}
		local teleportTime = 0
		for i=1,#list do
			if game.Players:findFirstChild(list[i]) then
				table.insert(playersToTeleport,game.Players:findFirstChild(list[i]))
				TransitionEvent:FireClient(game.Players:findFirstChild(list[i]))
			else
				table.remove(list,i)	
			end
		end 
		local code = TS:ReserveServer(placeId)
		teleporting = true
		TS:TeleportToPrivateServer(placeId,code,playersToTeleport)
		repeat wait() until #list <= 0
		billboard.Frame.Status.Text = "START"
		billboard.Frame.Status.TextColor3 = Color3.fromRGB(255, 0, 0)
		teleporting = false
	elseif #list < MinPlayers then
		billboard.Frame.players.Text = MinPlayers.."Players Needed!"
		wait(1)
		billboard.Frame.players.Text = "Players: "..#list.."/12"
	end
end

script.Parent.Gate.Touched:Connect(function(hit)
	if hit.Parent:findFirstChild("Humanoid") then
		if teleporting == false then
			local char = hit.Parent
			local player = game.Players:FindFirstChild(char.Name)
			local alreadyExists = false
			
			for i=1,#list do
				if list[i] == char.Name then
					alreadyExists = true
				end
			end
			
			if alreadyExists == false then
				if #list < 12 then -- Many Players have been teleported.
					table.insert(list,char.Name)
					char.PrimaryPart.CFrame = spawnTeleport.CFrame
					if Debounce == false then end
					local player = game.Players:GetPlayerFromCharacter(hit.Parent)
					for i, v in pairs(Seats) do
						if Seats.Occupant == nil then
							local Check = Instance.new("Weld")
							Check.Name = "Check"
							Check.Parent = player.Character
							Check.Parent.Humanoid.JumpPower = 0
							Check.Parent.Humanoid.WalkSpeed = 0
						end
					end
					Seats[math.random(1, #Seats)]:Sit(player.Character.Humanoid)
					game.ServerStorage.ExitGui:Clone().Parent = player.PlayerGui
					updateGui()
					leaveGuiEvent:FireClient(player)
				end
				
				
				player.CharacterRemoving:connect(function(character)
					removeFromList(character)
				end)
			end
			
		end
	end
end)

leaveGuiEvent.OnServerEvent:Connect(function(player)
	player:LoadCharacter()
end)

while wait() do
	timer = 31
	for i=1,timer do
		timer = timer - 1
		billboard.Frame.time.Text = timer
		wait(1)
	end
	teleportPlayers()
end

SELECT
	DATE(paymentDateTime) paymentDate,
  COUNT(DISTINCT userID) usersWithFirstSubsPaymentCount

FROM
  payments

WHERE 
  paymentNewUpgradeRenewal = 2
  AND paymentPeriod IN (1,12)
	AND paymentStatus = 1 
  AND userID IS NOT NULL

GROUP BY
	paymentDate
	

ORDER BY 
	paymentDate DESC


{"Copy":[],"Skilltree":{"Crystal Blade":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Crystal Blade"},"Substitution":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Substitution"},"Crystal Prison":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Crystal Prison"},"Rock Gun":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Rock Gun"},"Crystal Command":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Crystal Command"},"Crystal Crossing":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Crystal Crossing"},"Earth Pillar":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Earth Pillar"},"Earth Dragon Bomb":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Earth Dragon Bomb"}},"Stats":{"kek":{"ObjectValue":"18","ObjectClass":"IntValue","ObjectName":"kek"},"ChakraArmorRGB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ChakraArmorRGB"},"AnbuLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AnbuLog"},"Slot8":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot8"},"Title":{"ObjectValue":"Academy Student","ObjectClass":"StringValue","ObjectName":"Title"},"Influence":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Influence"},"Key5":{"ObjectValue":"5","ObjectClass":"StringValue","ObjectName":"Key5"},"MissionSuccess":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MissionSuccess"},"ParentID":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ParentID"},"Deaths":{"ObjectValue":"3","ObjectClass":"IntValue","ObjectName":"Deaths"},"startnewlife":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"startnewlife"},"LastStomach":{"ObjectValue":"86","ObjectClass":"IntValue","ObjectName":"LastStomach"},"MaxAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxAge"},"KillStreak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"KillStreak"},"Key3":{"ObjectValue":"3","ObjectClass":"StringValue","ObjectName":"Key3"},"Key1":{"ObjectValue":"1","ObjectClass":"StringValue","ObjectName":"Key1"},"Key8":{"ObjectValue":"8","ObjectClass":"StringValue","ObjectName":"Key8"},"WeaveSpeed":{"ObjectValue":"20","ObjectClass":"IntValue","ObjectName":"WeaveSpeed"},"Slot1":{"ObjectValue":"Crystal Blade","ObjectClass":"StringValue","ObjectName":"Slot1"},"EyeColorB":{"ObjectValue":"248","ObjectClass":"IntValue","ObjectName":"EyeColorB"},"Ryo":{"ObjectValue":"8","ObjectClass":"IntValue","ObjectName":"Ryo"},"CurrentWep":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CurrentWep"},"SpentSkillPoints":{"ObjectValue":"-8","ObjectClass":"IntValue","ObjectName":"SpentSkillPoints"},"BerserkTimes":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BerserkTimes"},"Slot5":{"ObjectValue":"Earth Pillar","ObjectClass":"StringValue","ObjectName":"Slot5"},"Blindness":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blindness"},"Slot3":{"ObjectValue":"Crystal Prison","ObjectClass":"StringValue","ObjectName":"Slot3"},"PosX":{"ObjectValue":"685","ObjectClass":"IntValue","ObjectName":"PosX"},"LastChakra":{"ObjectValue":"373","ObjectClass":"IntValue","ObjectName":"LastChakra"},"Slot7":{"ObjectValue":"Earth Dragon Bomb","ObjectClass":"StringValue","ObjectName":"Slot7"},"RightEye":{"ObjectValue":"Default","ObjectClass":"StringValue","ObjectName":"RightEye"},"SkillPoints":{"ObjectValue":"8","ObjectClass":"IntValue","ObjectName":"SkillPoints"},"mapmove1":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"mapmove1"},"PrimaryAmmo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PrimaryAmmo"},"HairColorG":{"ObjectValue":"124","ObjectClass":"IntValue","ObjectName":"HairColorG"},"Slot10":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot10"},"Name":{"ObjectValue":"MEEZY","ObjectClass":"StringValue","ObjectName":"Name"},"MaxTails":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"MaxTails"},"RU":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RU"},"SecondaryCN":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"SecondaryCN"},"Key4":{"ObjectValue":"4","ObjectClass":"StringValue","ObjectName":"Key4"},"Village":{"ObjectValue":"6","ObjectClass":"IntValue","ObjectName":"Village"},"LastHealth":{"ObjectValue":"118","ObjectClass":"IntValue","ObjectName":"LastHealth"},"OriginalVillage":{"ObjectValue":"6","ObjectClass":"IntValue","ObjectName":"OriginalVillage"},"WeaponSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"WeaponSave"},"TimesRerolled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TimesRerolled"},"Slot=":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot="},"Ken":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Ken"},"GrandParentID":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"GrandParentID"},"Age":{"ObjectValue":"14","ObjectClass":"IntValue","ObjectName":"Age"},"LastKilledUser":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastKilledUser"},"TailedBeast":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeast"},"CColorB":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorB"},"RESTORE":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RESTORE"},"Elo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Elo"},"MaxRank":{"ObjectValue":"24","ObjectClass":"IntValue","ObjectName":"MaxRank"},"TailedBeastEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastEXP"},"BijuuSealed":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuSealed"},"AgeLimit":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AgeLimit"},"WipeLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"WipeLog"},"FamilyID":{"ObjectValue":"MEEZY(18)1875443","ObjectClass":"StringValue","ObjectName":"FamilyID"},"Mastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mastered"},"Slot4":{"ObjectValue":"Crystal Command","ObjectClass":"StringValue","ObjectName":"Slot4"},"AwakenCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"AwakenCD"},"Key10":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"Key10"},"BijuuRelation":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuRelation"},"SecondaryAmmo":{"ObjectValue":"10","ObjectClass":"IntValue","ObjectName":"SecondaryAmmo"},"Scar":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Scar"},"LastAge":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"LastAge"},"Slot0":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot0"},"Mangekyo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Mangekyo"},"BonusSkillPoints":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BonusSkillPoints"},"TailedBeastMastered":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastMastered"},"DefaultMouth":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"DefaultMouth"},"TrainingEXP":{"ObjectValue":"100","ObjectClass":"IntValue","ObjectName":"TrainingEXP"},"CloakTime":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CloakTime"},"RP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RP"},"BijuuXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuXP"},"Slot12":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot12"},"Kids":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Kids"},"berserkcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"berserkcheck"},"HairColorB":{"ObjectValue":"151","ObjectClass":"IntValue","ObjectName":"HairColorB"},"RaidCD":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RaidCD"},"Slot6":{"ObjectValue":"Rock Gun","ObjectClass":"StringValue","ObjectName":"Slot6"},"PrimaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"PrimaryWep"},"RecentTrainings":{"ObjectValue":"[\"Kunai Training\",\"Kunai Training\",\"Kunai Training\"]","ObjectClass":"StringValue","ObjectName":"RecentTrainings"},"Key9":{"ObjectValue":"9","ObjectClass":"StringValue","ObjectName":"Key9"},"SecondaryWep":{"ObjectValue":"Kunai","ObjectClass":"StringValue","ObjectName":"SecondaryWep"},"GripCount":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"GripCount"},"EyeColorR":{"ObjectValue":"103","ObjectClass":"IntValue","ObjectName":"EyeColorR"},"bald":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"bald"},"logcheck":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"logcheck"},"LINDAMINISTARTUP":{"ObjectValue":"9","ObjectClass":"IntValue","ObjectName":"LINDAMINISTARTUP"},"HairColorR":{"ObjectValue":"104","ObjectClass":"IntValue","ObjectName":"HairColorR"},"CombatEXP":{"ObjectValue":"-122","ObjectClass":"IntValue","ObjectName":"CombatEXP"},"jincooldown":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"jincooldown"},"BijuuConvo":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"BijuuConvo"},"Slot-":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot-"},"CColorR":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorR"},"Version":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Version"},"SPR":{"ObjectValue":"12","ObjectClass":"IntValue","ObjectName":"SPR"},"SkinColor":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"SkinColor"},"RyoRES":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"RyoRES"},"Slot9":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot9"},"SeenDeaths":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SeenDeaths"},"HandsignTraining":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"HandsignTraining"},"Genjutsu":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Genjutsu"},"BDAYS":{"ObjectValue":"0","ObjectClass":"StringValue","ObjectName":"BDAYS"},"CurseMarkEXP":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkEXP"},"CurseMarkLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CurseMarkLevel"},"KPos":{"ObjectValue":"2","ObjectClass":"IntValue","ObjectName":"KPos"},"DateRecord":{"ObjectValue":"2349","ObjectClass":"IntValue","ObjectName":"DateRecord"},"UnlockedCloak":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"UnlockedCloak"},"PosY":{"ObjectValue":"880","ObjectClass":"IntValue","ObjectName":"PosY"},"PosZ":{"ObjectValue":"1554","ObjectClass":"IntValue","ObjectName":"PosZ"},"Rank":{"ObjectValue":"7","ObjectClass":"IntValue","ObjectName":"Rank"},"MissionEXP":{"ObjectValue":"17","ObjectClass":"IntValue","ObjectName":"MissionEXP"},"Slot11":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"Slot11"},"Personality":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Personality"},"Parentq":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Parentq"},"Key11":{"ObjectValue":"-","ObjectClass":"StringValue","ObjectName":"Key11"},"ToggleAccessories":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"ToggleAccessories"},"LastGripped":{"ObjectValue":"142229086","ObjectClass":"IntValue","ObjectName":"LastGripped"},"HideName":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"HideName"},"HBChoice":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"HBChoice"},"Prestige":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Prestige"},"PrimaryCN":{"ObjectValue":"5","ObjectClass":"IntValue","ObjectName":"PrimaryCN"},"Trauma":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"Trauma"},"ResetPos":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"ResetPos"},"Key6":{"ObjectValue":"6","ObjectClass":"StringValue","ObjectName":"Key6"},"Slot2":{"ObjectValue":"Crystal Crossing","ObjectClass":"StringValue","ObjectName":"Slot2"},"Key2":{"ObjectValue":"2","ObjectClass":"StringValue","ObjectName":"Key2"},"Key7":{"ObjectValue":"7","ObjectClass":"StringValue","ObjectName":"Key7"},"TailedBeastLevel":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"TailedBeastLevel"},"SwordSave":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"SwordSave"},"PDLog":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"PDLog"},"LeftEye":{"ObjectValue":"Default","ObjectClass":"StringValue","ObjectName":"LeftEye"},"EyeColorG":{"ObjectValue":"109","ObjectClass":"IntValue","ObjectName":"EyeColorG"},"Gender":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"Gender"},"ItemSave":{"ObjectValue":"","ObjectClass":"StringValue","ObjectName":"ItemSave"},"Key12":{"ObjectValue":"=","ObjectClass":"StringValue","ObjectName":"Key12"},"CColorG":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"CColorG"},"IsExiled":{"ObjectValue":"0","ObjectClass":"IntValue","ObjectName":"IsExiled"},"CanRank":{"ObjectValue":"1","ObjectClass":"IntValue","ObjectName":"CanRank"},"Marking":{"ObjectValue":"69","ObjectClass":"IntValue","ObjectName":"Marking"},"Blind":{"ObjectValue":"0","ObjectClass":"NumberValue","ObjectName":"Blind"}}}

#!/usr/bin/perl

use strict;
use warnings;

no warnings 'recursion';

use List::AllUtils   qw(max pairwise);

sub vec_sum  ($$) { return [pairwise {$a + $b}   @{$_[0]}, @{$_[1]}] }
sub vec_step ($$) { return [pairwise {$b <=> $a} @{$_[0]}, @{$_[1]}] }
sub point_eq ($$) { return ($_[0]->[0] == $_[1]->[0] and $_[0]->[1] == $_[1]->[1]) }

my %grid;
my $maxY = 0;

# Read in rock structure:
foreach (<>) {
    my @corners = map { [split ','] } m#(\d+,\d+)#g;

    my $pos = shift @corners;
    $grid{ $pos->[0], $pos->[1] } = '#';

    $maxY = max ($maxY, $pos->[1]);

    while (my $next = shift @corners) {
        my $delta = vec_step( $pos, $next );

        do {
            $pos = vec_sum( $pos, $delta );
            $grid{ $pos->[0], $pos->[1] } = '#';
        } until (point_eq( $pos, $next ));

        $maxY = max ($maxY, $pos->[1]);
    }
}

$maxY += 1;                         # add in space to infinite floor

my $part1;
my $placed = 0;

sub recurse_fall {
    my ($px,$py) = @_;
    my $sand = 0;

    return (0) if ($py > $maxY);

    foreach my $fall ([0,1], [-1,1], [1,1]) {
        my ($nx,$ny) = ($px + $fall->[0], $py + $fall->[1]);

        if (!$grid{$nx, $ny}) {         # place to fall
            $sand += &recurse_fall( $nx, $ny );
        }
    }

    $grid{$px, $py} = 'o';
    $part1 //= $placed if ($py == $maxY);
    $placed++;

    return ($sand + 1);
}

print "Part 2: ", &recurse_fall( 500, 0 ), "\n";
print "Part 1: $part1\n";

SELECT
  *
FROM
payments

WHERE 

  paymentType = 3
	AND productID = 2
	AND paymentDateTime > '2022-12-11'

ORDER BY
  userID,
  paymentDateTime DESC

if (File.Exists(dataFile))
            {
                using (StreamReader sr = new StreamReader(dataFile))
                {
                    string? winsString = sr.ReadLine();
                    if (winsString != null)
                    {
                        wins = Int32.Parse(winsString);
                    }

                    string? lossesString = sr.ReadLine();
                    if (lossesString != null)
                    {
                        losses = Int32.Parse(lossesString);
                    }
                }
            }
            else
            {
                MessageBox.Show("data.txt not found");
            }

Преведувач Problem 3 (2 / 5) 
Треба да изработите автоматски преведувач за зборови од анлиски јазик на македонски. Влезот се состои од парови од зборови разделени со празно место. Така прво е даден зборот на македонски, па има едно празно место, па преводот на зборот на англиски јазик Потоа на влез се добиваат странски зборови (секој во посебен ред). За излез треба да се преведат овие зборови. Доколку не е познат преводот на зборот на излез се печати "/"
 
Влез. Прво се дава број N на поими кои ќе ги содржи речникот. Потоа во наредните N реда се дадени поимите, прв на македонски, потоа на англиски. Потоа следуваат зборови на англиски (секој збор во посебен ред), кои треба да се преведат на македонски. За означување на крај во редицата се дава зборот KRAJ
 
Излез. За секој од дадените зборови на англиски во посебен ред е даден преводот на зборот на македонски. Доколку не е познат преводот на зборот се печати /
 
Забелешка. Работете со хеш табела со отворени кофички. Сами треба да го одредите бројот на кофички и хеш функцијата.
 
Име на класа: Preveduvac
 
 
import java.util.Scanner;
 
public class Preveduvac {
 
    public static void main(String[] args) {
        Scanner scan = new Scanner(System.in);
        OBHT<String, String> dictionary = new OBHT<>(151);
        
        int n = scan.nextInt();
        scan.nextLine();
        
        for (int i=0; i<n; ++i) {
            String parts[] = scan.nextLine().split(" ");
            String macedonian = parts[0];
            String english = parts[1];
            dictionary.insert(english, macedonian);
        }
        
        while (true) {
            String english = scan.nextLine();
            
            if (english.equals("KRAJ"))
                break;
            
            int index = dictionary.search(english);
            
            if (index == -1)
                System.out.println("/");
            else
                System.out.println(dictionary.getValue(index));
        }
        
    }
}
 
class OBHT<K extends Comparable<K>,E> {
    
    private MapEntry<K,E> buckets[];
    
    private static final MapEntry former = new MapEntry(null, null);
    
    private int occupancy = 0;
    
    private static final int NONE = -1;
    
    @SuppressWarnings("unchecked")
    public OBHT (int m) {
        // Construct an empty OBHT with m buckets.
            buckets = (MapEntry<K,E>[]) new MapEntry[m];
        }
    
 
    private int hash (K key) {
    // Translate key to an index of the array buckets.
        String keys = key.toString();
        int sum = 0;
        for (int i=0; i < keys.length(); ++i) 
            sum += (i * i * keys.charAt(i));
        return sum % buckets.length;
    }
    
    public E getValue(int index) {
        return buckets[index].value;
    }
    
    public int search (K targetKey) {
        // Find which if any bucket of this OBHT is occupied by an entry whose key
        // is equal to targetKey. Return the index of that bucket.
            int b = hash(targetKey); int n_search=0;
            for (;;) {
                MapEntry<K,E> oldEntry = buckets[b];
                if (oldEntry == null)
                    return NONE;
                else if (targetKey.equals(oldEntry.key))
                    return b;
                else
                {
                    b = (b + 1) % buckets.length;
                    n_search++;
                    if(n_search==buckets.length)
                        return NONE;
 
                }
            }
        }
    
    public void insert (K key, E val) {
        // Insert the entry <key, val> into this OBHT.
            MapEntry<K,E> newEntry = new MapEntry<K,E>(key, val);
            int b = hash(key); int n_search=0;
            for (;;) {
                MapEntry<K,E> oldEntry = buckets[b];
                if (oldEntry == null) {
                    if (++occupancy == buckets.length) {
                        System.out.println("Hash tabelata e polna!!!");
                    }
                    buckets[b] = newEntry;
                    return;
                }
                else if (oldEntry == former
                        || key.equals(oldEntry.key)) {
                    buckets[b] = newEntry;
                    return;
                } 
                else
                {
                    b = (b + 1) % buckets.length;
                    n_search++;
                    if(n_search==buckets.length)
                        return;
 
                }
            }
        }
    
    @SuppressWarnings("unchecked")
    public void delete (K key) {
    // Delete the entry (if any) whose key is equal to key from this OBHT.
        int b = hash(key); int n_search=0;
        for (;;) {
            MapEntry<K,E> oldEntry = buckets[b];
            if (oldEntry == null) {
 
                return;
            }
            else if (key.equals(oldEntry.key)) {
                buckets[b] = former;//(MapEntry<K,E>)former;
                return;
            } 
            else{
                b = (b + 1) % buckets.length;
                n_search++;
                if(n_search==buckets.length)
                    return;
 
            }
        }
    }
    
    public String toString () {
        String temp = "";
        for (int i = 0; i < buckets.length; i++) {
            temp += i + ":";
            if (buckets[i] == null)
                temp += "\n";
            else if (buckets[i] == former)
                temp += "former\n";
            else
                temp += buckets[i] + "\n";
        }
        return temp;
    }
 
 
    public OBHT<K,E> clone () {
        OBHT<K,E> copy = new OBHT<K,E>(buckets.length);
        for (int i = 0; i < buckets.length; i++) {
            MapEntry<K,E> e = buckets[i];
            if (e != null&&e != former)
                copy.buckets[i] = new MapEntry<K,E>(e.key, e.value);
            else
                copy.buckets[i] = e;
        }
        return copy;
    }
 
}
 
class MapEntry<K extends Comparable<K>,E> implements Comparable<K> {
    
    K key;
    E value;
    
    public MapEntry(K key, E value) {
        this.key = key;
        this.value = value;
    }
    
    @Override
    public int compareTo(K that) {
        return this.key.compareTo(that);
    }
    
    @Override 
    public String toString () {
        return "<" + key + "," + value + ">";
    }
}
 
 
Sample input
5
machka cat
kuche dog
prase pig
papagal parrot
riba fish
cat
parrot
fish
KRAJ
Sample output
machka
papagal
riba

// FORM 1
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using static System.Windows.Forms.VisualStyles.VisualStyleElement;

namespace test2
{
    public partial class Form1 : Form
    {
        public Form1()
        {
            InitializeComponent();
        }

        private void comboBox1_SelectedIndexChanged(object sender, EventArgs e)
        {

        }

        private void button1_Click(object sender, EventArgs e)
        {

            textBox1.Text = ("New User");

        }
private void textBox2_TextChanged(object sender, EventArgs e)
        {

        }

        private void button2_Click(object sender, EventArgs e)
        {
            listBox1.Items.Add(textBox1.Text);
            listBox1.Items.Add(textBox2.Text);
            listBox1.Items.Add(textBox3.Text);
            listBox1.Items.Add(comboBox1.Text);
            listBox1.Items.Add(comboBox2.Text);

        }

        private void button3_Click(object sender, EventArgs e)
        {
            listBox1.Items.Clear();
        }

        private void button4_Click(object sender, EventArgs e)
        {
            
            double litre;
            int n;
            double ostupka;
            double sum;
            litre = Convert.ToDouble(textBox2.Text);
            n = Convert.ToInt32(textBox3.Text);
            ostupka = Convert.ToDouble(comboBox2.Text);
            sum= (litre*n- ((litre * n )* (ostupka / 100)))*1.2;
            textBox4.Text = sum.ToString();
            Form2 f = new Form2(textBox1.Text, textBox2.Text,textBox3.Text, comboBox1.Text, comboBox2.Text);
            f.Show();
        }
    }
}

// FORM 2
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;

namespace test2
{
    public partial class Form2 : Form
    {
        String a;
       
        public Form2(string b,string c,string d,string f,string a)
        {
            InitializeComponent();
            this.a = a+b+c+d+f;
        }

        private void button1_Click(object sender, EventArgs e)
        {
            StreamWriter s=new StreamWriter(@"File.txt");
            s.Write(a);
                s.Close();
        }
    }
}

#Create a student file (either .csv/.xlsx) that contains:
#Student Number
#Course (BSCS, BSIS, and BSIT only)
#Year
#Section

#Create unsorted 50 records of student.
#Analyze the records according to the courses, year and section. #Present the data in a graph.

#Determine how many students per course (pie graph)
#Determine how many students per year level in the course (line graph) #Determine how many students per section in every year level and course (bar graph)

library("readxl")
library("writexl")

courses <- c("BSCS", "BSIS", "BSIT")
#courses is for reference only. could be used if decided.
stud_data<-function(){
studnum <- c()
studname <- c()
studcourse <- c()
studyr <- c()
section <- c()


#requirement is up to 50 students only

i<-1
max <- 50
cont<-'exit'
roww<-0

while(cont!="n"||cont!="N"){
  
  if(file.exists("StudentRecord.xlsx")==TRUE){
    dt<-read_excel("StudentRecord.xlsx")
    items<-nrow(dt)
    roww=items
    print(paste("Record(s) : ",items))
    if(items==50){print("Record Full!");print("Only accepts 50 records");
      print("remove some data to continue...");
      break}
  }
  
  #check the number of students inside file
  
  snum <- readline(prompt=("STUDENT NUMBER > ")); print("________________")
  sname <- readline(prompt=("STUDENT NAME >")); print("________________")
  scourse <- readline(prompt=("[BSCS/BSIS/BSIT] COURSE >")); print("________________")
  syr <- readline(prompt=("YEAR >")); print("________________")
  sect <- readline(prompt=("SECTION >")); print("________________")
  
  studnum[i]=snum
  studname[i]=sname
  studcourse[i]=scourse
  studyr[i]=syr
  section[i]=sect
  
  print("=========================================")
  cont = readline(prompt=("Save Input? [y/n] >"))
  
  if(cont=='y'||cont=='Y'){ i<- i+1
  
  
  stud_data=data.frame(
    StudentNumber=c(studnum),
    StudentName=c(studname),
    StudentCourse=c(studcourse),
    StudentYear=c(studyr),
    Sections=c(section)
  )
  if(file.exists("StudentRecord.xlsx")==FALSE&&roww==0){
    write_xlsx(stud_data,"StudentRecord.xlsx", col_names = TRUE)
  }
  else{
    write_xlsx(stud_data,"Temporary.xlsx", col_names = TRUE)
    dt1<-read_excel("Temporary.xlsx")
    dt2<-read_excel("StudentRecord.xlsx")
    dtm<-merge(dt1,dt2, all.x=TRUE, all.y=TRUE)
    write_xlsx(dtm,"StudentRecord.xlsx")
    file.remove("Temporary.xlsx")
  }
  
  cont=readline(prompt=("Input Again? [y/n] >"))
  if(cont=='n'||cont=='N'){break;}
  
  }
  else if(cont=='N'||cont=='n'){
    cont=readline(prompt=("Input Again? [y/n] >"))
    if(cont=='n'||cont=='N'){break;}
  }
  else if((cont!='y'|cont!='Y')&&(cont!='N'|cont!='n'))
  { print("Invalid Input.");}
  
  
}
}

mn<-function(){
#x=stud_data()
#^call only stud_data for inputting records
if(file.exists("StudentRecord.xlsx")==TRUE){
  dt<-read_excel("StudentRecord.xlsx")
  s1<-sum(dt$StudentCourse=="BSIT")
  s2<-sum(dt$StudentCourse=="BSIS")
  s3<-sum(dt$StudentCourse=="BSCS")
  s1<-paste("BSIT = ",s1)
  s2<-paste("BSIS = ",s2)
  s3<-paste("BSCS = ",s3)
  lbl<-c(s1,s2,s3)
  vals<-as.numeric(gsub("[^[:digit:]]","",lbl))
  names(vals)<-seq_along(vals)
  lbl<-lbl[as.numeric(names(sort(vals, decreasing=TRUE)))]
  
  pie(table(dt$StudentCourse), main="Number of Students per Course", col=rainbow(3),clockwise=TRUE)
  legend("bottomright",lbl)
  #displaying students per course pie chart
  graphics.off()
  require(ggplot2)
  library(ggplot2)

 ggplot(data=dt,aes(x=StudentYear,y=StudentCourse))+geom_line(group=1)+geom_count()
 

 
}
}

mn()


- Download Nitro Pro 11 -
32bit: https://go.almaftuchin.com/nitropro11-x32
64bit: https://go.almaftuchin.com/nitropro11-x64

Buy Serial:
https://www.almaftuchin.com/product/license-nitro-pro-11-lifetime/

#include <stdio.h>
#include <stdlib.h>
#include<math.h>
#define PI 3.1415926535897932

double find_int(double a, double b, double eps, double (* f) (double x));
double helper(double a, double b, int eps, double (* f) (double x));

int main()
{
    double f (double x);
    double (* fpointer)(double x) = f;
    double a = 0, b = 1, eps = 0.0001;
    printf("Integral of f(x) from %g to %g with eps %g is about %g\n", a, b, eps, find_int(a, b, eps, fpointer));
    printf("Integral of cos(x) from %g to pi/2 with eps %g is about %g\n", a, eps, find_int(a, PI/2, eps, &cos));
    printf("Integral of cos(x) from %g to pi with eps %g is about %g\n", a, eps, find_int(a, PI, eps, &cos));
}

double find_int(double a, double b, double eps, double (* f) (double x)){
    int Np = 1, N = 2;
    double ansp = helper(a, b, Np, f), ans = helper(a, b, N, f);
    while (fabs(ansp - ans) > eps){
        Np = N;
        N *= 2;
        ansp = ans;
        ans = helper(a, b, N, f);
    }
    return ans;
}

double helper(double a, double b, int steps, double (* f) (double x)){
    double ans = 0;
    double step = fabs(a - b) / steps;
    double fa, fp = f(a);
    for(int i = 0; i < steps; i++){
        fa = fp;
        a += step;
        fp = f(a);
        ans += step * (fa + fp) / 2;
    }
    return ans;
}

double f(double x){
    return x*x*x;
}


-- @file floorer.lua
--
-------------------------------------------------------------------------------

-- wget https://raw.githubusercontent.com/renanmfd/turtlesworm/master/obsidian.lua obsidian

local args = {...}
local size
local count = 0

if args[1] == nil then
    size = 1
elseif tonumber(args[1]) < 1 then
    exit()
else
    size = tonumber(args[1])
end

while true do
    turtle.turnLeft()
    turtle.dig()
    turtle.turnRight()
    turtle.turnRight()
    turtle.dig()
    turtle.turnLeft()
    turtle.dig()
    turtle.forward()
    
    count = count + 1
    if count >= size then
        break
    end
end

turtle.turnLeft()
turtle.turnLeft()
turtle.digDown()
turtle.down()


import os
import shutil

#Python program that removes virus that makes folders named Conf and uses the inside of said folders to fill your processing power.
#Also removes the CnfCr0x120 - 125 files, that were made by same virus. 
#If the virus deleting program does not work, try upping the #allowed repeats number or changing the file locations

#IMPORTANT: RUNNING THIS PROGRAM WILL ALSO EMPTY YOUR TRASH PIN AND WINDOWS CACHE
#BY RUNNING THIS PROGRAM YOU AGREE THAT YOU ARE RESPONSIBILE TO ANY IMPORTANT FILES OR FOLDERS THAT MIGHT BE DELETED DURING THE RUNNING #PROCESS. TO ENSURE THAT NO FOLDERS YOU WANT TO KEEP ARE DELETED, PLEASE READ THE CODE AND MAKE SURE YOU UNDERSTAND IT
#If you have Minecraft installed know that it might be using a folder also named Conf and you may need to reinstall the game if you dont #backup the folder before(rename the folder before running this program and rename it back after)


# Get the path of the trashbin
trashbin_path = os.getenv('TRASH')

repeats = 0
while repeats < 3:#allowed repeats
    #removing all know conf files
    folder_location = 'C:\\Users\\Admin\\AppData\\Local\\Microsoft\\Conf'
    folder_location2 = 'C:\\Users\\Admin\\AppData\\Local\\Mozilla\\Conf'
    folder_location3 = 'C:\\Users\\Admin\\AppData\\Local\\Microsoft\\Conf'
    folder_location4 = 'C:\\Users\\Admin\\AppData\\Local\\Mozilla\\Conf'

    try:
        os.rmdir(folder_location)
        print("Folder 1 deleted successfully")
    except OSError:
        print("Folder 1 not deleted")
    try:
        os.rmdir(folder_location2)
        print("Folder 2 deleted successfully")
    except OSError:
        print("Folder 2 not deleted")
    try:
        os.rmdir(folder_location3)
        print("Folder 3 deleted successfully")
    except OSError:
        print("Folder 3 not deleted")
    try:
        os.rmdir(folder_location3)
        print("Folder 4 deleted successfully")
    except OSError:
        print("Folder 4 not deleted")

    #removing all CnfCr0x files
    file_path1 = "C:\\WINDOWS\\System32\\Tasks\\CnfCr0x120"
    file_path2 = "C:\\WINDOWS\\System32\\Tasks\\CnfCr0x121"
    file_path3 = "C:\\WINDOWS\\System32\\Tasks\\CnfCr0x122" 
    file_path4 = "C:\\WINDOWS\\System32\\Tasks\\CnfCr0x123"
    file_path5 = "C:\\WINDOWS\\System32\\Tasks\\CnfCr0x124"
    file_path6 = "C:\\WINDOWS\\System32\\Tasks\\CnfCr0x125" 
     
    if os.path.exists(file_path1): 
        os.remove(file_path1) 
        print("File 1 removed successfully") 
    else: 
        print("File 1 not found")
    if os.path.exists(file_path2): 
        os.remove(file_path2) 
        print("File 2 removed successfully") 
    else: 
        print("File 2 not found")
    if os.path.exists(file_path3): 
        os.remove(file_path3) 
        print("File 3 removed successfully") 
    else: 
        print("File 3 not found")
    if os.path.exists(file_path4): 
        os.remove(file_path4) 
        print("File 4 removed successfully") 
    else: 
        print("File 4 not found")
    if os.path.exists(file_path5): 
        os.remove(file_path5) 
        print("File 5 removed successfully") 
    else: 
        print("File 5 not found")
    if os.path.exists(file_path6): 
        os.remove(file_path6) 
        print("File 6 removed successfully") 
    else: 
        print("File 6 not found")

    #removes all conf files in computer
    for root, dirs, files in os.walk("C:\\"):
        if "Conf" in dirs:
            try:
                os.rmdir(os.path.join(root, "Conf"))
                print("removed ", os.path.join(root, 'Conf'))
            except:
                try:
                    shutil.rmtree(os.path.join(root, 'Conf'))
                    print("removed ", os.path.join(root, 'Conf'))
                except:
                    print("could not remove folder", os.path.join(root, 'Conf'))

    #empty trashpin
    # Loop through the files in the trashbin
    print('started emptying trash')
    try:
        for root, dirs, files in os.walk(trashbin_path):
            for file in files:
                # Delete the file
                os.remove(os.path.join(root, file))
        print('trash is empty')
    except:
        print('deleting files in trash failed')
    try:
        # Delete the empty folders in the trashbin
        for root, dirs, files in os.walk(trashbin_path):
            if not files:
                os.rmdir(root)
    except:
        print("deleting empty folders in trashpin failed, manual trash empty recommended")
    
    # Clear the Window's cache
    try:
        os.system('RunDll32.exe InetCpl.cpl, ClearMyTracksByProcess 8')
    except:
        print("could not clear cache")
    
    repeats+= 1
print('Done.')
print('Did', repeats, "repeats.")




Windows Explorer Problem 1 (5 / 10)
Потребно е да имплементирате Windows Explorer со помош на дрво. Јазлите треба да ви бидат фолдери/датотеки. Почетно ќе имате само еден фолдер c: и тој ви е тековен фолдер. Ќе ви биде дадена низа од команди што можат да бидат во еден од следните типови:
 
CREATE [име на фолдер/датотека] - треба да креирате нов фолдер/датотека во тековниот. Треба да внимавате при додавањето, новиот фолдер/датотека треба да се смести на онаа позиција така што сите фолдери/датотеки во тековниот фолдер ќе бидат подредени лексикографски
 
OPEN [име на фолдер/датотека] - го отварате фолдерот во тековниот фолдер и се менува тековниот фолдер
 
DELETE [име на фолдер/датотека] - го бришете фолдерот/датотеката
 
BACK - се враќате назад во претходниот фолдер
 
PATH - се печати патеката на тековниот фолдер на пример: c:\users\darko\mydocuments
 
PRINT - се печати целата структура на датотечниот систем така што секој фолдер/датотека се печати во еден ред со онолку празни места колку што е нивото на тој фолдер/датотека
 
Забелешка: Имињата на фолдерите/датотеките ќе бидат составени само од еден збор што содржи мали латинични букви. Сите операции ќе бидат валидни.
 
Име на класата: WindowsExplorer
 
 
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.util.StringTokenizer;
import java.util.Iterator;
import java.util.NoSuchElementException;
 
interface Tree<E> {
    ////////////Accessors ////////////
 
    public Node<E> root();
 
    public Node<E> parent(Node<E> node);
 
    public int childCount(Node<E> node);
 
    ////////////Transformers ////////////
    public void makeRoot(E elem);
 
    public Node<E> addChild(Node<E> node, E elem);
 
    public void remove(Node<E> node);
 
    ////////////Iterator ////////////
    public Iterator<E> children(Node<E> node);
    
}
 
interface Node<E> {
 
        public E getElement();
 
        public void setElement(E elem);
}
 
 
class SLLTree<E> implements Tree<E> {
    
    public SLLNode<E> root;
 
    public SLLTree() {
        root = null;
    }
 
    public Node<E> root() {
        return root;
    }
 
    public Node<E> parent(Node<E> node) {
        return ((SLLNode<E>) node).parent;
    }
 
    public int childCount(Node<E> node) {
        SLLNode<E> tmp = ((SLLNode<E>) node).firstChild;
        int num = 0;
        while (tmp != null) {
            tmp = tmp.sibling;
            num++;
        }
        return num;
    }
 
    public void makeRoot(E elem) {
        root = new SLLNode<E>(elem);
    }
 
    public Node<E> addChild(Node<E> node, E elem) {
        SLLNode<E> tmp = new SLLNode<E>(elem);
        SLLNode<E> curr = (SLLNode<E>) node;
        tmp.sibling = curr.firstChild;
        curr.firstChild = tmp;
        tmp.parent = curr;
        return tmp;
    }
 
    public void remove(Node<E> node) {
        SLLNode<E> curr = (SLLNode<E>) node;
        if (curr.parent != null) {
            if (curr.parent.firstChild == curr) {
                // The node is the first child of its parent
                // Reconnect the parent to the next sibling
                curr.parent.firstChild = curr.sibling;
            } else {
                // The node is not the first child of its parent
                // Start from the first and search the node in the sibling list and remove it
                SLLNode<E> tmp = curr.parent.firstChild;
                while (tmp.sibling != curr) {
                    tmp = tmp.sibling;
                }
                tmp.sibling = curr.sibling;
            }
        } else {
            root = null;
        }
    }
 
    class SLLTreeIterator<T> implements Iterator<T> {
 
        SLLNode<T> start, current;
 
        public SLLTreeIterator(SLLNode<T> node) {
            start = node;
            current = node;
        }
 
        public boolean hasNext() {
            return (current != null);
        }
 
        public T next() throws NoSuchElementException {
            if (current != null) {
                SLLNode<T> tmp = current;
                current = current.sibling;
                return tmp.getElement();
            } else {
                throw new NoSuchElementException();
            }
        }
 
        public void remove() {
            if (current != null) {
                current = current.sibling;
            }
        }
    }
 
    public Iterator<E> children(Node<E> node) {
        return new SLLTreeIterator<E>(((SLLNode<E>) node).firstChild);
    }
    
    void printTreeRecursive(Node<E> node, int level) {
        if (node == null)
            return;
        int i;
        SLLNode<E> tmp;
 
        for (i=0;i<level;i++)
            System.out.print(" ");
        System.out.println(node.getElement().toString());
        tmp = ((SLLNode<E>)node).firstChild;
        while (tmp != null) {
            printTreeRecursive(tmp, level+1);
            tmp = tmp.sibling;
        }
    }
    
    public void printTree() {
        printTreeRecursive(root, 0);
    }
    
    
    
}
 
class SLLNode<P> implements Node<P> {
 
    // Holds the links to the needed nodes
    public SLLNode<P> parent, sibling, firstChild;
    // Hold the data
    public P element;
 
    public SLLNode(P o) {
        element = o;
        parent = sibling = firstChild = null;
    }
 
    public P getElement() {
        return element;
    }
 
    public void setElement(P o) {
        element = o;
    }
}
 
public class WindowsExplorer {
    
    public static void main(String[] args) throws Exception {
        int i,j,k;
        
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));
        
        int N = Integer.parseInt(br.readLine());
        String commands[] = new String[N];
        
        for (i=0;i<N;i++)
            commands[i] = br.readLine();
            
        br.close();
        
        SLLTree<String> tree = new SLLTree<String>();
        tree.makeRoot("c:");
        
        build(tree,commands);
        
        
    }
    
    public static void build(SLLTree<String> tree, String [] commands) {
        
        SLLNode<String> curr = tree.root;
        
        for (int i=0; i < commands.length; ++i) {
            
            String parts[] = commands[i].split(" ");
            
            String command = parts[0];
            String node = null;
            if (parts.length == 2)
                node = parts[1];
            
            switch(command) {
            
            case "CREATE": {
                SLLNode<String> temp = curr.firstChild;
                if (temp == null || (temp.element.compareTo(node) > 0)) {
                    tree.addChild(curr,node);
                }
                else  {
                    SLLNode<String> ins = new SLLNode(node);
                    while (temp.sibling != null) {
                        if (node.compareTo(temp.sibling.element) < 0) {
                            ins.sibling = temp.sibling;
                            temp.sibling = ins;
                            ins.parent = curr;
                            break;
                        }
                        temp = temp.sibling;
                    }
                    ins.parent = curr;
                    temp.sibling = ins;
                }
                break;
            }
            
            case "OPEN": {
                SLLNode<String> toOpen = curr.firstChild;
                while (toOpen != null) {
                    if (toOpen.element.equals(node))
                        curr = toOpen;
                    toOpen = toOpen.sibling;
                }
                break;
            }
            
            case "DELETE": {
                SLLNode<String> toDelete = curr.firstChild;
                if (toDelete != null&&toDelete.element.equals(node)) {
                    toDelete.parent.firstChild = toDelete.sibling;
                    break;
                }
                while (toDelete.sibling != null) {
                    if (toDelete.sibling.element.equals(node)) {
                        toDelete.sibling = toDelete.sibling.sibling;
                        break;
                    }
                    toDelete = toDelete.sibling;
 
                }
                break;
            }
            
            case "BACK": {
                curr = curr.parent;
                break;
            }
            
            case "PATH": {
                SLLNode<String> temp = curr;
                StringBuilder sb = new StringBuilder();
                    
                while (temp != tree.root) {
                        sb.insert(0, "\\");
                        sb.insert(0, temp.element);
                        temp = temp.parent;
                    }
                    sb.insert(0,"\\");
                    sb.insert(0, tree.root.element);
                    System.out.println(sb.toString());
                break;
            }
            
            case "PRINT": {
                tree.printTree();
                break;
            }
            }   
        }
    }
    
}
 
 
 
Sample input
15
CREATE a
OPEN a
CREATE b
CREATE d
CREATE c
PATH
OPEN c
PATH
CREATE u
CREATE g
CREATE h
PATH
BACK
PATH
PRINT
Sample output
c:\a\
c:\a\c\
c:\a\c\
c:\a\
c:
 a
  b
  c
   g
   h
   u
  d

print("My id = C193033")
print("My name is Arman Hossain")
print("I am enrolled is 6th semester")
print("My section is 6AM")

#This is a single line comment
"""
I am arman hossain.I am Bangladeshi.
But i dont like this country.I wanto go abroad
"""

#string functionalities
name = "Arman Hossain"
age = 25
institution = "Internaional Islamic University Chittagong"
contact = "+8801874015451"
print("My name is " + name)
print("My age is" , age)
print("My institution is " + institution)
print("My contact is " + contact)

#int type variable functionalities
number1 = 100
number2 = 200
print(number1 + number2)
print(number1 * number2)
print(number1 - number2)
print(number1 / number2)


#float type variable functionalities
a = 10.45
b = 20.58
print(a + b)
print(a - b)
print(a * b)
print(a / b)




h1{
    color: darksalmon;
    margin-top: 50px;
    text-align: center;
}

body{
    margin: 0;
}

.jumbotron {
    background-color: #2EC1AC;
    padding: 50px 100px;
    display: flex;
    flex-direction: row;
    justify-content: space-between;
    align-items: center;
}

.jumbotron img {
    width: 300px;
    margin: 30px;
}

.jumbotron h3,
p {
    color: white;
}

.main-container {
    flex-direction: row;
    display: flex;
    justify-content: center
}

.package-container {
    margin: 20px;
    padding: 16px;
    border: 3px solid black;
    border-radius: 16px;
    box-shadow: 5px 5px 10px
}

.package-container p {
    color: black
}

.package-container img {
    width: 300px;
}

button {
    background-color: #5fc8f5;
    padding: 10px;
    color: white;
    border-radius: 10px;
    border: none;

}

.left {
    margin-left: 60%;
}

table,
th,
td,
tr,
td {
    border: 1px solid black;
    border-collapse: collapse;
    padding: 10px;
}

th {
    background-color: darkseagreen;
    color: white;
}

.table {
    display: flex;
    justify-content: center;
    text-align: center;
}

.table img {
    width: 200px;
}

header {
    background-color: #2EC1AC;
    color: white;
    position: fixed;
    top: 0px;
    left: 0px;
    right: 0px;
    height: 50px;
    display: flex;
}

.header-title {
    text-align: left;
    color: white;
    margin: 14px;
    font-size: 18px;
}

nav {
    position: absolute;
    right: 0;
    display: flex;
}

a {
    text-decoration: none ;
    color: white;
    float: left;
    padding: 15px;
}
a:hover {
    color: black;
}
.package-container:hover {
    cursor: pointer;
    background-color: rgb(236, 236, 236);
}

button:hover {
    cursor: pointer;
    background-color: rgb(41, 159, 120);
}

footer {
    color: white;
    text-align: center;
    background-color: #2EC1AC;
    padding: 10px;
    margin-top: 50px;
}

.formcontainer {
    text-align: center;
}

.formcontainer img {
    width: 300px;
}

form {
    text-align: left;
    width: 50%;
    margin-left: auto;
    margin-right: auto;
}

input {
    width: 100%;
    display: inline-block;
    margin-bottom: 10px;
    padding: 5px;
    border-radius: 3px;
}

label {
    display: inline-block;
    margin-bottom: 5px;
    font-weight: bold;
}

select {
    width: 100%;
    display: inline-block;
    margin-bottom: 10px;
    padding: 5px;
    border-radius: 3px;
}

String = 20221133

Loop, parse, String, , ; После String следующий параметр пустой, в этом слушае цикл считывает строку побуквенно
{
	If (A_Index < 5)
		year := year A_LoopField
	If (A_Index > 4) and (A_Index < 7)
		month := month A_LoopField
	If (A_Index > 6) and (A_Index < 9)
		day := day A_LoopField
}

MsgBox, Год: %year% `nМесяц: %month% `nДень: %day%

module TristantineDisplay
  PANEL_WIDTH = 176
  PANEL_HEIGHT = 240
  
  BACKGROUND = Color.new(200,191,231)
  BORDER = Color.new(0,0,0)
  
  CENTER_BORDER = Color.new(195,195,195)
  CENTER_BG = Color.new(248,248,248)
  
  TEXT_BASE_COLOR = Color.new(248,248,248)
  TEXT_SHADOW_COLOR = Color.new(128,120,112)
  
  FONT_NAME = MessageConfig::SMALL_FONT_NAME
  FONT_SIZE = MessageConfig::SMALL_FONT_SIZE
  FONT_Y_OFFSET = MessageConfig::FONT_Y_OFFSET
  
  ROW_LENGTH = 6 #Number of Pokemon displayed per row
  PANEL_GAP_X = 2
  PANEL_GAP_Y = 2
  
  TYPE_COLORS = [
  #Light,Main,Dark
  [Color.new(216,216,192),Color.new(168,168,120),Color.new(112,88,72)],  #Normal
  [Color.new(240,128,48),Color.new(192,48,40),Color.new(72,64,56)],      #Fighting
  [Color.new(200,192,248),Color.new(168,144,240),Color.new(112,88,152)], #Flying
  [Color.new(216,128,184),Color.new(160,64,160),Color.new(72,56,80)],    #Poison
  [Color.new(248,248,120),Color.new(224,192,104),Color.new(136,104,48)], #Ground
  [Color.new(224,192,104),Color.new(184,160,56),Color.new(136,104,48)],  #Rock
  [Color.new(216,224,48),Color.new(168,184,32),Color.new(120,144,16)],   #Bug
  [Color.new(168,144,240),Color.new(112,88,152),Color.new(72,56,80)],    #Ghost
  [Color.new(216,216,192),Color.new(184,184,208),Color.new(128,120,112)],#Steel
  [Color.new(112,200,176),Color.new(104,160,144),Color.new(32,104,96)],  #???
  [Color.new(248,208,48),Color.new(240,128,48),Color.new(192,48,40)],    #Fire
  [Color.new(152,216,216),Color.new(104,144,240),Color.new(128,120,112)],#Water
  [Color.new(192,248,96),Color.new(120,200,80),Color.new(88,128,64)],    #Grass
  [Color.new(248,248,120),Color.new(248,208,48),Color.new(184,160,56)],  #Electric
  [Color.new(248,192,176),Color.new(248,88,136),Color.new(144,96,96)],   #Psychic
  [Color.new(208,248,232),Color.new(152,216,216),Color.new(144,144,160)],#Ice
  [Color.new(184,160,248),Color.new(112,56,248),Color.new(72,56,144)],   #Dragon
  [Color.new(168,168,120),Color.new(112,88,72),Color.new(72,64,56)],     #Dark
  [Color.new(248,216,224),Color.new(240,168,176),Color.new(168,120,136)],#Fairy
  
  ]
  
  def self.pbFakedexPanel(species,regiondex)
    species = GameData::Species.get(species)
    monotype = (species.types.length == 1)
    type = species.types[0]
    type2 = species.types[1] if !monotype
    type_number = GameData::Type.get(type).icon_position
    colors = TYPE_COLORS[type_number]
    color_light = colors[0]
    color_main = colors[1]
    color_dark = colors[2]
    base = Bitmap.new(PANEL_WIDTH,PANEL_HEIGHT)
    base.fill_rect(0, 0, base.width, base.height, BACKGROUND)
    base.fill_rect(2, 0, base.width - 4 , base.height, BORDER)
    base.fill_rect(0, 2, base.width , base.height - 4, BORDER)
    base.fill_rect(2, 2, base.width - 4, base.height - 4, color_light)
    base.fill_rect(4, 4, base.width - 6, base.height - 6, color_dark)
    base.fill_rect(4, 4, base.width - 8, base.height - 8, color_main)
    base.fill_rect(4, 22, 168, 168, BORDER)
    base.fill_rect(6, 24, 164, 164, CENTER_BORDER)
    base.fill_rect(8, 26, 160, 160, CENTER_BG)
    
    shadow = Bitmap.new(GameData::Species.shadow_filename(species))
    shadow_x = (base.width/2) - (shadow.width/2)
    shadow_y = 182 - shadow.height
    shadow_rect = Rect.new(0,0,shadow.width,shadow.height)
    base.blt(shadow_x, shadow_y, shadow, shadow_rect)
    sprite = Bitmap.new(GameData::Species.front_sprite_filename(species.id))
    metrics = GameData::SpeciesMetrics.get_species_form(species.id,0)
    sprite_x = (base.width/2) - (sprite.width/2)
    sprite_x += (metrics.front_sprite[0] * 2)
    sprite_y = 14
    sprite_y += metrics.front_sprite[1] * 2
    sprite_rect = Rect.new(0,0,sprite.width,sprite.height)
    base.blt(sprite_x, sprite_y, sprite, sprite_rect)
    
    base.font.name = FONT_NAME
    base.font.size = FONT_SIZE
    base.text_offset_y = FONT_Y_OFFSET
    nationalDexList = [:NONE]
    dexnum = regiondex.index(species.species) + 1
    dexnum = sprintf("%03d", dexnum)
    textpos = [
    [dexnum, 8, 6, 0, TEXT_BASE_COLOR, TEXT_SHADOW_COLOR],
    ["#{species.real_name.upcase}", 172, 6, 1, TEXT_BASE_COLOR, TEXT_SHADOW_COLOR],
    ]
    pbDrawTextPositions(base,textpos)
    typebitmap    = AnimatedBitmap.new(_INTL("Graphics/Pictures/types"))
    type_number = GameData::Type.get(type).icon_position
    type_rect = Rect.new(0, type_number * 28, 64, 28)
    type_x = (monotype) ? 56 : 18
    if type2 
      type2_number = GameData::Type.get(type2).icon_position
      type2_rect = Rect.new(0, type2_number * 28, 64, 28)
      type2_x = 94
    end
    base.fill_rect(type_x, 198, 64, 32, CENTER_BG)
    base.fill_rect(type_x - 2, 200, 68, 28, CENTER_BG)
    base.blt(type_x, 200, typebitmap.bitmap, type_rect)
    if type2
      base.fill_rect(type2_x, 198, 64, 32, CENTER_BG)
      base.fill_rect(type2_x - 2, 200, 68, 28, CENTER_BG)
      base.blt(type2_x, 200, typebitmap.bitmap, type2_rect)
    end
    return base
  end
  
  def self.pbFullFakedex(region=-1)
    regionalSpecies = pbAllRegionalSpecies(region)
    if !regionalSpecies || regionalSpecies.length == 0
      # If no Regional Dex specified, use the National Pokédex
      regionalSpecies = []
      GameData::Species.each_species { |s| regionalSpecies.push(s.id) }
    end
    columns = (regionalSpecies.length/ROW_LENGTH)
    columns += 1 if !((regionalSpecies.length%ROW_LENGTH) == 0)
    fullwidth = (PANEL_WIDTH + PANEL_GAP_X) * ROW_LENGTH
    fullheight = (PANEL_HEIGHT + PANEL_GAP_Y) * columns
    fullbase = Bitmap.new(fullwidth,fullheight)
    fullbase.fill_rect(0, 0, fullbase.width, fullbase.height, BACKGROUND)
    for i in 0...regionalSpecies.length
      s = regionalSpecies[i]
      newbitmap = self.pbFakedexPanel(s,regionalSpecies)
      newrect = Rect.new(0,0,newbitmap.width,newbitmap.height)
      newx = (i%ROW_LENGTH)*(PANEL_WIDTH + PANEL_GAP_X)
      newy = (i/ROW_LENGTH)*(PANEL_HEIGHT + PANEL_GAP_Y)
      fullbase.blt(newx, newy, newbitmap, newrect)
    end
    fullbase.to_file("Graphics/Pictures/DexDisplay.png")
  end

end

Pasted at: 15/12/2022 10:31
Test data generated by 98823c9ce7f73d22c0e84a43ab6f6ed3

DATA_ID_TESTDATATOFIND

www.qatesting.com
blog.qatesting.com
www.qatesting.com/index.html
www.qatesting.com/home
www.qatestingblog.com
www.qatestingtutorials.com
shop.qatesting.co.uk
admin.qatesting.io 
qatesting
qatesting.co.uk
qatesting.cn
qatesting.io
findmetesting.com
www.qatesting-blog.com
www.qatesting-blog23.com
www.qatesting
www.qatesting.co.uk
www.qatesting.cn
www.qatesting.io
www.findmetesting.com
www.wobsut.gov

The difference is that QA is process oriented and QC is product oriented.

Testing, therefore is product oriented and thus is in the QC domain. Testing for quality isn't assuring quality, it's controlling it.



Fuzzy-Wuzzy	- DASH
Fuzzy;Wuzzy	- COLON
Fuzzy!Wuzzy	- EXCLAMATION
Fuzzy£Wuzzy	- POUND
Fuzzy#Wuzzy	- HASH
Fuzzy%Wuzzy	- PERCENT
Fuzzy@Wuzzy	- AT
Fuzzy&Wuzzy	- AND
Fuzzy=Wuzzy	- EQUAL
Fuzzy§Wuzzy
Fuzzy~Wuzzy
Fuzzy?Wuzzy	 - QUESTION MARK
Fuzzy$Wuzzy	 - DOLLAR
Fuzzy[Wuzzy] - BRACKETS
Fuzzy^Wuzzy
Fuzzy(Wuzzy) - BRACKETS
Fuzzy+Wuzzy	 - PLUS
Fuzzy±Wuzzy	 - PLUS/MINUE
Fuzzy|Wuzzy	 - PIPE
Fuzzy/Wuzzy	 - FORWARDSLASH
Fuzzy<Wuzzy> - BRACKETS
Fuzzy{Wuzzy} - CURLY
Fuzzy\Wuzzy  - BACKSLASH
